{"category": "ham", "to_address": "\"Michael Scondo\" <michael.scondo@phil.stud.uni-erlangen.de>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: strange unexpected deadlock", "body": "On 6/23/07, Michael Scondo  wrote:\n\n> sub thread1{\n>                 print \"1\\n\";\n>                 lock $x;\n>                 print \"locked x: 1\\n\";\n>                 cond_wait $x;\n\nCan't get past here until $x is signalled by another thread, and\nunlocked by all other threads.\n\n>                 print \"thread1\\n\";\n>                 lock $y;\n>                 cond_signal $y;\n>                 print \"t1\\n\";\n> }\n>\n> sub thread2{\n>                 sleep 1;\n>                 lock $y;\n> #               {\n>                         lock $x;\n>                         print \"locked x: 2\\n\";\n>                         cond_signal $x;\n> #               }\n\nIf the curly braces of that naked block were present, the lock on $x\nwould be released here, at the end of that scope. But it's still\nlocked, because cond_signal didn't unlock it either. (Did you think it\nwould?)\n\n>                 print \"thread2\\n\";\n>                 sleep 1;\n>                 cond_wait $y;\n\nCan't get past here until $y is signalled by another thread, and\nunlocked by all other threads.\n\n>                 print \"t2\\n\";\n> }\n\nAs written, this is the end-of-scope for the lock on $x (as well as\nthe one on $y). But unless some third thread can rescue these first\ntwo, they seem to be deadlocked, with the first waiting for $x to be\nunlocked and the second waiting for $y to be signalled.\n\nAs you discovered, using the inner braces will release the lock on $x\nsoon enough to avoid the deadlock.\n\nBy the way, thanks greatly for the detailed, self-contained test case;\nit showed exactly what you were doing.\n\nHave fun with Perl!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}