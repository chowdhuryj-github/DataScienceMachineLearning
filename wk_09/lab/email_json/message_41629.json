{"category": "ham", "to_address": "\"Chas Owens\" <chas.owens@gmail.com>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Re: 'x' vs. 'xx'", "body": "Chas Owens wrote:\n> I am almost certain that the following code is in list context.\n>\n> pugs> my @a = '-' x 5, 'foo', '-' x 5;\n> pugs> @a\n> (\"-----\", \"foo\", \"-----\")\n> pugs> my @b = cat('-' xx 5), 'foo', cat('-' xx 5)\n> (\"-\", \"-\", \"-\", \"-\", \"-\", \"foo\", \"-\", \"-\", \"-\", \"-\", \"-\")\n>\n> However, it does seem that Pug's version of cat does not handle the\n> Str emulation, so that may fix it, but I don't see how it could since\n> (at least in my mind) the code above is in list context.\n\nYou're right; it is.\n\n>From what you're saying, I get the impression that you think that \"'-'\nx 5\" ought to produce a single string of five dashes regardless of\nwhether the context is item or list.  Correct?  (Note: I'm not asking\nabout what the spec says, since what it says is potentially up for\nrevision, given sufficient cause; I'm asking about what you think the\nspec _should_ say.)  If so, \"cat($n xx *)\" is not an adequate\nreplacement for \"$n x *\", since it produces a list of one-character\nstrings if used in list context.  OTOH, \"~cat($n xx *)\" might work.\n\nPersonally, I would tend to favor the notion that infix: always\nproduces a single string.  With this in mind, I'm now leaning toward\n\"~cat($a xx $n)\" as the more verbose equivalent of \"$a x $n\".  You\nalways produce a single string, and you do so lazily (according to the\nway that 'cat' works in item context).\n\n-- \nJonathan \"Dataweaver\" Lang\n\n"}