{"category": "ham", "to_address": "\"Steve Pittman\" <spittma1@jhmi.edu>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: Keeping a process alive..", "body": "On 5/4/07, Steve Pittman  wrote:\n\n> I would be interested in a reference for PID monitoring for cases where\n> we have more that one *identical* spawned process to consider*\n\nMaybe you want something like POE?\n\n    http://search.cpan.org/author/RCAPUTO/POE-0.9989/lib/POE.pm\n\nBut here's one idea of how multiple processes could be monitored by a Perl loop:\n\n  while (1) {\n    my $did_stuff = 0;  # starts out false\n    if (...there are dead procs...) {\n      ...reap dead procs...\n      $did_stuff++;\n    }\n    if (...more procs are needed...) {\n      ...spawn new procs...\n      $did_stuff++;\n    }\n    redo if $did_stuff;\n    sleep 30;  # nothing to do\n  }\n\nThere are details hidden in the blanks. For one, programs that launch\nmany processes at once can easily tie up your system. I'd make the\ncode that tells whether \"more procs are needed\" check whether some\nprocess is being respawned many times in the last few seconds, and\nperhaps consider whether I'd recently forked off several new processes\nas part of the decision.\n\nCheers!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}