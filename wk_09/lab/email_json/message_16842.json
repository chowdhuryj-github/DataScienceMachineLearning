{"category": "ham", "to_address": "James E Keenan <jkeen_via_google@yahoo.com>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Build system (was Re: Is Parrot 1.0 too late?)", "body": "James E Keenan wrote:\n> \n> Since November I've been working on maintaining those of Parrot's \n> configuration and build tools written in Perl 5.  Lately I've been \n> trying to recruit others to help in that process.  The discussion in \n> this thread suggests that at some future point some or all of the Perl \n> scripts/modules I've been working on will be replaced with ... something \n> else.\n\nThis has been the plan all along. Unfortunately it's not documented in \ndetail anywhere, but it has appeared in multiple mailing list \ndiscussions over the years.\n\n\n\n\nWe can't depend on Perl 5 because we're replacing it.\n\n> This, of course, makes me wonder what I'm doing now and, more \n> importantly, makes me wonder what to say to other people with Perl 5 \n> skills who want to help with the Parrot project.\n\nAgile development in action. We can't know the full set of requirements \nfor the build system until we have a working build system. And we can't \ndelay all development waiting for the perfect build system. So we work \nin stages of refinement. Your work here is enormously helpful.\n\n> This is not simply an ego thing on my part.  I've written very little of \n> the Perl 5 tools and taken on maintenance of a bit more, but one thing I \n> realize is how much of Parrot's source code is written in Perl 5.  How \n> much of that must eventually be replaced?\n\nHow much needs to be replaced depends on the strategy we take. One \npossibility is to take some of the core pieces, make any minor \nmodifications needed to run on Parrot's implementation of Perl 5, ship \nthem as compiled bytecode, and run them on miniparrot. There are \nadvantages and disadvantages to a bootstrapping strategy like this, it \nwill work for some parts of the build system but not for others.\n\nSome parts of the build system can be run on the maintainer side rather \nthan the user side. So, the release manager and developers can have a \ndependency on Perl 5, while the end users get pre-generated C files and \nso avoid the dependency. (Similar to the current strategy for IMCC where \nindividual users of Parrot don't need lex and yacc.)\n\nSome parts may be written in PIR (again, only those parts that are late \nenough to have a working miniparrot).\n\n> And who is going to maintain it?  In my experience Perl 5 programmers \n> are relatively abundant while C programmers (these days) are rarer.  How \n> many people might actually learn the yet-to-be-designed HLL that would \n> presumably replace a lot of the Perl 5 we currently use?\n\nAgreed, we don't want to write an entire build system in C. It's a \nhorrible language for the kinds of dynamic effects we need in the build \nsystem. Some parts will be in C, but just enough to get miniparrot started.\n\n> So, can someone draw a roadmap of:\n> \n> -- *which parts* of Parrot's configuration and build tools *need* to be \n> replaced with something else;\n> \n> -- *why* that replacement is necessary;\n> \n> -- *when* in the design process that replacement must take place; and\n> \n> -- *how* that replacement will be maintained going forward from there?\n\nThe biggest thing we need to start this roadmap is documentation on the \ncurrent configuration and build system. The current requirements and \nprocess for building Parrot are the starting point for all future \nrefinements to the build system. You're in a better position to draft \nthat than anyone else in the project right now. Interested?\n\nAllison\n\n"}