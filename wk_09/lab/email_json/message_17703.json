{"category": "ham", "to_address": "beginners@perl.org", "from_address": "zentara <zentara@highstream.net>", "subject": "Re: Encryption", "body": "On Fri, 27 Apr 2007 11:33:47 +0200, andreas.moroder@sb-brixen.it\n(Andreas Moroder) wrote:\n\n>Hello,\n>\n>I have to calculate a hash of username and password in perl.\n>The calculation should be done this way:\n>\n>1. Concatenate the username and the password to produce a plaintext string;\n>2. Convert the plaintext string to uppercase characters;\n>3. Convert the plaintext string to multi-byte storage format; ASCII \n>characters have the\n>high byte set to 0x00;\n>4. Encrypt the plaintext string (padded with 0s if necessary to the next \n>even block length)\n>using the DES algorithm in cipher block chaining (CBC) mode with a fixed \n>key value of\n>0x0090687678ABCDEF;\n>5. Encrypt the plaintext string again with DES-CBC, but using the last \n>block of the output\n>of the previous step (ignoring parity bits) as the encryption key. The \n>last block of the\n>output is converted into a printable string to produce the password hash \n>value.\n>\n>Is it possible to implement this in perl ?\n>Is the Crypt-DES Module on CPAN the right module and how can I convert \n>standard string to Multibyte storage ( UTF-16 ? )\n>An example ist\n>\n>User: example\n>password: test\n>hash: BDA63848A8C31752\n>\n>I don't need this script to hack anything, we would like to modify oru \n>oracle paasword from a webfrontend.\n>\n>Thanks\n>Andreas\n\nI'm a bit unclear about step 5, but it should be doable in Perl once\nyou determine the EXACT steps you need to take. Here are some tips\nto maybe get you through the first four steps.\nThis my be far off from what Oracle needs, but it seems to work\nfor your first 4 steps. Some questions remain, like do you need a salt?\nWhat do you use to convert back to plaintext hash? Base64encode?\nWhat does \"ignore parity bits\" mean?\n\nYou may want to ask this on http://perlmonks.org, where more\nsaavy encryption and Oracle monks hang out.  But make sure you\ncan specify the EXACT steps needed. I'm sure it can be done.\n\nTo be honest, I would assume that the Oracle designers have made this\nquite tricky to avoid hacking their passwords.\n\n#!/usr/bin/perl\nuse warnings;\nuse strict;\nuse Crypt::CBC;\nuse Encode;\n\nmy $key = pack(\"H16\", \"0090687678ABCDEF\");\nmy $user = 'example';\nmy $password = 'test';\n\nmy $plaintext = uc($user.$password);\nprint(\"$plaintext\\n\");\n\n#converted it to bytes via utf-16le (take a look at \"perldoc\nperlunicode\")\nmy  $octets = encode(\"utf-16\", $plaintext);\nprint \"utf16->  $octets\\n\";\n\nmy $cipher = Crypt::CBC->new(\n   -key    => $key,\n   -cipher => 'DES',\n#   -salt   => 1,\n);\n\nmy $ciphertext = $cipher->encrypt($octets);\nprint(\"$ciphertext\\n\");\n\nmy $recovered = $cipher->decrypt($ciphertext);\nprint(\"$recovered\\n\");\n\n# step 5 I'm not sure of. What do you mean by \n# encrypt plaintext again, ignoring parity bits,  \n# and what do you want to use to convert it to\n# plaintext... probably base64encoding?\n\n__END__\n\n\n\n\n\n-- \nI'm not really a human, but I play one on earth.\nhttp://zentara.net/japh.html\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}