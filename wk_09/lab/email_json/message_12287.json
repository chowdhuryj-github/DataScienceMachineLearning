{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 177: added a useful tool for dumping a ctdb in\n\thttp://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 177\nrevision-id: tridge@samba.org-20070422072427-3687afmjkdro3it4\nparent: tridge@samba.org-20070421212439-2d1ex491g730wizc\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Sun 2007-04-22 09:24:27 +0200\nmessage:\n  added a useful tool for dumping a ctdb\nadded:\n  tools/ctdb_dump.c              ctdb_dump.c-20070422072106-vavpof4y9zz8z2lh-1\nmodified:\n  Makefile.in                    makefile.in-20061117234101-o3qt14umlg9en8z0-1\n  common/util.c                  util.c-20061117234101-o3qt14umlg9en8z0-20\n  include/includes.h             includes.h-20061117234101-o3qt14umlg9en8z0-17\n=== added file 'tools/ctdb_dump.c'\n--- a/tools/ctdb_dump.c\t1970-01-01 00:00:00 +0000\n+++ b/tools/ctdb_dump.c\t2007-04-22 07:24:27 +0000\n@@ -0,0 +1,112 @@\n+/* \n+   ctdb status tool\n+\n+   Copyright (C) Andrew Tridgell  2007\n+\n+   This library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2 of the License, or (at your option) any later version.\n+\n+   This library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with this library; if not, write to the Free Software\n+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+*/\n+\n+#include \"includes.h\"\n+#include \"lib/events/events.h\"\n+#include \"system/filesys.h\"\n+#include \"popt.h\"\n+#include \"cmdline.h\"\n+#include \"../include/ctdb_private.h\"\n+#include \"db_wrap.h\"\n+\n+\n+/*\n+  show usage message\n+ */\n+static void usage(void)\n+{\n+\tprintf(\"Usage: ctdb_dump \\n\");\n+\texit(1);\n+}\n+\n+static int traverse_fn(struct tdb_context *tdb, TDB_DATA key, TDB_DATA data, void *p)\n+{\n+\tstruct id {\n+\t\tdev_t dev;\n+\t\tino_t inode;\n+\t} *id;\n+\tstruct ctdb_ltdb_header *h = (struct ctdb_ltdb_header *)data.dptr;\n+\tchar *keystr;\n+\tid = (struct id *)key.dptr;\n+\tif (key.dsize == sizeof(*id)) {\n+\t\tkeystr = talloc_asprintf(NULL, \"%llu:%llu\", \n+\t\t\t\t\t (uint64_t)id->dev, (uint64_t)id->inode);\n+\t} else {\n+\t\tkeystr = hex_encode(NULL, key.dptr, key.dsize);\n+\t}\n+\tprintf(\"  rec %s dmaster=%u\\n\", keystr, h->dmaster);\n+\ttalloc_free(keystr);\n+\treturn 0;\n+}\n+\n+/*\n+  main program\n+*/\n+int main(int argc, const char *argv[])\n+{\n+\tstruct poptOption popt_options[] = {\n+\t\tPOPT_AUTOHELP\n+\t\tPOPT_CTDB_CMDLINE\n+\t\tPOPT_TABLEEND\n+\t};\n+\tint opt;\n+\tconst char **extra_argv;\n+\tint i, extra_argc = 0;\n+\tpoptContext pc;\n+\tstruct tdb_wrap *db;\n+\n+\tpc = poptGetContext(argv[0], argc, argv, popt_options, POPT_CONTEXT_KEEP_FIRST);\n+\n+\twhile ((opt = poptGetNextOpt(pc)) != -1) {\n+\t\tswitch (opt) {\n+\t\tdefault:\n+\t\t\tfprintf(stderr, \"Invalid option %s: %s\\n\", \n+\t\t\t\tpoptBadOption(pc, 0), poptStrerror(opt));\n+\t\t\texit(1);\n+\t\t}\n+\t}\n+\n+\t/* setup the remaining options for the main program to use */\n+\textra_argv = poptGetArgs(pc);\n+\tif (extra_argv) {\n+\t\textra_argv++;\n+\t\twhile (extra_argv[extra_argc]) extra_argc++;\n+\t}\n+\n+\tif (extra_argc < 1) {\n+\t\tusage();\n+\t}\n+\n+\tfor (i=0;itdb, traverse_fn, NULL);\n+\t\t\n+\t\ttalloc_free(db);\n+\t}\n+\n+\treturn 0;\n+}\n\n=== modified file 'Makefile.in'\n--- a/Makefile.in\t2007-04-20 10:07:47 +0000\n+++ b/Makefile.in\t2007-04-22 07:24:27 +0000\n@@ -30,7 +30,7 @@\n \n OBJS = @TDBOBJ@ @TALLOCOBJ@ @LIBREPLACEOBJ@ @INFINIBAND_WRAPPER_OBJ@ $(EXTRA_OBJ) $(EVENTS_OBJ) $(CTDB_OBJ)\n \n-BINS = bin/ctdbd bin/ctdbd_test bin/ctdb_test bin/ctdb_bench bin/ctdb_messaging bin/ctdb_fetch bin/ctdb_fetch1 bin/lockwait bin/ctdb_status @INFINIBAND_BINS@\n+BINS = bin/ctdbd bin/ctdbd_test bin/ctdb_test bin/ctdb_bench bin/ctdb_messaging bin/ctdb_fetch bin/ctdb_fetch1 bin/lockwait bin/ctdb_status bin/ctdb_dump @INFINIBAND_BINS@\n \n DIRS = lib bin\n \n@@ -61,6 +61,10 @@\n \t@echo Linking $@\n \t@$(CC) $(CFLAGS) -o $@ tools/ctdb_status.o $(OBJS) $(LIB_FLAGS)\n \n+bin/ctdb_dump: $(OBJS) tools/ctdb_dump.o \n+\t@echo Linking $@\n+\t@$(CC) $(CFLAGS) -o $@ tools/ctdb_dump.o $(OBJS) $(LIB_FLAGS)\n+\n bin/ctdbd_test: $(OBJS) direct/ctdbd_test.o\n \t@echo Linking $@\n \t@$(CC) $(CFLAGS) -o $@ direct/ctdbd_test.o \n\n=== modified file 'common/util.c'\n--- a/common/util.c\t2007-04-16 06:01:37 +0000\n+++ b/common/util.c\t2007-04-22 07:24:27 +0000\n@@ -194,3 +194,16 @@\n \n \treturn file_lines_parse(p, size, numlines, mem_ctx);\n }\n+\n+char *hex_encode(TALLOC_CTX *mem_ctx, const unsigned char *buff_in, size_t len)\n+{\n+\tint i;\n+\tchar *hex_buffer;\n+\n+\thex_buffer = talloc_array(mem_ctx, char, (len*2)+1);\n+\n+\tfor (i = 0; i < len; i++)\n+\t\tslprintf(&hex_buffer[i*2], 3, \"%02X\", buff_in[i]);\n+\n+\treturn hex_buffer;\n+}\n\n=== modified file 'include/includes.h'\n--- a/include/includes.h\t2007-04-17 15:59:39 +0000\n+++ b/include/includes.h\t2007-04-22 07:24:27 +0000\n@@ -35,3 +35,5 @@\n _PUBLIC_ struct timeval timeval_current_ofs(uint32_t secs, uint32_t usecs);\n double timeval_elapsed(struct timeval *tv);\n char **file_lines_load(const char *fname, int *numlines, TALLOC_CTX *mem_ctx);\n+char *hex_encode(TALLOC_CTX *mem_ctx, const unsigned char *buff_in, size_t len);\n+\n\n"}