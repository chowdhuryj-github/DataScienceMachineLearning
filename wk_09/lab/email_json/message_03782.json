{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jelmer@samba.org", "subject": "svn commit: samba r22203 - in branches/SAMBA_4_0: .\n\tsource/lib/replace/test", "body": "Author: jelmer\nDate: 2007-04-12 19:54:15 +0000 (Thu, 12 Apr 2007)\nNew Revision: 22203\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22203\n\nLog:\nImprove the replace testsuite a bit.\n\nModified:\n   branches/SAMBA_4_0/\n   branches/SAMBA_4_0/source/lib/replace/test/testsuite.c\n\n\nChangeset:\n\nProperty changes on: branches/SAMBA_4_0\n___________________________________________________________________\nName: bzr:merge\n...skipped...\n\nModified: branches/SAMBA_4_0/source/lib/replace/test/testsuite.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/test/testsuite.c\t2007-04-12 19:16:29 UTC (rev 22202)\n+++ branches/SAMBA_4_0/source/lib/replace/test/testsuite.c\t2007-04-12 19:54:15 UTC (rev 22203)\n@@ -115,7 +115,27 @@\n \n static int test_strlcat(void)\n {\n-\t/* FIXME */\n+\tchar tmp[10];\n+\tprintf(\"test: strlcat\\n\");\n+\tstrcpy(tmp, \"\");\n+\tif (strlcat(tmp, \"bla\", 3) != 3) {\n+\t\tprintf(\"failure: strlcat [\\ninvalid return code\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tif (strcmp(tmp, \"bl\") != 0) {\n+\t\tprintf(\"failure: strlcat [\\nexpected \\\"bl\\\", got \\\"%s\\\"\\n]\\n\", \n+\t\t\t   tmp);\n+\t\treturn false;\n+\t}\n+\n+\tstrcpy(tmp, \"da\");\n+\tif (strlcat(tmp, \"me\", 4) != 4) {\n+\t\tprintf(\"failure: strlcat [\\nexpected \\\"dam\\\", got \\\"%s\\\"\\n]\\n\",\n+\t\t\t   tmp);\n+\t\treturn false;\n+\t}\n+\n+\tprintf(\"success: strlcat\\n\");\n \treturn true;\n }\n \n@@ -139,7 +159,16 @@\n \n static int test_strdup(void)\n {\n-\t/* FIXME */\n+\tchar *x;\n+\tprintf(\"test: strdup\\n\");\n+\tx = strdup(\"bla\");\n+\tif (strcmp(\"bla\", x) != 0) {\n+\t\tprintf(\"failure: strdup [\\nfailed: expected \\\"bla\\\", got \\\"%s\\\"\\n]\\n\",\n+\t\t\t   x);\n+\t\treturn false;\n+\t}\n+\tfree(x);\n+\tprintf(\"success: strdup\\n\");\n \treturn true;\n }\t\n \n@@ -225,13 +254,49 @@\n \n static int test_strndup(void)\n {\n-\t/* FIXME */\n+\tchar *x;\n+\tprintf(\"test: strndup\\n\");\n+\tx = strndup(\"bla\", 0);\n+\tif (strcmp(x, \"\") != 0) {\n+\t\tprintf(\"failure: strndup [\\ninvalid\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tfree(x);\n+\tx = strndup(\"bla\", 2);\n+\tif (strcmp(x, \"bl\") != 0) {\n+\t\tprintf(\"failure: strndup [\\ninvalid\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tfree(x);\n+\tx = strndup(\"bla\", 10);\n+\tif (strcmp(x, \"bla\") != 0) {\n+\t\tprintf(\"failure: strndup [\\ninvalid\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tfree(x);\n+\tprintf(\"success: strndup\\n\");\n \treturn true;\n }\n \n static int test_strnlen(void)\n {\n-\t/* FIXME */\n+\tprintf(\"test: strnlen\\n\");\n+\tif (strnlen(\"bla\", 2) != 2) {\n+\t\tprintf(\"failure: strnlen [\\nunexpected length\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\n+\tif (strnlen(\"some text\\n\", 0) != 0) {\n+\t\tprintf(\"failure: strnlen [\\nunexpected length\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\n+\tif (strnlen(\"some text\", 20) != 9) {\n+\t\tprintf(\"failure: strnlen [\\nunexpected length\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\n+\tprintf(\"success: strnlen\\n\");\n \treturn true;\n }\n \n@@ -255,13 +320,43 @@\n \n static int test_asprintf(void)\n {\n-\t/* FIXME */\n+\tchar *x;\n+\tprintf(\"test: asprintf\\n\");\n+\tif (asprintf(&x, \"%d\", 9) != 1) {\n+\t\tprintf(\"failure: asprintf [\\ngenerate asprintf\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tif (strcmp(x, \"9\") != 0) {\n+\t\tprintf(\"failure: asprintf [\\ngenerate asprintf\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tif (asprintf(&x, \"dat%s\", \"a\") != 4) {\n+\t\tprintf(\"failure: asprintf [\\ngenerate asprintf\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tif (strcmp(x, \"data\") != 0) {\n+\t\tprintf(\"failure: asprintf [\\ngenerate asprintf\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tprintf(\"success: asprintf\\n\");\n \treturn true;\n }\n \n static int test_snprintf(void)\n {\n-\t/* FIXME */\n+\tchar tmp[10];\n+\tprintf(\"test: snprintf\\n\");\n+\tif (snprintf(tmp, 3, \"foo%d\", 9) != 4) {\n+\t\tprintf(\"failure: snprintf [\\nsnprintf return code failed\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\n+\tif (strcmp(tmp, \"fo\") != 0) {\n+\t\tprintf(\"failure: snprintf [\\nsnprintf failed\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\n+\tprintf(\"success: snprintf\\n\");\n \treturn true;\n }\n \n@@ -328,13 +423,22 @@\n \n static int test_strerror(void)\n {\n+\tprintf(\"test: strerror\\n\");\n \t/* FIXME */\n+\tprintf(\"failure: sterror\\n\");\n \treturn true;\n }\n \n static int test_errno(void)\n {\n-\t/* FIXME */\n+\tprintf(\"test: errno\\n\");\n+\terrno = 3;\n+\tif (errno != 3) {\n+\t\tprintf(\"failure: errno [\\nerrno failed\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\n+\tprintf(\"success: errno\\n\");\n \treturn true;\n }\n \n@@ -376,7 +480,20 @@\n \n static int test_strtoll(void)\n {\n-\t/* FIXME */\n+\tprintf(\"test: strtoll\\n\");\n+\tif (strtoll(\"15\", NULL, 10) != 15) {\n+\t\tprintf(\"failure: strtoll [\\nstrtoll failed\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tif (strtoll(\"10\", NULL, 16) != 16) {\n+\t\tprintf(\"failure: strtoll [\\nstrtoll hex failed\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tif (strtoll(\"11\", NULL, 2) != 3) {\n+\t\tprintf(\"failure: strtoll [\\nstrtoll binary failed\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tprintf(\"success: strtoll\\n\");\n \treturn true;\n }\n \n@@ -410,19 +527,42 @@\n \n static int test_FUNCTION(void)\n {\n-\t/* FIXME: test __FUNCTION__ macro */\n+\tprintf(\"test: FUNCTION\\n\");\n+\tif (strcmp(__FUNCTION__, \"test_FUNCTION\") != 0) {\n+\t\tprintf(\"failure: FAILURE [\\nFAILURE invalid\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tprintf(\"success: FUNCTION\\n\");\n \treturn true;\n }\n \n static int test_MIN(void)\n {\n-\t/* FIXME */\n+\tprintf(\"test: MIN\\n\");\n+\tif (MIN(20, 1) != 1) {\n+\t\tprintf(\"failure: MIN [\\nMIN invalid\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tif (MIN(1, 20) != 1) {\n+\t\tprintf(\"failure: MIN [\\nMIN invalid\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tprintf(\"success: MIN\\n\");\n \treturn true;\n }\n \n static int test_MAX(void)\n {\n-\t/* FIXME */\n+\tprintf(\"test: MAX\\n\");\n+\tif (MAX(20, 1) != 20) {\n+\t\tprintf(\"failure: MAX [\\nMAX invalid\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tif (MAX(1, 20) != 20) {\n+\t\tprintf(\"failure: MAX [\\nMAX invalid\\n]\\n\");\n+\t\treturn false;\n+\t}\n+\tprintf(\"success: MAX\\n\");\n \treturn true;\n }\n \n\n"}