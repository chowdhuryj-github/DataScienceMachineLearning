{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23185 - in branches: SAMBA_3_0/source/lib\n\tSAMBA_3_0/source/smbd SAMBA_3_0_26/source/lib\n\tSAMBA_3_0_26/source/smbd", "body": "Author: vlendec\nDate: 2007-05-29 10:48:42 +0000 (Tue, 29 May 2007)\nNew Revision: 23185\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23185\n\nLog:\nTry to fix the IRIX build, also add the forgotten file_id.c in .26\n\nAdded:\n   branches/SAMBA_3_0_26/source/lib/file_id.c\nModified:\n   branches/SAMBA_3_0/source/lib/file_id.c\n   branches/SAMBA_3_0/source/smbd/oplock_irix.c\n   branches/SAMBA_3_0_26/source/smbd/oplock_irix.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/lib/file_id.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/file_id.c\t2007-05-29 10:15:01 UTC (rev 23184)\n+++ branches/SAMBA_3_0/source/lib/file_id.c\t2007-05-29 10:48:42 UTC (rev 23185)\n@@ -26,7 +26,7 @@\n   return a file_id which gives a unique ID for a file given the device and\n   inode numbers\n  */\n-static struct file_id file_id_create(SMB_DEV_T dev, SMB_INO_T inode)\n+struct file_id file_id_create(SMB_DEV_T dev, SMB_INO_T inode)\n {\n \tstruct file_id key;\n \t/* the ZERO_STRUCT ensures padding doesn't break using the key as a\n\nModified: branches/SAMBA_3_0/source/smbd/oplock_irix.c\n===================================================================\n--- branches/SAMBA_3_0/source/smbd/oplock_irix.c\t2007-05-29 10:15:01 UTC (rev 23184)\n+++ branches/SAMBA_3_0/source/smbd/oplock_irix.c\t2007-05-29 10:48:42 UTC (rev 23185)\n@@ -140,8 +140,9 @@\n \t * is the first fsp open with this dev,ino pair.\n \t */\n \n-\tif ((fsp = file_find_di_first((SMB_DEV_T)os.os_dev,\n-\t\t\t\t      (SMB_INO_T)os.os_ino)) == NULL) {\n+\tif ((fsp = file_find_di_first(\n+\t\t     file_id_create((SMB_DEV_T)os.os_dev,\n+\t\t\t\t    (SMB_INO_T)os.os_ino))) == NULL) {\n \t\tDEBUG(0,(\"irix_oplock_receive_message: unable to find open \"\n \t\t\t \"file with dev = %x, inode = %.0f\\n\",\n \t\t\t (unsigned int)os.os_dev, (double)os.os_ino ));\n\nAdded: branches/SAMBA_3_0_26/source/lib/file_id.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/file_id.c\t2007-05-29 10:15:01 UTC (rev 23184)\n+++ branches/SAMBA_3_0_26/source/lib/file_id.c\t2007-05-29 10:48:42 UTC (rev 23185)\n@@ -0,0 +1,102 @@\n+/* \n+   Unix SMB/CIFS implementation.\n+\n+   file_id structure handling\n+\n+   Copyright (C) Andrew Tridgell 2007\n+   \n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+   \n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+*/\n+\n+#include \"includes.h\"\n+\n+/*\n+  return a file_id which gives a unique ID for a file given the device and\n+  inode numbers\n+ */\n+struct file_id file_id_create(SMB_DEV_T dev, SMB_INO_T inode)\n+{\n+\tstruct file_id key;\n+\t/* the ZERO_STRUCT ensures padding doesn't break using the key as a\n+\t * blob */\n+\tZERO_STRUCT(key);\n+\tkey.devid = dev;\n+\tkey.inode = inode;\n+\treturn key;\n+}\n+\n+/*\n+  generate a file_id from a stat structure\n+ */\n+struct file_id file_id_sbuf(const SMB_STRUCT_STAT *sbuf)\n+{\n+\treturn file_id_create(sbuf->st_dev, sbuf->st_ino);\n+}\n+\n+\n+/*\n+  return True if two file_id structures are equal\n+ */\n+BOOL file_id_equal(const struct file_id *id1, const struct file_id *id2)\n+{\n+\treturn id1->inode == id2->inode && id1->devid == id2->devid;\n+}\n+\n+/*\n+  a static string for a file_id structure\n+ */\n+const char *file_id_static_string(const struct file_id *id)\n+{\n+\tstatic char buf[32];\n+\tsnprintf(buf, sizeof(buf), \"%llx:%llx\", \n+\t\t (unsigned long long)id->devid, \n+\t\t (unsigned long long)id->inode);\n+\treturn buf;\n+}\n+\n+/*\n+  a 2nd static string for a file_id structure so we can print 2 at once\n+ */\n+const char *file_id_static_string2(const struct file_id *id)\n+{\n+\tstatic char buf[32];\n+\tsnprintf(buf, sizeof(buf), \"%llx:%llx\", \n+\t\t (unsigned long long)id->devid, \n+\t\t (unsigned long long)id->inode);\n+\treturn buf;\n+}\n+\n+/*\n+  push a 16 byte version of a file id into a buffer\n+ */\n+void push_file_id_16(char *buf, const struct file_id *id)\n+{\n+\tSIVAL(buf,  0, id->devid&0xFFFFFFFF);\n+\tSIVAL(buf,  4, id->devid>>32);\n+\tSIVAL(buf,  8, id->inode&0xFFFFFFFF);\n+\tSIVAL(buf, 12, id->inode>>32);\n+}\n+\n+/*\n+  pul a 16 byte version of a file id from a buffer\n+ */\n+void pull_file_id_16(char *buf, struct file_id *id)\n+{\n+\tZERO_STRUCTP(id);\n+\tid->devid  = IVAL(buf,  0);\n+\tid->devid |= ((uint64_t)IVAL(buf,4))<<32;\n+\tid->inode  = IVAL(buf,  8);\n+\tid->inode |= ((uint64_t)IVAL(buf,12))<<32;\n+}\n\nModified: branches/SAMBA_3_0_26/source/smbd/oplock_irix.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/smbd/oplock_irix.c\t2007-05-29 10:15:01 UTC (rev 23184)\n+++ branches/SAMBA_3_0_26/source/smbd/oplock_irix.c\t2007-05-29 10:48:42 UTC (rev 23185)\n@@ -140,8 +140,9 @@\n \t * is the first fsp open with this dev,ino pair.\n \t */\n \n-\tif ((fsp = file_find_di_first((SMB_DEV_T)os.os_dev,\n-\t\t\t\t      (SMB_INO_T)os.os_ino)) == NULL) {\n+\tif ((fsp = file_find_di_first(\n+\t\t     file_id_create((SMB_DEV_T)os.os_dev,\n+\t\t\t\t    (SMB_INO_T)os.os_ino))) == NULL) {\n \t\tDEBUG(0,(\"irix_oplock_receive_message: unable to find open \"\n \t\t\t \"file with dev = %x, inode = %.0f\\n\",\n \t\t\t (unsigned int)os.os_dev, (double)os.os_ino ));\n\n"}