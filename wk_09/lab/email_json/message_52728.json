{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Damian Conway <damian@conway.org>", "subject": "Re: Referring to source code within Perldoc: the new A<> code", "body": "Mark Overmeer wrote:\n\n> You may remember that I repeatedly asked @Larry not to forget the\n> documentation aspect in the redesign of Perl, in person during various\n> YAPCs and Workshops.  Then, when you finally took the challenge, I have\n> send you a extensive email showing various alternative syntaxes for\n> condensed, integrated documentation strategies. (2 nov 2005)\n\nYes. You did all that. I was extremely grateful for that input. And I took it \n(and many other's people's feedback) and created the current design...in such \na way--I believe--that you *will* be able to easily and extensibly use the new \nPod and Perl parsers to implement such integrated documentation strategies.\n\n\n> I have already proven that adding some simple logical markup to the POD(5)\n> syntax can simplify the documentation process enormously, with my OODoc\n> (::Parser::Markov).  \n\nAgreed. And I made sure that Pod 6 could be easily extended with such markup. \nMoreover I added in the concept of \"semantic blocks\", which directly mirror \nmany of your MARKOV language notations, often right down to the actual names \nchosen (albeit in capitalized form).\n\n\n> As I already reported in one of the initial messages\n> of this (long) thread, the tool saved me to type 700.000 characters of\n> (needed dupplicated) text for my MailBox suite alone.  That was a simple\n> gain within the classical POD dogma; with real integration, we can\n> reduce our documentation efforts much further.\n> [Shall I give a lightning talk on OODoc in action, at upcoming YAPC::EU?]\n\nBy all means. But not for my sake. I have already studied and understood your \ntool and the advantages it provides for certain types of documentation tasks. \nThat's why I designed Pod 6 specifically to support such tools.\n\n\n>> After all, Larry's track record is clear: he's never once allowed\n>> someone's reputation or status (even his own!) to deter him from\n>> replacing an existing design with someone else's superior one.\n> \n> True.  However, when the common @Larry believe is that POD6 should build\n> on POD(5) ideas of orthodox orthogonalism, then it is a waste of my\n> sparse time.  I am not afraid to take such challange, opposit of that:\n> otherwise this discussion probably had died out days ago.  But I do have\n> a number of large Perl(5) projects on my hands already.\n\nUnderstood. But you keep saying we're not giving you what you want, without \nshowing us specific examples of what it is you want that we're not giving you. \nWhat else can we do but ask you to provide specifications for the pieces you \nthink are missing?\n\nAnd, no, I don't consider the pointers to your excellent module to be suitable \nspecific examples of what we're not giving you...mainly because I believe that \nthe Pod 6 documentation language I've designed (in conjunction with the \nability for Perl 6 to parse Perl 6) *does* give you what you need to build \nsuch tools.\n\nSo it seems we're still at an impasse. I fully respect your decision not to \nattempt a full alternative design (if anything, your estimate of it only \ntaking \"weeks\" is optimistic ;-), but unless someone is willing to step up and \nsuggest some specific improvements to the current proposal, how can we move \nforward towards the best possible result?\n\nDamian\n\n"}