{"category": "ham", "to_address": "\"Allison Randal\" <allison@perl.org>", "from_address": "\"Matt Diephouse\" <mddiep@gmail.com>", "subject": "Re: [perl #42865] [BUG] There's no way to set a vtable function with a Sub at runtime", "body": "Allison Randal  wrote:\n> For classes, the 'add_method' method takes a named parameter to say\n> whether it's a vtable function. And, vtable functions aren't stored in\n> the namespace at all anymore, but in a data structure inside the class,\n> so you wouldn't have 'root' and 'hll' variants. I can see potentially\n> see adding an 'add_vtable' vtable function, parallel to add_method,\n> add_attribute, etc.\n\nAfter the recent decoupling of vtable functions from methods (with the\naddition of the :vtable pragma), why would you want to re-couple them?\nI see the two as distinct features, each with their own uses.\nSometimes there's shared behavior, but there ought to be the ability\nto have them behave differently.\n\n> What's the use case for modifying a low-level PMC's vtable entries at\n> runtime? Or, are you only talking about overriding vtable functions in a\n> class?\n\nThe latter. It seems like there should be a way to override them\nwithout using eval -- particularly since there's nothing preventing it\ntechnically.\n\n-- \nMatt Diephouse\nhttp://matt.diephouse.com\n\n"}