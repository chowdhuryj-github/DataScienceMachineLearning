{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "audreyt@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14392 - doc/trunk/design/syn", "body": "Author: audreyt\nDate: Thu May 17 00:29:36 2007\nNew Revision: 14392\n\nModified:\n   doc/trunk/design/syn/S02.pod\n   doc/trunk/design/syn/S04.pod\n   doc/trunk/design/syn/S06.pod\n\nLog:\n* Fix thrice misspelling of &?BLOCK as $?BLOCK.\n\nModified: doc/trunk/design/syn/S02.pod\n==============================================================================\n--- doc/trunk/design/syn/S02.pod\t(original)\n+++ doc/trunk/design/syn/S02.pod\tThu May 17 00:29:36 2007\n@@ -1674,7 +1674,7 @@\n     @?LABEL     Which nested block labels am I in?\n \n All the nested C<@?> variables are ordered from the innermost to the\n-outermost, so C<@?BLOCK[0]> is always the same as C<$?BLOCK>.\n+outermost, so C<@?BLOCK[0]> is always the same as C<&?BLOCK>.\n \n Note that some of these things have parallels in the C<*> space at run time:\n \n\nModified: doc/trunk/design/syn/S04.pod\n==============================================================================\n--- doc/trunk/design/syn/S04.pod\t(original)\n+++ doc/trunk/design/syn/S04.pod\tThu May 17 00:29:36 2007\n@@ -724,7 +724,7 @@\n \n is really just short for:\n \n-    $?BLOCK.leave(1,2,3)\n+    &?BLOCK.leave(1,2,3)\n \n To return from your immediate caller, you can say:\n \n\nModified: doc/trunk/design/syn/S06.pod\n==============================================================================\n--- doc/trunk/design/syn/S06.pod\t(original)\n+++ doc/trunk/design/syn/S06.pod\tThu May 17 00:29:36 2007\n@@ -1910,7 +1910,7 @@\n and the method's arguments specify the return value.  If the object\n is omitted (by use of the function or listop forms), the innermost\n block is exited.  Otherwise you must use something like C\n-or C<$?BLOCK> or a contextual variable to specify the scope you\n+or C<&?BLOCK> or a contextual variable to specify the scope you\n want to exit.  A label (such as a loop label) previously seen in\n the lexical scope also works as a kind of singleton context object:\n it names a statement that is serving both as an outer lexical scope\n\n"}