{"category": "ham", "to_address": "\"Paul Lalli\" <mritty@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Array of Array refs", "body": "On 29 May 2007 13:04:42 -0700, Paul Lalli  wrote:\n> On May 29, 3:21 pm, rvtol+n...@isolution.nl (Dr.Ruud) wrote:\n> > Brian schreef:\n> >\n> > > Changing @ to $ is confusing...\n> >\n> > Huh? @ means array, $ means scalar; there is nothing to change.\n>\n> Presumably, he meant that\n> @array\n> identifies the entire array, while\n> $array[0]\n> identifies the first element of the array, thus \"changing\" the @ to a\n> $ to access a single element.\n>\n> The mnemonic device is not \"@ for array, $ for scalar\", but rather:\n> $ is for single elements, be they single elments of arrays or hashes,\n> or actual scalar variables.\n> @ is for lists of data, whether entire arrays, slices of arrays, or\n> slices of hashes\n> % is for an entire hash.\n>\n> Paul Lalli\n\nOf course, that is changing in Perl 6.  Scalars (including references)\nwill always be prefixed with $, arrays will always be prefixed with @,\nand hashes will always be prefixed with %.  Array slices and indexing\nwill be preformed thusly:\n\npugs> my @a = 1 .. 5 #the same in Perl 5\n(1, 2, 3, 4, 5)\npugs> @a[2..4] #the same in Perl 5\n(3, 4, 5)\npugs> @a[1] #$a[1] in Perl 5\n2\npugs> my $aref = @a; #my $aref = \\@a in Perl 5\npugs> $aref[1] #$aref->[1] in Perl 5\n2\npugs> $aref[1 .. 3] #@{$aref}[1..3] in Perl 5\n(2, 3, 4)\n\nAnd hash slices and indexing will be done like this\n\npugs> my %h = zip , [1 .. 4] #much more\ncomplicated in Perl 5\n((\"four\", 4), (\"one\", 1), (\"three\", 3), (\"two\", 2))\npugs> %h #%h{qw} in Perl 5\n(1, 2)\npugs> %h #$h{three} in Perl 5\n3\npugs> %h{four} #oops, this is an error in Perl 6, {} does not\nstringify barewords\n*** No such subroutine: \"&four\"\n    at  line 1, column 4-8\npugs> %h{'four'} #$h{four} in Perl 5 (note the necessary '' in Perl 6,\nuse <> instead)\n4\npugs> my $href = %h #my $href = \\%h; in Perl 5\n((\"four\", 4), (\"one\", 1), (\"three\", 3), (\"two\", 2))\npugs> $href #%{$href}{qw} in Perl 5\n(1, 2)\npugs> $href #$href->{three} in Perl 5\n3\npugs> $href{'four'} #$href->{four} in Perl 5, again Perl 6 needs the quotes\n4\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}