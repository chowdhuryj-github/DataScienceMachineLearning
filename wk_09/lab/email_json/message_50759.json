{"category": "ham", "to_address": "\"Jon Phillips\" <jon@rejon.org>", "from_address": "\"Nathan R. Yergler\" <nathan@creativecommons.org>", "subject": "Re: [cc-devel] [Tracker] Extracting Embedded Licenses", "body": "On 6/18/07, Jon Phillips  wrote:\n> On Mon, 2007-06-18 at 12:49 -0700, Jason Kivlighn wrote:\n> > Hi,\n> >\n> > imagemagick: Uses 'convert filename xmp:-' to output an image's embedded\n> > XMP.  This works for at least JPEG and TIFF files.  For JPEGs, however,\n> > Imagemagick outputs the namespace and XMP, seperated by \\0.  I'm not\n> > sure how I can handle this, without simply assuming that 'convert'\n> > returned two null-terminated strings.  Nevertheless, this extracts the\n> > XMP from TIFF files.\n> >\n> > msoffice: Extends the msoffice extractor to also parse the\n> > DocumentSummeryInformation infile, which contains user-defined metadata,\n> > along with license metadata embedded by the MSOffice Creative Commons Add-in\n> >\n> > pdf: Extends the pdf extractor to read a PDF's metadata stream and parse\n> > it as XMP.  I'm still awaiting poppler extending the glib bindings to\n> > allow reading the metadata stream.  Until then, it will simply never\n> > find the metadata stream and go on without error.\n> >\n> > png: Adds a check for the XML:com:adobe:xmp iTXt field, and parses it as\n> > XMP.\n> >\n> > html: Adds a new html parser using libxml2.  Parses the document,\n> > checking for RDFa licenses.  It also checks for other basic HTML\n> > properties like title and author.\n> >\n> > There's also several XML formats I'd like to parse for license data,\n> > particularly SVG and SMIL.  Would this be do-able, and if so, how should\n> > I go about it?  Write new extractors for each format or is this too much\n> > overhead?  These could use GMarkupParse, rather than bringing in libxml2\n> > like the HTML parser.\n> >\n> > Cheers,\n> > Jason\n>\n> Nathan, what do you think about these as well?\n\nI don't claim any special knowledge regarding tracker infrastructure,\nbut the patches appear sane on the surface.\n\nThe only thing I see that is a potential gotcha is the check for\n\"about=NULL\" in the RDFa license extraction.  That'll probably do for\n99% of cases, but it's not technically correct -- you could have an\nabout attribute that contained the URI of the document you're\nindexing.  I'm not sure it's worth devoting lots of time to at this\npoint, just thought I'd point it out.\n\n>\n> Jon\n>\n> > plain text document attachment (tracker-imagemagick-extract-xmp.patch)\n> > Index: src/tracker-extract/tracker-extract-imagemagick.c\n> > ===================================================================\n> > --- src/tracker-extract/tracker-extract-imagemagick.c (revision 598)\n> > +++ src/tracker-extract/tracker-extract-imagemagick.c (working copy)\n> > @@ -35,7 +35,7 @@\n> >       gint           exit_status;\n> >\n> >       /* imagemagick crashes trying to extract from xcf files */\n> > -     if (g_str_has_suffix (filename, '.xcf')) {\n> > +     if (g_str_has_suffix (filename, \".xcf\")) {\n> >               return;\n> >       }\n> >\n> > @@ -60,5 +60,16 @@\n> >                       g_hash_table_insert (metadata, g_strdup (\"Image:Comments\"), g_strdup (g_strescape (lines[2], \"\")));\n> >               }\n> >       }\n> > +\n> > +     gchar         *xmp;\n> > +     argv[0] = g_strdup (\"convert\");\n> > +     argv[1] = g_strdup (filename);\n> > +     argv[2] = g_strdup (\"xmp:-\");\n> > +     argv[3] = NULL;\n> > +\n> > +     if (tracker_spawn (argv, 10, &xmp, &exit_status)) {\n> > +             if (exit_status == EXIT_SUCCESS) {\n> > +                     tracker_read_xmp(xmp,strlen(xmp),metadata);\n> > +             }\n> > +     }\n> >  }\n> > -\n> > plain text document attachment\n> > (tracker-msoffice-extract-license.patch)\n> > Index: src/tracker-extract/tracker-extract-msoffice.c\n> > ===================================================================\n> > --- src/tracker-extract/tracker-extract-msoffice.c    (revision 598)\n> > +++ src/tracker-extract/tracker-extract-msoffice.c    (working copy)\n> > @@ -118,7 +118,26 @@\n> >       }\n> >  }\n> >\n> > +static void\n> > +doc_metadata_cb (gpointer key, gpointer value, gpointer user_data)\n> > +{\n> > +     gchar           *name;\n> > +     GsfDocProp      *property;\n> > +     GHashTable      *metadata;\n> > +     GValue const    *val;\n> >\n> > +     name = (gchar *) key;\n> > +     property = (GsfDocProp *) value;\n> > +     metadata = (GHashTable *) user_data;\n> > +\n> > +     val = gsf_doc_prop_get_val (property);\n> > +\n> > +     if (strcmp (name, \"CreativeCommons_LicenseURL\") == 0) {\n> > +             add_gvalue_in_hash_table (metadata, \"File:License\", val);\n> > +     }\n> > +}\n> > +\n> > +\n> >  void\n> >  tracker_extract_msoffice (gchar *filename, GHashTable *metadata)\n> >  {\n> > @@ -145,25 +164,37 @@\n> >       }\n> >\n> >       stream = gsf_infile_child_by_name (infile, \"\\05SummaryInformation\");\n> > -     g_object_unref (G_OBJECT (infile));\n> > -\n> > -     if (!stream) {\n> > -             gsf_shutdown ();\n> > -             return;\n> > +     if (stream) {\n> > +             md = gsf_doc_meta_data_new ();\n> > +\n> > +             if (gsf_msole_metadata_read (stream, md)) {\n> > +                     gsf_shutdown ();\n> > +                     return;\n> > +             }\n> > +\n> > +             gsf_doc_meta_data_foreach (md, metadata_cb, metadata);\n> > +\n> > +             g_object_unref (G_OBJECT (md));\n> > +             g_object_unref (G_OBJECT (stream));\n> >       }\n> >\n> > -     md = gsf_doc_meta_data_new ();\n> > -\n> > -     if (gsf_msole_metadata_read (stream, md)) {\n> > -             gsf_shutdown ();\n> > -             return;\n> > +     stream = gsf_infile_child_by_name (infile, \"\\05DocumentSummaryInformation\");\n> > +     if (stream) {\n> > +             md = gsf_doc_meta_data_new ();\n> > +\n> > +             if (gsf_msole_metadata_read (stream, md)) {\n> > +                     gsf_shutdown ();\n> > +                     return;\n> > +             }\n> > +\n> > +             gsf_doc_meta_data_foreach (md, doc_metadata_cb, metadata);\n> > +\n> > +             g_object_unref (G_OBJECT (md));\n> > +             g_object_unref (G_OBJECT (stream));\n> >       }\n> >\n> > -     gsf_doc_meta_data_foreach (md, metadata_cb, metadata);\n> > +     g_object_unref (G_OBJECT (infile));\n> >\n> > -     g_object_unref (G_OBJECT (md));\n> > -     g_object_unref (G_OBJECT (stream));\n> > -\n> >       gsf_shutdown ();\n> >  }\n> >\n> > plain text document attachment (tracker-pdf-extract-xmp.patch)\n> > Index: src/tracker-extract/tracker-extract-pdf.c\n> > ===================================================================\n> > --- src/tracker-extract/tracker-extract-pdf.c (revision 598)\n> > +++ src/tracker-extract/tracker-extract-pdf.c (working copy)\n> > @@ -26,6 +26,8 @@\n> >  #include \n> >  #include \n> >\n> > +#include \"tracker-extract.h\"\n> > +\n> >  void tracker_extract_pdf (gchar *filename, GHashTable *metadata)\n> >  {\n> >       PopplerDocument *document;\n> > @@ -34,6 +36,7 @@\n> >       gchar           *author;\n> >       gchar           *subject;\n> >       gchar           *keywords;\n> > +     gchar           *metadata_xml;\n> >       GTime            creation_date;\n> >       GError          *error = NULL;\n> >\n> > @@ -50,6 +53,7 @@\n> >               \"subject\", &subject,\n> >               \"keywords\", &keywords,\n> >               \"creation-date\", &creation_date,\n> > +             \"metadata\", &metadata_xml,\n> >               NULL);\n> >\n> >       if (title && strlen (title))\n> > @@ -71,10 +75,15 @@\n> >       g_hash_table_insert (metadata, g_strdup (\"Doc:PageCount\"),\n> >               g_strdup_printf (\"%d\", poppler_document_get_n_pages (document)));\n> >\n> > +     if ( metadata_xml ) {\n> > +             tracker_read_xmp (metadata_xml,strlen(metadata_xml),metadata);\n> > +     }\n> > +\n> >       g_free (title);\n> >       g_free (author);\n> >       g_free (subject);\n> >       g_free (keywords);\n> > +     g_free (metadata_xml);\n> >       g_object_unref (document);\n> >  }\n> >\n> > plain text document attachment (tracker-png-extract-xmp.patch)\n> > Index: src/tracker-extract/tracker-extract-png.c\n> > ===================================================================\n> > --- src/tracker-extract/tracker-extract-png.c (revision 598)\n> > +++ src/tracker-extract/tracker-extract-png.c (working copy)\n> > @@ -20,6 +20,8 @@\n> >\n> >  #include \"config.h\"\n> >\n> > +#include \"tracker-extract.h\"\n> > +\n> >  #include \n> >  #include \n> >  #include \n> > @@ -79,15 +81,23 @@\n> >                                            g_strdup_printf (\"%ld\", height));\n> >               }\n> >\n> > -\n> >               if (png_get_text (png_ptr, info_ptr, &text_ptr, &num_text) > 0) {\n> > -                     for (i = 0; i < num_text; i++) {\n> > -                             for (j=0; tagmap[j].type; j++) {\n> > -                                     if (strcasecmp (tagmap[j].name,  text_ptr[i].key) == 0) {\n> > -                                             if (text_ptr[i].text && strlen (text_ptr[i].text) > 0) {\n> > -                                                     g_hash_table_insert (metadata, g_strdup (tagmap[j].type), g_strdup (text_ptr[i].text));\n> > +                     for (i = 0; i < num_text; i++) {\n> > +                             if ( text_ptr[i].key != NULL ) {\n> > +                                     #if defined(HAVE_EXEMPI) && defined(PNG_iTXt_SUPPORTED)\n> > +                                     if (strcmp(\"XML:com.adobe.xmp\",text_ptr[i].key) == 0) {\n> > +                                             tracker_read_xmp(text_ptr[i].text,text_ptr[i].itxt_length,metadata);\n> > +                                             continue;\n> > +                                     }\n> > +                                     #endif\n> > +\n> > +                                     for (j=0; tagmap[j].type; j++) {\n> > +                                             if (strcasecmp (tagmap[j].name,  text_ptr[i].key) == 0) {\n> > +                                                     if (text_ptr[i].text && strlen (text_ptr[i].text) > 0) {\n> > +                                                             g_hash_table_insert (metadata, g_strdup (tagmap[j].type), g_strdup (text_ptr[i].text));\n> > +                                                     }\n> > +                                                     break;\n> >                                               }\n> > -                                             break;\n> >                                       }\n> >                               }\n> >                       }\n> > plain text document attachment (tracker-extract-html.patch)\n> > Index: src/tracker-extract/tracker-extract.c\n> > ===================================================================\n> > --- src/tracker-extract/tracker-extract.c     (revision 598)\n> > +++ src/tracker-extract/tracker-extract.c     (working copy)\n> > @@ -52,6 +52,9 @@\n> >  void tracker_extract_totem   (gchar *, GHashTable *);\n> >  void tracker_extract_oasis   (gchar *, GHashTable *);\n> >  void tracker_extract_ps              (gchar *, GHashTable *);\n> > +#ifdef HAVE_LIBXML2\n> > +void tracker_extract_html            (gchar *, GHashTable *);\n> > +#endif\n> >  #ifdef HAVE_POPPLER\n> >  void tracker_extract_pdf     (gchar *, GHashTable *);\n> >  #endif\n> > @@ -84,6 +87,10 @@\n> >       /* Document extractors */\n> >       { \"application/vnd.oasis.opendocument.*\",       tracker_extract_oasis           },\n> >       { \"application/postscript\",                     tracker_extract_ps              },\n> > +#ifdef HAVE_LIBXML2\n> > +     { \"text/html\",                                                  tracker_extract_html    },\n> > +     { \"application/xhtml+xml\",      tracker_extract_html    },\n> > +#endif\n> >  #ifdef HAVE_POPPLER\n> >       { \"application/pdf\",                            tracker_extract_pdf             },\n> >  #endif\n> > Index: src/tracker-extract/Makefile.am\n> > ===================================================================\n> > --- src/tracker-extract/Makefile.am   (revision 598)\n> > +++ src/tracker-extract/Makefile.am   (working copy)\n> > @@ -5,6 +5,7 @@\n> >       $(LIBGSF_CFLAGS)                        \\\n> >       $(LIBGSF_CFLAGS)                        \\\n> >       $(GSTREAMER_CFLAGS)                     \\\n> > +     $(LIBXML2_CFLAGS)                       \\\n> >       $(XINE_CFLAGS)\n> >\n> >  bin_PROGRAMS = tracker-extract\n> > @@ -33,6 +34,7 @@\n> >       tracker-extract-imagemagick.c           \\\n> >       tracker-extract-mplayer.c               \\\n> >       tracker-extract-totem.c                 \\\n> > +     tracker-extract-html.c                  \\\n> >       $(video_sources)\n> >\n> >  tracker_extract_LDADD = $(GLIB2_LIBS)                \\\n> > @@ -41,4 +43,5 @@\n> >       $(LIBEXIF_LIBS)                         \\\n> >       $(LIBGSF_LIBS)                          \\\n> >       $(GSTREAMER_LIBS)                       \\\n> > +     $(LIBXML2_LIBS)                         \\\n> >       $(XINE_LIBS)\n> > Index: configure.ac\n> > ===================================================================\n> > --- configure.ac      (revision 598)\n> > +++ configure.ac      (working copy)\n> > @@ -605,8 +605,25 @@\n> >     [ AC_DEFINE(IOPRIO_SUPPORT,[],[Define ioprio support]) ioprio_support=yes ])\n> >  AC_MSG_RESULT([$ioprio_support])\n> >\n> > -#####################################################\n> > +##################################################################\n> > +# check for libxml2\n> > +##################################################################\n> >\n> > +LIBXML2_REQUIRED=0.6\n> > +\n> > +AC_ARG_ENABLE(libxml2, AC_HELP_STRING([--disable-libxml2],[Disable HTML/XML extractors (full-text will still be available)]),,[enable_libxml2=yes])\n> > +if test \"x$enable_libxml2\" = \"xyes\"; then\n> > +     PKG_CHECK_MODULES(LIBXML2, [\n> > +             libxml-2.0 >= $LIBXML2_REQUIRED],\n> > +             [have_libxml2=yes] , [have_libxml2=no])\n> > +     AC_SUBST(LIBXML2_CFLAGS)\n> > +     AC_SUBST(LIBXML2_LIBS)\n> > +else\n> > +     have_libxml2=\"no (disabled)\"\n> > +fi\n> > +AM_CONDITIONAL(HAVE_LIBXML2, test \"$have_libxml2\" = \"yes\")\n> > +test \"$have_libxml2\" = \"yes\" && AC_DEFINE(HAVE_LIBXML2, [], [Define if we have libxml2])\n> > +\n> >  AC_CONFIG_FILES([\n> >       Makefile\n> >       tracker.pc\n> > @@ -675,6 +692,7 @@\n> >       exif (jpeg):                            $have_libexif\n> >       gsf:                                    $have_libgsf\n> >       video files:                            $videos_are_handled ($videos_handler)\n> > +     xml/html formats:                       $have_libxml2\n> >\n> >  \"\n> >  if test \"x$enable_external_sqlite\" = \"xyes\"; then\n> > Index: src/tracker-extract/tracker-extract-html.c\n> > ===================================================================\n> > --- src/tracker-extract/tracker-extract-html.c        (revision 0)\n> > +++ src/tracker-extract/tracker-extract-html.c        (revision 0)\n> > @@ -0,0 +1,161 @@\n> > +/* Tracker Extract - extracts embedded metadata from files\n> > + * Copyright (C) 2007, Jason Kivlighn (jkivlighn@gmail.com)\n> > + *\n> > + * This program is free software; you can redistribute it and/or\n> > + * modify it under the terms of the GNU General Public\n> > + * License as published by the Free Software Foundation; either\n> > + * version 2 of the License, or (at your option) any later version.\n> > + *\n> > + * This program is distributed in the hope that it will be useful,\n> > + * but WITHOUT ANY WARRANTY; without even the implied warranty of\n> > + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n> > + * General Public License for more details.\n> > + *\n> > + * You should have received a copy of the GNU General Public\n> > + * License along with this program; if not, write to the\n> > + * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n> > + * Boston, MA  02110-1301, USA.\n> > + */\n> > +\n> > +#include \"config.h\"\n> > +\n> > +#ifdef HAVE_LIBXML2\n> > +\n> > +#include \n> > +#include \n> > +#include \n> > +\n> > +typedef enum {\n> > +             READ_TITLE,\n> > +     } tag_type;\n> > +\n> > +typedef struct {\n> > +     GHashTable *metadata;\n> > +     tag_type current;\n> > +} HTMLParseInfo;\n> > +\n> > +gboolean\n> > +has_attribute( const xmlChar ** atts, const char *attr, const char*val )\n> > +{\n> > +     int i;\n> > +     for ( i = 0; atts[i]; i+=2 )\n> > +     {\n> > +             if ( strcmp((char*)atts[i],attr) == 0 ) {\n> > +                     if ( !val || strcmp((char*)atts[i+1],val) == 0 ) {\n> > +                             return TRUE;\n> > +                     }\n> > +             }\n> > +     }\n> > +     return FALSE;\n> > +}\n> > +\n> > +const xmlChar *\n> > +lookup_attribute( const xmlChar **atts, const char *attr )\n> > +{\n> > +     int i;\n> > +     for ( i = 0; atts[i]; i+=2 )\n> > +     {\n> > +             if ( strcmp((char*)atts[i],attr) == 0 ) {\n> > +                     return atts[i+1];\n> > +             }\n> > +     }\n> > +\n> > +     return NULL;\n> > +}\n> > +\n> > +void\n> > +startElement (void * info, const xmlChar * name, const xmlChar ** atts)\n> > +{\n> > +     /* Look for RDFa triple describing the license */\n> > +     if ( strcmp((char*)name,\"a\") == 0 ) {\n> > +             /* This tag is a license.  Ignore, however, if it is referring to another document */\n> > +             if ( has_attribute(atts,\"rel\",\"license\") && !has_attribute(atts,\"about\",NULL) ) {\n> > +                     const xmlChar *href = lookup_attribute(atts,\"href\");\n> > +                     if ( href ) {\n> > +                             g_hash_table_insert (((HTMLParseInfo *)info)->metadata, g_strdup (\"File:License\"),\n> > +                                                  g_strdup( (char*)href ));\n> > +                     }\n> > +             }\n> > +     } else if ( strcmp((char*)name,\"title\") == 0 ) {\n> > +             ((HTMLParseInfo *)info)->current = READ_TITLE;\n> > +     } else if ( strcmp((char*)name,\"meta\") == 0 ) {\n> > +             if ( has_attribute(atts,\"name\",\"Author\") ) {\n> > +                     const xmlChar *author = lookup_attribute(atts,\"content\");\n> > +                     if ( author ) {\n> > +                             g_hash_table_insert (((HTMLParseInfo *)info)->metadata, g_strdup (\"Doc:Author\"),\n> > +                                                  g_strdup( (char*)author ));\n> > +                     }\n> > +             }\n> > +             if ( has_attribute(atts,\"name\",\"DC.Description\") ) {\n> > +                     const xmlChar *desc = lookup_attribute(atts,\"content\");\n> > +                     if ( desc ) {\n> > +                             g_hash_table_insert (((HTMLParseInfo *)info)->metadata, g_strdup (\"Doc:Comments\"),\n> > +                                                  g_strdup( (char*)desc ));\n> > +                     }\n> > +             }\n> > +     }\n> > +}\n> > +\n> > +void\n> > +characters(void * info, const xmlChar * ch, int len)\n> > +{\n> > +     switch(((HTMLParseInfo *)info)->current) {\n> > +             case READ_TITLE:\n> > +                             g_hash_table_insert (((HTMLParseInfo *)info)->metadata, g_strdup (\"Doc:Title\"),\n> > +                                                  g_strdup( (char*)ch ));\n> > +                             break;\n> > +             default: break;\n> > +     }\n> > +\n> > +     ((HTMLParseInfo *)info)->current = -1;\n> > +}\n> > +\n> > +void tracker_extract_html (gchar* filename, GHashTable *metadata)\n> > +{\n> > +     xmlSAXHandler SAXHandlerStruct = {\n> > +                     NULL, /* internalSubset */\n> > +                     NULL, /* isStandalone */\n> > +                     NULL, /* hasInternalSubset */\n> > +                     NULL, /* hasExternalSubset */\n> > +                     NULL, /* resolveEntity */\n> > +                     NULL, /* getEntity */\n> > +                     NULL, /* entityDecl */\n> > +                     NULL, /* notationDecl */\n> > +                     NULL, /* attributeDecl */\n> > +                     NULL, /* elementDecl */\n> > +                     NULL, /* unparsedEntityDecl */\n> > +                     NULL, /* setDocumentLocator */\n> > +                     NULL, /* startDocument */\n> > +                     NULL, /* endDocument */\n> > +                     startElement, /* startElement */\n> > +                     NULL, /* endElement */\n> > +                     NULL, /* reference */\n> > +                     characters, /* characters */\n> > +                     NULL, /* ignorableWhitespace */\n> > +                     NULL, /* processingInstruction */\n> > +                     NULL, /* comment */\n> > +                     NULL, /* xmlParserWarning */\n> > +                     NULL, /* xmlParserError */\n> > +                     NULL, /* xmlParserError */\n> > +                     NULL, /* getParameterEntity */\n> > +                     NULL, /* cdataBlock */\n> > +                     NULL, /* externalSubset */\n> > +                     1,    /* initialized */\n> > +                     NULL, /* private */\n> > +                     NULL, /* startElementNsSAX2Func */\n> > +                     NULL, /* endElementNsSAX2Func */\n> > +                     NULL  /* xmlStructuredErrorFunc */\n> > +     };\n> > +\n> > +     HTMLParseInfo   info = { metadata, -1 };\n> > +\n> > +     htmlDocPtr doc;\n> > +     doc = htmlSAXParseFile(filename, NULL, &SAXHandlerStruct, &info);\n> > +     if ( doc ) {\n> > +             xmlFreeDoc(doc);\n> > +     }\n> > +}\n> > +\n> > +#else\n> > +#warning \"Not building HTML metadata extractor.\"\n> > +#endif\n> > _______________________________________________\n> > tracker-list mailing list\n> > tracker-list@gnome.org\n> > http://mail.gnome.org/mailman/listinfo/tracker-list\n> --\n> Jon Phillips\n>\n> San Francisco, CA\n> USA PH 510.499.0894\n> jon@rejon.org\n> http://www.rejon.org\n>\n> MSN, AIM, Yahoo Chat: kidproto\n> Jabber Chat: rejon@gristle.org\n> IRC: rejon@irc.freenode.net\n>\n> _______________________________________________\n> cc-devel mailing list\n> cc-devel@lists.ibiblio.org\n> http://lists.ibiblio.org/mailman/listinfo/cc-devel\n>\n_______________________________________________\ncc-devel mailing list\ncc-devel@lists.ibiblio.org\nhttp://lists.ibiblio.org/mailman/listinfo/cc-devel\n\n"}