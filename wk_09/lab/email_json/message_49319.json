{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: Quirky comments", "body": "I have a problem with both extremes, and I want to solve it with a dose\nof postmodern apathy.  It may seem a bit insane, but I think that in\n\n    print qq:to/END/\n\n    =for whatever\n\n    END\n\nI would prefer that the =for is considered Pod by any standard Pod\nparser, but is *not* considered Pod by the Perl 6 parser.  And I think\nthat's just fine.  If the programmer really wants to put Pod in a\nstring, they can just be responsible for stripping it out themselves.\nAnd a standard Pod parser shouldn't be expected to parse full-up Perl.\n\nIf an accidental directive shows up in a quoted string and causes\nproblems to the Pod parser, then it can be fixed, say by indenting a\nhere doc.  But I expect this to be quite rare in practice.  I picked\nthe initial = for Pod in the first place because most languages don't\never have that character at the start of a line.  I don't believe it's\nworth complexifying the quote parsing with additional escapes that\nmany folks will consider surprising, and it's *certainly* not worth\ninstalling a preprocessing pass over the text.  We've been working\nvery hard to keep the Perl parser a fairly simple one-pass parser.\nLet's not blow it now.\n\nIn short, trying to make Pod and Perl 6 view a document identically\nin every case is not worth the cost, in my estimation.\n\nLarry\n\n"}