{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "brian d foy <brian.d.foy@gmail.com>", "subject": "Default filehandles, or topicalizing filehandles, or something", "body": "I was thinking about default filehandles yesterday. select() doesn't\nseem to be around except as an \"Unfiled\" function in S16. \n\nThen, as I was looking at \n\n   .say( \"Hello World\" );\n\nand \n\n   $ERR.say( \"Hello standard error\" );\n\nI figured this might work, and does. Topicalizing a filehandle kinda\nacts almost like a default filehandle:\n\n   $_ = $*ERR;\n   .say( \"Hello standard error\" );\n\nBut, of course, that won't work for say() used as a function:\n\n   say \"Hello standard error\" ;\n\nThen, I thought I might assign to $*OUT, which doesn't work in pugs\n(and I might have missed the part of the spec that says these are\nread-only):\n\n   my $saved_standard = $*OUT;\n   $*OUT = $*ERR;   # this is an error\n\n   say \"This goes to stderr\";   # not until previous line works   \n   say $saved_standard: \"This goes to stdout\";  # just fine\n\nIs there going to be a Perl 6 feature for this?\n\n"}