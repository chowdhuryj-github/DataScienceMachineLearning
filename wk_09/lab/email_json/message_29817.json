{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jra@samba.org", "subject": "svn commit: samba r22872 - in branches: SAMBA_3_0/source\n\tSAMBA_3_0/source/modules SAMBA_3_0_26/source\n\tSAMBA_3_0_26/source/modules", "body": "Author: jra\nDate: 2007-05-14 23:55:11 +0000 (Mon, 14 May 2007)\nNew Revision: 22872\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22872\n\nLog:\nAdd vfs_zfsacl module from Jiri Sasek .\nJeremy.\n\nAdded:\n   branches/SAMBA_3_0/source/modules/vfs_zfsacl.c\n   branches/SAMBA_3_0_26/source/modules/vfs_zfsacl.c\nModified:\n   branches/SAMBA_3_0/source/Makefile.in\n   branches/SAMBA_3_0_26/source/Makefile.in\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0/source/Makefile.in\t2007-05-14 23:24:50 UTC (rev 22871)\n+++ branches/SAMBA_3_0/source/Makefile.in\t2007-05-14 23:55:11 UTC (rev 22872)\n@@ -447,6 +447,7 @@\n VFS_AIXACL_OBJ = modules/vfs_aixacl.o modules/vfs_aixacl_util.o\n VFS_AIXACL2_OBJ = modules/vfs_aixacl2.o modules/vfs_aixacl_util.o modules/nfs4_acls.o\n VFS_SOLARISACL_OBJ = modules/vfs_solarisacl.o\n+VFS_ZFSACL_OBJ = modules/vfs_zfsacl.o modules/nfs4_acls.o\n VFS_HPUXACL_OBJ = modules/vfs_hpuxacl.o\n VFS_IRIXACL_OBJ = modules/vfs_irixacl.o\n VFS_TRU64ACL_OBJ = modules/vfs_tru64acl.o\n@@ -1590,6 +1591,11 @@\n \t@echo \"Building plugin $@\"\n \t@$(SHLD_MODULE) $(VFS_SOLARISACL_OBJ)\n \n+bin/zfsacl.@SHLIBEXT@: $(VFS_ZFSACL_OBJ)\n+\t@echo \"Building plugin $@\"\n+\t@$(SHLD) $(LDSHFLAGS) -o $@ $(VFS_ZFSACL_OBJ) \\\n+\t\t@SONAMEFLAG@`basename $@`\n+\n bin/irixacl.@SHLIBEXT@: proto_exists $(VFS_IRIXACL_OBJ)\n \t@echo \"Building plugin $@\"\n \t@$(SHLD_MODULE) $(VFS_IRIXACL_OBJ)\n\nAdded: branches/SAMBA_3_0/source/modules/vfs_zfsacl.c\n===================================================================\n--- branches/SAMBA_3_0/source/modules/vfs_zfsacl.c\t2007-05-14 23:24:50 UTC (rev 22871)\n+++ branches/SAMBA_3_0/source/modules/vfs_zfsacl.c\t2007-05-14 23:55:11 UTC (rev 22872)\n@@ -0,0 +1,186 @@\n+/*\n+ * Convert ZFS/NFSv4 acls to NT acls and vice versa.\n+ *\n+ * Copyright (C) Jiri Sasek, 2007\n+ * based on the foobar.c module which is copyrighted by Volker Lendecke\n+ *\n+ * This program is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; if not, write to the Free Software\n+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+ *\n+ */\n+\n+#include \"includes.h\"\n+#include \"nfs4_acls.h\"\n+\n+#undef DBGC_CLASS\n+#define DBGC_CLASS DBGC_VFS\n+\n+#define ZFSACL_MODULE_NAME \"zfsacl\"\n+\n+/* zfs_get_nt_acl()\n+ * read the local file's acls and return it in NT form\n+ * using the NFSv4 format conversion\n+ */\n+static size_t zfs_get_nt_acl(struct files_struct *fsp, uint32 security_info,\n+\t\t\t     struct security_descriptor **ppdesc)\n+{\n+\tint naces, i;\n+\tace_t *acebuf;\n+\tSMB4ACL_T *pacl;\n+\tTALLOC_CTX\t*mem_ctx;\n+\n+\t/* read the number of file aces */\n+\tif((naces = acl(fsp->fsp_name, ACE_GETACLCNT, 0, NULL)) == -1) {\n+\t\tif(errno == ENOSYS) {\n+\t\t\tDEBUG(9, (\"acl(ACE_GETACLCNT, %s): Operation is not supported on the filesystem where the file reside\"));\n+\t\t} else {\n+\t\t\tDEBUG(9, (\"acl(ACE_GETACLCNT, %s): %s \", fsp->fsp_name,\n+\t\t\t\t\tstrerror(errno)));\n+\t\t}\n+\t\treturn 0;\n+\t}\n+\t/* allocate the field of ZFS aces */\n+\tmem_ctx = main_loop_talloc_get();\n+\tacebuf = (ace_t *) talloc_size(mem_ctx, sizeof(ace_t)*naces);\n+\tif(acebuf == NULL) {\n+\t\terrno = ENOMEM;\n+\t\treturn 0;\n+\t}\n+\t/* read the aces into the field */\n+\tif(acl(fsp->fsp_name, ACE_GETACL, naces, acebuf) < 0) {\n+\t\tDEBUG(9, (\"acl(ACE_GETACL, %s): %s \", fsp->fsp_name,\n+\t\t\t\tstrerror(errno)));\n+\t\treturn 0;\n+\t}\n+\t/* create SMB4ACL data */\n+\tif((pacl = smb_create_smb4acl()) == NULL) return 0;\n+\tfor(i=0; i ZFS acl using NFSv4 conv. */\n+static BOOL zfs_process_smbacl(files_struct *fsp, SMB4ACL_T *smbacl)\n+{\n+\tint naces = smb_get_naces(smbacl), i;\n+\tace_t *acebuf;\n+\tSMB4ACE_T *smbace;\n+\tTALLOC_CTX\t*mem_ctx;\n+\n+\t/* allocate the field of ZFS aces */\n+\tmem_ctx = main_loop_talloc_get();\n+\tacebuf = (ace_t *) talloc_size(mem_ctx, sizeof(ace_t)*naces);\n+\tif(acebuf == NULL) {\n+\t\terrno = ENOMEM;\n+\t\treturn False;\n+\t}\n+\t/* handle all aces */\n+\tfor(smbace = smb_first_ace4(smbacl), i = 0;\n+\t\t\tsmbace!=NULL;\n+\t\t\tsmbace = smb_next_ace4(smbace), i++) {\n+\t\tSMB_ACE4PROP_T *aceprop = smb_get_ace4(smbace);\n+\n+\t\tacebuf[i].a_type        = aceprop->aceType;\n+\t\tacebuf[i].a_flags       = aceprop->aceFlags;\n+\t\tacebuf[i].a_access_mask = aceprop->aceMask;\n+\t\tacebuf[i].a_who         = aceprop->who.id;\n+\t}\n+\tSMB_ASSERT(i == naces);\n+\n+\t/* store acl */\n+\tif(acl(fsp->fsp_name, ACE_SETACL, naces, acebuf)) {\n+\t\tif(errno == ENOSYS) {\n+\t\t\tDEBUG(9, (\"acl(ACE_SETACL, %s): Operation is not supported on the filesystem where the file reside\"));\n+\t\t} else {\n+\t\t\tDEBUG(9, (\"acl(ACE_SETACL, %s): %s \", fsp->fsp_name,\n+\t\t\t\t\tstrerror(errno)));\n+\t\t}\n+\t\treturn 0;\n+\t}\n+\n+\treturn True;\n+}\n+\n+/* zfs_set_nt_acl()\n+ * set the local file's acls obtaining it in NT form\n+ * using the NFSv4 format conversion\n+ */\n+static BOOL zfs_set_nt_acl(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t\t   uint32 security_info_sent,\n+\t\t\t   struct security_descriptor *psd)\n+{\n+\treturn smb_set_nt_acl_nfs4(fsp, security_info_sent, psd,\n+\t\t\tzfs_process_smbacl);\n+}\n+\n+size_t zfsacl_fget_nt_acl(struct vfs_handle_struct *handle,\n+\t\t\t\t struct files_struct *fsp,\n+\t\t\t\t int fd,  uint32 security_info,\n+\t\t\t\t struct security_descriptor **ppdesc)\n+{\n+\treturn zfs_get_nt_acl(fsp, security_info, ppdesc);\n+}\n+size_t zfsacl_get_nt_acl(struct vfs_handle_struct *handle,\n+\t\t\t\tstruct files_struct *fsp,\n+\t\t\t\tconst char *name,  uint32 security_info,\n+\t\t\t\tstruct security_descriptor **ppdesc)\n+{\n+\treturn zfs_get_nt_acl(fsp, security_info, ppdesc);\n+}\n+\n+BOOL zfsacl_fset_nt_acl(vfs_handle_struct *handle,\n+\t\t\t files_struct *fsp,\n+\t\t\t int fd, uint32 security_info_sent,\n+\t\t\t SEC_DESC *psd)\n+{\n+\treturn zfs_set_nt_acl(handle, fsp, security_info_sent, psd);\n+}\n+\n+BOOL zfsacl_set_nt_acl(vfs_handle_struct *handle,\n+\t\t       files_struct *fsp,\n+\t\t       const char *name, uint32 security_info_sent,\n+\t\t       SEC_DESC *psd)\n+{\n+\treturn zfs_set_nt_acl(handle, fsp, security_info_sent, psd);\n+}\n+\n+/* VFS operations structure */\n+\n+static vfs_op_tuple zfsacl_ops[] = {\t\n+\t{SMB_VFS_OP(zfsacl_fget_nt_acl), SMB_VFS_OP_FGET_NT_ACL,\n+\t SMB_VFS_LAYER_TRANSPARENT},\n+\t{SMB_VFS_OP(zfsacl_get_nt_acl), SMB_VFS_OP_GET_NT_ACL,\n+\t SMB_VFS_LAYER_TRANSPARENT},\n+\t{SMB_VFS_OP(zfsacl_fset_nt_acl), SMB_VFS_OP_FSET_NT_ACL,\n+\t SMB_VFS_LAYER_TRANSPARENT},\n+\t{SMB_VFS_OP(zfsacl_set_nt_acl), SMB_VFS_OP_SET_NT_ACL,\n+\t SMB_VFS_LAYER_TRANSPARENT},\n+\t{SMB_VFS_OP(NULL), SMB_VFS_OP_NOOP, SMB_VFS_LAYER_NOOP}\n+};\n+\n+NTSTATUS vfs_zfsacl_init(void);\n+NTSTATUS vfs_zfsacl_init(void)\n+{\n+\treturn smb_register_vfs(SMB_VFS_INTERFACE_VERSION, \"zfsacl\",\n+\t\t\t\tzfsacl_ops);\n+}\n\nModified: branches/SAMBA_3_0_26/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0_26/source/Makefile.in\t2007-05-14 23:24:50 UTC (rev 22871)\n+++ branches/SAMBA_3_0_26/source/Makefile.in\t2007-05-14 23:55:11 UTC (rev 22872)\n@@ -422,6 +422,7 @@\n VFS_AIXACL_OBJ = modules/vfs_aixacl.o modules/vfs_aixacl_util.o\n VFS_AIXACL2_OBJ = modules/vfs_aixacl2.o modules/vfs_aixacl_util.o modules/nfs4_acls.o\n VFS_SOLARISACL_OBJ = modules/vfs_solarisacl.o\n+VFS_ZFSACL_OBJ = modules/vfs_zfsacl.o modules/nfs4_acls.o\n VFS_HPUXACL_OBJ = modules/vfs_hpuxacl.o\n VFS_IRIXACL_OBJ = modules/vfs_irixacl.o\n VFS_TRU64ACL_OBJ = modules/vfs_tru64acl.o\n@@ -1463,6 +1464,11 @@\n \t@$(SHLD) $(LDSHFLAGS) -o $@ $(VFS_SOLARISACL_OBJ) \\\n \t\t@SONAMEFLAG@`basename $@`\n \n+bin/zfsacl.@SHLIBEXT@: $(VFS_ZFSACL_OBJ)\n+\t@echo \"Building plugin $@\"\n+\t@$(SHLD) $(LDSHFLAGS) -o $@ $(VFS_ZFSACL_OBJ) \\\n+\t\t@SONAMEFLAG@`basename $@`\n+\n bin/irixacl.@SHLIBEXT@: proto_exists $(VFS_IRIXACL_OBJ)\n \t@echo \"Building plugin $@\"\n \t@$(SHLD) $(LDSHFLAGS) -o $@ $(VFS_IRIXACL_OBJ) \\\n\nAdded: branches/SAMBA_3_0_26/source/modules/vfs_zfsacl.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/modules/vfs_zfsacl.c\t2007-05-14 23:24:50 UTC (rev 22871)\n+++ branches/SAMBA_3_0_26/source/modules/vfs_zfsacl.c\t2007-05-14 23:55:11 UTC (rev 22872)\n@@ -0,0 +1,186 @@\n+/*\n+ * Convert ZFS/NFSv4 acls to NT acls and vice versa.\n+ *\n+ * Copyright (C) Jiri Sasek, 2007\n+ * based on the foobar.c module which is copyrighted by Volker Lendecke\n+ *\n+ * This program is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; if not, write to the Free Software\n+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+ *\n+ */\n+\n+#include \"includes.h\"\n+#include \"nfs4_acls.h\"\n+\n+#undef DBGC_CLASS\n+#define DBGC_CLASS DBGC_VFS\n+\n+#define ZFSACL_MODULE_NAME \"zfsacl\"\n+\n+/* zfs_get_nt_acl()\n+ * read the local file's acls and return it in NT form\n+ * using the NFSv4 format conversion\n+ */\n+static size_t zfs_get_nt_acl(struct files_struct *fsp, uint32 security_info,\n+\t\t\t     struct security_descriptor **ppdesc)\n+{\n+\tint naces, i;\n+\tace_t *acebuf;\n+\tSMB4ACL_T *pacl;\n+\tTALLOC_CTX\t*mem_ctx;\n+\n+\t/* read the number of file aces */\n+\tif((naces = acl(fsp->fsp_name, ACE_GETACLCNT, 0, NULL)) == -1) {\n+\t\tif(errno == ENOSYS) {\n+\t\t\tDEBUG(9, (\"acl(ACE_GETACLCNT, %s): Operation is not supported on the filesystem where the file reside\"));\n+\t\t} else {\n+\t\t\tDEBUG(9, (\"acl(ACE_GETACLCNT, %s): %s \", fsp->fsp_name,\n+\t\t\t\t\tstrerror(errno)));\n+\t\t}\n+\t\treturn 0;\n+\t}\n+\t/* allocate the field of ZFS aces */\n+\tmem_ctx = main_loop_talloc_get();\n+\tacebuf = (ace_t *) talloc_size(mem_ctx, sizeof(ace_t)*naces);\n+\tif(acebuf == NULL) {\n+\t\terrno = ENOMEM;\n+\t\treturn 0;\n+\t}\n+\t/* read the aces into the field */\n+\tif(acl(fsp->fsp_name, ACE_GETACL, naces, acebuf) < 0) {\n+\t\tDEBUG(9, (\"acl(ACE_GETACL, %s): %s \", fsp->fsp_name,\n+\t\t\t\tstrerror(errno)));\n+\t\treturn 0;\n+\t}\n+\t/* create SMB4ACL data */\n+\tif((pacl = smb_create_smb4acl()) == NULL) return 0;\n+\tfor(i=0; i ZFS acl using NFSv4 conv. */\n+static BOOL zfs_process_smbacl(files_struct *fsp, SMB4ACL_T *smbacl)\n+{\n+\tint naces = smb_get_naces(smbacl), i;\n+\tace_t *acebuf;\n+\tSMB4ACE_T *smbace;\n+\tTALLOC_CTX\t*mem_ctx;\n+\n+\t/* allocate the field of ZFS aces */\n+\tmem_ctx = main_loop_talloc_get();\n+\tacebuf = (ace_t *) talloc_size(mem_ctx, sizeof(ace_t)*naces);\n+\tif(acebuf == NULL) {\n+\t\terrno = ENOMEM;\n+\t\treturn False;\n+\t}\n+\t/* handle all aces */\n+\tfor(smbace = smb_first_ace4(smbacl), i = 0;\n+\t\t\tsmbace!=NULL;\n+\t\t\tsmbace = smb_next_ace4(smbace), i++) {\n+\t\tSMB_ACE4PROP_T *aceprop = smb_get_ace4(smbace);\n+\n+\t\tacebuf[i].a_type        = aceprop->aceType;\n+\t\tacebuf[i].a_flags       = aceprop->aceFlags;\n+\t\tacebuf[i].a_access_mask = aceprop->aceMask;\n+\t\tacebuf[i].a_who         = aceprop->who.id;\n+\t}\n+\tSMB_ASSERT(i == naces);\n+\n+\t/* store acl */\n+\tif(acl(fsp->fsp_name, ACE_SETACL, naces, acebuf)) {\n+\t\tif(errno == ENOSYS) {\n+\t\t\tDEBUG(9, (\"acl(ACE_SETACL, %s): Operation is not supported on the filesystem where the file reside\"));\n+\t\t} else {\n+\t\t\tDEBUG(9, (\"acl(ACE_SETACL, %s): %s \", fsp->fsp_name,\n+\t\t\t\t\tstrerror(errno)));\n+\t\t}\n+\t\treturn 0;\n+\t}\n+\n+\treturn True;\n+}\n+\n+/* zfs_set_nt_acl()\n+ * set the local file's acls obtaining it in NT form\n+ * using the NFSv4 format conversion\n+ */\n+static BOOL zfs_set_nt_acl(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t\t   uint32 security_info_sent,\n+\t\t\t   struct security_descriptor *psd)\n+{\n+\treturn smb_set_nt_acl_nfs4(fsp, security_info_sent, psd,\n+\t\t\tzfs_process_smbacl);\n+}\n+\n+size_t zfsacl_fget_nt_acl(struct vfs_handle_struct *handle,\n+\t\t\t\t struct files_struct *fsp,\n+\t\t\t\t int fd,  uint32 security_info,\n+\t\t\t\t struct security_descriptor **ppdesc)\n+{\n+\treturn zfs_get_nt_acl(fsp, security_info, ppdesc);\n+}\n+size_t zfsacl_get_nt_acl(struct vfs_handle_struct *handle,\n+\t\t\t\tstruct files_struct *fsp,\n+\t\t\t\tconst char *name,  uint32 security_info,\n+\t\t\t\tstruct security_descriptor **ppdesc)\n+{\n+\treturn zfs_get_nt_acl(fsp, security_info, ppdesc);\n+}\n+\n+BOOL zfsacl_fset_nt_acl(vfs_handle_struct *handle,\n+\t\t\t files_struct *fsp,\n+\t\t\t int fd, uint32 security_info_sent,\n+\t\t\t SEC_DESC *psd)\n+{\n+\treturn zfs_set_nt_acl(handle, fsp, security_info_sent, psd);\n+}\n+\n+BOOL zfsacl_set_nt_acl(vfs_handle_struct *handle,\n+\t\t       files_struct *fsp,\n+\t\t       const char *name, uint32 security_info_sent,\n+\t\t       SEC_DESC *psd)\n+{\n+\treturn zfs_set_nt_acl(handle, fsp, security_info_sent, psd);\n+}\n+\n+/* VFS operations structure */\n+\n+static vfs_op_tuple zfsacl_ops[] = {\t\n+\t{SMB_VFS_OP(zfsacl_fget_nt_acl), SMB_VFS_OP_FGET_NT_ACL,\n+\t SMB_VFS_LAYER_TRANSPARENT},\n+\t{SMB_VFS_OP(zfsacl_get_nt_acl), SMB_VFS_OP_GET_NT_ACL,\n+\t SMB_VFS_LAYER_TRANSPARENT},\n+\t{SMB_VFS_OP(zfsacl_fset_nt_acl), SMB_VFS_OP_FSET_NT_ACL,\n+\t SMB_VFS_LAYER_TRANSPARENT},\n+\t{SMB_VFS_OP(zfsacl_set_nt_acl), SMB_VFS_OP_SET_NT_ACL,\n+\t SMB_VFS_LAYER_TRANSPARENT},\n+\t{SMB_VFS_OP(NULL), SMB_VFS_OP_NOOP, SMB_VFS_LAYER_NOOP}\n+};\n+\n+NTSTATUS vfs_zfsacl_init(void);\n+NTSTATUS vfs_zfsacl_init(void)\n+{\n+\treturn smb_register_vfs(SMB_VFS_INTERFACE_VERSION, \"zfsacl\",\n+\t\t\t\tzfsacl_ops);\n+}\n\n"}