{"category": "ham", "to_address": "\"Martin Barth\" <barth@bitbone.de>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: syscall getpwnam and changing authetication on system", "body": "On 5/22/07, Martin Barth  wrote:\n\n> afer trying a lot of stuff i figured out that following code line works:\n>\n>\n> my ($login,$pass,$uid,$gid) = (getpwnam($user),rand);\n>\n> without rand it's still the old user... can anyone explain why perl seems\n> to cache this? (even without eval)\n\nWell, I'd guess (without looking at the source, which would be\ncheating :-) that there's probably a one-user buffer for getpwnam,\nwhich may be shared with getpwuid. If you ask for the same user\nrepeatedly, you get the cached value.\n\nNo; I'm sure that's wrong. Why should your random value affect the\ncache? How odd.\n\nWhile my explanation doesn't seem correct, a correct explanation for\nthis caching behavior belongs in the documentation. I strongly\nencourage you to run the perlbug program, submit your test case\n(above), and request that this cache be documented. At a minimum, the\ndocumentation should show how to ensure that a fresh request is made,\nby adding rand or another way, in case the underlying system\ninformation has changed.\n\nThanks!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}