{"category": "spam", "to_address": "<theorize@plg.uwaterloo.ca>", "from_address": "\"Adkins R. Horatio\" <baufv@btopenworld.com>", "subject": "If the class has a vtbl, the process goes something like the following.", "body": "GPSI Announces Market Attack Into $1 Trillion Market!\n\nGlobal Payment Solutions\nSymbol: GPSI\nPrice: $0.03\n\nGPSI announced its plans to address the huge influx of immigrant workers\ninto the US that need banking solutions that they otherwise would not\nqualify for. This market is expected to represent over $1 Trillion\ndollars to be managed by 2008. GPSI provides viable solutions to this\nmarket. This is hot, read the news and watch for more Monday! Get on\nGPSI first thing Monday!\n\nThe title comes from a JavaOne session we did last year, which in turn\ncomes from a phrase I like to use. Indirectly calling a virtual function\nfrom a base class constructor. You can find a couple of simple, \nwell-documented explanations out there that apply to problems easy to \ndiagnose during postmortem debugging. It's supposed to be transactional\nand occur only once. Some confusion comes from the fact that there are\nmany different ways of doing this, as opposed to the standard pattern\nestablished for Ajax applications with XmlHttpRequest. This is ongoing\nwork.\nIndirectly calling a virtual function from a base class destructor. I\ndon't think the tools today, especially prior to Matisse, made that any\neasier.\nSome of the really important things seem silly from an engineering\nstandpoint, but are important in making our deployment model more\napproachable. x recognize that a base  class's constructor or destructor\ncan't possibly invoke a derived class's  member function. By contrast\nbrowsers might look at all the links on the page and  pre-fetch them, or\npre-fetch the ones they think are most likely to be followed next.\n\n"}