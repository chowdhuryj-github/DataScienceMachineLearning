{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11193: Getting a basic get_predefined_key implementation to\n\twork. in file:///home/jelmer/bzr.samba-old/4.0-regwrite/", "body": "At file:///home/jelmer/bzr.samba-old/4.0-regwrite/\n\n------------------------------------------------------------\nrevno: 11193\nrevision-id: jelmer@samba.org-20070618211530-94qthtfumeziwpyy\nparent: jelmer@samba.org-20070613205358-bw2nnemz6ringkd0\ncommitter: Jelmer Vernooij \nbranch nick: 4.0-regwrite\ntimestamp: Mon 2007-06-18 23:15:30 +0200\nmessage:\n  Getting a basic get_predefined_key implementation to work.\nmodified:\n  source/lib/registry/interface.c svn-v2:20@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fcommon%2freg_interface.c\n  source/lib/registry/local.c    local.c-20070602140117-9a3wth1mhbrq7ej1-2\n  source/lib/registry/registry.h svn-v2:10026@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fregistry.h\n  source/lib/registry/tests/generic.c svn-v2:21656@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2ftests%2fgeneric.c\n  source/lib/registry/tests/registry.c registry.c-20070613193046-9w6vxztx0uea8a0p-1\n=== modified file 'source/lib/registry/interface.c'\n--- a/source/lib/registry/interface.c\t2007-06-13 20:53:58 +0000\n+++ b/source/lib/registry/interface.c\t2007-06-18 21:15:30 +0000\n@@ -43,21 +43,6 @@\n \t{ 0, NULL }\n };\n \n-/** Obtain a list of predefined keys. */\n-_PUBLIC_ int reg_list_predefs(TALLOC_CTX *mem_ctx, char ***predefs, uint32_t **hkeys)\n-{\n-\tint i;\n-\t*predefs = talloc_array(mem_ctx, char *, ARRAY_SIZE(reg_predefined_keys));\n-\t*hkeys = talloc_array(mem_ctx, uint32_t, ARRAY_SIZE(reg_predefined_keys));\n-\n-\tfor (i = 0; reg_predefined_keys[i].name; i++) {\n-\t\t(*predefs)[i] = talloc_strdup(mem_ctx, reg_predefined_keys[i].name);\n-\t\t(*hkeys)[i] = reg_predefined_keys[i].handle;\n-\t}\n-\n-\treturn i;\n-}\n-\n /** Obtain name of specific hkey. */\n _PUBLIC_ const char *reg_get_predef_name(uint32_t hkey)\n {\n@@ -71,12 +56,16 @@\n }\n \n /** Get predefined key by name. */\n-_PUBLIC_ WERROR reg_get_predefined_key_by_name(struct registry_context *ctx, const char *name, struct registry_key **key)\n+_PUBLIC_ WERROR reg_get_predefined_key_by_name(struct registry_context *ctx, \n+\t\t\t\t\t\t\t\t\t\t\t   const char *name, \n+\t\t\t\t\t\t\t\t\t\t\t   struct registry_key **key)\n {\n \tint i;\n \t\n \tfor (i = 0; reg_predefined_keys[i].name; i++) {\n-\t\tif (!strcasecmp(reg_predefined_keys[i].name, name)) return reg_get_predefined_key(ctx, reg_predefined_keys[i].handle, key);\n+\t\tif (!strcasecmp(reg_predefined_keys[i].name, name)) \n+\t\t\treturn reg_get_predefined_key(ctx, reg_predefined_keys[i].handle, \n+\t\t\t\t\t\t\t\t\t\t  key);\n \t}\n \n \tDEBUG(1, (\"No predefined key with name '%s'\\n\", name));\n@@ -227,7 +216,8 @@\n /**\n  * Set a value.\n  */\n-_PUBLIC_ WERROR reg_val_set(struct registry_key *key, const char *value, uint32_t type, const DATA_BLOB data)\n+_PUBLIC_ WERROR reg_val_set(struct registry_key *key, const char *value, \n+\t\t\t\t\t\t\tuint32_t type, const DATA_BLOB data)\n {\n \tif (key == NULL)\n \t\treturn WERR_INVALID_PARAM;\n@@ -262,8 +252,7 @@\n /**\n  * Delete a value.\n  */\n-_PUBLIC_ WERROR reg_del_value(struct registry_key *key, \n-\t\t\t\t\t\t\t  const char *valname)\n+_PUBLIC_ WERROR reg_del_value(struct registry_key *key, const char *valname)\n {\n \tif (key == NULL)\n \t\treturn WERR_INVALID_PARAM;\n\n=== modified file 'source/lib/registry/local.c'\n--- a/source/lib/registry/local.c\t2007-06-13 20:53:58 +0000\n+++ b/source/lib/registry/local.c\t2007-06-18 21:15:30 +0000\n@@ -48,10 +48,6 @@\n \tstruct hive_key *hive_key;\n };\n \n-WERROR reg_mount_hive(struct registry_context *ctx, struct reg_key_path *path, \n-\t\t\t\t\t  struct hive_key *hive);\n-WERROR reg_unmount_hive(struct registry_context *ctx, struct hive_key *hive);\n-\n static WERROR local_open_key(TALLOC_CTX *mem_ctx,\n \t\t\t\t\t\t   struct registry_key *parent, \n \t\t\t\t\t\t   const char *path,\n@@ -103,7 +99,7 @@\n \treturn WERR_OK;\n }\n \n-WERROR local_get_predefined_key (struct registry_context *ctx, \n+WERROR local_get_predefined_key (const struct registry_context *ctx, \n \t  uint32_t key_id, struct registry_key **key) \n {\t\n \tstruct registry_local *rctx = talloc_get_type(ctx, struct registry_local);\n@@ -152,3 +148,27 @@\n \t\n \treturn WERR_OK;\n }\n+\n+WERROR reg_mount_hive(struct registry_context *rctx, \n+\t\t\t\t\t  struct hive_key *hive_key,\n+\t\t\t\t\t  uint32_t key_id,\n+\t\t\t\t\t  const char **elements) \n+{\n+\tstruct registry_local *reg_local = talloc_get_type(rctx, struct registry_local);\n+\tstruct mountpoint *mp = talloc(rctx, struct mountpoint);\n+\tint i = 0;\n+\n+\tmp->path.predefined_key = key_id;\n+\tmp->prev = mp->next = NULL;\n+\tmp->key = hive_key;\n+\tmp->path.elements = talloc_array(mp, const char *, \n+\t\t\t\t\t\t\t\t\t str_list_length(elements));\n+\tfor (i = 0; elements[i]; i++) {\n+\t\tmp->path.elements[i] = elements[i];\n+\t}\n+\tmp->path.elements[i] = NULL;\n+\n+\tDLIST_ADD(reg_local->mountpoints, mp);\n+\n+\treturn WERR_OK;\n+}\n\n=== modified file 'source/lib/registry/registry.h'\n--- a/source/lib/registry/registry.h\t2007-06-13 20:53:58 +0000\n+++ b/source/lib/registry/registry.h\t2007-06-18 21:15:30 +0000\n@@ -192,8 +192,6 @@\n \n _PUBLIC_ WERROR reg_open_wine(struct registry_context **ctx, const char *path);\n \n-_PUBLIC_ int reg_list_predefs(TALLOC_CTX *mem_ctx, char ***predefs, \n-\t\t\t\t\t\t\t  uint32_t **hkeys);\n _PUBLIC_ const char *reg_get_predef_name(uint32_t hkey);\n _PUBLIC_ WERROR reg_get_predefined_key_by_name(struct registry_context *ctx, \n \t\t\t\t\t\t\t\t\t\t\t   const char *name, \n@@ -251,4 +249,9 @@\n WERROR reg_load_key(struct registry_context *ctx, struct registry_key *key, \n \t\t\t\t\tconst char *name, const char *filename);\n \n+WERROR reg_mount_hive(struct registry_context *rctx, \n+\t\t\t\t\t  struct hive_key *hive_key,\n+\t\t\t\t\t  uint32_t key_id,\n+\t\t\t\t\t  const char **elements);\n+\n #endif /* _REGISTRY_H */\n\n=== modified file 'source/lib/registry/tests/generic.c'\n--- a/source/lib/registry/tests/generic.c\t2007-06-12 16:54:40 +0000\n+++ b/source/lib/registry/tests/generic.c\t2007-06-18 21:15:30 +0000\n@@ -27,6 +27,7 @@\n #include \"librpc/gen_ndr/winreg.h\"\n \n struct torture_suite *torture_registry_hive(TALLOC_CTX *mem_ctx);\n+struct torture_suite *torture_registry_registry(TALLOC_CTX *mem_ctx);\n \n static bool test_str_regtype(struct torture_context *ctx)\n {\n@@ -109,6 +110,7 @@\n \ttorture_suite_add_simple_test(suite, \"reg_val_description null\", test_reg_val_description_nullname);\n \n \ttorture_suite_add_suite(suite, torture_registry_hive(mem_ctx));\n+\ttorture_suite_add_suite(suite, torture_registry_registry(mem_ctx));\n \n \treturn suite;\n }\n\n=== modified file 'source/lib/registry/tests/registry.c'\n--- a/source/lib/registry/tests/registry.c\t2007-06-13 20:53:58 +0000\n+++ b/source/lib/registry/tests/registry.c\t2007-06-18 21:15:30 +0000\n@@ -27,6 +27,9 @@\n #include \"librpc/gen_ndr/winreg.h\"\n #include \"system/filesys.h\"\n \n+NTSTATUS torture_temp_dir(TALLOC_CTX *mem_ctx, const char *prefix, \n+\t\t\t\t\t\t\t\t   const char **tempdir);\n+\n static bool test_get_predefined(struct torture_context *tctx,\n \t\t\t\t\t\t\t\tconst void *_data)\n {\n@@ -45,13 +48,34 @@\n {\n \tstruct registry_context *rctx;\n \tWERROR error;\n+\tconst char *tempdir;\n+\tNTSTATUS status;\n+\tstruct hive_key *hive_key;\n \n \terror = reg_open_local(tctx, &rctx, NULL, NULL);\n \tif (!W_ERROR_IS_OK(error)) {\n \t\treturn false;\n \t}\n \n-\t/* FIXME */\n+\tstatus = torture_temp_dir(tctx, \"registry-local\", &tempdir);\n+\tif (!NT_STATUS_IS_OK(status)) {\n+\t\treturn false;\n+\t}\n+\n+\terror = reg_open_ldb_file(tctx, \n+\t\t\t\t\t  talloc_asprintf(tctx, \"%s/classes_root.ldb\", tempdir),\n+\t\t\t\t\t  NULL,\n+\t\t\t\t\t  NULL,\n+\t\t\t\t\t  &hive_key);\n+\tif (!W_ERROR_IS_OK(error)) {\n+\t\treturn false;\n+\t}\n+\n+\terror = reg_mount_hive(rctx, hive_key, HKEY_CLASSES_ROOT, NULL);\n+\tif (!W_ERROR_IS_OK(error)) {\n+\t\treturn false;\n+\t}\n+\n \treturn true;\n }\n \n\n"}