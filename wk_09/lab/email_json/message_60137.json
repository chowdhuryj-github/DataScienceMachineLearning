{"category": "ham", "to_address": "Volker.Lendecke@SerNet.DE", "from_address": "tridge@samba.org", "subject": "Re: talloc_stack.c?", "body": "Volker,\n\n > I would like to set the top of the stack from the topmost\n > destructor, but the children's ones are called after it, so\n > they would overwrite the top.\n\nI still don't see the problem. Use DLIST_REMOVE() and it will do the\nright thing. You can remove in any order you like.\n\nDo you have a snippet of code showing the problem you are thinking of?\n\n > Sure. But with the talloc stack I want to make that more\n > fine grained. For example a routine to handle a single smb\n > request might have to do quite a bit of looping, and I want\n > to give that routine a chance to clean up memory earlier\n > than the main talloc loop would.\n\nIf there is a loop at one level then the stack idea won't really help\nwith the peak memory usage (which is really what matters). \n\nIf what you really want this for is DEBUG() then maybe a varient of\nDEBUG() that allocates a _tmp_ctx would make sense? Eg:\n\n #define DEBUG_TMP_CTX(level, xx) do { \\\n\tTALLOC_CTX *_tmp_ctx = talloc_new(NULL); \\\n\tDEBUG(level, xx); \\\n\ttalloc_free(_tmp_ctx); \\\n } while(0)\n\nthen use _tmp_ctx in the debug args.\n\nwould that help with the current static string uses?\n\nCheers, Tridge\n\n"}