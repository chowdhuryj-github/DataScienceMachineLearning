{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23073 - in branches/SAMBA_3_0/source/rpc_client:\n\t.", "body": "Author: obnox\nDate: 2007-05-22 13:40:01 +0000 (Tue, 22 May 2007)\nNew Revision: 23073\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23073\n\nLog:\nIn the internal rpccli_lsa_lookup_sids_noalloc(), use a temporary \ntalloc context for use with the actual rpc query and response.\nSo the the parent context does not get flooded by the posslibly\nlarge amount of response data (when looking up a lot of sids).\n\nNote: It not possible, to simply use the names and domains arrays\nas talloc contexts for the talloc_strdup calls, because from \nrpccli_lsa_lookup_sids_all, this is called with names + offset\nand domains + offset where names and domains are talloced \narraye for the complete response.\n\n\nModified:\n   branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c\n===================================================================\n--- branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c\t2007-05-22 12:49:41 UTC (rev 23072)\n+++ branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c\t2007-05-22 13:40:01 UTC (rev 23073)\n@@ -129,9 +129,8 @@\n \n /* Lookup a list of sids\n  *\n- * internal version withOUT memory allocation.\n- * this assumes suffciently sized arrays to store\n- * domains, names and types */\n+ * internal version withOUT memory allocation of the target arrays.\n+ * this assumes suffciently sized arrays to store domains, names and types. */\n \n static NTSTATUS rpccli_lsa_lookup_sids_noalloc(struct rpc_pipe_client *cli,\n \t\t\t\t\t       TALLOC_CTX *mem_ctx,\n@@ -148,12 +147,20 @@\n \tDOM_R_REF ref;\n \tLSA_TRANS_NAME_ENUM t_names;\n \tNTSTATUS result = NT_STATUS_OK;\n+\tTALLOC_CTX *tmp_ctx = NULL;\n \tint i;\n \n+\ttmp_ctx = talloc_new(mem_ctx);\n+\tif (!tmp_ctx) {\n+\t\tDEBUG(0, (\"rpccli_lsa_lookup_sids_noalloc: out of memory!\\n\"));\n+\t\tresult = NT_STATUS_UNSUCCESSFUL;\n+\t\tgoto done;\n+\t}\n+\n \tZERO_STRUCT(q);\n \tZERO_STRUCT(r);\n \n-\tinit_q_lookup_sids(mem_ctx, &q, pol, num_sids, sids, 1);\n+\tinit_q_lookup_sids(tmp_ctx, &q, pol, num_sids, sids, 1);\n \n \tZERO_STRUCT(ref);\n \tZERO_STRUCT(t_names);\n@@ -161,7 +168,7 @@\n \tr.dom_ref = &ref\n \tr.names = &t_names;\n \n-\tCLI_DO_RPC( cli, mem_ctx, PI_LSARPC, LSA_LOOKUPSIDS,\n+\tCLI_DO_RPC( cli, tmp_ctx, PI_LSARPC, LSA_LOOKUPSIDS,\n \t\t\tq, r,\n \t\t\tqbuf, rbuf,\n \t\t\tlsa_io_q_lookup_sids,\n@@ -213,8 +220,8 @@\n \t\t}\n \t}\n \n- done:\n-\n+done:\n+\tTALLOC_FREE(tmp_ctx);\n \treturn result;\n }\n \n@@ -401,7 +408,8 @@\n \t\t\t   sids_processed + hunk_num_sids - 1,\n \t\t\t   num_sids));\n \n-\t\thunk_result = rpccli_lsa_lookup_sids_noalloc(cli, mem_ctx, \n+\t\thunk_result = rpccli_lsa_lookup_sids_noalloc(cli,\n+\t\t\t\t\t\t\t     mem_ctx,\n \t\t\t\t\t\t\t     pol,\n \t\t\t\t\t\t\t     hunk_num_sids, \n \t\t\t\t\t\t\t     hunk_sids,\n\n"}