{"category": "ham", "to_address": "\"Vadim Ogranovich\" <vogranovich@jumptrading.com>", "from_address": "\"Gabor Grothendieck\" <ggrothendieck@gmail.com>", "subject": "Re: [R] subset arg in (modified) evalq", "body": "Try this:\n\ne <- quote(summary(y + z))\nall.vars(e)\n\n\nOn 5/18/07, Vadim Ogranovich  wrote:\n> Sorry, I didn't explain myself clear enough. I knew about the select arg in\n> subset(). My question was, given the expression expression(summary(x+y)),\n> how to extract all names that will be looked up during its evaluation.\n>\n> As to checking performance assumptions, you are right, in most cases the\n> overhead is negligible, but sometimes I work with really big data sets.\n>\n> Thanks a lot for your help,\n> Vadim\n>\n>\n> ----- Original Message -----\n> From: \"Gabor Grothendieck\" \n> To: \"Vadim Ogranovich\" \n> Cc: r-help@stat.math.ethz.ch\n> Sent: Friday, May 18, 2007 9:53:26 AM (GMT-0600) America/Chicago\n> Subject: Re: [R] subset arg in (modified) evalq\n>\n> I would check your performance assumption with an actual test before\n> concluding such but at any rate subset does have a select argument. See\n> ?subset\n>\n> On 5/18/07, Vadim Ogranovich  wrote:\n> > Thanks Gabor!  This does exactly what I wanted.\n> >\n> > One follow-up question, how to extract the var names, in this case y, z,\n> > from the expression? The subset function creates a new object and this may\n> > be expensive when the data has a lot of irrelevant collumns. So I thougth\n> > that I could reduce this to the columns I actually need.\n> >\n> > Thanks,\n> > Vadim\n> >\n> >\n> >\n> > ----- Original Message -----\n> > From: \"Gabor Grothendieck\" \n> > To: \"Vadim Ogranovich\" \n> > Cc: r-help@stat.math.ethz.ch\n> > Sent: Friday, May 18, 2007 9:19:49 AM (GMT-0600) America/Chicago\n> > Subject: Re: [R] subset arg in (modified) evalq\n> >\n> > Try this:\n> >\n> >    with(subset(data, x > 0), summary(y + z))\n> >\n> >\n> > On 5/18/07, Vadim Ogranovich  wrote:\n> > > Hi,\n> > >\n> > > When using evalq to evaluate expressions within a say data.frame context\n> I\n> > often wish there was a 'subset' argument, much like in lm() or any ather\n> > advanced regression model. I would be grateful for a tip how to do this.\n> > >\n> > > Here is an illustration of what I want:\n> > >\n> > > n <- 100\n> > > data <- data.frame(x=rnorm(n), y=rnorm(y), z=rnorm(z))\n> > >\n> > > # this works\n> > > evalq({ i <- 0 > >\n> > > # I want to do the above w/o explicit subscripting, e.g.\n> > > myevalq(summary(y + z), subset=0 > >\n> > > Thanks,\n> > > Vadim\n> > >\n> > >        [[alternative HTML version deleted]]\n> > >\n> > > ______________________________________________\n> > > R-help@stat.math.ethz.ch mailing list\n> > > https://stat.ethz.ch/mailman/listinfo/r-help\n> > > PLEASE do read the posting guide\n> > http://www.R-project.org/posting-guide.html\n> > > and provide commented, minimal, self-contained, reproducible code.\n> > >\n> >\n>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}