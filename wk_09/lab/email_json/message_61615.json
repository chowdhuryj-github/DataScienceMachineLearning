{"category": "ham", "to_address": "Allison Randal <allison@perl.org>", "from_address": "Jonathan Worthington <jonathan@jnthn.net>", "subject": "Re: find_method changes look wrong", "body": "Allison Randal wrote:\n> There currently isn't any way to add vtable overrides to the class's \n> list of vtable overrides, so this is temporary (and actually, I \n> thought you put it in).\nThat was implemented earlier today. I wrote the email before I'd \nimplemented it. I think I've implemented what you meant in PDD15, but \nplease check.\n\n> The problem is that Object was poking directly into the internals of \n> Class, which definitely breaks encapsulation between the two. Object \n> needs a standard interface in Class that it can query for methods. It \n> doesn't have to be find_method.\nI thought we had this discussion a while back and agreed that Object \ncould know about the internals of Class, because any different class \nwould implement and instantiate its own object anyway? In principle, \nencapsulation is nice, though.\n\nI ended up pulling the lookup code back into Object for now, because you \nneed to have the instances of the PMCs we are inheriting from available \nduring method lookup to call find_method on.\n\nTechnically we do have a way to write Object's find_method independent \nof the class: use inspect_str(\"methods\"). Problems are performance \n(which is second to correct behavior, of course, but still...) and that \nthe values that inspect_str takes and is expected to respond to aren't \nactually standardized anywhere.\n\nJonathan\n\n\n"}