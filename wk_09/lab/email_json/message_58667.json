{"category": "ham", "to_address": "beginners@perl.org, Adrian Howard <adrianh@quietstars.com>", "from_address": "Ovid <publiustemp-perlqa3@yahoo.com>", "subject": "Test::Class fixture problem", "body": "I've just spent quite a bit of time debugging a problem where a Test::Class setup method was misbehaving.  My tests passed, but mysql was spitting out errors directly to STDERR and quite a bit of tracing led me to the following:\n\n  sub setup : Tests(setup) {\n      my $test = shift;\n      $test->SUPER::startup;\n      $test->_make_test_servers(\n          num_servers => 2,\n          username    => 'Ovid',\n      );\n  }\n\nAs you can see, I called SUPER::startup instead of SUPER::setup.\n\nMy base class has stubs for these methods to ensure that I never have a problem with SUPER::\n\n  sub startup : Tests(startup) {}\n  sub setup : Tests(setup) {}\n\n  sub teardown : Tests(teardown) {}\n\n  sub shutdown : Tests(shutdown) {}\n\n\nSometimes in my hierarchy, though, the SUPER::startup (or whatever) method will call a chain of two of these before getting to the stub.  It's trivial to write code in my stubs which check the caller and issue a warning and maybe I can just walk back through the call stack to issue a warning if I'm ever called by an inappropriately named method, but that seems a bit hackish.  Is there some better way to solve this problem?\n\nCheers,\nOvid\n\n\n-- \nBuy the book -- http://www.oreilly.com/catalog/perlhks/\nPerl and CGI -- http://users.easystreet.com/ovid/cgi_course/\n\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}