{"category": "ham", "to_address": "samba-technical@lists.samba.org", "from_address": "\"John Jorgensen\" <jorgensen.john@gmail.com>", "subject": "FiniteStateMachine's assumption about first property is non-standard", "body": "I've noticed a Minor issue in swat as a consequence of a class\nexercise (I'm trying to semi-automatically generate graphviz code for\ndrawing pictures of Swat finite state machines).\n\nThe implementation of start states in  qx.util.fsm.FiniteStateMachine\ndepends on an assumption which isn't warranted by the JavaScript\ndefinition, though the assumption is probably fulfilled by most\nbrowsers you care about.\n\nLooking for the Start states for my graphs, I found the comment in\nqx.util.fsm.FiniteStateMachine reading:\n\n \"The starting state is defined as the first state added\n   to the finite state machine.\"\n\nThe implementation of this specification in\nqx.util.fsm.FiniteStateMachine.start() assumes that the first property\nadded to an Object (in this case the _states object) will always be\nlisted first in an enumeration of that object's properties.  That is\ncertainly true for all the browsers I've tried, and competitive\npressure between the browsers may have made it true for all of them (a\n3-year-old article google turned up,\nhttp://blog.persistent.info/2004/08/javascript-associative-arrays.html,\nsays that khtml and opera used to produce arbitrary enumeration\norders, but opera 9.10 enumerates properties in the order they were\nadded).\n\nAccording to David Flanagan's \"Javascript: The Definitive Guide\", 5th\nedition, p. 108, though, no enumeration order is guaranteed. I'm not\nexperienced in reading standardese, but section 12.6.4 of the ECMA-262\nspecification of ECMAScript says that the \"mechanics of enumerating\nthe properties ... is implementation dependent. The order of\nenumeration is defined by the object.\"\n\nSo, strictly speaking, FiniteStateMachine.js should save the start\nstate under a separate name, rather than relying on it always being\nenumerated first. But you might decide that's too persnickety to worry\nabout.\n\n"}