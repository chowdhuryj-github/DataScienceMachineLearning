{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Ovid <publiustemp-perl6language2@yahoo.com>", "subject": "S12:  can(), signatures and casting", "body": "My apologies if these have been answered.  I've been chatting with\nJonathan Worthington about some of this and any misconceptions are\nmine, not his.\n\nIn reading through S12, I see that .can() returns an iterator for the\nmethods matched.  What I'm curious about is this:\n\n  if $obj.can('fribble') {\n    my BadPoet $jibbet = $obj.fribble('repeatedly');\n  }\n\nJust because $obj.can('fribble') does not mean that the available\nfribble(s) will accept a string argument or return BadPoet instances. \nIn chatting with Jonathan about this, he speculated that I would have\nto manually walk the method objects in the iterator to find out if I\nreally have a suitable method.  This seems like what we really have is\n$object.might($method).  Is there a simpler way of determining if\nthere's an appropriate method for what I need?  It seems like what we\nreally want is a method object where I can declare a signature and then\ndo this:\n\n  if $obj.can($object_with_signature){ ... }\n\nThis raises my second question.  What if I have this?\n\n  class MadHatter is BadPoet { ... }\n\nIf I get back a MadHatter instead of a BadPoet, but I really want the\nsuperclass and not a subclass, how can I enforce that?  Do I have to do\nsomething like this?  (pseudo-code)\n\n  subset ReallyABadPoet where { $^N.type eq \"BadPoet\" }\n  my ReallyABadPoet = $obj.fribble('reapetedly');\n\nThat seems to fail because the you'd have to invoke every method to\nguarantee that you're really getting back the exact type you want.  As\nsuch, it seems like we'd need return values to guarantee that the\nreturned type is exactly what we claimed.\n\n  method foo(Int $bar, Int $baz) returns Int {\n    return $foo/$baz;\n  }\n\nSince the return value might be a Float, does it get cast to an Int,\nthereby discarding information?\n\nCheers,\nOvid\n\n--\n\nBuy the book -- http://www.oreilly.com/catalog/perlhks/\nPerl and CGI -- http://users.easystreet.com/ovid/cgi_course/\n\n"}