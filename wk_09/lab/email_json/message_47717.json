{"category": "ham", "to_address": "Damian Conway <damian@conway.org>", "from_address": "Mark Overmeer <mark@overmeer.net>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "* Damian Conway (damian@conway.org) [070613 22:46]:\n> My underlying model is that documentation and the source it's documenting \n> should be entirely orthogonal. So, to me, it would be very surprising if a \n> programming construct (block comments) interacted with documentation. Or \n> vice versa.\n> \n>     * At the Perl 6 level, all Pod is syntactically and semantically\n>       invisible and therefore already equivalent to a comment.\n> \n>     * At the Pod 6 level, all Perl code is merely meaningless ambient\n>       background noise and therefore already equivalent to whitespace.\n\nWe had a private discussion about this already three years ago: I\nfully disagree!  If the code and the documentation are not entangled,\nwhy do you want to put them in the same file?  Why do you put them in\nthe same distribution even?\n\nNo, the documentation is all about the code. The docs present everything\nwhat the user should know about the code.  The docs are the user's view\nof the implementation, and the code is the computer's view on the same.\n\nRealizing that, there are a few problems:\n - is everything in the code documented?\n - is everything documented correctly?\n - during development, the interfaces change.  Do we update the docs?\n\nGetting people to document (and maintain the documentation) is not easy.\nFor some people, it's just not in their system.  So, if you can make it\neasier to do, if you can avoid the need for duplication (write it in\ncode, write the same again in the docs), if you can save some typing,\nyou probably end-up with better code.\n\nLast week, I restructured the code of MailTools... published in 1995,\none of the oldest modules around.  Also one of the most used modules\nand described in many books. Changing the manual-page organization from\n\"at-end-of-file\" to \"interleaved\" put the docs close to the respective\ncode.  I found many mistakes in the docs, during this process: methods\nwhich were not documented, methods which were not implemented, parameters\nwhich were not or wrongly described...\n\nAs some people know, I wrote OODoc which extends the syntax of POD(5)\nwith logical markup and some simple avoidance of replication.  For the\nMailBox distribution (which is quite large), that saved me typing of\n700.000 characters (35%)!  Do you know how long it takes to type those?\nSo how much time did I gain to spend on code quality?\n\nI had suggested syntax like this, in Perl6:\n\n  class Mail::Message {\n        `base class for message types\n\n     .has $msgid;\n        `The (internet wide) unique string which identifies this\n        `message object.  May be undef as long as the message is\n        `begin composed.\n\n     .has $content_type = 'text/plain';\n  }\n\nYou see that there is little room for errors in the documentation.\nBefore people start flame-wars: the syntax is just to start a\ndiscussion, to show how simple it could be.  I am not stuck on that.\n\nThis can be automatically translated into (traditional POD like this)\n(leaving out some blank lines for shortness sake)\n\n  =head1 NAME\n  Mail::Mesage - base class for message types\n\n  =head1 INHERITANCE\n    Mail::Message\n       isa Object\n\n    Mail::Message\n       is extended by Mail::Box::Message\n\n  =head1 METHODS\n  =head2 Attributes\n  =over 4\n  =item C<$msgid>\n  The (internet wide) unique string which identifies this\n  message object.  May be undef as long as the message is\n  begin composed.\n\n  =item C<$content_type> (default 'text/plain')\n  =back\n \nDamian, can you show how you would document the same code in POD6\nsyntax to get a comparible short man-page?\n\nIMO: code and docs are two representations on one thinking processes,\nnamed \"programming\".  They are the opposit not orthogonal: parallel\ndevelopments with a little shifted focus.\n\nThe separation between State and Church is only about power: that the\nPope can't tell the President how to rule a country.  But the people\nneed to merge their religious believes with their social duties.\nAre you designing for \"The Power\" or \"The People\"?\n-- \nRegards,\n               MarkOv\n\n------------------------------------------------------------------------\n       Mark Overmeer MSc                                MARKOV Solutions\n       Mark@Overmeer.net                          solutions@overmeer.net\nhttp://Mark.Overmeer.net                   http://solutions.overmeer.net\n\n"}