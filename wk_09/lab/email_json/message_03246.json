{"category": "ham", "to_address": "James Peach <jpeach@samba.org>", "from_address": "Alison Winters <alisonw@sgi.com>", "subject": "Re: samba profiling and pcp pmda", "body": "James Peach wrote:\n> I mean to use one mmap per record type. The current scheme is ugly\n> because it really doesn't want to be a proper allocator but it has to\n> deal with 2 different sizes of records in the mmap. If you have a\n> separate mmap for each record type, the allocator goes back to being\n> nice and simple.\n> \nSurely the only benefit of splitting out record types per-file (i.e.\nclient and share) is that you can step through the allocated records as\nan array rather than a linked list?  Is there really much performance\ngain there?  I imagine the code to step through the list and add/remove\nrecords will stay pretty much the same.\n\n>> That's in the pipeline :)  What i'm planning is to just add a bit of\n>> extra magic to the existing Samba profiling macros that allow us to\n>> split it out per-client and per-share along with the existing recording\n>> of global counts and times.  I'm pretty sure this is going to be fairly\n>> elegant and small if i get it right.\n> That sounds neat. It would be great if you had some code to reconcile\n> the existing profiling stats with these metrics.\n> \nThat's pretty much the plan.  Each class of extended stats when summed\ntogether should equal the existing profiling stats (in theory).\n\n>> I have a separate patch which i can't submit yet (it's copyright SGI)\n>> that splits out all of the current profiling statistics into smaller\n>> groups that we can turn on and off independently.\n> Do you mean the stats that currently live in the sysv shared memory\n> segment?\n> \nYep.\n\n> IIRC you only get a big performance hit when you are timing operations.\n> You can probably avoid this (to some degree) by using platform-specific\n> timers.\n> \nI'll look into it, thanks :)  Right now there's just the regular\nGetTimeOfDay calls.\n\n> IMHO, the Samba PMDA belongs in the PCP tree, not in the Samba tree.\n> Since you are going to be the one maintaining it, it's easier all round\n> if it lives there. We can simply remove the existing PMDA from the Samba\n> tree.\n> \nSure that makes sense.  So, with that in mind, what's the best way to\nexport a Samba header file for consumer apps?  For instance, in the case\nof the smbprofile.h header, it uses stuff like enum flush_reason_enum\nand typedef BOOL which are defined elsewhere that third-party apps can't\nsee.  Is the correct approach to write a script that munges the header\ninto something that could potentially stand alone in a \"devel\" package?\n\nAlison\n\n"}