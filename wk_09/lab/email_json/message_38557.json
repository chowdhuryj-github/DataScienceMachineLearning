{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: [svn:perl6-synopsis] r14405 - doc/trunk/design/syn", "body": "On Tue, May 29, 2007 at 05:29:18PM -0400, Chas Owens wrote:\n: Okay, obviously I have more synopsis to read, but currently Pugs says:\n: pugs> my $posinf = *\n: Inf\n: pugs> my $neginf = -*\n: -Inf\n: \n: which made me think * is Inf in scalar context.  Is this a bug in Pugs then?\n\nYes, basically.  * should not be committing to a numeric type (which\nInf is at heart), since we want 'a'..* to work as alphanumeric\n\"infinity\" too.  And while we could maybe fudge that one to respect\nInf, other uses of * require that Whatever be a completely separate,\nnon-confusable type for multiple dispatch purposes.\n\n: Is Inf the canonical way of spelling the literal \"infinity\"?\n\nYes.  It's more or less the IEEE definition of infinity, though we allow\nInt to be +/- Inf as well as Num.  However, native int cannot hold Inf,\nthough native num can, presuming IEEE floaters are supported, which all\nmodern hardware does.\n\n: I am patching Pugs' x and xx operators to handle infinity now.  The\n: behavior after the patch is\n: pugs> \"a\" x 5\n: \"aaaaa\"\n: pugs> \"a\" x 0\n: \"\"\n: pugs> \"a\" x -5\n: \"\"\n: pugs> \"a\" x Inf\n: Internal error while running expression:\n: Infinite replications would exahust memory\n: pugs> \"a\" x -Inf\n: \"\"\n: \n: Besides fixing the spelling error on exhaust and making it a real die\n: instead of an internal error (which I have yet to figure out how to\n: do), does this match up with your expectations for the replication\n: operators?\n\nThat's how x would work.  See S03 for a description of how xx works.\n\nLarry\n\n"}