{"category": "ham", "to_address": "\"p46921x@hotmail.com\" <p46921x@hotmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Help creating a random string in Perl", "body": "On 6/12/07, p46921x@hotmail.com  wrote:\nsnip\n> I can see how to generate a random number between 0 and 6 (meaning I\n> can pick one of the 7 characters in my source string) by using \"print\n> int(rand(6))\",  but I don't know where to being on the second and\n> third and fourth characters to and check that the random number hasn't\n> already been chosen.\nsnip\n\nWhat you are describing sounds like it would be best implemented by\n1 breaking the the string into individual characters and storing them\nin an array\n2 shuffling the array\n3 joining all but the last element of the array\n\nBreaking a string into its characters in Perl is easy\n\nmy $str = \"1234567\";\nmy @a  = split //, $str;\n\nShuffling an array is easy as well.  Let's use Knuth's* shuffle\nalgorithm.  The idea here is to swap the current cell with some cell\nthat has not yet been processed.  So, the first cell can be swapped\nwith any other cell, the second cell can be swapped with any cell\nother than the first, the third can swapped with any but the first and\nsecond, and so on.  This will result in a shuffled array where any\npermutation is equally likely**.\n\nfor my $i (0 .. $#a) {\n    my $r = $i + int rand(@a - $i);\n    @a[$i, $r] = @a[$r, $i];\n}\n\nNow that we have permuted the array we can turn a subset of it back\ninto a string and print it.\n\n$str = join '', @a[0 .. $#a - 1];\nprint \"$str\\n\";\n\nAnd here it is put all together with a loop\n\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nmy $str = \"ABCDEFG\";\nprint \"$str\\n\";\n\nwhile (length($str) > 1) {\n        my @a = split //, $str;\n        for my $i (0 .. $#a) {\n                my $r = $i + int rand(@a - $i);\n                @a[$i, $r] = @a[$r, $i];\n        }\n        $str = join '', @a[0 .. $#a - 1];\n        print \"$str\\n\";\n}\n\n* also known as the Fisher-Yates shuffle\n** given a sufficiently good RNG\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}