{"category": "ham", "to_address": "samba-technical@lists.samba.org", "from_address": "James Peach <jpeach@samba.org>", "subject": "[PATCH 1/2] Commit generated prototype headers. ", "body": "commit a snapshot of the generated prototype headers\n---\nsource/client/client_proto.h     |  366 ++\nsource/include/proto.h           |10128 ++++++++++++++++++++++++++++++ \n++++++++\nsource/nsswitch/winbindd_proto.h |  516 ++\nsource/utils/net_proto.h         |  382 ++\nsource/utils/ntlm_auth_proto.h   |   28 +\nsource/utils/passwd_proto.h      |   12 +\nsource/web/swat_proto.h          |   49 +\n7 files changed, 11481 insertions(+), 0 deletions(-)\ncreate mode 100644 source/client/client_proto.h\ncreate mode 100644 source/include/proto.h\ncreate mode 100644 source/nsswitch/winbindd_proto.h\ncreate mode 100644 source/utils/net_proto.h\ncreate mode 100644 source/utils/ntlm_auth_proto.h\ncreate mode 100644 source/utils/passwd_proto.h\ncreate mode 100644 source/web/swat_proto.h\n\ndiff --git a/source/client/client_proto.h b/source/client/client_proto.h\nnew file mode 100644\nindex 0000000..f5027e8\n--- /dev/null\n+++ b/source/client/client_proto.h\n@@ -0,0 +1,366 @@\n+#ifndef _CLIENT_PROTO_H_\n+#define _CLIENT_PROTO_H_\n+\n+/* This file is automatically generated with \"make proto\". DO NOT  \nEDIT */\n+\n+\n+/* The following definitions come from client/client.c  */\n+\n+void do_list(const char *mask,uint16 attribute,void (*fn)(file_info  \n*),BOOL rec, BOOL dirs);\n+\n+/* The following definitions come from client/clitar.c  */\n+\n+int cmd_block(void);\n+int cmd_tarmode(void);\n+int cmd_setmode(void);\n+int cmd_tar(void);\n+int process_tar(void);\n+int tar_parseargs(int argc, char *argv[], const char *Optarg, int  \nOptind);\n+\n+/* The following definitions come from rpc_client/cli_netlogon.c  */\n+\n+NTSTATUS rpccli_netlogon_setup_creds(struct rpc_pipe_client *cli,\n+\t\t\t\tconst char *server_name,\n+\t\t\t\tconst char *domain,\n+\t\t\t\tconst char *clnt_name,\n+\t\t\t\tconst char *machine_account,\n+\t\t\t\tconst unsigned char machine_pwd[16],\n+\t\t\t\tuint32 sec_chan_type,\n+\t\t\t\tuint32 *neg_flags_inout);\n+NTSTATUS rpccli_netlogon_logon_ctrl2(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                  uint32 query_level);\n+WERROR rpccli_netlogon_getanydcname(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx, const char *mydcname,\n+\t\t\t\t    const char *domainname, fstring newdcname);\n+NTSTATUS rpccli_netlogon_getdcname(struct rpc_pipe_client *cli,\n+\t\t\t\t   TALLOC_CTX *mem_ctx, const char *mydcname,\n+\t\t\t\t   const char *domainname, fstring newdcname);\n+WERROR rpccli_netlogon_dsr_getdcname(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     const char *server_name,\n+\t\t\t\t     const char *domain_name,\n+\t\t\t\t     struct GUID *domain_guid,\n+\t\t\t\t     struct GUID *site_guid,\n+\t\t\t\t     uint32_t flags,\n+\t\t\t\t     struct DS_DOMAIN_CONTROLLER_INFO **info_out);\n+WERROR rpccli_netlogon_dsr_getdcnameex(struct rpc_pipe_client *cli,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       const char *server_name,\n+\t\t\t\t       const char *domain_name,\n+\t\t\t\t       struct GUID *domain_guid,\n+\t\t\t\t       const char *site_name,\n+\t\t\t\t       uint32_t flags,\n+\t\t\t\t       struct DS_DOMAIN_CONTROLLER_INFO **info_out);\n+WERROR rpccli_netlogon_dsr_getdcnameex2(struct rpc_pipe_client *cli,\n+\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\tconst char *server_name,\n+\t\t\t\t\tconst char *client_account,\n+\t\t\t\t\tuint32 mask,\n+\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\tstruct GUID *domain_guid,\n+\t\t\t\t\tconst char *site_name,\n+\t\t\t\t\tuint32_t flags,\n+\t\t\t\t\tstruct DS_DOMAIN_CONTROLLER_INFO **info_out);\n+WERROR rpccli_netlogon_dsr_getsitename(struct rpc_pipe_client *cli,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       const char *computer_name,\n+\t\t\t\t       char **site_name);\n+NTSTATUS rpccli_netlogon_sam_sync(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                               uint32 database_id, uint32 next_rid,  \nuint32 *num_deltas,\n+                               SAM_DELTA_HDR **hdr_deltas,\n+                               SAM_DELTA_CTR **deltas);\n+NTSTATUS rpccli_netlogon_sam_deltas(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                 uint32 database_id, uint64 seqnum,\n+                                 uint32 *num_deltas,\n+                                 SAM_DELTA_HDR **hdr_deltas,\n+                                 SAM_DELTA_CTR **deltas);\n+NTSTATUS rpccli_netlogon_sam_logon(struct rpc_pipe_client *cli,\n+\t\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t\t   uint32 logon_parameters,\n+\t\t\t\t   const char *domain,\n+\t\t\t\t   const char *username,\n+\t\t\t\t   const char *password,\n+\t\t\t\t   const char *workstation,\n+\t\t\t\t   int logon_type);\n+NTSTATUS rpccli_netlogon_sam_network_logon(struct rpc_pipe_client *cli,\n+\t\t\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t   uint32 logon_parameters,\n+\t\t\t\t\t   const char *server,\n+\t\t\t\t\t   const char *username,\n+\t\t\t\t\t   const char *domain,\n+\t\t\t\t\t   const char *workstation,\n+\t\t\t\t\t   const uint8 chal[8],\n+\t\t\t\t\t   DATA_BLOB lm_response,\n+\t\t\t\t\t   DATA_BLOB nt_response,\n+\t\t\t\t\t   NET_USER_INFO_3 *info3);\n+NTSTATUS rpccli_netlogon_sam_network_logon_ex(struct rpc_pipe_client  \n*cli,\n+\t\t\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t      uint32 logon_parameters,\n+\t\t\t\t\t      const char *server,\n+\t\t\t\t\t      const char *username,\n+\t\t\t\t\t      const char *domain,\n+\t\t\t\t\t      const char *workstation,\n+\t\t\t\t\t      const uint8 chal[8],\n+\t\t\t\t\t      DATA_BLOB lm_response,\n+\t\t\t\t\t      DATA_BLOB nt_response,\n+\t\t\t\t\t      NET_USER_INFO_3 *info3);\n+NTSTATUS rpccli_net_srv_pwset(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t   const char *machine_name, const uint8 hashed_mach_pwd[16]);\n+\n+/* The following definitions come from rpc_client/cli_pipe.c  */\n+\n+NTSTATUS rpc_api_pipe_req(struct rpc_pipe_client *cli,\n+\t\t\tuint8 op_num,\n+\t\t\tprs_struct *in_data,\n+\t\t\tprs_struct *out_data);\n+struct rpc_pipe_client *cli_rpc_pipe_open_noauth(struct cli_state  \n*cli, int pipe_idx, NTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_ntlmssp(struct cli_state  \n*cli,\n+\t\t\t\t\t\tint pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+\t\t\t\t\t\tconst char *domain,\n+\t\t\t\t\t\tconst char *username,\n+\t\t\t\t\t\tconst char *password,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_spnego_ntlmssp(struct  \ncli_state *cli,\n+\t\t\t\t\t\tint pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+\t\t\t\t\t\tconst char *domain,\n+\t\t\t\t\t\tconst char *username,\n+\t\t\t\t\t\tconst char *password,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *get_schannel_session_key(struct cli_state *cli,\n+\t\t\t\t\t\t\tconst char *domain,\n+\t\t\t\t\t\t\tuint32 *pneg_flags,\n+\t\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_schannel_with_key(struct  \ncli_state *cli,\n+\t\t\t\t\tint pipe_idx,\n+\t\t\t\t\tenum pipe_auth_level auth_level,\n+\t\t\t\t\tconst char *domain,\n+\t\t\t\t\tconst struct dcinfo *pdc,\n+\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_ntlmssp_auth_schannel \n(struct cli_state *cli,\n+                                                int pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+                                                const char *domain,\n+\t\t\t\t\t\tconst char *username,\n+\t\t\t\t\t\tconst char *password,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_schannel(struct cli_state  \n*cli,\n+                                                int pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+                                                const char *domain,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_krb5(struct cli_state *cli,\n+\t\t\t\t\t\tint pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+\t\t\t\t\t\tconst char *service_princ,\n+\t\t\t\t\t\tconst char *username,\n+\t\t\t\t\t\tconst char *password,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+\n+/* The following definitions come from rpc_parse/parse_net.c  */\n+\n+BOOL net_io_q_logon_ctrl2(const char *desc, NET_Q_LOGON_CTRL2 *q_l,  \nprs_struct *ps, int depth);\n+void init_net_q_logon_ctrl2(NET_Q_LOGON_CTRL2 *q_l, const char  \n*srv_name,\n+\t\t\t    uint32 query_level);\n+void init_net_r_logon_ctrl2(NET_R_LOGON_CTRL2 *r_l, uint32 query_level,\n+\t\t\t    uint32 flags, uint32 pdc_status,\n+\t\t\t    uint32 logon_attempts, uint32 tc_status,\n+\t\t\t    const char *trusted_domain_name);\n+BOOL net_io_r_logon_ctrl2(const char *desc, NET_R_LOGON_CTRL2 *r_l,  \nprs_struct *ps, int depth);\n+BOOL net_io_q_logon_ctrl(const char *desc, NET_Q_LOGON_CTRL *q_l,  \nprs_struct *ps,\n+\t\t\t int depth);\n+void init_net_q_logon_ctrl(NET_Q_LOGON_CTRL *q_l, const char *srv_name,\n+\t\t\t   uint32 query_level);\n+void init_net_r_logon_ctrl(NET_R_LOGON_CTRL *r_l, uint32 query_level,\n+\t\t\t   uint32 flags, uint32 pdc_status);\n+BOOL net_io_r_logon_ctrl(const char *desc, NET_R_LOGON_CTRL *r_l,  \nprs_struct *ps,\n+\t\t\t int depth);\n+void init_net_q_getanydcname(NET_Q_GETANYDCNAME *r_t, const char  \n*logon_server,\n+\t\t\t     const char *domainname);\n+BOOL net_io_q_getanydcname(const char *desc, NET_Q_GETANYDCNAME  \n*r_t, prs_struct *ps,\n+\t\t\t   int depth);\n+void init_net_r_getanydcname(NET_R_GETANYDCNAME *r_t, const char  \n*dcname);\n+BOOL net_io_r_getanydcname(const char *desc, NET_R_GETANYDCNAME  \n*r_t, prs_struct *ps,\n+\t\t\t   int depth);\n+void init_net_q_getdcname(NET_Q_GETDCNAME *r_t, const char  \n*logon_server,\n+\t\t\t  const char *domainname);\n+BOOL net_io_q_getdcname(const char *desc, NET_Q_GETDCNAME *r_t,  \nprs_struct *ps,\n+\t\t\tint depth);\n+void init_net_r_getdcname(NET_R_GETDCNAME *r_t, const char *dcname);\n+BOOL net_io_r_getdcname(const char *desc, NET_R_GETDCNAME *r_t,  \nprs_struct *ps,\n+\t\t\tint depth);\n+void init_r_trust_dom(NET_R_TRUST_DOM_LIST *r_t,\n+\t\t\tuint32 num_doms, const char *dom_name);\n+BOOL net_io_r_trust_dom(const char *desc, NET_R_TRUST_DOM_LIST *r_t,  \nprs_struct *ps, int depth);\n+BOOL net_io_q_trust_dom(const char *desc, NET_Q_TRUST_DOM_LIST *q_l,  \nprs_struct *ps, int depth);\n+void init_q_req_chal(NET_Q_REQ_CHAL *q_c,\n+\t\t     const char *logon_srv, const char *logon_clnt,\n+\t\t     const DOM_CHAL *clnt_chal);\n+BOOL net_io_q_req_chal(const char *desc,  NET_Q_REQ_CHAL *q_c,  \nprs_struct *ps, int depth);\n+BOOL net_io_r_req_chal(const char *desc, NET_R_REQ_CHAL *r_c,  \nprs_struct *ps, int depth);\n+BOOL net_io_q_auth(const char *desc, NET_Q_AUTH *q_a, prs_struct  \n*ps, int depth);\n+BOOL net_io_r_auth(const char *desc, NET_R_AUTH *r_a, prs_struct  \n*ps, int depth);\n+void init_q_auth_2(NET_Q_AUTH_2 *q_a,\n+\t\tconst char *logon_srv, const char *acct_name, uint16 sec_chan,  \nconst char *comp_name,\n+\t\tconst DOM_CHAL *clnt_chal, uint32 clnt_flgs);\n+BOOL net_io_q_auth_2(const char *desc, NET_Q_AUTH_2 *q_a, prs_struct  \n*ps, int depth);\n+BOOL net_io_r_auth_2(const char *desc, NET_R_AUTH_2 *r_a, prs_struct  \n*ps, int depth);\n+void init_q_auth_3(NET_Q_AUTH_3 *q_a,\n+\t\tconst char *logon_srv, const char *acct_name, uint16 sec_chan,  \nconst char *comp_name,\n+\t\tconst DOM_CHAL *clnt_chal, uint32 clnt_flgs);\n+BOOL net_io_q_auth_3(const char *desc, NET_Q_AUTH_3 *q_a, prs_struct  \n*ps, int depth);\n+BOOL net_io_r_auth_3(const char *desc, NET_R_AUTH_3 *r_a, prs_struct  \n*ps, int depth);\n+void init_q_srv_pwset(NET_Q_SRV_PWSET *q_s,\n+\t\tconst char *logon_srv, const char *sess_key, const char *acct_name,\n+                uint16 sec_chan, const char *comp_name,\n+\t\tDOM_CRED *cred, const uchar hashed_mach_pwd[16]);\n+BOOL net_io_q_srv_pwset(const char *desc, NET_Q_SRV_PWSET *q_s,  \nprs_struct *ps, int depth);\n+BOOL net_io_r_srv_pwset(const char *desc, NET_R_SRV_PWSET *r_s,  \nprs_struct *ps, int depth);\n+void init_id_info1(NET_ID_INFO_1 *id, const char *domain_name,\n+\t\t\t\tuint32 param_ctrl, uint32 log_id_low, uint32 log_id_high,\n+\t\t\t\tconst char *user_name, const char *wksta_name,\n+\t\t\t\tconst char *sess_key,\n+\t\t\t\tunsigned char lm_cypher[16], unsigned char nt_cypher[16]);\n+void init_id_info2(NET_ID_INFO_2 * id, const char *domain_name,\n+\t\t   uint32 param_ctrl,\n+\t\t   uint32 log_id_low, uint32 log_id_high,\n+\t\t   const char *user_name, const char *wksta_name,\n+\t\t   const uchar lm_challenge[8],\n+\t\t   const uchar * lm_chal_resp, size_t lm_chal_resp_len,\n+\t\t   const uchar * nt_chal_resp, size_t nt_chal_resp_len);\n+void init_sam_info(DOM_SAM_INFO *sam,\n+\t\t\t\tconst char *logon_srv, const char *comp_name,\n+\t\t\t\tDOM_CRED *clnt_cred,\n+\t\t\t\tDOM_CRED *rtn_cred, uint16 logon_level,\n+\t\t\t\tNET_ID_INFO_CTR *ctr);\n+void init_sam_info_ex(DOM_SAM_INFO_EX *sam,\n+\t\t      const char *logon_srv, const char *comp_name,\n+\t\t      uint16 logon_level, NET_ID_INFO_CTR *ctr);\n+void init_net_user_info3(TALLOC_CTX *ctx, NET_USER_INFO_3 *usr,\n+\t\t\t uint32                user_rid,\n+\t\t\t uint32                group_rid,\n+\n+\t\t\t const char*\t\tuser_name,\n+\t\t\t const char*\t\tfull_name,\n+\t\t\t const char*\t\thome_dir,\n+\t\t\t const char*\t\tdir_drive,\n+\t\t\t const char*\t\tlogon_script,\n+\t\t\t const char*\t\tprofile_path,\n+\n+\t\t\t time_t unix_logon_time,\n+\t\t\t time_t unix_logoff_time,\n+\t\t\t time_t unix_kickoff_time,\n+\t\t\t time_t unix_pass_last_set_time,\n+\t\t\t time_t unix_pass_can_change_time,\n+\t\t\t time_t unix_pass_must_change_time,\n+\t\t\t\n+\t\t\t uint16 logon_count, uint16 bad_pw_count,\n+ \t\t \t uint32 num_groups, const DOM_GID *gids,\n+\t\t\t uint32 user_flgs, uint32 acct_flags,\n+\t\t\t uchar user_session_key[16],\n+\t\t\t uchar lm_session_key[16],\n+ \t\t\t const char *logon_srv, const char *logon_dom,\n+\t\t\t const DOM_SID *dom_sid);\n+BOOL net_io_user_info3(const char *desc, NET_USER_INFO_3 *usr,  \nprs_struct *ps,\n+\t\t       int depth, uint16 validation_level, BOOL  \nkerb_validation_level);\n+BOOL net_io_q_sam_logon(const char *desc, NET_Q_SAM_LOGON *q_l,  \nprs_struct *ps, int depth);\n+BOOL net_io_r_sam_logon(const char *desc, NET_R_SAM_LOGON *r_l,  \nprs_struct *ps, int depth);\n+BOOL net_io_q_sam_logon_ex(const char *desc, NET_Q_SAM_LOGON_EX  \n*q_l, prs_struct *ps, int depth);\n+BOOL net_io_r_sam_logon_ex(const char *desc, NET_R_SAM_LOGON_EX  \n*r_l, prs_struct *ps, int depth);\n+BOOL net_io_q_sam_logoff(const char *desc,  NET_Q_SAM_LOGOFF *q_l,  \nprs_struct *ps, int depth);\n+BOOL net_io_r_sam_logoff(const char *desc, NET_R_SAM_LOGOFF *r_l,  \nprs_struct *ps, int depth);\n+BOOL init_net_q_sam_sync(NET_Q_SAM_SYNC * q_s, const char *srv_name,\n+                         const char *cli_name, DOM_CRED *cli_creds,\n+                         DOM_CRED *ret_creds, uint32 database_id,\n+\t\t\t uint32 next_rid);\n+BOOL net_io_q_sam_sync(const char *desc, NET_Q_SAM_SYNC * q_s,  \nprs_struct *ps,\n+\t\t       int depth);\n+BOOL net_io_r_sam_sync(const char *desc,\n+\t\t       NET_R_SAM_SYNC * r_s, prs_struct *ps, int depth);\n+BOOL init_net_q_sam_deltas(NET_Q_SAM_DELTAS *q_s, const char *srv_name,\n+                           const char *cli_name, DOM_CRED *cli_creds,\n+                           uint32 database_id, uint64 dom_mod_count);\n+BOOL net_io_q_sam_deltas(const char *desc, NET_Q_SAM_DELTAS *q_s,  \nprs_struct *ps,\n+                         int depth);\n+BOOL net_io_r_sam_deltas(const char *desc,\n+                         NET_R_SAM_DELTAS *r_s, prs_struct *ps, int  \ndepth);\n+void init_net_q_dsr_getdcname(NET_Q_DSR_GETDCNAME *r_t, const char  \n*server_unc,\n+\t\t\t      const char *domain_name,\n+\t\t\t      struct GUID *domain_guid,\n+\t\t\t      struct GUID *site_guid,\n+\t\t\t      uint32_t flags);\n+void init_net_q_dsr_getdcnameex(NET_Q_DSR_GETDCNAMEEX *r_t, const  \nchar *server_unc,\n+\t\t\t\tconst char *domain_name,\n+\t\t\t\tstruct GUID *domain_guid,\n+\t\t\t\tconst char *site_name,\n+\t\t\t\tuint32_t flags);\n+void init_net_q_dsr_getdcnameex2(NET_Q_DSR_GETDCNAMEEX2 *r_t, const  \nchar *server_unc,\n+\t\t\t\t const char *domain_name,\n+\t\t\t\t const char *client_account,\n+\t\t\t\t uint32 mask,\n+\t\t\t\t struct GUID *domain_guid,\n+\t\t\t\t const char *site_name,\n+\t\t\t\t uint32_t flags);\n+BOOL net_io_q_dsr_getdcname(const char *desc, NET_Q_DSR_GETDCNAME *r_t,\n+\t\t\t    prs_struct *ps, int depth);\n+BOOL net_io_q_dsr_getdcnameex(const char *desc,  \nNET_Q_DSR_GETDCNAMEEX *r_t,\n+\t\t\t      prs_struct *ps, int depth);\n+BOOL net_io_q_dsr_getdcnameex2(const char *desc,  \nNET_Q_DSR_GETDCNAMEEX2 *r_t,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_net_r_dsr_getdcname(NET_R_DSR_GETDCNAME *r_t, const char  \n*dc_unc,\n+\t\t\t      const char *dc_address, int32 dc_address_type,\n+\t\t\t      struct GUID domain_guid, const char *domain_name,\n+\t\t\t      const char *forest_name, uint32 dc_flags,\n+\t\t\t      const char *dc_site_name,\n+\t\t\t      const char *client_site_name);\n+BOOL net_io_r_dsr_getdcname(const char *desc, NET_R_DSR_GETDCNAME *r_t,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_net_q_dsr_getsitename(NET_Q_DSR_GETSITENAME *r_t, const  \nchar *computer_name);\n+BOOL net_io_q_dsr_getsitename(const char *desc,  \nNET_Q_DSR_GETSITENAME *r_t,\n+\t\t\t      prs_struct *ps, int depth);\n+BOOL net_io_r_dsr_getsitename(const char *desc,  \nNET_R_DSR_GETSITENAME *r_t,\n+\t\t\t      prs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_rpc.c  */\n+\n+const char *cli_get_pipe_name(int pipe_idx);\n+void init_rpc_hdr(RPC_HDR *hdr, enum RPC_PKT_TYPE pkt_type, uint8  \nflags,\n+\t\t\t\tuint32 call_id, int data_len, int auth_len);\n+BOOL smb_io_rpc_hdr(const char *desc,  RPC_HDR *rpc, prs_struct *ps,  \nint depth);\n+void init_rpc_context(RPC_CONTEXT *rpc_ctx, uint16 context_id,  \nRPC_IFACE *abstract, RPC_IFACE *transfer);\n+void init_rpc_hdr_rb(RPC_HDR_RB *rpc,\n+\t\t\t\tuint16 max_tsize, uint16 max_rsize, uint32 assoc_gid,\n+\t\t\t\tRPC_CONTEXT *context);\n+BOOL smb_io_rpc_context(const char *desc, RPC_CONTEXT *rpc_ctx,  \nprs_struct *ps, int depth);\n+BOOL smb_io_rpc_hdr_rb(const char *desc, RPC_HDR_RB *rpc, prs_struct  \n*ps, int depth);\n+void init_rpc_hdr_ba(RPC_HDR_BA *rpc,\n+\t\t\t\tuint16 max_tsize, uint16 max_rsize, uint32 assoc_gid,\n+\t\t\t\tconst char *pipe_addr,\n+\t\t\t\tuint8 num_results, uint16 result, uint16 reason,\n+\t\t\t\tRPC_IFACE *transfer);\n+BOOL smb_io_rpc_hdr_ba(const char *desc, RPC_HDR_BA *rpc, prs_struct  \n*ps, int depth);\n+void init_rpc_hdr_req(RPC_HDR_REQ *hdr, uint32 alloc_hint, uint16  \nopnum);\n+BOOL smb_io_rpc_hdr_req(const char *desc, RPC_HDR_REQ *rpc,  \nprs_struct *ps, int depth);\n+BOOL smb_io_rpc_hdr_resp(const char *desc, RPC_HDR_RESP *rpc,  \nprs_struct *ps, int depth);\n+BOOL smb_io_rpc_hdr_fault(const char *desc, RPC_HDR_FAULT *rpc,  \nprs_struct *ps, int depth);\n+void init_rpc_hdr_auth(RPC_HDR_AUTH *rai,\n+\t\t\t\tuint8 auth_type, uint8 auth_level,\n+\t\t\t\tuint8 auth_pad_len,\n+\t\t\t\tuint32 auth_context_id);\n+BOOL smb_io_rpc_hdr_auth(const char *desc, RPC_HDR_AUTH *rai,  \nprs_struct *ps, int depth);\n+BOOL rpc_auth_verifier_chk(RPC_AUTH_VERIFIER *rav,\n+\t\t\t\tconst char *signature, uint32 msg_type);\n+void init_rpc_auth_verifier(RPC_AUTH_VERIFIER *rav,\n+\t\t\t\tconst char *signature, uint32 msg_type);\n+BOOL smb_io_rpc_auth_verifier(const char *desc, RPC_AUTH_VERIFIER  \n*rav, prs_struct *ps, int depth);\n+BOOL smb_io_rpc_schannel_verifier(const char *desc,  \nRPC_AUTH_VERIFIER *rav, prs_struct *ps, int depth);\n+void init_rpc_auth_schannel_neg(RPC_AUTH_SCHANNEL_NEG *neg,\n+\t\t\t      const char *domain, const char *myname);\n+BOOL smb_io_rpc_auth_schannel_neg(const char *desc,  \nRPC_AUTH_SCHANNEL_NEG *neg,\n+\t\t\t\tprs_struct *ps, int depth);\n+BOOL smb_io_rpc_auth_schannel_chk(const char *desc, int auth_len,\n+                                RPC_AUTH_SCHANNEL_CHK * chk,\n+\t\t\t\tprs_struct *ps, int depth);\n+\n+#endif /*  _CLIENT_PROTO_H_  */\ndiff --git a/source/include/proto.h b/source/include/proto.h\nnew file mode 100644\nindex 0000000..b836503\n--- /dev/null\n+++ b/source/include/proto.h\n@@ -0,0 +1,10128 @@\n+#ifndef _PROTO_H_\n+#define _PROTO_H_\n+\n+/* This file is automatically generated with \"make proto\". DO NOT  \nEDIT */\n+\n+\n+/* The following definitions come from auth/auth.c  */\n+\n+NTSTATUS smb_register_auth(int version, const char *name,  \nauth_init_function init);\n+BOOL load_auth_module(struct auth_context *auth_context,\n+\t\t      const char *module, auth_methods **ret) ;\n+NTSTATUS make_auth_context_subsystem(struct auth_context  \n**auth_context) ;\n+NTSTATUS make_auth_context_fixed(struct auth_context **auth_context,  \nuchar chal[8]) ;\n+\n+/* The following definitions come from auth/auth_builtin.c  */\n+\n+NTSTATUS auth_builtin_init(void);\n+\n+/* The following definitions come from auth/auth_compat.c  */\n+\n+NTSTATUS check_plaintext_password(const char *smb_name, DATA_BLOB  \nplaintext_password, auth_serversupplied_info **server_info);\n+BOOL password_ok(char *smb_name, DATA_BLOB password_blob);\n+\n+/* The following definitions come from auth/auth_domain.c  */\n+\n+NTSTATUS auth_domain_init(void) ;\n+\n+/* The following definitions come from auth/auth_ntlmssp.c  */\n+\n+NTSTATUS auth_ntlmssp_start(AUTH_NTLMSSP_STATE **auth_ntlmssp_state);\n+void auth_ntlmssp_end(AUTH_NTLMSSP_STATE **auth_ntlmssp_state);\n+NTSTATUS auth_ntlmssp_update(AUTH_NTLMSSP_STATE *auth_ntlmssp_state,\n+\t\t\t     const DATA_BLOB request, DATA_BLOB *reply) ;\n+\n+/* The following definitions come from auth/auth_sam.c  */\n+\n+NTSTATUS auth_sam_init(void);\n+\n+/* The following definitions come from auth/auth_server.c  */\n+\n+NTSTATUS auth_server_init(void);\n+\n+/* The following definitions come from auth/auth_unix.c  */\n+\n+NTSTATUS auth_unix_init(void);\n+\n+/* The following definitions come from auth/auth_util.c  */\n+\n+NTSTATUS make_user_info_map(auth_usersupplied_info **user_info,\n+\t\t\t    const char *smb_name,\n+\t\t\t    const char *client_domain,\n+\t\t\t    const char *wksta_name,\n+ \t\t\t    DATA_BLOB *lm_pwd, DATA_BLOB *nt_pwd,\n+ \t\t\t    DATA_BLOB *lm_interactive_pwd, DATA_BLOB *nt_interactive_pwd,\n+\t\t\t    DATA_BLOB *plaintext,\n+\t\t\t    BOOL encrypted);\n+BOOL make_user_info_netlogon_network(auth_usersupplied_info  \n**user_info,\n+\t\t\t\t     const char *smb_name,\n+\t\t\t\t     const char *client_domain,\n+\t\t\t\t     const char *wksta_name,\n+\t\t\t\t     uint32 logon_parameters,\n+\t\t\t\t     const uchar *lm_network_pwd,\n+\t\t\t\t     int lm_pwd_len,\n+\t\t\t\t     const uchar *nt_network_pwd,\n+\t\t\t\t     int nt_pwd_len);\n+BOOL make_user_info_netlogon_interactive(auth_usersupplied_info  \n**user_info,\n+\t\t\t\t\t const char *smb_name,\n+\t\t\t\t\t const char *client_domain,\n+\t\t\t\t\t const char *wksta_name,\n+\t\t\t\t\t uint32 logon_parameters,\n+\t\t\t\t\t const uchar chal[8],\n+\t\t\t\t\t const uchar lm_interactive_pwd[16],\n+\t\t\t\t\t const uchar nt_interactive_pwd[16],\n+\t\t\t\t\t const uchar *dc_sess_key);\n+BOOL make_user_info_for_reply(auth_usersupplied_info **user_info,\n+\t\t\t      const char *smb_name,\n+\t\t\t      const char *client_domain,\n+\t\t\t      const uint8 chal[8],\n+\t\t\t      DATA_BLOB plaintext_password);\n+NTSTATUS make_user_info_for_reply_enc(auth_usersupplied_info  \n**user_info,\n+                                      const char *smb_name,\n+                                      const char *client_domain,\n+                                      DATA_BLOB lm_resp, DATA_BLOB  \nnt_resp);\n+BOOL make_user_info_guest(auth_usersupplied_info **user_info) ;\n+NTSTATUS make_server_info_sam(auth_serversupplied_info **server_info,\n+\t\t\t      struct samu *sampass);\n+NTSTATUS create_local_token(auth_serversupplied_info *server_info);\n+NTSTATUS create_token_from_username(TALLOC_CTX *mem_ctx, const char  \n*username,\n+\t\t\t\t    BOOL is_guest,\n+\t\t\t\t    uid_t *uid, gid_t *gid,\n+\t\t\t\t    char **found_username,\n+\t\t\t\t    struct nt_user_token **token);\n+BOOL user_in_group_sid(const char *username, const DOM_SID *group_sid);\n+BOOL user_in_group(const char *username, const char *groupname);\n+NTSTATUS make_server_info_pw(auth_serversupplied_info **server_info,\n+                             char *unix_username,\n+\t\t\t     struct passwd *pwd);\n+BOOL init_guest_info(void);\n+NTSTATUS make_server_info_guest(auth_serversupplied_info  \n**server_info);\n+BOOL copy_current_user(struct current_user *dst, struct current_user  \n*src);\n+BOOL set_current_user_guest(struct current_user *dst);\n+struct passwd *smb_getpwnam( TALLOC_CTX *mem_ctx, char *domuser,\n+\t\t\t     fstring save_username, BOOL create );\n+NTSTATUS make_server_info_info3(TALLOC_CTX *mem_ctx,\n+\t\t\t\tconst char *sent_nt_username,\n+\t\t\t\tconst char *domain,\n+\t\t\t\tauth_serversupplied_info **server_info,\n+\t\t\t\tNET_USER_INFO_3 *info3) ;\n+void free_user_info(auth_usersupplied_info **user_info);\n+BOOL make_auth_methods(struct auth_context *auth_context,  \nauth_methods **auth_method) ;\n+BOOL is_trusted_domain(const char* dom_name);\n+\n+/* The following definitions come from auth/auth_winbind.c  */\n+\n+NTSTATUS auth_winbind_init(void);\n+\n+/* The following definitions come from auth/pampass.c  */\n+\n+BOOL smb_pam_claim_session(char *user, char *tty, char *rhost);\n+BOOL smb_pam_close_session(char *user, char *tty, char *rhost);\n+NTSTATUS smb_pam_accountcheck(const char * user);\n+NTSTATUS smb_pam_passcheck(const char * user, const char * password);\n+BOOL smb_pam_passchange(const char * user, const char * oldpassword,  \nconst char * newpassword);\n+NTSTATUS smb_pam_accountcheck(const char * user);\n+BOOL smb_pam_claim_session(char *user, char *tty, char *rhost);\n+BOOL smb_pam_close_session(char *in_user, char *tty, char *rhost);\n+\n+/* The following definitions come from auth/pass_check.c  */\n+\n+void dfs_unlogin(void);\n+NTSTATUS pass_check(const struct passwd *pass, const char *user,  \nconst char *password,\n+\t\t    int pwlen, BOOL (*fn) (const char *, const char *), BOOL  \nrun_cracker);\n+\n+/* The following definitions come from auth/token_util.c  */\n+\n+NT_USER_TOKEN *dup_nt_token(TALLOC_CTX *mem_ctx, const NT_USER_TOKEN  \n*ptoken);\n+BOOL nt_token_check_sid ( const DOM_SID *sid, const NT_USER_TOKEN  \n*token );\n+BOOL nt_token_check_domain_rid( NT_USER_TOKEN *token, uint32 rid ) ;\n+NT_USER_TOKEN *get_root_nt_token( void );\n+NTSTATUS add_aliases(const DOM_SID *domain_sid,\n+\t\t     struct nt_user_token *token);\n+struct nt_user_token *create_local_nt_token(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t    const DOM_SID *user_sid,\n+\t\t\t\t\t    BOOL is_guest,\n+\t\t\t\t\t    int num_groupsids,\n+\t\t\t\t\t    const DOM_SID *groupsids);\n+void debug_nt_user_token(int dbg_class, int dbg_lev, NT_USER_TOKEN  \n*token);\n+void debug_unix_user_token(int dbg_class, int dbg_lev, uid_t uid,  \ngid_t gid,\n+\t\t\t   int n_groups, gid_t *groups);\n+\n+/* The following definitions come from dynconfig.c  */\n+\n+\n+/* The following definitions come from groupdb/mapping.c  */\n+\n+NTSTATUS add_initial_entry(gid_t gid, const char *sid, enum  \nlsa_SidType sid_name_use, const char *nt_name, const char *comment);\n+BOOL get_domain_group_from_sid(DOM_SID sid, GROUP_MAP *map);\n+int smb_create_group(const char *unix_group, gid_t *new_gid);\n+int smb_delete_group(const char *unix_group);\n+int smb_set_primary_group(const char *unix_group, const char*  \nunix_user);\n+int smb_add_user_group(const char *unix_group, const char *unix_user);\n+int smb_delete_user_group(const char *unix_group, const char  \n*unix_user);\n+NTSTATUS pdb_default_getgrsid(struct pdb_methods *methods, GROUP_MAP  \n*map,\n+\t\t\t\t DOM_SID sid);\n+NTSTATUS pdb_default_getgrgid(struct pdb_methods *methods, GROUP_MAP  \n*map,\n+\t\t\t\t gid_t gid);\n+NTSTATUS pdb_default_getgrnam(struct pdb_methods *methods, GROUP_MAP  \n*map,\n+\t\t\t\t const char *name);\n+NTSTATUS pdb_default_add_group_mapping_entry(struct pdb_methods  \n*methods,\n+\t\t\t\t\t\tGROUP_MAP *map);\n+NTSTATUS pdb_default_update_group_mapping_entry(struct pdb_methods  \n*methods,\n+\t\t\t\t\t\t   GROUP_MAP *map);\n+NTSTATUS pdb_default_delete_group_mapping_entry(struct pdb_methods  \n*methods,\n+\t\t\t\t\t\t   DOM_SID sid);\n+NTSTATUS pdb_default_enum_group_mapping(struct pdb_methods *methods,\n+\t\t\t\t\t   const DOM_SID *sid, enum lsa_SidType sid_name_use,\n+\t\t\t\t\t   GROUP_MAP **pp_rmap, size_t *p_num_entries,\n+\t\t\t\t\t   BOOL unix_only);\n+NTSTATUS pdb_default_create_alias(struct pdb_methods *methods,\n+\t\t\t\t  const char *name, uint32 *rid);\n+NTSTATUS pdb_default_delete_alias(struct pdb_methods *methods,\n+\t\t\t\t  const DOM_SID *sid);\n+NTSTATUS pdb_default_get_aliasinfo(struct pdb_methods *methods,\n+\t\t\t\t   const DOM_SID *sid,\n+\t\t\t\t   struct acct_info *info);\n+NTSTATUS pdb_default_set_aliasinfo(struct pdb_methods *methods,\n+\t\t\t\t   const DOM_SID *sid,\n+\t\t\t\t   struct acct_info *info);\n+NTSTATUS pdb_default_add_aliasmem(struct pdb_methods *methods,\n+\t\t\t\t  const DOM_SID *alias, const DOM_SID *member);\n+NTSTATUS pdb_default_del_aliasmem(struct pdb_methods *methods,\n+\t\t\t\t  const DOM_SID *alias, const DOM_SID *member);\n+NTSTATUS pdb_default_enum_aliasmem(struct pdb_methods *methods,\n+\t\t\t\t   const DOM_SID *alias, DOM_SID **pp_members,\n+\t\t\t\t   size_t *p_num_members);\n+NTSTATUS pdb_default_alias_memberships(struct pdb_methods *methods,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       const DOM_SID *domain_sid,\n+\t\t\t\t       const DOM_SID *members,\n+\t\t\t\t       size_t num_members,\n+\t\t\t\t       uint32 **pp_alias_rids,\n+\t\t\t\t       size_t *p_num_alias_rids);\n+NTSTATUS pdb_nop_getgrsid(struct pdb_methods *methods, GROUP_MAP *map,\n+\t\t\t\t DOM_SID sid);\n+NTSTATUS pdb_nop_getgrgid(struct pdb_methods *methods, GROUP_MAP *map,\n+\t\t\t\t gid_t gid);\n+NTSTATUS pdb_nop_getgrnam(struct pdb_methods *methods, GROUP_MAP *map,\n+\t\t\t\t const char *name);\n+NTSTATUS pdb_nop_add_group_mapping_entry(struct pdb_methods *methods,\n+\t\t\t\t\t\tGROUP_MAP *map);\n+NTSTATUS pdb_nop_update_group_mapping_entry(struct pdb_methods  \n*methods,\n+\t\t\t\t\t\t   GROUP_MAP *map);\n+NTSTATUS pdb_nop_delete_group_mapping_entry(struct pdb_methods  \n*methods,\n+\t\t\t\t\t\t   DOM_SID sid);\n+NTSTATUS pdb_nop_enum_group_mapping(struct pdb_methods *methods,\n+\t\t\t\t\t   enum lsa_SidType sid_name_use,\n+\t\t\t\t\t   GROUP_MAP **rmap, size_t *num_entries,\n+\t\t\t\t\t   BOOL unix_only);\n+BOOL pdb_get_dom_grp_info(const DOM_SID *sid, struct acct_info *info);\n+BOOL pdb_set_dom_grp_info(const DOM_SID *sid, const struct acct_info  \n*info);\n+NTSTATUS pdb_create_builtin_alias(uint32 rid);\n+\n+/* The following definitions come from groupdb/mapping_ldb.c  */\n+\n+const struct mapping_backend *groupdb_ldb_init(void);\n+\n+/* The following definitions come from groupdb/mapping_tdb.c  */\n+\n+const struct mapping_backend *groupdb_tdb_init(void);\n+\n+/* The following definitions come from intl/lang_tdb.c  */\n+\n+BOOL lang_tdb_init(const char *lang);\n+const char *lang_msg(const char *msgid);\n+void lang_msg_free(const char *msgstr);\n+const char *lang_msg_rotate(const char *msgid);\n+char *lang_tdb_current(void);\n+\n+/* The following definitions come from lib/access.c  */\n+\n+BOOL allow_access(const char **deny_list, const char **allow_list,\n+\t\t  const char *cname, const char *caddr);\n+BOOL check_access(int sock, const char **allow_list, const char  \n**deny_list);\n+\n+/* The following definitions come from lib/account_pol.c  */\n+\n+void account_policy_names_list(const char ***names, int *num_names);\n+const char *decode_account_policy_name(int field);\n+const char *get_account_policy_attr(int field);\n+const char *account_policy_get_desc(int field);\n+int account_policy_name_to_fieldnum(const char *name);\n+BOOL account_policy_get_default(int account_policy, uint32 *val);\n+BOOL init_account_policy(void);\n+BOOL account_policy_get(int field, uint32 *value);\n+BOOL account_policy_set(int field, uint32 value);\n+BOOL cache_account_policy_set(int field, uint32 value);\n+BOOL cache_account_policy_get(int field, uint32 *value);\n+TDB_CONTEXT *get_account_pol_tdb( void );\n+\n+/* The following definitions come from lib/adt_tree.c  */\n+\n+\n+/* The following definitions come from lib/afs.c  */\n+\n+char *afs_createtoken_str(const char *username, const char *cell);\n+BOOL afs_login(connection_struct *conn);\n+BOOL afs_login(connection_struct *conn);\n+char *afs_createtoken_str(const char *username, const char *cell);\n+\n+/* The following definitions come from lib/afs_settoken.c  */\n+\n+int afs_syscall( int subcall,\n+\t  char * path,\n+\t  int cmd,\n+\t  char * cmarg,\n+\t  int follow);\n+BOOL afs_settoken_str(const char *token_string);\n+BOOL afs_settoken_str(const char *token_string);\n+\n+/* The following definitions come from lib/arc4.c  */\n+\n+void smb_arc4_init(unsigned char arc4_state_out[258], const unsigned  \nchar *key, size_t keylen);\n+void smb_arc4_crypt(unsigned char arc4_state_inout[258], unsigned  \nchar *data, size_t len);\n+\n+/* The following definitions come from lib/audit.c  */\n+\n+const char *audit_category_str(uint32 category);\n+const char *audit_param_str(uint32 category);\n+const char *audit_description_str(uint32 category);\n+BOOL get_audit_category_from_param(const char *param, uint32  \n*audit_category);\n+const char *audit_policy_str(TALLOC_CTX *mem_ctx, uint32 policy);\n+\n+/* The following definitions come from lib/bitmap.c  */\n+\n+struct bitmap *bitmap_allocate(int n);\n+void bitmap_free(struct bitmap *bm);\n+struct bitmap *bitmap_talloc(TALLOC_CTX *mem_ctx, int n);\n+int bitmap_copy(struct bitmap * const dst, const struct bitmap *  \nconst src);\n+BOOL bitmap_set(struct bitmap *bm, unsigned i);\n+BOOL bitmap_clear(struct bitmap *bm, unsigned i);\n+BOOL bitmap_query(struct bitmap *bm, unsigned i);\n+int bitmap_find(struct bitmap *bm, unsigned ofs);\n+\n+/* The following definitions come from lib/charcnv.c  */\n+\n+char lp_failed_convert_char(void);\n+void lazy_initialize_conv(void);\n+void gfree_charcnv(void);\n+void init_iconv(void);\n+size_t convert_string(charset_t from, charset_t to,\n+\t\t      void const *src, size_t srclen,\n+\t\t      void *dest, size_t destlen, BOOL allow_bad_conv);\n+size_t convert_string_allocate(TALLOC_CTX *ctx, charset_t from,  \ncharset_t to,\n+\t\t\t       void const *src, size_t srclen, void *dst, BOOL  \nallow_bad_conv);\n+size_t convert_string_talloc(TALLOC_CTX *ctx, charset_t from,  \ncharset_t to,\n+\t\t\t     void const *src, size_t srclen, void *dst,\n+\t\t\t     BOOL allow_bad_conv);\n+size_t unix_strupper(const char *src, size_t srclen, char *dest,  \nsize_t destlen);\n+char *strdup_upper(const char *s);\n+size_t unix_strlower(const char *src, size_t srclen, char *dest,  \nsize_t destlen);\n+char *strdup_lower(const char *s);\n+size_t push_ascii(void *dest, const char *src, size_t dest_len, int  \nflags);\n+size_t push_ascii_fstring(void *dest, const char *src);\n+size_t push_ascii_pstring(void *dest, const char *src);\n+size_t push_ascii_nstring(void *dest, const char *src);\n+size_t pull_ascii(char *dest, const void *src, size_t dest_len,  \nsize_t src_len, int flags);\n+size_t pull_ascii_pstring(char *dest, const void *src);\n+size_t pull_ascii_fstring(char *dest, const void *src);\n+size_t pull_ascii_nstring(char *dest, size_t dest_len, const void  \n*src);\n+size_t push_ucs2(const void *base_ptr, void *dest, const char *src,  \nsize_t dest_len, int flags);\n+size_t push_ucs2_talloc(TALLOC_CTX *ctx, smb_ucs2_t **dest, const  \nchar *src);\n+size_t push_ucs2_allocate(smb_ucs2_t **dest, const char *src);\n+size_t push_utf8_fstring(void *dest, const char *src);\n+size_t push_utf8_talloc(TALLOC_CTX *ctx, char **dest, const char *src);\n+size_t push_utf8_allocate(char **dest, const char *src);\n+size_t pull_ucs2(const void *base_ptr, char *dest, const void *src,  \nsize_t dest_len, size_t src_len, int flags);\n+size_t pull_ucs2_pstring(char *dest, const void *src);\n+size_t pull_ucs2_fstring(char *dest, const void *src);\n+size_t pull_ucs2_talloc(TALLOC_CTX *ctx, char **dest, const  \nsmb_ucs2_t *src);\n+size_t pull_ucs2_allocate(char **dest, const smb_ucs2_t *src);\n+size_t pull_utf8_talloc(TALLOC_CTX *ctx, char **dest, const char *src);\n+size_t pull_utf8_allocate(char **dest, const char *src);\n+size_t pull_ascii_talloc(TALLOC_CTX *ctx, char **dest, const char  \n*src);\n+size_t push_string_fn(const char *function, unsigned int line, const  \nvoid *base_ptr, void *dest, const char *src, size_t dest_len, int  \nflags);\n+size_t pull_string_fn(const char *function, unsigned int line, const  \nvoid *base_ptr, char *dest, const void *src, size_t dest_len, size_t  \nsrc_len, int flags);\n+size_t align_string(const void *base_ptr, const char *p, int flags);\n+codepoint_t next_codepoint(const char *str, size_t *size);\n+\n+/* The following definitions come from lib/clobber.c  */\n+\n+void clobber_region(const char *fn, unsigned int line, char *dest,  \nsize_t len);\n+\n+/* The following definitions come from lib/conn_tdb.c  */\n+\n+struct db_record *connections_fetch_record(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t   TDB_DATA key);\n+struct db_record *connections_fetch_entry(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t  connection_struct *conn,\n+\t\t\t\t\t  const char *name);\n+int connections_traverse(int (*fn)(struct db_record *rec,\n+\t\t\t\t   void *private_data),\n+\t\t\t void *private_data);\n+int connections_forall(int (*fn)(struct db_record *rec,\n+\t\t\t\t const struct connections_key *key,\n+\t\t\t\t const struct connections_data *data,\n+\t\t\t\t void *private_data),\n+\t\t       void *private_data);\n+BOOL connections_init(BOOL rw);\n+\n+/* The following definitions come from lib/crc32.c  */\n+\n+uint32 crc32_calc_buffer(const char *buf, size_t size);\n+\n+/* The following definitions come from lib/data_blob.c  */\n+\n+DATA_BLOB data_blob(const void *p, size_t length);\n+DATA_BLOB data_blob_talloc(TALLOC_CTX *mem_ctx, const void *p,  \nsize_t length);\n+void data_blob_free(DATA_BLOB *d);\n+void data_blob_clear(DATA_BLOB *d);\n+void data_blob_clear_free(DATA_BLOB *d);\n+DATA_BLOB data_blob_string_const(const char *str);\n+DATA_BLOB data_blob_const(const void *p, size_t length);\n+\n+/* The following definitions come from lib/dbwrap.c  */\n+\n+struct db_context *db_open(TALLOC_CTX *mem_ctx,\n+\t\t\t   const char *name,\n+\t\t\t   int hash_size, int tdb_flags,\n+\t\t\t   int open_flags, mode_t mode);\n+\n+/* The following definitions come from lib/dbwrap_tdb.c  */\n+\n+struct db_context *db_open_tdb(TALLOC_CTX *mem_ctx,\n+\t\t\t       const char *name,\n+\t\t\t       int hash_size, int tdb_flags,\n+\t\t\t       int open_flags, mode_t mode);\n+\n+/* The following definitions come from lib/debug.c  */\n+\n+void gfree_debugsyms(void);\n+const char *debug_classname_from_index(int ndx);\n+int debug_add_class(const char *classname);\n+int debug_lookup_classname(const char *classname);\n+BOOL debug_parse_levels(const char *params_str);\n+void debug_init(void);\n+void debug_register_msgs(struct messaging_context *msg_ctx);\n+void setup_logging(const char *pname, BOOL interactive);\n+BOOL reopen_logs( void );\n+void force_check_log_size( void );\n+BOOL need_to_check_log_size( void );\n+void check_log_size( void );\n+void dbgflush( void );\n+BOOL dbghdr( int level, const char *file, const char *func, int line );\n+\n+/* The following definitions come from lib/display_sec.c  */\n+\n+char *get_sec_mask_str(uint32 type);\n+void display_sec_access(SEC_ACCESS *info);\n+void display_sec_ace(SEC_ACE *ace);\n+void display_sec_acl(SEC_ACL *sec_acl);\n+void display_acl_type(uint16 type);\n+void display_sec_desc(SEC_DESC *sec);\n+\n+/* The following definitions come from lib/dmallocmsg.c  */\n+\n+void register_dmalloc_msgs(struct messaging_context *msg_ctx);\n+\n+/* The following definitions come from lib/dprintf.c  */\n+\n+void display_set_stderr(void);\n+\n+/* The following definitions come from lib/errmap_unix.c  */\n+\n+NTSTATUS map_nt_error_from_unix(int unix_error);\n+\n+/* The following definitions come from lib/events.c  */\n+\n+struct timed_event *event_add_timed(struct event_context *event_ctx,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tstruct timeval when,\n+\t\t\t\tconst char *event_name,\n+\t\t\t\tvoid (*handler)(struct event_context *event_ctx,\n+\t\t\t\t\t\tstruct timed_event *te,\n+\t\t\t\t\t\tconst struct timeval *now,\n+\t\t\t\t\t\tvoid *private_data),\n+\t\t\t\tvoid *private_data);\n+struct fd_event *event_add_fd(struct event_context *event_ctx,\n+\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t      int fd, uint16_t flags,\n+\t\t\t      void (*handler)(struct event_context *event_ctx,\n+\t\t\t\t\t      struct fd_event *event,\n+\t\t\t\t\t      uint16 flags,\n+\t\t\t\t\t      void *private_data),\n+\t\t\t      void *private_data);\n+void event_fd_set_writeable(struct fd_event *fde);\n+void event_fd_set_not_writeable(struct fd_event *fde);\n+void event_fd_set_readable(struct fd_event *fde);\n+void event_fd_set_not_readable(struct fd_event *fde);\n+BOOL event_add_to_select_args(struct event_context *event_ctx,\n+\t\t\t      const struct timeval *now,\n+\t\t\t      fd_set *read_fds, fd_set *write_fds,\n+\t\t\t      struct timeval *timeout, int *maxfd);\n+BOOL events_pending(struct event_context *event_ctx);\n+BOOL run_events(struct event_context *event_ctx,\n+\t\tint selrtn, fd_set *read_fds, fd_set *write_fds);\n+struct timeval *get_timed_events_timeout(struct event_context  \n*event_ctx,\n+\t\t\t\t\t struct timeval *to_ret);\n+int event_loop_once(struct event_context *ev);\n+struct event_context *event_context_init(TALLOC_CTX *mem_ctx);\n+int set_event_dispatch_time(struct event_context *event_ctx,\n+\t\t\t    const char *event_name, struct timeval when);\n+int cancel_named_event(struct event_context *event_ctx,\n+\t\t       const char *event_name);\n+\n+/* The following definitions come from lib/fault.c  */\n+\n+void fault_setup(void (*fn)(void *));\n+void dump_core_setup(const char *progname);\n+\n+/* The following definitions come from lib/file_id.c  */\n+\n+struct file_id file_id_create(SMB_DEV_T dev, SMB_INO_T inode);\n+struct file_id file_id_sbuf(const SMB_STRUCT_STAT *sbuf);\n+BOOL file_id_equal(const struct file_id *id1, const struct file_id  \n*id2);\n+const char *file_id_static_string(const struct file_id *id);\n+const char *file_id_static_string2(const struct file_id *id);\n+void push_file_id_16(char *buf, const struct file_id *id);\n+void pull_file_id_16(char *buf, struct file_id *id);\n+\n+/* The following definitions come from lib/fsusage.c  */\n+\n+int sys_fsusage(const char *path, SMB_BIG_UINT *dfree, SMB_BIG_UINT  \n*dsize);\n+\n+/* The following definitions come from lib/gencache.c  */\n+\n+BOOL gencache_init(void);\n+BOOL gencache_shutdown(void);\n+BOOL gencache_set(const char *keystr, const char *value, time_t  \ntimeout);\n+BOOL gencache_del(const char *keystr);\n+BOOL gencache_get(const char *keystr, char **valstr, time_t *timeout);\n+void gencache_iterate(void (*fn)(const char* key, const char *value,  \ntime_t timeout, void* dptr),\n+                      void* data, const char* keystr_pattern);\n+int gencache_lock_entry( const char *key );\n+void gencache_unlock_entry( const char *key );\n+\n+/* The following definitions come from lib/genrand.c  */\n+\n+void set_rand_reseed_callback(void (*fn)(int *));\n+void set_need_random_reseed(void);\n+void generate_random_buffer( unsigned char *out, int len);\n+char *generate_random_str(size_t len);\n+\n+/* The following definitions come from lib/hmacmd5.c  */\n+\n+void hmac_md5_init_rfc2104(const unsigned char *key, int key_len,  \nHMACMD5Context *ctx);\n+void hmac_md5_init_limK_to_64(const unsigned char* key, int key_len,\n+\t\t\tHMACMD5Context *ctx);\n+void hmac_md5_update(const unsigned char *text, int text_len,  \nHMACMD5Context *ctx);\n+void hmac_md5_final(unsigned char *digest, HMACMD5Context *ctx);\n+void hmac_md5( unsigned char key[16], unsigned char *data, int  \ndata_len, unsigned char *digest);\n+\n+/* The following definitions come from lib/iconv.c  */\n+\n+NTSTATUS smb_register_charset(struct charset_functions *funcs) ;\n+size_t smb_iconv(smb_iconv_t cd,\n+\t\t const char **inbuf, size_t *inbytesleft,\n+\t\t char **outbuf, size_t *outbytesleft);\n+smb_iconv_t smb_iconv_open(const char *tocode, const char *fromcode);\n+int smb_iconv_close (smb_iconv_t cd);\n+\n+/* The following definitions come from lib/interface.c  */\n+\n+void load_interfaces(void);\n+void gfree_interfaces(void);\n+BOOL interfaces_changed(void);\n+BOOL ismyip(struct in_addr ip);\n+BOOL is_local_net(struct in_addr from);\n+int iface_count(void);\n+struct interface *get_interface(int n);\n+struct in_addr *iface_n_ip(int n);\n+struct in_addr *iface_n_bcast(int n);\n+struct in_addr *iface_ip(struct in_addr ip);\n+BOOL iface_local(struct in_addr ip);\n+\n+/* The following definitions come from lib/interfaces.c  */\n+\n+int get_interfaces(struct iface_struct *ifaces, int max_interfaces);\n+\n+/* The following definitions come from lib/launchd.c  */\n+\n+\n+/* The following definitions come from lib/ldap_escape.c  */\n+\n+char *escape_ldap_string_alloc(const char *s);\n+char *escape_rdn_val_string_alloc(const char *s);\n+\n+/* The following definitions come from lib/md4.c  */\n+\n+void mdfour(unsigned char *out, const unsigned char *in, int n);\n+\n+/* The following definitions come from lib/md5.c  */\n+\n+void MD5Init(struct MD5Context *ctx);\n+void MD5Update(struct MD5Context *ctx, unsigned char const *buf,  \nunsigned len);\n+void MD5Final(unsigned char digest[16], struct MD5Context *ctx);\n+\n+/* The following definitions come from lib/module.c  */\n+\n+NTSTATUS smb_load_module(const char *module_name);\n+int smb_load_modules(const char **modules);\n+NTSTATUS smb_probe_module(const char *subsystem, const char *module);\n+NTSTATUS smb_load_module(const char *module_name);\n+int smb_load_modules(const char **modules);\n+NTSTATUS smb_probe_module(const char *subsystem, const char *module);\n+void init_modules(void);\n+\n+/* The following definitions come from lib/ms_fnmatch.c  */\n+\n+int ms_fnmatch(const char *pattern, const char *string, BOOL  \ntranslate_pattern,\n+\t       BOOL is_case_sensitive);\n+int gen_fnmatch(const char *pattern, const char *string);\n+\n+/* The following definitions come from lib/pam_errors.c  */\n+\n+NTSTATUS pam_to_nt_status(int pam_error);\n+int nt_status_to_pam(NTSTATUS nt_status);\n+NTSTATUS pam_to_nt_status(int pam_error);\n+int nt_status_to_pam(NTSTATUS nt_status);\n+\n+/* The following definitions come from lib/pidfile.c  */\n+\n+pid_t pidfile_pid(const char *name);\n+void pidfile_create(const char *program_name);\n+\n+/* The following definitions come from lib/popt_common.c  */\n+\n+\n+/* The following definitions come from lib/privileges.c  */\n+\n+BOOL se_priv_copy( SE_PRIV *dst, const SE_PRIV *src );\n+void se_priv_add( SE_PRIV *mask, const SE_PRIV *addpriv );\n+void se_priv_remove( SE_PRIV *mask, const SE_PRIV *removepriv );\n+BOOL se_priv_from_name( const char *name, SE_PRIV *mask );\n+void dump_se_priv( int dbg_cl, int dbg_lvl, const SE_PRIV *mask );\n+LUID_ATTR get_privilege_luid( SE_PRIV *mask );\n+const char* get_privilege_dispname( const char *name );\n+BOOL get_privileges_for_sids(SE_PRIV *privileges, DOM_SID *slist,  \nint scount);\n+NTSTATUS privilege_enumerate_accounts(DOM_SID **sids, int *num_sids);\n+BOOL grant_privilege(const DOM_SID *sid, const SE_PRIV *priv_mask);\n+BOOL grant_privilege_by_name(DOM_SID *sid, const char *name);\n+BOOL revoke_privilege(const DOM_SID *sid, const SE_PRIV *priv_mask);\n+BOOL revoke_all_privileges( DOM_SID *sid );\n+BOOL revoke_privilege_by_name(DOM_SID *sid, const char *name);\n+NTSTATUS privilege_create_account(const DOM_SID *sid );\n+NTSTATUS privilege_set_init(PRIVILEGE_SET *priv_set);\n+NTSTATUS privilege_set_init_by_ctx(TALLOC_CTX *mem_ctx,  \nPRIVILEGE_SET *priv_set);\n+void privilege_set_free(PRIVILEGE_SET *priv_set);\n+NTSTATUS dup_luid_attr(TALLOC_CTX *mem_ctx, LUID_ATTR **new_la,  \nLUID_ATTR *old_la, int count);\n+BOOL user_has_privileges(const NT_USER_TOKEN *token, const SE_PRIV  \n*privilege);\n+BOOL user_has_any_privilege(NT_USER_TOKEN *token, const SE_PRIV  \n*privilege);\n+char* luid_to_privilege_name(const LUID *set);\n+int count_all_privileges( void );\n+BOOL se_priv_to_privilege_set( PRIVILEGE_SET *set, SE_PRIV *mask );\n+BOOL privilege_set_to_se_priv( SE_PRIV *mask, PRIVILEGE_SET *privset );\n+BOOL is_privileged_sid( const DOM_SID *sid );\n+BOOL grant_all_privileges( const DOM_SID *sid );\n+\n+/* The following definitions come from lib/readline.c  */\n+\n+char *smb_readline(const char *prompt, void (*callback)(void),\n+\t\t   char **(completion_fn)(const char *text, int start, int end));\n+const char *smb_readline_get_line_buffer(void);\n+void smb_readline_ca_char(char c);\n+int cmd_history(void);\n+\n+/* The following definitions come from lib/secace.c  */\n+\n+BOOL sec_ace_object(uint8 type);\n+void sec_ace_copy(SEC_ACE *ace_dest, SEC_ACE *ace_src);\n+void init_sec_ace(SEC_ACE *t, const DOM_SID *sid, uint8 type, uint32  \nmask, uint8 flag);\n+NTSTATUS sec_ace_add_sid(TALLOC_CTX *ctx, SEC_ACE **pp_new, SEC_ACE  \n*old, unsigned *num, DOM_SID *sid, uint32 mask);\n+NTSTATUS sec_ace_mod_sid(SEC_ACE *ace, size_t num, DOM_SID *sid,  \nuint32 mask);\n+NTSTATUS sec_ace_del_sid(TALLOC_CTX *ctx, SEC_ACE **pp_new, SEC_ACE  \n*old, uint32 *num, DOM_SID *sid);\n+BOOL sec_ace_equal(SEC_ACE *s1, SEC_ACE *s2);\n+int nt_ace_inherit_comp( SEC_ACE *a1, SEC_ACE *a2);\n+int nt_ace_canon_comp( SEC_ACE *a1, SEC_ACE *a2);\n+void dacl_sort_into_canonical_order(SEC_ACE *srclist, unsigned int  \nnum_aces);\n+BOOL token_sid_in_ace(const NT_USER_TOKEN *token, const SEC_ACE *ace);\n+\n+/* The following definitions come from lib/secacl.c  */\n+\n+SEC_ACL *make_sec_acl(TALLOC_CTX *ctx, uint16 revision, int  \nnum_aces, SEC_ACE *ace_list);\n+SEC_ACL *dup_sec_acl(TALLOC_CTX *ctx, SEC_ACL *src);\n+BOOL sec_acl_equal(SEC_ACL *s1, SEC_ACL *s2);\n+\n+/* The following definitions come from lib/secdesc.c  */\n+\n+size_t sec_desc_size(SEC_DESC *psd);\n+BOOL sec_desc_equal(SEC_DESC *s1, SEC_DESC *s2);\n+SEC_DESC_BUF *sec_desc_merge(TALLOC_CTX *ctx, SEC_DESC_BUF *new_sdb,  \nSEC_DESC_BUF *old_sdb);\n+SEC_DESC *make_sec_desc(TALLOC_CTX *ctx, uint16 revision, uint16 type,\n+\t\t\tconst DOM_SID *owner_sid, const DOM_SID *grp_sid,\n+\t\t\tSEC_ACL *sacl, SEC_ACL *dacl, size_t *sd_size);\n+SEC_DESC *dup_sec_desc(TALLOC_CTX *ctx, const SEC_DESC *src);\n+NTSTATUS marshall_sec_desc(TALLOC_CTX *mem_ctx,\n+\t\t\t   struct security_descriptor *secdesc,\n+\t\t\t   uint8 **data, size_t *len);\n+NTSTATUS unmarshall_sec_desc(TALLOC_CTX *mem_ctx, uint8 *data,  \nsize_t len,\n+\t\t\t     struct security_descriptor **psecdesc);\n+SEC_DESC *make_standard_sec_desc(TALLOC_CTX *ctx, const DOM_SID  \n*owner_sid, const DOM_SID *grp_sid,\n+\t\t\t\t SEC_ACL *dacl, size_t *sd_size);\n+SEC_DESC_BUF *make_sec_desc_buf(TALLOC_CTX *ctx, size_t len,  \nSEC_DESC *sec_desc);\n+SEC_DESC_BUF *dup_sec_desc_buf(TALLOC_CTX *ctx, SEC_DESC_BUF *src);\n+NTSTATUS sec_desc_add_sid(TALLOC_CTX *ctx, SEC_DESC **psd, DOM_SID  \n*sid, uint32 mask, size_t *sd_size);\n+NTSTATUS sec_desc_mod_sid(SEC_DESC *sd, DOM_SID *sid, uint32 mask);\n+NTSTATUS sec_desc_del_sid(TALLOC_CTX *ctx, SEC_DESC **psd, DOM_SID  \n*sid, size_t *sd_size);\n+SEC_DESC_BUF *se_create_child_secdesc(TALLOC_CTX *ctx, SEC_DESC  \n*parent_ctr,\n+\t\t\t\t      BOOL child_container);\n+void init_sec_access(uint32 *t, uint32 mask);\n+\n+/* The following definitions come from lib/select.c  */\n+\n+void sys_select_signal(char c);\n+int sys_select(int maxfd, fd_set *readfds, fd_set *writefds, fd_set  \n*errorfds, struct timeval *tval);\n+int sys_select_intr(int maxfd, fd_set *readfds, fd_set *writefds,  \nfd_set *errorfds, struct timeval *tval);\n+\n+/* The following definitions come from lib/sendfile.c  */\n+\n+ssize_t sys_sendfile(int tofd, int fromfd, const DATA_BLOB *header,  \nSMB_OFF_T offset, size_t count);\n+ssize_t sys_sendfile(int tofd, int fromfd, const DATA_BLOB *header,  \nSMB_OFF_T offset, size_t count);\n+ssize_t sys_sendfile(int tofd, int fromfd, const DATA_BLOB *header,  \nSMB_OFF_T offset, size_t count);\n+ssize_t sys_sendfile(int tofd, int fromfd, const DATA_BLOB *header,  \nSMB_OFF_T offset, size_t count);\n+ssize_t sys_sendfile(int tofd, int fromfd, const DATA_BLOB *header,  \nSMB_OFF_T offset, size_t count);\n+ssize_t sys_sendfile(int tofd, int fromfd, const DATA_BLOB *header,  \nSMB_OFF_T offset, size_t count);\n+ssize_t sys_sendfile(int tofd, int fromfd, const DATA_BLOB *header,  \nSMB_OFF_T offset, size_t count);\n+\n+/* The following definitions come from lib/server_mutex.c  */\n+\n+BOOL grab_server_mutex(const char *name);\n+void release_server_mutex(void);\n+\n+/* The following definitions come from lib/sharesec.c  */\n+\n+BOOL share_info_db_init(void);\n+SEC_DESC *get_share_security_default( TALLOC_CTX *ctx, size_t  \n*psize, uint32 def_access);\n+SEC_DESC *get_share_security( TALLOC_CTX *ctx, const char *servicename,\n+\t\t\t      size_t *psize);\n+BOOL set_share_security(const char *share_name, SEC_DESC *psd);\n+BOOL delete_share_security(const struct share_params *params);\n+BOOL share_access_check(const NT_USER_TOKEN *token, const char  \n*sharename,\n+\t\t\tuint32 desired_access);\n+BOOL parse_usershare_acl(TALLOC_CTX *ctx, const char *acl_str,  \nSEC_DESC **ppsd);\n+\n+/* The following definitions come from lib/signal.c  */\n+\n+void BlockSignals(BOOL block,int signum);\n+void (*CatchSignal(int signum,void (*handler)(int )))(int);\n+void CatchChild(void);\n+void CatchChildLeaveStatus(void);\n+\n+/* The following definitions come from lib/smbldap.c  */\n+\n+int smb_ldap_start_tls(LDAP *ldap_struct, int version);\n+int smb_ldap_setup_conn(LDAP **ldap_struct, const char *uri);\n+int smb_ldap_upgrade_conn(LDAP *ldap_struct, int *new_version) ;\n+int smb_ldap_setup_full_conn(LDAP **ldap_struct, const char *uri);\n+int smbldap_search(struct smbldap_state *ldap_state,\n+\t\t   const char *base, int scope, const char *filter,\n+\t\t   const char *attrs[], int attrsonly,\n+\t\t   LDAPMessage **res);\n+int smbldap_search_paged(struct smbldap_state *ldap_state,\n+\t\t\t const char *base, int scope, const char *filter,\n+\t\t\t const char **attrs, int attrsonly, int pagesize,\n+\t\t\t LDAPMessage **res, void **cookie);\n+int smbldap_modify(struct smbldap_state *ldap_state, const char *dn,  \nLDAPMod *attrs[]);\n+int smbldap_add(struct smbldap_state *ldap_state, const char *dn,  \nLDAPMod *attrs[]);\n+int smbldap_delete(struct smbldap_state *ldap_state, const char *dn);\n+int smbldap_extended_operation(struct smbldap_state *ldap_state,\n+\t\t\t       LDAP_CONST char *reqoid, struct berval *reqdata,\n+\t\t\t       LDAPControl **serverctrls, LDAPControl **clientctrls,\n+\t\t\t       char **retoidp, struct berval **retdatap);\n+int smbldap_search_suffix (struct smbldap_state *ldap_state,\n+\t\t\t   const char *filter, const char **search_attr,\n+\t\t\t   LDAPMessage ** result);\n+void smbldap_free_struct(struct smbldap_state **ldap_state) ;\n+NTSTATUS smbldap_init(TALLOC_CTX *mem_ctx, struct event_context  \n*event_ctx,\n+\t\t      const char *location,\n+\t\t      struct smbldap_state **smbldap_state);\n+char *smbldap_get_dn(LDAP *ld, LDAPMessage *entry);\n+BOOL smbldap_has_control(LDAP *ld, const char *control);\n+BOOL smbldap_has_extension(LDAP *ld, const char *extension);\n+BOOL smbldap_has_naming_context(LDAP *ld, const char *naming_context);\n+BOOL smbldap_set_creds(struct smbldap_state *ldap_state, BOOL anon,  \nconst char *dn, const char *secret);\n+\n+/* The following definitions come from lib/smbldap_util.c  */\n+\n+NTSTATUS smbldap_search_domain_info(struct smbldap_state *ldap_state,\n+                                    LDAPMessage ** result, const  \nchar *domain_name,\n+                                    BOOL try_add);\n+\n+/* The following definitions come from lib/smbrun.c  */\n+\n+int smbrun_no_sanitize(const char *cmd, int *outfd);\n+int smbrun(const char *cmd, int *outfd);\n+int smbrunsecret(const char *cmd, const char *secret);\n+\n+/* The following definitions come from lib/sock_exec.c  */\n+\n+int sock_exec(const char *prog);\n+\n+/* The following definitions come from lib/substitute.c  */\n+\n+void set_local_machine_name(const char* local_name, BOOL perm);\n+void set_remote_machine_name(const char* remote_name, BOOL perm);\n+const char* get_remote_machine_name(void) ;\n+const char* get_local_machine_name(void) ;\n+void sub_set_smb_name(const char *name);\n+char* sub_get_smb_name( void );\n+void set_current_user_info(const userdom_struct *pcui);\n+const char* get_current_username( void );\n+void standard_sub_basic(const char *smb_name, const char *domain_name,\n+\t\t\tchar *str, size_t len);\n+char *talloc_sub_basic(TALLOC_CTX *mem_ctx, const char *smb_name,\n+\t\t       const char *domain_name, const char *str);\n+char *alloc_sub_basic(const char *smb_name, const char *domain_name,\n+\t\t      const char *str);\n+char *talloc_sub_specified(TALLOC_CTX *mem_ctx,\n+\t\t\tconst char *input_string,\n+\t\t\tconst char *username,\n+\t\t\tconst char *domain,\n+\t\t\tuid_t uid,\n+\t\t\tgid_t gid);\n+char *talloc_sub_advanced(TALLOC_CTX *mem_ctx,\n+\t\t\t  const char *servicename, const char *user,\n+\t\t\t  const char *connectpath, gid_t gid,\n+\t\t\t  const char *smb_name, const char *domain_name,\n+\t\t\t  const char *str);\n+void standard_sub_advanced(const char *servicename, const char *user,\n+\t\t\t   const char *connectpath, gid_t gid,\n+\t\t\t   const char *smb_name, const char *domain_name,\n+\t\t\t   char *str, size_t len);\n+\n+/* The following definitions come from lib/sysacls.c  */\n+\n+int sys_acl_get_entry(SMB_ACL_T acl_d, int entry_id, SMB_ACL_ENTRY_T  \n*entry_p);\n+int sys_acl_get_tag_type(SMB_ACL_ENTRY_T entry_d, SMB_ACL_TAG_T  \n*type_p);\n+int sys_acl_get_permset(SMB_ACL_ENTRY_T entry_d, SMB_ACL_PERMSET_T  \n*permset_p);\n+void *sys_acl_get_qualifier(SMB_ACL_ENTRY_T entry_d);\n+int sys_acl_clear_perms(SMB_ACL_PERMSET_T permset_d);\n+int sys_acl_add_perm(SMB_ACL_PERMSET_T permset_d, SMB_ACL_PERM_T perm);\n+int sys_acl_get_perm(SMB_ACL_PERMSET_T permset_d, SMB_ACL_PERM_T perm);\n+char *sys_acl_to_text(SMB_ACL_T acl_d, ssize_t *len_p);\n+SMB_ACL_T sys_acl_init(int count);\n+int sys_acl_create_entry(SMB_ACL_T *acl_p, SMB_ACL_ENTRY_T *entry_p);\n+int sys_acl_set_tag_type(SMB_ACL_ENTRY_T entry_d, SMB_ACL_TAG_T  \ntag_type);\n+int sys_acl_set_qualifier(SMB_ACL_ENTRY_T entry_d, void *qual_p);\n+int sys_acl_set_permset(SMB_ACL_ENTRY_T entry_d, SMB_ACL_PERMSET_T  \npermset_d);\n+int sys_acl_free_text(char *text);\n+int sys_acl_free_acl(SMB_ACL_T acl_d) ;\n+int sys_acl_free_qualifier(void *qual, SMB_ACL_TAG_T tagtype);\n+int sys_acl_valid(SMB_ACL_T acl_d);\n+SMB_ACL_T sys_acl_get_file(vfs_handle_struct *handle,\n+\t\t\t   const char *path_p, SMB_ACL_TYPE_T type);\n+SMB_ACL_T sys_acl_get_fd(vfs_handle_struct *handle, files_struct  \n*fsp, int fd);\n+int sys_acl_set_file(vfs_handle_struct *handle,\n+\t\t     const char *name, SMB_ACL_TYPE_T type, SMB_ACL_T acl_d);\n+int sys_acl_set_fd(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t   int fd, SMB_ACL_T acl_d);\n+int sys_acl_delete_def_file(vfs_handle_struct *handle,\n+\t\t\t    const char *path);\n+SMB_ACL_T sys_acl_get_file(vfs_handle_struct *handle,\n+\t\t\t   const char *path_p, SMB_ACL_TYPE_T type);\n+SMB_ACL_T sys_acl_get_fd(vfs_handle_struct *handle, files_struct  \n*fsp, int fd);\n+int sys_acl_set_file(vfs_handle_struct *handle,\n+\t\t     const char *name, SMB_ACL_TYPE_T type, SMB_ACL_T acl_d);\n+int sys_acl_set_fd(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t   int fd, SMB_ACL_T acl_d);\n+int sys_acl_delete_def_file(vfs_handle_struct *handle,\n+\t\t\t    const char *path);\n+SMB_ACL_T sys_acl_get_file(vfs_handle_struct *handle,\n+\t\t\t   const char *path_p, SMB_ACL_TYPE_T type);\n+SMB_ACL_T sys_acl_get_fd(vfs_handle_struct *handle, files_struct  \n*fsp, int fd);\n+int sys_acl_set_file(vfs_handle_struct *handle,\n+\t\t     const char *name, SMB_ACL_TYPE_T type, SMB_ACL_T acl_d);\n+int sys_acl_set_fd(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t   int fd, SMB_ACL_T acl_d);\n+int sys_acl_delete_def_file(vfs_handle_struct *handle,\n+\t\t\t    const char *path);\n+SMB_ACL_T sys_acl_get_file(vfs_handle_struct *handle,\n+\t\t\t   const char *path_p, SMB_ACL_TYPE_T type);\n+SMB_ACL_T sys_acl_get_fd(vfs_handle_struct *handle, files_struct  \n*fsp, int fd);\n+int sys_acl_set_file(vfs_handle_struct *handle,\n+\t\t     const char *name, SMB_ACL_TYPE_T type, SMB_ACL_T acl_d);\n+int sys_acl_set_fd(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t   int fd, SMB_ACL_T acl_d);\n+int sys_acl_delete_def_file(vfs_handle_struct *handle,\n+\t\t\t    const char *path);\n+SMB_ACL_T sys_acl_get_file(vfs_handle_struct *handle,\n+\t\t\t   const char *path_p, SMB_ACL_TYPE_T type);\n+SMB_ACL_T sys_acl_get_fd(vfs_handle_struct *handle, files_struct  \n*fsp, int fd);\n+int sys_acl_set_file(vfs_handle_struct *handle,\n+\t\t     const char *name, SMB_ACL_TYPE_T type, SMB_ACL_T acl_d);\n+int sys_acl_set_fd(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t   int fd, SMB_ACL_T acl_d);\n+int sys_acl_delete_def_file(vfs_handle_struct *handle,\n+\t\t\t    const char *path);\n+SMB_ACL_T sys_acl_get_file(vfs_handle_struct *handle,\n+\t\t\t   const char *path_p, SMB_ACL_TYPE_T type);\n+SMB_ACL_T sys_acl_get_fd(vfs_handle_struct *handle, files_struct  \n*fsp, int fd);\n+int sys_acl_set_file(vfs_handle_struct *handle,\n+\t\t     const char *name, SMB_ACL_TYPE_T type, SMB_ACL_T acl_d);\n+int sys_acl_set_fd(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t   int fd, SMB_ACL_T acl_d);\n+int sys_acl_delete_def_file(vfs_handle_struct *handle,\n+\t\t\t    const char *path);\n+SMB_ACL_T sys_acl_get_file(vfs_handle_struct *handle,\n+\t\t\t   const char *path_p, SMB_ACL_TYPE_T type);\n+SMB_ACL_T sys_acl_get_fd(vfs_handle_struct *handle, files_struct  \n*fsp, int fd);\n+int sys_acl_set_file(vfs_handle_struct *handle,\n+\t\t     const char *name, SMB_ACL_TYPE_T type, SMB_ACL_T acl_d);\n+int sys_acl_set_fd(vfs_handle_struct *handle, files_struct *fsp,\n+\t\t   int fd, SMB_ACL_T acl_d);\n+int sys_acl_delete_def_file(vfs_handle_struct *handle,\n+\t\t\t    const char *path);\n+int no_acl_syscall_error(int err);\n+\n+/* The following definitions come from lib/sysquotas.c  */\n+\n+int sys_get_quota(const char *path, enum SMB_QUOTA_TYPE qtype,  \nunid_t id, SMB_DISK_QUOTA *dp);\n+int sys_set_quota(const char *path, enum SMB_QUOTA_TYPE qtype,  \nunid_t id, SMB_DISK_QUOTA *dp);\n+\n+/* The following definitions come from lib/sysquotas_4A.c  */\n+\n+int sys_get_vfs_quota(const char *path, const char *bdev, enum  \nSMB_QUOTA_TYPE qtype, unid_t id, SMB_DISK_QUOTA *dp);\n+int sys_set_vfs_quota(const char *path, const char *bdev, enum  \nSMB_QUOTA_TYPE qtype, unid_t id, SMB_DISK_QUOTA *dp);\n+\n+/* The following definitions come from lib/sysquotas_linux.c  */\n+\n+int sys_get_vfs_quota(const char *path, const char *bdev, enum  \nSMB_QUOTA_TYPE qtype, unid_t id, SMB_DISK_QUOTA *dp);\n+int sys_set_vfs_quota(const char *path, const char *bdev, enum  \nSMB_QUOTA_TYPE qtype, unid_t id, SMB_DISK_QUOTA *dp);\n+\n+/* The following definitions come from lib/sysquotas_xfs.c  */\n+\n+int sys_get_xfs_quota(const char *path, const char *bdev, enum  \nSMB_QUOTA_TYPE qtype, unid_t id, SMB_DISK_QUOTA *dp);\n+int sys_set_xfs_quota(const char *path, const char *bdev, enum  \nSMB_QUOTA_TYPE qtype, unid_t id, SMB_DISK_QUOTA *dp);\n+\n+/* The following definitions come from lib/system.c  */\n+\n+void *sys_memalign( size_t align, size_t size );\n+int sys_usleep(long usecs);\n+ssize_t sys_read(int fd, void *buf, size_t count);\n+ssize_t sys_write(int fd, const void *buf, size_t count);\n+ssize_t sys_pread(int fd, void *buf, size_t count, SMB_OFF_T off);\n+ssize_t sys_pwrite(int fd, const void *buf, size_t count, SMB_OFF_T  \noff);\n+ssize_t sys_send(int s, const void *msg, size_t len, int flags);\n+ssize_t sys_sendto(int s,  const void *msg, size_t len, int flags,  \nconst struct sockaddr *to, socklen_t tolen);\n+ssize_t sys_recv(int fd, void *buf, size_t count, int flags);\n+ssize_t sys_recvfrom(int s, void *buf, size_t len, int flags, struct  \nsockaddr *from, socklen_t *fromlen);\n+int sys_fcntl_ptr(int fd, int cmd, void *arg);\n+int sys_fcntl_long(int fd, int cmd, long arg);\n+int sys_stat(const char *fname,SMB_STRUCT_STAT *sbuf);\n+int sys_fstat(int fd,SMB_STRUCT_STAT *sbuf);\n+int sys_lstat(const char *fname,SMB_STRUCT_STAT *sbuf);\n+int sys_ftruncate(int fd, SMB_OFF_T offset);\n+SMB_OFF_T sys_lseek(int fd, SMB_OFF_T offset, int whence);\n+int sys_fseek(FILE *fp, SMB_OFF_T offset, int whence);\n+SMB_OFF_T sys_ftell(FILE *fp);\n+int sys_creat(const char *path, mode_t mode);\n+int sys_open(const char *path, int oflag, mode_t mode);\n+FILE *sys_fopen(const char *path, const char *type);\n+void kernel_flock(int fd, uint32 share_mode);\n+SMB_STRUCT_DIR *sys_opendir(const char *name);\n+SMB_STRUCT_DIRENT *sys_readdir(SMB_STRUCT_DIR *dirp);\n+void sys_seekdir(SMB_STRUCT_DIR *dirp, long offset);\n+long sys_telldir(SMB_STRUCT_DIR *dirp);\n+void sys_rewinddir(SMB_STRUCT_DIR *dirp);\n+int sys_closedir(SMB_STRUCT_DIR *dirp);\n+int sys_mknod(const char *path, mode_t mode, SMB_DEV_T dev);\n+char *sys_realpath(const char *path, char *resolved_path);\n+int sys_waitpid(pid_t pid,int *status,int options);\n+char *sys_getwd(char *s);\n+int sys_symlink(const char *oldpath, const char *newpath);\n+int sys_readlink(const char *path, char *buf, size_t bufsiz);\n+int sys_link(const char *oldpath, const char *newpath);\n+int sys_chown(const char *fname,uid_t uid,gid_t gid);\n+int sys_lchown(const char *fname,uid_t uid,gid_t gid);\n+int sys_chroot(const char *dname);\n+struct hostent *sys_gethostbyname(const char *name);\n+void set_effective_capability(enum smbd_capability capability);\n+void drop_effective_capability(enum smbd_capability capability);\n+long sys_random(void);\n+void sys_srandom(unsigned int seed);\n+int groups_max(void);\n+int sys_getgroups(int setlen, gid_t *gidset);\n+int sys_setgroups(int setlen, gid_t *gidset);\n+void sys_setpwent(void);\n+struct passwd *sys_getpwent(void);\n+void sys_endpwent(void);\n+struct passwd *sys_getpwnam(const char *name);\n+struct passwd *sys_getpwuid(uid_t uid);\n+void faked_create_user(const char *name);\n+struct passwd *sys_getpwnam(const char *name);\n+struct passwd *sys_getpwuid(uid_t uid);\n+struct group *sys_getgrnam(const char *name);\n+struct group *sys_getgrgid(gid_t gid);\n+int wsys_stat(const smb_ucs2_t *wfname,SMB_STRUCT_STAT *sbuf);\n+int wsys_lstat(const smb_ucs2_t *wfname,SMB_STRUCT_STAT *sbuf);\n+int wsys_creat(const smb_ucs2_t *wfname, mode_t mode);\n+int wsys_open(const smb_ucs2_t *wfname, int oflag, mode_t mode);\n+FILE *wsys_fopen(const smb_ucs2_t *wfname, const char *type);\n+SMB_STRUCT_DIR *wsys_opendir(const smb_ucs2_t *wfname);\n+SMB_STRUCT_WDIRENT *wsys_readdir(SMB_STRUCT_DIR *dirp);\n+smb_ucs2_t *wsys_getwd(smb_ucs2_t *s);\n+int wsys_chown(const smb_ucs2_t *wfname, uid_t uid, gid_t gid);\n+int wsys_chroot(const smb_ucs2_t *wfname);\n+pid_t sys_fork(void);\n+pid_t sys_getpid(void);\n+int sys_popen(const char *command);\n+int sys_pclose(int fd);\n+void *sys_dlopen(const char *name, int flags);\n+void *sys_dlsym(void *handle, const char *symbol);\n+int sys_dlclose (void *handle);\n+const char *sys_dlerror(void);\n+int sys_dup2(int oldfd, int newfd) ;\n+ssize_t sys_getxattr (const char *path, const char *name, void  \n*value, size_t size);\n+ssize_t sys_lgetxattr (const char *path, const char *name, void  \n*value, size_t size);\n+ssize_t sys_fgetxattr (int filedes, const char *name, void *value,  \nsize_t size);\n+ssize_t sys_listxattr (const char *path, char *list, size_t size);\n+ssize_t sys_llistxattr (const char *path, char *list, size_t size);\n+ssize_t sys_flistxattr (int filedes, char *list, size_t size);\n+int sys_removexattr (const char *path, const char *name);\n+int sys_lremovexattr (const char *path, const char *name);\n+int sys_fremovexattr (int filedes, const char *name);\n+int sys_setxattr (const char *path, const char *name, const void  \n*value, size_t size, int flags);\n+int sys_lsetxattr (const char *path, const char *name, const void  \n*value, size_t size, int flags);\n+int sys_fsetxattr (int filedes, const char *name, const void *value,  \nsize_t size, int flags);\n+uint32 unix_dev_major(SMB_DEV_T dev);\n+uint32 unix_dev_minor(SMB_DEV_T dev);\n+int sys_aio_read(SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_write(SMB_STRUCT_AIOCB *aiocb);\n+ssize_t sys_aio_return(SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_cancel(int fd, SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_error(const SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_fsync(int op, SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_suspend(const SMB_STRUCT_AIOCB * const cblist[], int n,  \nconst struct timespec *timeout);\n+int sys_aio_read(SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_write(SMB_STRUCT_AIOCB *aiocb);\n+ssize_t sys_aio_return(SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_cancel(int fd, SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_error(const SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_fsync(int op, SMB_STRUCT_AIOCB *aiocb);\n+int sys_aio_suspend(const SMB_STRUCT_AIOCB * const cblist[], int n,  \nconst struct timespec *timeout);\n+int sys_getpeereid( int s, uid_t *uid);\n+\n+/* The following definitions come from lib/system_smbd.c  */\n+\n+BOOL getgroups_unix_user(TALLOC_CTX *mem_ctx, const char *user,\n+\t\t\t gid_t primary_gid,\n+\t\t\t gid_t **ret_groups, size_t *p_ngroups);\n+\n+/* The following definitions come from lib/tallocmsg.c  */\n+\n+void register_msg_pool_usage(struct messaging_context *msg_ctx);\n+\n+/* The following definitions come from lib/time.c  */\n+\n+time_t get_time_t_max(void);\n+void GetTimeOfDay(struct timeval *tval);\n+time_t nt_time_to_unix(NTTIME nt);\n+void unix_to_nt_time(NTTIME *nt, time_t t);\n+BOOL null_time(time_t t);\n+BOOL null_nttime(NTTIME t);\n+BOOL null_timespec(struct timespec ts);\n+void push_dos_date(uint8_t *buf, int offset, time_t unixdate, int  \nzone_offset);\n+void push_dos_date2(uint8_t *buf,int offset,time_t unixdate, int  \nzone_offset);\n+void push_dos_date3(uint8_t *buf,int offset,time_t unixdate, int  \nzone_offset);\n+time_t pull_dos_date(const uint8_t *date_ptr, int zone_offset);\n+time_t pull_dos_date2(const uint8_t *date_ptr, int zone_offset);\n+time_t pull_dos_date3(const uint8_t *date_ptr, int zone_offset);\n+char *http_timestring(time_t t);\n+char *timestring(TALLOC_CTX *mem_ctx, time_t t);\n+const char *nt_time_string(TALLOC_CTX *mem_ctx, NTTIME nt);\n+NTTIME nttime_from_string(const char *s);\n+int64_t usec_time_diff(struct timeval *tv1, struct timeval *tv2);\n+struct timeval timeval_zero(void);\n+BOOL timeval_is_zero(const struct timeval *tv);\n+struct timeval timeval_current(void);\n+struct timeval timeval_set(uint32_t secs, uint32_t usecs);\n+struct timeval timeval_add(const struct timeval *tv,\n+\t\t\t   uint32_t secs, uint32_t usecs);\n+struct timeval timeval_sum(const struct timeval *tv1,\n+\t\t\t   const struct timeval *tv2);\n+struct timeval timeval_current_ofs(uint32_t secs, uint32_t usecs);\n+int timeval_compare(const struct timeval *tv1, const struct timeval  \n*tv2);\n+BOOL timeval_expired(const struct timeval *tv);\n+double timeval_elapsed2(const struct timeval *tv1, const struct  \ntimeval *tv2);\n+double timeval_elapsed(const struct timeval *tv);\n+struct timeval timeval_min(const struct timeval *tv1,\n+\t\t\t   const struct timeval *tv2);\n+struct timeval timeval_max(const struct timeval *tv1,\n+\t\t\t   const struct timeval *tv2);\n+struct timeval timeval_until(const struct timeval *tv1,\n+\t\t\t     const struct timeval *tv2);\n+NTTIME timeval_to_nttime(const struct timeval *tv);\n+uint32 convert_time_t_to_uint32(time_t t);\n+time_t convert_uint32_to_time_t(uint32 u);\n+int get_time_zone(time_t t);\n+BOOL nt_time_is_zero(const NTTIME *nt);\n+time_t generalized_to_unix_time(const char *str);\n+int get_server_zone_offset(void);\n+int set_server_zone_offset(time_t t);\n+char *current_timestring(BOOL hires);\n+void srv_put_dos_date(char *buf,int offset,time_t unixdate);\n+void srv_put_dos_date2(char *buf,int offset, time_t unixdate);\n+void srv_put_dos_date3(char *buf,int offset,time_t unixdate);\n+void put_long_date_timespec(char *p, struct timespec ts);\n+void put_long_date(char *p, time_t t);\n+time_t get_create_time(const SMB_STRUCT_STAT *st,BOOL fake_dirs);\n+struct timespec get_create_timespec(const SMB_STRUCT_STAT *st,BOOL  \nfake_dirs);\n+struct timespec get_atimespec(const SMB_STRUCT_STAT *pst);\n+void set_atimespec(SMB_STRUCT_STAT *pst, struct timespec ts);\n+struct timespec get_mtimespec(const SMB_STRUCT_STAT *pst);\n+void set_mtimespec(SMB_STRUCT_STAT *pst, struct timespec ts);\n+struct timespec get_ctimespec(const SMB_STRUCT_STAT *pst);\n+void set_ctimespec(SMB_STRUCT_STAT *pst, struct timespec ts);\n+void dos_filetime_timespec(struct timespec *tsp);\n+time_t srv_make_unix_date(const void *date_ptr);\n+time_t srv_make_unix_date2(const void *date_ptr);\n+time_t srv_make_unix_date3(const void *date_ptr);\n+time_t convert_timespec_to_time_t(struct timespec ts);\n+struct timespec convert_time_t_to_timespec(time_t t);\n+struct timespec convert_timeval_to_timespec(const struct timeval tv);\n+struct timeval convert_timespec_to_timeval(const struct timespec ts);\n+struct timespec timespec_current(void);\n+struct timespec timespec_min(const struct timespec *ts1,\n+\t\t\t   const struct timespec *ts2);\n+int timespec_compare(const struct timespec *ts1, const struct  \ntimespec *ts2);\n+struct timespec interpret_long_date(const char *p);\n+void cli_put_dos_date(struct cli_state *cli, char *buf, int offset,  \ntime_t unixdate);\n+void cli_put_dos_date2(struct cli_state *cli, char *buf, int offset,  \ntime_t unixdate);\n+void cli_put_dos_date3(struct cli_state *cli, char *buf, int offset,  \ntime_t unixdate);\n+time_t cli_make_unix_date(struct cli_state *cli, void *date_ptr);\n+time_t cli_make_unix_date2(struct cli_state *cli, void *date_ptr);\n+time_t cli_make_unix_date3(struct cli_state *cli, void *date_ptr);\n+struct timespec nt_time_to_unix_timespec(NTTIME *nt);\n+BOOL nt_time_equals(const NTTIME *nt1, const NTTIME *nt2);\n+void TimeInit(void);\n+void get_process_uptime(struct timeval *ret_time);\n+time_t nt_time_to_unix_abs(const NTTIME *nt);\n+void unix_timespec_to_nt_time(NTTIME *nt, struct timespec ts);\n+void unix_to_nt_time_abs(NTTIME *nt, time_t t);\n+BOOL null_mtime(time_t mtime);\n+const char *time_to_asc(const time_t t);\n+const char *display_time(NTTIME nttime);\n+BOOL nt_time_is_set(const NTTIME *nt);\n+\n+/* The following definitions come from lib/ufc.c  */\n+\n+char *ufc_crypt(const char *key,const char *salt);\n+\n+/* The following definitions come from lib/username.c  */\n+\n+char *get_user_home_dir(const char *user);\n+struct passwd *Get_Pwnam_alloc(TALLOC_CTX *mem_ctx, const char *user);\n+struct passwd *Get_Pwnam(const char *user);\n+\n+/* The following definitions come from lib/util.c  */\n+\n+BOOL set_global_myname(const char *myname);\n+const char *global_myname(void);\n+BOOL set_global_myworkgroup(const char *myworkgroup);\n+const char *lp_workgroup(void);\n+BOOL set_global_scope(const char *scope);\n+const char *global_scope(void);\n+void gfree_names(void);\n+void gfree_all( void );\n+const char *my_netbios_names(int i);\n+BOOL set_netbios_aliases(const char **str_array);\n+BOOL init_names(void);\n+const char *tmpdir(void);\n+BOOL add_gid_to_array_unique(TALLOC_CTX *mem_ctx, gid_t gid,\n+\t\t\t     gid_t **gids, size_t *num_gids);\n+const char *get_numlist(const char *p, uint32 **num, int *count);\n+BOOL file_exist(const char *fname,SMB_STRUCT_STAT *sbuf);\n+time_t file_modtime(const char *fname);\n+BOOL directory_exist(char *dname,SMB_STRUCT_STAT *st);\n+SMB_OFF_T get_file_size(char *file_name);\n+char *attrib_string(uint16 mode);\n+void show_msg(char *buf);\n+void smb_set_enclen(char *buf,int len,uint16 enc_ctx_num);\n+void smb_setlen(const char *frombuf, char *buf, int len);\n+int set_message(const char *frombuf, char *buf,int num_words,int  \nnum_bytes,BOOL zero);\n+int set_message_bcc(const char *frombuf, char *buf,int num_bytes);\n+int set_message_end(const char *frombuf, void *outbuf,void *end_ptr);\n+void dos_clean_name(char *s);\n+void unix_clean_name(char *s);\n+void clean_name(char *s);\n+void close_low_fds(BOOL stderr_too);\n+ssize_t write_data_at_offset(int fd, const char *buffer, size_t N,  \nSMB_OFF_T pos);\n+int set_blocking(int fd, BOOL set);\n+ssize_t transfer_file_internal(int infd, int outfd, size_t n,  \nssize_t (*read_fn)(int, void *, size_t),\n+\t\t\t\t\t\tssize_t (*write_fn)(int, const void *, size_t));\n+SMB_OFF_T transfer_file(int infd,int outfd,SMB_OFF_T n);\n+void smb_msleep(unsigned int t);\n+void become_daemon(BOOL Fork, BOOL no_process_group);\n+BOOL yesno(char *p);\n+void *malloc_(size_t size);\n+void *malloc_array(size_t el_size, unsigned int count);\n+void *memalign_array(size_t el_size, size_t align, unsigned int count);\n+void *calloc_array(size_t size, size_t nmemb);\n+void *Realloc(void *p, size_t size, BOOL free_old_on_error);\n+void *realloc_array(void *p, size_t el_size, unsigned int count,  \nBOOL free_old_on_error);\n+void add_to_large_array(TALLOC_CTX *mem_ctx, size_t element_size,\n+\t\t\tvoid *element, void *_array, uint32 *num_elements,\n+\t\t\tssize_t *array_size);\n+void safe_free(void *p);\n+BOOL get_myname(char *my_name);\n+BOOL get_mydnsfullname(fstring my_dnsname);\n+BOOL get_mydnsdomname(fstring my_domname);\n+int interpret_protocol(const char *str,int def);\n+BOOL is_ipaddress(const char *str);\n+uint32 interpret_addr(const char *str);\n+struct in_addr *interpret_addr2(const char *str);\n+BOOL is_zero_ip(struct in_addr ip);\n+void zero_ip(struct in_addr *ip);\n+char *automount_lookup(const char *user_name);\n+char *automount_lookup(const char *user_name);\n+BOOL same_net(struct in_addr ip1,struct in_addr ip2,struct in_addr  \nmask);\n+BOOL process_exists(const struct server_id pid);\n+BOOL process_exists_by_pid(pid_t pid);\n+const char *uidtoname(uid_t uid);\n+char *gidtoname(gid_t gid);\n+uid_t nametouid(const char *name);\n+gid_t nametogid(const char *name);\n+void smb_panic(const char *const why);\n+void log_stack_trace(void);\n+const char *readdirname(SMB_STRUCT_DIR *p);\n+BOOL is_in_path(const char *name, name_compare_entry *namelist, BOOL  \ncase_sensitive);\n+void set_namearray(name_compare_entry **ppname_array, char *namelist);\n+void free_namearray(name_compare_entry *name_array);\n+BOOL fcntl_lock(int fd, int op, SMB_OFF_T offset, SMB_OFF_T count,  \nint type);\n+BOOL fcntl_getlock(int fd, SMB_OFF_T *poffset, SMB_OFF_T *pcount,  \nint *ptype, pid_t *ppid);\n+BOOL is_myname(const char *s);\n+BOOL is_myname_or_ipaddr(const char *s);\n+BOOL is_myworkgroup(const char *s);\n+void ra_lanman_string( const char *native_lanman );\n+void set_remote_arch(enum remote_arch_types type);\n+enum remote_arch_types get_remote_arch(void);\n+void print_asc(int level, const unsigned char *buf,int len);\n+void dump_data(int level, const unsigned char *buf,int len);\n+void dump_data_pw(const char *msg, const uchar * data, size_t len);\n+char *tab_depth(int depth);\n+int str_checksum(const char *s);\n+void zero_free(void *p, size_t size);\n+int set_maxfiles(int requested_max);\n+int smb_mkstemp(char *name_template);\n+void *smb_xmalloc_array(size_t size, unsigned int count);\n+void *smb_xmemdup(const void *p, size_t size);\n+char *smb_xstrdup(const char *s);\n+char *smb_xstrndup(const char *s, size_t n);\n+void *memdup(const void *p, size_t size);\n+char *myhostname(void);\n+char *lock_path(const char *name);\n+char *pid_path(const char *name);\n+char *lib_path(const char *name);\n+const char *shlib_ext(void);\n+char *parent_dirname(const char *path);\n+BOOL parent_dirname_talloc(TALLOC_CTX *mem_ctx, const char *dir,\n+\t\t\t   char **parent, const char **name);\n+BOOL ms_has_wild(const char *s);\n+BOOL ms_has_wild_w(const smb_ucs2_t *s);\n+BOOL mask_match(const char *string, char *pattern, BOOL  \nis_case_sensitive);\n+BOOL mask_match_search(const char *string, char *pattern, BOOL  \nis_case_sensitive);\n+BOOL mask_match_list(const char *string, char **list, int listLen,  \nBOOL is_case_sensitive);\n+BOOL unix_wild_match(const char *pattern, const char *string);\n+BOOL name_to_fqdn(fstring fqdn, const char *name);\n+void *talloc_check_name_abort(const void *ptr, const char *name);\n+int _Insure_trap_error(int a1, int a2, int a3, int a4, int a5, int a6);\n+uint32 map_share_mode_to_deny_mode(uint32 share_access, uint32  \nprivate_options);\n+pid_t procid_to_pid(const struct server_id *proc);\n+struct server_id pid_to_procid(pid_t pid);\n+struct server_id procid_self(void);\n+struct server_id server_id_self(void);\n+BOOL procid_equal(const struct server_id *p1, const struct server_id  \n*p2);\n+BOOL cluster_id_equal(const struct server_id *id1,\n+\t\t      const struct server_id *id2);\n+BOOL procid_is_me(const struct server_id *pid);\n+struct server_id interpret_pid(const char *pid_string);\n+char *procid_str_static(const struct server_id *pid);\n+char *procid_str(TALLOC_CTX *mem_ctx, const struct server_id *pid);\n+BOOL procid_valid(const struct server_id *pid);\n+BOOL procid_is_local(const struct server_id *pid);\n+int this_is_smp(void);\n+BOOL is_offset_safe(const char *buf_base, size_t buf_len, char *ptr,  \nsize_t off);\n+char *get_safe_ptr(const char *buf_base, size_t buf_len, char *ptr,  \nsize_t off);\n+char *get_safe_str_ptr(const char *buf_base, size_t buf_len, char  \n*ptr, size_t off);\n+int get_safe_SVAL(const char *buf_base, size_t buf_len, char *ptr,  \nsize_t off, int failval);\n+int get_safe_IVAL(const char *buf_base, size_t buf_len, char *ptr,  \nsize_t off, int failval);\n+void *_talloc_zero_zeronull(const void *ctx, size_t size, const char  \n*name);\n+void *_talloc_memdup_zeronull(const void *t, const void *p, size_t  \nsize, const char *name);\n+void *_talloc_array_zeronull(const void *ctx, size_t el_size,  \nunsigned count, const char *name);\n+void *_talloc_zero_array_zeronull(const void *ctx, size_t el_size,  \nunsigned count, const char *name);\n+void *talloc_zeronull(const void *context, size_t size, const char  \n*name);\n+\n+/* The following definitions come from lib/util_file.c  */\n+\n+char *fgets_slash(char *s2,int maxlen,XFILE *f);\n+char *file_pload(char *syscmd, size_t *size);\n+char *fd_load(int fd, size_t *psize, size_t maxsize);\n+char *file_load(const char *fname, size_t *size, size_t maxsize);\n+BOOL unmap_file(void* start, size_t size);\n+void *map_file(char *fname, size_t size);\n+char **file_lines_load(const char *fname, int *numlines, size_t  \nmaxsize);\n+char **fd_lines_load(int fd, int *numlines, size_t maxsize);\n+char **file_lines_pload(char *syscmd, int *numlines);\n+void file_lines_free(char **lines);\n+void file_lines_slashcont(char **lines);\n+BOOL file_save(const char *fname, void *packet, size_t length);\n+\n+/* The following definitions come from lib/util_nscd.c  */\n+\n+void smb_nscd_flush_user_cache(void);\n+void smb_nscd_flush_group_cache(void);\n+\n+/* The following definitions come from lib/util_pw.c  */\n+\n+struct passwd *tcopy_passwd(TALLOC_CTX *mem_ctx, const struct passwd  \n*from) ;\n+void flush_pwnam_cache(void);\n+struct passwd *getpwnam_alloc(TALLOC_CTX *mem_ctx, const char *name);\n+struct passwd *getpwuid_alloc(TALLOC_CTX *mem_ctx, uid_t uid) ;\n+\n+/* The following definitions come from lib/util_reg.c  */\n+\n+const char *reg_type_lookup(enum winreg_Type type);\n+WERROR reg_pull_multi_sz(TALLOC_CTX *mem_ctx, const void *buf,  \nsize_t len,\n+\t\t\t uint32 *num_values, char ***values);\n+WERROR registry_pull_value(TALLOC_CTX *mem_ctx,\n+\t\t\t   struct registry_value **pvalue,\n+\t\t\t   enum winreg_Type type, uint8 *data,\n+\t\t\t   uint32 size, uint32 length);\n+WERROR registry_push_value(TALLOC_CTX *mem_ctx,\n+\t\t\t   const struct registry_value *value,\n+\t\t\t   DATA_BLOB *presult);\n+\n+/* The following definitions come from lib/util_seaccess.c  */\n+\n+void se_map_generic(uint32 *access_mask, struct generic_mapping  \n*mapping);\n+void se_map_standard(uint32 *access_mask, struct standard_mapping  \n*mapping);\n+BOOL se_access_check(const SEC_DESC *sd, const NT_USER_TOKEN *token,\n+\t\t     uint32 acc_desired, uint32 *acc_granted,\n+\t\t     NTSTATUS *status);\n+NTSTATUS samr_make_sam_obj_sd(TALLOC_CTX *ctx, SEC_DESC **psd,  \nsize_t *sd_size);\n+\n+/* The following definitions come from lib/util_sec.c  */\n+\n+void sec_init(void);\n+uid_t sec_initial_uid(void);\n+gid_t sec_initial_gid(void);\n+BOOL non_root_mode(void);\n+void gain_root_privilege(void);\n+void gain_root_group_privilege(void);\n+void set_effective_uid(uid_t uid);\n+void set_effective_gid(gid_t gid);\n+void save_re_uid(void);\n+void restore_re_uid_fromroot(void);\n+void restore_re_uid(void);\n+void save_re_gid(void);\n+void restore_re_gid(void);\n+int set_re_uid(void);\n+void become_user_permanently(uid_t uid, gid_t gid);\n+BOOL is_setuid_root(void) ;\n+\n+/* The following definitions come from lib/util_sid.c  */\n+\n+const char *sid_type_lookup(uint32 sid_type) ;\n+NT_USER_TOKEN *get_system_token(void) ;\n+const char *get_global_sam_name(void) ;\n+char *sid_to_string(fstring sidstr_out, const DOM_SID *sid);\n+const char *sid_string_static(const DOM_SID *sid);\n+BOOL string_to_sid(DOM_SID *sidout, const char *sidstr);\n+DOM_SID *string_sid_talloc(TALLOC_CTX *mem_ctx, const char *sidstr);\n+BOOL sid_append_rid(DOM_SID *sid, uint32 rid);\n+BOOL sid_compose(DOM_SID *dst, const DOM_SID *domain_sid, uint32 rid);\n+BOOL sid_split_rid(DOM_SID *sid, uint32 *rid);\n+BOOL sid_peek_rid(const DOM_SID *sid, uint32 *rid);\n+BOOL sid_peek_check_rid(const DOM_SID *exp_dom_sid, const DOM_SID  \n*sid, uint32 *rid);\n+void sid_copy(DOM_SID *dst, const DOM_SID *src);\n+BOOL sid_linearize(char *outbuf, size_t len, const DOM_SID *sid);\n+BOOL sid_parse(const char *inbuf, size_t len, DOM_SID *sid);\n+int sid_compare(const DOM_SID *sid1, const DOM_SID *sid2);\n+int sid_compare_domain(const DOM_SID *sid1, const DOM_SID *sid2);\n+BOOL sid_equal(const DOM_SID *sid1, const DOM_SID *sid2);\n+size_t sid_size(const DOM_SID *sid);\n+BOOL non_mappable_sid(DOM_SID *sid);\n+char *sid_binstring(const DOM_SID *sid);\n+char *sid_binstring_hex(const DOM_SID *sid);\n+DOM_SID *sid_dup_talloc(TALLOC_CTX *ctx, const DOM_SID *src);\n+BOOL add_sid_to_array(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\t      DOM_SID **sids, size_t *num);\n+BOOL add_sid_to_array_unique(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\t\t     DOM_SID **sids, size_t *num_sids);\n+void del_sid_from_array(const DOM_SID *sid, DOM_SID **sids, size_t  \n*num);\n+BOOL add_rid_to_array_unique(TALLOC_CTX *mem_ctx,\n+\t\t\t\t    uint32 rid, uint32 **pp_rids, size_t *p_num);\n+BOOL is_null_sid(const DOM_SID *sid);\n+\n+/* The following definitions come from lib/util_sock.c  */\n+\n+void client_setfd(int fd);\n+char *client_name(void);\n+char *client_addr(void);\n+char *client_socket_addr(void);\n+int client_socket_port(void);\n+struct in_addr *client_inaddr(struct sockaddr *sa);\n+BOOL is_a_socket(int fd);\n+void set_socket_options(int fd, const char *options);\n+ssize_t read_udp_socket(int fd,char *buf,size_t len);\n+ssize_t read_data_until(int fd,char *buffer,size_t N, const struct  \ntimeval *endtime);\n+ssize_t read_socket_with_timeout(int fd,char *buf,size_t  \nmincnt,size_t maxcnt,unsigned int time_out);\n+ssize_t read_data(int fd,char *buffer,size_t N);\n+ssize_t write_data(int fd, const char *buffer, size_t N);\n+BOOL send_keepalive(int client);\n+ssize_t read_smb_length(int fd, char *inbuf, unsigned int timeout);\n+ssize_t receive_smb_raw(int fd, char *buffer, unsigned int timeout,  \nsize_t maxlen);\n+BOOL receive_smb(int fd, char *buffer, unsigned int timeout);\n+BOOL send_smb(int fd, char *buffer);\n+int open_socket_in( int type, int port, int dlevel, uint32  \nsocket_addr, BOOL rebind );\n+int open_socket_out(int type, struct in_addr *addr, int port ,int  \ntimeout);\n+BOOL open_any_socket_out(struct sockaddr_in *addrs, int num_addrs,\n+\t\t\t int timeout, int *fd_index, int *fd);\n+int open_udp_socket(const char *host, int port);\n+char *get_peer_name(int fd, BOOL force_lookup);\n+char *get_peer_addr(int fd);\n+int create_pipe_sock(const char *socket_dir,\n+\t\t     const char *socket_name,\n+\t\t     mode_t dir_perms);\n+\n+/* The following definitions come from lib/util_str.c  */\n+\n+BOOL next_token(const char **ptr, char *buff, const char *sep,  \nsize_t bufsize);\n+BOOL next_token_no_ltrim(const char **ptr,\n+                         char *buff,\n+                         const char *sep,\n+                         size_t bufsize);\n+BOOL next_token_nr(const char **ptr,char *buff, const char *sep,  \nsize_t bufsize);\n+void set_first_token(char *ptr);\n+char **toktocliplist(int *ctok, const char *sep);\n+int StrCaseCmp(const char *s, const char *t);\n+int StrnCaseCmp(const char *s, const char *t, size_t n);\n+BOOL strequal(const char *s1, const char *s2);\n+BOOL strnequal(const char *s1,const char *s2,size_t n);\n+BOOL strcsequal(const char *s1,const char *s2);\n+int strwicmp(const char *psz1, const char *psz2);\n+char *strupper_static(const char *s);\n+void strnorm(char *s, int case_default);\n+BOOL strisnormal(const char *s, int case_default);\n+void string_replace( pstring s, char oldc, char newc );\n+char *push_skip_string(char *buf);\n+char *skip_string(const char *base, size_t len, char *buf);\n+size_t str_charnum(const char *s);\n+size_t str_ascii_charnum(const char *s);\n+BOOL trim_char(char *s,char cfront,char cback);\n+BOOL trim_string(char *s,const char *front,const char *back);\n+BOOL strhasupper(const char *s);\n+BOOL strhaslower(const char *s);\n+size_t count_chars(const char *s,char c);\n+char *safe_strcpy_fn(const char *fn, int line, char *dest,const char  \n*src, size_t maxlength);\n+char *safe_strcat_fn(const char *fn, int line, char *dest, const  \nchar *src, size_t maxlength);\n+char *alpha_strcpy_fn(const char *fn, int line, char *dest, const  \nchar *src, const char *other_safe_chars, size_t maxlength);\n+char *StrnCpy_fn(const char *fn, int line,char *dest,const char  \n*src,size_t n);\n+size_t strhex_to_str(char *p, size_t len, const char *strhex);\n+DATA_BLOB strhex_to_data_blob(TALLOC_CTX *mem_ctx, const char  \n*strhex) ;\n+char *hex_encode(TALLOC_CTX *mem_ctx, const unsigned char *buff_in,  \nsize_t len);\n+BOOL in_list(const char *s, const char *list, BOOL casesensitive);\n+void string_free(char **s);\n+BOOL string_set(char **dest,const char *src);\n+void string_sub2(char *s,const char *pattern, const char *insert,  \nsize_t len,\n+\t\t BOOL remove_unsafe_characters, BOOL replace_once, BOOL  \nallow_trailing_dollar);\n+void string_sub_once(char *s, const char *pattern, const char  \n*insert, size_t len);\n+void string_sub(char *s,const char *pattern, const char *insert,  \nsize_t len);\n+void fstring_sub(char *s,const char *pattern,const char *insert);\n+void pstring_sub(char *s,const char *pattern,const char *insert);\n+char *realloc_string_sub(char *string, const char *pattern,\n+\t\t\t const char *insert);\n+char *talloc_string_sub(TALLOC_CTX *mem_ctx, const char *src,\n+\t\t\tconst char *pattern, const char *insert);\n+void all_string_sub(char *s,const char *pattern,const char *insert,  \nsize_t len);\n+smb_ucs2_t *all_string_sub_wa(smb_ucs2_t *s, const char *pattern,\n+\t\t\t\t\t     const char *insert);\n+const char *octal_string(int i);\n+char *string_truncate(char *s, unsigned int length);\n+char *strchr_m(const char *src, char c);\n+char *strrchr_m(const char *s, char c);\n+char *strnrchr_m(const char *s, char c, unsigned int n);\n+char *strstr_m(const char *src, const char *findstr);\n+void strlower_m(char *s);\n+void strupper_m(char *s);\n+size_t strlen_m(const char *s);\n+size_t strlen_m_term(const char *s);\n+size_t strlen_m_term_null(const char *s);\n+char *binary_string_rfc2254(char *buf, int len);\n+char *binary_string(char *buf, int len);\n+int fstr_sprintf(fstring s, const char *fmt, ...);\n+char **str_list_make_talloc(TALLOC_CTX *mem_ctx, const char *string,  \nconst char *sep);\n+char **str_list_make(const char *string, const char *sep);\n+BOOL str_list_copy(char ***dest, const char **src);\n+BOOL str_list_compare(char **list1, char **list2);\n+void str_list_free_talloc(TALLOC_CTX *mem_ctx, char ***list);\n+void str_list_free(char ***list);\n+int str_list_count( const char **list );\n+BOOL str_list_sub_basic( char **list, const char *smb_name,\n+\t\t\t const char *domain_name );\n+BOOL str_list_substitute(char **list, const char *pattern, const  \nchar *insert);\n+char* ipstr_list_add(char** ipstr_list, const struct ip_service  \n*service);\n+char* ipstr_list_make(char** ipstr_list, const struct ip_service*  \nip_list, int ip_count);\n+int ipstr_list_parse(const char* ipstr_list, struct ip_service  \n**ip_list);\n+void ipstr_list_free(char* ipstr_list);\n+void rfc1738_unescape(char *buf);\n+DATA_BLOB base64_decode_data_blob(const char *s);\n+void base64_decode_inplace(char *s);\n+char * base64_encode_data_blob(DATA_BLOB data);\n+SMB_BIG_UINT STR_TO_SMB_BIG_UINT(const char *nptr, const char  \n**entptr);\n+SMB_OFF_T conv_str_size(const char * str);\n+void string_append(char **left, const char *right);\n+BOOL add_string_to_array(TALLOC_CTX *mem_ctx,\n+\t\t\t const char *str, const char ***strings,\n+\t\t\t int *num);\n+void sprintf_append(TALLOC_CTX *mem_ctx, char **string, ssize_t *len,\n+\t\t    size_t *bufsize, const char *fmt, ...);\n+char *sstring_sub(const char *src, char front, char back);\n+BOOL validate_net_name( const char *name, const char *invalid_chars,  \nint max_len );\n+size_t ascii_len_n(const char *src, size_t n);\n+size_t utf16_len(const void *buf);\n+size_t utf16_len_n(const void *src, size_t n);\n+char *escape_shell_string(const char *src);\n+\n+/* The following definitions come from lib/util_tdb.c  */\n+\n+TDB_DATA make_tdb_data(const uint8 *dptr, size_t dsize);\n+TDB_DATA string_tdb_data(const char *string);\n+TDB_DATA string_term_tdb_data(const char *string);\n+int tdb_chainlock_with_timeout( TDB_CONTEXT *tdb, TDB_DATA key,  \nunsigned int timeout);\n+int tdb_lock_bystring(TDB_CONTEXT *tdb, const char *keyval);\n+int tdb_lock_bystring_with_timeout(TDB_CONTEXT *tdb, const char  \n*keyval,\n+\t\t\t\t   int timeout);\n+void tdb_unlock_bystring(TDB_CONTEXT *tdb, const char *keyval);\n+int tdb_read_lock_bystring_with_timeout(TDB_CONTEXT *tdb, const char  \n*keyval, unsigned int timeout);\n+void tdb_read_unlock_bystring(TDB_CONTEXT *tdb, const char *keyval);\n+int32 tdb_fetch_int32_byblob(TDB_CONTEXT *tdb, TDB_DATA key);\n+int32 tdb_fetch_int32(TDB_CONTEXT *tdb, const char *keystr);\n+int tdb_store_int32_byblob(TDB_CONTEXT *tdb, TDB_DATA key, int32 v);\n+int tdb_store_int32(TDB_CONTEXT *tdb, const char *keystr, int32 v);\n+BOOL tdb_fetch_uint32_byblob(TDB_CONTEXT *tdb, TDB_DATA key, uint32  \n*value);\n+BOOL tdb_fetch_uint32(TDB_CONTEXT *tdb, const char *keystr, uint32  \n*value);\n+BOOL tdb_store_uint32_byblob(TDB_CONTEXT *tdb, TDB_DATA key, uint32  \nvalue);\n+BOOL tdb_store_uint32(TDB_CONTEXT *tdb, const char *keystr, uint32  \nvalue);\n+int tdb_store_bystring(TDB_CONTEXT *tdb, const char *keystr,  \nTDB_DATA data, int flags);\n+int tdb_trans_store_bystring(TDB_CONTEXT *tdb, const char *keystr,\n+\t\t\t     TDB_DATA data, int flags);\n+TDB_DATA tdb_fetch_bystring(TDB_CONTEXT *tdb, const char *keystr);\n+int tdb_delete_bystring(TDB_CONTEXT *tdb, const char *keystr);\n+int32 tdb_change_int32_atomic(TDB_CONTEXT *tdb, const char *keystr,  \nint32 *oldval, int32 change_val);\n+BOOL tdb_change_uint32_atomic(TDB_CONTEXT *tdb, const char *keystr,  \nuint32 *oldval, uint32 change_val);\n+size_t tdb_pack_va(uint8 *buf, int bufsize, const char *fmt, va_list  \nap);\n+size_t tdb_pack(uint8 *buf, int bufsize, const char *fmt, ...);\n+BOOL tdb_pack_append(TALLOC_CTX *mem_ctx, uint8 **buf, size_t *len,\n+\t\t     const char *fmt, ...);\n+int tdb_unpack(const uint8 *buf, int bufsize, const char *fmt, ...);\n+TDB_CONTEXT *tdb_open_log(const char *name, int hash_size, int  \ntdb_flags,\n+\t\t\t  int open_flags, mode_t mode);\n+int tdb_traverse_delete_fn(TDB_CONTEXT *the_tdb, TDB_DATA key,  \nTDB_DATA dbuf,\n+                     void *state);\n+void tdb_search_list_free(TDB_LIST_NODE* node);\n+int tdb_trans_store(struct tdb_context *tdb, TDB_DATA key, TDB_DATA  \ndbuf,\n+\t\t    int flag);\n+int tdb_trans_delete(struct tdb_context *tdb, TDB_DATA key);\n+struct tdb_wrap *tdb_wrap_open(TALLOC_CTX *mem_ctx,\n+\t\t\t       const char *name, int hash_size, int tdb_flags,\n+\t\t\t       int open_flags, mode_t mode);\n+NTSTATUS map_nt_error_from_tdb(enum TDB_ERROR err);\n+\n+/* The following definitions come from lib/util_unistr.c  */\n+\n+void gfree_case_tables(void);\n+void load_case_tables(void);\n+int check_dos_char(smb_ucs2_t c);\n+void init_doschar_table(void);\n+void init_valid_table(void);\n+size_t dos_PutUniCode(char *dst,const char *src, size_t len, BOOL  \nnull_terminate);\n+char *skip_unibuf(char *src, size_t len);\n+int rpcstr_pull(char* dest, void *src, int dest_len, int src_len,  \nint flags);\n+int rpcstr_pull_unistr2_fstring(char *dest, UNISTR2 *src);\n+char *rpcstr_pull_unistr2_talloc(TALLOC_CTX *mem_ctx, const UNISTR2  \n*src);\n+int rpcstr_push(void* dest, const char *src, size_t dest_len, int  \nflags);\n+void unistr2_to_ascii(char *dest, const UNISTR2 *str, size_t maxlen);\n+void unistr3_to_ascii(char *dest, const UNISTR3 *str, size_t maxlen);\n+const char *unistr2_static(const UNISTR2 *str);\n+char *unistr2_tdup(TALLOC_CTX *ctx, const UNISTR2 *str);\n+smb_ucs2_t toupper_w(smb_ucs2_t val);\n+smb_ucs2_t tolower_w( smb_ucs2_t val );\n+BOOL islower_w(smb_ucs2_t c);\n+BOOL isupper_w(smb_ucs2_t c);\n+BOOL isvalid83_w(smb_ucs2_t c);\n+size_t strlen_w(const smb_ucs2_t *src);\n+size_t strnlen_w(const smb_ucs2_t *src, size_t max);\n+smb_ucs2_t *strchr_w(const smb_ucs2_t *s, smb_ucs2_t c);\n+smb_ucs2_t *strchr_wa(const smb_ucs2_t *s, char c);\n+smb_ucs2_t *strrchr_w(const smb_ucs2_t *s, smb_ucs2_t c);\n+smb_ucs2_t *strnrchr_w(const smb_ucs2_t *s, smb_ucs2_t c, unsigned  \nint n);\n+smb_ucs2_t *strstr_w(const smb_ucs2_t *s, const smb_ucs2_t *ins);\n+BOOL strlower_w(smb_ucs2_t *s);\n+BOOL strupper_w(smb_ucs2_t *s);\n+void strnorm_w(smb_ucs2_t *s, int case_default);\n+int strcmp_w(const smb_ucs2_t *a, const smb_ucs2_t *b);\n+int strncmp_w(const smb_ucs2_t *a, const smb_ucs2_t *b, size_t len);\n+int strcasecmp_w(const smb_ucs2_t *a, const smb_ucs2_t *b);\n+int strncasecmp_w(const smb_ucs2_t *a, const smb_ucs2_t *b, size_t  \nlen);\n+BOOL strequal_w(const smb_ucs2_t *s1, const smb_ucs2_t *s2);\n+BOOL strnequal_w(const smb_ucs2_t *s1,const smb_ucs2_t *s2,size_t n);\n+smb_ucs2_t *strdup_w(const smb_ucs2_t *src);\n+smb_ucs2_t *strndup_w(const smb_ucs2_t *src, size_t len);\n+smb_ucs2_t *strncpy_w(smb_ucs2_t *dest, const smb_ucs2_t *src, const  \nsize_t max);\n+smb_ucs2_t *strncat_w(smb_ucs2_t *dest, const smb_ucs2_t *src, const  \nsize_t max);\n+smb_ucs2_t *strcat_w(smb_ucs2_t *dest, const smb_ucs2_t *src);\n+void string_replace_w(smb_ucs2_t *s, smb_ucs2_t oldc, smb_ucs2_t newc);\n+BOOL trim_string_w(smb_ucs2_t *s, const smb_ucs2_t *front,\n+\t\t\t\t  const smb_ucs2_t *back);\n+int strcmp_wa(const smb_ucs2_t *a, const char *b);\n+int strncmp_wa(const smb_ucs2_t *a, const char *b, size_t len);\n+smb_ucs2_t *strpbrk_wa(const smb_ucs2_t *s, const char *p);\n+smb_ucs2_t *strstr_wa(const smb_ucs2_t *s, const char *ins);\n+BOOL trim_string_wa(smb_ucs2_t *s, const char *front,\n+\t\t\t\t  const char *back);\n+int unistrlen(uint16 *s);\n+int unistrcpy(uint16 *dst, uint16 *src);\n+UNISTR2* ucs2_to_unistr2(TALLOC_CTX *ctx, UNISTR2* dst, smb_ucs2_t*  \nsrc);\n+int toupper_ascii(int c);\n+int tolower_ascii(int c);\n+int isupper_ascii(int c);\n+int islower_ascii(int c);\n+\n+/* The following definitions come from lib/util_uuid.c  */\n+\n+void smb_uuid_pack(const struct GUID uu, UUID_FLAT *ptr);\n+void smb_uuid_unpack(const UUID_FLAT in, struct GUID *uu);\n+struct GUID smb_uuid_unpack_static(const UUID_FLAT in);\n+void smb_uuid_generate_random(struct GUID *uu);\n+char *smb_uuid_to_string(const struct GUID uu);\n+const char *smb_uuid_string_static(const struct GUID uu);\n+BOOL smb_string_to_uuid(const char *in, struct GUID* uu);\n+\n+/* The following definitions come from lib/version.c  */\n+\n+const char *samba_version_string(void);\n+\n+/* The following definitions come from lib/wins_srv.c  */\n+\n+BOOL wins_srv_is_dead(struct in_addr wins_ip, struct in_addr src_ip);\n+void wins_srv_alive(struct in_addr wins_ip, struct in_addr src_ip);\n+void wins_srv_died(struct in_addr wins_ip, struct in_addr src_ip);\n+unsigned wins_srv_count(void);\n+char **wins_srv_tags(void);\n+void wins_srv_tags_free(char **list);\n+struct in_addr wins_srv_ip_tag(const char *tag, struct in_addr src_ip);\n+unsigned wins_srv_count_tag(const char *tag);\n+\n+/* The following definitions come from lib/xfile.c  */\n+\n+int x_setvbuf(XFILE *f, char *buf, int mode, size_t size);\n+XFILE *x_fopen(const char *fname, int flags, mode_t mode);\n+XFILE *x_fdup(const XFILE *f);\n+int x_fclose(XFILE *f);\n+size_t x_fwrite(const void *p, size_t size, size_t nmemb, XFILE *f);\n+int x_fileno(const XFILE *f);\n+int x_fflush(XFILE *f);\n+void x_setbuffer(XFILE *f, char *buf, size_t size);\n+void x_setbuf(XFILE *f, char *buf);\n+void x_setlinebuf(XFILE *f);\n+int x_feof(XFILE *f);\n+int x_ferror(XFILE *f);\n+int x_fgetc(XFILE *f);\n+size_t x_fread(void *p, size_t size, size_t nmemb, XFILE *f);\n+char *x_fgets(char *s, int size, XFILE *stream) ;\n+off_t x_tseek(XFILE *f, off_t offset, int whence);\n+\n+/* The following definitions come from libads/ads_status.c  */\n+\n+ADS_STATUS ads_build_error(enum ads_error_type etype,\n+\t\t\t   int rc, int minor_status);\n+ADS_STATUS ads_build_nt_error(enum ads_error_type etype,\n+\t\t\t   NTSTATUS nt_status);\n+NTSTATUS ads_ntstatus(ADS_STATUS status);\n+const char *ads_errstr(ADS_STATUS status);\n+NTSTATUS gss_err_to_ntstatus(uint32 maj, uint32 min);\n+\n+/* The following definitions come from libads/ads_struct.c  */\n+\n+char *ads_build_path(const char *realm, const char *sep, const char  \n*field, int reverse);\n+char *ads_build_dn(const char *realm);\n+char *ads_build_domain(const char *dn);\n+ADS_STRUCT *ads_init(const char *realm,\n+\t\t     const char *workgroup,\n+\t\t     const char *ldap_server);\n+void ads_destroy(ADS_STRUCT **ads);\n+\n+/* The following definitions come from libads/ads_utils.c  */\n+\n+uint32 ads_acb2uf(uint32 acb);\n+uint32 ads_uf2acb(uint32 uf);\n+uint32 ads_uf2atype(uint32 uf);\n+uint32 ads_gtype2atype(uint32 gtype);\n+enum lsa_SidType ads_atype_map(uint32 atype);\n+\n+/* The following definitions come from libads/authdata.c  */\n+\n+char *pac_group_attr_string(uint32 attr);\n+\n+/* The following definitions come from libads/cldap.c  */\n+\n+BOOL ads_cldap_netlogon(const char *server, const char *realm,   \nstruct cldap_netlogon_reply *reply);\n+\n+/* The following definitions come from libads/disp_sec.c  */\n+\n+void ads_disp_sd(SEC_DESC *sd);\n+\n+/* The following definitions come from libads/dns.c  */\n+\n+NTSTATUS ads_dns_lookup_ns( TALLOC_CTX *ctx, const char *dnsdomain,  \nstruct dns_rr_ns **nslist, int *numns );\n+BOOL sitename_store(const char *realm, const char *sitename);\n+char *sitename_fetch(const char *realm);\n+BOOL stored_sitename_changed(const char *realm, const char *sitename);\n+NTSTATUS ads_dns_query_internal(TALLOC_CTX *ctx,\n+\t\t\t\tconst char *servicename,\n+\t\t\t\tconst char *realm,\n+\t\t\t\tconst char *sitename,\n+\t\t\t\tstruct dns_rr_srv **dclist,\n+\t\t\t\tint *numdcs );\n+NTSTATUS ads_dns_query_dcs(TALLOC_CTX *ctx,\n+\t\t\tconst char *realm,\n+\t\t\tconst char *sitename,\n+\t\t\tstruct dns_rr_srv **dclist,\n+\t\t\tint *numdcs );\n+NTSTATUS ads_dns_query_kdcs(TALLOC_CTX *ctx,\n+\t\t\tconst char *realm,\n+\t\t\tconst char *sitename,\n+\t\t\tstruct dns_rr_srv **dclist,\n+\t\t\tint *numdcs );\n+\n+/* The following definitions come from libads/kerberos.c  */\n+\n+int kerberos_kinit_password_ext(const char *principal,\n+\t\t\t\tconst char *password,\n+\t\t\t\tint time_offset,\n+\t\t\t\ttime_t *expire_time,\n+\t\t\t\ttime_t *renew_till_time,\n+\t\t\t\tconst char *cache_name,\n+\t\t\t\tBOOL request_pac,\n+\t\t\t\tBOOL add_netbios_addr,\n+\t\t\t\ttime_t renewable_time,\n+\t\t\t\tNTSTATUS *ntstatus);\n+int ads_kinit_password(ADS_STRUCT *ads);\n+int ads_kdestroy(const char *cc_name);\n+char* kerberos_standard_des_salt( void );\n+BOOL kerberos_secrets_store_des_salt( const char* salt );\n+char* kerberos_secrets_fetch_des_salt( void );\n+BOOL kerberos_secrets_store_salting_principal(const char *service,\n+\t\t\t\t\t      int enctype,\n+\t\t\t\t\t      const char *principal);\n+int kerberos_kinit_password(const char *principal,\n+\t\t\t    const char *password,\n+\t\t\t    int time_offset,\n+\t\t\t    const char *cache_name);\n+BOOL create_local_private_krb5_conf_for_domain(const char *realm,  \nconst char *domain,\n+\t\t\t\t\tconst char *sitename, struct in_addr ip);\n+\n+/* The following definitions come from libads/kerberos_keytab.c  */\n+\n+int ads_keytab_add_entry(ADS_STRUCT *ads, const char *srvPrinc);\n+int ads_keytab_flush(ADS_STRUCT *ads);\n+int ads_keytab_create_default(ADS_STRUCT *ads);\n+int ads_keytab_list(void);\n+\n+/* The following definitions come from libads/kerberos_verify.c  */\n+\n+NTSTATUS ads_verify_ticket(TALLOC_CTX *mem_ctx,\n+\t\t\t   const char *realm,\n+\t\t\t   time_t time_offset,\n+\t\t\t   const DATA_BLOB *ticket,\n+\t\t\t   char **principal,\n+\t\t\t   PAC_DATA **pac_data,\n+\t\t\t   DATA_BLOB *ap_rep,\n+\t\t\t   DATA_BLOB *session_key);\n+\n+/* The following definitions come from libads/krb5_errs.c  */\n+\n+\n+/* The following definitions come from libads/krb5_setpw.c  */\n+\n+ADS_STATUS ads_krb5_set_password(const char *kdc_host, const char  \n*princ,\n+\t\t\t\t const char *newpw, int time_offset);\n+ADS_STATUS kerberos_set_password(const char *kpasswd_server,\n+\t\t\t\t const char *auth_principal, const char *auth_password,\n+\t\t\t\t const char *target_principal, const char *new_password,\n+\t\t\t\t int time_offset);\n+ADS_STATUS ads_set_machine_password(ADS_STRUCT *ads,\n+\t\t\t\t    const char *machine_account,\n+\t\t\t\t    const char *password);\n+\n+/* The following definitions come from libads/ldap.c  */\n+\n+BOOL ads_sitename_match(ADS_STRUCT *ads);\n+BOOL ads_closest_dc(ADS_STRUCT *ads);\n+BOOL ads_try_connect(ADS_STRUCT *ads, const char *server );\n+ADS_STATUS ads_connect(ADS_STRUCT *ads);\n+ADS_STATUS ads_do_search_all_fn(ADS_STRUCT *ads, const char *bind_path,\n+\t\t\t\tint scope, const char *expr, const char **attrs,\n+\t\t\t\tBOOL(*fn)(char *, void **, void *),\n+\t\t\t\tvoid *data_area);\n+void ads_memfree(ADS_STRUCT *ads, void *mem);\n+char *ads_parent_dn(const char *dn);\n+ADS_MODLIST ads_init_mods(TALLOC_CTX *ctx);\n+ADS_STATUS ads_mod_str(TALLOC_CTX *ctx, ADS_MODLIST *mods,\n+\t\t       const char *name, const char *val);\n+ADS_STATUS ads_mod_strlist(TALLOC_CTX *ctx, ADS_MODLIST *mods,\n+\t\t\t   const char *name, const char **vals);\n+ADS_STATUS ads_gen_mod(ADS_STRUCT *ads, const char *mod_dn,  \nADS_MODLIST mods);\n+ADS_STATUS ads_gen_add(ADS_STRUCT *ads, const char *new_dn,  \nADS_MODLIST mods);\n+ADS_STATUS ads_del_dn(ADS_STRUCT *ads, char *del_dn);\n+char *ads_ou_string(ADS_STRUCT *ads, const char *org_unit);\n+char *ads_default_ou_string(ADS_STRUCT *ads, const char *wknguid);\n+ADS_STATUS ads_add_strlist(TALLOC_CTX *ctx, ADS_MODLIST *mods,\n+\t\t\t\tconst char *name, const char **vals);\n+uint32 ads_get_kvno(ADS_STRUCT *ads, const char *machine_name);\n+ADS_STATUS ads_clear_service_principal_names(ADS_STRUCT *ads, const  \nchar *machine_name);\n+ADS_STATUS ads_add_service_principal_name(ADS_STRUCT *ads, const  \nchar *machine_name,\n+                                          const char *my_fqdn, const  \nchar *spn);\n+ADS_STATUS ads_create_machine_acct(ADS_STRUCT *ads, const char  \n*machine_name,\n+                                   const char *org_unit);\n+ADS_STATUS ads_move_machine_acct(ADS_STRUCT *ads, const char  \n*machine_name,\n+                                 const char *org_unit, BOOL *moved);\n+int ads_count_replies(ADS_STRUCT *ads, void *res);\n+ADS_STATUS ads_USN(ADS_STRUCT *ads, uint32 *usn);\n+ADS_STATUS ads_current_time(ADS_STRUCT *ads);\n+ADS_STATUS ads_domain_func_level(ADS_STRUCT *ads, uint32 *val);\n+ADS_STATUS ads_domain_sid(ADS_STRUCT *ads, DOM_SID *sid);\n+ADS_STATUS ads_site_dn(ADS_STRUCT *ads, TALLOC_CTX *mem_ctx, const  \nchar **site_name);\n+ADS_STATUS ads_site_dn_for_machine(ADS_STRUCT *ads, TALLOC_CTX  \n*mem_ctx, const char *computer_name, const char **site_dn);\n+ADS_STATUS ads_upn_suffixes(ADS_STRUCT *ads, TALLOC_CTX *mem_ctx,  \nchar ***suffixes, size_t *num_suffixes);\n+BOOL ads_get_dn_from_extended_dn(TALLOC_CTX *mem_ctx,\n+\t\t\t\t const char *extended_dn,\n+\t\t\t\t char **dn);\n+BOOL ads_get_sid_from_extended_dn(TALLOC_CTX *mem_ctx,\n+\t\t\t\t  const char *extended_dn,\n+\t\t\t\t  enum ads_extended_dn_flags flags,\n+\t\t\t\t  DOM_SID *sid);\n+char* ads_get_dnshostname( ADS_STRUCT *ads, TALLOC_CTX *ctx, const  \nchar *machine_name );\n+char* ads_get_upn( ADS_STRUCT *ads, TALLOC_CTX *ctx, const char  \n*machine_name );\n+char* ads_get_samaccountname( ADS_STRUCT *ads, TALLOC_CTX *ctx,  \nconst char *machine_name );\n+ADS_STATUS ads_join_realm(ADS_STRUCT *ads, const char *machine_name,\n+\t\t\tuint32 account_type, const char *org_unit);\n+ADS_STATUS ads_leave_realm(ADS_STRUCT *ads, const char *hostname);\n+\n+/* The following definitions come from libads/ldap_printer.c  */\n+\n+ADS_STATUS ads_mod_printer_entry(ADS_STRUCT *ads, char *prt_dn,\n+\t\t\t\t TALLOC_CTX *ctx, const ADS_MODLIST *mods);\n+ADS_STATUS ads_add_printer_entry(ADS_STRUCT *ads, char *prt_dn,\n+\t\t\t\t\tTALLOC_CTX *ctx, ADS_MODLIST *mods);\n+WERROR get_remote_printer_publishing_data(struct rpc_pipe_client *cli,\n+\t\t\t\t\t  TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t  ADS_MODLIST *mods,\n+\t\t\t\t\t  const char *printer);\n+BOOL get_local_printer_publishing_data(TALLOC_CTX *mem_ctx,\n+\t\t\t\t       ADS_MODLIST *mods,\n+\t\t\t\t       NT_PRINTER_DATA *data);\n+\n+/* The following definitions come from libads/ldap_schema.c  */\n+\n+ADS_STATUS ads_get_attrnames_by_oids(ADS_STRUCT *ads, TALLOC_CTX  \n*mem_ctx,\n+\t\t\t\t     const char *schema_path,\n+\t\t\t\t     const char **OIDs, size_t num_OIDs,\n+\t\t\t\t     char ***OIDs_out, char ***names, size_t *count);\n+const char *ads_get_attrname_by_oid(ADS_STRUCT *ads, const char  \n*schema_path, TALLOC_CTX *mem_ctx, const char * OID);\n+ADS_STATUS ads_check_posix_schema_mapping(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t  ADS_STRUCT *ads,\n+\t\t\t\t\t  enum wb_posix_mapping map_type,\n+\t\t\t\t\t  struct posix_schema **s ) ;\n+\n+/* The following definitions come from libads/ldap_user.c  */\n+\n+ADS_STATUS ads_add_user_acct(ADS_STRUCT *ads, const char *user,\n+\t\t\t     const char *container, const char *fullname);\n+ADS_STATUS ads_add_group_acct(ADS_STRUCT *ads, const char *group,\n+\t\t\t      const char *container, const char *comment);\n+\n+/* The following definitions come from libads/ldap_utils.c  */\n+\n+ADS_STATUS ads_ranged_search(ADS_STRUCT *ads,\n+\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t     int scope,\n+\t\t\t     const char *base,\n+\t\t\t     const char *filter,\n+\t\t\t     void *args,\n+\t\t\t     const char *range_attr,\n+\t\t\t     char ***strings,\n+\t\t\t     size_t *num_strings);\n+ADS_STATUS ads_ranged_search_internal(ADS_STRUCT *ads,\n+\t\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t\t      int scope,\n+\t\t\t\t      const char *base,\n+\t\t\t\t      const char *filter,\n+\t\t\t\t      const char **attrs,\n+\t\t\t\t      void *args,\n+\t\t\t\t      const char *range_attr,\n+\t\t\t\t      char ***strings,\n+\t\t\t\t      size_t *num_strings,\n+\t\t\t\t      uint32 *first_usn,\n+\t\t\t\t      int *num_retries,\n+\t\t\t\t      BOOL *more_values);\n+\n+/* The following definitions come from libads/sasl.c  */\n+\n+ADS_STATUS ads_sasl_bind(ADS_STRUCT *ads);\n+\n+/* The following definitions come from libads/util.c  */\n+\n+ADS_STATUS ads_change_trust_account_password(ADS_STRUCT *ads, char  \n*host_principal);\n+\n+/* The following definitions come from libgpo/gpo_fetch.c  */\n+\n+NTSTATUS ads_gpo_explode_filesyspath(ADS_STRUCT *ads,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     const char *file_sys_path,\n+\t\t\t\t     char **server,\n+\t\t\t\t     char **service,\n+\t\t\t\t     char **nt_path,\n+\t\t\t\t     char **unix_path);\n+NTSTATUS ads_gpo_prepare_local_store(ADS_STRUCT *ads,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     const char *unix_path);\n+NTSTATUS ads_fetch_gpo_files(ADS_STRUCT *ads,\n+\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t    struct cli_state *cli,\n+\t\t\t    struct GROUP_POLICY_OBJECT *gpo);\n+NTSTATUS ads_gpo_get_sysvol_gpt_version(ADS_STRUCT *ads,\n+\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\tconst char *unix_path,\n+\t\t\t\t\tuint32 *sysvol_version,\n+\t\t\t\t\tchar **display_name);\n+\n+/* The following definitions come from libgpo/gpo_filesync.c  */\n+\n+NTSTATUS gpo_copy_file(TALLOC_CTX *mem_ctx,\n+\t\t       struct cli_state *cli,\n+\t\t       const char *nt_path,\n+\t\t       const char *unix_path);\n+NTSTATUS gpo_sync_directories(TALLOC_CTX *mem_ctx,\n+\t\t\t      struct cli_state *cli,\n+\t\t\t      const char *nt_path,\n+\t\t\t      const char *local_path);\n+\n+/* The following definitions come from libgpo/gpo_ldap.c  */\n+\n+ADS_STATUS ads_parse_gp_ext(TALLOC_CTX *mem_ctx,\n+\t\t\t    const char *extension_raw,\n+\t\t\t    struct GP_EXT *gp_ext);\n+ADS_STATUS ads_parse_gplink(TALLOC_CTX *mem_ctx,\n+\t\t\t    const char *gp_link_raw,\n+\t\t\t    uint32 options,\n+\t\t\t    struct GP_LINK *gp_link);\n+ADS_STATUS ads_get_gpo_link(ADS_STRUCT *ads,\n+\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t    const char *link_dn,\n+\t\t\t    struct GP_LINK *gp_link_struct);\n+ADS_STATUS ads_add_gpo_link(ADS_STRUCT *ads,\n+\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t    const char *link_dn,\n+\t\t\t    const char *gpo_dn,\n+\t\t\t    uint32 gpo_opt);\n+ADS_STATUS ads_delete_gpo_link(ADS_STRUCT *ads,\n+\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t       const char *link_dn,\n+\t\t\t       const char *gpo_dn);\n+ADS_STATUS ads_get_gpo(ADS_STRUCT *ads,\n+\t\t       TALLOC_CTX *mem_ctx,\n+\t\t       const char *gpo_dn,\n+\t\t       const char *display_name,\n+\t\t       const char *guid_name,\n+\t\t       struct GROUP_POLICY_OBJECT *gpo);\n+ADS_STATUS add_gplink_to_gpo_list(ADS_STRUCT *ads,\n+\t\t\t\t  TALLOC_CTX *mem_ctx,\n+\t\t\t\t  struct GROUP_POLICY_OBJECT **gpo_list,\n+\t\t\t\t  const char *link_dn,\n+\t\t\t\t  struct GP_LINK *gp_link,\n+\t\t\t\t  enum GPO_LINK_TYPE link_type,\n+\t\t\t\t  BOOL only_add_forced_gpos,\n+\t\t\t\t  struct GPO_SID_TOKEN *token);\n+ADS_STATUS ads_get_gpo_sid_token(ADS_STRUCT *ads,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tconst char *dn,\n+\t\t\t\tstruct GPO_SID_TOKEN **token);\n+ADS_STATUS ads_get_gpo_list(ADS_STRUCT *ads,\n+\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t    const char *dn,\n+\t\t\t    uint32 flags,\n+\t\t\t    struct GROUP_POLICY_OBJECT **gpo_list);\n+\n+/* The following definitions come from libgpo/gpo_parse.c  */\n+\n+NTSTATUS parse_gpt_ini(TALLOC_CTX *mem_ctx, const char *filename,  \nuint32 *version, char **display_name);\n+\n+/* The following definitions come from libgpo/gpo_sec.c  */\n+\n+NTSTATUS gpo_apply_security_filtering(const struct  \nGROUP_POLICY_OBJECT *gpo,\n+\t\t\t\t      const struct GPO_SID_TOKEN *token);\n+\n+/* The following definitions come from libgpo/gpo_util.c  */\n+\n+const char *cse_gpo_guid_string_to_name(const char *guid);\n+const char *cse_snapin_gpo_guid_string_to_name(const char *guid);\n+void dump_gp_ext(struct GP_EXT *gp_ext, int debuglevel);\n+void dump_gpo(TALLOC_CTX *mem_ctx, struct GROUP_POLICY_OBJECT *gpo,  \nint debuglevel) ;\n+void dump_gplink(ADS_STRUCT *ads, TALLOC_CTX *mem_ctx, struct  \nGP_LINK *gp_link);\n+ADS_STATUS process_extension_with_snapin(ADS_STRUCT *ads,\n+\t\t\t\t\t TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t const char *extension_guid,\n+\t\t\t\t\t const char *snapin_guid);\n+ADS_STATUS gpo_process_a_gpo(ADS_STRUCT *ads,\n+\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t     struct GROUP_POLICY_OBJECT *gpo,\n+\t\t\t     const char *extension_guid,\n+\t\t\t     uint32 flags);\n+ADS_STATUS gpo_process_gpo_list(ADS_STRUCT *ads,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tstruct GROUP_POLICY_OBJECT **gpo_list,\n+\t\t\t\tconst char *extensions_guid,\n+\t\t\t\tuint32 flags);\n+ADS_STATUS gpo_snapin_handler_none(ADS_STRUCT *ads,\n+\t\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t\t   const char *extension_guid,\n+\t\t\t\t   const char *snapin_guid);\n+ADS_STATUS gpo_snapin_handler_security_settings(ADS_STRUCT *ads,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tconst char *extension_guid,\n+\t\t\t\t\t\tconst char *snapin_guid);\n+ADS_STATUS gpo_lockout_policy(ADS_STRUCT *ads,\n+\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t      const char *hostname,\n+\t\t\t      SAM_UNK_INFO_12 *lockout_policy);\n+ADS_STATUS gpo_password_policy(ADS_STRUCT *ads,\n+\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t       const char *hostname,\n+\t\t\t       SAM_UNK_INFO_1 *password_policy);\n+NTSTATUS check_refresh_gpo(ADS_STRUCT *ads,\n+\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t   struct GROUP_POLICY_OBJECT *gpo,\n+\t\t\t   struct cli_state **cli_out);\n+NTSTATUS check_refresh_gpo_list(ADS_STRUCT *ads,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tstruct GROUP_POLICY_OBJECT *gpo_list);\n+\n+/* The following definitions come from librpc/gen_ndr/ndr_dfs.c  */\n+\n+NTSTATUS ndr_push_dfs_Info0(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info0 *r);\n+NTSTATUS ndr_pull_dfs_Info0(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info0 *r);\n+NTSTATUS ndr_push_dfs_Info1(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info1 *r);\n+NTSTATUS ndr_pull_dfs_Info1(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info1 *r);\n+NTSTATUS ndr_push_dfs_Info2(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info2 *r);\n+NTSTATUS ndr_pull_dfs_Info2(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info2 *r);\n+NTSTATUS ndr_push_dfs_StorageInfo(struct ndr_push *ndr, int  \nndr_flags, const struct dfs_StorageInfo *r);\n+NTSTATUS ndr_pull_dfs_StorageInfo(struct ndr_pull *ndr, int  \nndr_flags, struct dfs_StorageInfo *r);\n+NTSTATUS ndr_push_dfs_Info3(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info3 *r);\n+NTSTATUS ndr_pull_dfs_Info3(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info3 *r);\n+NTSTATUS ndr_push_dfs_Info4(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info4 *r);\n+NTSTATUS ndr_pull_dfs_Info4(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info4 *r);\n+NTSTATUS ndr_push_dfs_Info100(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info100 *r);\n+NTSTATUS ndr_pull_dfs_Info100(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info100 *r);\n+NTSTATUS ndr_push_dfs_Info101(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info101 *r);\n+NTSTATUS ndr_pull_dfs_Info101(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info101 *r);\n+NTSTATUS ndr_push_dfs_Info102(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info102 *r);\n+NTSTATUS ndr_pull_dfs_Info102(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info102 *r);\n+NTSTATUS ndr_push_dfs_Info200(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info200 *r);\n+NTSTATUS ndr_pull_dfs_Info200(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info200 *r);\n+NTSTATUS ndr_push_dfs_Info300(struct ndr_push *ndr, int ndr_flags,  \nconst struct dfs_Info300 *r);\n+NTSTATUS ndr_pull_dfs_Info300(struct ndr_pull *ndr, int ndr_flags,  \nstruct dfs_Info300 *r);\n+NTSTATUS ndr_push_dfs_Info(struct ndr_push *ndr, int ndr_flags,  \nconst union dfs_Info *r);\n+NTSTATUS ndr_pull_dfs_Info(struct ndr_pull *ndr, int ndr_flags,  \nunion dfs_Info *r);\n+NTSTATUS ndr_push_dfs_EnumArray1(struct ndr_push *ndr, int  \nndr_flags, const struct dfs_EnumArray1 *r);\n+NTSTATUS ndr_pull_dfs_EnumArray1(struct ndr_pull *ndr, int  \nndr_flags, struct dfs_EnumArray1 *r);\n+NTSTATUS ndr_push_dfs_EnumArray2(struct ndr_push *ndr, int  \nndr_flags, const struct dfs_EnumArray2 *r);\n+NTSTATUS ndr_pull_dfs_EnumArray2(struct ndr_pull *ndr, int  \nndr_flags, struct dfs_EnumArray2 *r);\n+NTSTATUS ndr_push_dfs_EnumArray3(struct ndr_push *ndr, int  \nndr_flags, const struct dfs_EnumArray3 *r);\n+NTSTATUS ndr_pull_dfs_EnumArray3(struct ndr_pull *ndr, int  \nndr_flags, struct dfs_EnumArray3 *r);\n+NTSTATUS ndr_push_dfs_EnumArray4(struct ndr_push *ndr, int  \nndr_flags, const struct dfs_EnumArray4 *r);\n+NTSTATUS ndr_pull_dfs_EnumArray4(struct ndr_pull *ndr, int  \nndr_flags, struct dfs_EnumArray4 *r);\n+NTSTATUS ndr_push_dfs_EnumArray200(struct ndr_push *ndr, int  \nndr_flags, const struct dfs_EnumArray200 *r);\n+NTSTATUS ndr_pull_dfs_EnumArray200(struct ndr_pull *ndr, int  \nndr_flags, struct dfs_EnumArray200 *r);\n+NTSTATUS ndr_push_dfs_EnumArray300(struct ndr_push *ndr, int  \nndr_flags, const struct dfs_EnumArray300 *r);\n+NTSTATUS ndr_pull_dfs_EnumArray300(struct ndr_pull *ndr, int  \nndr_flags, struct dfs_EnumArray300 *r);\n+NTSTATUS ndr_push_dfs_EnumInfo(struct ndr_push *ndr, int ndr_flags,  \nconst union dfs_EnumInfo *r);\n+NTSTATUS ndr_pull_dfs_EnumInfo(struct ndr_pull *ndr, int ndr_flags,  \nunion dfs_EnumInfo *r);\n+NTSTATUS ndr_push_dfs_EnumStruct(struct ndr_push *ndr, int  \nndr_flags, const struct dfs_EnumStruct *r);\n+NTSTATUS ndr_pull_dfs_EnumStruct(struct ndr_pull *ndr, int  \nndr_flags, struct dfs_EnumStruct *r);\n+NTSTATUS ndr_push_dfs_GetManagerVersion(struct ndr_push *ndr, int  \nflags, const struct dfs_GetManagerVersion *r);\n+NTSTATUS ndr_pull_dfs_GetManagerVersion(struct ndr_pull *ndr, int  \nflags, struct dfs_GetManagerVersion *r);\n+NTSTATUS ndr_push_dfs_Add(struct ndr_push *ndr, int flags, const  \nstruct dfs_Add *r);\n+NTSTATUS ndr_pull_dfs_Add(struct ndr_pull *ndr, int flags, struct  \ndfs_Add *r);\n+NTSTATUS ndr_push_dfs_Remove(struct ndr_push *ndr, int flags, const  \nstruct dfs_Remove *r);\n+NTSTATUS ndr_pull_dfs_Remove(struct ndr_pull *ndr, int flags, struct  \ndfs_Remove *r);\n+NTSTATUS ndr_push_dfs_SetInfo(struct ndr_push *ndr, int flags, const  \nstruct dfs_SetInfo *r);\n+NTSTATUS ndr_pull_dfs_SetInfo(struct ndr_pull *ndr, int flags,  \nstruct dfs_SetInfo *r);\n+NTSTATUS ndr_push_dfs_GetInfo(struct ndr_push *ndr, int flags, const  \nstruct dfs_GetInfo *r);\n+NTSTATUS ndr_pull_dfs_GetInfo(struct ndr_pull *ndr, int flags,  \nstruct dfs_GetInfo *r);\n+NTSTATUS ndr_push_dfs_Enum(struct ndr_push *ndr, int flags, const  \nstruct dfs_Enum *r);\n+NTSTATUS ndr_pull_dfs_Enum(struct ndr_pull *ndr, int flags, struct  \ndfs_Enum *r);\n+NTSTATUS ndr_push_dfs_Rename(struct ndr_push *ndr, int flags, const  \nstruct dfs_Rename *r);\n+NTSTATUS ndr_pull_dfs_Rename(struct ndr_pull *ndr, int flags, struct  \ndfs_Rename *r);\n+NTSTATUS ndr_push_dfs_Move(struct ndr_push *ndr, int flags, const  \nstruct dfs_Move *r);\n+NTSTATUS ndr_pull_dfs_Move(struct ndr_pull *ndr, int flags, struct  \ndfs_Move *r);\n+NTSTATUS ndr_push_dfs_ManagerGetConfigInfo(struct ndr_push *ndr, int  \nflags, const struct dfs_ManagerGetConfigInfo *r);\n+NTSTATUS ndr_pull_dfs_ManagerGetConfigInfo(struct ndr_pull *ndr, int  \nflags, struct dfs_ManagerGetConfigInfo *r);\n+NTSTATUS ndr_push_dfs_ManagerSendSiteInfo(struct ndr_push *ndr, int  \nflags, const struct dfs_ManagerSendSiteInfo *r);\n+NTSTATUS ndr_pull_dfs_ManagerSendSiteInfo(struct ndr_pull *ndr, int  \nflags, struct dfs_ManagerSendSiteInfo *r);\n+NTSTATUS ndr_push_dfs_AddFtRoot(struct ndr_push *ndr, int flags,  \nconst struct dfs_AddFtRoot *r);\n+NTSTATUS ndr_pull_dfs_AddFtRoot(struct ndr_pull *ndr, int flags,  \nstruct dfs_AddFtRoot *r);\n+NTSTATUS ndr_push_dfs_RemoveFtRoot(struct ndr_push *ndr, int flags,  \nconst struct dfs_RemoveFtRoot *r);\n+NTSTATUS ndr_pull_dfs_RemoveFtRoot(struct ndr_pull *ndr, int flags,  \nstruct dfs_RemoveFtRoot *r);\n+NTSTATUS ndr_push_dfs_AddStdRoot(struct ndr_push *ndr, int flags,  \nconst struct dfs_AddStdRoot *r);\n+NTSTATUS ndr_pull_dfs_AddStdRoot(struct ndr_pull *ndr, int flags,  \nstruct dfs_AddStdRoot *r);\n+NTSTATUS ndr_push_dfs_RemoveStdRoot(struct ndr_push *ndr, int flags,  \nconst struct dfs_RemoveStdRoot *r);\n+NTSTATUS ndr_pull_dfs_RemoveStdRoot(struct ndr_pull *ndr, int flags,  \nstruct dfs_RemoveStdRoot *r);\n+NTSTATUS ndr_push_dfs_ManagerInitialize(struct ndr_push *ndr, int  \nflags, const struct dfs_ManagerInitialize *r);\n+NTSTATUS ndr_pull_dfs_ManagerInitialize(struct ndr_pull *ndr, int  \nflags, struct dfs_ManagerInitialize *r);\n+NTSTATUS ndr_push_dfs_AddStdRootForced(struct ndr_push *ndr, int  \nflags, const struct dfs_AddStdRootForced *r);\n+NTSTATUS ndr_pull_dfs_AddStdRootForced(struct ndr_pull *ndr, int  \nflags, struct dfs_AddStdRootForced *r);\n+NTSTATUS ndr_push_dfs_GetDcAddress(struct ndr_push *ndr, int flags,  \nconst struct dfs_GetDcAddress *r);\n+NTSTATUS ndr_pull_dfs_GetDcAddress(struct ndr_pull *ndr, int flags,  \nstruct dfs_GetDcAddress *r);\n+NTSTATUS ndr_push_dfs_SetDcAddress(struct ndr_push *ndr, int flags,  \nconst struct dfs_SetDcAddress *r);\n+NTSTATUS ndr_pull_dfs_SetDcAddress(struct ndr_pull *ndr, int flags,  \nstruct dfs_SetDcAddress *r);\n+NTSTATUS ndr_push_dfs_FlushFtTable(struct ndr_push *ndr, int flags,  \nconst struct dfs_FlushFtTable *r);\n+NTSTATUS ndr_pull_dfs_FlushFtTable(struct ndr_pull *ndr, int flags,  \nstruct dfs_FlushFtTable *r);\n+NTSTATUS ndr_push_dfs_Add2(struct ndr_push *ndr, int flags, const  \nstruct dfs_Add2 *r);\n+NTSTATUS ndr_pull_dfs_Add2(struct ndr_pull *ndr, int flags, struct  \ndfs_Add2 *r);\n+NTSTATUS ndr_push_dfs_Remove2(struct ndr_push *ndr, int flags, const  \nstruct dfs_Remove2 *r);\n+NTSTATUS ndr_pull_dfs_Remove2(struct ndr_pull *ndr, int flags,  \nstruct dfs_Remove2 *r);\n+NTSTATUS ndr_push_dfs_EnumEx(struct ndr_push *ndr, int flags, const  \nstruct dfs_EnumEx *r);\n+NTSTATUS ndr_pull_dfs_EnumEx(struct ndr_pull *ndr, int flags, struct  \ndfs_EnumEx *r);\n+NTSTATUS ndr_push_dfs_SetInfo2(struct ndr_push *ndr, int flags,  \nconst struct dfs_SetInfo2 *r);\n+NTSTATUS ndr_pull_dfs_SetInfo2(struct ndr_pull *ndr, int flags,  \nstruct dfs_SetInfo2 *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ndr_echo.c  */\n+\n+NTSTATUS ndr_push_echo_info1(struct ndr_push *ndr, int ndr_flags,  \nconst struct echo_info1 *r);\n+NTSTATUS ndr_pull_echo_info1(struct ndr_pull *ndr, int ndr_flags,  \nstruct echo_info1 *r);\n+NTSTATUS ndr_push_echo_info2(struct ndr_push *ndr, int ndr_flags,  \nconst struct echo_info2 *r);\n+NTSTATUS ndr_pull_echo_info2(struct ndr_pull *ndr, int ndr_flags,  \nstruct echo_info2 *r);\n+NTSTATUS ndr_push_echo_info3(struct ndr_push *ndr, int ndr_flags,  \nconst struct echo_info3 *r);\n+NTSTATUS ndr_pull_echo_info3(struct ndr_pull *ndr, int ndr_flags,  \nstruct echo_info3 *r);\n+NTSTATUS ndr_push_echo_info4(struct ndr_push *ndr, int ndr_flags,  \nconst struct echo_info4 *r);\n+NTSTATUS ndr_pull_echo_info4(struct ndr_pull *ndr, int ndr_flags,  \nstruct echo_info4 *r);\n+NTSTATUS ndr_push_echo_info5(struct ndr_push *ndr, int ndr_flags,  \nconst struct echo_info5 *r);\n+NTSTATUS ndr_pull_echo_info5(struct ndr_pull *ndr, int ndr_flags,  \nstruct echo_info5 *r);\n+NTSTATUS ndr_push_echo_info6(struct ndr_push *ndr, int ndr_flags,  \nconst struct echo_info6 *r);\n+NTSTATUS ndr_pull_echo_info6(struct ndr_pull *ndr, int ndr_flags,  \nstruct echo_info6 *r);\n+NTSTATUS ndr_push_echo_info7(struct ndr_push *ndr, int ndr_flags,  \nconst struct echo_info7 *r);\n+NTSTATUS ndr_pull_echo_info7(struct ndr_pull *ndr, int ndr_flags,  \nstruct echo_info7 *r);\n+NTSTATUS ndr_push_echo_Info(struct ndr_push *ndr, int ndr_flags,  \nconst union echo_Info *r);\n+NTSTATUS ndr_pull_echo_Info(struct ndr_pull *ndr, int ndr_flags,  \nunion echo_Info *r);\n+NTSTATUS ndr_push_echo_Enum1(struct ndr_push *ndr, int ndr_flags,  \nenum echo_Enum1 r);\n+NTSTATUS ndr_pull_echo_Enum1(struct ndr_pull *ndr, int ndr_flags,  \nenum echo_Enum1 *r);\n+NTSTATUS ndr_push_echo_Enum1_32(struct ndr_push *ndr, int ndr_flags,  \nenum echo_Enum1_32 r);\n+NTSTATUS ndr_pull_echo_Enum1_32(struct ndr_pull *ndr, int ndr_flags,  \nenum echo_Enum1_32 *r);\n+NTSTATUS ndr_push_echo_Enum2(struct ndr_push *ndr, int ndr_flags,  \nconst struct echo_Enum2 *r);\n+NTSTATUS ndr_pull_echo_Enum2(struct ndr_pull *ndr, int ndr_flags,  \nstruct echo_Enum2 *r);\n+NTSTATUS ndr_push_echo_Enum3(struct ndr_push *ndr, int ndr_flags,  \nconst union echo_Enum3 *r);\n+NTSTATUS ndr_pull_echo_Enum3(struct ndr_pull *ndr, int ndr_flags,  \nunion echo_Enum3 *r);\n+NTSTATUS ndr_push_echo_Surrounding(struct ndr_push *ndr, int  \nndr_flags, const struct echo_Surrounding *r);\n+NTSTATUS ndr_pull_echo_Surrounding(struct ndr_pull *ndr, int  \nndr_flags, struct echo_Surrounding *r);\n+NTSTATUS ndr_push_echo_AddOne(struct ndr_push *ndr, int flags, const  \nstruct echo_AddOne *r);\n+NTSTATUS ndr_pull_echo_AddOne(struct ndr_pull *ndr, int flags,  \nstruct echo_AddOne *r);\n+NTSTATUS ndr_push_echo_EchoData(struct ndr_push *ndr, int flags,  \nconst struct echo_EchoData *r);\n+NTSTATUS ndr_pull_echo_EchoData(struct ndr_pull *ndr, int flags,  \nstruct echo_EchoData *r);\n+NTSTATUS ndr_push_echo_SinkData(struct ndr_push *ndr, int flags,  \nconst struct echo_SinkData *r);\n+NTSTATUS ndr_pull_echo_SinkData(struct ndr_pull *ndr, int flags,  \nstruct echo_SinkData *r);\n+NTSTATUS ndr_push_echo_SourceData(struct ndr_push *ndr, int flags,  \nconst struct echo_SourceData *r);\n+NTSTATUS ndr_pull_echo_SourceData(struct ndr_pull *ndr, int flags,  \nstruct echo_SourceData *r);\n+NTSTATUS ndr_push_echo_TestCall(struct ndr_push *ndr, int flags,  \nconst struct echo_TestCall *r);\n+NTSTATUS ndr_pull_echo_TestCall(struct ndr_pull *ndr, int flags,  \nstruct echo_TestCall *r);\n+NTSTATUS ndr_push_echo_TestCall2(struct ndr_push *ndr, int flags,  \nconst struct echo_TestCall2 *r);\n+NTSTATUS ndr_pull_echo_TestCall2(struct ndr_pull *ndr, int flags,  \nstruct echo_TestCall2 *r);\n+NTSTATUS ndr_push_echo_TestSleep(struct ndr_push *ndr, int flags,  \nconst struct echo_TestSleep *r);\n+NTSTATUS ndr_pull_echo_TestSleep(struct ndr_pull *ndr, int flags,  \nstruct echo_TestSleep *r);\n+NTSTATUS ndr_push_echo_TestEnum(struct ndr_push *ndr, int flags,  \nconst struct echo_TestEnum *r);\n+NTSTATUS ndr_pull_echo_TestEnum(struct ndr_pull *ndr, int flags,  \nstruct echo_TestEnum *r);\n+NTSTATUS ndr_push_echo_TestSurrounding(struct ndr_push *ndr, int  \nflags, const struct echo_TestSurrounding *r);\n+NTSTATUS ndr_pull_echo_TestSurrounding(struct ndr_pull *ndr, int  \nflags, struct echo_TestSurrounding *r);\n+NTSTATUS ndr_push_echo_TestDoublePointer(struct ndr_push *ndr, int  \nflags, const struct echo_TestDoublePointer *r);\n+NTSTATUS ndr_pull_echo_TestDoublePointer(struct ndr_pull *ndr, int  \nflags, struct echo_TestDoublePointer *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ \nndr_epmapper.c  */\n+\n+NTSTATUS ndr_push_epm_protocol(struct ndr_push *ndr, int ndr_flags,  \nenum epm_protocol r);\n+NTSTATUS ndr_pull_epm_protocol(struct ndr_pull *ndr, int ndr_flags,  \nenum epm_protocol *r);\n+NTSTATUS ndr_push_epm_rhs_dnet_nsp(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_dnet_nsp *r);\n+NTSTATUS ndr_pull_epm_rhs_dnet_nsp(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_dnet_nsp *r);\n+NTSTATUS ndr_push_epm_rhs_osi_tp4(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_osi_tp4 *r);\n+NTSTATUS ndr_pull_epm_rhs_osi_tp4(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_osi_tp4 *r);\n+NTSTATUS ndr_push_epm_rhs_osi_clns(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_osi_clns *r);\n+NTSTATUS ndr_pull_epm_rhs_osi_clns(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_osi_clns *r);\n+NTSTATUS ndr_push_epm_rhs_udp(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_udp *r);\n+NTSTATUS ndr_pull_epm_rhs_udp(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_udp *r);\n+NTSTATUS ndr_push_epm_rhs_tcp(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_tcp *r);\n+NTSTATUS ndr_pull_epm_rhs_tcp(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_tcp *r);\n+NTSTATUS ndr_push_epm_rhs_ip(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_ip *r);\n+NTSTATUS ndr_pull_epm_rhs_ip(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_ip *r);\n+NTSTATUS ndr_push_epm_rhs_ncadg(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_ncadg *r);\n+NTSTATUS ndr_pull_epm_rhs_ncadg(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_ncadg *r);\n+NTSTATUS ndr_push_epm_rhs_ncacn(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_ncacn *r);\n+NTSTATUS ndr_pull_epm_rhs_ncacn(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_ncacn *r);\n+NTSTATUS ndr_push_epm_rhs_uuid(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_uuid *r);\n+NTSTATUS ndr_pull_epm_rhs_uuid(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_uuid *r);\n+NTSTATUS ndr_push_epm_rhs_ipx(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_ipx *r);\n+NTSTATUS ndr_pull_epm_rhs_ipx(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_ipx *r);\n+NTSTATUS ndr_push_epm_rhs_smb(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_smb *r);\n+NTSTATUS ndr_pull_epm_rhs_smb(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_smb *r);\n+NTSTATUS ndr_push_epm_rhs_pipe(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_pipe *r);\n+NTSTATUS ndr_pull_epm_rhs_pipe(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_pipe *r);\n+NTSTATUS ndr_push_epm_rhs_netbios(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_netbios *r);\n+NTSTATUS ndr_pull_epm_rhs_netbios(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_netbios *r);\n+NTSTATUS ndr_push_epm_rhs_netbeui(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_netbeui *r);\n+NTSTATUS ndr_pull_epm_rhs_netbeui(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_netbeui *r);\n+NTSTATUS ndr_push_epm_rhs_spx(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_spx *r);\n+NTSTATUS ndr_pull_epm_rhs_spx(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_spx *r);\n+NTSTATUS ndr_push_epm_rhs_nb_ipx(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_nb_ipx *r);\n+NTSTATUS ndr_pull_epm_rhs_nb_ipx(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_nb_ipx *r);\n+NTSTATUS ndr_push_epm_rhs_http(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_http *r);\n+NTSTATUS ndr_pull_epm_rhs_http(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_http *r);\n+NTSTATUS ndr_push_epm_rhs_unix_ds(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_unix_ds *r);\n+NTSTATUS ndr_pull_epm_rhs_unix_ds(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_unix_ds *r);\n+NTSTATUS ndr_push_epm_rhs_null(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_rhs_null *r);\n+NTSTATUS ndr_pull_epm_rhs_null(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_rhs_null *r);\n+NTSTATUS ndr_push_epm_rhs_ncalrpc(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_ncalrpc *r);\n+NTSTATUS ndr_pull_epm_rhs_ncalrpc(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_ncalrpc *r);\n+NTSTATUS ndr_push_epm_rhs_appletalk(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_appletalk *r);\n+NTSTATUS ndr_pull_epm_rhs_appletalk(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_appletalk *r);\n+NTSTATUS ndr_push_epm_rhs_atalk_stream(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_atalk_stream *r);\n+NTSTATUS ndr_pull_epm_rhs_atalk_stream(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_atalk_stream *r);\n+NTSTATUS ndr_push_epm_rhs_atalk_datagram(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_atalk_datagram *r);\n+NTSTATUS ndr_pull_epm_rhs_atalk_datagram(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_atalk_datagram *r);\n+NTSTATUS ndr_push_epm_rhs_vines_spp(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_vines_spp *r);\n+NTSTATUS ndr_pull_epm_rhs_vines_spp(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_vines_spp *r);\n+NTSTATUS ndr_push_epm_rhs_vines_ipc(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_vines_ipc *r);\n+NTSTATUS ndr_pull_epm_rhs_vines_ipc(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_vines_ipc *r);\n+NTSTATUS ndr_push_epm_rhs_streettalk(struct ndr_push *ndr, int  \nndr_flags, const struct epm_rhs_streettalk *r);\n+NTSTATUS ndr_pull_epm_rhs_streettalk(struct ndr_pull *ndr, int  \nndr_flags, struct epm_rhs_streettalk *r);\n+NTSTATUS ndr_push_epm_rhs(struct ndr_push *ndr, int ndr_flags, const  \nunion epm_rhs *r);\n+NTSTATUS ndr_pull_epm_rhs(struct ndr_pull *ndr, int ndr_flags, union  \nepm_rhs *r);\n+NTSTATUS ndr_push_epm_lhs(struct ndr_push *ndr, int ndr_flags, const  \nstruct epm_lhs *r);\n+NTSTATUS ndr_pull_epm_lhs(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_lhs *r);\n+NTSTATUS ndr_push_epm_floor(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_floor *r);\n+NTSTATUS ndr_pull_epm_floor(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_floor *r);\n+NTSTATUS ndr_push_epm_tower(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_tower *r);\n+NTSTATUS ndr_pull_epm_tower(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_tower *r);\n+size_t ndr_size_epm_tower(const struct epm_tower *r, int flags);\n+NTSTATUS ndr_push_epm_twr_t(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_twr_t *r);\n+NTSTATUS ndr_pull_epm_twr_t(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_twr_t *r);\n+NTSTATUS ndr_push_epm_entry_t(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_entry_t *r);\n+NTSTATUS ndr_pull_epm_entry_t(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_entry_t *r);\n+NTSTATUS ndr_push_rpc_if_id_t(struct ndr_push *ndr, int ndr_flags,  \nconst struct rpc_if_id_t *r);\n+NTSTATUS ndr_pull_rpc_if_id_t(struct ndr_pull *ndr, int ndr_flags,  \nstruct rpc_if_id_t *r);\n+NTSTATUS ndr_push_epm_twr_p_t(struct ndr_push *ndr, int ndr_flags,  \nconst struct epm_twr_p_t *r);\n+NTSTATUS ndr_pull_epm_twr_p_t(struct ndr_pull *ndr, int ndr_flags,  \nstruct epm_twr_p_t *r);\n+NTSTATUS ndr_push_epm_Insert(struct ndr_push *ndr, int flags, const  \nstruct epm_Insert *r);\n+NTSTATUS ndr_pull_epm_Insert(struct ndr_pull *ndr, int flags, struct  \nepm_Insert *r);\n+NTSTATUS ndr_push_epm_Delete(struct ndr_push *ndr, int flags, const  \nstruct epm_Delete *r);\n+NTSTATUS ndr_pull_epm_Delete(struct ndr_pull *ndr, int flags, struct  \nepm_Delete *r);\n+NTSTATUS ndr_push_epm_Lookup(struct ndr_push *ndr, int flags, const  \nstruct epm_Lookup *r);\n+NTSTATUS ndr_pull_epm_Lookup(struct ndr_pull *ndr, int flags, struct  \nepm_Lookup *r);\n+NTSTATUS ndr_push_epm_LookupHandleFree(struct ndr_push *ndr, int  \nflags, const struct epm_LookupHandleFree *r);\n+NTSTATUS ndr_pull_epm_LookupHandleFree(struct ndr_pull *ndr, int  \nflags, struct epm_LookupHandleFree *r);\n+NTSTATUS ndr_push_epm_InqObject(struct ndr_push *ndr, int flags,  \nconst struct epm_InqObject *r);\n+NTSTATUS ndr_pull_epm_InqObject(struct ndr_pull *ndr, int flags,  \nstruct epm_InqObject *r);\n+NTSTATUS ndr_push_epm_MgmtDelete(struct ndr_push *ndr, int flags,  \nconst struct epm_MgmtDelete *r);\n+NTSTATUS ndr_pull_epm_MgmtDelete(struct ndr_pull *ndr, int flags,  \nstruct epm_MgmtDelete *r);\n+NTSTATUS ndr_push_epm_MapAuth(struct ndr_push *ndr, int flags, const  \nstruct epm_MapAuth *r);\n+NTSTATUS ndr_pull_epm_MapAuth(struct ndr_pull *ndr, int flags,  \nstruct epm_MapAuth *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ \nndr_eventlog.c  */\n+\n+NTSTATUS ndr_push_eventlog_OpenUnknown0(struct ndr_push *ndr, int  \nndr_flags, const struct eventlog_OpenUnknown0 *r);\n+NTSTATUS ndr_pull_eventlog_OpenUnknown0(struct ndr_pull *ndr, int  \nndr_flags, struct eventlog_OpenUnknown0 *r);\n+NTSTATUS ndr_push_eventlog_ClearEventLogW(struct ndr_push *ndr, int  \nflags, const struct eventlog_ClearEventLogW *r);\n+NTSTATUS ndr_pull_eventlog_ClearEventLogW(struct ndr_pull *ndr, int  \nflags, struct eventlog_ClearEventLogW *r);\n+NTSTATUS ndr_push_eventlog_BackupEventLogW(struct ndr_push *ndr, int  \nflags, const struct eventlog_BackupEventLogW *r);\n+NTSTATUS ndr_pull_eventlog_BackupEventLogW(struct ndr_pull *ndr, int  \nflags, struct eventlog_BackupEventLogW *r);\n+NTSTATUS ndr_push_eventlog_CloseEventLog(struct ndr_push *ndr, int  \nflags, const struct eventlog_CloseEventLog *r);\n+NTSTATUS ndr_pull_eventlog_CloseEventLog(struct ndr_pull *ndr, int  \nflags, struct eventlog_CloseEventLog *r);\n+NTSTATUS ndr_push_eventlog_DeregisterEventSource(struct ndr_push  \n*ndr, int flags, const struct eventlog_DeregisterEventSource *r);\n+NTSTATUS ndr_pull_eventlog_DeregisterEventSource(struct ndr_pull  \n*ndr, int flags, struct eventlog_DeregisterEventSource *r);\n+NTSTATUS ndr_push_eventlog_GetNumRecords(struct ndr_push *ndr, int  \nflags, const struct eventlog_GetNumRecords *r);\n+NTSTATUS ndr_pull_eventlog_GetNumRecords(struct ndr_pull *ndr, int  \nflags, struct eventlog_GetNumRecords *r);\n+NTSTATUS ndr_push_eventlog_GetOldestRecord(struct ndr_push *ndr, int  \nflags, const struct eventlog_GetOldestRecord *r);\n+NTSTATUS ndr_pull_eventlog_GetOldestRecord(struct ndr_pull *ndr, int  \nflags, struct eventlog_GetOldestRecord *r);\n+NTSTATUS ndr_push_eventlog_ChangeNotify(struct ndr_push *ndr, int  \nflags, const struct eventlog_ChangeNotify *r);\n+NTSTATUS ndr_pull_eventlog_ChangeNotify(struct ndr_pull *ndr, int  \nflags, struct eventlog_ChangeNotify *r);\n+NTSTATUS ndr_push_eventlog_OpenEventLogW(struct ndr_push *ndr, int  \nflags, const struct eventlog_OpenEventLogW *r);\n+NTSTATUS ndr_pull_eventlog_OpenEventLogW(struct ndr_pull *ndr, int  \nflags, struct eventlog_OpenEventLogW *r);\n+NTSTATUS ndr_push_eventlog_RegisterEventSourceW(struct ndr_push  \n*ndr, int flags, const struct eventlog_RegisterEventSourceW *r);\n+NTSTATUS ndr_pull_eventlog_RegisterEventSourceW(struct ndr_pull  \n*ndr, int flags, struct eventlog_RegisterEventSourceW *r);\n+NTSTATUS ndr_push_eventlog_OpenBackupEventLogW(struct ndr_push *ndr,  \nint flags, const struct eventlog_OpenBackupEventLogW *r);\n+NTSTATUS ndr_pull_eventlog_OpenBackupEventLogW(struct ndr_pull *ndr,  \nint flags, struct eventlog_OpenBackupEventLogW *r);\n+NTSTATUS ndr_push_eventlog_ReadEventLogW(struct ndr_push *ndr, int  \nflags, const struct eventlog_ReadEventLogW *r);\n+NTSTATUS ndr_pull_eventlog_ReadEventLogW(struct ndr_pull *ndr, int  \nflags, struct eventlog_ReadEventLogW *r);\n+NTSTATUS ndr_push_eventlog_ReportEventW(struct ndr_push *ndr, int  \nflags, const struct eventlog_ReportEventW *r);\n+NTSTATUS ndr_pull_eventlog_ReportEventW(struct ndr_pull *ndr, int  \nflags, struct eventlog_ReportEventW *r);\n+NTSTATUS ndr_push_eventlog_ClearEventLogA(struct ndr_push *ndr, int  \nflags, const struct eventlog_ClearEventLogA *r);\n+NTSTATUS ndr_pull_eventlog_ClearEventLogA(struct ndr_pull *ndr, int  \nflags, struct eventlog_ClearEventLogA *r);\n+NTSTATUS ndr_push_eventlog_BackupEventLogA(struct ndr_push *ndr, int  \nflags, const struct eventlog_BackupEventLogA *r);\n+NTSTATUS ndr_pull_eventlog_BackupEventLogA(struct ndr_pull *ndr, int  \nflags, struct eventlog_BackupEventLogA *r);\n+NTSTATUS ndr_push_eventlog_OpenEventLogA(struct ndr_push *ndr, int  \nflags, const struct eventlog_OpenEventLogA *r);\n+NTSTATUS ndr_pull_eventlog_OpenEventLogA(struct ndr_pull *ndr, int  \nflags, struct eventlog_OpenEventLogA *r);\n+NTSTATUS ndr_push_eventlog_RegisterEventSourceA(struct ndr_push  \n*ndr, int flags, const struct eventlog_RegisterEventSourceA *r);\n+NTSTATUS ndr_pull_eventlog_RegisterEventSourceA(struct ndr_pull  \n*ndr, int flags, struct eventlog_RegisterEventSourceA *r);\n+NTSTATUS ndr_push_eventlog_OpenBackupEventLogA(struct ndr_push *ndr,  \nint flags, const struct eventlog_OpenBackupEventLogA *r);\n+NTSTATUS ndr_pull_eventlog_OpenBackupEventLogA(struct ndr_pull *ndr,  \nint flags, struct eventlog_OpenBackupEventLogA *r);\n+NTSTATUS ndr_push_eventlog_ReadEventLogA(struct ndr_push *ndr, int  \nflags, const struct eventlog_ReadEventLogA *r);\n+NTSTATUS ndr_pull_eventlog_ReadEventLogA(struct ndr_pull *ndr, int  \nflags, struct eventlog_ReadEventLogA *r);\n+NTSTATUS ndr_push_eventlog_ReportEventA(struct ndr_push *ndr, int  \nflags, const struct eventlog_ReportEventA *r);\n+NTSTATUS ndr_pull_eventlog_ReportEventA(struct ndr_pull *ndr, int  \nflags, struct eventlog_ReportEventA *r);\n+NTSTATUS ndr_push_eventlog_RegisterClusterSvc(struct ndr_push *ndr,  \nint flags, const struct eventlog_RegisterClusterSvc *r);\n+NTSTATUS ndr_pull_eventlog_RegisterClusterSvc(struct ndr_pull *ndr,  \nint flags, struct eventlog_RegisterClusterSvc *r);\n+NTSTATUS ndr_push_eventlog_DeregisterClusterSvc(struct ndr_push  \n*ndr, int flags, const struct eventlog_DeregisterClusterSvc *r);\n+NTSTATUS ndr_pull_eventlog_DeregisterClusterSvc(struct ndr_pull  \n*ndr, int flags, struct eventlog_DeregisterClusterSvc *r);\n+NTSTATUS ndr_push_eventlog_WriteClusterEvents(struct ndr_push *ndr,  \nint flags, const struct eventlog_WriteClusterEvents *r);\n+NTSTATUS ndr_pull_eventlog_WriteClusterEvents(struct ndr_pull *ndr,  \nint flags, struct eventlog_WriteClusterEvents *r);\n+NTSTATUS ndr_push_eventlog_GetLogIntormation(struct ndr_push *ndr,  \nint flags, const struct eventlog_GetLogIntormation *r);\n+NTSTATUS ndr_pull_eventlog_GetLogIntormation(struct ndr_pull *ndr,  \nint flags, struct eventlog_GetLogIntormation *r);\n+NTSTATUS ndr_push_eventlog_FlushEventLog(struct ndr_push *ndr, int  \nflags, const struct eventlog_FlushEventLog *r);\n+NTSTATUS ndr_pull_eventlog_FlushEventLog(struct ndr_pull *ndr, int  \nflags, struct eventlog_FlushEventLog *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ \nndr_initshutdown.c  */\n+\n+NTSTATUS ndr_push_initshutdown_String_sub(struct ndr_push *ndr, int  \nndr_flags, const struct initshutdown_String_sub *r);\n+NTSTATUS ndr_pull_initshutdown_String_sub(struct ndr_pull *ndr, int  \nndr_flags, struct initshutdown_String_sub *r);\n+NTSTATUS ndr_push_initshutdown_Init(struct ndr_push *ndr, int flags,  \nconst struct initshutdown_Init *r);\n+NTSTATUS ndr_pull_initshutdown_Init(struct ndr_pull *ndr, int flags,  \nstruct initshutdown_Init *r);\n+NTSTATUS ndr_push_initshutdown_Abort(struct ndr_push *ndr, int  \nflags, const struct initshutdown_Abort *r);\n+NTSTATUS ndr_pull_initshutdown_Abort(struct ndr_pull *ndr, int  \nflags, struct initshutdown_Abort *r);\n+NTSTATUS ndr_push_initshutdown_InitEx(struct ndr_push *ndr, int  \nflags, const struct initshutdown_InitEx *r);\n+NTSTATUS ndr_pull_initshutdown_InitEx(struct ndr_pull *ndr, int  \nflags, struct initshutdown_InitEx *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ndr_lsa.c  */\n+\n+NTSTATUS ndr_push_lsa_LUID(struct ndr_push *ndr, int ndr_flags,  \nconst struct lsa_LUID *r);\n+NTSTATUS ndr_pull_lsa_LUID(struct ndr_pull *ndr, int ndr_flags,  \nstruct lsa_LUID *r);\n+NTSTATUS ndr_push_lsa_PrivEntry(struct ndr_push *ndr, int ndr_flags,  \nconst struct lsa_PrivEntry *r);\n+NTSTATUS ndr_pull_lsa_PrivEntry(struct ndr_pull *ndr, int ndr_flags,  \nstruct lsa_PrivEntry *r);\n+NTSTATUS ndr_push_lsa_PrivArray(struct ndr_push *ndr, int ndr_flags,  \nconst struct lsa_PrivArray *r);\n+NTSTATUS ndr_pull_lsa_PrivArray(struct ndr_pull *ndr, int ndr_flags,  \nstruct lsa_PrivArray *r);\n+NTSTATUS ndr_push_lsa_QosInfo(struct ndr_push *ndr, int ndr_flags,  \nconst struct lsa_QosInfo *r);\n+NTSTATUS ndr_pull_lsa_QosInfo(struct ndr_pull *ndr, int ndr_flags,  \nstruct lsa_QosInfo *r);\n+NTSTATUS ndr_push_lsa_ObjectAttribute(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_ObjectAttribute *r);\n+NTSTATUS ndr_pull_lsa_ObjectAttribute(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_ObjectAttribute *r);\n+NTSTATUS ndr_push_lsa_AuditLogInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_AuditLogInfo *r);\n+NTSTATUS ndr_pull_lsa_AuditLogInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_AuditLogInfo *r);\n+NTSTATUS ndr_push_lsa_AuditEventsInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_AuditEventsInfo *r);\n+NTSTATUS ndr_pull_lsa_AuditEventsInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_AuditEventsInfo *r);\n+NTSTATUS ndr_push_lsa_DomainInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_DomainInfo *r);\n+NTSTATUS ndr_pull_lsa_DomainInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_DomainInfo *r);\n+NTSTATUS ndr_push_lsa_PDAccountInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_PDAccountInfo *r);\n+NTSTATUS ndr_pull_lsa_PDAccountInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_PDAccountInfo *r);\n+NTSTATUS ndr_push_lsa_ServerRole(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_ServerRole *r);\n+NTSTATUS ndr_pull_lsa_ServerRole(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_ServerRole *r);\n+NTSTATUS ndr_push_lsa_ReplicaSourceInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_ReplicaSourceInfo *r);\n+NTSTATUS ndr_pull_lsa_ReplicaSourceInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_ReplicaSourceInfo *r);\n+NTSTATUS ndr_push_lsa_DefaultQuotaInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_DefaultQuotaInfo *r);\n+NTSTATUS ndr_pull_lsa_DefaultQuotaInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_DefaultQuotaInfo *r);\n+NTSTATUS ndr_push_lsa_ModificationInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_ModificationInfo *r);\n+NTSTATUS ndr_pull_lsa_ModificationInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_ModificationInfo *r);\n+NTSTATUS ndr_push_lsa_AuditFullSetInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_AuditFullSetInfo *r);\n+NTSTATUS ndr_pull_lsa_AuditFullSetInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_AuditFullSetInfo *r);\n+NTSTATUS ndr_push_lsa_AuditFullQueryInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_AuditFullQueryInfo *r);\n+NTSTATUS ndr_pull_lsa_AuditFullQueryInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_AuditFullQueryInfo *r);\n+NTSTATUS ndr_push_lsa_DnsDomainInfo(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_DnsDomainInfo *r);\n+NTSTATUS ndr_pull_lsa_DnsDomainInfo(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_DnsDomainInfo *r);\n+NTSTATUS ndr_push_lsa_PolicyInformation(struct ndr_push *ndr, int  \nndr_flags, const union lsa_PolicyInformation *r);\n+NTSTATUS ndr_pull_lsa_PolicyInformation(struct ndr_pull *ndr, int  \nndr_flags, union lsa_PolicyInformation *r);\n+NTSTATUS ndr_push_lsa_SidPtr(struct ndr_push *ndr, int ndr_flags,  \nconst struct lsa_SidPtr *r);\n+NTSTATUS ndr_pull_lsa_SidPtr(struct ndr_pull *ndr, int ndr_flags,  \nstruct lsa_SidPtr *r);\n+NTSTATUS ndr_push_lsa_DomainList(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_DomainList *r);\n+NTSTATUS ndr_pull_lsa_DomainList(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_DomainList *r);\n+NTSTATUS ndr_push_lsa_SidType(struct ndr_push *ndr, int ndr_flags,  \nenum lsa_SidType r);\n+NTSTATUS ndr_pull_lsa_SidType(struct ndr_pull *ndr, int ndr_flags,  \nenum lsa_SidType *r);\n+NTSTATUS ndr_push_lsa_TranslatedSid(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TranslatedSid *r);\n+NTSTATUS ndr_pull_lsa_TranslatedSid(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TranslatedSid *r);\n+NTSTATUS ndr_push_lsa_TransSidArray(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TransSidArray *r);\n+NTSTATUS ndr_pull_lsa_TransSidArray(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TransSidArray *r);\n+NTSTATUS ndr_push_lsa_RefDomainList(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_RefDomainList *r);\n+NTSTATUS ndr_pull_lsa_RefDomainList(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_RefDomainList *r);\n+NTSTATUS ndr_push_lsa_TranslatedName(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TranslatedName *r);\n+NTSTATUS ndr_pull_lsa_TranslatedName(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TranslatedName *r);\n+NTSTATUS ndr_push_lsa_TransNameArray(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TransNameArray *r);\n+NTSTATUS ndr_pull_lsa_TransNameArray(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TransNameArray *r);\n+NTSTATUS ndr_push_lsa_LUIDAttribute(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_LUIDAttribute *r);\n+NTSTATUS ndr_pull_lsa_LUIDAttribute(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_LUIDAttribute *r);\n+NTSTATUS ndr_push_lsa_PrivilegeSet(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_PrivilegeSet *r);\n+NTSTATUS ndr_pull_lsa_PrivilegeSet(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_PrivilegeSet *r);\n+NTSTATUS ndr_push_lsa_DATA_BUF(struct ndr_push *ndr, int ndr_flags,  \nconst struct lsa_DATA_BUF *r);\n+NTSTATUS ndr_pull_lsa_DATA_BUF(struct ndr_pull *ndr, int ndr_flags,  \nstruct lsa_DATA_BUF *r);\n+NTSTATUS ndr_push_lsa_DATA_BUF2(struct ndr_push *ndr, int ndr_flags,  \nconst struct lsa_DATA_BUF2 *r);\n+NTSTATUS ndr_pull_lsa_DATA_BUF2(struct ndr_pull *ndr, int ndr_flags,  \nstruct lsa_DATA_BUF2 *r);\n+NTSTATUS ndr_push_lsa_TrustDomInfoEnum(struct ndr_push *ndr, int  \nndr_flags, enum lsa_TrustDomInfoEnum r);\n+NTSTATUS ndr_pull_lsa_TrustDomInfoEnum(struct ndr_pull *ndr, int  \nndr_flags, enum lsa_TrustDomInfoEnum *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoName(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TrustDomainInfoName *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoName(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TrustDomainInfoName *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoPosixOffset(struct ndr_push  \n*ndr, int ndr_flags, const struct lsa_TrustDomainInfoPosixOffset *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoPosixOffset(struct ndr_pull  \n*ndr, int ndr_flags, struct lsa_TrustDomainInfoPosixOffset *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoPassword(struct ndr_push *ndr,  \nint ndr_flags, const struct lsa_TrustDomainInfoPassword *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoPassword(struct ndr_pull *ndr,  \nint ndr_flags, struct lsa_TrustDomainInfoPassword *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoBasic(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TrustDomainInfoBasic *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoBasic(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TrustDomainInfoBasic *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoInfoEx(struct ndr_push *ndr,  \nint ndr_flags, const struct lsa_TrustDomainInfoInfoEx *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoInfoEx(struct ndr_pull *ndr,  \nint ndr_flags, struct lsa_TrustDomainInfoInfoEx *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoBuffer(struct ndr_push *ndr,  \nint ndr_flags, const struct lsa_TrustDomainInfoBuffer *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoBuffer(struct ndr_pull *ndr,  \nint ndr_flags, struct lsa_TrustDomainInfoBuffer *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoAuthInfo(struct ndr_push *ndr,  \nint ndr_flags, const struct lsa_TrustDomainInfoAuthInfo *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoAuthInfo(struct ndr_pull *ndr,  \nint ndr_flags, struct lsa_TrustDomainInfoAuthInfo *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoFullInfo(struct ndr_push *ndr,  \nint ndr_flags, const struct lsa_TrustDomainInfoFullInfo *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoFullInfo(struct ndr_pull *ndr,  \nint ndr_flags, struct lsa_TrustDomainInfoFullInfo *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfo11(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TrustDomainInfo11 *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfo11(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TrustDomainInfo11 *r);\n+NTSTATUS ndr_push_lsa_TrustDomainInfoInfoAll(struct ndr_push *ndr,  \nint ndr_flags, const struct lsa_TrustDomainInfoInfoAll *r);\n+NTSTATUS ndr_pull_lsa_TrustDomainInfoInfoAll(struct ndr_pull *ndr,  \nint ndr_flags, struct lsa_TrustDomainInfoInfoAll *r);\n+NTSTATUS ndr_push_lsa_TrustedDomainInfo(struct ndr_push *ndr, int  \nndr_flags, const union lsa_TrustedDomainInfo *r);\n+NTSTATUS ndr_pull_lsa_TrustedDomainInfo(struct ndr_pull *ndr, int  \nndr_flags, union lsa_TrustedDomainInfo *r);\n+NTSTATUS ndr_push_lsa_DATA_BUF_PTR(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_DATA_BUF_PTR *r);\n+NTSTATUS ndr_pull_lsa_DATA_BUF_PTR(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_DATA_BUF_PTR *r);\n+NTSTATUS ndr_push_lsa_RightSet(struct ndr_push *ndr, int ndr_flags,  \nconst struct lsa_RightSet *r);\n+NTSTATUS ndr_pull_lsa_RightSet(struct ndr_pull *ndr, int ndr_flags,  \nstruct lsa_RightSet *r);\n+NTSTATUS ndr_push_lsa_StringPointer(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_StringPointer *r);\n+NTSTATUS ndr_pull_lsa_StringPointer(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_StringPointer *r);\n+NTSTATUS ndr_push_lsa_DomainListEx(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_DomainListEx *r);\n+NTSTATUS ndr_pull_lsa_DomainListEx(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_DomainListEx *r);\n+NTSTATUS ndr_push_lsa_DomainInfoKerberos(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_DomainInfoKerberos *r);\n+NTSTATUS ndr_pull_lsa_DomainInfoKerberos(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_DomainInfoKerberos *r);\n+NTSTATUS ndr_push_lsa_DomainInfoEfs(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_DomainInfoEfs *r);\n+NTSTATUS ndr_pull_lsa_DomainInfoEfs(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_DomainInfoEfs *r);\n+NTSTATUS ndr_push_lsa_DomainInformationPolicy(struct ndr_push *ndr,  \nint ndr_flags, const union lsa_DomainInformationPolicy *r);\n+NTSTATUS ndr_pull_lsa_DomainInformationPolicy(struct ndr_pull *ndr,  \nint ndr_flags, union lsa_DomainInformationPolicy *r);\n+NTSTATUS ndr_push_lsa_TranslatedName2(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TranslatedName2 *r);\n+NTSTATUS ndr_pull_lsa_TranslatedName2(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TranslatedName2 *r);\n+NTSTATUS ndr_push_lsa_TransNameArray2(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TransNameArray2 *r);\n+NTSTATUS ndr_pull_lsa_TransNameArray2(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TransNameArray2 *r);\n+NTSTATUS ndr_push_lsa_TranslatedSid2(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TranslatedSid2 *r);\n+NTSTATUS ndr_pull_lsa_TranslatedSid2(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TranslatedSid2 *r);\n+NTSTATUS ndr_push_lsa_TransSidArray2(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TransSidArray2 *r);\n+NTSTATUS ndr_pull_lsa_TransSidArray2(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TransSidArray2 *r);\n+NTSTATUS ndr_push_lsa_TranslatedSid3(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TranslatedSid3 *r);\n+NTSTATUS ndr_pull_lsa_TranslatedSid3(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TranslatedSid3 *r);\n+NTSTATUS ndr_push_lsa_TransSidArray3(struct ndr_push *ndr, int  \nndr_flags, const struct lsa_TransSidArray3 *r);\n+NTSTATUS ndr_pull_lsa_TransSidArray3(struct ndr_pull *ndr, int  \nndr_flags, struct lsa_TransSidArray3 *r);\n+NTSTATUS ndr_push_lsa_Close(struct ndr_push *ndr, int flags, const  \nstruct lsa_Close *r);\n+NTSTATUS ndr_pull_lsa_Close(struct ndr_pull *ndr, int flags, struct  \nlsa_Close *r);\n+NTSTATUS ndr_push_lsa_Delete(struct ndr_push *ndr, int flags, const  \nstruct lsa_Delete *r);\n+NTSTATUS ndr_pull_lsa_Delete(struct ndr_pull *ndr, int flags, struct  \nlsa_Delete *r);\n+NTSTATUS ndr_push_lsa_EnumPrivs(struct ndr_push *ndr, int flags,  \nconst struct lsa_EnumPrivs *r);\n+NTSTATUS ndr_pull_lsa_EnumPrivs(struct ndr_pull *ndr, int flags,  \nstruct lsa_EnumPrivs *r);\n+NTSTATUS ndr_push_lsa_QuerySecurity(struct ndr_push *ndr, int flags,  \nconst struct lsa_QuerySecurity *r);\n+NTSTATUS ndr_pull_lsa_QuerySecurity(struct ndr_pull *ndr, int flags,  \nstruct lsa_QuerySecurity *r);\n+NTSTATUS ndr_push_lsa_SetSecObj(struct ndr_push *ndr, int flags,  \nconst struct lsa_SetSecObj *r);\n+NTSTATUS ndr_pull_lsa_SetSecObj(struct ndr_pull *ndr, int flags,  \nstruct lsa_SetSecObj *r);\n+NTSTATUS ndr_push_lsa_ChangePassword(struct ndr_push *ndr, int  \nflags, const struct lsa_ChangePassword *r);\n+NTSTATUS ndr_pull_lsa_ChangePassword(struct ndr_pull *ndr, int  \nflags, struct lsa_ChangePassword *r);\n+NTSTATUS ndr_push_lsa_OpenPolicy(struct ndr_push *ndr, int flags,  \nconst struct lsa_OpenPolicy *r);\n+NTSTATUS ndr_pull_lsa_OpenPolicy(struct ndr_pull *ndr, int flags,  \nstruct lsa_OpenPolicy *r);\n+NTSTATUS ndr_push_lsa_QueryInfoPolicy(struct ndr_push *ndr, int  \nflags, const struct lsa_QueryInfoPolicy *r);\n+NTSTATUS ndr_pull_lsa_QueryInfoPolicy(struct ndr_pull *ndr, int  \nflags, struct lsa_QueryInfoPolicy *r);\n+NTSTATUS ndr_push_lsa_SetInfoPolicy(struct ndr_push *ndr, int flags,  \nconst struct lsa_SetInfoPolicy *r);\n+NTSTATUS ndr_pull_lsa_SetInfoPolicy(struct ndr_pull *ndr, int flags,  \nstruct lsa_SetInfoPolicy *r);\n+NTSTATUS ndr_push_lsa_ClearAuditLog(struct ndr_push *ndr, int flags,  \nconst struct lsa_ClearAuditLog *r);\n+NTSTATUS ndr_pull_lsa_ClearAuditLog(struct ndr_pull *ndr, int flags,  \nstruct lsa_ClearAuditLog *r);\n+NTSTATUS ndr_push_lsa_CreateAccount(struct ndr_push *ndr, int flags,  \nconst struct lsa_CreateAccount *r);\n+NTSTATUS ndr_pull_lsa_CreateAccount(struct ndr_pull *ndr, int flags,  \nstruct lsa_CreateAccount *r);\n+NTSTATUS ndr_push_lsa_EnumAccounts(struct ndr_push *ndr, int flags,  \nconst struct lsa_EnumAccounts *r);\n+NTSTATUS ndr_pull_lsa_EnumAccounts(struct ndr_pull *ndr, int flags,  \nstruct lsa_EnumAccounts *r);\n+NTSTATUS ndr_push_lsa_CreateTrustedDomain(struct ndr_push *ndr, int  \nflags, const struct lsa_CreateTrustedDomain *r);\n+NTSTATUS ndr_pull_lsa_CreateTrustedDomain(struct ndr_pull *ndr, int  \nflags, struct lsa_CreateTrustedDomain *r);\n+NTSTATUS ndr_push_lsa_EnumTrustDom(struct ndr_push *ndr, int flags,  \nconst struct lsa_EnumTrustDom *r);\n+NTSTATUS ndr_pull_lsa_EnumTrustDom(struct ndr_pull *ndr, int flags,  \nstruct lsa_EnumTrustDom *r);\n+NTSTATUS ndr_push_lsa_LookupNames(struct ndr_push *ndr, int flags,  \nconst struct lsa_LookupNames *r);\n+NTSTATUS ndr_pull_lsa_LookupNames(struct ndr_pull *ndr, int flags,  \nstruct lsa_LookupNames *r);\n+NTSTATUS ndr_push_lsa_LookupSids(struct ndr_push *ndr, int flags,  \nconst struct lsa_LookupSids *r);\n+NTSTATUS ndr_pull_lsa_LookupSids(struct ndr_pull *ndr, int flags,  \nstruct lsa_LookupSids *r);\n+NTSTATUS ndr_push_lsa_CreateSecret(struct ndr_push *ndr, int flags,  \nconst struct lsa_CreateSecret *r);\n+NTSTATUS ndr_pull_lsa_CreateSecret(struct ndr_pull *ndr, int flags,  \nstruct lsa_CreateSecret *r);\n+NTSTATUS ndr_push_lsa_OpenAccount(struct ndr_push *ndr, int flags,  \nconst struct lsa_OpenAccount *r);\n+NTSTATUS ndr_pull_lsa_OpenAccount(struct ndr_pull *ndr, int flags,  \nstruct lsa_OpenAccount *r);\n+NTSTATUS ndr_push_lsa_EnumPrivsAccount(struct ndr_push *ndr, int  \nflags, const struct lsa_EnumPrivsAccount *r);\n+NTSTATUS ndr_pull_lsa_EnumPrivsAccount(struct ndr_pull *ndr, int  \nflags, struct lsa_EnumPrivsAccount *r);\n+NTSTATUS ndr_push_lsa_AddPrivilegesToAccount(struct ndr_push *ndr,  \nint flags, const struct lsa_AddPrivilegesToAccount *r);\n+NTSTATUS ndr_pull_lsa_AddPrivilegesToAccount(struct ndr_pull *ndr,  \nint flags, struct lsa_AddPrivilegesToAccount *r);\n+NTSTATUS ndr_push_lsa_RemovePrivilegesFromAccount(struct ndr_push  \n*ndr, int flags, const struct lsa_RemovePrivilegesFromAccount *r);\n+NTSTATUS ndr_pull_lsa_RemovePrivilegesFromAccount(struct ndr_pull  \n*ndr, int flags, struct lsa_RemovePrivilegesFromAccount *r);\n+NTSTATUS ndr_push_lsa_GetQuotasForAccount(struct ndr_push *ndr, int  \nflags, const struct lsa_GetQuotasForAccount *r);\n+NTSTATUS ndr_pull_lsa_GetQuotasForAccount(struct ndr_pull *ndr, int  \nflags, struct lsa_GetQuotasForAccount *r);\n+NTSTATUS ndr_push_lsa_SetQuotasForAccount(struct ndr_push *ndr, int  \nflags, const struct lsa_SetQuotasForAccount *r);\n+NTSTATUS ndr_pull_lsa_SetQuotasForAccount(struct ndr_pull *ndr, int  \nflags, struct lsa_SetQuotasForAccount *r);\n+NTSTATUS ndr_push_lsa_GetSystemAccessAccount(struct ndr_push *ndr,  \nint flags, const struct lsa_GetSystemAccessAccount *r);\n+NTSTATUS ndr_pull_lsa_GetSystemAccessAccount(struct ndr_pull *ndr,  \nint flags, struct lsa_GetSystemAccessAccount *r);\n+NTSTATUS ndr_push_lsa_SetSystemAccessAccount(struct ndr_push *ndr,  \nint flags, const struct lsa_SetSystemAccessAccount *r);\n+NTSTATUS ndr_pull_lsa_SetSystemAccessAccount(struct ndr_pull *ndr,  \nint flags, struct lsa_SetSystemAccessAccount *r);\n+NTSTATUS ndr_push_lsa_OpenTrustedDomain(struct ndr_push *ndr, int  \nflags, const struct lsa_OpenTrustedDomain *r);\n+NTSTATUS ndr_pull_lsa_OpenTrustedDomain(struct ndr_pull *ndr, int  \nflags, struct lsa_OpenTrustedDomain *r);\n+NTSTATUS ndr_push_lsa_QueryTrustedDomainInfo(struct ndr_push *ndr,  \nint flags, const struct lsa_QueryTrustedDomainInfo *r);\n+NTSTATUS ndr_pull_lsa_QueryTrustedDomainInfo(struct ndr_pull *ndr,  \nint flags, struct lsa_QueryTrustedDomainInfo *r);\n+NTSTATUS ndr_push_lsa_SetInformationTrustedDomain(struct ndr_push  \n*ndr, int flags, const struct lsa_SetInformationTrustedDomain *r);\n+NTSTATUS ndr_pull_lsa_SetInformationTrustedDomain(struct ndr_pull  \n*ndr, int flags, struct lsa_SetInformationTrustedDomain *r);\n+NTSTATUS ndr_push_lsa_OpenSecret(struct ndr_push *ndr, int flags,  \nconst struct lsa_OpenSecret *r);\n+NTSTATUS ndr_pull_lsa_OpenSecret(struct ndr_pull *ndr, int flags,  \nstruct lsa_OpenSecret *r);\n+NTSTATUS ndr_push_lsa_SetSecret(struct ndr_push *ndr, int flags,  \nconst struct lsa_SetSecret *r);\n+NTSTATUS ndr_pull_lsa_SetSecret(struct ndr_pull *ndr, int flags,  \nstruct lsa_SetSecret *r);\n+NTSTATUS ndr_push_lsa_QuerySecret(struct ndr_push *ndr, int flags,  \nconst struct lsa_QuerySecret *r);\n+NTSTATUS ndr_pull_lsa_QuerySecret(struct ndr_pull *ndr, int flags,  \nstruct lsa_QuerySecret *r);\n+NTSTATUS ndr_push_lsa_LookupPrivValue(struct ndr_push *ndr, int  \nflags, const struct lsa_LookupPrivValue *r);\n+NTSTATUS ndr_pull_lsa_LookupPrivValue(struct ndr_pull *ndr, int  \nflags, struct lsa_LookupPrivValue *r);\n+NTSTATUS ndr_push_lsa_LookupPrivName(struct ndr_push *ndr, int  \nflags, const struct lsa_LookupPrivName *r);\n+NTSTATUS ndr_pull_lsa_LookupPrivName(struct ndr_pull *ndr, int  \nflags, struct lsa_LookupPrivName *r);\n+NTSTATUS ndr_push_lsa_LookupPrivDisplayName(struct ndr_push *ndr,  \nint flags, const struct lsa_LookupPrivDisplayName *r);\n+NTSTATUS ndr_pull_lsa_LookupPrivDisplayName(struct ndr_pull *ndr,  \nint flags, struct lsa_LookupPrivDisplayName *r);\n+NTSTATUS ndr_push_lsa_DeleteObject(struct ndr_push *ndr, int flags,  \nconst struct lsa_DeleteObject *r);\n+NTSTATUS ndr_pull_lsa_DeleteObject(struct ndr_pull *ndr, int flags,  \nstruct lsa_DeleteObject *r);\n+NTSTATUS ndr_push_lsa_EnumAccountsWithUserRight(struct ndr_push  \n*ndr, int flags, const struct lsa_EnumAccountsWithUserRight *r);\n+NTSTATUS ndr_pull_lsa_EnumAccountsWithUserRight(struct ndr_pull  \n*ndr, int flags, struct lsa_EnumAccountsWithUserRight *r);\n+NTSTATUS ndr_push_lsa_EnumAccountRights(struct ndr_push *ndr, int  \nflags, const struct lsa_EnumAccountRights *r);\n+NTSTATUS ndr_pull_lsa_EnumAccountRights(struct ndr_pull *ndr, int  \nflags, struct lsa_EnumAccountRights *r);\n+NTSTATUS ndr_push_lsa_AddAccountRights(struct ndr_push *ndr, int  \nflags, const struct lsa_AddAccountRights *r);\n+NTSTATUS ndr_pull_lsa_AddAccountRights(struct ndr_pull *ndr, int  \nflags, struct lsa_AddAccountRights *r);\n+NTSTATUS ndr_push_lsa_RemoveAccountRights(struct ndr_push *ndr, int  \nflags, const struct lsa_RemoveAccountRights *r);\n+NTSTATUS ndr_pull_lsa_RemoveAccountRights(struct ndr_pull *ndr, int  \nflags, struct lsa_RemoveAccountRights *r);\n+NTSTATUS ndr_push_lsa_QueryTrustedDomainInfoBySid(struct ndr_push  \n*ndr, int flags, const struct lsa_QueryTrustedDomainInfoBySid *r);\n+NTSTATUS ndr_pull_lsa_QueryTrustedDomainInfoBySid(struct ndr_pull  \n*ndr, int flags, struct lsa_QueryTrustedDomainInfoBySid *r);\n+NTSTATUS ndr_push_lsa_SetTrustedDomainInfo(struct ndr_push *ndr, int  \nflags, const struct lsa_SetTrustedDomainInfo *r);\n+NTSTATUS ndr_pull_lsa_SetTrustedDomainInfo(struct ndr_pull *ndr, int  \nflags, struct lsa_SetTrustedDomainInfo *r);\n+NTSTATUS ndr_push_lsa_DeleteTrustedDomain(struct ndr_push *ndr, int  \nflags, const struct lsa_DeleteTrustedDomain *r);\n+NTSTATUS ndr_pull_lsa_DeleteTrustedDomain(struct ndr_pull *ndr, int  \nflags, struct lsa_DeleteTrustedDomain *r);\n+NTSTATUS ndr_push_lsa_StorePrivateData(struct ndr_push *ndr, int  \nflags, const struct lsa_StorePrivateData *r);\n+NTSTATUS ndr_pull_lsa_StorePrivateData(struct ndr_pull *ndr, int  \nflags, struct lsa_StorePrivateData *r);\n+NTSTATUS ndr_push_lsa_RetrievePrivateData(struct ndr_push *ndr, int  \nflags, const struct lsa_RetrievePrivateData *r);\n+NTSTATUS ndr_pull_lsa_RetrievePrivateData(struct ndr_pull *ndr, int  \nflags, struct lsa_RetrievePrivateData *r);\n+NTSTATUS ndr_push_lsa_OpenPolicy2(struct ndr_push *ndr, int flags,  \nconst struct lsa_OpenPolicy2 *r);\n+NTSTATUS ndr_pull_lsa_OpenPolicy2(struct ndr_pull *ndr, int flags,  \nstruct lsa_OpenPolicy2 *r);\n+NTSTATUS ndr_push_lsa_GetUserName(struct ndr_push *ndr, int flags,  \nconst struct lsa_GetUserName *r);\n+NTSTATUS ndr_pull_lsa_GetUserName(struct ndr_pull *ndr, int flags,  \nstruct lsa_GetUserName *r);\n+NTSTATUS ndr_push_lsa_QueryInfoPolicy2(struct ndr_push *ndr, int  \nflags, const struct lsa_QueryInfoPolicy2 *r);\n+NTSTATUS ndr_pull_lsa_QueryInfoPolicy2(struct ndr_pull *ndr, int  \nflags, struct lsa_QueryInfoPolicy2 *r);\n+NTSTATUS ndr_push_lsa_SetInfoPolicy2(struct ndr_push *ndr, int  \nflags, const struct lsa_SetInfoPolicy2 *r);\n+NTSTATUS ndr_pull_lsa_SetInfoPolicy2(struct ndr_pull *ndr, int  \nflags, struct lsa_SetInfoPolicy2 *r);\n+NTSTATUS ndr_push_lsa_QueryTrustedDomainInfoByName(struct ndr_push  \n*ndr, int flags, const struct lsa_QueryTrustedDomainInfoByName *r);\n+NTSTATUS ndr_pull_lsa_QueryTrustedDomainInfoByName(struct ndr_pull  \n*ndr, int flags, struct lsa_QueryTrustedDomainInfoByName *r);\n+NTSTATUS ndr_push_lsa_SetTrustedDomainInfoByName(struct ndr_push  \n*ndr, int flags, const struct lsa_SetTrustedDomainInfoByName *r);\n+NTSTATUS ndr_pull_lsa_SetTrustedDomainInfoByName(struct ndr_pull  \n*ndr, int flags, struct lsa_SetTrustedDomainInfoByName *r);\n+NTSTATUS ndr_push_lsa_EnumTrustedDomainsEx(struct ndr_push *ndr, int  \nflags, const struct lsa_EnumTrustedDomainsEx *r);\n+NTSTATUS ndr_pull_lsa_EnumTrustedDomainsEx(struct ndr_pull *ndr, int  \nflags, struct lsa_EnumTrustedDomainsEx *r);\n+NTSTATUS ndr_push_lsa_CreateTrustedDomainEx(struct ndr_push *ndr,  \nint flags, const struct lsa_CreateTrustedDomainEx *r);\n+NTSTATUS ndr_pull_lsa_CreateTrustedDomainEx(struct ndr_pull *ndr,  \nint flags, struct lsa_CreateTrustedDomainEx *r);\n+NTSTATUS ndr_push_lsa_CloseTrustedDomainEx(struct ndr_push *ndr, int  \nflags, const struct lsa_CloseTrustedDomainEx *r);\n+NTSTATUS ndr_pull_lsa_CloseTrustedDomainEx(struct ndr_pull *ndr, int  \nflags, struct lsa_CloseTrustedDomainEx *r);\n+NTSTATUS ndr_push_lsa_QueryDomainInformationPolicy(struct ndr_push  \n*ndr, int flags, const struct lsa_QueryDomainInformationPolicy *r);\n+NTSTATUS ndr_pull_lsa_QueryDomainInformationPolicy(struct ndr_pull  \n*ndr, int flags, struct lsa_QueryDomainInformationPolicy *r);\n+NTSTATUS ndr_push_lsa_SetDomainInformationPolicy(struct ndr_push  \n*ndr, int flags, const struct lsa_SetDomainInformationPolicy *r);\n+NTSTATUS ndr_pull_lsa_SetDomainInformationPolicy(struct ndr_pull  \n*ndr, int flags, struct lsa_SetDomainInformationPolicy *r);\n+NTSTATUS ndr_push_lsa_OpenTrustedDomainByName(struct ndr_push *ndr,  \nint flags, const struct lsa_OpenTrustedDomainByName *r);\n+NTSTATUS ndr_pull_lsa_OpenTrustedDomainByName(struct ndr_pull *ndr,  \nint flags, struct lsa_OpenTrustedDomainByName *r);\n+NTSTATUS ndr_push_lsa_TestCall(struct ndr_push *ndr, int flags,  \nconst struct lsa_TestCall *r);\n+NTSTATUS ndr_pull_lsa_TestCall(struct ndr_pull *ndr, int flags,  \nstruct lsa_TestCall *r);\n+NTSTATUS ndr_push_lsa_LookupSids2(struct ndr_push *ndr, int flags,  \nconst struct lsa_LookupSids2 *r);\n+NTSTATUS ndr_pull_lsa_LookupSids2(struct ndr_pull *ndr, int flags,  \nstruct lsa_LookupSids2 *r);\n+NTSTATUS ndr_push_lsa_LookupNames2(struct ndr_push *ndr, int flags,  \nconst struct lsa_LookupNames2 *r);\n+NTSTATUS ndr_pull_lsa_LookupNames2(struct ndr_pull *ndr, int flags,  \nstruct lsa_LookupNames2 *r);\n+NTSTATUS ndr_push_lsa_CreateTrustedDomainEx2(struct ndr_push *ndr,  \nint flags, const struct lsa_CreateTrustedDomainEx2 *r);\n+NTSTATUS ndr_pull_lsa_CreateTrustedDomainEx2(struct ndr_pull *ndr,  \nint flags, struct lsa_CreateTrustedDomainEx2 *r);\n+NTSTATUS ndr_push_lsa_CREDRWRITE(struct ndr_push *ndr, int flags,  \nconst struct lsa_CREDRWRITE *r);\n+NTSTATUS ndr_pull_lsa_CREDRWRITE(struct ndr_pull *ndr, int flags,  \nstruct lsa_CREDRWRITE *r);\n+NTSTATUS ndr_push_lsa_CREDRREAD(struct ndr_push *ndr, int flags,  \nconst struct lsa_CREDRREAD *r);\n+NTSTATUS ndr_pull_lsa_CREDRREAD(struct ndr_pull *ndr, int flags,  \nstruct lsa_CREDRREAD *r);\n+NTSTATUS ndr_push_lsa_CREDRENUMERATE(struct ndr_push *ndr, int  \nflags, const struct lsa_CREDRENUMERATE *r);\n+NTSTATUS ndr_pull_lsa_CREDRENUMERATE(struct ndr_pull *ndr, int  \nflags, struct lsa_CREDRENUMERATE *r);\n+NTSTATUS ndr_push_lsa_CREDRWRITEDOMAINCREDENTIALS(struct ndr_push  \n*ndr, int flags, const struct lsa_CREDRWRITEDOMAINCREDENTIALS *r);\n+NTSTATUS ndr_pull_lsa_CREDRWRITEDOMAINCREDENTIALS(struct ndr_pull  \n*ndr, int flags, struct lsa_CREDRWRITEDOMAINCREDENTIALS *r);\n+NTSTATUS ndr_push_lsa_CREDRREADDOMAINCREDENTIALS(struct ndr_push  \n*ndr, int flags, const struct lsa_CREDRREADDOMAINCREDENTIALS *r);\n+NTSTATUS ndr_pull_lsa_CREDRREADDOMAINCREDENTIALS(struct ndr_pull  \n*ndr, int flags, struct lsa_CREDRREADDOMAINCREDENTIALS *r);\n+NTSTATUS ndr_push_lsa_CREDRDELETE(struct ndr_push *ndr, int flags,  \nconst struct lsa_CREDRDELETE *r);\n+NTSTATUS ndr_pull_lsa_CREDRDELETE(struct ndr_pull *ndr, int flags,  \nstruct lsa_CREDRDELETE *r);\n+NTSTATUS ndr_push_lsa_CREDRGETTARGETINFO(struct ndr_push *ndr, int  \nflags, const struct lsa_CREDRGETTARGETINFO *r);\n+NTSTATUS ndr_pull_lsa_CREDRGETTARGETINFO(struct ndr_pull *ndr, int  \nflags, struct lsa_CREDRGETTARGETINFO *r);\n+NTSTATUS ndr_push_lsa_CREDRPROFILELOADED(struct ndr_push *ndr, int  \nflags, const struct lsa_CREDRPROFILELOADED *r);\n+NTSTATUS ndr_pull_lsa_CREDRPROFILELOADED(struct ndr_pull *ndr, int  \nflags, struct lsa_CREDRPROFILELOADED *r);\n+NTSTATUS ndr_push_lsa_LookupNames3(struct ndr_push *ndr, int flags,  \nconst struct lsa_LookupNames3 *r);\n+NTSTATUS ndr_pull_lsa_LookupNames3(struct ndr_pull *ndr, int flags,  \nstruct lsa_LookupNames3 *r);\n+NTSTATUS ndr_push_lsa_CREDRGETSESSIONTYPES(struct ndr_push *ndr, int  \nflags, const struct lsa_CREDRGETSESSIONTYPES *r);\n+NTSTATUS ndr_pull_lsa_CREDRGETSESSIONTYPES(struct ndr_pull *ndr, int  \nflags, struct lsa_CREDRGETSESSIONTYPES *r);\n+NTSTATUS ndr_push_lsa_LSARREGISTERAUDITEVENT(struct ndr_push *ndr,  \nint flags, const struct lsa_LSARREGISTERAUDITEVENT *r);\n+NTSTATUS ndr_pull_lsa_LSARREGISTERAUDITEVENT(struct ndr_pull *ndr,  \nint flags, struct lsa_LSARREGISTERAUDITEVENT *r);\n+NTSTATUS ndr_push_lsa_LSARGENAUDITEVENT(struct ndr_push *ndr, int  \nflags, const struct lsa_LSARGENAUDITEVENT *r);\n+NTSTATUS ndr_pull_lsa_LSARGENAUDITEVENT(struct ndr_pull *ndr, int  \nflags, struct lsa_LSARGENAUDITEVENT *r);\n+NTSTATUS ndr_push_lsa_LSARUNREGISTERAUDITEVENT(struct ndr_push *ndr,  \nint flags, const struct lsa_LSARUNREGISTERAUDITEVENT *r);\n+NTSTATUS ndr_pull_lsa_LSARUNREGISTERAUDITEVENT(struct ndr_pull *ndr,  \nint flags, struct lsa_LSARUNREGISTERAUDITEVENT *r);\n+NTSTATUS ndr_push_lsa_LSARQUERYFORESTTRUSTINFORMATION(struct  \nndr_push *ndr, int flags, const struct  \nlsa_LSARQUERYFORESTTRUSTINFORMATION *r);\n+NTSTATUS ndr_pull_lsa_LSARQUERYFORESTTRUSTINFORMATION(struct  \nndr_pull *ndr, int flags, struct lsa_LSARQUERYFORESTTRUSTINFORMATION  \n*r);\n+NTSTATUS ndr_push_lsa_LSARSETFORESTTRUSTINFORMATION(struct ndr_push  \n*ndr, int flags, const struct lsa_LSARSETFORESTTRUSTINFORMATION *r);\n+NTSTATUS ndr_pull_lsa_LSARSETFORESTTRUSTINFORMATION(struct ndr_pull  \n*ndr, int flags, struct lsa_LSARSETFORESTTRUSTINFORMATION *r);\n+NTSTATUS ndr_push_lsa_CREDRRENAME(struct ndr_push *ndr, int flags,  \nconst struct lsa_CREDRRENAME *r);\n+NTSTATUS ndr_pull_lsa_CREDRRENAME(struct ndr_pull *ndr, int flags,  \nstruct lsa_CREDRRENAME *r);\n+NTSTATUS ndr_push_lsa_LookupSids3(struct ndr_push *ndr, int flags,  \nconst struct lsa_LookupSids3 *r);\n+NTSTATUS ndr_pull_lsa_LookupSids3(struct ndr_pull *ndr, int flags,  \nstruct lsa_LookupSids3 *r);\n+NTSTATUS ndr_push_lsa_LookupNames4(struct ndr_push *ndr, int flags,  \nconst struct lsa_LookupNames4 *r);\n+NTSTATUS ndr_pull_lsa_LookupNames4(struct ndr_pull *ndr, int flags,  \nstruct lsa_LookupNames4 *r);\n+NTSTATUS ndr_push_lsa_LSAROPENPOLICYSCE(struct ndr_push *ndr, int  \nflags, const struct lsa_LSAROPENPOLICYSCE *r);\n+NTSTATUS ndr_pull_lsa_LSAROPENPOLICYSCE(struct ndr_pull *ndr, int  \nflags, struct lsa_LSAROPENPOLICYSCE *r);\n+NTSTATUS ndr_push_lsa_LSARADTREGISTERSECURITYEVENTSOURCE(struct  \nndr_push *ndr, int flags, const struct  \nlsa_LSARADTREGISTERSECURITYEVENTSOURCE *r);\n+NTSTATUS ndr_pull_lsa_LSARADTREGISTERSECURITYEVENTSOURCE(struct  \nndr_pull *ndr, int flags, struct  \nlsa_LSARADTREGISTERSECURITYEVENTSOURCE *r);\n+NTSTATUS ndr_push_lsa_LSARADTUNREGISTERSECURITYEVENTSOURCE(struct  \nndr_push *ndr, int flags, const struct  \nlsa_LSARADTUNREGISTERSECURITYEVENTSOURCE *r);\n+NTSTATUS ndr_pull_lsa_LSARADTUNREGISTERSECURITYEVENTSOURCE(struct  \nndr_pull *ndr, int flags, struct  \nlsa_LSARADTUNREGISTERSECURITYEVENTSOURCE *r);\n+NTSTATUS ndr_push_lsa_LSARADTREPORTSECURITYEVENT(struct ndr_push  \n*ndr, int flags, const struct lsa_LSARADTREPORTSECURITYEVENT *r);\n+NTSTATUS ndr_pull_lsa_LSARADTREPORTSECURITYEVENT(struct ndr_pull  \n*ndr, int flags, struct lsa_LSARADTREPORTSECURITYEVENT *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ndr_notify.c  */\n+\n+NTSTATUS ndr_push_notify_depth(struct ndr_push *ndr, int ndr_flags,  \nconst struct notify_depth *r);\n+NTSTATUS ndr_pull_notify_depth(struct ndr_pull *ndr, int ndr_flags,  \nstruct notify_depth *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ndr_srvsvc.c  */\n+\n+NTSTATUS ndr_push_srvsvc_NetCharDevInfo0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetCharDevInfo0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevInfo0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetCharDevInfo0 *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevCtr0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetCharDevCtr0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevCtr0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetCharDevCtr0 *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevInfo1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetCharDevInfo1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevInfo1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetCharDevInfo1 *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevCtr1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetCharDevCtr1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevCtr1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetCharDevCtr1 *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevInfo(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetCharDevInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevInfo(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetCharDevInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevCtr(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetCharDevCtr *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevCtr(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetCharDevCtr *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQInfo0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetCharDevQInfo0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQInfo0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetCharDevQInfo0 *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQCtr0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetCharDevQCtr0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQCtr0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetCharDevQCtr0 *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQInfo1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetCharDevQInfo1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQInfo1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetCharDevQInfo1 *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQCtr1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetCharDevQCtr1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQCtr1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetCharDevQCtr1 *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQInfo(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetCharDevQInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQInfo(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetCharDevQInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQCtr(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetCharDevQCtr *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQCtr(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetCharDevQCtr *r);\n+NTSTATUS ndr_push_srvsvc_NetConnInfo0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetConnInfo0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetConnInfo0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetConnInfo0 *r);\n+NTSTATUS ndr_push_srvsvc_NetConnCtr0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetConnCtr0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetConnCtr0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetConnCtr0 *r);\n+NTSTATUS ndr_push_srvsvc_NetConnInfo1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetConnInfo1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetConnInfo1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetConnInfo1 *r);\n+NTSTATUS ndr_push_srvsvc_NetConnCtr1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetConnCtr1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetConnCtr1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetConnCtr1 *r);\n+NTSTATUS ndr_push_srvsvc_NetConnCtr(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetConnCtr *r);\n+NTSTATUS ndr_pull_srvsvc_NetConnCtr(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetConnCtr *r);\n+NTSTATUS ndr_push_srvsvc_NetFileInfo2(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetFileInfo2 *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileInfo2(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetFileInfo2 *r);\n+NTSTATUS ndr_push_srvsvc_NetFileCtr2(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetFileCtr2 *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileCtr2(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetFileCtr2 *r);\n+NTSTATUS ndr_push_srvsvc_NetFileInfo3(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetFileInfo3 *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileInfo3(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetFileInfo3 *r);\n+NTSTATUS ndr_push_srvsvc_NetFileCtr3(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetFileCtr3 *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileCtr3(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetFileCtr3 *r);\n+NTSTATUS ndr_push_srvsvc_NetFileInfo(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetFileInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileInfo(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetFileInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetFileCtr(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetFileCtr *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileCtr(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetFileCtr *r);\n+NTSTATUS ndr_push_srvsvc_NetSessInfo0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessInfo0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessInfo0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessInfo0 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessCtr0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessCtr0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessCtr0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessCtr0 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessInfo1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessInfo1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessInfo1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessInfo1 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessCtr1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessCtr1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessCtr1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessCtr1 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessInfo2(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessInfo2 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessInfo2(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessInfo2 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessCtr2(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessCtr2 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessCtr2(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessCtr2 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessInfo10(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessInfo10 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessInfo10(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessInfo10 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessCtr10(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessCtr10 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessCtr10(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessCtr10 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessInfo502(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessInfo502 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessInfo502(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessInfo502 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessCtr502(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSessCtr502 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessCtr502(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSessCtr502 *r);\n+NTSTATUS ndr_push_srvsvc_NetSessCtr(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetSessCtr *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessCtr(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetSessCtr *r);\n+NTSTATUS ndr_push_srvsvc_ShareType(struct ndr_push *ndr, int  \nndr_flags, enum srvsvc_ShareType r);\n+NTSTATUS ndr_pull_srvsvc_ShareType(struct ndr_pull *ndr, int  \nndr_flags, enum srvsvc_ShareType *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo0 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr0 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo1 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr1 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo2(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo2 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo2(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo2 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr2(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr2 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr2(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr2 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo501(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo501 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo501(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo501 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr501(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr501 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr501(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr501 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo502(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo502 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo502(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo502 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr502(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr502 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr502(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr502 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo1004(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo1004 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo1004(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo1004 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr1004(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr1004 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr1004(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr1004 *r);\n+NTSTATUS ndr_push_NetShareInfo1005Flags(struct ndr_push *ndr, int  \nndr_flags, uint32_t r);\n+NTSTATUS ndr_pull_NetShareInfo1005Flags(struct ndr_pull *ndr, int  \nndr_flags, uint32_t *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo1005(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo1005 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo1005(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo1005 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr1005(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr1005 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr1005(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr1005 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo1006(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo1006 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo1006(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo1006 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr1006(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr1006 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr1006(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr1006 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo1007(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareInfo1007 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo1007(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareInfo1007 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr1007(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr1007 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr1007(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr1007 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr1501(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetShareCtr1501 *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr1501(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetShareCtr1501 *r);\n+NTSTATUS ndr_push_srvsvc_NetShareInfo(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetShareInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareInfo(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetShareInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCtr(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetShareCtr *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCtr(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetShareCtr *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo100(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo100 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo100(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo100 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo101(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo101 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo101(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo101 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo102(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo102 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo102(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo102 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo402(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo402 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo402(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo402 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo403(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo403 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo403(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo403 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo502(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo502 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo502(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo502 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo503(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo503 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo503(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo503 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo599(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo599 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo599(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo599 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1005(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1005 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1005(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1005 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1010(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1010 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1010(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1010 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1016(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1016 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1016(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1016 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1017(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1017 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1017(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1017 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1018(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1018 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1018(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1018 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1107(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1107 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1107(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1107 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1501(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1501 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1501(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1501 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1502(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1502 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1502(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1502 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1503(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1503 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1503(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1503 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1506(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1506 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1506(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1506 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1509(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1509 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1509(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1509 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1510(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1510 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1510(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1510 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1511(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1511 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1511(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1511 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1512(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1512 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1512(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1512 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1513(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1513 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1513(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1513 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1514(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1514 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1514(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1514 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1515(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1515 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1515(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1515 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1516(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1516 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1516(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1516 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1518(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1518 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1518(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1518 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1520(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1520 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1520(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1520 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1521(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1521 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1521(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1521 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1522(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1522 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1522(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1522 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1523(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1523 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1523(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1523 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1524(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1524 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1524(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1524 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1525(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1525 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1525(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1525 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1528(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1528 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1528(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1528 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1529(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1529 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1529(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1529 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1530(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1530 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1530(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1530 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1533(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1533 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1533(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1533 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1534(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1534 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1534(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1534 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1535(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1535 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1535(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1535 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1536(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1536 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1536(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1536 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1537(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1537 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1537(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1537 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1538(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1538 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1538(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1538 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1539(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1539 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1539(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1539 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1540(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1540 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1540(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1540 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1541(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1541 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1541(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1541 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1542(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1542 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1542(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1542 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1543(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1543 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1543(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1543 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1544(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1544 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1544(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1544 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1545(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1545 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1545(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1545 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1546(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1546 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1546(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1546 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1547(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1547 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1547(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1547 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1548(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1548 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1548(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1548 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1549(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1549 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1549(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1549 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1550(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1550 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1550(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1550 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1552(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1552 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1552(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1552 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1553(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1553 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1553(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1553 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1554(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1554 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1554(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1554 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1555(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1555 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1555(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1555 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo1556(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetSrvInfo1556 *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo1556(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetSrvInfo1556 *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvInfo(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetSrvInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvInfo(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetSrvInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetDiskInfo0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetDiskInfo0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetDiskInfo0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetDiskInfo0 *r);\n+NTSTATUS ndr_push_srvsvc_NetDiskInfo(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetDiskInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetDiskInfo(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetDiskInfo *r);\n+NTSTATUS ndr_push_srvsvc_Statistics(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_Statistics *r);\n+NTSTATUS ndr_pull_srvsvc_Statistics(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_Statistics *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportInfo0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetTransportInfo0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportInfo0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetTransportInfo0 *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportCtr0(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetTransportCtr0 *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportCtr0(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetTransportCtr0 *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportInfo1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetTransportInfo1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportInfo1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetTransportInfo1 *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportCtr1(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetTransportCtr1 *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportCtr1(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetTransportCtr1 *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportInfo2(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetTransportInfo2 *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportInfo2(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetTransportInfo2 *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportCtr2(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetTransportCtr2 *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportCtr2(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetTransportCtr2 *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportInfo3(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetTransportInfo3 *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportInfo3(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetTransportInfo3 *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportCtr3(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetTransportCtr3 *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportCtr3(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetTransportCtr3 *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportCtr(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetTransportCtr *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportCtr(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetTransportCtr *r);\n+NTSTATUS ndr_push_srvsvc_NetRemoteTODInfo(struct ndr_push *ndr, int  \nndr_flags, const struct srvsvc_NetRemoteTODInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetRemoteTODInfo(struct ndr_pull *ndr, int  \nndr_flags, struct srvsvc_NetRemoteTODInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportInfo(struct ndr_push *ndr, int  \nndr_flags, const union srvsvc_NetTransportInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportInfo(struct ndr_pull *ndr, int  \nndr_flags, union srvsvc_NetTransportInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevEnum(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetCharDevEnum *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevEnum(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetCharDevEnum *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevGetInfo(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetCharDevGetInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevGetInfo(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetCharDevGetInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevControl(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetCharDevControl *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevControl(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetCharDevControl *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQEnum(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetCharDevQEnum *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQEnum(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetCharDevQEnum *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQGetInfo(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NetCharDevQGetInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQGetInfo(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NetCharDevQGetInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQSetInfo(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NetCharDevQSetInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQSetInfo(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NetCharDevQSetInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQPurge(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetCharDevQPurge *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQPurge(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetCharDevQPurge *r);\n+NTSTATUS ndr_push_srvsvc_NetCharDevQPurgeSelf(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NetCharDevQPurgeSelf *r);\n+NTSTATUS ndr_pull_srvsvc_NetCharDevQPurgeSelf(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NetCharDevQPurgeSelf *r);\n+NTSTATUS ndr_push_srvsvc_NetConnEnum(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetConnEnum *r);\n+NTSTATUS ndr_pull_srvsvc_NetConnEnum(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetConnEnum *r);\n+NTSTATUS ndr_push_srvsvc_NetFileEnum(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetFileEnum *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileEnum(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetFileEnum *r);\n+NTSTATUS ndr_push_srvsvc_NetFileGetInfo(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetFileGetInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileGetInfo(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetFileGetInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetFileClose(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetFileClose *r);\n+NTSTATUS ndr_pull_srvsvc_NetFileClose(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetFileClose *r);\n+NTSTATUS ndr_push_srvsvc_NetSessEnum(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetSessEnum *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessEnum(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetSessEnum *r);\n+NTSTATUS ndr_push_srvsvc_NetSessDel(struct ndr_push *ndr, int flags,  \nconst struct srvsvc_NetSessDel *r);\n+NTSTATUS ndr_pull_srvsvc_NetSessDel(struct ndr_pull *ndr, int flags,  \nstruct srvsvc_NetSessDel *r);\n+NTSTATUS ndr_push_srvsvc_NetShareAdd(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareAdd *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareAdd(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareAdd *r);\n+NTSTATUS ndr_push_srvsvc_NetShareEnumAll(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareEnumAll *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareEnumAll(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareEnumAll *r);\n+NTSTATUS ndr_push_srvsvc_NetShareGetInfo(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareGetInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareGetInfo(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareGetInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetShareSetInfo(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareSetInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareSetInfo(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareSetInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetShareDel(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareDel *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareDel(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareDel *r);\n+NTSTATUS ndr_push_srvsvc_NetShareDelSticky(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareDelSticky *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareDelSticky(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareDelSticky *r);\n+NTSTATUS ndr_push_srvsvc_NetShareCheck(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareCheck *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareCheck(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareCheck *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvGetInfo(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetSrvGetInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvGetInfo(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetSrvGetInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetSrvSetInfo(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetSrvSetInfo *r);\n+NTSTATUS ndr_pull_srvsvc_NetSrvSetInfo(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetSrvSetInfo *r);\n+NTSTATUS ndr_push_srvsvc_NetDiskEnum(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetDiskEnum *r);\n+NTSTATUS ndr_pull_srvsvc_NetDiskEnum(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetDiskEnum *r);\n+NTSTATUS ndr_push_srvsvc_NetServerStatisticsGet(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NetServerStatisticsGet *r);\n+NTSTATUS ndr_pull_srvsvc_NetServerStatisticsGet(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NetServerStatisticsGet *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportAdd(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetTransportAdd *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportAdd(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetTransportAdd *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportEnum(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetTransportEnum *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportEnum(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetTransportEnum *r);\n+NTSTATUS ndr_push_srvsvc_NetTransportDel(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetTransportDel *r);\n+NTSTATUS ndr_pull_srvsvc_NetTransportDel(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetTransportDel *r);\n+NTSTATUS ndr_push_srvsvc_NetRemoteTOD(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetRemoteTOD *r);\n+NTSTATUS ndr_pull_srvsvc_NetRemoteTOD(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetRemoteTOD *r);\n+NTSTATUS ndr_push_srvsvc_NetSetServiceBits(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetSetServiceBits *r);\n+NTSTATUS ndr_pull_srvsvc_NetSetServiceBits(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetSetServiceBits *r);\n+NTSTATUS ndr_push_srvsvc_NetPathType(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetPathType *r);\n+NTSTATUS ndr_pull_srvsvc_NetPathType(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetPathType *r);\n+NTSTATUS ndr_push_srvsvc_NetPathCanonicalize(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NetPathCanonicalize *r);\n+NTSTATUS ndr_pull_srvsvc_NetPathCanonicalize(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NetPathCanonicalize *r);\n+NTSTATUS ndr_push_srvsvc_NetPathCompare(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetPathCompare *r);\n+NTSTATUS ndr_pull_srvsvc_NetPathCompare(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetPathCompare *r);\n+NTSTATUS ndr_push_srvsvc_NetNameValidate(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetNameValidate *r);\n+NTSTATUS ndr_pull_srvsvc_NetNameValidate(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetNameValidate *r);\n+NTSTATUS ndr_push_srvsvc_NETRPRNAMECANONICALIZE(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NETRPRNAMECANONICALIZE *r);\n+NTSTATUS ndr_pull_srvsvc_NETRPRNAMECANONICALIZE(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NETRPRNAMECANONICALIZE *r);\n+NTSTATUS ndr_push_srvsvc_NetPRNameCompare(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetPRNameCompare *r);\n+NTSTATUS ndr_pull_srvsvc_NetPRNameCompare(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetPRNameCompare *r);\n+NTSTATUS ndr_push_srvsvc_NetShareEnum(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareEnum *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareEnum(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareEnum *r);\n+NTSTATUS ndr_push_srvsvc_NetShareDelStart(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareDelStart *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareDelStart(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareDelStart *r);\n+NTSTATUS ndr_push_srvsvc_NetShareDelCommit(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NetShareDelCommit *r);\n+NTSTATUS ndr_pull_srvsvc_NetShareDelCommit(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NetShareDelCommit *r);\n+NTSTATUS ndr_push_srvsvc_NetGetFileSecurity(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NetGetFileSecurity *r);\n+NTSTATUS ndr_pull_srvsvc_NetGetFileSecurity(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NetGetFileSecurity *r);\n+NTSTATUS ndr_push_srvsvc_NetSetFileSecurity(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NetSetFileSecurity *r);\n+NTSTATUS ndr_pull_srvsvc_NetSetFileSecurity(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NetSetFileSecurity *r);\n+NTSTATUS ndr_push_srvsvc_NetServerTransportAddEx(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NetServerTransportAddEx *r);\n+NTSTATUS ndr_pull_srvsvc_NetServerTransportAddEx(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NetServerTransportAddEx *r);\n+NTSTATUS ndr_push_srvsvc_NetServerSetServiceBitsEx(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NetServerSetServiceBitsEx *r);\n+NTSTATUS ndr_pull_srvsvc_NetServerSetServiceBitsEx(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NetServerSetServiceBitsEx *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSGETVERSION(struct ndr_push *ndr, int  \nflags, const struct srvsvc_NETRDFSGETVERSION *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSGETVERSION(struct ndr_pull *ndr, int  \nflags, struct srvsvc_NETRDFSGETVERSION *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSCREATELOCALPARTITION(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NETRDFSCREATELOCALPARTITION *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSCREATELOCALPARTITION(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NETRDFSCREATELOCALPARTITION *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSDELETELOCALPARTITION(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NETRDFSDELETELOCALPARTITION *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSDELETELOCALPARTITION(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NETRDFSDELETELOCALPARTITION *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSSETLOCALVOLUMESTATE(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NETRDFSSETLOCALVOLUMESTATE *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSSETLOCALVOLUMESTATE(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NETRDFSSETLOCALVOLUMESTATE *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSSETSERVERINFO(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NETRDFSSETSERVERINFO *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSSETSERVERINFO(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NETRDFSSETSERVERINFO *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSCREATEEXITPOINT(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NETRDFSCREATEEXITPOINT *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSCREATEEXITPOINT(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NETRDFSCREATEEXITPOINT *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSDELETEEXITPOINT(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NETRDFSDELETEEXITPOINT *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSDELETEEXITPOINT(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NETRDFSDELETEEXITPOINT *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSMODIFYPREFIX(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NETRDFSMODIFYPREFIX *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSMODIFYPREFIX(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NETRDFSMODIFYPREFIX *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSFIXLOCALVOLUME(struct ndr_push *ndr,  \nint flags, const struct srvsvc_NETRDFSFIXLOCALVOLUME *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSFIXLOCALVOLUME(struct ndr_pull *ndr,  \nint flags, struct srvsvc_NETRDFSFIXLOCALVOLUME *r);\n+NTSTATUS ndr_push_srvsvc_NETRDFSMANAGERREPORTSITEINFO(struct  \nndr_push *ndr, int flags, const struct  \nsrvsvc_NETRDFSMANAGERREPORTSITEINFO *r);\n+NTSTATUS ndr_pull_srvsvc_NETRDFSMANAGERREPORTSITEINFO(struct  \nndr_pull *ndr, int flags, struct srvsvc_NETRDFSMANAGERREPORTSITEINFO  \n*r);\n+NTSTATUS ndr_push_srvsvc_NETRSERVERTRANSPORTDELEX(struct ndr_push  \n*ndr, int flags, const struct srvsvc_NETRSERVERTRANSPORTDELEX *r);\n+NTSTATUS ndr_pull_srvsvc_NETRSERVERTRANSPORTDELEX(struct ndr_pull  \n*ndr, int flags, struct srvsvc_NETRSERVERTRANSPORTDELEX *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ndr_svcctl.c  */\n+\n+NTSTATUS ndr_push_SERVICE_LOCK_STATUS(struct ndr_push *ndr, int  \nndr_flags, const struct SERVICE_LOCK_STATUS *r);\n+NTSTATUS ndr_pull_SERVICE_LOCK_STATUS(struct ndr_pull *ndr, int  \nndr_flags, struct SERVICE_LOCK_STATUS *r);\n+NTSTATUS ndr_push_SERVICE_STATUS(struct ndr_push *ndr, int  \nndr_flags, const struct SERVICE_STATUS *r);\n+NTSTATUS ndr_pull_SERVICE_STATUS(struct ndr_pull *ndr, int  \nndr_flags, struct SERVICE_STATUS *r);\n+NTSTATUS ndr_push_ENUM_SERVICE_STATUS(struct ndr_push *ndr, int  \nndr_flags, const struct ENUM_SERVICE_STATUS *r);\n+NTSTATUS ndr_pull_ENUM_SERVICE_STATUS(struct ndr_pull *ndr, int  \nndr_flags, struct ENUM_SERVICE_STATUS *r);\n+NTSTATUS ndr_push_svcctl_CloseServiceHandle(struct ndr_push *ndr,  \nint flags, const struct svcctl_CloseServiceHandle *r);\n+NTSTATUS ndr_pull_svcctl_CloseServiceHandle(struct ndr_pull *ndr,  \nint flags, struct svcctl_CloseServiceHandle *r);\n+NTSTATUS ndr_push_svcctl_ControlService(struct ndr_push *ndr, int  \nflags, const struct svcctl_ControlService *r);\n+NTSTATUS ndr_pull_svcctl_ControlService(struct ndr_pull *ndr, int  \nflags, struct svcctl_ControlService *r);\n+NTSTATUS ndr_push_svcctl_DeleteService(struct ndr_push *ndr, int  \nflags, const struct svcctl_DeleteService *r);\n+NTSTATUS ndr_pull_svcctl_DeleteService(struct ndr_pull *ndr, int  \nflags, struct svcctl_DeleteService *r);\n+NTSTATUS ndr_push_svcctl_LockServiceDatabase(struct ndr_push *ndr,  \nint flags, const struct svcctl_LockServiceDatabase *r);\n+NTSTATUS ndr_pull_svcctl_LockServiceDatabase(struct ndr_pull *ndr,  \nint flags, struct svcctl_LockServiceDatabase *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceObjectSecurity(struct ndr_push  \n*ndr, int flags, const struct svcctl_QueryServiceObjectSecurity *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceObjectSecurity(struct ndr_pull  \n*ndr, int flags, struct svcctl_QueryServiceObjectSecurity *r);\n+NTSTATUS ndr_push_svcctl_SetServiceObjectSecurity(struct ndr_push  \n*ndr, int flags, const struct svcctl_SetServiceObjectSecurity *r);\n+NTSTATUS ndr_pull_svcctl_SetServiceObjectSecurity(struct ndr_pull  \n*ndr, int flags, struct svcctl_SetServiceObjectSecurity *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceStatus(struct ndr_push *ndr,  \nint flags, const struct svcctl_QueryServiceStatus *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceStatus(struct ndr_pull *ndr,  \nint flags, struct svcctl_QueryServiceStatus *r);\n+NTSTATUS ndr_push_svcctl_SetServiceStatus(struct ndr_push *ndr, int  \nflags, const struct svcctl_SetServiceStatus *r);\n+NTSTATUS ndr_pull_svcctl_SetServiceStatus(struct ndr_pull *ndr, int  \nflags, struct svcctl_SetServiceStatus *r);\n+NTSTATUS ndr_push_svcctl_UnlockServiceDatabase(struct ndr_push *ndr,  \nint flags, const struct svcctl_UnlockServiceDatabase *r);\n+NTSTATUS ndr_pull_svcctl_UnlockServiceDatabase(struct ndr_pull *ndr,  \nint flags, struct svcctl_UnlockServiceDatabase *r);\n+NTSTATUS ndr_push_svcctl_NotifyBootConfigStatus(struct ndr_push  \n*ndr, int flags, const struct svcctl_NotifyBootConfigStatus *r);\n+NTSTATUS ndr_pull_svcctl_NotifyBootConfigStatus(struct ndr_pull  \n*ndr, int flags, struct svcctl_NotifyBootConfigStatus *r);\n+NTSTATUS ndr_push_svcctl_SCSetServiceBitsW(struct ndr_push *ndr, int  \nflags, const struct svcctl_SCSetServiceBitsW *r);\n+NTSTATUS ndr_pull_svcctl_SCSetServiceBitsW(struct ndr_pull *ndr, int  \nflags, struct svcctl_SCSetServiceBitsW *r);\n+NTSTATUS ndr_push_svcctl_ChangeServiceConfigW(struct ndr_push *ndr,  \nint flags, const struct svcctl_ChangeServiceConfigW *r);\n+NTSTATUS ndr_pull_svcctl_ChangeServiceConfigW(struct ndr_pull *ndr,  \nint flags, struct svcctl_ChangeServiceConfigW *r);\n+NTSTATUS ndr_push_svcctl_CreateServiceW(struct ndr_push *ndr, int  \nflags, const struct svcctl_CreateServiceW *r);\n+NTSTATUS ndr_pull_svcctl_CreateServiceW(struct ndr_pull *ndr, int  \nflags, struct svcctl_CreateServiceW *r);\n+NTSTATUS ndr_push_svcctl_EnumDependentServicesW(struct ndr_push  \n*ndr, int flags, const struct svcctl_EnumDependentServicesW *r);\n+NTSTATUS ndr_pull_svcctl_EnumDependentServicesW(struct ndr_pull  \n*ndr, int flags, struct svcctl_EnumDependentServicesW *r);\n+NTSTATUS ndr_push_svcctl_EnumServicesStatusW(struct ndr_push *ndr,  \nint flags, const struct svcctl_EnumServicesStatusW *r);\n+NTSTATUS ndr_pull_svcctl_EnumServicesStatusW(struct ndr_pull *ndr,  \nint flags, struct svcctl_EnumServicesStatusW *r);\n+NTSTATUS ndr_push_svcctl_OpenSCManagerW(struct ndr_push *ndr, int  \nflags, const struct svcctl_OpenSCManagerW *r);\n+NTSTATUS ndr_pull_svcctl_OpenSCManagerW(struct ndr_pull *ndr, int  \nflags, struct svcctl_OpenSCManagerW *r);\n+NTSTATUS ndr_push_svcctl_OpenServiceW(struct ndr_push *ndr, int  \nflags, const struct svcctl_OpenServiceW *r);\n+NTSTATUS ndr_pull_svcctl_OpenServiceW(struct ndr_pull *ndr, int  \nflags, struct svcctl_OpenServiceW *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceConfigW(struct ndr_push *ndr,  \nint flags, const struct svcctl_QueryServiceConfigW *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceConfigW(struct ndr_pull *ndr,  \nint flags, struct svcctl_QueryServiceConfigW *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceLockStatusW(struct ndr_push  \n*ndr, int flags, const struct svcctl_QueryServiceLockStatusW *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceLockStatusW(struct ndr_pull  \n*ndr, int flags, struct svcctl_QueryServiceLockStatusW *r);\n+NTSTATUS ndr_push_svcctl_StartServiceW(struct ndr_push *ndr, int  \nflags, const struct svcctl_StartServiceW *r);\n+NTSTATUS ndr_pull_svcctl_StartServiceW(struct ndr_pull *ndr, int  \nflags, struct svcctl_StartServiceW *r);\n+NTSTATUS ndr_push_svcctl_GetServiceDisplayNameW(struct ndr_push  \n*ndr, int flags, const struct svcctl_GetServiceDisplayNameW *r);\n+NTSTATUS ndr_pull_svcctl_GetServiceDisplayNameW(struct ndr_pull  \n*ndr, int flags, struct svcctl_GetServiceDisplayNameW *r);\n+NTSTATUS ndr_push_svcctl_GetServiceKeyNameW(struct ndr_push *ndr,  \nint flags, const struct svcctl_GetServiceKeyNameW *r);\n+NTSTATUS ndr_pull_svcctl_GetServiceKeyNameW(struct ndr_pull *ndr,  \nint flags, struct svcctl_GetServiceKeyNameW *r);\n+NTSTATUS ndr_push_svcctl_SCSetServiceBitsA(struct ndr_push *ndr, int  \nflags, const struct svcctl_SCSetServiceBitsA *r);\n+NTSTATUS ndr_pull_svcctl_SCSetServiceBitsA(struct ndr_pull *ndr, int  \nflags, struct svcctl_SCSetServiceBitsA *r);\n+NTSTATUS ndr_push_svcctl_ChangeServiceConfigA(struct ndr_push *ndr,  \nint flags, const struct svcctl_ChangeServiceConfigA *r);\n+NTSTATUS ndr_pull_svcctl_ChangeServiceConfigA(struct ndr_pull *ndr,  \nint flags, struct svcctl_ChangeServiceConfigA *r);\n+NTSTATUS ndr_push_svcctl_CreateServiceA(struct ndr_push *ndr, int  \nflags, const struct svcctl_CreateServiceA *r);\n+NTSTATUS ndr_pull_svcctl_CreateServiceA(struct ndr_pull *ndr, int  \nflags, struct svcctl_CreateServiceA *r);\n+NTSTATUS ndr_push_svcctl_EnumDependentServicesA(struct ndr_push  \n*ndr, int flags, const struct svcctl_EnumDependentServicesA *r);\n+NTSTATUS ndr_pull_svcctl_EnumDependentServicesA(struct ndr_pull  \n*ndr, int flags, struct svcctl_EnumDependentServicesA *r);\n+NTSTATUS ndr_push_svcctl_EnumServicesStatusA(struct ndr_push *ndr,  \nint flags, const struct svcctl_EnumServicesStatusA *r);\n+NTSTATUS ndr_pull_svcctl_EnumServicesStatusA(struct ndr_pull *ndr,  \nint flags, struct svcctl_EnumServicesStatusA *r);\n+NTSTATUS ndr_push_svcctl_OpenSCManagerA(struct ndr_push *ndr, int  \nflags, const struct svcctl_OpenSCManagerA *r);\n+NTSTATUS ndr_pull_svcctl_OpenSCManagerA(struct ndr_pull *ndr, int  \nflags, struct svcctl_OpenSCManagerA *r);\n+NTSTATUS ndr_push_svcctl_OpenServiceA(struct ndr_push *ndr, int  \nflags, const struct svcctl_OpenServiceA *r);\n+NTSTATUS ndr_pull_svcctl_OpenServiceA(struct ndr_pull *ndr, int  \nflags, struct svcctl_OpenServiceA *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceConfigA(struct ndr_push *ndr,  \nint flags, const struct svcctl_QueryServiceConfigA *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceConfigA(struct ndr_pull *ndr,  \nint flags, struct svcctl_QueryServiceConfigA *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceLockStatusA(struct ndr_push  \n*ndr, int flags, const struct svcctl_QueryServiceLockStatusA *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceLockStatusA(struct ndr_pull  \n*ndr, int flags, struct svcctl_QueryServiceLockStatusA *r);\n+NTSTATUS ndr_push_svcctl_StartServiceA(struct ndr_push *ndr, int  \nflags, const struct svcctl_StartServiceA *r);\n+NTSTATUS ndr_pull_svcctl_StartServiceA(struct ndr_pull *ndr, int  \nflags, struct svcctl_StartServiceA *r);\n+NTSTATUS ndr_push_svcctl_GetServiceDisplayNameA(struct ndr_push  \n*ndr, int flags, const struct svcctl_GetServiceDisplayNameA *r);\n+NTSTATUS ndr_pull_svcctl_GetServiceDisplayNameA(struct ndr_pull  \n*ndr, int flags, struct svcctl_GetServiceDisplayNameA *r);\n+NTSTATUS ndr_push_svcctl_GetServiceKeyNameA(struct ndr_push *ndr,  \nint flags, const struct svcctl_GetServiceKeyNameA *r);\n+NTSTATUS ndr_pull_svcctl_GetServiceKeyNameA(struct ndr_pull *ndr,  \nint flags, struct svcctl_GetServiceKeyNameA *r);\n+NTSTATUS ndr_push_svcctl_GetCurrentGroupeStateW(struct ndr_push  \n*ndr, int flags, const struct svcctl_GetCurrentGroupeStateW *r);\n+NTSTATUS ndr_pull_svcctl_GetCurrentGroupeStateW(struct ndr_pull  \n*ndr, int flags, struct svcctl_GetCurrentGroupeStateW *r);\n+NTSTATUS ndr_push_svcctl_EnumServiceGroupW(struct ndr_push *ndr, int  \nflags, const struct svcctl_EnumServiceGroupW *r);\n+NTSTATUS ndr_pull_svcctl_EnumServiceGroupW(struct ndr_pull *ndr, int  \nflags, struct svcctl_EnumServiceGroupW *r);\n+NTSTATUS ndr_push_svcctl_ChangeServiceConfig2A(struct ndr_push *ndr,  \nint flags, const struct svcctl_ChangeServiceConfig2A *r);\n+NTSTATUS ndr_pull_svcctl_ChangeServiceConfig2A(struct ndr_pull *ndr,  \nint flags, struct svcctl_ChangeServiceConfig2A *r);\n+NTSTATUS ndr_push_svcctl_ChangeServiceConfig2W(struct ndr_push *ndr,  \nint flags, const struct svcctl_ChangeServiceConfig2W *r);\n+NTSTATUS ndr_pull_svcctl_ChangeServiceConfig2W(struct ndr_pull *ndr,  \nint flags, struct svcctl_ChangeServiceConfig2W *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceConfig2A(struct ndr_push *ndr,  \nint flags, const struct svcctl_QueryServiceConfig2A *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceConfig2A(struct ndr_pull *ndr,  \nint flags, struct svcctl_QueryServiceConfig2A *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceConfig2W(struct ndr_push *ndr,  \nint flags, const struct svcctl_QueryServiceConfig2W *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceConfig2W(struct ndr_pull *ndr,  \nint flags, struct svcctl_QueryServiceConfig2W *r);\n+NTSTATUS ndr_push_svcctl_QueryServiceStatusEx(struct ndr_push *ndr,  \nint flags, const struct svcctl_QueryServiceStatusEx *r);\n+NTSTATUS ndr_pull_svcctl_QueryServiceStatusEx(struct ndr_pull *ndr,  \nint flags, struct svcctl_QueryServiceStatusEx *r);\n+NTSTATUS ndr_push_EnumServicesStatusExA(struct ndr_push *ndr, int  \nflags, const struct EnumServicesStatusExA *r);\n+NTSTATUS ndr_pull_EnumServicesStatusExA(struct ndr_pull *ndr, int  \nflags, struct EnumServicesStatusExA *r);\n+NTSTATUS ndr_push_EnumServicesStatusExW(struct ndr_push *ndr, int  \nflags, const struct EnumServicesStatusExW *r);\n+NTSTATUS ndr_pull_EnumServicesStatusExW(struct ndr_pull *ndr, int  \nflags, struct EnumServicesStatusExW *r);\n+NTSTATUS ndr_push_svcctl_SCSendTSMessage(struct ndr_push *ndr, int  \nflags, const struct svcctl_SCSendTSMessage *r);\n+NTSTATUS ndr_pull_svcctl_SCSendTSMessage(struct ndr_pull *ndr, int  \nflags, struct svcctl_SCSendTSMessage *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ \nndr_unixinfo.c  */\n+\n+NTSTATUS ndr_push_unixinfo_GetPWUidInfo(struct ndr_push *ndr, int  \nndr_flags, const struct unixinfo_GetPWUidInfo *r);\n+NTSTATUS ndr_pull_unixinfo_GetPWUidInfo(struct ndr_pull *ndr, int  \nndr_flags, struct unixinfo_GetPWUidInfo *r);\n+NTSTATUS ndr_push_unixinfo_SidToUid(struct ndr_push *ndr, int flags,  \nconst struct unixinfo_SidToUid *r);\n+NTSTATUS ndr_pull_unixinfo_SidToUid(struct ndr_pull *ndr, int flags,  \nstruct unixinfo_SidToUid *r);\n+NTSTATUS ndr_push_unixinfo_UidToSid(struct ndr_push *ndr, int flags,  \nconst struct unixinfo_UidToSid *r);\n+NTSTATUS ndr_pull_unixinfo_UidToSid(struct ndr_pull *ndr, int flags,  \nstruct unixinfo_UidToSid *r);\n+NTSTATUS ndr_push_unixinfo_SidToGid(struct ndr_push *ndr, int flags,  \nconst struct unixinfo_SidToGid *r);\n+NTSTATUS ndr_pull_unixinfo_SidToGid(struct ndr_pull *ndr, int flags,  \nstruct unixinfo_SidToGid *r);\n+NTSTATUS ndr_push_unixinfo_GidToSid(struct ndr_push *ndr, int flags,  \nconst struct unixinfo_GidToSid *r);\n+NTSTATUS ndr_pull_unixinfo_GidToSid(struct ndr_pull *ndr, int flags,  \nstruct unixinfo_GidToSid *r);\n+NTSTATUS ndr_push_unixinfo_GetPWUid(struct ndr_push *ndr, int flags,  \nconst struct unixinfo_GetPWUid *r);\n+NTSTATUS ndr_pull_unixinfo_GetPWUid(struct ndr_pull *ndr, int flags,  \nstruct unixinfo_GetPWUid *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ndr_winreg.c  */\n+\n+NTSTATUS ndr_push_winreg_AccessMask(struct ndr_push *ndr, int  \nndr_flags, uint32_t r);\n+NTSTATUS ndr_pull_winreg_AccessMask(struct ndr_pull *ndr, int  \nndr_flags, uint32_t *r);\n+NTSTATUS ndr_push_winreg_Type(struct ndr_push *ndr, int ndr_flags,  \nenum winreg_Type r);\n+NTSTATUS ndr_pull_winreg_Type(struct ndr_pull *ndr, int ndr_flags,  \nenum winreg_Type *r);\n+NTSTATUS ndr_push_KeySecurityData(struct ndr_push *ndr, int  \nndr_flags, const struct KeySecurityData *r);\n+NTSTATUS ndr_pull_KeySecurityData(struct ndr_pull *ndr, int  \nndr_flags, struct KeySecurityData *r);\n+NTSTATUS ndr_push_winreg_SecBuf(struct ndr_push *ndr, int ndr_flags,  \nconst struct winreg_SecBuf *r);\n+NTSTATUS ndr_pull_winreg_SecBuf(struct ndr_pull *ndr, int ndr_flags,  \nstruct winreg_SecBuf *r);\n+NTSTATUS ndr_push_winreg_CreateAction(struct ndr_push *ndr, int  \nndr_flags, enum winreg_CreateAction r);\n+NTSTATUS ndr_pull_winreg_CreateAction(struct ndr_pull *ndr, int  \nndr_flags, enum winreg_CreateAction *r);\n+NTSTATUS ndr_push_winreg_StringBuf(struct ndr_push *ndr, int  \nndr_flags, const struct winreg_StringBuf *r);\n+NTSTATUS ndr_pull_winreg_StringBuf(struct ndr_pull *ndr, int  \nndr_flags, struct winreg_StringBuf *r);\n+NTSTATUS ndr_push_winreg_ValNameBuf(struct ndr_push *ndr, int  \nndr_flags, const struct winreg_ValNameBuf *r);\n+NTSTATUS ndr_pull_winreg_ValNameBuf(struct ndr_pull *ndr, int  \nndr_flags, struct winreg_ValNameBuf *r);\n+NTSTATUS ndr_push_KeySecurityAttribute(struct ndr_push *ndr, int  \nndr_flags, const struct KeySecurityAttribute *r);\n+NTSTATUS ndr_pull_KeySecurityAttribute(struct ndr_pull *ndr, int  \nndr_flags, struct KeySecurityAttribute *r);\n+NTSTATUS ndr_push_QueryMultipleValue(struct ndr_push *ndr, int  \nndr_flags, const struct QueryMultipleValue *r);\n+NTSTATUS ndr_pull_QueryMultipleValue(struct ndr_pull *ndr, int  \nndr_flags, struct QueryMultipleValue *r);\n+NTSTATUS ndr_push_winreg_OpenHKCR(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKCR *r);\n+NTSTATUS ndr_pull_winreg_OpenHKCR(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKCR *r);\n+NTSTATUS ndr_push_winreg_OpenHKCU(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKCU *r);\n+NTSTATUS ndr_pull_winreg_OpenHKCU(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKCU *r);\n+NTSTATUS ndr_push_winreg_OpenHKLM(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKLM *r);\n+NTSTATUS ndr_pull_winreg_OpenHKLM(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKLM *r);\n+NTSTATUS ndr_push_winreg_OpenHKPD(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKPD *r);\n+NTSTATUS ndr_pull_winreg_OpenHKPD(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKPD *r);\n+NTSTATUS ndr_push_winreg_OpenHKU(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKU *r);\n+NTSTATUS ndr_pull_winreg_OpenHKU(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKU *r);\n+NTSTATUS ndr_push_winreg_CloseKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_CloseKey *r);\n+NTSTATUS ndr_pull_winreg_CloseKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_CloseKey *r);\n+NTSTATUS ndr_push_winreg_CreateKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_CreateKey *r);\n+NTSTATUS ndr_pull_winreg_CreateKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_CreateKey *r);\n+NTSTATUS ndr_push_winreg_DeleteKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_DeleteKey *r);\n+NTSTATUS ndr_pull_winreg_DeleteKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_DeleteKey *r);\n+NTSTATUS ndr_push_winreg_DeleteValue(struct ndr_push *ndr, int  \nflags, const struct winreg_DeleteValue *r);\n+NTSTATUS ndr_pull_winreg_DeleteValue(struct ndr_pull *ndr, int  \nflags, struct winreg_DeleteValue *r);\n+NTSTATUS ndr_push_winreg_EnumKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_EnumKey *r);\n+NTSTATUS ndr_pull_winreg_EnumKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_EnumKey *r);\n+NTSTATUS ndr_push_winreg_EnumValue(struct ndr_push *ndr, int flags,  \nconst struct winreg_EnumValue *r);\n+NTSTATUS ndr_pull_winreg_EnumValue(struct ndr_pull *ndr, int flags,  \nstruct winreg_EnumValue *r);\n+NTSTATUS ndr_push_winreg_FlushKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_FlushKey *r);\n+NTSTATUS ndr_pull_winreg_FlushKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_FlushKey *r);\n+NTSTATUS ndr_push_winreg_GetKeySecurity(struct ndr_push *ndr, int  \nflags, const struct winreg_GetKeySecurity *r);\n+NTSTATUS ndr_pull_winreg_GetKeySecurity(struct ndr_pull *ndr, int  \nflags, struct winreg_GetKeySecurity *r);\n+NTSTATUS ndr_push_winreg_LoadKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_LoadKey *r);\n+NTSTATUS ndr_pull_winreg_LoadKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_LoadKey *r);\n+NTSTATUS ndr_push_winreg_NotifyChangeKeyValue(struct ndr_push *ndr,  \nint flags, const struct winreg_NotifyChangeKeyValue *r);\n+NTSTATUS ndr_pull_winreg_NotifyChangeKeyValue(struct ndr_pull *ndr,  \nint flags, struct winreg_NotifyChangeKeyValue *r);\n+NTSTATUS ndr_push_winreg_OpenKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenKey *r);\n+NTSTATUS ndr_pull_winreg_OpenKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenKey *r);\n+NTSTATUS ndr_push_winreg_QueryInfoKey(struct ndr_push *ndr, int  \nflags, const struct winreg_QueryInfoKey *r);\n+NTSTATUS ndr_pull_winreg_QueryInfoKey(struct ndr_pull *ndr, int  \nflags, struct winreg_QueryInfoKey *r);\n+NTSTATUS ndr_push_winreg_QueryValue(struct ndr_push *ndr, int flags,  \nconst struct winreg_QueryValue *r);\n+NTSTATUS ndr_pull_winreg_QueryValue(struct ndr_pull *ndr, int flags,  \nstruct winreg_QueryValue *r);\n+NTSTATUS ndr_push_winreg_ReplaceKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_ReplaceKey *r);\n+NTSTATUS ndr_pull_winreg_ReplaceKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_ReplaceKey *r);\n+NTSTATUS ndr_push_winreg_RestoreKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_RestoreKey *r);\n+NTSTATUS ndr_pull_winreg_RestoreKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_RestoreKey *r);\n+NTSTATUS ndr_push_winreg_SaveKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_SaveKey *r);\n+NTSTATUS ndr_pull_winreg_SaveKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_SaveKey *r);\n+NTSTATUS ndr_push_winreg_SetKeySecurity(struct ndr_push *ndr, int  \nflags, const struct winreg_SetKeySecurity *r);\n+NTSTATUS ndr_pull_winreg_SetKeySecurity(struct ndr_pull *ndr, int  \nflags, struct winreg_SetKeySecurity *r);\n+NTSTATUS ndr_push_winreg_SetValue(struct ndr_push *ndr, int flags,  \nconst struct winreg_SetValue *r);\n+NTSTATUS ndr_pull_winreg_SetValue(struct ndr_pull *ndr, int flags,  \nstruct winreg_SetValue *r);\n+NTSTATUS ndr_push_winreg_UnLoadKey(struct ndr_push *ndr, int flags,  \nconst struct winreg_UnLoadKey *r);\n+NTSTATUS ndr_pull_winreg_UnLoadKey(struct ndr_pull *ndr, int flags,  \nstruct winreg_UnLoadKey *r);\n+NTSTATUS ndr_push_winreg_InitiateSystemShutdown(struct ndr_push  \n*ndr, int flags, const struct winreg_InitiateSystemShutdown *r);\n+NTSTATUS ndr_pull_winreg_InitiateSystemShutdown(struct ndr_pull  \n*ndr, int flags, struct winreg_InitiateSystemShutdown *r);\n+NTSTATUS ndr_push_winreg_AbortSystemShutdown(struct ndr_push *ndr,  \nint flags, const struct winreg_AbortSystemShutdown *r);\n+NTSTATUS ndr_pull_winreg_AbortSystemShutdown(struct ndr_pull *ndr,  \nint flags, struct winreg_AbortSystemShutdown *r);\n+NTSTATUS ndr_push_winreg_GetVersion(struct ndr_push *ndr, int flags,  \nconst struct winreg_GetVersion *r);\n+NTSTATUS ndr_pull_winreg_GetVersion(struct ndr_pull *ndr, int flags,  \nstruct winreg_GetVersion *r);\n+NTSTATUS ndr_push_winreg_OpenHKCC(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKCC *r);\n+NTSTATUS ndr_pull_winreg_OpenHKCC(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKCC *r);\n+NTSTATUS ndr_push_winreg_OpenHKDD(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKDD *r);\n+NTSTATUS ndr_pull_winreg_OpenHKDD(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKDD *r);\n+NTSTATUS ndr_push_winreg_QueryMultipleValues(struct ndr_push *ndr,  \nint flags, const struct winreg_QueryMultipleValues *r);\n+NTSTATUS ndr_pull_winreg_QueryMultipleValues(struct ndr_pull *ndr,  \nint flags, struct winreg_QueryMultipleValues *r);\n+NTSTATUS ndr_push_winreg_InitiateSystemShutdownEx(struct ndr_push  \n*ndr, int flags, const struct winreg_InitiateSystemShutdownEx *r);\n+NTSTATUS ndr_pull_winreg_InitiateSystemShutdownEx(struct ndr_pull  \n*ndr, int flags, struct winreg_InitiateSystemShutdownEx *r);\n+NTSTATUS ndr_push_winreg_SaveKeyEx(struct ndr_push *ndr, int flags,  \nconst struct winreg_SaveKeyEx *r);\n+NTSTATUS ndr_pull_winreg_SaveKeyEx(struct ndr_pull *ndr, int flags,  \nstruct winreg_SaveKeyEx *r);\n+NTSTATUS ndr_push_winreg_OpenHKPT(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKPT *r);\n+NTSTATUS ndr_pull_winreg_OpenHKPT(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKPT *r);\n+NTSTATUS ndr_push_winreg_OpenHKPN(struct ndr_push *ndr, int flags,  \nconst struct winreg_OpenHKPN *r);\n+NTSTATUS ndr_pull_winreg_OpenHKPN(struct ndr_pull *ndr, int flags,  \nstruct winreg_OpenHKPN *r);\n+NTSTATUS ndr_push_winreg_QueryMultipleValues2(struct ndr_push *ndr,  \nint flags, const struct winreg_QueryMultipleValues2 *r);\n+NTSTATUS ndr_pull_winreg_QueryMultipleValues2(struct ndr_pull *ndr,  \nint flags, struct winreg_QueryMultipleValues2 *r);\n+\n+/* The following definitions come from librpc/gen_ndr/ndr_wkssvc.c  */\n+\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo100(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo100 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo100(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo100 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo101(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo101 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo101(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo101 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo102(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo102 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo102(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo102 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo502(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo502 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo502(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo502 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo1010(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo1010 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo1010(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo1010 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo1011(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo1011 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo1011(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo1011 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo1012(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo1012 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo1012(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo1012 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo1013(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo1013 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo1013(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo1013 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo1018(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo1018 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo1018(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo1018 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo1023(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo1023 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo1023(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo1023 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo1027(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo1027 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo1027(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo1027 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo1033(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_NetWkstaInfo1033 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo1033(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_NetWkstaInfo1033 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaInfo(struct ndr_push *ndr, int  \nndr_flags, const union wkssvc_NetWkstaInfo *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaInfo(struct ndr_pull *ndr, int  \nndr_flags, union wkssvc_NetWkstaInfo *r);\n+NTSTATUS ndr_push_USER_INFO_0(struct ndr_push *ndr, int ndr_flags,  \nconst struct USER_INFO_0 *r);\n+NTSTATUS ndr_pull_USER_INFO_0(struct ndr_pull *ndr, int ndr_flags,  \nstruct USER_INFO_0 *r);\n+NTSTATUS ndr_push_USER_INFO_0_CONTAINER(struct ndr_push *ndr, int  \nndr_flags, const struct USER_INFO_0_CONTAINER *r);\n+NTSTATUS ndr_pull_USER_INFO_0_CONTAINER(struct ndr_pull *ndr, int  \nndr_flags, struct USER_INFO_0_CONTAINER *r);\n+NTSTATUS ndr_push_USER_INFO_1(struct ndr_push *ndr, int ndr_flags,  \nconst struct USER_INFO_1 *r);\n+NTSTATUS ndr_pull_USER_INFO_1(struct ndr_pull *ndr, int ndr_flags,  \nstruct USER_INFO_1 *r);\n+NTSTATUS ndr_push_USER_INFO_1_CONTAINER(struct ndr_push *ndr, int  \nndr_flags, const struct USER_INFO_1_CONTAINER *r);\n+NTSTATUS ndr_pull_USER_INFO_1_CONTAINER(struct ndr_pull *ndr, int  \nndr_flags, struct USER_INFO_1_CONTAINER *r);\n+NTSTATUS ndr_push_WKS_USER_ENUM_UNION(struct ndr_push *ndr, int  \nndr_flags, const union WKS_USER_ENUM_UNION *r);\n+NTSTATUS ndr_pull_WKS_USER_ENUM_UNION(struct ndr_pull *ndr, int  \nndr_flags, union WKS_USER_ENUM_UNION *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaTransportInfo0(struct ndr_push  \n*ndr, int ndr_flags, const struct wkssvc_NetWkstaTransportInfo0 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaTransportInfo0(struct ndr_pull  \n*ndr, int ndr_flags, struct wkssvc_NetWkstaTransportInfo0 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaTransportCtr0(struct ndr_push *ndr,  \nint ndr_flags, const struct wkssvc_NetWkstaTransportCtr0 *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaTransportCtr0(struct ndr_pull *ndr,  \nint ndr_flags, struct wkssvc_NetWkstaTransportCtr0 *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaTransportCtr(struct ndr_push *ndr,  \nint ndr_flags, const union wkssvc_NetWkstaTransportCtr *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaTransportCtr(struct ndr_pull *ndr,  \nint ndr_flags, union wkssvc_NetWkstaTransportCtr *r);\n+NTSTATUS ndr_push_wkssvc_PasswordBuffer(struct ndr_push *ndr, int  \nndr_flags, const struct wkssvc_PasswordBuffer *r);\n+NTSTATUS ndr_pull_wkssvc_PasswordBuffer(struct ndr_pull *ndr, int  \nndr_flags, struct wkssvc_PasswordBuffer *r);\n+NTSTATUS ndr_push_wkssvc_joinflags(struct ndr_push *ndr, int  \nndr_flags, uint32_t r);\n+NTSTATUS ndr_pull_wkssvc_joinflags(struct ndr_pull *ndr, int  \nndr_flags, uint32_t *r);\n+NTSTATUS ndr_push_wkssvc_renameflags(struct ndr_push *ndr, int  \nndr_flags, uint32_t r);\n+NTSTATUS ndr_pull_wkssvc_renameflags(struct ndr_pull *ndr, int  \nndr_flags, uint32_t *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaGetInfo(struct ndr_push *ndr, int  \nflags, const struct wkssvc_NetWkstaGetInfo *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaGetInfo(struct ndr_pull *ndr, int  \nflags, struct wkssvc_NetWkstaGetInfo *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaSetInfo(struct ndr_push *ndr, int  \nflags, const struct wkssvc_NetWkstaSetInfo *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaSetInfo(struct ndr_pull *ndr, int  \nflags, struct wkssvc_NetWkstaSetInfo *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaEnumUsers(struct ndr_push *ndr, int  \nflags, const struct wkssvc_NetWkstaEnumUsers *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaEnumUsers(struct ndr_pull *ndr, int  \nflags, struct wkssvc_NetWkstaEnumUsers *r);\n+NTSTATUS ndr_push_WKSSVC_NETRWKSTAUSERGETINFO(struct ndr_push *ndr,  \nint flags, const struct WKSSVC_NETRWKSTAUSERGETINFO *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRWKSTAUSERGETINFO(struct ndr_pull *ndr,  \nint flags, struct WKSSVC_NETRWKSTAUSERGETINFO *r);\n+NTSTATUS ndr_push_WKSSVC_NETRWKSTAUSERSETINFO(struct ndr_push *ndr,  \nint flags, const struct WKSSVC_NETRWKSTAUSERSETINFO *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRWKSTAUSERSETINFO(struct ndr_pull *ndr,  \nint flags, struct WKSSVC_NETRWKSTAUSERSETINFO *r);\n+NTSTATUS ndr_push_wkssvc_NetWkstaTransportEnum(struct ndr_push *ndr,  \nint flags, const struct wkssvc_NetWkstaTransportEnum *r);\n+NTSTATUS ndr_pull_wkssvc_NetWkstaTransportEnum(struct ndr_pull *ndr,  \nint flags, struct wkssvc_NetWkstaTransportEnum *r);\n+NTSTATUS ndr_push_WKSSVC_NETRWKSTATRANSPORTADD(struct ndr_push *ndr,  \nint flags, const struct WKSSVC_NETRWKSTATRANSPORTADD *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRWKSTATRANSPORTADD(struct ndr_pull *ndr,  \nint flags, struct WKSSVC_NETRWKSTATRANSPORTADD *r);\n+NTSTATUS ndr_push_WKSSVC_NETRWKSTATRANSPORTDEL(struct ndr_push *ndr,  \nint flags, const struct WKSSVC_NETRWKSTATRANSPORTDEL *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRWKSTATRANSPORTDEL(struct ndr_pull *ndr,  \nint flags, struct WKSSVC_NETRWKSTATRANSPORTDEL *r);\n+NTSTATUS ndr_push_WKSSVC_NETRUSEADD(struct ndr_push *ndr, int flags,  \nconst struct WKSSVC_NETRUSEADD *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRUSEADD(struct ndr_pull *ndr, int flags,  \nstruct WKSSVC_NETRUSEADD *r);\n+NTSTATUS ndr_push_WKSSVC_NETRUSEGETINFO(struct ndr_push *ndr, int  \nflags, const struct WKSSVC_NETRUSEGETINFO *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRUSEGETINFO(struct ndr_pull *ndr, int  \nflags, struct WKSSVC_NETRUSEGETINFO *r);\n+NTSTATUS ndr_push_WKSSVC_NETRUSEDEL(struct ndr_push *ndr, int flags,  \nconst struct WKSSVC_NETRUSEDEL *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRUSEDEL(struct ndr_pull *ndr, int flags,  \nstruct WKSSVC_NETRUSEDEL *r);\n+NTSTATUS ndr_push_WKSSVC_NETRUSEENUM(struct ndr_push *ndr, int  \nflags, const struct WKSSVC_NETRUSEENUM *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRUSEENUM(struct ndr_pull *ndr, int  \nflags, struct WKSSVC_NETRUSEENUM *r);\n+NTSTATUS ndr_push_WKSSVC_NETRMESSAGEBUFFERSEND(struct ndr_push *ndr,  \nint flags, const struct WKSSVC_NETRMESSAGEBUFFERSEND *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRMESSAGEBUFFERSEND(struct ndr_pull *ndr,  \nint flags, struct WKSSVC_NETRMESSAGEBUFFERSEND *r);\n+NTSTATUS ndr_push_WKSSVC_NETRWORKSTATIONSTATISTICSGET(struct  \nndr_push *ndr, int flags, const struct  \nWKSSVC_NETRWORKSTATIONSTATISTICSGET *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRWORKSTATIONSTATISTICSGET(struct  \nndr_pull *ndr, int flags, struct WKSSVC_NETRWORKSTATIONSTATISTICSGET  \n*r);\n+NTSTATUS ndr_push_WKSSVC_NETRLOGONDOMAINNAMEADD(struct ndr_push  \n*ndr, int flags, const struct WKSSVC_NETRLOGONDOMAINNAMEADD *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRLOGONDOMAINNAMEADD(struct ndr_pull  \n*ndr, int flags, struct WKSSVC_NETRLOGONDOMAINNAMEADD *r);\n+NTSTATUS ndr_push_WKSSVC_NETRLOGONDOMAINNAMEDEL(struct ndr_push  \n*ndr, int flags, const struct WKSSVC_NETRLOGONDOMAINNAMEDEL *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRLOGONDOMAINNAMEDEL(struct ndr_pull  \n*ndr, int flags, struct WKSSVC_NETRLOGONDOMAINNAMEDEL *r);\n+NTSTATUS ndr_push_WKSSVC_NETRJOINDOMAIN(struct ndr_push *ndr, int  \nflags, const struct WKSSVC_NETRJOINDOMAIN *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRJOINDOMAIN(struct ndr_pull *ndr, int  \nflags, struct WKSSVC_NETRJOINDOMAIN *r);\n+NTSTATUS ndr_push_WKSSVC_NETRUNJOINDOMAIN(struct ndr_push *ndr, int  \nflags, const struct WKSSVC_NETRUNJOINDOMAIN *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRUNJOINDOMAIN(struct ndr_pull *ndr, int  \nflags, struct WKSSVC_NETRUNJOINDOMAIN *r);\n+NTSTATUS ndr_push_WKSSVC_NETRRENAMEMACHINEINDOMAIN(struct ndr_push  \n*ndr, int flags, const struct WKSSVC_NETRRENAMEMACHINEINDOMAIN *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRRENAMEMACHINEINDOMAIN(struct ndr_pull  \n*ndr, int flags, struct WKSSVC_NETRRENAMEMACHINEINDOMAIN *r);\n+NTSTATUS ndr_push_WKSSVC_NETRVALIDATENAME(struct ndr_push *ndr, int  \nflags, const struct WKSSVC_NETRVALIDATENAME *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRVALIDATENAME(struct ndr_pull *ndr, int  \nflags, struct WKSSVC_NETRVALIDATENAME *r);\n+NTSTATUS ndr_push_WKSSVC_NETRGETJOININFORMATION(struct ndr_push  \n*ndr, int flags, const struct WKSSVC_NETRGETJOININFORMATION *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRGETJOININFORMATION(struct ndr_pull  \n*ndr, int flags, struct WKSSVC_NETRGETJOININFORMATION *r);\n+NTSTATUS ndr_push_WKSSVC_NETRGETJOINABLEOUS(struct ndr_push *ndr,  \nint flags, const struct WKSSVC_NETRGETJOINABLEOUS *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRGETJOINABLEOUS(struct ndr_pull *ndr,  \nint flags, struct WKSSVC_NETRGETJOINABLEOUS *r);\n+NTSTATUS ndr_push_wkssvc_NetrJoinDomain2(struct ndr_push *ndr, int  \nflags, const struct wkssvc_NetrJoinDomain2 *r);\n+NTSTATUS ndr_pull_wkssvc_NetrJoinDomain2(struct ndr_pull *ndr, int  \nflags, struct wkssvc_NetrJoinDomain2 *r);\n+NTSTATUS ndr_push_wkssvc_NetrUnjoinDomain2(struct ndr_push *ndr, int  \nflags, const struct wkssvc_NetrUnjoinDomain2 *r);\n+NTSTATUS ndr_pull_wkssvc_NetrUnjoinDomain2(struct ndr_pull *ndr, int  \nflags, struct wkssvc_NetrUnjoinDomain2 *r);\n+NTSTATUS ndr_push_wkssvc_NetrRenameMachineInDomain2(struct ndr_push  \n*ndr, int flags, const struct wkssvc_NetrRenameMachineInDomain2 *r);\n+NTSTATUS ndr_pull_wkssvc_NetrRenameMachineInDomain2(struct ndr_pull  \n*ndr, int flags, struct wkssvc_NetrRenameMachineInDomain2 *r);\n+NTSTATUS ndr_push_WKSSVC_NETRVALIDATENAME2(struct ndr_push *ndr, int  \nflags, const struct WKSSVC_NETRVALIDATENAME2 *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRVALIDATENAME2(struct ndr_pull *ndr, int  \nflags, struct WKSSVC_NETRVALIDATENAME2 *r);\n+NTSTATUS ndr_push_WKSSVC_NETRGETJOINABLEOUS2(struct ndr_push *ndr,  \nint flags, const struct WKSSVC_NETRGETJOINABLEOUS2 *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRGETJOINABLEOUS2(struct ndr_pull *ndr,  \nint flags, struct WKSSVC_NETRGETJOINABLEOUS2 *r);\n+NTSTATUS ndr_push_wkssvc_NetrAddAlternateComputerName(struct  \nndr_push *ndr, int flags, const struct  \nwkssvc_NetrAddAlternateComputerName *r);\n+NTSTATUS ndr_pull_wkssvc_NetrAddAlternateComputerName(struct  \nndr_pull *ndr, int flags, struct wkssvc_NetrAddAlternateComputerName  \n*r);\n+NTSTATUS ndr_push_wkssvc_NetrRemoveAlternateComputerName(struct  \nndr_push *ndr, int flags, const struct  \nwkssvc_NetrRemoveAlternateComputerName *r);\n+NTSTATUS ndr_pull_wkssvc_NetrRemoveAlternateComputerName(struct  \nndr_pull *ndr, int flags, struct  \nwkssvc_NetrRemoveAlternateComputerName *r);\n+NTSTATUS ndr_push_WKSSVC_NETRSETPRIMARYCOMPUTERNAME(struct ndr_push  \n*ndr, int flags, const struct WKSSVC_NETRSETPRIMARYCOMPUTERNAME *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRSETPRIMARYCOMPUTERNAME(struct ndr_pull  \n*ndr, int flags, struct WKSSVC_NETRSETPRIMARYCOMPUTERNAME *r);\n+NTSTATUS ndr_push_WKSSVC_NETRENUMERATECOMPUTERNAMES(struct ndr_push  \n*ndr, int flags, const struct WKSSVC_NETRENUMERATECOMPUTERNAMES *r);\n+NTSTATUS ndr_pull_WKSSVC_NETRENUMERATECOMPUTERNAMES(struct ndr_pull  \n*ndr, int flags, struct WKSSVC_NETRENUMERATECOMPUTERNAMES *r);\n+\n+/* The following definitions come from librpc/gen_ndr/srv_dfs.c  */\n+\n+void netdfs_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_netdfs_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/srv_echo.c  */\n+\n+void rpcecho_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_rpcecho_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/ \nsrv_epmapper.c  */\n+\n+void epmapper_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_epmapper_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/ \nsrv_eventlog.c  */\n+\n+void eventlog_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_eventlog_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/ \nsrv_initshutdown.c  */\n+\n+void initshutdown_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_initshutdown_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/srv_lsa.c  */\n+\n+void lsarpc_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_lsarpc_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/srv_srvsvc.c  */\n+\n+void srvsvc_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_srvsvc_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/srv_svcctl.c  */\n+\n+void svcctl_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_svcctl_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/ \nsrv_unixinfo.c  */\n+\n+void unixinfo_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_unixinfo_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/srv_winreg.c  */\n+\n+void winreg_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_winreg_init(void);\n+\n+/* The following definitions come from librpc/gen_ndr/srv_wkssvc.c  */\n+\n+void wkssvc_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+NTSTATUS rpc_wkssvc_init(void);\n+\n+/* The following definitions come from librpc/ndr/ndr.c  */\n+\n+size_t ndr_align_size(uint32_t offset, size_t n);\n+struct ndr_pull *ndr_pull_init_blob(const DATA_BLOB *blob,  \nTALLOC_CTX *mem_ctx);\n+NTSTATUS ndr_pull_advance(struct ndr_pull *ndr, uint32_t size);\n+void ndr_pull_save(struct ndr_pull *ndr, struct ndr_pull_save *save);\n+void ndr_pull_restore(struct ndr_pull *ndr, struct ndr_pull_save  \n*save);\n+struct ndr_push *ndr_push_init_ctx(TALLOC_CTX *mem_ctx);\n+struct ndr_push *ndr_push_init(void);\n+void ndr_push_free(struct ndr_push *ndr);\n+DATA_BLOB ndr_push_blob(struct ndr_push *ndr);\n+NTSTATUS ndr_push_expand(struct ndr_push *ndr, uint32_t extra_size);\n+void ndr_print_debug_helper(struct ndr_print *ndr, const char  \n*format, ...) _PRINTF_ATTRIBUTE(2,3);\n+void ndr_print_debug(ndr_print_fn_t fn, const char *name, void *ptr);\n+void ndr_print_union_debug(ndr_print_fn_t fn, const char *name,  \nuint32_t level, void *ptr);\n+void ndr_print_function_debug(ndr_print_function_t fn, const char  \n*name, int flags, void *ptr);\n+char *ndr_print_function_string(TALLOC_CTX *mem_ctx,\n+\t\t\t\tndr_print_function_t fn, const char *name,\n+\t\t\t\tint flags, void *ptr);\n+void ndr_set_flags(uint32_t *pflags, uint32_t new_flags);\n+NTSTATUS ndr_pull_error(struct ndr_pull *ndr,\n+\t\t\t\t enum ndr_err_code ndr_err,\n+\t\t\t\t const char *format, ...) _PRINTF_ATTRIBUTE(3,4);\n+NTSTATUS ndr_push_error(struct ndr_push *ndr,\n+\t\t\t\t enum ndr_err_code ndr_err,\n+\t\t\t\t const char *format, ...)  _PRINTF_ATTRIBUTE(3,4);\n+NTSTATUS ndr_pull_subcontext_start(struct ndr_pull *ndr,\n+\t\t\t\t   struct ndr_pull **_subndr,\n+\t\t\t\t   size_t header_size,\n+\t\t\t\t   ssize_t size_is);\n+NTSTATUS ndr_pull_subcontext_end(struct ndr_pull *ndr,\n+\t\t\t\t struct ndr_pull *subndr,\n+\t\t\t\t size_t header_size,\n+\t\t\t\t ssize_t size_is);\n+NTSTATUS ndr_push_subcontext_start(struct ndr_push *ndr,\n+\t\t\t\t   struct ndr_push **_subndr,\n+\t\t\t\t   size_t header_size,\n+\t\t\t\t   ssize_t size_is);\n+NTSTATUS ndr_push_subcontext_end(struct ndr_push *ndr,\n+\t\t\t\t struct ndr_push *subndr,\n+\t\t\t\t size_t header_size,\n+\t\t\t\t ssize_t size_is);\n+NTSTATUS ndr_token_store(TALLOC_CTX *mem_ctx,\n+\t\t\t struct ndr_token_list **list,\n+\t\t\t const void *key,\n+\t\t\t uint32_t value);\n+NTSTATUS ndr_token_retrieve_cmp_fn(struct ndr_token_list **list,  \nconst void *key, uint32_t *v,\n+\t\t\t\t   comparison_fn_t _cmp_fn, BOOL _remove_tok);\n+NTSTATUS ndr_token_retrieve(struct ndr_token_list **list, const void  \n*key, uint32_t *v);\n+uint32_t ndr_token_peek(struct ndr_token_list **list, const void *key);\n+NTSTATUS ndr_pull_array_size(struct ndr_pull *ndr, const void *p);\n+uint32_t ndr_get_array_size(struct ndr_pull *ndr, const void *p);\n+NTSTATUS ndr_check_array_size(struct ndr_pull *ndr, void *p,  \nuint32_t size);\n+NTSTATUS ndr_pull_array_length(struct ndr_pull *ndr, const void *p);\n+uint32_t ndr_get_array_length(struct ndr_pull *ndr, const void *p);\n+NTSTATUS ndr_check_array_length(struct ndr_pull *ndr, void *p,  \nuint32_t length);\n+NTSTATUS ndr_push_set_switch_value(struct ndr_push *ndr, const void  \n*p, uint32_t val);\n+NTSTATUS ndr_pull_set_switch_value(struct ndr_pull *ndr, const void  \n*p, uint32_t val);\n+NTSTATUS ndr_print_set_switch_value(struct ndr_print *ndr, const  \nvoid *p, uint32_t val);\n+uint32_t ndr_push_get_switch_value(struct ndr_push *ndr, const void  \n*p);\n+uint32_t ndr_pull_get_switch_value(struct ndr_pull *ndr, const void  \n*p);\n+uint32_t ndr_print_get_switch_value(struct ndr_print *ndr, const  \nvoid *p);\n+NTSTATUS ndr_pull_struct_blob(const DATA_BLOB *blob, TALLOC_CTX  \n*mem_ctx, void *p,\n+\t\t\t      ndr_pull_flags_fn_t fn);\n+NTSTATUS ndr_pull_struct_blob_all(const DATA_BLOB *blob, TALLOC_CTX  \n*mem_ctx, void *p,\n+\t\t\t\t  ndr_pull_flags_fn_t fn);\n+NTSTATUS ndr_pull_union_blob(const DATA_BLOB *blob, TALLOC_CTX  \n*mem_ctx, void *p,\n+\t\t\t     uint32_t level, ndr_pull_flags_fn_t fn);\n+NTSTATUS ndr_push_struct_blob(DATA_BLOB *blob, TALLOC_CTX *mem_ctx,  \nconst void *p,\n+\t\t\t      ndr_push_flags_fn_t fn);\n+NTSTATUS ndr_push_union_blob(DATA_BLOB *blob, TALLOC_CTX *mem_ctx,  \nvoid *p,\n+\t\t\t     uint32_t level, ndr_push_flags_fn_t fn);\n+size_t ndr_size_struct(const void *p, int flags, ndr_push_flags_fn_t  \npush);\n+size_t ndr_size_union(const void *p, int flags, uint32_t level,  \nndr_push_flags_fn_t push);\n+uint32_t ndr_push_get_relative_base_offset(struct ndr_push *ndr);\n+void ndr_push_restore_relative_base_offset(struct ndr_push *ndr,  \nuint32_t offset);\n+NTSTATUS ndr_push_setup_relative_base_offset1(struct ndr_push *ndr,  \nconst void *p, uint32_t offset);\n+NTSTATUS ndr_push_setup_relative_base_offset2(struct ndr_push *ndr,  \nconst void *p);\n+NTSTATUS ndr_push_relative_ptr1(struct ndr_push *ndr, const void *p);\n+NTSTATUS ndr_push_relative_ptr2(struct ndr_push *ndr, const void *p);\n+uint32_t ndr_pull_get_relative_base_offset(struct ndr_pull *ndr);\n+void ndr_pull_restore_relative_base_offset(struct ndr_pull *ndr,  \nuint32_t offset);\n+NTSTATUS ndr_pull_setup_relative_base_offset1(struct ndr_pull *ndr,  \nconst void *p, uint32_t offset);\n+NTSTATUS ndr_pull_setup_relative_base_offset2(struct ndr_pull *ndr,  \nconst void *p);\n+NTSTATUS ndr_pull_relative_ptr1(struct ndr_pull *ndr, const void *p,  \nuint32_t rel_offset);\n+NTSTATUS ndr_pull_relative_ptr2(struct ndr_pull *ndr, const void *p);\n+\n+/* The following definitions come from librpc/ndr/ndr_basic.c  */\n+\n+void ndr_check_padding(struct ndr_pull *ndr, size_t n);\n+NTSTATUS ndr_pull_int8(struct ndr_pull *ndr, int ndr_flags, int8_t *v);\n+NTSTATUS ndr_pull_uint8(struct ndr_pull *ndr, int ndr_flags, uint8_t  \n*v);\n+NTSTATUS ndr_pull_int16(struct ndr_pull *ndr, int ndr_flags, int16_t  \n*v);\n+NTSTATUS ndr_pull_uint16(struct ndr_pull *ndr, int ndr_flags,  \nuint16_t *v);\n+NTSTATUS ndr_pull_int32(struct ndr_pull *ndr, int ndr_flags, int32_t  \n*v);\n+NTSTATUS ndr_pull_uint32(struct ndr_pull *ndr, int ndr_flags,  \nuint32_t *v);\n+NTSTATUS ndr_pull_generic_ptr(struct ndr_pull *ndr, uint32_t *v);\n+NTSTATUS ndr_pull_ref_ptr(struct ndr_pull *ndr, uint32_t *v);\n+NTSTATUS ndr_pull_udlong(struct ndr_pull *ndr, int ndr_flags,  \nuint64_t *v);\n+NTSTATUS ndr_pull_udlongr(struct ndr_pull *ndr, int ndr_flags,  \nuint64_t *v);\n+NTSTATUS ndr_pull_dlong(struct ndr_pull *ndr, int ndr_flags, int64_t  \n*v);\n+NTSTATUS ndr_pull_hyper(struct ndr_pull *ndr, int ndr_flags,  \nuint64_t *v);\n+NTSTATUS ndr_pull_pointer(struct ndr_pull *ndr, int ndr_flags, void*  \n*v);\n+NTSTATUS ndr_pull_NTSTATUS(struct ndr_pull *ndr, int ndr_flags,  \nNTSTATUS *status);\n+NTSTATUS ndr_push_NTSTATUS(struct ndr_push *ndr, int ndr_flags,  \nNTSTATUS status);\n+void ndr_print_NTSTATUS(struct ndr_print *ndr, const char *name,  \nNTSTATUS r);\n+NTSTATUS ndr_pull_WERROR(struct ndr_pull *ndr, int ndr_flags, WERROR  \n*status);\n+NTSTATUS ndr_push_WERROR(struct ndr_push *ndr, int ndr_flags, WERROR  \nstatus);\n+void ndr_print_WERROR(struct ndr_print *ndr, const char *name,  \nWERROR r);\n+NTSTATUS ndr_pull_bytes(struct ndr_pull *ndr, uint8_t *data,  \nuint32_t n);\n+NTSTATUS ndr_pull_array_uint8(struct ndr_pull *ndr, int ndr_flags,  \nuint8_t *data, uint32_t n);\n+NTSTATUS ndr_push_int8(struct ndr_push *ndr, int ndr_flags, int8_t v);\n+NTSTATUS ndr_push_uint8(struct ndr_push *ndr, int ndr_flags, uint8_t  \nv);\n+NTSTATUS ndr_push_int16(struct ndr_push *ndr, int ndr_flags, int16_t  \nv);\n+NTSTATUS ndr_push_uint16(struct ndr_push *ndr, int ndr_flags,  \nuint16_t v);\n+NTSTATUS ndr_push_int32(struct ndr_push *ndr, int ndr_flags, int32_t  \nv);\n+NTSTATUS ndr_push_uint32(struct ndr_push *ndr, int ndr_flags,  \nuint32_t v);\n+NTSTATUS ndr_push_udlong(struct ndr_push *ndr, int ndr_flags,  \nuint64_t v);\n+NTSTATUS ndr_push_udlongr(struct ndr_push *ndr, int ndr_flags,  \nuint64_t v);\n+NTSTATUS ndr_push_dlong(struct ndr_push *ndr, int ndr_flags, int64_t  \nv);\n+NTSTATUS ndr_push_hyper(struct ndr_push *ndr, int ndr_flags,  \nuint64_t v);\n+NTSTATUS ndr_push_pointer(struct ndr_push *ndr, int ndr_flags, void*  \nv);\n+NTSTATUS ndr_push_align(struct ndr_push *ndr, size_t size);\n+NTSTATUS ndr_pull_align(struct ndr_pull *ndr, size_t size);\n+NTSTATUS ndr_push_bytes(struct ndr_push *ndr, const uint8_t *data,  \nuint32_t n);\n+NTSTATUS ndr_push_zero(struct ndr_push *ndr, uint32_t n);\n+NTSTATUS ndr_push_array_uint8(struct ndr_push *ndr, int ndr_flags,  \nconst uint8_t *data, uint32_t n);\n+void ndr_push_save(struct ndr_push *ndr, struct ndr_push_save *save);\n+void ndr_push_restore(struct ndr_push *ndr, struct ndr_push_save  \n*save);\n+NTSTATUS ndr_push_unique_ptr(struct ndr_push *ndr, const void *p);\n+NTSTATUS ndr_push_full_ptr(struct ndr_push *ndr, const void *p);\n+NTSTATUS ndr_push_ref_ptr(struct ndr_push *ndr);\n+NTSTATUS ndr_push_NTTIME(struct ndr_push *ndr, int ndr_flags, NTTIME  \nt);\n+NTSTATUS ndr_pull_NTTIME(struct ndr_pull *ndr, int ndr_flags, NTTIME  \n*t);\n+NTSTATUS ndr_push_NTTIME_1sec(struct ndr_push *ndr, int ndr_flags,  \nNTTIME t);\n+NTSTATUS ndr_pull_NTTIME_1sec(struct ndr_pull *ndr, int ndr_flags,  \nNTTIME *t);\n+NTSTATUS ndr_pull_NTTIME_hyper(struct ndr_pull *ndr, int ndr_flags,  \nNTTIME *t);\n+NTSTATUS ndr_push_NTTIME_hyper(struct ndr_push *ndr, int ndr_flags,  \nNTTIME t);\n+NTSTATUS ndr_push_time_t(struct ndr_push *ndr, int ndr_flags, time_t  \nt);\n+NTSTATUS ndr_pull_time_t(struct ndr_pull *ndr, int ndr_flags, time_t  \n*t);\n+NTSTATUS ndr_pull_ipv4address(struct ndr_pull *ndr, int ndr_flags,  \nconst char **address);\n+NTSTATUS ndr_push_ipv4address(struct ndr_push *ndr, int ndr_flags,  \nconst char *address);\n+void ndr_print_ipv4address(struct ndr_print *ndr, const char *name,\n+\t\t\t   const char *address);\n+void ndr_print_struct(struct ndr_print *ndr, const char *name, const  \nchar *type);\n+void ndr_print_enum(struct ndr_print *ndr, const char *name, const  \nchar *type,\n+\t\t    const char *val, uint32_t value);\n+void ndr_print_bitmap_flag(struct ndr_print *ndr, size_t size, const  \nchar *flag_name, uint32_t flag, uint32_t value);\n+void ndr_print_int8(struct ndr_print *ndr, const char *name, int8_t v);\n+void ndr_print_uint8(struct ndr_print *ndr, const char *name,  \nuint8_t v);\n+void ndr_print_int16(struct ndr_print *ndr, const char *name,  \nint16_t v);\n+void ndr_print_uint16(struct ndr_print *ndr, const char *name,  \nuint16_t v);\n+void ndr_print_int32(struct ndr_print *ndr, const char *name,  \nint32_t v);\n+void ndr_print_uint32(struct ndr_print *ndr, const char *name,  \nuint32_t v);\n+void ndr_print_udlong(struct ndr_print *ndr, const char *name,  \nuint64_t v);\n+void ndr_print_udlongr(struct ndr_print *ndr, const char *name,  \nuint64_t v);\n+void ndr_print_dlong(struct ndr_print *ndr, const char *name,  \nint64_t v);\n+void ndr_print_hyper(struct ndr_print *ndr, const char *name,  \nuint64_t v);\n+void ndr_print_pointer(struct ndr_print *ndr, const char *name, void  \n*v);\n+void ndr_print_ptr(struct ndr_print *ndr, const char *name, const  \nvoid *p);\n+void ndr_print_NTTIME(struct ndr_print *ndr, const char *name,  \nNTTIME t);\n+void ndr_print_NTTIME_1sec(struct ndr_print *ndr, const char *name,  \nNTTIME t);\n+void ndr_print_NTTIME_hyper(struct ndr_print *ndr, const char *name,  \nNTTIME t);\n+void ndr_print_time_t(struct ndr_print *ndr, const char *name,  \ntime_t t);\n+void ndr_print_union(struct ndr_print *ndr, const char *name, int  \nlevel, const char *type);\n+void ndr_print_bad_level(struct ndr_print *ndr, const char *name,  \nuint16_t level);\n+void ndr_print_array_uint8(struct ndr_print *ndr, const char *name,\n+\t\t\t   const uint8_t *data, uint32_t count);\n+void ndr_print_DATA_BLOB(struct ndr_print *ndr, const char *name,  \nDATA_BLOB r);\n+NTSTATUS ndr_push_DATA_BLOB(struct ndr_push *ndr, int ndr_flags,  \nDATA_BLOB blob);\n+NTSTATUS ndr_pull_DATA_BLOB(struct ndr_pull *ndr, int ndr_flags,  \nDATA_BLOB *blob);\n+uint32_t ndr_size_DATA_BLOB(int ret, const DATA_BLOB *data, int flags);\n+\n+/* The following definitions come from librpc/ndr/ndr_misc.c  */\n+\n+NTSTATUS ndr_push_GUID(struct ndr_push *ndr, int ndr_flags, const  \nstruct GUID *r);\n+NTSTATUS ndr_pull_GUID(struct ndr_pull *ndr, int ndr_flags, struct  \nGUID *r);\n+size_t ndr_size_GUID(const struct GUID *r, int flags);\n+NTSTATUS GUID_from_string(const char *s, struct GUID *guid);\n+struct GUID GUID_random(void);\n+struct GUID GUID_zero(void);\n+BOOL all_zero(const uint8_t *ptr, size_t size);\n+BOOL GUID_all_zero(const struct GUID *u);\n+BOOL GUID_equal(const struct GUID *u1, const struct GUID *u2);\n+char *GUID_string(TALLOC_CTX *mem_ctx, const struct GUID *guid);\n+char *GUID_string2(TALLOC_CTX *mem_ctx, const struct GUID *guid);\n+void ndr_print_GUID(struct ndr_print *ndr, const char *name, const  \nstruct GUID *guid);\n+BOOL policy_handle_empty(struct policy_handle *h) ;\n+NTSTATUS ndr_push_policy_handle(struct ndr_push *ndr, int ndr_flags,  \nconst struct policy_handle *r);\n+NTSTATUS ndr_pull_policy_handle(struct ndr_pull *ndr, int ndr_flags,  \nstruct policy_handle *r);\n+void ndr_print_policy_handle(struct ndr_print *ndr, const char  \n*name, const struct policy_handle *r);\n+NTSTATUS ndr_push_server_id(struct ndr_push *ndr, int ndr_flags,  \nconst struct server_id *r);\n+NTSTATUS ndr_pull_server_id(struct ndr_pull *ndr, int ndr_flags,  \nstruct server_id *r);\n+void ndr_print_server_id(struct ndr_print *ndr, const char *name,  \nconst struct server_id *r);\n+\n+/* The following definitions come from librpc/ndr/ndr_sec_helper.c  */\n+\n+size_t ndr_size_dom_sid(const struct dom_sid *sid, int flags);\n+size_t ndr_size_security_ace(const struct security_ace *ace, int  \nflags);\n+size_t ndr_size_security_acl(const struct security_acl *acl, int  \nflags);\n+size_t ndr_size_security_descriptor(const struct security_descriptor  \n*sd, int flags);\n+void ndr_print_dom_sid(struct ndr_print *ndr, const char *name,  \nconst struct dom_sid *sid);\n+void ndr_print_dom_sid2(struct ndr_print *ndr, const char *name,  \nconst struct dom_sid *sid);\n+void ndr_print_dom_sid28(struct ndr_print *ndr, const char *name,  \nconst struct dom_sid *sid);\n+void ndr_print_security_ace_flags(struct ndr_print *ndr, const char  \n*name, uint8_t r);\n+void ndr_print_security_ace_type(struct ndr_print *ndr, const char  \n*name, enum security_ace_type r);\n+void ndr_print_security_ace_object_flags(struct ndr_print *ndr,  \nconst char *name, uint32_t r);\n+void ndr_print_security_ace_object_type(struct ndr_print *ndr, const  \nchar *name, const union security_ace_object_type *r);\n+void ndr_print_security_ace_object_inherited_type(struct ndr_print  \n*ndr, const char *name, const union  \nsecurity_ace_object_inherited_type *r);\n+void ndr_print_security_ace_object(struct ndr_print *ndr, const char  \n*name, const struct security_ace_object *r);\n+void ndr_print_security_ace_object_ctr(struct ndr_print *ndr, const  \nchar *name, const union security_ace_object_ctr *r);\n+NTSTATUS ndr_push_security_ace(struct ndr_push *ndr, int ndr_flags,  \nconst struct security_ace *r);\n+NTSTATUS ndr_pull_security_ace(struct ndr_pull *ndr, int ndr_flags,  \nstruct security_ace *r);\n+void ndr_print_security_ace(struct ndr_print *ndr, const char *name,  \nconst struct security_ace *r);\n+void ndr_print_security_acl_revision(struct ndr_print *ndr, const  \nchar *name, enum security_acl_revision r);\n+NTSTATUS ndr_push_security_acl(struct ndr_push *ndr, int ndr_flags,  \nconst struct security_acl *r);\n+NTSTATUS ndr_pull_security_acl(struct ndr_pull *ndr, int ndr_flags,  \nstruct security_acl *r);\n+void ndr_print_security_acl(struct ndr_print *ndr, const char *name,  \nconst struct security_acl *r);\n+void ndr_print_security_descriptor_revision(struct ndr_print *ndr,  \nconst char *name, enum security_descriptor_revision r);\n+void ndr_print_security_descriptor_type(struct ndr_print *ndr, const  \nchar *name, uint16_t r);\n+NTSTATUS ndr_push_security_descriptor(struct ndr_push *ndr, int  \nndr_flags, const struct security_descriptor *r);\n+NTSTATUS ndr_pull_security_descriptor(struct ndr_pull *ndr, int  \nndr_flags, struct security_descriptor *r);\n+void ndr_print_security_descriptor(struct ndr_print *ndr, const char  \n*name, const struct security_descriptor *r);\n+NTSTATUS ndr_push_security_secinfo(struct ndr_push *ndr, int  \nndr_flags, uint32_t r);\n+NTSTATUS ndr_pull_security_secinfo(struct ndr_pull *ndr, int  \nndr_flags, uint32_t *r);\n+void ndr_print_security_secinfo(struct ndr_print *ndr, const char  \n*name, uint32_t r);\n+\n+/* The following definitions come from librpc/ndr/ndr_string.c  */\n+\n+NTSTATUS ndr_pull_string(struct ndr_pull *ndr, int ndr_flags, const  \nchar **s);\n+NTSTATUS ndr_push_string(struct ndr_push *ndr, int ndr_flags, const  \nchar *s);\n+size_t ndr_string_array_size(struct ndr_push *ndr, const char *s);\n+void ndr_print_string(struct ndr_print *ndr, const char *name, const  \nchar *s);\n+uint32_t ndr_size_string(int ret, const char * const* string, int  \nflags) ;\n+NTSTATUS ndr_pull_string_array(struct ndr_pull *ndr, int ndr_flags,  \nconst char ***_a);\n+NTSTATUS ndr_push_string_array(struct ndr_push *ndr, int ndr_flags,  \nconst char **a);\n+void ndr_print_string_array(struct ndr_print *ndr, const char *name,  \nconst char **a);\n+uint32_t ndr_string_length(const void *_var, uint32_t element_size);\n+NTSTATUS ndr_check_string_terminator(struct ndr_pull *ndr, uint32_t  \ncount, uint32_t element_size);\n+NTSTATUS ndr_pull_charset(struct ndr_pull *ndr, int ndr_flags, const  \nchar **var, uint32_t length, uint8_t byte_mul, charset_t chset);\n+NTSTATUS ndr_push_charset(struct ndr_push *ndr, int ndr_flags, const  \nchar *var,\n+\t\t\t  uint32_t length, uint8_t byte_mul, charset_t chset);\n+uint32_t ndr_charset_length(const void *var, int chset);\n+\n+/* The following definitions come from librpc/ndr/sid.c  */\n+\n+NTSTATUS ndr_push_dom_sid(struct ndr_push *ndr, int ndr_flags, const  \nstruct dom_sid *r);\n+NTSTATUS ndr_pull_dom_sid(struct ndr_pull *ndr, int ndr_flags,  \nstruct dom_sid *r);\n+char *dom_sid_string(TALLOC_CTX *mem_ctx, const struct dom_sid *sid);\n+NTSTATUS ndr_pull_dom_sid2(struct ndr_pull *ndr, int ndr_flags,  \nstruct dom_sid *sid);\n+NTSTATUS ndr_push_dom_sid2(struct ndr_push *ndr, int ndr_flags,  \nconst struct dom_sid *sid);\n+NTSTATUS ndr_pull_dom_sid28(struct ndr_pull *ndr, int ndr_flags,  \nstruct dom_sid *sid);\n+NTSTATUS ndr_push_dom_sid28(struct ndr_push *ndr, int ndr_flags,  \nconst struct dom_sid *sid);\n+NTSTATUS ndr_push_sec_desc_buf(struct ndr_push *ndr, int ndr_flags,  \nconst struct sec_desc_buf *r);\n+NTSTATUS ndr_pull_sec_desc_buf(struct ndr_pull *ndr, int ndr_flags,  \nstruct sec_desc_buf *r);\n+void ndr_print_sec_desc_buf(struct ndr_print *ndr, const char *name,  \nconst struct sec_desc_buf *r);\n+\n+/* The following definitions come from libsmb/asn1.c  */\n+\n+void asn1_free(ASN1_DATA *data);\n+BOOL asn1_write(ASN1_DATA *data, const void *p, int len);\n+BOOL asn1_write_uint8(ASN1_DATA *data, uint8 v);\n+BOOL asn1_push_tag(ASN1_DATA *data, uint8 tag);\n+BOOL asn1_pop_tag(ASN1_DATA *data);\n+BOOL asn1_write_Integer(ASN1_DATA *data, int i);\n+BOOL asn1_write_OID(ASN1_DATA *data, const char *OID);\n+BOOL asn1_write_OctetString(ASN1_DATA *data, const void *p, size_t  \nlength);\n+BOOL asn1_write_GeneralString(ASN1_DATA *data, const char *s);\n+BOOL asn1_write_BOOLEAN(ASN1_DATA *data, BOOL v);\n+BOOL asn1_write_BOOLEAN2(ASN1_DATA *data, BOOL v);\n+BOOL asn1_check_BOOLEAN(ASN1_DATA *data, BOOL v);\n+BOOL asn1_load(ASN1_DATA *data, DATA_BLOB blob);\n+BOOL asn1_read(ASN1_DATA *data, void *p, int len);\n+BOOL asn1_read_uint8(ASN1_DATA *data, uint8 *v);\n+BOOL asn1_start_tag(ASN1_DATA *data, uint8 tag);\n+BOOL asn1_end_tag(ASN1_DATA *data);\n+int asn1_tag_remaining(ASN1_DATA *data);\n+BOOL asn1_read_OID(ASN1_DATA *data, char **OID);\n+BOOL asn1_check_OID(ASN1_DATA *data, const char *OID);\n+BOOL asn1_read_GeneralString(ASN1_DATA *data, char **s);\n+BOOL asn1_read_OctetString(ASN1_DATA *data, DATA_BLOB *blob);\n+BOOL asn1_read_Integer(ASN1_DATA *data, int *i);\n+BOOL asn1_check_enumerated(ASN1_DATA *data, int v);\n+BOOL asn1_write_enumerated(ASN1_DATA *data, uint8 v);\n+\n+/* The following definitions come from libsmb/cliconnect.c  */\n+\n+ADS_STATUS cli_session_setup_spnego(struct cli_state *cli, const  \nchar *user,\n+\t\t\t      const char *pass, const char *domain);\n+NTSTATUS cli_session_setup(struct cli_state *cli,\n+\t\t\t   const char *user,\n+\t\t\t   const char *pass, int passlen,\n+\t\t\t   const char *ntpass, int ntpasslen,\n+\t\t\t   const char *workgroup);\n+BOOL cli_ulogoff(struct cli_state *cli);\n+BOOL cli_send_tconX(struct cli_state *cli,\n+\t\t    const char *share, const char *dev, const char *pass, int  \npasslen);\n+BOOL cli_tdis(struct cli_state *cli);\n+void cli_negprot_send(struct cli_state *cli);\n+BOOL cli_negprot(struct cli_state *cli);\n+BOOL cli_session_request(struct cli_state *cli,\n+\t\t\t struct nmb_name *calling, struct nmb_name *called);\n+BOOL cli_connect(struct cli_state *cli, const char *host, struct  \nin_addr *ip);\n+NTSTATUS cli_start_connection(struct cli_state **output_cli,\n+\t\t\t      const char *my_name,\n+\t\t\t      const char *dest_host,\n+\t\t\t      struct in_addr *dest_ip, int port,\n+\t\t\t      int signing_state, int flags,\n+\t\t\t      BOOL *retry) ;\n+NTSTATUS cli_full_connection(struct cli_state **output_cli,\n+\t\t\t     const char *my_name,\n+\t\t\t     const char *dest_host,\n+\t\t\t     struct in_addr *dest_ip, int port,\n+\t\t\t     const char *service, const char *service_type,\n+\t\t\t     const char *user, const char *domain,\n+\t\t\t     const char *password, int flags,\n+\t\t\t     int signing_state,\n+\t\t\t     BOOL *retry) ;\n+BOOL attempt_netbios_session_request(struct cli_state **ppcli, const  \nchar *srchost, const char *desthost,\n+                                     struct in_addr *pdest_ip);\n+NTSTATUS cli_raw_tcon(struct cli_state *cli,\n+\t\t      const char *service, const char *pass, const char *dev,\n+\t\t      uint16 *max_xmit, uint16 *tid);\n+struct cli_state *get_ipc_connect(char *server, struct in_addr  \n*server_ip,\n+                                         struct user_auth_info  \n*user_info);\n+struct cli_state *get_ipc_connect_master_ip(struct ip_service *  \nmb_ip, pstring workgroup, struct user_auth_info *user_info);\n+struct cli_state *get_ipc_connect_master_ip_bcast(pstring workgroup,  \nstruct user_auth_info *user_info);\n+\n+/* The following definitions come from libsmb/clidfs.c  */\n+\n+const char *cli_cm_get_mntpoint( struct cli_state *c );\n+struct cli_state *cli_cm_open(const char *server,\n+\t\t\t\tconst char *share,\n+\t\t\t\tBOOL show_hdr);\n+void cli_cm_shutdown( void );\n+void cli_cm_display(void);\n+void cli_cm_set_credentials( struct user_auth_info *user );\n+void cli_cm_set_port( int port_number );\n+void cli_cm_set_dest_name_type( int type );\n+void cli_cm_set_dest_ip(struct in_addr ip );\n+BOOL cli_dfs_get_referral( struct cli_state *cli,\n+\t\t\tconst char *path,\n+\t\t\tCLIENT_DFS_REFERRAL**refs,\n+\t\t\tsize_t *num_refs,\n+\t\t\tuint16 *consumed);\n+BOOL cli_resolve_path( const char *mountpt,\n+\t\t\tstruct cli_state *rootcli,\n+\t\t\tconst char *path,\n+\t\t\tstruct cli_state **targetcli,\n+\t\t\tpstring targetpath);\n+BOOL cli_check_msdfs_proxy( struct cli_state *cli, const char  \n*sharename,\n+                            fstring newserver, fstring newshare );\n+\n+/* The following definitions come from libsmb/clidgram.c  */\n+\n+BOOL cli_send_mailslot(struct messaging_context *msg_ctx,\n+\t\t       BOOL unique, const char *mailslot,\n+\t\t       uint16 priority,\n+\t\t       char *buf, int len,\n+\t\t       const char *srcname, int src_type,\n+\t\t       const char *dstname, int dest_type,\n+\t\t       struct in_addr dest_ip);\n+BOOL cli_get_response(const char *mailslot, char *buf, int bufsiz);\n+int cli_get_backup_list(struct messaging_context *msg_ctx,\n+\t\t\tconst char *myname, const char *send_to_name);\n+int cli_get_backup_server(struct messaging_context *msg_ctx,\n+\t\t\t  char *my_name, char *target, char *servername,\n+\t\t\t  int namesize);\n+\n+/* The following definitions come from libsmb/clientgen.c  */\n+\n+unsigned int cli_set_timeout(struct cli_state *cli, unsigned int  \ntimeout);\n+int cli_set_port(struct cli_state *cli, int port);\n+BOOL cli_receive_smb_internal(struct cli_state *cli, BOOL  \neat_keepalives);\n+BOOL cli_receive_smb(struct cli_state *cli);\n+BOOL cli_receive_smb_return_keepalive(struct cli_state *cli);\n+ssize_t cli_receive_smb_data(struct cli_state *cli, char *buffer,  \nsize_t len);\n+BOOL cli_receive_smb_readX_header(struct cli_state *cli);\n+BOOL cli_send_smb(struct cli_state *cli);\n+void cli_setup_packet(struct cli_state *cli);\n+void cli_setup_bcc(struct cli_state *cli, void *p);\n+void cli_init_creds(struct cli_state *cli, const char *username,  \nconst char *domain, const char *password);\n+void cli_setup_signing_state(struct cli_state *cli, int signing_state);\n+struct cli_state *cli_initialise(void);\n+BOOL cli_rpc_pipe_close(struct rpc_pipe_client *cli);\n+void cli_nt_pipes_close(struct cli_state *cli);\n+void cli_shutdown(struct cli_state *cli);\n+void cli_sockopt(struct cli_state *cli, const char *options);\n+uint16 cli_setpid(struct cli_state *cli, uint16 pid);\n+BOOL cli_set_case_sensitive(struct cli_state *cli, BOOL  \ncase_sensitive);\n+BOOL cli_send_keepalive(struct cli_state *cli);\n+BOOL cli_echo(struct cli_state *cli, unsigned char *data, size_t  \nlength);\n+\n+/* The following definitions come from libsmb/clierror.c  */\n+\n+const char *cli_errstr(struct cli_state *cli);\n+NTSTATUS cli_nt_error(struct cli_state *cli);\n+void cli_dos_error(struct cli_state *cli, uint8 *eclass, uint32  \n*ecode);\n+int cli_errno(struct cli_state *cli);\n+BOOL cli_is_error(struct cli_state *cli);\n+BOOL cli_is_nt_error(struct cli_state *cli);\n+BOOL cli_is_dos_error(struct cli_state *cli);\n+NTSTATUS cli_get_nt_error(struct cli_state *cli);\n+void cli_set_nt_error(struct cli_state *cli, NTSTATUS status);\n+\n+/* The following definitions come from libsmb/clifile.c  */\n+\n+uint32 unix_perms_to_wire(mode_t perms);\n+mode_t wire_perms_to_unix(uint32 perms);\n+BOOL cli_unix_getfacl(struct cli_state *cli, const char *name,  \nsize_t *prb_size, char **retbuf);\n+BOOL cli_unix_stat(struct cli_state *cli, const char *name,  \nSMB_STRUCT_STAT *sbuf);\n+BOOL cli_unix_symlink(struct cli_state *cli, const char *oldname,  \nconst char *newname);\n+BOOL cli_unix_hardlink(struct cli_state *cli, const char *oldname,  \nconst char *newname);\n+BOOL cli_unix_chmod(struct cli_state *cli, const char *fname, mode_t  \nmode);\n+BOOL cli_unix_chown(struct cli_state *cli, const char *fname, uid_t  \nuid, gid_t gid);\n+BOOL cli_rename(struct cli_state *cli, const char *fname_src, const  \nchar *fname_dst);\n+BOOL cli_ntrename(struct cli_state *cli, const char *fname_src,  \nconst char *fname_dst);\n+BOOL cli_nt_hardlink(struct cli_state *cli, const char *fname_src,  \nconst char *fname_dst);\n+BOOL cli_unlink_full(struct cli_state *cli, const char *fname,  \nuint16 attrs);\n+BOOL cli_unlink(struct cli_state *cli, const char *fname);\n+BOOL cli_mkdir(struct cli_state *cli, const char *dname);\n+BOOL cli_rmdir(struct cli_state *cli, const char *dname);\n+int cli_nt_delete_on_close(struct cli_state *cli, int fnum, BOOL flag);\n+int cli_nt_create_full(struct cli_state *cli, const char *fname,\n+\t\t uint32 CreatFlags, uint32 DesiredAccess,\n+\t\t uint32 FileAttributes, uint32 ShareAccess,\n+\t\t uint32 CreateDisposition, uint32 CreateOptions,\n+\t\t uint8 SecuityFlags);\n+int cli_nt_create(struct cli_state *cli, const char *fname, uint32  \nDesiredAccess);\n+int cli_open(struct cli_state *cli, const char *fname, int flags,  \nint share_mode);\n+BOOL cli_close(struct cli_state *cli, int fnum);\n+NTSTATUS cli_locktype(struct cli_state *cli, int fnum,\n+\t\t      uint32 offset, uint32 len, int timeout, unsigned char  \nlocktype);\n+BOOL cli_lock(struct cli_state *cli, int fnum,\n+\t      uint32 offset, uint32 len, int timeout, enum brl_type  \nlock_type);\n+BOOL cli_unlock(struct cli_state *cli, int fnum, uint32 offset,  \nuint32 len);\n+BOOL cli_lock64(struct cli_state *cli, int fnum,\n+\t\tSMB_BIG_UINT offset, SMB_BIG_UINT len, int timeout, enum brl_type  \nlock_type);\n+BOOL cli_unlock64(struct cli_state *cli, int fnum, SMB_BIG_UINT  \noffset, SMB_BIG_UINT len);\n+BOOL cli_posix_lock(struct cli_state *cli, int fnum,\n+\t\t\tSMB_BIG_UINT offset, SMB_BIG_UINT len,\n+\t\t\tBOOL wait_lock, enum brl_type lock_type);\n+BOOL cli_posix_unlock(struct cli_state *cli, int fnum, SMB_BIG_UINT  \noffset, SMB_BIG_UINT len);\n+BOOL cli_posix_getlock(struct cli_state *cli, int fnum, SMB_BIG_UINT  \n*poffset, SMB_BIG_UINT *plen);\n+BOOL cli_getattrE(struct cli_state *cli, int fd,\n+\t\t  uint16 *attr, SMB_OFF_T *size,\n+\t\t  time_t *change_time,\n+                  time_t *access_time,\n+                  time_t *write_time);\n+BOOL cli_getatr(struct cli_state *cli, const char *fname,\n+\t\tuint16 *attr, SMB_OFF_T *size, time_t *write_time);\n+BOOL cli_setattrE(struct cli_state *cli, int fd,\n+\t\t  time_t change_time,\n+                  time_t access_time,\n+                  time_t write_time);\n+BOOL cli_setatr(struct cli_state *cli, const char *fname, uint16  \nattr, time_t t);\n+BOOL cli_chkpath(struct cli_state *cli, const char *path);\n+BOOL cli_dskattr(struct cli_state *cli, int *bsize, int *total, int  \n*avail);\n+int cli_ctemp(struct cli_state *cli, const char *path, char  \n**tmp_path);\n+NTSTATUS cli_raw_ioctl(struct cli_state *cli, int fnum, uint32 code,  \nDATA_BLOB *blob);\n+BOOL cli_set_ea_path(struct cli_state *cli, const char *path, const  \nchar *ea_name, const char *ea_val, size_t ea_len);\n+BOOL cli_set_ea_fnum(struct cli_state *cli, int fnum, const char  \n*ea_name, const char *ea_val, size_t ea_len);\n+BOOL cli_get_ea_list_path(struct cli_state *cli, const char *path,\n+\t\tTALLOC_CTX *ctx,\n+\t\tsize_t *pnum_eas,\n+\t\tstruct ea_struct **pea_list);\n+BOOL cli_get_ea_list_fnum(struct cli_state *cli, int fnum,\n+\t\tTALLOC_CTX *ctx,\n+\t\tsize_t *pnum_eas,\n+\t\tstruct ea_struct **pea_list);\n+int cli_posix_open(struct cli_state *cli, const char *fname, int  \nflags, mode_t mode);\n+int cli_posix_mkdir(struct cli_state *cli, const char *fname, mode_t  \nmode);\n+BOOL cli_posix_unlink(struct cli_state *cli, const char *fname);\n+int cli_posix_rmdir(struct cli_state *cli, const char *fname);\n+\n+/* The following definitions come from libsmb/clifsinfo.c  */\n+\n+BOOL cli_unix_extensions_version(struct cli_state *cli, uint16  \n*pmajor, uint16 *pminor,\n+                                        uint32 *pcaplow, uint32  \n*pcaphigh);\n+BOOL cli_set_unix_extensions_capabilities(struct cli_state *cli,  \nuint16 major, uint16 minor,\n+                                        uint32 caplow, uint32 caphigh);\n+BOOL cli_get_fs_attr_info(struct cli_state *cli, uint32 *fs_attr);\n+BOOL cli_get_fs_volume_info_old(struct cli_state *cli, fstring  \nvolume_name, uint32 *pserial_number);\n+BOOL cli_get_fs_volume_info(struct cli_state *cli, fstring  \nvolume_name, uint32 *pserial_number, time_t *pdate);\n+NTSTATUS cli_raw_ntlm_smb_encryption_start(struct cli_state *cli,\n+\t\t\t\tconst char *user,\n+\t\t\t\tconst char *pass,\n+\t\t\t\tconst char *domain);\n+NTSTATUS cli_gss_smb_encryption_start(struct cli_state *cli);\n+NTSTATUS cli_gss_smb_encryption_start(struct cli_state *cli);\n+\n+/* The following definitions come from libsmb/clikrb5.c  */\n+\n+BOOL unwrap_edata_ntstatus(TALLOC_CTX *mem_ctx,\n+\t\t\t   DATA_BLOB *edata,\n+\t\t\t   DATA_BLOB *edata_out);\n+BOOL unwrap_pac(TALLOC_CTX *mem_ctx, DATA_BLOB *auth_data, DATA_BLOB  \n*unwrapped_pac_data);\n+int cli_krb5_get_ticket(const char *principal, time_t time_offset,\n+\t\t\tDATA_BLOB *ticket, DATA_BLOB *session_key_krb5,\n+\t\t\tuint32 extra_ap_opts, const char *ccname,\n+\t\t\ttime_t *tgs_expire);\n+\n+/* The following definitions come from libsmb/clilist.c  */\n+\n+int cli_list_new(struct cli_state *cli,const char *Mask,uint16  \nattribute,\n+\t\t void (*fn)(const char *, file_info *, const char *, void *), void  \n*state);\n+int cli_list_old(struct cli_state *cli,const char *Mask,uint16  \nattribute,\n+\t\t void (*fn)(const char *, file_info *, const char *, void *), void  \n*state);\n+int cli_list(struct cli_state *cli,const char *Mask,uint16 attribute,\n+\t     void (*fn)(const char *, file_info *, const char *, void *),  \nvoid *state);\n+\n+/* The following definitions come from libsmb/climessage.c  */\n+\n+int cli_message_start_build(struct cli_state *cli, char *host, char  \n*username);\n+BOOL cli_message_start(struct cli_state *cli, char *host, char  \n*username,\n+\t\t\t      int *grp);\n+int cli_message_text_build(struct cli_state *cli, char *msg, int  \nlen, int grp);\n+BOOL cli_message_text(struct cli_state *cli, char *msg, int len, int  \ngrp);\n+int cli_message_end_build(struct cli_state *cli, int grp);\n+BOOL cli_message_end(struct cli_state *cli, int grp);\n+\n+/* The following definitions come from libsmb/clioplock.c  */\n+\n+BOOL cli_oplock_ack(struct cli_state *cli, int fnum, unsigned char  \nlevel);\n+void cli_oplock_handler(struct cli_state *cli,\n+\t\t\tBOOL (*handler)(struct cli_state *, int, unsigned char));\n+\n+/* The following definitions come from libsmb/cliprint.c  */\n+\n+int cli_print_queue(struct cli_state *cli,\n+\t\t    void (*fn)(struct print_job_info *));\n+int cli_printjob_del(struct cli_state *cli, int job);\n+int cli_spl_open(struct cli_state *cli, const char *fname, int  \nflags, int share_mode);\n+BOOL cli_spl_close(struct cli_state *cli, int fnum);\n+\n+/* The following definitions come from libsmb/cliquota.c  */\n+\n+BOOL cli_get_quota_handle(struct cli_state *cli, int *quota_fnum);\n+void free_ntquota_list(SMB_NTQUOTA_LIST **qt_list);\n+BOOL cli_get_user_quota(struct cli_state *cli, int quota_fnum,  \nSMB_NTQUOTA_STRUCT *pqt);\n+BOOL cli_set_user_quota(struct cli_state *cli, int quota_fnum,  \nSMB_NTQUOTA_STRUCT *pqt);\n+BOOL cli_list_user_quota(struct cli_state *cli, int quota_fnum,  \nSMB_NTQUOTA_LIST **pqt_list);\n+BOOL cli_get_fs_quota_info(struct cli_state *cli, int quota_fnum,  \nSMB_NTQUOTA_STRUCT *pqt);\n+BOOL cli_set_fs_quota_info(struct cli_state *cli, int quota_fnum,  \nSMB_NTQUOTA_STRUCT *pqt);\n+void dump_ntquota(SMB_NTQUOTA_STRUCT *qt, BOOL _verbose, BOOL  \n_numeric, void (*_sidtostring)(fstring str, DOM_SID *sid, BOOL  \n_numeric));\n+void dump_ntquota_list(SMB_NTQUOTA_LIST **qtl, BOOL _verbose, BOOL  \n_numeric, void (*_sidtostring)(fstring str, DOM_SID *sid, BOOL  \n_numeric));\n+\n+/* The following definitions come from libsmb/clirap.c  */\n+\n+BOOL cli_api_pipe(struct cli_state *cli, const char *pipe_name,\n+                  uint16 *setup, uint32 setup_count, uint32  \nmax_setup_count,\n+                  char *params, uint32 param_count, uint32  \nmax_param_count,\n+                  char *data, uint32 data_count, uint32 max_data_count,\n+                  char **rparam, uint32 *rparam_count,\n+                  char **rdata, uint32 *rdata_count);\n+BOOL cli_api(struct cli_state *cli,\n+\t     char *param, int prcnt, int mprcnt,\n+\t     char *data, int drcnt, int mdrcnt,\n+\t     char **rparam, unsigned int *rprcnt,\n+\t     char **rdata, unsigned int *rdrcnt);\n+BOOL cli_NetWkstaUserLogon(struct cli_state *cli,char *user, char  \n*workstation);\n+int cli_RNetShareEnum(struct cli_state *cli, void (*fn)(const char  \n*, uint32, const char *, void *), void *state);\n+BOOL cli_NetServerEnum(struct cli_state *cli, char *workgroup,  \nuint32 stype,\n+\t\t       void (*fn)(const char *, uint32, const char *, void *),\n+\t\t       void *state);\n+BOOL cli_oem_change_password(struct cli_state *cli, const char  \n*user, const char *new_password,\n+                             const char *old_password);\n+BOOL cli_qpathinfo(struct cli_state *cli, const char *fname,\n+\t\t   time_t *change_time,\n+                   time_t *access_time,\n+                   time_t *write_time,\n+\t\t   SMB_OFF_T *size, uint16 *mode);\n+BOOL cli_setpathinfo(struct cli_state *cli, const char *fname,\n+                     time_t create_time,\n+                     time_t access_time,\n+                     time_t write_time,\n+                     time_t change_time,\n+                     uint16 mode);\n+BOOL cli_qpathinfo2(struct cli_state *cli, const char *fname,\n+\t\t    struct timespec *create_time,\n+                    struct timespec *access_time,\n+                    struct timespec *write_time,\n+\t\t    struct timespec *change_time,\n+                    SMB_OFF_T *size, uint16 *mode,\n+\t\t    SMB_INO_T *ino);\n+BOOL cli_qfilename(struct cli_state *cli, int fnum,\n+\t\t   pstring name);\n+BOOL cli_qfileinfo(struct cli_state *cli, int fnum,\n+\t\t   uint16 *mode, SMB_OFF_T *size,\n+\t\t   struct timespec *create_time,\n+                   struct timespec *access_time,\n+                   struct timespec *write_time,\n+\t\t   struct timespec *change_time,\n+                   SMB_INO_T *ino);\n+BOOL cli_qpathinfo_basic( struct cli_state *cli, const char *name,\n+                          SMB_STRUCT_STAT *sbuf, uint32 *attributes );\n+BOOL cli_qfileinfo_test(struct cli_state *cli, int fnum, int level,  \nchar **poutdata, uint32 *poutlen);\n+NTSTATUS cli_qpathinfo_alt_name(struct cli_state *cli, const char  \n*fname, fstring alt_name);\n+\n+/* The following definitions come from libsmb/clirap2.c  */\n+\n+int cli_NetGroupDelete(struct cli_state *cli, const char *group_name );\n+int cli_NetGroupAdd(struct cli_state *cli, RAP_GROUP_INFO_1 * grinfo );\n+int cli_RNetGroupEnum(struct cli_state *cli, void (*fn)(const char  \n*, const char *, void *), void *state);\n+int cli_RNetGroupEnum0(struct cli_state *cli,\n+\t\t       void (*fn)(const char *, void *),\n+\t\t       void *state);\n+int cli_NetGroupDelUser(struct cli_state * cli, const char  \n*group_name, const char *user_name);\n+int cli_NetGroupAddUser(struct cli_state * cli, const char  \n*group_name, const char *user_name);\n+int cli_NetGroupGetUsers(struct cli_state * cli, const char  \n*group_name, void (*fn)(const char *, void *), void *state );\n+int cli_NetUserGetGroups(struct cli_state * cli, const char  \n*user_name, void (*fn)(const char *, void *), void *state );\n+int cli_NetUserDelete(struct cli_state *cli, const char * user_name );\n+int cli_NetUserAdd(struct cli_state *cli, RAP_USER_INFO_1 * userinfo );\n+int cli_RNetUserEnum(struct cli_state *cli, void (*fn)(const char *,  \nconst char *, const char *, const char *, void *), void *state);\n+int cli_RNetUserEnum0(struct cli_state *cli,\n+\t\t      void (*fn)(const char *, void *),\n+\t\t      void *state);\n+int cli_NetFileClose(struct cli_state *cli, uint32 file_id );\n+int cli_NetFileGetInfo(struct cli_state *cli, uint32 file_id, void  \n(*fn)(const char *, const char *, uint16, uint16, uint32));\n+int cli_NetFileEnum(struct cli_state *cli, char * user, char *  \nbase_path, void (*fn)(const char *, const char *, uint16, uint16,  \nuint32));\n+int cli_NetShareAdd(struct cli_state *cli, RAP_SHARE_INFO_2 * sinfo );\n+int cli_NetShareDelete(struct cli_state *cli, const char *  \nshare_name );\n+BOOL cli_get_pdc_name(struct cli_state *cli, char *workgroup, char  \n*pdc_name);\n+BOOL cli_get_server_domain(struct cli_state *cli);\n+BOOL cli_get_server_type(struct cli_state *cli, uint32 *pstype);\n+BOOL cli_get_server_name(TALLOC_CTX *mem_ctx, struct cli_state *cli,\n+\t\t\t char **servername);\n+BOOL cli_ns_check_server_type(struct cli_state *cli, char  \n*workgroup, uint32 stype);\n+BOOL cli_NetWkstaUserLogoff(struct cli_state *cli,char *user, char  \n*workstation);\n+int cli_NetPrintQEnum(struct cli_state *cli,\n+\t\tvoid (*qfn)(const char*,uint16,uint16,uint16,const char*,const  \nchar*,const char*,const char*,const char*,uint16,uint16),\n+\t\tvoid (*jfn)(uint16,const char*,const char*,const char*,const  \nchar*,uint16,uint16,const char*,uint,uint,const char*));\n+int cli_NetPrintQGetInfo(struct cli_state *cli, const char *printer,\n+\tvoid (*qfn)(const char*,uint16,uint16,uint16,const char*,const  \nchar*,const char*,const char*,const char*,uint16,uint16),\n+\tvoid (*jfn)(uint16,const char*,const char*,const char*,const  \nchar*,uint16,uint16,const char*,uint,uint,const char*));\n+int cli_RNetServiceEnum(struct cli_state *cli, void (*fn)(const char  \n*, const char *, void *), void *state);\n+int cli_NetSessionEnum(struct cli_state *cli, void (*fn)(char *,  \nchar *, uint16, uint16, uint16, uint, uint, uint, char *));\n+int cli_NetSessionGetInfo(struct cli_state *cli, const char  \n*workstation, void (*fn)(const char *, const char *, uint16, uint16,  \nuint16, uint, uint, uint, const char *));\n+int cli_NetSessionDel(struct cli_state *cli, const char *workstation);\n+int cli_NetConnectionEnum(struct cli_state *cli, const char  \n*qualifier, void (*fn)(uint16 conid, uint16 contype, uint16 numopens,  \nuint16 numusers, uint32 contime, const char *username, const char  \n*netname));\n+\n+/* The following definitions come from libsmb/clireadwrite.c  */\n+\n+ssize_t cli_read(struct cli_state *cli, int fnum, char *buf, off_t  \noffset, size_t size);\n+ssize_t cli_readraw(struct cli_state *cli, int fnum, char *buf,  \noff_t offset, size_t size);\n+ssize_t cli_write(struct cli_state *cli,\n+    \t         int fnum, uint16 write_mode,\n+\t\t const char *buf, off_t offset, size_t size);\n+ssize_t cli_smbwrite(struct cli_state *cli,\n+\t\t     int fnum, char *buf, off_t offset, size_t size1);\n+\n+/* The following definitions come from libsmb/clisecdesc.c  */\n+\n+SEC_DESC *cli_query_secdesc(struct cli_state *cli, int fnum,\n+\t\t\t    TALLOC_CTX *mem_ctx);\n+BOOL cli_set_secdesc(struct cli_state *cli, int fnum, SEC_DESC *sd);\n+\n+/* The following definitions come from libsmb/clispnego.c  */\n+\n+DATA_BLOB spnego_gen_negTokenInit(char guid[16],\n+\t\t\t\t  const char *OIDs[],\n+\t\t\t\t  const char *principal);\n+DATA_BLOB gen_negTokenInit(const char *OID, DATA_BLOB blob);\n+BOOL spnego_parse_negTokenInit(DATA_BLOB blob,\n+\t\t\t       char *OIDs[ASN1_MAX_OIDS],\n+\t\t\t       char **principal);\n+DATA_BLOB gen_negTokenTarg(const char *OIDs[], DATA_BLOB blob);\n+BOOL parse_negTokenTarg(DATA_BLOB blob, char *OIDs[ASN1_MAX_OIDS],  \nDATA_BLOB *secblob);\n+DATA_BLOB spnego_gen_krb5_wrap(const DATA_BLOB ticket, const uint8  \ntok_id[2]);\n+BOOL spnego_parse_krb5_wrap(DATA_BLOB blob, DATA_BLOB *ticket, uint8  \ntok_id[2]);\n+int spnego_gen_negTokenTarg(const char *principal, int time_offset,\n+\t\t\t    DATA_BLOB *targ,\n+\t\t\t    DATA_BLOB *session_key_krb5, uint32 extra_ap_opts,\n+\t\t\t    time_t *expire_time);\n+BOOL spnego_parse_challenge(const DATA_BLOB blob,\n+\t\t\t    DATA_BLOB *chal1, DATA_BLOB *chal2);\n+DATA_BLOB spnego_gen_auth(DATA_BLOB blob);\n+BOOL spnego_parse_auth(DATA_BLOB blob, DATA_BLOB *auth);\n+DATA_BLOB spnego_gen_auth_response(DATA_BLOB *reply, NTSTATUS  \nnt_status,\n+\t\t\t\t   const char *mechOID);\n+BOOL spnego_parse_auth_response(DATA_BLOB blob, NTSTATUS nt_status,\n+\t\t\t\tconst char *mechOID,\n+\t\t\t\tDATA_BLOB *auth);\n+\n+/* The following definitions come from libsmb/clistr.c  */\n+\n+size_t clistr_push_fn(const char *function, unsigned int line,\n+\t\t   struct cli_state *cli, void *dest,\n+\t\t   const char *src, int dest_len, int flags);\n+size_t clistr_pull_fn(const char *function, unsigned int line,\n+\t\t   struct cli_state *cli, char *dest, const void *src,\n+\t\t   int dest_len, int src_len,\n+\t\t   int flags);\n+size_t clistr_align_out(struct cli_state *cli, const void *p, int  \nflags);\n+size_t clistr_align_in(struct cli_state *cli, const void *p, int  \nflags);\n+\n+/* The following definitions come from libsmb/clitrans.c  */\n+\n+BOOL cli_send_trans(struct cli_state *cli, int trans,\n+\t\t    const char *pipe_name,\n+\t\t    int fid, int flags,\n+\t\t    uint16 *setup, unsigned int lsetup, unsigned int msetup,\n+\t\t    const char *param, unsigned int lparam, unsigned int mparam,\n+\t\t    const char *data, unsigned int ldata, unsigned int mdata);\n+BOOL cli_receive_trans(struct cli_state *cli,int trans,\n+                              char **param, unsigned int *param_len,\n+                              char **data, unsigned int *data_len);\n+BOOL cli_send_nt_trans(struct cli_state *cli,\n+\t\t       int function,\n+\t\t       int flags,\n+\t\t       uint16 *setup, unsigned int lsetup, unsigned int msetup,\n+\t\t       char *param, unsigned int lparam, unsigned int mparam,\n+\t\t       char *data, unsigned int ldata, unsigned int mdata);\n+BOOL cli_receive_nt_trans(struct cli_state *cli,\n+\t\t\t  char **param, unsigned int *param_len,\n+\t\t\t  char **data, unsigned int *data_len);\n+\n+/* The following definitions come from libsmb/conncache.c  */\n+\n+NTSTATUS check_negative_conn_cache_timeout( const char *domain,  \nconst char *server, unsigned int failed_cache_timeout );\n+NTSTATUS check_negative_conn_cache( const char *domain, const char  \n*server);\n+void add_failed_connection_entry(const char *domain, const char  \n*server, NTSTATUS result) ;\n+void flush_negative_conn_cache( void );\n+void flush_negative_conn_cache_for_domain(const char *domain);\n+\n+/* The following definitions come from libsmb/credentials.c  */\n+\n+char *credstr(const unsigned char *cred);\n+void creds_server_init(uint32 neg_flags,\n+\t\t\tstruct dcinfo *dc,\n+\t\t\tDOM_CHAL *clnt_chal,\n+\t\t\tDOM_CHAL *srv_chal,\n+\t\t\tconst unsigned char mach_pw[16],\n+\t\t\tDOM_CHAL *init_chal_out);\n+BOOL creds_server_check(const struct dcinfo *dc, const DOM_CHAL  \n*rcv_cli_chal_in);\n+BOOL creds_server_step(struct dcinfo *dc, const DOM_CRED  \n*received_cred, DOM_CRED *cred_out);\n+void creds_client_init(uint32 neg_flags,\n+\t\t\tstruct dcinfo *dc,\n+\t\t\tDOM_CHAL *clnt_chal,\n+\t\t\tDOM_CHAL *srv_chal,\n+\t\t\tconst unsigned char mach_pw[16],\n+\t\t\tDOM_CHAL *init_chal_out);\n+BOOL creds_client_check(const struct dcinfo *dc, const DOM_CHAL  \n*rcv_srv_chal_in);\n+void creds_client_step(struct dcinfo *dc, DOM_CRED *next_cred_out);\n+\n+/* The following definitions come from libsmb/dcerpc_err.c  */\n+\n+const char *dcerpc_errstr(uint32 fault_code);\n+\n+/* The following definitions come from libsmb/doserr.c  */\n+\n+const char *dos_errstr(WERROR werror);\n+\n+/* The following definitions come from libsmb/errormap.c  */\n+\n+NTSTATUS dos_to_ntstatus(uint8 eclass, uint32 ecode);\n+void ntstatus_to_dos(NTSTATUS ntstatus, uint8 *eclass, uint32 *ecode);\n+NTSTATUS werror_to_ntstatus(WERROR error);\n+WERROR ntstatus_to_werror(NTSTATUS error);\n+NTSTATUS map_nt_error_from_gss(uint32 gss_maj, uint32 minor);\n+\n+/* The following definitions come from libsmb/namecache.c  */\n+\n+BOOL namecache_enable(void);\n+BOOL namecache_shutdown(void);\n+BOOL namecache_store(const char *name, int name_type,\n+                     int num_names, struct ip_service *ip_list);\n+BOOL namecache_fetch(const char *name, int name_type, struct  \nip_service **ip_list,\n+                     int *num_names);\n+BOOL namecache_delete(const char *name, int name_type);\n+void namecache_flush(void);\n+BOOL namecache_status_store(const char *keyname, int keyname_type,\n+\t\tint name_type, struct in_addr keyip,\n+\t\tconst char *srvname);\n+BOOL namecache_status_fetch(const char *keyname, int keyname_type,\n+\t\t\tint name_type, struct in_addr keyip, char *srvname_out);\n+\n+/* The following definitions come from libsmb/namequery.c  */\n+\n+BOOL saf_store( const char *domain, const char *servername );\n+BOOL saf_delete( const char *domain );\n+char *saf_fetch( const char *domain );\n+NODE_STATUS_STRUCT *node_status_query(int fd,struct nmb_name *name,\n+\t\t\t\t      struct in_addr to_ip, int *num_names,\n+\t\t\t\t      struct node_status_extra *extra);\n+BOOL name_status_find(const char *q_name, int q_type, int type,  \nstruct in_addr to_ip, fstring name);\n+int ip_service_compare(struct ip_service *ip1, struct ip_service *ip2);\n+struct in_addr *name_query(int fd,const char *name,int name_type,\n+\t\t\t   BOOL bcast,BOOL recurse,\n+\t\t\t   struct in_addr to_ip, int *count, int *flags,\n+\t\t\t   BOOL *timed_out);\n+XFILE *startlmhosts(const char *fname);\n+BOOL getlmhostsent( XFILE *fp, pstring name, int *name_type, struct  \nin_addr *ipaddr);\n+void endlmhosts(XFILE *fp);\n+BOOL name_resolve_bcast(const char *name, int name_type,\n+\t\t\tstruct ip_service **return_iplist, int *return_count);\n+BOOL resolve_wins(const char *name, int name_type,\n+\t\t  struct ip_service **return_iplist, int *return_count);\n+BOOL internal_resolve_name(const char *name, int name_type,\n+\t\t\t   const char *sitename,\n+\t\t\t   struct ip_service **return_iplist,\n+\t\t\t   int *return_count, const char *resolve_order);\n+BOOL resolve_name(const char *name, struct in_addr *return_ip, int  \nname_type);\n+BOOL find_master_ip(const char *group, struct in_addr *master_ip);\n+BOOL get_pdc_ip(const char *domain, struct in_addr *ip);\n+NTSTATUS get_sorted_dc_list( const char *domain, const char  \n*sitename, struct ip_service **ip_list, int *count, BOOL ads_only );\n+NTSTATUS get_kdc_list( const char *realm, const char *sitename,  \nstruct ip_service **ip_list, int *count);\n+\n+/* The following definitions come from libsmb/namequery_dc.c  */\n+\n+BOOL get_dc_name(const char *domain, const char *realm, fstring  \nsrv_name, struct in_addr *ip_out);\n+\n+/* The following definitions come from libsmb/nmblib.c  */\n+\n+void debug_nmb_packet(struct packet_struct *p);\n+void put_name(char *dest, const char *name, int pad, unsigned int  \nname_type);\n+char *nmb_namestr(const struct nmb_name *n);\n+struct packet_struct *copy_packet(struct packet_struct *packet);\n+void free_packet(struct packet_struct *packet);\n+struct packet_struct *parse_packet(char *buf,int length,\n+\t\t\t\t   enum packet_type packet_type);\n+struct packet_struct *read_packet(int fd,enum packet_type packet_type);\n+void make_nmb_name( struct nmb_name *n, const char *name, int type);\n+BOOL nmb_name_equal(struct nmb_name *n1, struct nmb_name *n2);\n+int build_packet(char *buf, struct packet_struct *p);\n+BOOL send_packet(struct packet_struct *p);\n+struct packet_struct *receive_packet(int fd,enum packet_type  \ntype,int t);\n+struct packet_struct *receive_nmb_packet(int fd, int t, int trn_id);\n+struct packet_struct *receive_dgram_packet(int fd, int t, const char  \n*mailslot_name);\n+BOOL match_mailslot_name(struct packet_struct *p, const char  \n*mailslot_name);\n+int matching_quad_bits(unsigned char *p1, unsigned char *p2);\n+void sort_query_replies(char *data, int n, struct in_addr ip);\n+char *dns_to_netbios_name(const char *dns_name);\n+int name_mangle( char *In, char *Out, char name_type );\n+int name_extract(char *buf,int ofs, fstring name);\n+int name_len(char *s1);\n+\n+/* The following definitions come from libsmb/nterr.c  */\n+\n+const char *nt_errstr(NTSTATUS nt_code);\n+const char *get_friendly_nt_error_msg(NTSTATUS nt_code);\n+const char *get_nt_error_c_code(NTSTATUS nt_code);\n+NTSTATUS nt_status_string_to_code(char *nt_status_str);\n+NTSTATUS nt_status_squash(NTSTATUS nt_status);\n+\n+/* The following definitions come from libsmb/ntlm_check.c  */\n+\n+NTSTATUS ntlm_password_check(TALLOC_CTX *mem_ctx,\n+\t\t\t     const DATA_BLOB *challenge,\n+\t\t\t     const DATA_BLOB *lm_response,\n+\t\t\t     const DATA_BLOB *nt_response,\n+\t\t\t     const DATA_BLOB *lm_interactive_pwd,\n+\t\t\t     const DATA_BLOB *nt_interactive_pwd,\n+\t\t\t     const char *username,\n+\t\t\t     const char *client_username,\n+\t\t\t     const char *client_domain,\n+\t\t\t     const uint8 *lm_pw, const uint8 *nt_pw,\n+\t\t\t     DATA_BLOB *user_sess_key,\n+\t\t\t     DATA_BLOB *lm_sess_key);\n+\n+/* The following definitions come from libsmb/ntlmssp.c  */\n+\n+void debug_ntlmssp_flags(uint32 neg_flags);\n+NTSTATUS ntlmssp_set_username(NTLMSSP_STATE *ntlmssp_state, const  \nchar *user) ;\n+NTSTATUS ntlmssp_set_hashes(NTLMSSP_STATE *ntlmssp_state,\n+\t\tconst unsigned char lm_hash[16],\n+\t\tconst unsigned char nt_hash[16]) ;\n+NTSTATUS ntlmssp_set_password(NTLMSSP_STATE *ntlmssp_state, const  \nchar *password) ;\n+NTSTATUS ntlmssp_set_domain(NTLMSSP_STATE *ntlmssp_state, const char  \n*domain) ;\n+NTSTATUS ntlmssp_set_workstation(NTLMSSP_STATE *ntlmssp_state, const  \nchar *workstation) ;\n+NTSTATUS ntlmssp_store_response(NTLMSSP_STATE *ntlmssp_state,\n+\t\t\t\tDATA_BLOB response) ;\n+void ntlmssp_want_feature_list(NTLMSSP_STATE *ntlmssp_state, char  \n*feature_list);\n+void ntlmssp_want_feature(NTLMSSP_STATE *ntlmssp_state, uint32  \nfeature);\n+NTSTATUS ntlmssp_update(NTLMSSP_STATE *ntlmssp_state,\n+\t\t\tconst DATA_BLOB in, DATA_BLOB *out) ;\n+void ntlmssp_end(NTLMSSP_STATE **ntlmssp_state);\n+DATA_BLOB ntlmssp_weaken_keys(NTLMSSP_STATE *ntlmssp_state,  \nTALLOC_CTX *mem_ctx);\n+NTSTATUS ntlmssp_server_start(NTLMSSP_STATE **ntlmssp_state);\n+NTSTATUS ntlmssp_client_start(NTLMSSP_STATE **ntlmssp_state);\n+\n+/* The following definitions come from libsmb/ntlmssp_parse.c  */\n+\n+BOOL msrpc_gen(DATA_BLOB *blob,\n+\t       const char *format, ...);\n+BOOL msrpc_parse(const DATA_BLOB *blob,\n+\t\t const char *format, ...);\n+\n+/* The following definitions come from libsmb/ntlmssp_sign.c  */\n+\n+NTSTATUS ntlmssp_sign_packet(NTLMSSP_STATE *ntlmssp_state,\n+\t\t\t\t    const uchar *data, size_t length,\n+\t\t\t\t    const uchar *whole_pdu, size_t pdu_length,\n+\t\t\t\t    DATA_BLOB *sig) ;\n+NTSTATUS ntlmssp_check_packet(NTLMSSP_STATE *ntlmssp_state,\n+\t\t\t\tconst uchar *data, size_t length,\n+\t\t\t\tconst uchar *whole_pdu, size_t pdu_length,\n+\t\t\t\tconst DATA_BLOB *sig) ;\n+NTSTATUS ntlmssp_seal_packet(NTLMSSP_STATE *ntlmssp_state,\n+\t\t\t     uchar *data, size_t length,\n+\t\t\t     uchar *whole_pdu, size_t pdu_length,\n+\t\t\t     DATA_BLOB *sig);\n+NTSTATUS ntlmssp_unseal_packet(NTLMSSP_STATE *ntlmssp_state,\n+\t\t\t\tuchar *data, size_t length,\n+\t\t\t\tuchar *whole_pdu, size_t pdu_length,\n+\t\t\t\tDATA_BLOB *sig);\n+NTSTATUS ntlmssp_sign_init(NTLMSSP_STATE *ntlmssp_state);\n+\n+/* The following definitions come from libsmb/passchange.c  */\n+\n+NTSTATUS remote_password_change(const char *remote_machine, const  \nchar *user_name,\n+\t\t\t    const char *old_passwd, const char *new_passwd,\n+\t\t\t    char *err_str, size_t err_str_len);\n+\n+/* The following definitions come from libsmb/pwd_cache.c  */\n+\n+void pwd_set_cleartext(struct pwd_info *pwd, const char *clr);\n+void pwd_get_cleartext(struct pwd_info *pwd, fstring clr);\n+\n+/* The following definitions come from libsmb/samlogon_cache.c  */\n+\n+BOOL netsamlogon_cache_init(void);\n+BOOL netsamlogon_cache_shutdown(void);\n+void netsamlogon_clear_cached_user(TDB_CONTEXT *tdb, NET_USER_INFO_3  \n*user);\n+BOOL netsamlogon_cache_store( const char *username, NET_USER_INFO_3  \n*user );\n+NET_USER_INFO_3* netsamlogon_cache_get( TALLOC_CTX *mem_ctx, const  \nDOM_SID *user_sid);\n+BOOL netsamlogon_cache_have(const DOM_SID *user_sid);\n+\n+/* The following definitions come from libsmb/smb_seal.c  */\n+\n+NTSTATUS get_enc_ctx_num(char *buf, uint16 *p_enc_ctx_num);\n+BOOL common_encryption_on(struct smb_trans_enc_state *es);\n+NTSTATUS common_ntlm_decrypt_buffer(NTLMSSP_STATE *ntlmssp_state,  \nchar *buf);\n+NTSTATUS common_ntlm_encrypt_buffer(NTLMSSP_STATE *ntlmssp_state,\n+\t\t\t\tuint16 enc_ctx_num,\n+\t\t\t\tchar *buf,\n+\t\t\t\tchar **ppbuf_out);\n+NTSTATUS common_encrypt_buffer(struct smb_trans_enc_state *es, char  \n*buffer, char **buf_out);\n+NTSTATUS common_decrypt_buffer(struct smb_trans_enc_state *es, char  \n*buf);\n+void common_free_encryption_state(struct smb_trans_enc_state **pp_es);\n+void common_free_enc_buffer(struct smb_trans_enc_state *es, char *buf);\n+BOOL cli_encryption_on(struct cli_state *cli);\n+void cli_free_encryption_context(struct cli_state *cli);\n+void cli_free_enc_buffer(struct cli_state *cli, char *buf);\n+NTSTATUS cli_decrypt_message(struct cli_state *cli);\n+NTSTATUS cli_encrypt_message(struct cli_state *cli, char **buf_out);\n+\n+/* The following definitions come from libsmb/smb_signing.c  */\n+\n+BOOL cli_simple_set_signing(struct cli_state *cli,\n+\t\t\t    const DATA_BLOB user_session_key,\n+\t\t\t    const DATA_BLOB response);\n+BOOL cli_null_set_signing(struct cli_state *cli);\n+BOOL cli_temp_set_signing(struct cli_state *cli);\n+void cli_free_signing_context(struct cli_state *cli);\n+void cli_calculate_sign_mac(struct cli_state *cli);\n+BOOL cli_check_sign_mac(struct cli_state *cli) ;\n+BOOL client_set_trans_sign_state_on(struct cli_state *cli, uint16 mid);\n+BOOL client_set_trans_sign_state_off(struct cli_state *cli, uint16  \nmid);\n+BOOL client_is_signing_on(struct cli_state *cli);\n+BOOL srv_oplock_set_signing(BOOL onoff);\n+BOOL srv_check_sign_mac(char *inbuf, BOOL must_be_ok);\n+void srv_calculate_sign_mac(char *outbuf);\n+void srv_defer_sign_response(uint16 mid);\n+void srv_cancel_sign_response(uint16 mid);\n+void srv_set_signing_negotiated(void);\n+BOOL srv_is_signing_active(void);\n+BOOL srv_is_signing_negotiated(void);\n+BOOL srv_signing_started(void);\n+void srv_set_signing(const DATA_BLOB user_session_key, const  \nDATA_BLOB response);\n+\n+/* The following definitions come from libsmb/smbdes.c  */\n+\n+void des_crypt56(unsigned char *out, const unsigned char *in, const  \nunsigned char *key, int forw);\n+void E_P16(const unsigned char *p14,unsigned char *p16);\n+void E_P24(const unsigned char *p21, const unsigned char *c8,  \nunsigned char *p24);\n+void D_P16(const unsigned char *p14, const unsigned char *in,  \nunsigned char *out);\n+void E_old_pw_hash( unsigned char *p14, const unsigned char *in,  \nunsigned char *out);\n+void des_crypt128(unsigned char out[8], const unsigned char in[8],  \nconst unsigned char key[16]);\n+void des_crypt64(unsigned char out[8], const unsigned char in[8],  \nconst unsigned char key[8]);\n+void des_crypt112(unsigned char out[8], const unsigned char in[8],  \nconst unsigned char key[14], int forw);\n+void cred_hash3(unsigned char *out, const unsigned char *in, const  \nunsigned char *key, int forw);\n+void des_crypt112_16(unsigned char out[16], unsigned char in[16],  \nconst unsigned char key[14], int forw);\n+void SamOEMhash( unsigned char *data, const unsigned char key[16],  \nsize_t len);\n+void SamOEMhashBlob( unsigned char *data, size_t len, DATA_BLOB *key);\n+void sam_pwd_hash(unsigned int rid, const uchar *in, uchar *out, int  \nforw);\n+\n+/* The following definitions come from libsmb/smbencrypt.c  */\n+\n+void SMBencrypt_hash(const uchar lm_hash[16], const uchar *c8, uchar  \np24[24]);\n+BOOL SMBencrypt(const char *passwd, const uchar *c8, uchar p24[24]);\n+void E_md4hash(const char *passwd, uchar p16[16]);\n+void E_md5hash(const uchar salt[16], const uchar nthash[16], uchar  \nhash_out[16]);\n+BOOL E_deshash(const char *passwd, uchar p16[16]);\n+void nt_lm_owf_gen(const char *pwd, uchar nt_p16[16], uchar p16[16]);\n+BOOL ntv2_owf_gen(const uchar owf[16],\n+\t\t  const char *user_in, const char *domain_in,\n+\t\t  BOOL upper_case_domain, /* Transform the domain into UPPER case */\n+\t\t  uchar kr_buf[16]);\n+void SMBOWFencrypt(const uchar passwd[16], const uchar *c8, uchar p24 \n[24]);\n+void NTLMSSPOWFencrypt(const uchar passwd[8], const uchar  \n*ntlmchalresp, uchar p24[24]);\n+void SMBNTencrypt_hash(const uchar nt_hash[16], uchar *c8, uchar *p24);\n+void SMBNTencrypt(const char *passwd, uchar *c8, uchar *p24);\n+void SMBOWFencrypt_ntv2(const uchar kr[16],\n+\t\t\tconst DATA_BLOB *srv_chal,\n+\t\t\tconst DATA_BLOB *cli_chal,\n+\t\t\tuchar resp_buf[16]);\n+void SMBsesskeygen_ntv2(const uchar kr[16],\n+\t\t\tconst uchar * nt_resp, uint8 sess_key[16]);\n+void SMBsesskeygen_ntv1(const uchar kr[16],\n+\t\t\tconst uchar * nt_resp, uint8 sess_key[16]);\n+void SMBsesskeygen_lm_sess_key(const uchar lm_hash[16],\n+\t\t\tconst uchar lm_resp[24], /* only uses 8 */\n+\t\t\tuint8 sess_key[16]);\n+DATA_BLOB NTLMv2_generate_names_blob(const char *hostname,\n+\t\t\t\t     const char *domain);\n+BOOL SMBNTLMv2encrypt_hash(const char *user, const char *domain,  \nconst uchar nt_hash[16],\n+\t\t      const DATA_BLOB *server_chal,\n+\t\t      const DATA_BLOB *names_blob,\n+\t\t      DATA_BLOB *lm_response, DATA_BLOB *nt_response,\n+\t\t      DATA_BLOB *user_session_key) ;\n+BOOL SMBNTLMv2encrypt(const char *user, const char *domain, const  \nchar *password,\n+\t\t      const DATA_BLOB *server_chal,\n+\t\t      const DATA_BLOB *names_blob,\n+\t\t      DATA_BLOB *lm_response, DATA_BLOB *nt_response,\n+\t\t      DATA_BLOB *user_session_key) ;\n+BOOL encode_pw_buffer(uint8 buffer[516], const char *password, int  \nstring_flags);\n+BOOL decode_pw_buffer(uint8 in_buffer[516], char *new_pwrd,\n+\t\t      int new_pwrd_size, uint32 *new_pw_len,\n+\t\t      int string_flags);\n+void encode_or_decode_arc4_passwd_buffer(unsigned char pw_buf[532],  \nconst DATA_BLOB *psession_key);\n+void sess_crypt_blob(DATA_BLOB *out, const DATA_BLOB *in, const  \nDATA_BLOB *session_key, int forward);\n+char *decrypt_trustdom_secret(const char *pass, DATA_BLOB *data_in);\n+\n+/* The following definitions come from libsmb/smberr.c  */\n+\n+const char *smb_dos_err_name(uint8 e_class, uint16 num);\n+const char *get_dos_error_msg(WERROR result);\n+const char *smb_dos_err_class(uint8 e_class);\n+char *smb_dos_errstr(char *inbuf);\n+WERROR map_werror_from_unix(int error);\n+\n+/* The following definitions come from libsmb/spnego.c  */\n+\n+ssize_t read_spnego_data(DATA_BLOB data, SPNEGO_DATA *token);\n+ssize_t write_spnego_data(DATA_BLOB *blob, SPNEGO_DATA *spnego);\n+BOOL free_spnego_data(SPNEGO_DATA *spnego);\n+\n+/* The following definitions come from libsmb/trustdom_cache.c  */\n+\n+BOOL trustdom_cache_enable(void);\n+BOOL trustdom_cache_shutdown(void);\n+BOOL trustdom_cache_store(char* name, char* alt_name, const DOM_SID  \n*sid,\n+                          time_t timeout);\n+BOOL trustdom_cache_fetch(const char* name, DOM_SID* sid);\n+uint32 trustdom_cache_fetch_timestamp( void );\n+BOOL trustdom_cache_store_timestamp( uint32 t, time_t timeout );\n+void trustdom_cache_flush(void);\n+void update_trustdom_cache( void );\n+\n+/* The following definitions come from libsmb/trusts_util.c  */\n+\n+NTSTATUS trust_pw_change_and_store_it(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t      const char *domain,\n+\t\t\t\t      unsigned char orig_trust_passwd_hash[16],\n+\t\t\t\t      uint32 sec_channel_type);\n+NTSTATUS trust_pw_find_change_and_store_it(struct rpc_pipe_client *cli,\n+\t\t\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t   const char *domain) ;\n+BOOL enumerate_domain_trusts( TALLOC_CTX *mem_ctx, const char *domain,\n+                                     char ***domain_names, uint32  \n*num_domains,\n+\t\t\t\t     DOM_SID **sids );\n+\n+/* The following definitions come from libsmb/unexpected.c  */\n+\n+void unexpected_packet(struct packet_struct *p);\n+void clear_unexpected(time_t t);\n+struct packet_struct *receive_unexpected(enum packet_type  \npacket_type, int id,\n+\t\t\t\t\t const char *mailslot_name);\n+\n+/* The following definitions come from locking/brlock.c  */\n+\n+BOOL brl_same_context(const struct lock_context *ctx1,\n+\t\t\t     const struct lock_context *ctx2);\n+void brl_init(int read_only);\n+void brl_shutdown(int read_only);\n+NTSTATUS brl_lock(struct messaging_context *msg_ctx,\n+\t\tstruct byte_range_lock *br_lck,\n+\t\tuint32 smbpid,\n+\t\tstruct server_id pid,\n+\t\tbr_off start,\n+\t\tbr_off size,\n+\t\tenum brl_type lock_type,\n+\t\tenum brl_flavour lock_flav,\n+\t\tBOOL blocking_lock,\n+\t\tuint32 *psmbpid);\n+BOOL brl_unlock(struct messaging_context *msg_ctx,\n+\t\tstruct byte_range_lock *br_lck,\n+\t\tuint32 smbpid,\n+\t\tstruct server_id pid,\n+\t\tbr_off start,\n+\t\tbr_off size,\n+\t\tenum brl_flavour lock_flav);\n+BOOL brl_locktest(struct byte_range_lock *br_lck,\n+\t\tuint32 smbpid,\n+\t\tstruct server_id pid,\n+\t\tbr_off start,\n+\t\tbr_off size,\n+\t\tenum brl_type lock_type,\n+\t\tenum brl_flavour lock_flav);\n+NTSTATUS brl_lockquery(struct byte_range_lock *br_lck,\n+\t\tuint32 *psmbpid,\n+\t\tstruct server_id pid,\n+\t\tbr_off *pstart,\n+\t\tbr_off *psize,\n+\t\tenum brl_type *plock_type,\n+\t\tenum brl_flavour lock_flav);\n+BOOL brl_lock_cancel(struct byte_range_lock *br_lck,\n+\t\tuint32 smbpid,\n+\t\tstruct server_id pid,\n+\t\tbr_off start,\n+\t\tbr_off size,\n+\t\tenum brl_flavour lock_flav);\n+void brl_close_fnum(struct messaging_context *msg_ctx,\n+\t\t    struct byte_range_lock *br_lck);\n+int brl_forall(void (*fn)(struct file_id id, struct server_id pid,\n+\t\t\t  enum brl_type lock_type,\n+\t\t\t  enum brl_flavour lock_flav,\n+\t\t\t  br_off start, br_off size,\n+\t\t\t  void *private_data),\n+\t       void *private_data);\n+struct byte_range_lock *brl_get_locks(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\tfiles_struct *fsp);\n+struct byte_range_lock *brl_get_locks_readonly(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\tfiles_struct *fsp);\n+void brl_register_msgs(struct messaging_context *msg_ctx);\n+\n+/* The following definitions come from locking/locking.c  */\n+\n+const char *lock_type_name(enum brl_type lock_type);\n+const char *lock_flav_name(enum brl_flavour lock_flav);\n+BOOL is_locked(files_struct *fsp,\n+\t\tuint32 smbpid,\n+\t\tSMB_BIG_UINT count,\n+\t\tSMB_BIG_UINT offset,\n+\t\tenum brl_type lock_type);\n+NTSTATUS query_lock(files_struct *fsp,\n+\t\t\tuint32 *psmbpid,\n+\t\t\tSMB_BIG_UINT *pcount,\n+\t\t\tSMB_BIG_UINT *poffset,\n+\t\t\tenum brl_type *plock_type,\n+\t\t\tenum brl_flavour lock_flav);\n+struct byte_range_lock *do_lock(struct messaging_context *msg_ctx,\n+\t\t\tfiles_struct *fsp,\n+\t\t\tuint32 lock_pid,\n+\t\t\tSMB_BIG_UINT count,\n+\t\t\tSMB_BIG_UINT offset,\n+\t\t\tenum brl_type lock_type,\n+\t\t\tenum brl_flavour lock_flav,\n+\t\t\tBOOL blocking_lock,\n+\t\t\tNTSTATUS *perr,\n+\t\t\tuint32 *plock_pid);\n+NTSTATUS do_unlock(struct messaging_context *msg_ctx,\n+\t\t\tfiles_struct *fsp,\n+\t\t\tuint32 lock_pid,\n+\t\t\tSMB_BIG_UINT count,\n+\t\t\tSMB_BIG_UINT offset,\n+\t\t\tenum brl_flavour lock_flav);\n+NTSTATUS do_lock_cancel(files_struct *fsp,\n+\t\t\tuint32 lock_pid,\n+\t\t\tSMB_BIG_UINT count,\n+\t\t\tSMB_BIG_UINT offset,\n+\t\t\tenum brl_flavour lock_flav);\n+void locking_close_file(struct messaging_context *msg_ctx,\n+\t\t\tfiles_struct *fsp);\n+BOOL locking_init(int read_only);\n+BOOL locking_end(void);\n+char *share_mode_str(int num, struct share_mode_entry *e);\n+struct share_mode_lock *get_share_mode_lock(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t    struct file_id id,\n+\t\t\t\t\t    const char *servicepath,\n+\t\t\t\t\t    const char *fname);\n+struct share_mode_lock *fetch_share_mode_unlocked(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\t  struct file_id id,\n+\t\t\t\t\t\t  const char *servicepath,\n+\t\t\t\t\t\t  const char *fname);\n+BOOL rename_share_filename(struct messaging_context *msg_ctx,\n+\t\t\tstruct share_mode_lock *lck,\n+\t\t\tconst char *servicepath,\n+\t\t\tconst char *newname);\n+BOOL get_delete_on_close_flag(struct file_id id);\n+BOOL is_valid_share_mode_entry(const struct share_mode_entry *e);\n+BOOL is_deferred_open_entry(const struct share_mode_entry *e);\n+BOOL is_unused_share_mode_entry(const struct share_mode_entry *e);\n+void set_share_mode(struct share_mode_lock *lck, files_struct *fsp,\n+\t\t\tuid_t uid, uint16 mid, uint16 op_type, BOOL  \ninitial_delete_on_close_allowed);\n+void add_deferred_open(struct share_mode_lock *lck, uint16 mid,\n+\t\t       struct timeval request_time,\n+\t\t       struct file_id id);\n+BOOL del_share_mode(struct share_mode_lock *lck, files_struct *fsp);\n+void del_deferred_open_entry(struct share_mode_lock *lck, uint16 mid);\n+BOOL remove_share_oplock(struct share_mode_lock *lck, files_struct  \n*fsp);\n+BOOL downgrade_share_oplock(struct share_mode_lock *lck,  \nfiles_struct *fsp);\n+NTSTATUS can_set_delete_on_close(files_struct *fsp, BOOL  \ndelete_on_close,\n+\t\t\t\t uint32 dosmode);\n+BOOL can_set_initial_delete_on_close(const struct share_mode_lock  \n*lck);\n+void set_delete_on_close_token(struct share_mode_lock *lck,  \nUNIX_USER_TOKEN *tok);\n+void set_delete_on_close_lck(struct share_mode_lock *lck, BOOL  \ndelete_on_close, UNIX_USER_TOKEN *tok);\n+BOOL set_delete_on_close(files_struct *fsp, BOOL delete_on_close,  \nUNIX_USER_TOKEN *tok);\n+BOOL set_allow_initial_delete_on_close(struct share_mode_lock *lck,  \nfiles_struct *fsp, BOOL delete_on_close);\n+int share_mode_forall(void (*fn)(const struct share_mode_entry *,  \nconst char *,\n+\t\t\t\t const char *, void *),\n+\t\t      void *private_data);\n+\n+/* The following definitions come from locking/posix.c  */\n+\n+BOOL is_posix_locked(files_struct *fsp,\n+\t\t\tSMB_BIG_UINT *pu_offset,\n+\t\t\tSMB_BIG_UINT *pu_count,\n+\t\t\tenum brl_type *plock_type,\n+\t\t\tenum brl_flavour lock_flav);\n+BOOL posix_locking_init(int read_only);\n+BOOL posix_locking_end(void);\n+void reduce_windows_lock_ref_count(files_struct *fsp, unsigned int  \ndcount);\n+NTSTATUS fd_close_posix(struct connection_struct *conn, files_struct  \n*fsp);\n+BOOL set_posix_lock_windows_flavour(files_struct *fsp,\n+\t\t\tSMB_BIG_UINT u_offset,\n+\t\t\tSMB_BIG_UINT u_count,\n+\t\t\tenum brl_type lock_type,\n+\t\t\tconst struct lock_context *lock_ctx,\n+\t\t\tconst struct lock_struct *plocks,\n+\t\t\tint num_locks,\n+\t\t\tint *errno_ret);\n+BOOL release_posix_lock_windows_flavour(files_struct *fsp,\n+\t\t\t\tSMB_BIG_UINT u_offset,\n+\t\t\t\tSMB_BIG_UINT u_count,\n+\t\t\t\tenum brl_type deleted_lock_type,\n+\t\t\t\tconst struct lock_context *lock_ctx,\n+\t\t\t\tconst struct lock_struct *plocks,\n+\t\t\t\tint num_locks);\n+BOOL set_posix_lock_posix_flavour(files_struct *fsp,\n+\t\t\tSMB_BIG_UINT u_offset,\n+\t\t\tSMB_BIG_UINT u_count,\n+\t\t\tenum brl_type lock_type,\n+\t\t\tint *errno_ret);\n+BOOL release_posix_lock_posix_flavour(files_struct *fsp,\n+\t\t\t\tSMB_BIG_UINT u_offset,\n+\t\t\t\tSMB_BIG_UINT u_count,\n+\t\t\t\tconst struct lock_context *lock_ctx,\n+\t\t\t\tconst struct lock_struct *plocks,\n+\t\t\t\tint num_locks);\n+\n+/* The following definitions come from modules/vfs_default.c  */\n+\n+int vfswrap_lstat(vfs_handle_struct *handle,  const char *path,  \nSMB_STRUCT_STAT *sbuf);\n+ssize_t vfswrap_llistxattr(struct vfs_handle_struct *handle, const  \nchar *path, char *list, size_t size);\n+ssize_t vfswrap_flistxattr(struct vfs_handle_struct *handle, struct  \nfiles_struct *fsp,int fd, char *list, size_t size);\n+NTSTATUS vfs_default_init(void);\n+\n+/* The following definitions come from nmbd/asyncdns.c  */\n+\n+int asyncdns_fd(void);\n+void kill_async_dns_child(void);\n+void start_async_dns(void);\n+void run_dns_queue(void);\n+BOOL queue_dns_query(struct packet_struct *p,struct nmb_name  \n*question);\n+BOOL queue_dns_query(struct packet_struct *p,struct nmb_name  \n*question);\n+void kill_async_dns_child(void);\n+\n+/* The following definitions come from nmbd/nmbd.c  */\n+\n+struct event_context *nmbd_event_context(void);\n+struct messaging_context *nmbd_messaging_context(void);\n+\n+/* The following definitions come from nmbd/nmbd_become_dmb.c  */\n+\n+void add_domain_names(time_t t);\n+\n+/* The following definitions come from nmbd/nmbd_become_lmb.c  */\n+\n+void insert_permanent_name_into_unicast( struct subnet_record *subrec,\n+                                                struct nmb_name  \n*nmbname, uint16 nb_type );\n+void unbecome_local_master_browser(struct subnet_record *subrec,  \nstruct work_record *work,\n+                                   BOOL force_new_election);\n+void become_local_master_browser(struct subnet_record *subrec,  \nstruct work_record *work);\n+void set_workgroup_local_master_browser_name( struct work_record  \n*work, const char *newname);\n+\n+/* The following definitions come from nmbd/nmbd_browserdb.c  */\n+\n+void update_browser_death_time( struct browse_cache_record *browc );\n+struct browse_cache_record *create_browser_in_lmb_cache( const char  \n*work_name,\n+                                                         const char  \n*browser_name,\n+                                                         struct  \nin_addr ip );\n+struct browse_cache_record *find_browser_in_lmb_cache( const char  \n*browser_name );\n+void expire_lmb_browsers( time_t t );\n+\n+/* The following definitions come from nmbd/nmbd_browsesync.c  */\n+\n+void dmb_expire_and_sync_browser_lists(time_t t);\n+void announce_and_sync_with_domain_master_browser( struct  \nsubnet_record *subrec,\n+                                                   struct  \nwork_record *work);\n+void collect_all_workgroup_names_from_wins_server(time_t t);\n+void sync_all_dmbs(time_t t);\n+\n+/* The following definitions come from nmbd/nmbd_elections.c  */\n+\n+void check_master_browser_exists(time_t t);\n+void run_elections(time_t t);\n+void process_election(struct subnet_record *subrec, struct  \npacket_struct *p, char *buf);\n+BOOL check_elections(void);\n+void nmbd_message_election(struct messaging_context *msg,\n+\t\t\t   void *private_data,\n+\t\t\t   uint32_t msg_type,\n+\t\t\t   struct server_id server_id,\n+\t\t\t   DATA_BLOB *data);\n+\n+/* The following definitions come from nmbd/nmbd_incomingdgrams.c  */\n+\n+void tell_become_backup(void);\n+void process_host_announce(struct subnet_record *subrec, struct  \npacket_struct *p, char *buf);\n+void process_workgroup_announce(struct subnet_record *subrec, struct  \npacket_struct *p, char *buf);\n+void process_local_master_announce(struct subnet_record *subrec,  \nstruct packet_struct *p, char *buf);\n+void process_master_browser_announce(struct subnet_record *subrec,\n+                                     struct packet_struct *p,char  \n*buf);\n+void process_lm_host_announce(struct subnet_record *subrec, struct  \npacket_struct *p, char *buf, int len);\n+void process_get_backup_list_request(struct subnet_record *subrec,\n+                                     struct packet_struct *p,char  \n*buf);\n+void process_reset_browser(struct subnet_record *subrec,\n+                                  struct packet_struct *p,char *buf);\n+void process_announce_request(struct subnet_record *subrec, struct  \npacket_struct *p, char *buf);\n+void process_lm_announce_request(struct subnet_record *subrec,  \nstruct packet_struct *p, char *buf, int len);\n+\n+/* The following definitions come from nmbd/nmbd_incomingrequests.c  */\n+\n+void process_name_release_request(struct subnet_record *subrec,\n+                                  struct packet_struct *p);\n+void process_name_refresh_request(struct subnet_record *subrec,\n+                                  struct packet_struct *p);\n+void process_name_registration_request(struct subnet_record *subrec,\n+                                       struct packet_struct *p);\n+void process_node_status_request(struct subnet_record *subrec,  \nstruct packet_struct *p);\n+void process_name_query_request(struct subnet_record *subrec, struct  \npacket_struct *p);\n+\n+/* The following definitions come from nmbd/nmbd_lmhosts.c  */\n+\n+void load_lmhosts_file(const char *fname);\n+BOOL find_name_in_lmhosts(struct nmb_name *nmbname, struct  \nname_record **namerecp);\n+\n+/* The following definitions come from nmbd/nmbd_logonnames.c  */\n+\n+void add_logon_names(void);\n+\n+/* The following definitions come from nmbd/nmbd_mynames.c  */\n+\n+void register_my_workgroup_one_subnet(struct subnet_record *subrec);\n+BOOL register_my_workgroup_and_names(void);\n+void release_wins_names(void);\n+void refresh_my_names(time_t t);\n+\n+/* The following definitions come from nmbd/nmbd_namelistdb.c  */\n+\n+void set_samba_nb_type(void);\n+void remove_name_from_namelist(struct subnet_record *subrec,\n+\t\t\t\tstruct name_record *namerec );\n+struct name_record *find_name_on_subnet(struct subnet_record *subrec,\n+\t\t\t\tconst struct nmb_name *nmbname,\n+\t\t\t\tBOOL self_only);\n+struct name_record *find_name_for_remote_broadcast_subnet(struct  \nnmb_name *nmbname,\n+\t\t\t\t\t\tBOOL self_only);\n+void update_name_ttl( struct name_record *namerec, int ttl );\n+BOOL add_name_to_subnet( struct subnet_record *subrec,\n+\t\t\tconst char *name,\n+\t\t\tint type,\n+\t\t\tuint16 nb_flags,\n+\t\t\tint ttl,\n+\t\t\tenum name_source source,\n+\t\t\tint num_ips,\n+\t\t\tstruct in_addr *iplist);\n+void standard_success_register(struct subnet_record *subrec,\n+                             struct userdata_struct *userdata,\n+                             struct nmb_name *nmbname, uint16  \nnb_flags, int ttl,\n+                             struct in_addr registered_ip);\n+void standard_fail_register( struct subnet_record   *subrec,\n+                             struct response_record *rrec,\n+                             struct nmb_name        *nmbname );\n+BOOL find_ip_in_name_record( struct name_record *namerec, struct  \nin_addr ip );\n+void add_ip_to_name_record( struct name_record *namerec, struct  \nin_addr new_ip );\n+void remove_ip_from_name_record( struct name_record *namerec,\n+                                 struct in_addr      remove_ip );\n+void standard_success_release( struct subnet_record   *subrec,\n+                               struct userdata_struct *userdata,\n+                               struct nmb_name        *nmbname,\n+                               struct in_addr          released_ip );\n+void expire_names(time_t t);\n+void add_samba_names_to_subnet( struct subnet_record *subrec );\n+void dump_name_record( struct name_record *namerec, XFILE *fp);\n+void dump_all_namelists(void);\n+\n+/* The following definitions come from nmbd/nmbd_namequery.c  */\n+\n+BOOL query_name(struct subnet_record *subrec, const char *name, int  \ntype,\n+                   query_name_success_function success_fn,\n+                   query_name_fail_function fail_fn,\n+                   struct userdata_struct *userdata);\n+BOOL query_name_from_wins_server(struct in_addr ip_to,\n+                   const char *name, int type,\n+                   query_name_success_function success_fn,\n+                   query_name_fail_function fail_fn,\n+                   struct userdata_struct *userdata);\n+\n+/* The following definitions come from nmbd/nmbd_nameregister.c  */\n+\n+void register_name(struct subnet_record *subrec,\n+                   const char *name, int type, uint16 nb_flags,\n+                   register_name_success_function success_fn,\n+                   register_name_fail_function fail_fn,\n+                   struct userdata_struct *userdata);\n+void wins_refresh_name(struct name_record *namerec);\n+\n+/* The following definitions come from nmbd/nmbd_namerelease.c  */\n+\n+void release_name(struct subnet_record *subrec, struct name_record  \n*namerec,\n+\t\t  release_name_success_function success_fn,\n+\t\t  release_name_fail_function fail_fn,\n+\t\t  struct userdata_struct *userdata);\n+\n+/* The following definitions come from nmbd/nmbd_nodestatus.c  */\n+\n+BOOL node_status(struct subnet_record *subrec, struct nmb_name  \n*nmbname,\n+                 struct in_addr send_ip,  \nnode_status_success_function success_fn,\n+                 node_status_fail_function fail_fn, struct  \nuserdata_struct *userdata);\n+\n+/* The following definitions come from nmbd/nmbd_packets.c  */\n+\n+uint16 get_nb_flags(char *buf);\n+void set_nb_flags(char *buf, uint16 nb_flags);\n+struct response_record *queue_register_name( struct subnet_record  \n*subrec,\n+                          response_function resp_fn,\n+                          timeout_response_function timeout_fn,\n+                          register_name_success_function success_fn,\n+                          register_name_fail_function fail_fn,\n+                          struct userdata_struct *userdata,\n+                          struct nmb_name *nmbname,\n+                          uint16 nb_flags);\n+void queue_wins_refresh(struct nmb_name *nmbname,\n+\t\t\tresponse_function resp_fn,\n+\t\t\ttimeout_response_function timeout_fn,\n+\t\t\tuint16 nb_flags,\n+\t\t\tstruct in_addr refresh_ip,\n+\t\t\tconst char *tag);\n+struct response_record *queue_register_multihomed_name( struct  \nsubnet_record *subrec,\n+\t\t\t\t\t\t\tresponse_function resp_fn,\n+\t\t\t\t\t\t\ttimeout_response_function timeout_fn,\n+\t\t\t\t\t\t\tregister_name_success_function success_fn,\n+\t\t\t\t\t\t\tregister_name_fail_function fail_fn,\n+\t\t\t\t\t\t\tstruct userdata_struct *userdata,\n+\t\t\t\t\t\t\tstruct nmb_name *nmbname,\n+\t\t\t\t\t\t\tuint16 nb_flags,\n+\t\t\t\t\t\t\tstruct in_addr register_ip,\n+\t\t\t\t\t\t\tstruct in_addr wins_ip);\n+struct response_record *queue_release_name( struct subnet_record  \n*subrec,\n+\t\t\t\t\t    response_function resp_fn,\n+\t\t\t\t\t    timeout_response_function timeout_fn,\n+\t\t\t\t\t    release_name_success_function success_fn,\n+\t\t\t\t\t    release_name_fail_function fail_fn,\n+\t\t\t\t\t    struct userdata_struct *userdata,\n+\t\t\t\t\t    struct nmb_name *nmbname,\n+\t\t\t\t\t    uint16 nb_flags,\n+\t\t\t\t\t    struct in_addr release_ip,\n+\t\t\t\t\t    struct in_addr dest_ip);\n+struct response_record *queue_query_name( struct subnet_record *subrec,\n+                          response_function resp_fn,\n+                          timeout_response_function timeout_fn,\n+                          query_name_success_function success_fn,\n+                          query_name_fail_function fail_fn,\n+                          struct userdata_struct *userdata,\n+                          struct nmb_name *nmbname);\n+struct response_record *queue_query_name_from_wins_server( struct  \nin_addr to_ip,\n+                          response_function resp_fn,\n+                          timeout_response_function timeout_fn,\n+                          query_name_success_function success_fn,\n+                          query_name_fail_function fail_fn,\n+                          struct userdata_struct *userdata,\n+                          struct nmb_name *nmbname);\n+struct response_record *queue_node_status( struct subnet_record  \n*subrec,\n+                          response_function resp_fn,\n+                          timeout_response_function timeout_fn,\n+                          node_status_success_function success_fn,\n+                          node_status_fail_function fail_fn,\n+                          struct userdata_struct *userdata,\n+                          struct nmb_name *nmbname,\n+                          struct in_addr send_ip);\n+void reply_netbios_packet(struct packet_struct *orig_packet,\n+                          int rcode, enum netbios_reply_type_code  \nrcv_code, int opcode,\n+                          int ttl, char *data,int len);\n+void run_packet_queue(void);\n+void retransmit_or_expire_response_records(time_t t);\n+BOOL listen_for_packets(BOOL run_election);\n+BOOL send_mailslot(BOOL unique, const char *mailslot,char *buf,  \nsize_t len,\n+                   const char *srcname, int src_type,\n+                   const char *dstname, int dest_type,\n+                   struct in_addr dest_ip,struct in_addr src_ip,\n+\t\t   int dest_port);\n+\n+/* The following definitions come from nmbd/nmbd_processlogon.c  */\n+\n+void process_logon_packet(struct packet_struct *p, char *buf,int len,\n+                          const char *mailslot);\n+\n+/* The following definitions come from nmbd/ \nnmbd_responserecordsdb.c  */\n+\n+void remove_response_record(struct subnet_record *subrec,\n+\t\t\t\tstruct response_record *rrec);\n+struct response_record *make_response_record( struct subnet_record  \n*subrec,\n+\t\t\t\t\t      struct packet_struct *p,\n+\t\t\t\t\t      response_function resp_fn,\n+\t\t\t\t\t      timeout_response_function timeout_fn,\n+\t\t\t\t\t      success_function success_fn,\n+\t\t\t\t\t      fail_function fail_fn,\n+\t\t\t\t\t      struct userdata_struct *userdata);\n+struct response_record *find_response_record(struct subnet_record  \n**ppsubrec,\n+\t\t\t\tuint16 id);\n+BOOL is_refresh_already_queued(struct subnet_record *subrec, struct  \nname_record *namerec);\n+\n+/* The following definitions come from nmbd/nmbd_sendannounce.c  */\n+\n+void send_browser_reset(int reset_type, const char *to_name, int  \nto_type, struct in_addr to_ip);\n+void broadcast_announce_request(struct subnet_record *subrec, struct  \nwork_record *work);\n+void announce_my_server_names(time_t t);\n+void announce_my_lm_server_names(time_t t);\n+void reset_announce_timer(void);\n+void announce_myself_to_domain_master_browser(time_t t);\n+void announce_my_servers_removed(void);\n+void announce_remote(time_t t);\n+void browse_sync_remote(time_t t);\n+\n+/* The following definitions come from nmbd/nmbd_serverlistdb.c  */\n+\n+void remove_all_servers(struct work_record *work);\n+struct server_record *find_server_in_workgroup(struct work_record  \n*work, const char *name);\n+void remove_server_from_workgroup(struct work_record *work, struct  \nserver_record *servrec);\n+struct server_record *create_server_on_workgroup(struct work_record  \n*work,\n+                                                 const char  \n*name,int servertype,\n+                                                 int ttl, const char  \n*comment);\n+void update_server_ttl(struct server_record *servrec, int ttl);\n+void expire_servers(struct work_record *work, time_t t);\n+void write_browse_list_entry(XFILE *fp, const char *name, uint32  \nrec_type,\n+\t\tconst char *local_master_browser_name, const char *description);\n+void write_browse_list(time_t t, BOOL force_write);\n+\n+/* The following definitions come from nmbd/nmbd_subnetdb.c  */\n+\n+void close_subnet(struct subnet_record *subrec);\n+struct subnet_record *make_normal_subnet(struct interface *iface);\n+BOOL create_subnets(void);\n+BOOL we_are_a_wins_client(void);\n+struct subnet_record *get_next_subnet_maybe_unicast(struct  \nsubnet_record *subrec);\n+struct subnet_record *get_next_subnet_maybe_unicast_or_wins_server \n(struct subnet_record *subrec);\n+\n+/* The following definitions come from nmbd/nmbd_synclists.c  */\n+\n+void sync_browse_lists(struct work_record *work,\n+\t\t       char *name, int nm_type,\n+\t\t       struct in_addr ip, BOOL local, BOOL servers);\n+void sync_check_completion(void);\n+\n+/* The following definitions come from nmbd/nmbd_winsproxy.c  */\n+\n+void make_wins_proxy_name_query_request( struct subnet_record *subrec,\n+                                         struct packet_struct  \n*incoming_packet,\n+                                         struct nmb_name  \n*question_name);\n+\n+/* The following definitions come from nmbd/nmbd_winsserver.c  */\n+\n+struct name_record *find_name_on_wins_subnet(const struct nmb_name  \n*nmbname, BOOL self_only);\n+BOOL wins_store_changed_namerec(const struct name_record *namerec);\n+BOOL add_name_to_wins_subnet(const struct name_record *namerec);\n+BOOL remove_name_from_wins_namelist(struct name_record *namerec);\n+void dump_wins_subnet_namelist(XFILE *fp);\n+BOOL packet_is_for_wins_server(struct packet_struct *packet);\n+BOOL initialise_wins(void);\n+void wins_process_name_refresh_request( struct subnet_record *subrec,\n+                                        struct packet_struct *p );\n+void wins_process_name_registration_request(struct subnet_record  \n*subrec,\n+                                            struct packet_struct *p);\n+void wins_process_multihomed_name_registration_request( struct  \nsubnet_record *subrec,\n+                                                        struct  \npacket_struct *p);\n+void fetch_all_active_wins_1b_names(void);\n+void send_wins_name_query_response(int rcode, struct packet_struct *p,\n+                                          struct name_record *namerec);\n+void wins_process_name_query_request(struct subnet_record *subrec,\n+                                     struct packet_struct *p);\n+void wins_process_name_release_request(struct subnet_record *subrec,\n+                                       struct packet_struct *p);\n+void initiate_wins_processing(time_t t);\n+void wins_write_name_record(struct name_record *namerec, XFILE *fp);\n+void wins_write_database(time_t t, BOOL background);\n+void nmbd_wins_new_entry(struct messaging_context *msg,\n+                                       void *private_data,\n+                                       uint32_t msg_type,\n+                                       struct server_id server_id,\n+                                       DATA_BLOB *data);\n+\n+/* The following definitions come from nmbd/nmbd_workgroupdb.c  */\n+\n+struct work_record *find_workgroup_on_subnet(struct subnet_record  \n*subrec,\n+                                             const char *name);\n+struct work_record *create_workgroup_on_subnet(struct subnet_record  \n*subrec,\n+                                               const char *name, int  \nttl);\n+void update_workgroup_ttl(struct work_record *work, int ttl);\n+void initiate_myworkgroup_startup(struct subnet_record *subrec,  \nstruct work_record *work);\n+void dump_workgroups(BOOL force_write);\n+void expire_workgroups_and_servers(time_t t);\n+\n+/* The following definitions come from nsswitch/idmap.c  */\n+\n+BOOL idmap_is_offline(void);\n+NTSTATUS smb_register_idmap(int version, const char *name, struct  \nidmap_methods *methods);\n+NTSTATUS smb_register_idmap_alloc(int version, const char *name,  \nstruct idmap_alloc_methods *methods);\n+NTSTATUS idmap_close(void);\n+NTSTATUS idmap_init_cache(void);\n+NTSTATUS idmap_init(void);\n+NTSTATUS idmap_allocate_uid(struct unixid *id);\n+NTSTATUS idmap_allocate_gid(struct unixid *id);\n+NTSTATUS idmap_set_uid_hwm(struct unixid *id);\n+NTSTATUS idmap_set_gid_hwm(struct unixid *id);\n+NTSTATUS idmap_unixids_to_sids(struct id_map **ids);\n+NTSTATUS idmap_sids_to_unixids(struct id_map **ids);\n+NTSTATUS idmap_set_mapping(const struct id_map *id);\n+void idmap_dump_maps(char *logfile);\n+char *idmap_fetch_secret(const char *backend, bool alloc,\n+\t\t\t       const char *domain, const char *identity);\n+\n+/* The following definitions come from nsswitch/idmap_cache.c  */\n+\n+struct idmap_cache_ctx *idmap_cache_init(TALLOC_CTX *memctx);\n+void idmap_cache_shutdown(struct idmap_cache_ctx *cache);\n+NTSTATUS idmap_cache_build_sidkey(TALLOC_CTX *ctx, char **sidkey,  \nconst struct id_map *id);\n+NTSTATUS idmap_cache_build_idkey(TALLOC_CTX *ctx, char **idkey,  \nconst struct id_map *id);\n+NTSTATUS idmap_cache_set(struct idmap_cache_ctx *cache, const struct  \nid_map *id);\n+NTSTATUS idmap_cache_set_negative_sid(struct idmap_cache_ctx *cache,  \nconst struct id_map *id);\n+NTSTATUS idmap_cache_set_negative_id(struct idmap_cache_ctx *cache,  \nconst struct id_map *id);\n+NTSTATUS idmap_cache_fill_map(struct id_map *id, const char *value);\n+BOOL idmap_cache_is_negative(const char *val);\n+NTSTATUS idmap_cache_map_sid(struct idmap_cache_ctx *cache, struct  \nid_map *id);\n+NTSTATUS idmap_cache_map_id(struct idmap_cache_ctx *cache, struct  \nid_map *id);\n+\n+/* The following definitions come from nsswitch/idmap_ldap.c  */\n+\n+NTSTATUS idmap_alloc_ldap_init(void);\n+NTSTATUS idmap_ldap_init(void);\n+\n+/* The following definitions come from nsswitch/idmap_nss.c  */\n+\n+NTSTATUS idmap_nss_init(void);\n+\n+/* The following definitions come from nsswitch/idmap_passdb.c  */\n+\n+NTSTATUS idmap_passdb_init(void);\n+\n+/* The following definitions come from nsswitch/idmap_tdb.c  */\n+\n+BOOL idmap_tdb_tdb_close(TDB_CONTEXT *tdbctx);\n+NTSTATUS idmap_alloc_tdb_init(void);\n+NTSTATUS idmap_tdb_init(void);\n+\n+/* The following definitions come from nsswitch/idmap_util.c  */\n+\n+NTSTATUS idmap_uid_to_sid(DOM_SID *sid, uid_t uid);\n+NTSTATUS idmap_gid_to_sid(DOM_SID *sid, gid_t gid);\n+NTSTATUS idmap_sid_to_uid(DOM_SID *sid, uid_t *uid);\n+NTSTATUS idmap_sid_to_gid(DOM_SID *sid, gid_t *gid);\n+\n+/* The following definitions come from nsswitch/nss_info.c  */\n+\n+\n+/* The following definitions come from nsswitch/nss_info_template.c  */\n+\n+NTSTATUS nss_info_template_init( void );\n+\n+/* The following definitions come from nsswitch/wb_client.c  */\n+\n+NSS_STATUS winbindd_request_response(int req_type,\n+                                 struct winbindd_request *request,\n+                                 struct winbindd_response *response);\n+\n+/* Call winbindd to convert a name to a sid */\n+\n+BOOL winbind_lookup_name(const char *dom_name, const char *name,  \nDOM_SID *sid,\n+                         enum lsa_SidType *name_type);\n+BOOL winbind_lookup_sid(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\t\tconst char **domain, const char **name,\n+                        enum lsa_SidType *name_type);\n+BOOL winbind_lookup_rids(TALLOC_CTX *mem_ctx,\n+\t\t\t const DOM_SID *domain_sid,\n+\t\t\t int num_rids, uint32 *rids,\n+\t\t\t const char **domain_name,\n+\t\t\t const char ***names, enum lsa_SidType **types);\n+BOOL winbind_sid_to_uid(uid_t *puid, const DOM_SID *sid);\n+BOOL winbind_uid_to_sid(DOM_SID *sid, uid_t uid);\n+BOOL winbind_sid_to_gid(gid_t *pgid, const DOM_SID *sid);\n+BOOL winbind_gid_to_sid(DOM_SID *sid, gid_t gid);\n+BOOL winbind_sids_to_unixids(struct id_map *ids, int num_ids);\n+BOOL winbind_idmap_dump_maps(TALLOC_CTX *memctx, const char *file);\n+BOOL winbind_allocate_uid(uid_t *uid);\n+BOOL winbind_allocate_gid(gid_t *gid);\n+BOOL winbind_set_mapping(const struct id_map *map);\n+BOOL winbind_set_uid_hwm(unsigned long id);\n+BOOL winbind_set_gid_hwm(unsigned long id);\n+BOOL winbind_ping( void );\n+NSS_STATUS wb_is_trusted_domain(const char *domain);\n+\n+/* The following definitions come from nsswitch/wb_common.c  */\n+\n+void free_response(struct winbindd_response *response);\n+void init_request(struct winbindd_request *request, int request_type);\n+void close_sock(void);\n+int write_sock(void *buffer, int count, int recursing, int need_priv);\n+int read_reply(struct winbindd_response *response);\n+BOOL winbind_env_set( void );\n+NSS_STATUS winbindd_send_request(int req_type, int need_priv,\n+\t\t\t\t struct winbindd_request *request);\n+NSS_STATUS winbindd_get_response(struct winbindd_response *response);\n+NSS_STATUS winbindd_request_response(int req_type,\n+\t\t\t    struct winbindd_request *request,\n+\t\t\t    struct winbindd_response *response);\n+NSS_STATUS winbindd_priv_request_response(int req_type,\n+\t\t\t\t\t  struct winbindd_request *request,\n+\t\t\t\t\t  struct winbindd_response *response);\n+BOOL winbind_off( void );\n+BOOL winbind_on( void );\n+\n+/* The following definitions come from param/loadparm.c  */\n+\n+void lp_TALLOC_FREE(void);\n+TALLOC_CTX *tmp_talloc_ctx(void);\n+char *lp_smb_ports(void);\n+char *lp_dos_charset(void);\n+char *lp_unix_charset(void);\n+char *lp_display_charset(void);\n+char *lp_logfile(void);\n+char *lp_configfile(void);\n+char *lp_smb_passwd_file(void);\n+char *lp_private_dir(void);\n+char *lp_serverstring(void);\n+int lp_printcap_cache_time(void);\n+char *lp_addport_cmd(void);\n+char *lp_enumports_cmd(void);\n+char *lp_addprinter_cmd(void);\n+char *lp_deleteprinter_cmd(void);\n+char *lp_os2_driver_map(void);\n+char *lp_lockdir(void);\n+char *lp_piddir(void);\n+char *lp_mangling_method(void);\n+int lp_mangle_prefix(void);\n+char *lp_utmpdir(void);\n+char *lp_wtmpdir(void);\n+BOOL lp_utmp(void);\n+char *lp_rootdir(void);\n+char *lp_defaultservice(void);\n+char *lp_msg_command(void);\n+char *lp_get_quota_command(void);\n+char *lp_set_quota_command(void);\n+char *lp_auto_services(void);\n+char *lp_passwd_program(void);\n+char *lp_passwd_chat(void);\n+char *lp_passwordserver(void);\n+char *lp_name_resolve_order(void);\n+char *lp_realm(void);\n+const char *lp_afs_username_map(void);\n+int lp_afs_token_lifetime(void);\n+char *lp_log_nt_token_command(void);\n+char *lp_username_map(void);\n+const char *lp_logon_script(void);\n+const char *lp_logon_path(void);\n+const char *lp_logon_drive(void);\n+const char *lp_logon_home(void);\n+char *lp_remote_announce(void);\n+char *lp_remote_browse_sync(void);\n+const char **lp_wins_server_list(void);\n+const char **lp_interfaces(void);\n+char *lp_socket_address(void);\n+char *lp_nis_home_map_name(void);\n+const char **lp_netbios_aliases(void);\n+const char *lp_passdb_backend(void);\n+const char **lp_preload_modules(void);\n+char *lp_panic_action(void);\n+char *lp_adduser_script(void);\n+char *lp_renameuser_script(void);\n+char *lp_deluser_script(void);\n+const char *lp_guestaccount(void);\n+char *lp_addgroup_script(void);\n+char *lp_delgroup_script(void);\n+char *lp_addusertogroup_script(void);\n+char *lp_deluserfromgroup_script(void);\n+char *lp_setprimarygroup_script(void);\n+char *lp_addmachine_script(void);\n+char *lp_shutdown_script(void);\n+char *lp_abort_shutdown_script(void);\n+char *lp_username_map_script(void);\n+char *lp_check_password_script(void);\n+char *lp_wins_hook(void);\n+const char *lp_template_homedir(void);\n+const char *lp_template_shell(void);\n+const char *lp_winbind_separator(void);\n+int lp_acl_compatibility(void);\n+BOOL lp_winbind_enum_users(void);\n+BOOL lp_winbind_enum_groups(void);\n+BOOL lp_winbind_use_default_domain(void);\n+BOOL lp_winbind_trusted_domains_only(void);\n+BOOL lp_winbind_nested_groups(void);\n+BOOL lp_winbind_refresh_tickets(void);\n+BOOL lp_winbind_offline_logon(void);\n+BOOL lp_winbind_normalize_names(void);\n+const char **lp_idmap_domains(void);\n+const char **lp_idmap_backend(void);\n+char *lp_idmap_alloc_backend(void);\n+int lp_idmap_cache_time(void);\n+int lp_idmap_negative_cache_time(void);\n+int lp_keepalive(void);\n+BOOL lp_passdb_expand_explicit(void);\n+char *lp_ldap_suffix(void);\n+char *lp_ldap_admin_dn(void);\n+int lp_ldap_ssl(void);\n+int lp_ldap_passwd_sync(void);\n+BOOL lp_ldap_delete_dn(void);\n+int lp_ldap_replication_sleep(void);\n+int lp_ldap_timeout(void);\n+int lp_ldap_page_size(void);\n+char *lp_add_share_cmd(void);\n+char *lp_change_share_cmd(void);\n+char *lp_delete_share_cmd(void);\n+char *lp_usershare_path(void);\n+const char **lp_usershare_prefix_allow_list(void);\n+const char **lp_usershare_prefix_deny_list(void);\n+const char **lp_eventlog_list(void);\n+BOOL lp_registry_shares(void);\n+BOOL lp_usershare_allow_guests(void);\n+BOOL lp_usershare_owner_only(void);\n+BOOL lp_disable_netbios(void);\n+BOOL lp_reset_on_zero_vc(void);\n+BOOL lp_ms_add_printer_wizard(void);\n+BOOL lp_dns_proxy(void);\n+BOOL lp_wins_support(void);\n+BOOL lp_we_are_a_wins_server(void);\n+BOOL lp_wins_proxy(void);\n+BOOL lp_local_master(void);\n+BOOL lp_domain_logons(void);\n+BOOL lp_load_printers(void);\n+BOOL lp_readbmpx(void);\n+BOOL lp_readraw(void);\n+BOOL lp_large_readwrite(void);\n+BOOL lp_writeraw(void);\n+BOOL lp_null_passwords(void);\n+BOOL lp_obey_pam_restrictions(void);\n+BOOL lp_encrypted_passwords(void);\n+BOOL lp_update_encrypted(void);\n+int lp_client_schannel(void);\n+int lp_server_schannel(void);\n+BOOL lp_syslog_only(void);\n+BOOL lp_timestamp_logs(void);\n+BOOL lp_debug_prefix_timestamp(void);\n+BOOL lp_debug_hires_timestamp(void);\n+BOOL lp_debug_pid(void);\n+BOOL lp_debug_uid(void);\n+BOOL lp_enable_core_files(void);\n+BOOL lp_browse_list(void);\n+BOOL lp_nis_home_map(void);\n+BOOL lp_bind_interfaces_only(void);\n+BOOL lp_pam_password_change(void);\n+BOOL lp_unix_password_sync(void);\n+BOOL lp_passwd_chat_debug(void);\n+int lp_passwd_chat_timeout(void);\n+BOOL lp_nt_pipe_support(void);\n+BOOL lp_nt_status_support(void);\n+BOOL lp_stat_cache(void);\n+int lp_max_stat_cache_size(void);\n+BOOL lp_allow_trusted_domains(void);\n+int lp_restrict_anonymous(void);\n+BOOL lp_lanman_auth(void);\n+BOOL lp_ntlm_auth(void);\n+BOOL lp_client_plaintext_auth(void);\n+BOOL lp_client_lanman_auth(void);\n+BOOL lp_client_ntlmv2_auth(void);\n+BOOL lp_host_msdfs(void);\n+BOOL lp_kernel_oplocks(void);\n+BOOL lp_enhanced_browsing(void);\n+BOOL lp_use_mmap(void);\n+BOOL lp_unix_extensions(void);\n+BOOL lp_use_spnego(void);\n+BOOL lp_client_use_spnego(void);\n+BOOL lp_hostname_lookups(void);\n+BOOL lp_change_notify(const struct share_params *p );\n+BOOL lp_kernel_change_notify(const struct share_params *p );\n+BOOL lp_use_kerberos_keytab(void);\n+BOOL lp_defer_sharing_violations(void);\n+BOOL lp_enable_privileges(void);\n+BOOL lp_enable_asu_support(void);\n+int lp_os_level(void);\n+int lp_max_ttl(void);\n+int lp_max_wins_ttl(void);\n+int lp_min_wins_ttl(void);\n+int lp_max_log_size(void);\n+int lp_max_open_files(void);\n+int lp_open_files_db_hash_size(void);\n+int lp_maxxmit(void);\n+int lp_maxmux(void);\n+int lp_passwordlevel(void);\n+int lp_usernamelevel(void);\n+int lp_deadtime(void);\n+int lp_maxprotocol(void);\n+int lp_minprotocol(void);\n+int lp_security(void);\n+const char **lp_auth_methods(void);\n+BOOL lp_paranoid_server_security(void);\n+int lp_maxdisksize(void);\n+int lp_lpqcachetime(void);\n+int lp_max_smbd_processes(void);\n+int _lp_disable_spoolss(void);\n+int lp_syslog(void);\n+int lp_lm_announce(void);\n+int lp_lm_interval(void);\n+int lp_machine_password_timeout(void);\n+int lp_map_to_guest(void);\n+int lp_oplock_break_wait_time(void);\n+int lp_lock_spin_time(void);\n+int lp_usershare_max_shares(void);\n+char *lp_preexec(int );\n+char *lp_postexec(int );\n+char *lp_rootpreexec(int );\n+char *lp_rootpostexec(int );\n+char *lp_servicename(int );\n+const char *lp_const_servicename(int );\n+char *lp_pathname(int );\n+char *lp_dontdescend(int );\n+char *lp_username(int );\n+const char **lp_invalid_users(int );\n+const char **lp_valid_users(int );\n+const char **lp_admin_users(int );\n+const char **lp_svcctl_list(void);\n+char *lp_cups_options(int );\n+char *lp_cups_server(void);\n+char *lp_iprint_server(void);\n+char *lp_printcommand(int );\n+char *lp_lpqcommand(int );\n+char *lp_lprmcommand(int );\n+char *lp_lppausecommand(int );\n+char *lp_lpresumecommand(int );\n+char *lp_queuepausecommand(int );\n+char *lp_queueresumecommand(int );\n+const char *lp_printjob_username(int );\n+const char **lp_hostsallow(int );\n+const char **lp_hostsdeny(int );\n+char *lp_magicscript(int );\n+char *lp_magicoutput(int );\n+char *lp_comment(int );\n+char *lp_force_user(int );\n+char *lp_force_group(int );\n+const char **lp_readlist(int );\n+const char **lp_writelist(int );\n+const char **lp_printer_admin(int );\n+char *lp_fstype(int );\n+const char **lp_vfs_objects(int );\n+char *lp_msdfs_proxy(int );\n+char *lp_mangled_map(const struct share_params *p );\n+char *lp_veto_files(int );\n+char *lp_hide_files(int );\n+char *lp_veto_oplocks(int );\n+BOOL lp_msdfs_root(int );\n+char *lp_dfree_command(int );\n+BOOL lp_autoloaded(int );\n+BOOL lp_preexec_close(int );\n+BOOL lp_rootpreexec_close(int );\n+int lp_casesensitive(int );\n+BOOL lp_preservecase(int );\n+BOOL lp_shortpreservecase(int );\n+BOOL lp_hide_dot_files(int );\n+BOOL lp_hide_special_files(int );\n+BOOL lp_hideunreadable(int );\n+BOOL lp_hideunwriteable_files(int );\n+BOOL lp_browseable(int );\n+BOOL lp_readonly(int );\n+BOOL lp_no_set_dir(int );\n+BOOL lp_guest_ok(int );\n+BOOL lp_guest_only(int );\n+BOOL lp_print_ok(int );\n+BOOL lp_map_hidden(int );\n+BOOL lp_map_archive(int );\n+BOOL lp_store_dos_attributes(int );\n+BOOL lp_dmapi_support(int );\n+BOOL lp_locking(const struct share_params *p );\n+int lp_strict_locking(const struct share_params *p );\n+BOOL lp_posix_locking(const struct share_params *p );\n+BOOL lp_share_modes(int );\n+BOOL lp_oplocks(int );\n+BOOL lp_level2_oplocks(int );\n+BOOL lp_onlyuser(int );\n+BOOL lp_manglednames(const struct share_params *p );\n+BOOL lp_widelinks(int );\n+BOOL lp_symlinks(int );\n+BOOL lp_syncalways(int );\n+BOOL lp_strict_allocate(int );\n+BOOL lp_strict_sync(int );\n+BOOL lp_map_system(int );\n+BOOL lp_delete_readonly(int );\n+BOOL lp_fake_oplocks(int );\n+BOOL lp_recursive_veto_delete(int );\n+BOOL lp_dos_filemode(int );\n+BOOL lp_dos_filetimes(int );\n+BOOL lp_dos_filetime_resolution(int );\n+BOOL lp_fake_dir_create_times(int );\n+BOOL lp_blocking_locks(int );\n+BOOL lp_inherit_perms(int );\n+BOOL lp_inherit_acls(int );\n+BOOL lp_inherit_owner(int );\n+BOOL lp_use_client_driver(int );\n+BOOL lp_default_devmode(int );\n+BOOL lp_force_printername(int );\n+BOOL lp_nt_acl_support(int );\n+BOOL lp_force_unknown_acl_user(int );\n+BOOL lp_ea_support(int );\n+BOOL _lp_use_sendfile(int );\n+BOOL lp_profile_acls(int );\n+BOOL lp_map_acl_inherit(int );\n+BOOL lp_afs_share(int );\n+BOOL lp_acl_check_permissions(int );\n+BOOL lp_acl_group_control(int );\n+BOOL lp_acl_map_full_control(int );\n+int lp_create_mask(int );\n+int lp_force_create_mode(int );\n+int lp_security_mask(int );\n+int lp_force_security_mode(int );\n+int lp_dir_mask(int );\n+int lp_force_dir_mode(int );\n+int lp_dir_security_mask(int );\n+int lp_force_dir_security_mode(int );\n+int lp_max_connections(int );\n+int lp_defaultcase(int );\n+int lp_minprintspace(int );\n+int lp_printing(int );\n+int lp_max_reported_jobs(int );\n+int lp_oplock_contention_limit(int );\n+int lp_csc_policy(int );\n+int lp_write_cache_size(int );\n+int lp_block_size(int );\n+int lp_dfree_cache_time(int );\n+int lp_allocation_roundup_size(int );\n+int lp_aio_read_size(int );\n+int lp_aio_write_size(int );\n+int lp_map_readonly(int );\n+char lp_magicchar(const struct share_params *p );\n+int lp_winbind_cache_time(void);\n+const char **lp_winbind_nss_info(void);\n+int lp_algorithmic_rid_base(void);\n+int lp_name_cache_timeout(void);\n+int lp_client_signing(void);\n+int lp_server_signing(void);\n+char *lp_parm_talloc_string(int snum, const char *type, const char  \n*option, const char *def);\n+const char *lp_parm_const_string(int snum, const char *type, const  \nchar *option, const char *def);\n+const char **lp_parm_string_list(int snum, const char *type, const  \nchar *option, const char **def);\n+int lp_parm_int(int snum, const char *type, const char *option, int  \ndef);\n+unsigned long lp_parm_ulong(int snum, const char *type, const char  \n*option, unsigned long def);\n+BOOL lp_parm_bool(int snum, const char *type, const char *option,  \nBOOL def);\n+int lp_parm_enum(int snum, const char *type, const char *option,\n+\t\t const struct enum_list *_enum, int def);\n+BOOL lp_add_home(const char *pszHomename, int iDefaultService,\n+\t\t const char *user, const char *pszHomedir);\n+int lp_add_service(const char *pszService, int iDefaultService);\n+BOOL lp_add_printer(const char *pszPrintername, int iDefaultService);\n+void show_parameter_list(void);\n+BOOL service_ok(int iService);\n+BOOL lp_file_list_changed(void);\n+BOOL lp_idmap_uid(uid_t *low, uid_t *high);\n+BOOL lp_idmap_gid(gid_t *low, gid_t *high);\n+const char *lp_ldap_machine_suffix(void);\n+const char *lp_ldap_user_suffix(void);\n+const char *lp_ldap_group_suffix(void);\n+const char *lp_ldap_idmap_suffix(void);\n+void *lp_local_ptr(int snum, void *ptr);\n+BOOL lp_do_parameter(int snum, const char *pszParmName, const char  \n*pszParmValue);\n+void init_locals(void);\n+BOOL lp_is_default(int snum, struct parm_struct *parm);\n+BOOL dump_a_parameter(int snum, char *parm_name, FILE * f, BOOL  \nisGlobal);\n+struct parm_struct *lp_next_parameter(int snum, int *i, int  \nallparameters);\n+BOOL lp_snum_ok(int iService);\n+void lp_add_one_printer(char *name, char *comment);\n+BOOL lp_loaded(void);\n+void lp_killunused(BOOL (*snumused) (int));\n+void lp_killservice(int iServiceIn);\n+const char* server_role_str(uint32 role);\n+enum usershare_err parse_usershare_file(TALLOC_CTX *ctx,\n+\t\t\tSMB_STRUCT_STAT *psbuf,\n+\t\t\tconst char *servicename,\n+\t\t\tint snum,\n+\t\t\tchar **lines,\n+\t\t\tint numlines,\n+\t\t\tpstring sharepath,\n+\t\t\tpstring comment,\n+\t\t\tSEC_DESC **ppsd,\n+\t\t\tBOOL *pallow_guest);\n+int load_usershare_service(const char *servicename);\n+int load_usershare_shares(void);\n+void gfree_loadparm(void);\n+BOOL lp_load(const char *pszFname,\n+             BOOL global_only,\n+             BOOL save_defaults,\n+\t     BOOL add_ipc,\n+             BOOL initialize_globals);\n+void lp_resetnumservices(void);\n+int lp_numservices(void);\n+void lp_dump(FILE *f, BOOL show_defaults, int maxtoprint);\n+void lp_dump_one(FILE * f, BOOL show_defaults, int snum);\n+int lp_servicenumber(const char *pszServiceName);\n+BOOL share_defined(const char *service_name);\n+struct share_params *get_share_params(TALLOC_CTX *mem_ctx,\n+\t\t\t\t      const char *sharename);\n+struct share_iterator *share_list_all(TALLOC_CTX *mem_ctx);\n+struct share_params *next_share(struct share_iterator *list);\n+struct share_params *next_printer(struct share_iterator *list);\n+struct share_params *snum2params_static(int snum);\n+const char *volume_label(int snum);\n+int lp_server_role(void);\n+BOOL lp_domain_master(void);\n+BOOL lp_preferred_master(void);\n+void lp_remove_service(int snum);\n+void lp_copy_service(int snum, const char *new_name);\n+int lp_default_server_announce(void);\n+int lp_major_announce_version(void);\n+int lp_minor_announce_version(void);\n+void lp_set_name_resolve_order(const char *new_order);\n+const char *lp_printername(int snum);\n+void lp_set_logfile(const char *name);\n+int lp_maxprintjobs(int snum);\n+const char *lp_printcapname(void);\n+BOOL lp_disable_spoolss( void );\n+void lp_set_spoolss_state( uint32 state );\n+uint32 lp_get_spoolss_state( void );\n+BOOL lp_use_sendfile(int snum);\n+void set_use_sendfile(int snum, BOOL val);\n+void set_store_dos_attributes(int snum, BOOL val);\n+void lp_set_mangling_method(const char *new_method);\n+BOOL lp_posix_pathnames(void);\n+void lp_set_posix_pathnames(void);\n+enum brl_flavour lp_posix_cifsu_locktype(files_struct *fsp);\n+void lp_set_posix_default_cifsx_readwrite_locktype(enum brl_flavour  \nval);\n+\n+/* The following definitions come from param/params.c  */\n+\n+BOOL pm_process( const char *FileName,\n+\t\tBOOL (*sfunc)(const char *),\n+\t\tBOOL (*pfunc)(const char *, const char *) );\n+\n+/* The following definitions come from passdb/login_cache.c  */\n+\n+BOOL login_cache_init(void);\n+BOOL login_cache_shutdown(void);\n+LOGIN_CACHE * login_cache_read(struct samu *sampass);\n+BOOL login_cache_write(const struct samu *sampass, LOGIN_CACHE entry);\n+BOOL login_cache_delentry(const struct samu *sampass);\n+\n+/* The following definitions come from passdb/lookup_sid.c  */\n+\n+BOOL lookup_name(TALLOC_CTX *mem_ctx,\n+\t\t const char *full_name, int flags,\n+\t\t const char **ret_domain, const char **ret_name,\n+\t\t DOM_SID *ret_sid, enum lsa_SidType *ret_type);\n+BOOL lookup_name_smbconf(TALLOC_CTX *mem_ctx,\n+\t\t const char *full_name, int flags,\n+\t\t const char **ret_domain, const char **ret_name,\n+\t\t DOM_SID *ret_sid, enum lsa_SidType *ret_type);\n+NTSTATUS lookup_sids(TALLOC_CTX *mem_ctx, int num_sids,\n+\t\t     const DOM_SID **sids, int level,\n+\t\t     struct lsa_dom_info **ret_domains,\n+\t\t     struct lsa_name_info **ret_names);\n+BOOL lookup_sid(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\tconst char **ret_domain, const char **ret_name,\n+\t\tenum lsa_SidType *ret_type);\n+void store_uid_sid_cache(const DOM_SID *psid, uid_t uid);\n+void store_gid_sid_cache(const DOM_SID *psid, gid_t gid);\n+void uid_to_sid(DOM_SID *psid, uid_t uid);\n+void gid_to_sid(DOM_SID *psid, gid_t gid);\n+BOOL sid_to_uid(const DOM_SID *psid, uid_t *puid);\n+BOOL sid_to_gid(const DOM_SID *psid, gid_t *pgid);\n+\n+/* The following definitions come from passdb/machine_sid.c  */\n+\n+DOM_SID *get_global_sam_sid(void);\n+void reset_global_sam_sid(void) ;\n+BOOL sid_check_is_domain(const DOM_SID *sid);\n+BOOL sid_check_is_in_our_domain(const DOM_SID *sid);\n+\n+/* The following definitions come from passdb/passdb.c  */\n+\n+const char *my_sam_name(void);\n+struct samu *samu_new( TALLOC_CTX *ctx );\n+NTSTATUS samu_set_unix(struct samu *user, const struct passwd *pwd);\n+NTSTATUS samu_alloc_rid_unix(struct samu *user, const struct passwd  \n*pwd);\n+char *pdb_encode_acct_ctrl(uint32 acct_ctrl, size_t length);\n+uint32 pdb_decode_acct_ctrl(const char *p);\n+void pdb_sethexpwd(char *p, const unsigned char *pwd, uint32  \nacct_ctrl);\n+BOOL pdb_gethexpwd(const char *p, unsigned char *pwd);\n+void pdb_sethexhours(char *p, const unsigned char *hours);\n+BOOL pdb_gethexhours(const char *p, unsigned char *hours);\n+int algorithmic_rid_base(void);\n+uid_t algorithmic_pdb_user_rid_to_uid(uint32 user_rid);\n+uid_t max_algorithmic_uid(void);\n+uint32 algorithmic_pdb_uid_to_user_rid(uid_t uid);\n+gid_t pdb_group_rid_to_gid(uint32 group_rid);\n+gid_t max_algorithmic_gid(void);\n+uint32 algorithmic_pdb_gid_to_group_rid(gid_t gid);\n+BOOL algorithmic_pdb_rid_is_user(uint32 rid);\n+BOOL lookup_global_sam_name(const char *name, int flags, uint32_t *rid,\n+\t\t\t    enum lsa_SidType *type);\n+NTSTATUS local_password_change(const char *user_name, int local_flags,\n+\t\t\t   const char *new_passwd,\n+\t\t\t   char *err_str, size_t err_str_len,\n+\t\t\t   char *msg_str, size_t msg_str_len);\n+BOOL init_sam_from_buffer_v3(struct samu *sampass, uint8 *buf,  \nuint32 buflen);\n+uint32 init_buffer_from_sam_v3 (uint8 **buf, struct samu *sampass,  \nBOOL size_only);\n+BOOL pdb_copy_sam_account(struct samu *dst, struct samu *src );\n+BOOL pdb_update_bad_password_count(struct samu *sampass, BOOL  \n*updated);\n+BOOL pdb_update_autolock_flag(struct samu *sampass, BOOL *updated);\n+BOOL pdb_increment_bad_password_count(struct samu *sampass);\n+BOOL get_trust_pw(const char *domain, uint8 ret_pwd[16], uint32  \n*channel);\n+\n+/* The following definitions come from passdb/pdb_compat.c  */\n+\n+uint32 pdb_get_user_rid (const struct samu *sampass);\n+uint32 pdb_get_group_rid (struct samu *sampass);\n+BOOL pdb_set_user_sid_from_rid (struct samu *sampass, uint32 rid,  \nenum pdb_value_state flag);\n+BOOL pdb_set_group_sid_from_rid (struct samu *sampass, uint32 grid,  \nenum pdb_value_state flag);\n+\n+/* The following definitions come from passdb/pdb_get_set.c  */\n+\n+uint32 pdb_get_acct_ctrl(const struct samu *sampass);\n+time_t pdb_get_logon_time(const struct samu *sampass);\n+time_t pdb_get_logoff_time(const struct samu *sampass);\n+time_t pdb_get_kickoff_time(const struct samu *sampass);\n+time_t pdb_get_bad_password_time(const struct samu *sampass);\n+time_t pdb_get_pass_last_set_time(const struct samu *sampass);\n+time_t pdb_get_pass_can_change_time(const struct samu *sampass);\n+time_t pdb_get_pass_can_change_time_noncalc(const struct samu  \n*sampass);\n+time_t pdb_get_pass_must_change_time(const struct samu *sampass);\n+BOOL pdb_get_pass_can_change(const struct samu *sampass);\n+uint16 pdb_get_logon_divs(const struct samu *sampass);\n+uint32 pdb_get_hours_len(const struct samu *sampass);\n+const uint8 *pdb_get_hours(const struct samu *sampass);\n+const uint8 *pdb_get_nt_passwd(const struct samu *sampass);\n+const uint8 *pdb_get_lanman_passwd(const struct samu *sampass);\n+const uint8 *pdb_get_pw_history(const struct samu *sampass, uint32  \n*current_hist_len);\n+const char *pdb_get_plaintext_passwd(const struct samu *sampass);\n+const DOM_SID *pdb_get_user_sid(const struct samu *sampass);\n+const DOM_SID *pdb_get_group_sid(struct samu *sampass);\n+enum pdb_value_state pdb_get_init_flags(const struct samu *sampass,  \nenum pdb_elements element);\n+const char *pdb_get_username(const struct samu *sampass);\n+const char *pdb_get_domain(const struct samu *sampass);\n+const char *pdb_get_nt_username(const struct samu *sampass);\n+const char *pdb_get_fullname(const struct samu *sampass);\n+const char *pdb_get_homedir(const struct samu *sampass);\n+const char *pdb_get_unix_homedir(const struct samu *sampass);\n+const char *pdb_get_dir_drive(const struct samu *sampass);\n+const char *pdb_get_logon_script(const struct samu *sampass);\n+const char *pdb_get_profile_path(const struct samu *sampass);\n+const char *pdb_get_acct_desc(const struct samu *sampass);\n+const char *pdb_get_workstations(const struct samu *sampass);\n+const char *pdb_get_comment(const struct samu *sampass);\n+const char *pdb_get_munged_dial(const struct samu *sampass);\n+uint16 pdb_get_bad_password_count(const struct samu *sampass);\n+uint16 pdb_get_logon_count(const struct samu *sampass);\n+uint32 pdb_get_unknown_6(const struct samu *sampass);\n+void *pdb_get_backend_private_data(const struct samu *sampass, const  \nstruct pdb_methods *my_methods);\n+BOOL pdb_set_acct_ctrl(struct samu *sampass, uint32 acct_ctrl, enum  \npdb_value_state flag);\n+BOOL pdb_set_logon_time(struct samu *sampass, time_t mytime, enum  \npdb_value_state flag);\n+BOOL pdb_set_logoff_time(struct samu *sampass, time_t mytime, enum  \npdb_value_state flag);\n+BOOL pdb_set_kickoff_time(struct samu *sampass, time_t mytime, enum  \npdb_value_state flag);\n+BOOL pdb_set_bad_password_time(struct samu *sampass, time_t mytime,  \nenum pdb_value_state flag);\n+BOOL pdb_set_pass_can_change_time(struct samu *sampass, time_t  \nmytime, enum pdb_value_state flag);\n+BOOL pdb_set_pass_must_change_time(struct samu *sampass, time_t  \nmytime, enum pdb_value_state flag);\n+BOOL pdb_set_pass_last_set_time(struct samu *sampass, time_t mytime,  \nenum pdb_value_state flag);\n+BOOL pdb_set_hours_len(struct samu *sampass, uint32 len, enum  \npdb_value_state flag);\n+BOOL pdb_set_logon_divs(struct samu *sampass, uint16 hours, enum  \npdb_value_state flag);\n+BOOL pdb_set_init_flags(struct samu *sampass, enum pdb_elements  \nelement, enum pdb_value_state value_flag);\n+BOOL pdb_set_user_sid(struct samu *sampass, const DOM_SID *u_sid,  \nenum pdb_value_state flag);\n+BOOL pdb_set_user_sid_from_string(struct samu *sampass, fstring  \nu_sid, enum pdb_value_state flag);\n+BOOL pdb_set_group_sid(struct samu *sampass, const DOM_SID *g_sid,  \nenum pdb_value_state flag);\n+BOOL pdb_set_username(struct samu *sampass, const char *username,  \nenum pdb_value_state flag);\n+BOOL pdb_set_domain(struct samu *sampass, const char *domain, enum  \npdb_value_state flag);\n+BOOL pdb_set_nt_username(struct samu *sampass, const char  \n*nt_username, enum pdb_value_state flag);\n+BOOL pdb_set_fullname(struct samu *sampass, const char *full_name,  \nenum pdb_value_state flag);\n+BOOL pdb_set_logon_script(struct samu *sampass, const char  \n*logon_script, enum pdb_value_state flag);\n+BOOL pdb_set_profile_path(struct samu *sampass, const char  \n*profile_path, enum pdb_value_state flag);\n+BOOL pdb_set_dir_drive(struct samu *sampass, const char *dir_drive,  \nenum pdb_value_state flag);\n+BOOL pdb_set_homedir(struct samu *sampass, const char *home_dir,  \nenum pdb_value_state flag);\n+BOOL pdb_set_acct_desc(struct samu *sampass, const char *acct_desc,  \nenum pdb_value_state flag);\n+BOOL pdb_set_workstations(struct samu *sampass, const char  \n*workstations, enum pdb_value_state flag);\n+BOOL pdb_set_comment(struct samu *sampass, const char *comment, enum  \npdb_value_state flag);\n+BOOL pdb_set_munged_dial(struct samu *sampass, const char  \n*munged_dial, enum pdb_value_state flag);\n+BOOL pdb_set_nt_passwd(struct samu *sampass, const uint8 pwd \n[NT_HASH_LEN], enum pdb_value_state flag);\n+BOOL pdb_set_lanman_passwd(struct samu *sampass, const uint8 pwd \n[LM_HASH_LEN], enum pdb_value_state flag);\n+BOOL pdb_set_pw_history(struct samu *sampass, const uint8 *pwd,  \nuint32 historyLen, enum pdb_value_state flag);\n+BOOL pdb_set_plaintext_pw_only(struct samu *sampass, const char  \n*password, enum pdb_value_state flag);\n+BOOL pdb_set_bad_password_count(struct samu *sampass, uint16  \nbad_password_count, enum pdb_value_state flag);\n+BOOL pdb_set_logon_count(struct samu *sampass, uint16 logon_count,  \nenum pdb_value_state flag);\n+BOOL pdb_set_unknown_6(struct samu *sampass, uint32 unkn, enum  \npdb_value_state flag);\n+BOOL pdb_set_hours(struct samu *sampass, const uint8 *hours, enum  \npdb_value_state flag);\n+BOOL pdb_set_backend_private_data(struct samu *sampass, void  \n*private_data,\n+\t\t\t\t   void (*free_fn)(void **),\n+\t\t\t\t   const struct pdb_methods *my_methods,\n+\t\t\t\t   enum pdb_value_state flag);\n+BOOL pdb_set_pass_can_change(struct samu *sampass, BOOL canchange);\n+BOOL pdb_set_plaintext_passwd(struct samu *sampass, const char  \n*plaintext);\n+uint32 pdb_build_fields_present(struct samu *sampass);\n+\n+/* The following definitions come from passdb/pdb_interface.c  */\n+\n+NTSTATUS smb_register_passdb(int version, const char *name,  \npdb_init_function init) ;\n+struct pdb_init_function_entry *pdb_find_backend_entry(const char  \n*name);\n+struct event_context *pdb_get_event_context(void);\n+NTSTATUS make_pdb_method_name(struct pdb_methods **methods, const  \nchar *selected);\n+BOOL pdb_setsampwent(BOOL update, uint16 acb_mask) ;\n+void pdb_endsampwent(void) ;\n+BOOL pdb_getsampwent(struct samu *user) ;\n+BOOL pdb_getsampwnam(struct samu *sam_acct, const char *username) ;\n+BOOL guest_user_info( struct samu *user );\n+BOOL pdb_getsampwsid(struct samu *sam_acct, const DOM_SID *sid) ;\n+NTSTATUS pdb_create_user(TALLOC_CTX *mem_ctx, const char *name,  \nuint32 flags,\n+\t\t\t uint32 *rid);\n+NTSTATUS pdb_delete_user(TALLOC_CTX *mem_ctx, struct samu *sam_acct);\n+NTSTATUS pdb_add_sam_account(struct samu *sam_acct) ;\n+NTSTATUS pdb_update_sam_account(struct samu *sam_acct) ;\n+NTSTATUS pdb_delete_sam_account(struct samu *sam_acct) ;\n+NTSTATUS pdb_rename_sam_account(struct samu *oldname, const char  \n*newname);\n+NTSTATUS pdb_update_login_attempts(struct samu *sam_acct, BOOL  \nsuccess);\n+BOOL pdb_getgrsid(GROUP_MAP *map, DOM_SID sid);\n+BOOL pdb_getgrgid(GROUP_MAP *map, gid_t gid);\n+BOOL pdb_getgrnam(GROUP_MAP *map, const char *name);\n+NTSTATUS pdb_create_dom_group(TALLOC_CTX *mem_ctx, const char *name,\n+\t\t\t      uint32 *rid);\n+NTSTATUS pdb_delete_dom_group(TALLOC_CTX *mem_ctx, uint32 rid);\n+NTSTATUS pdb_add_group_mapping_entry(GROUP_MAP *map);\n+NTSTATUS pdb_update_group_mapping_entry(GROUP_MAP *map);\n+NTSTATUS pdb_delete_group_mapping_entry(DOM_SID sid);\n+BOOL pdb_enum_group_mapping(const DOM_SID *sid, enum lsa_SidType  \nsid_name_use, GROUP_MAP **pp_rmap,\n+\t\t\t    size_t *p_num_entries, BOOL unix_only);\n+NTSTATUS pdb_enum_group_members(TALLOC_CTX *mem_ctx,\n+\t\t\t\tconst DOM_SID *sid,\n+\t\t\t\tuint32 **pp_member_rids,\n+\t\t\t\tsize_t *p_num_members);\n+NTSTATUS pdb_enum_group_memberships(TALLOC_CTX *mem_ctx, struct samu  \n*user,\n+\t\t\t\t    DOM_SID **pp_sids, gid_t **pp_gids,\n+\t\t\t\t    size_t *p_num_groups);\n+NTSTATUS pdb_set_unix_primary_group(TALLOC_CTX *mem_ctx, struct samu  \n*user);\n+NTSTATUS pdb_add_groupmem(TALLOC_CTX *mem_ctx, uint32 group_rid,\n+\t\t\t  uint32 member_rid);\n+NTSTATUS pdb_del_groupmem(TALLOC_CTX *mem_ctx, uint32 group_rid,\n+\t\t\t  uint32 member_rid);\n+NTSTATUS pdb_create_alias(const char *name, uint32 *rid);\n+NTSTATUS pdb_delete_alias(const DOM_SID *sid);\n+NTSTATUS pdb_get_aliasinfo(const DOM_SID *sid, struct acct_info *info);\n+NTSTATUS pdb_set_aliasinfo(const DOM_SID *sid, struct acct_info *info);\n+NTSTATUS pdb_add_aliasmem(const DOM_SID *alias, const DOM_SID *member);\n+NTSTATUS pdb_del_aliasmem(const DOM_SID *alias, const DOM_SID *member);\n+NTSTATUS pdb_enum_aliasmem(const DOM_SID *alias,\n+\t\t\t   DOM_SID **pp_members, size_t *p_num_members);\n+NTSTATUS pdb_enum_alias_memberships(TALLOC_CTX *mem_ctx,\n+\t\t\t\t    const DOM_SID *domain_sid,\n+\t\t\t\t    const DOM_SID *members, size_t num_members,\n+\t\t\t\t    uint32 **pp_alias_rids,\n+\t\t\t\t    size_t *p_num_alias_rids);\n+NTSTATUS pdb_lookup_rids(const DOM_SID *domain_sid,\n+\t\t\t int num_rids,\n+\t\t\t uint32 *rids,\n+\t\t\t const char **names,\n+\t\t\t enum lsa_SidType *attrs);\n+NTSTATUS pdb_lookup_names(const DOM_SID *domain_sid,\n+\t\t\t  int num_names,\n+\t\t\t  const char **names,\n+\t\t\t  uint32 *rids,\n+\t\t\t  enum lsa_SidType *attrs);\n+BOOL pdb_get_account_policy(int policy_index, uint32 *value);\n+BOOL pdb_set_account_policy(int policy_index, uint32 value);\n+BOOL pdb_get_seq_num(time_t *seq_num);\n+BOOL pdb_uid_to_rid(uid_t uid, uint32 *rid);\n+BOOL pdb_uid_to_sid(uid_t uid, DOM_SID *sid);\n+BOOL pdb_gid_to_sid(gid_t gid, DOM_SID *sid);\n+BOOL pdb_sid_to_id(const DOM_SID *sid, union unid_t *id,\n+\t\t   enum lsa_SidType *type);\n+BOOL pdb_rid_algorithm(void);\n+BOOL pdb_new_rid(uint32 *rid);\n+BOOL initialize_password_db(BOOL reload, struct event_context  \n*event_ctx);\n+struct pdb_search *pdb_search_users(uint32 acct_flags);\n+struct pdb_search *pdb_search_groups(void);\n+struct pdb_search *pdb_search_aliases(const DOM_SID *sid);\n+uint32 pdb_search_entries(struct pdb_search *search,\n+\t\t\t  uint32 start_idx, uint32 max_entries,\n+\t\t\t  struct samr_displayentry **result);\n+void pdb_search_destroy(struct pdb_search *search);\n+BOOL pdb_get_trusteddom_pw(const char *domain, char** pwd, DOM_SID  \n*sid,\n+\t\t\t   time_t *pass_last_set_time);\n+BOOL pdb_set_trusteddom_pw(const char* domain, const char* pwd,\n+\t\t\t   const DOM_SID *sid);\n+BOOL pdb_del_trusteddom_pw(const char *domain);\n+NTSTATUS pdb_enum_trusteddoms(TALLOC_CTX *mem_ctx, uint32 *num_domains,\n+\t\t\t      struct trustdom_info ***domains);\n+NTSTATUS make_pdb_method( struct pdb_methods **methods ) ;\n+\n+/* The following definitions come from passdb/pdb_ldap.c  */\n+\n+const char** get_userattr_list( TALLOC_CTX *mem_ctx, int schema_ver );\n+int ldapsam_search_suffix_by_name(struct ldapsam_privates *ldap_state,\n+\t\t\t\t\t  const char *user,\n+\t\t\t\t\t  LDAPMessage ** result,\n+\t\t\t\t\t  const char **attr);\n+const char **talloc_attrs(TALLOC_CTX *mem_ctx, ...);\n+NTSTATUS pdb_init_ldapsam_compat(struct pdb_methods **pdb_method,  \nconst char *location);\n+NTSTATUS pdb_init_ldapsam(struct pdb_methods **pdb_method, const  \nchar *location);\n+NTSTATUS pdb_ldap_init(void);\n+\n+/* The following definitions come from passdb/pdb_nds.c  */\n+\n+int pdb_nds_get_password(\n+\tstruct smbldap_state *ldap_state,\n+\tchar *object_dn,\n+\tsize_t *pwd_len,\n+\tchar *pwd );\n+int pdb_nds_set_password(\n+\tstruct smbldap_state *ldap_state,\n+\tchar *object_dn,\n+\tconst char *pwd );\n+NTSTATUS pdb_nds_init(void);\n+\n+/* The following definitions come from passdb/pdb_smbpasswd.c  */\n+\n+NTSTATUS pdb_smbpasswd_init(void) ;\n+\n+/* The following definitions come from passdb/pdb_tdb.c  */\n+\n+BOOL init_sam_from_buffer_v2(struct samu *sampass, uint8 *buf,  \nuint32 buflen);\n+void tdbsam_close( void );\n+NTSTATUS pdb_tdbsam_init(void);\n+\n+/* The following definitions come from passdb/secrets.c  */\n+\n+BOOL secrets_init(void);\n+void *secrets_fetch(const char *key, size_t *size);\n+BOOL secrets_store(const char *key, const void *data, size_t size);\n+BOOL secrets_delete(const char *key);\n+BOOL secrets_store_domain_sid(const char *domain, const DOM_SID *sid);\n+BOOL secrets_fetch_domain_sid(const char *domain, DOM_SID *sid);\n+BOOL secrets_store_domain_guid(const char *domain, struct GUID *guid);\n+BOOL secrets_fetch_domain_guid(const char *domain, struct GUID *guid);\n+BOOL secrets_lock_trust_account_password(const char *domain, BOOL  \ndolock);\n+uint32 get_default_sec_channel(void) ;\n+BOOL secrets_fetch_trust_account_password(const char *domain, uint8  \nret_pwd[16],\n+\t\t\t\t\t  time_t *pass_last_set_time,\n+\t\t\t\t\t  uint32 *channel);\n+BOOL secrets_fetch_trusted_domain_password(const char *domain,  \nchar** pwd,\n+                                           DOM_SID *sid, time_t  \n*pass_last_set_time);\n+BOOL secrets_store_trusted_domain_password(const char* domain, const  \nchar* pwd,\n+                                           const DOM_SID *sid);\n+BOOL secrets_store_machine_password(const char *pass, const char  \n*domain, uint32 sec_channel);\n+char *secrets_fetch_machine_password(const char *domain,\n+\t\t\t\t     time_t *pass_last_set_time,\n+\t\t\t\t     uint32 *channel);\n+BOOL trusted_domain_password_delete(const char *domain);\n+BOOL secrets_store_ldap_pw(const char* dn, char* pw);\n+BOOL fetch_ldap_pw(char **dn, char** pw);\n+NTSTATUS secrets_trusted_domains(TALLOC_CTX *mem_ctx, uint32  \n*num_domains,\n+\t\t\t\t struct trustdom_info ***domains);\n+BOOL secrets_named_mutex(const char *name, unsigned int timeout);\n+void secrets_named_mutex_release(const char *name);\n+BOOL secrets_store_afs_keyfile(const char *cell, const struct  \nafs_keyfile *keyfile);\n+BOOL secrets_fetch_afs_key(const char *cell, struct afs_key *result);\n+void secrets_fetch_ipc_userpass(char **username, char **domain, char  \n**password);\n+BOOL secrets_store_schannel_session_info(TALLOC_CTX *mem_ctx,\n+\t\t\t\tconst char *remote_machine,\n+\t\t\t\tconst struct dcinfo *pdc);\n+BOOL secrets_restore_schannel_session_info(TALLOC_CTX *mem_ctx,\n+\t\t\t\tconst char *remote_machine,\n+\t\t\t\tstruct dcinfo **ppdc);\n+BOOL secrets_store_generic(const char *owner, const char *key, const  \nchar *secret);\n+char *secrets_fetch_generic(const char *owner, const char *key);\n+\n+/* The following definitions come from passdb/util_builtin.c  */\n+\n+BOOL lookup_builtin_rid(TALLOC_CTX *mem_ctx, uint32 rid, const char  \n**name);\n+BOOL lookup_builtin_name(const char *name, uint32 *rid);\n+const char *builtin_domain_name(void);\n+BOOL sid_check_is_builtin(const DOM_SID *sid);\n+BOOL sid_check_is_in_builtin(const DOM_SID *sid);\n+\n+/* The following definitions come from passdb/util_unixsids.c  */\n+\n+BOOL sid_check_is_unix_users(const DOM_SID *sid);\n+BOOL sid_check_is_in_unix_users(const DOM_SID *sid);\n+BOOL uid_to_unix_users_sid(uid_t uid, DOM_SID *sid);\n+BOOL gid_to_unix_groups_sid(gid_t gid, DOM_SID *sid);\n+const char *unix_users_domain_name(void);\n+BOOL lookup_unix_user_name(const char *name, DOM_SID *sid);\n+BOOL sid_check_is_unix_groups(const DOM_SID *sid);\n+BOOL sid_check_is_in_unix_groups(const DOM_SID *sid);\n+const char *unix_groups_domain_name(void);\n+BOOL lookup_unix_group_name(const char *name, DOM_SID *sid);\n+\n+/* The following definitions come from passdb/util_wellknown.c  */\n+\n+BOOL sid_check_is_wellknown_domain(const DOM_SID *sid, const char  \n**name);\n+BOOL sid_check_is_in_wellknown_domain(const DOM_SID *sid);\n+BOOL lookup_wellknown_sid(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\t\t  const char **domain, const char **name);\n+BOOL lookup_wellknown_name(TALLOC_CTX *mem_ctx, const char *name,\n+\t\t\t   DOM_SID *sid, const char **domain);\n+\n+/* The following definitions come from printing/load.c  */\n+\n+void load_printers(void);\n+\n+/* The following definitions come from printing/lpq_parse.c  */\n+\n+BOOL parse_lpq_entry(enum printing_types printing_type,char *line,\n+\t\t     print_queue_struct *buf,\n+\t\t     print_status_struct *status,BOOL first);\n+\n+/* The following definitions come from printing/notify.c  */\n+\n+int print_queue_snum(const char *qname);\n+BOOL print_notify_messages_pending(void);\n+void print_notify_send_messages(struct messaging_context *msg_ctx,\n+\t\t\t\tunsigned int timeout);\n+void notify_printer_status_byname(const char *sharename, uint32  \nstatus);\n+void notify_printer_status(int snum, uint32 status);\n+void notify_job_status_byname(const char *sharename, uint32 jobid,  \nuint32 status,\n+\t\t\t      uint32 flags);\n+void notify_job_status(const char *sharename, uint32 jobid, uint32  \nstatus);\n+void notify_job_total_bytes(const char *sharename, uint32 jobid,\n+\t\t\t    uint32 size);\n+void notify_job_total_pages(const char *sharename, uint32 jobid,\n+\t\t\t    uint32 pages);\n+void notify_job_username(const char *sharename, uint32 jobid, char  \n*name);\n+void notify_job_name(const char *sharename, uint32 jobid, char *name);\n+void notify_job_submitted(const char *sharename, uint32 jobid,\n+\t\t\t  time_t submitted);\n+void notify_printer_driver(int snum, char *driver_name);\n+void notify_printer_comment(int snum, char *comment);\n+void notify_printer_sharename(int snum, char *share_name);\n+void notify_printer_printername(int snum, char *printername);\n+void notify_printer_port(int snum, char *port_name);\n+void notify_printer_location(int snum, char *location);\n+void notify_printer_byname( const char *printername, uint32 change,  \nconst char *value );\n+BOOL print_notify_pid_list(const char *printername, TALLOC_CTX  \n*mem_ctx, size_t *p_num_pids, pid_t **pp_pid_list);\n+\n+/* The following definitions come from printing/nt_printing.c  */\n+\n+BOOL nt_printing_init(struct messaging_context *msg_ctx);\n+uint32 update_c_setprinter(BOOL initialize);\n+uint32 get_c_setprinter(void);\n+int get_builtin_ntforms(nt_forms_struct **list);\n+BOOL get_a_builtin_ntform(UNISTR2 *uni_formname,nt_forms_struct *form);\n+int get_ntforms(nt_forms_struct **list);\n+int write_ntforms(nt_forms_struct **list, int number);\n+BOOL add_a_form(nt_forms_struct **list, const FORM *form, int *count);\n+BOOL delete_a_form(nt_forms_struct **list, UNISTR2 *del_name, int  \n*count, WERROR *ret);\n+void update_a_form(nt_forms_struct **list, const FORM *form, int  \ncount);\n+int get_ntdrivers(fstring **list, const char *architecture, uint32  \nversion);\n+const char *get_short_archi(const char *long_archi);\n+WERROR clean_up_driver_struct(NT_PRINTER_DRIVER_INFO_LEVEL  \ndriver_abstract,\n+\t\t\t\t\t\t\t  uint32 level, struct current_user *user);\n+WERROR move_driver_to_download_area(NT_PRINTER_DRIVER_INFO_LEVEL  \ndriver_abstract, uint32 level,\n+\t\t\t\t  struct current_user *user, WERROR *perr);\n+int pack_devicemode(NT_DEVICEMODE *nt_devmode, uint8 *buf, int buflen);\n+uint32 del_a_printer(const char *sharename);\n+NT_DEVICEMODE *construct_nt_devicemode(const fstring  \ndefault_devicename);\n+NT_DEVICEMODE *dup_nt_devicemode(NT_DEVICEMODE *nt_devicemode);\n+void free_nt_devicemode(NT_DEVICEMODE **devmode_ptr);\n+int unpack_devicemode(NT_DEVICEMODE **nt_devmode, const uint8 *buf,  \nint buflen);\n+int add_new_printer_key( NT_PRINTER_DATA *data, const char *name );\n+int delete_printer_key( NT_PRINTER_DATA *data, const char *name );\n+int lookup_printerkey( NT_PRINTER_DATA *data, const char *name );\n+int get_printer_subkeys( NT_PRINTER_DATA *data, const char* key,  \nfstring **subkeys );\n+WERROR nt_printer_publish(Printer_entry *print_hnd, int snum, int  \naction);\n+WERROR check_published_printers(void);\n+BOOL is_printer_published(Printer_entry *print_hnd, int snum,\n+\t\t\t  struct GUID *guid);\n+WERROR nt_printer_publish(Printer_entry *print_hnd, int snum, int  \naction);\n+WERROR check_published_printers(void);\n+BOOL is_printer_published(Printer_entry *print_hnd, int snum,\n+\t\t\t  struct GUID *guid);\n+WERROR delete_all_printer_data( NT_PRINTER_INFO_LEVEL_2 *p2, const  \nchar *key );\n+WERROR delete_printer_data( NT_PRINTER_INFO_LEVEL_2 *p2, const char  \n*key, const char *value );\n+WERROR add_printer_data( NT_PRINTER_INFO_LEVEL_2 *p2, const char  \n*key, const char *value,\n+                           uint32 type, uint8 *data, int real_len );\n+REGISTRY_VALUE* get_printer_data( NT_PRINTER_INFO_LEVEL_2 *p2, const  \nchar *key, const char *value );\n+WERROR mod_a_printer(NT_PRINTER_INFO_LEVEL *printer, uint32 level);\n+BOOL set_driver_init(NT_PRINTER_INFO_LEVEL *printer, uint32 level);\n+BOOL del_driver_init(char *drivername);\n+WERROR save_driver_init(NT_PRINTER_INFO_LEVEL *printer, uint32  \nlevel, uint8 *data, uint32 data_len);\n+WERROR get_a_printer( Printer_entry *print_hnd,  \nNT_PRINTER_INFO_LEVEL **pp_printer, uint32 level,\n+\t\t\tconst char *sharename);\n+uint32 free_a_printer(NT_PRINTER_INFO_LEVEL **pp_printer, uint32  \nlevel);\n+uint32 add_a_printer_driver(NT_PRINTER_DRIVER_INFO_LEVEL driver,  \nuint32 level);\n+WERROR get_a_printer_driver(NT_PRINTER_DRIVER_INFO_LEVEL *driver,  \nuint32 level,\n+                            fstring drivername, const char  \n*architecture, uint32 version);\n+uint32 free_a_printer_driver(NT_PRINTER_DRIVER_INFO_LEVEL driver,  \nuint32 level);\n+BOOL printer_driver_in_use ( NT_PRINTER_DRIVER_INFO_LEVEL_3 *info_3 );\n+BOOL printer_driver_files_in_use ( NT_PRINTER_DRIVER_INFO_LEVEL_3  \n*info );\n+WERROR delete_printer_driver( NT_PRINTER_DRIVER_INFO_LEVEL_3  \n*info_3, struct current_user *user,\n+                              uint32 version, BOOL delete_files );\n+WERROR nt_printing_setsec(const char *sharename, SEC_DESC_BUF  \n*secdesc_ctr);\n+BOOL nt_printing_getsec(TALLOC_CTX *ctx, const char *sharename,  \nSEC_DESC_BUF **secdesc_ctr);\n+void map_printer_permissions(SEC_DESC *sd);\n+BOOL print_access_check(struct current_user *user, int snum, int  \naccess_type);\n+BOOL print_time_access_check(const char *servicename);\n+char* get_server_name( Printer_entry *printer );\n+\n+/* The following definitions come from printing/pcap.c  */\n+\n+BOOL pcap_cache_add(const char *name, const char *comment);\n+BOOL pcap_cache_loaded(void);\n+void pcap_cache_reload(void);\n+BOOL pcap_printername_ok(const char *printername);\n+void pcap_printer_fn(void (*fn)(char *, char *));\n+\n+/* The following definitions come from printing/print_aix.c  */\n+\n+BOOL aix_cache_reload(void);\n+\n+/* The following definitions come from printing/print_cups.c  */\n+\n+BOOL cups_cache_reload(void);\n+BOOL cups_pull_comment_location(NT_PRINTER_INFO_LEVEL_2 *printer);\n+\n+/* The following definitions come from printing/print_generic.c  */\n+\n+\n+/* The following definitions come from printing/print_iprint.c  */\n+\n+BOOL iprint_cache_reload(void);\n+\n+/* The following definitions come from printing/print_svid.c  */\n+\n+BOOL sysv_cache_reload(void);\n+\n+/* The following definitions come from printing/print_test.c  */\n+\n+\n+/* The following definitions come from printing/printfsp.c  */\n+\n+NTSTATUS print_fsp_open(connection_struct *conn, const char *fname,\n+\t\t\tfiles_struct **result);\n+void print_fsp_end(files_struct *fsp, enum file_close_type close_type);\n+\n+/* The following definitions come from printing/printing.c  */\n+\n+uint16 pjobid_to_rap(const char* sharename, uint32 jobid);\n+BOOL rap_to_pjobid(uint16 rap_jobid, fstring sharename, uint32  \n*pjobid);\n+BOOL print_backend_init(struct messaging_context *msg_ctx);\n+void printing_end(void);\n+int unpack_pjob( uint8 *buf, int buflen, struct printjob *pjob );\n+uint32 sysjob_to_jobid(int unix_jobid);\n+void pjob_delete(const char* sharename, uint32 jobid);\n+void start_background_queue(void);\n+BOOL print_notify_register_pid(int snum);\n+BOOL print_notify_deregister_pid(int snum);\n+BOOL print_job_exists(const char* sharename, uint32 jobid);\n+int print_job_fd(const char* sharename, uint32 jobid);\n+char *print_job_fname(const char* sharename, uint32 jobid);\n+NT_DEVICEMODE *print_job_devmode(const char* sharename, uint32 jobid);\n+BOOL print_job_set_place(const char *sharename, uint32 jobid, int  \nplace);\n+BOOL print_job_set_name(const char *sharename, uint32 jobid, char  \n*name);\n+BOOL print_job_delete(struct current_user *user, int snum, uint32  \njobid, WERROR *errcode);\n+BOOL print_job_pause(struct current_user *user, int snum, uint32  \njobid, WERROR *errcode);\n+BOOL print_job_resume(struct current_user *user, int snum, uint32  \njobid, WERROR *errcode);\n+ssize_t print_job_write(int snum, uint32 jobid, const char *buf,  \nSMB_OFF_T pos, size_t size);\n+int print_queue_length(int snum, print_status_struct *pstatus);\n+uint32 print_job_start(struct current_user *user, int snum, char  \n*jobname, NT_DEVICEMODE *nt_devmode );\n+void print_job_endpage(int snum, uint32 jobid);\n+BOOL print_job_end(int snum, uint32 jobid, enum file_close_type  \nclose_type);\n+int print_queue_status(int snum,\n+\t\t       print_queue_struct **ppqueue,\n+\t\t       print_status_struct *status);\n+BOOL print_queue_pause(struct current_user *user, int snum, WERROR  \n*errcode);\n+BOOL print_queue_resume(struct current_user *user, int snum, WERROR  \n*errcode);\n+BOOL print_queue_purge(struct current_user *user, int snum, WERROR  \n*errcode);\n+\n+/* The following definitions come from printing/printing_db.c  */\n+\n+struct tdb_print_db *get_print_db_byname(const char *printername);\n+void release_print_db( struct tdb_print_db *pdb);\n+void close_all_print_db(void);\n+TDB_DATA get_printer_notify_pid_list(TDB_CONTEXT *tdb, const char  \n*printer_name, BOOL cleanlist);\n+\n+/* The following definitions come from profile/profile.c  */\n+\n+void set_profile_level(int level, struct server_id src);\n+BOOL profile_setup(struct messaging_context *msg_ctx, BOOL rdonly);\n+\n+/* The following definitions come from registry/reg_api.c  */\n+\n+WERROR reg_openhive(TALLOC_CTX *mem_ctx, const char *hive,\n+\t\t    uint32 desired_access,\n+\t\t    const struct nt_user_token *token,\n+\t\t    struct registry_key **pkey);\n+WERROR reg_openkey(TALLOC_CTX *mem_ctx, struct registry_key *parent,\n+\t\t   const char *name, uint32 desired_access,\n+\t\t   struct registry_key **pkey);\n+WERROR reg_enumkey(TALLOC_CTX *mem_ctx, struct registry_key *key,\n+\t\t   uint32 idx, char **name, NTTIME *last_write_time);\n+WERROR reg_enumvalue(TALLOC_CTX *mem_ctx, struct registry_key *key,\n+\t\t     uint32 idx, char **pname, struct registry_value **pval);\n+WERROR reg_queryvalue(TALLOC_CTX *mem_ctx, struct registry_key *key,\n+\t\t      const char *name, struct registry_value **pval);\n+WERROR reg_queryinfokey(struct registry_key *key, uint32_t  \n*num_subkeys,\n+\t\t\tuint32_t *max_subkeylen, uint32_t *max_subkeysize,\n+\t\t\tuint32_t *num_values, uint32_t *max_valnamelen,\n+\t\t\tuint32_t *max_valbufsize, uint32_t *secdescsize,\n+\t\t\tNTTIME *last_changed_time);\n+WERROR reg_createkey(TALLOC_CTX *ctx, struct registry_key *parent,\n+\t\t     const char *subkeypath, uint32 desired_access,\n+\t\t     struct registry_key **pkey,\n+\t\t     enum winreg_CreateAction *paction);\n+WERROR reg_deletekey(struct registry_key *parent, const char *path);\n+WERROR reg_setvalue(struct registry_key *key, const char *name,\n+\t\t    const struct registry_value *val);\n+WERROR reg_deletevalue(struct registry_key *key, const char *name);\n+WERROR reg_open_path(TALLOC_CTX *mem_ctx, const char *orig_path,\n+\t\t     uint32 desired_access, const struct nt_user_token *token,\n+\t\t     struct registry_key **pkey);\n+\n+/* The following definitions come from registry/reg_cachehook.c  */\n+\n+BOOL reghook_cache_init( void );\n+BOOL reghook_cache_add( REGISTRY_HOOK *hook );\n+REGISTRY_HOOK* reghook_cache_find( const char *keyname );\n+void reghook_dump_cache( int debuglevel );\n+\n+/* The following definitions come from registry/reg_db.c  */\n+\n+BOOL regdb_init( void );\n+WERROR regdb_open( void );\n+int regdb_close( void );\n+BOOL regdb_store_keys( const char *key, REGSUBKEY_CTR *ctr );\n+int regdb_fetch_keys( const char* key, REGSUBKEY_CTR *ctr );\n+int regdb_fetch_values( const char* key, REGVAL_CTR *values );\n+BOOL regdb_store_values( const char *key, REGVAL_CTR *values );\n+void normalize_dbkey(char *key);\n+\n+/* The following definitions come from registry/reg_dynamic.c  */\n+\n+int fetch_dynamic_reg_values( REGISTRY_KEY *key, REGVAL_CTR *val );\n+BOOL check_dynamic_reg_values( REGISTRY_KEY *key );\n+\n+/* The following definitions come from registry/reg_eventlog.c  */\n+\n+BOOL eventlog_init_keys( void );\n+BOOL eventlog_add_source( const char *eventlog, const char *sourcename,\n+\t\t\t  const char *messagefile );\n+\n+/* The following definitions come from registry/reg_frontend.c  */\n+\n+BOOL init_registry( void );\n+WERROR regkey_open_internal( TALLOC_CTX *ctx, REGISTRY_KEY **regkey,\n+\t\t\t     const char *path,\n+                             const struct nt_user_token *token,\n+\t\t\t     uint32 access_desired );\n+WERROR regkey_set_secdesc(REGISTRY_KEY *key,\n+\t\t\t  struct security_descriptor *psecdesc);\n+WERROR reg_create_path(TALLOC_CTX *mem_ctx, const char *orig_path,\n+\t\t       uint32 desired_access,\n+\t\t       const struct nt_user_token *token,\n+\t\t       enum winreg_CreateAction *paction,\n+\t\t       struct registry_key **pkey);\n+WERROR reg_delete_path(const struct nt_user_token *token,\n+\t\t       const char *orig_path);\n+\n+/* The following definitions come from registry/ \nreg_frontend_hilvl.c  */\n+\n+BOOL store_reg_keys( REGISTRY_KEY *key, REGSUBKEY_CTR *subkeys );\n+BOOL store_reg_values( REGISTRY_KEY *key, REGVAL_CTR *val );\n+int fetch_reg_keys( REGISTRY_KEY *key, REGSUBKEY_CTR *subkey_ctr );\n+int fetch_reg_values( REGISTRY_KEY *key, REGVAL_CTR *val );\n+BOOL regkey_access_check( REGISTRY_KEY *key, uint32 requested,  \nuint32 *granted,\n+\t\t\t  const struct nt_user_token *token );\n+WERROR regkey_open_onelevel( TALLOC_CTX *mem_ctx, struct  \nregistry_key *parent,\n+\t\t\t     const char *name,\n+\t\t\t     const struct nt_user_token *token,\n+\t\t\t     uint32 access_desired,\n+\t\t\t     struct registry_key **pregkey);\n+WERROR regkey_get_secdesc(TALLOC_CTX *mem_ctx, REGISTRY_KEY *key,\n+\t\t\t  struct security_descriptor **psecdesc);\n+\n+/* The following definitions come from registry/reg_objects.c  */\n+\n+WERROR regsubkey_ctr_addkey( REGSUBKEY_CTR *ctr, const char *keyname );\n+int regsubkey_ctr_delkey( REGSUBKEY_CTR *ctr, const char *keyname );\n+BOOL regsubkey_ctr_key_exists( REGSUBKEY_CTR *ctr, const char  \n*keyname );\n+int regsubkey_ctr_numkeys( REGSUBKEY_CTR *ctr );\n+char* regsubkey_ctr_specific_key( REGSUBKEY_CTR *ctr, uint32  \nkey_index );\n+int regval_ctr_numvals( REGVAL_CTR *ctr );\n+REGISTRY_VALUE* dup_registry_value( REGISTRY_VALUE *val );\n+void free_registry_value( REGISTRY_VALUE *val );\n+uint8* regval_data_p( REGISTRY_VALUE *val );\n+uint32 regval_size( REGISTRY_VALUE *val );\n+char* regval_name( REGISTRY_VALUE *val );\n+uint32 regval_type( REGISTRY_VALUE *val );\n+REGISTRY_VALUE* regval_ctr_specific_value( REGVAL_CTR *ctr, uint32  \nidx );\n+BOOL regval_ctr_key_exists( REGVAL_CTR *ctr, const char *value );\n+int regval_ctr_addvalue( REGVAL_CTR *ctr, const char *name, uint16  \ntype,\n+                         const char *data_p, size_t size );\n+int regval_ctr_copyvalue( REGVAL_CTR *ctr, REGISTRY_VALUE *val );\n+int regval_ctr_delvalue( REGVAL_CTR *ctr, const char *name );\n+REGISTRY_VALUE* regval_ctr_getvalue( REGVAL_CTR *ctr, const char  \n*name );\n+uint32 regval_dword( REGISTRY_VALUE *val );\n+char* regval_sz( REGISTRY_VALUE *val );\n+\n+/* The following definitions come from registry/reg_perfcount.c  */\n+\n+void perfcount_init_keys( void );\n+uint32 reg_perfcount_get_base_index(void);\n+uint32 reg_perfcount_get_last_counter(uint32 base_index);\n+uint32 reg_perfcount_get_last_help(uint32 last_counter);\n+uint32 reg_perfcount_get_counter_help(uint32 base_index, char  \n**retbuf);\n+uint32 reg_perfcount_get_counter_names(uint32 base_index, char  \n**retbuf);\n+BOOL _reg_perfcount_get_counter_data(TDB_DATA key, TDB_DATA *data);\n+BOOL _reg_perfcount_get_instance_info(PERF_INSTANCE_DEFINITION *inst,\n+\t\t\t\t      prs_struct *ps,\n+\t\t\t\t      int instId,\n+\t\t\t\t      PERF_OBJECT_TYPE *obj,\n+\t\t\t\t      TDB_CONTEXT *names);\n+BOOL _reg_perfcount_add_instance(PERF_OBJECT_TYPE *obj,\n+\t\t\t\t prs_struct *ps,\n+\t\t\t\t int instInd,\n+\t\t\t\t TDB_CONTEXT *names);\n+uint32 reg_perfcount_get_perf_data_block(uint32 base_index,\n+\t\t\t\t\t prs_struct *ps,\n+\t\t\t\t\t PERF_DATA_BLOCK *block,\n+\t\t\t\t\t const char *object_ids);\n+WERROR reg_perfcount_get_hkpd(prs_struct *ps, uint32 max_buf_size,  \nuint32 *outbuf_len, const char *object_ids);\n+\n+/* The following definitions come from registry/reg_printing.c  */\n+\n+\n+/* The following definitions come from registry/reg_shares.c  */\n+\n+\n+/* The following definitions come from registry/reg_smbconf.c  */\n+\n+\n+/* The following definitions come from registry/reg_util.c  */\n+\n+BOOL reg_split_path( char *path, char **base, char **new_path );\n+BOOL reg_split_key( char *path, char **base, char **key );\n+void normalize_reg_path( pstring keyname );\n+char* reg_remaining_path( const char *key );\n+int regval_convert_multi_sz( uint16 *multi_string, size_t byte_len,  \nchar ***values );\n+size_t regval_build_multi_sz( char **values, uint16 **buffer );\n+\n+/* The following definitions come from registry/regfio.c  */\n+\n+\n+/* The following definitions come from rpc_client/cli_ds.c  */\n+\n+NTSTATUS rpccli_ds_getprimarydominfo(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     uint16 level, DS_DOMINFO_CTR *ctr);\n+NTSTATUS rpccli_ds_enum_domain_trusts(struct rpc_pipe_client *cli,\n+\t\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t\t      const char *server, uint32 flags,\n+\t\t\t\t      struct ds_domain_trust **trusts,\n+\t\t\t\t      uint32 *num_domains);\n+\n+/* The following definitions come from rpc_client/cli_lsarpc.c  */\n+\n+NTSTATUS rpccli_lsa_open_policy(struct rpc_pipe_client *cli,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tBOOL sec_qos, uint32 des_access,\n+\t\t\t\tPOLICY_HND *pol);\n+NTSTATUS rpccli_lsa_open_policy2(struct rpc_pipe_client *cli,\n+\t\t\t\t TALLOC_CTX *mem_ctx, BOOL sec_qos,\n+\t\t\t\t uint32 des_access, POLICY_HND *pol);\n+NTSTATUS rpccli_lsa_lookup_sids_all(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *pol,\n+\t\t\t\t    int num_sids,\n+\t\t\t\t    const DOM_SID *sids,\n+\t\t\t\t    char ***domains,\n+\t\t\t\t    char ***names,\n+\t\t\t\t    enum lsa_SidType **types);\n+NTSTATUS rpccli_lsa_lookup_sids(struct rpc_pipe_client *cli,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tPOLICY_HND *pol, int num_sids,\n+\t\t\t\tconst DOM_SID *sids,\n+\t\t\t\tchar ***domains,\n+\t\t\t\tchar ***names,\n+\t\t\t\tenum lsa_SidType **types);\n+NTSTATUS rpccli_lsa_lookup_names(struct rpc_pipe_client *cli,\n+\t\t\t\t TALLOC_CTX *mem_ctx,\n+\t\t\t\t POLICY_HND *pol, int num_names,\n+\t\t\t\t const char **names,\n+\t\t\t\t const char ***dom_names,\n+\t\t\t\t DOM_SID **sids,\n+\t\t\t\t enum lsa_SidType **types);\n+NTSTATUS rpccli_lsa_query_info_policy_new(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t  POLICY_HND *pol, uint16 info_class,\n+\t\t\t\t\t  LSA_INFO_CTR *ctr) ;\n+NTSTATUS rpccli_lsa_query_info_policy2_new(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t  POLICY_HND *pol, uint16 info_class,\n+\t\t\t\t\t  LSA_INFO_CTR2 *ctr) ;\n+NTSTATUS rpccli_lsa_query_info_policy(struct rpc_pipe_client *cli,\n+\t\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t\t      POLICY_HND *pol, uint16 info_class,\n+\t\t\t\t      char **domain_name, DOM_SID **domain_sid);\n+NTSTATUS rpccli_lsa_query_info_policy2(struct rpc_pipe_client *cli,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       POLICY_HND *pol, uint16 info_class,\n+\t\t\t\t       char **domain_name, char **dns_name,\n+\t\t\t\t       char **forest_name,\n+\t\t\t\t       struct GUID **domain_guid,\n+\t\t\t\t       DOM_SID **domain_sid);\n+NTSTATUS rpccli_lsa_set_info_policy(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *pol, uint16 info_class,\n+\t\t\t\t    LSA_INFO_CTR ctr) ;\n+NTSTATUS rpccli_lsa_enum_trust_dom(struct rpc_pipe_client *cli,\n+\t\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t\t   POLICY_HND *pol, uint32 *enum_ctx,\n+\t\t\t\t   uint32 *num_domains,\n+\t\t\t\t   char ***domain_names, DOM_SID **domain_sids);\n+NTSTATUS rpccli_lsa_enum_privilege(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                POLICY_HND *pol, uint32  \n*enum_context, uint32 pref_max_length,\n+\t\t\t\tuint32 *count, char ***privs_name, uint32 **privs_high, uint32  \n**privs_low);\n+NTSTATUS rpccli_lsa_get_dispname(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t      POLICY_HND *pol, const char *name,\n+\t\t\t      uint16 lang_id, uint16 lang_id_sys,\n+\t\t\t      fstring description, uint16 *lang_id_desc);\n+NTSTATUS rpccli_lsa_enum_sids(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                POLICY_HND *pol, uint32 *enum_ctx,  \nuint32 pref_max_length,\n+                                uint32 *num_sids, DOM_SID **sids);\n+NTSTATUS rpccli_lsa_create_account(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                             POLICY_HND *dom_pol, DOM_SID *sid,  \nuint32 desired_access,\n+\t\t\t     POLICY_HND *user_pol);\n+NTSTATUS rpccli_lsa_open_account(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                             POLICY_HND *dom_pol, DOM_SID *sid,  \nuint32 des_access,\n+\t\t\t     POLICY_HND *user_pol);\n+NTSTATUS rpccli_lsa_enum_privsaccount(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                             POLICY_HND *pol, uint32 *count,  \nLUID_ATTR **set);\n+NTSTATUS rpccli_lsa_lookup_priv_value(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t POLICY_HND *pol, const char *name, LUID *luid);\n+NTSTATUS rpccli_lsa_query_secobj(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t      POLICY_HND *pol, uint32 sec_info,\n+\t\t\t      SEC_DESC_BUF **psdb);\n+NTSTATUS rpccli_lsa_enum_account_rights(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *pol, DOM_SID *sid,\n+\t\t\t\t     uint32 *count, char ***priv_names);\n+NTSTATUS rpccli_lsa_add_account_rights(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *pol, DOM_SID sid,\n+\t\t\t\t\tuint32 count, const char **privs_name);\n+NTSTATUS rpccli_lsa_remove_account_rights(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t       POLICY_HND *pol, DOM_SID sid, BOOL removeall,\n+\t\t\t\t       uint32 count, const char **privs_name);\n+BOOL fetch_domain_sid( char *domain, char *remote_machine, DOM_SID  \n*psid);\n+NTSTATUS rpccli_lsa_open_trusted_domain(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *pol, DOM_SID *dom_sid, uint32 access_mask,\n+\t\t\t\t     POLICY_HND *trustdom_pol);\n+NTSTATUS rpccli_lsa_query_trusted_domain_info(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t   POLICY_HND *pol,\n+\t\t\t\t\t   uint16 info_class,\n+\t\t\t\t\t   LSA_TRUSTED_DOMAIN_INFO **info);\n+NTSTATUS rpccli_lsa_open_trusted_domain_by_name(struct  \nrpc_pipe_client *cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tPOLICY_HND *pol, const char *name, uint32 access_mask,\n+\t\t\t\t\t\tPOLICY_HND *trustdom_pol);\n+NTSTATUS rpccli_lsa_query_trusted_domain_info_by_sid(struct  \nrpc_pipe_client *cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\t  POLICY_HND *pol,\n+\t\t\t\t\t\t  uint16 info_class, DOM_SID *dom_sid,\n+\t\t\t\t\t\t  LSA_TRUSTED_DOMAIN_INFO **info);\n+NTSTATUS rpccli_lsa_query_trusted_domain_info_by_name(struct  \nrpc_pipe_client *cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\t   POLICY_HND *pol,\n+\t\t\t\t\t\t   uint16 info_class, const char *domain_name,\n+\t\t\t\t\t\t   LSA_TRUSTED_DOMAIN_INFO **info);\n+NTSTATUS cli_lsa_query_domain_info_policy(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t  POLICY_HND *pol,\n+\t\t\t\t\t  uint16 info_class, LSA_DOM_INFO_UNION **info);\n+\n+/* The following definitions come from rpc_client/cli_netlogon.c  */\n+\n+NTSTATUS rpccli_netlogon_setup_creds(struct rpc_pipe_client *cli,\n+\t\t\t\tconst char *server_name,\n+\t\t\t\tconst char *domain,\n+\t\t\t\tconst char *clnt_name,\n+\t\t\t\tconst char *machine_account,\n+\t\t\t\tconst unsigned char machine_pwd[16],\n+\t\t\t\tuint32 sec_chan_type,\n+\t\t\t\tuint32 *neg_flags_inout);\n+NTSTATUS rpccli_netlogon_logon_ctrl2(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                  uint32 query_level);\n+WERROR rpccli_netlogon_getanydcname(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx, const char *mydcname,\n+\t\t\t\t    const char *domainname, fstring newdcname);\n+NTSTATUS rpccli_netlogon_getdcname(struct rpc_pipe_client *cli,\n+\t\t\t\t   TALLOC_CTX *mem_ctx, const char *mydcname,\n+\t\t\t\t   const char *domainname, fstring newdcname);\n+WERROR rpccli_netlogon_dsr_getdcname(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     const char *server_name,\n+\t\t\t\t     const char *domain_name,\n+\t\t\t\t     struct GUID *domain_guid,\n+\t\t\t\t     struct GUID *site_guid,\n+\t\t\t\t     uint32_t flags,\n+\t\t\t\t     struct DS_DOMAIN_CONTROLLER_INFO **info_out);\n+WERROR rpccli_netlogon_dsr_getdcnameex(struct rpc_pipe_client *cli,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       const char *server_name,\n+\t\t\t\t       const char *domain_name,\n+\t\t\t\t       struct GUID *domain_guid,\n+\t\t\t\t       const char *site_name,\n+\t\t\t\t       uint32_t flags,\n+\t\t\t\t       struct DS_DOMAIN_CONTROLLER_INFO **info_out);\n+WERROR rpccli_netlogon_dsr_getdcnameex2(struct rpc_pipe_client *cli,\n+\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\tconst char *server_name,\n+\t\t\t\t\tconst char *client_account,\n+\t\t\t\t\tuint32 mask,\n+\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\tstruct GUID *domain_guid,\n+\t\t\t\t\tconst char *site_name,\n+\t\t\t\t\tuint32_t flags,\n+\t\t\t\t\tstruct DS_DOMAIN_CONTROLLER_INFO **info_out);\n+WERROR rpccli_netlogon_dsr_getsitename(struct rpc_pipe_client *cli,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       const char *computer_name,\n+\t\t\t\t       char **site_name);\n+NTSTATUS rpccli_netlogon_sam_sync(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                               uint32 database_id, uint32 next_rid,  \nuint32 *num_deltas,\n+                               SAM_DELTA_HDR **hdr_deltas,\n+                               SAM_DELTA_CTR **deltas);\n+NTSTATUS rpccli_netlogon_sam_deltas(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                 uint32 database_id, uint64 seqnum,\n+                                 uint32 *num_deltas,\n+                                 SAM_DELTA_HDR **hdr_deltas,\n+                                 SAM_DELTA_CTR **deltas);\n+NTSTATUS rpccli_netlogon_sam_logon(struct rpc_pipe_client *cli,\n+\t\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t\t   uint32 logon_parameters,\n+\t\t\t\t   const char *domain,\n+\t\t\t\t   const char *username,\n+\t\t\t\t   const char *password,\n+\t\t\t\t   const char *workstation,\n+\t\t\t\t   int logon_type);\n+NTSTATUS rpccli_netlogon_sam_network_logon(struct rpc_pipe_client *cli,\n+\t\t\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t   uint32 logon_parameters,\n+\t\t\t\t\t   const char *server,\n+\t\t\t\t\t   const char *username,\n+\t\t\t\t\t   const char *domain,\n+\t\t\t\t\t   const char *workstation,\n+\t\t\t\t\t   const uint8 chal[8],\n+\t\t\t\t\t   DATA_BLOB lm_response,\n+\t\t\t\t\t   DATA_BLOB nt_response,\n+\t\t\t\t\t   NET_USER_INFO_3 *info3);\n+NTSTATUS rpccli_netlogon_sam_network_logon_ex(struct rpc_pipe_client  \n*cli,\n+\t\t\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t      uint32 logon_parameters,\n+\t\t\t\t\t      const char *server,\n+\t\t\t\t\t      const char *username,\n+\t\t\t\t\t      const char *domain,\n+\t\t\t\t\t      const char *workstation,\n+\t\t\t\t\t      const uint8 chal[8],\n+\t\t\t\t\t      DATA_BLOB lm_response,\n+\t\t\t\t\t      DATA_BLOB nt_response,\n+\t\t\t\t\t      NET_USER_INFO_3 *info3);\n+NTSTATUS rpccli_net_srv_pwset(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t   const char *machine_name, const uint8 hashed_mach_pwd[16]);\n+\n+/* The following definitions come from rpc_client/cli_pipe.c  */\n+\n+NTSTATUS rpc_api_pipe_req(struct rpc_pipe_client *cli,\n+\t\t\tuint8 op_num,\n+\t\t\tprs_struct *in_data,\n+\t\t\tprs_struct *out_data);\n+struct rpc_pipe_client *cli_rpc_pipe_open_noauth(struct cli_state  \n*cli, int pipe_idx, NTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_ntlmssp(struct cli_state  \n*cli,\n+\t\t\t\t\t\tint pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+\t\t\t\t\t\tconst char *domain,\n+\t\t\t\t\t\tconst char *username,\n+\t\t\t\t\t\tconst char *password,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_spnego_ntlmssp(struct  \ncli_state *cli,\n+\t\t\t\t\t\tint pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+\t\t\t\t\t\tconst char *domain,\n+\t\t\t\t\t\tconst char *username,\n+\t\t\t\t\t\tconst char *password,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *get_schannel_session_key(struct cli_state *cli,\n+\t\t\t\t\t\t\tconst char *domain,\n+\t\t\t\t\t\t\tuint32 *pneg_flags,\n+\t\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_schannel_with_key(struct  \ncli_state *cli,\n+\t\t\t\t\tint pipe_idx,\n+\t\t\t\t\tenum pipe_auth_level auth_level,\n+\t\t\t\t\tconst char *domain,\n+\t\t\t\t\tconst struct dcinfo *pdc,\n+\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_ntlmssp_auth_schannel \n(struct cli_state *cli,\n+                                                int pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+                                                const char *domain,\n+\t\t\t\t\t\tconst char *username,\n+\t\t\t\t\t\tconst char *password,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_schannel(struct cli_state  \n*cli,\n+                                                int pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+                                                const char *domain,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+struct rpc_pipe_client *cli_rpc_pipe_open_krb5(struct cli_state *cli,\n+\t\t\t\t\t\tint pipe_idx,\n+\t\t\t\t\t\tenum pipe_auth_level auth_level,\n+\t\t\t\t\t\tconst char *service_princ,\n+\t\t\t\t\t\tconst char *username,\n+\t\t\t\t\t\tconst char *password,\n+\t\t\t\t\t\tNTSTATUS *perr);\n+\n+/* The following definitions come from rpc_client/cli_reg.c  */\n+\n+NTSTATUS rpccli_winreg_Connect(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                         uint32 reg_type, uint32 access_mask,\n+                         POLICY_HND *reg_hnd);\n+uint32 reg_init_regval_buffer( REGVAL_BUFFER *buf2, REGISTRY_VALUE  \n*val );\n+\n+/* The following definitions come from rpc_client/cli_samr.c  */\n+\n+NTSTATUS rpccli_samr_connect(struct rpc_pipe_client *cli, TALLOC_CTX  \n*mem_ctx,\n+\t\t\t     uint32 access_mask, POLICY_HND *connect_pol);\n+NTSTATUS rpccli_samr_connect4(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t   uint32 access_mask, POLICY_HND *connect_pol);\n+NTSTATUS rpccli_samr_close(struct rpc_pipe_client *cli, TALLOC_CTX  \n*mem_ctx,\n+\t\t\t   POLICY_HND *connect_pol);\n+NTSTATUS rpccli_samr_open_domain(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t POLICY_HND *connect_pol, uint32 access_mask,\n+\t\t\t\t const DOM_SID *domain_sid,\n+\t\t\t\t POLICY_HND *domain_pol);\n+NTSTATUS rpccli_samr_open_user(struct rpc_pipe_client *cli,\n+\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t       POLICY_HND *domain_pol, uint32 access_mask,\n+\t\t\t       uint32 user_rid, POLICY_HND *user_pol);\n+NTSTATUS rpccli_samr_open_group(struct rpc_pipe_client *cli,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tPOLICY_HND *domain_pol, uint32 access_mask,\n+\t\t\t\tuint32 group_rid, POLICY_HND *group_pol);\n+NTSTATUS rpccli_samr_create_dom_group(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t   POLICY_HND *domain_pol,\n+\t\t\t\t   const char *group_name,\n+\t\t\t\t   uint32 access_mask, POLICY_HND *group_pol);\n+NTSTATUS rpccli_samr_add_groupmem(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t       POLICY_HND *group_pol, uint32 rid);\n+NTSTATUS rpccli_samr_del_groupmem(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t       POLICY_HND *group_pol, uint32 rid);\n+NTSTATUS rpccli_samr_query_userinfo(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    const POLICY_HND *user_pol,\n+\t\t\t\t    uint16 switch_value,\n+\t\t\t\t    SAM_USERINFO_CTR **ctr);\n+NTSTATUS rpccli_samr_set_groupinfo(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\tPOLICY_HND *group_pol, GROUP_INFO_CTR *ctr);\n+NTSTATUS rpccli_samr_query_groupinfo(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                  POLICY_HND *group_pol, uint32  \ninfo_level,\n+                                  GROUP_INFO_CTR **ctr);\n+NTSTATUS rpccli_samr_query_usergroups(struct rpc_pipe_client *cli,\n+\t\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t\t      POLICY_HND *user_pol,\n+\t\t\t\t      uint32 *num_groups,\n+\t\t\t\t      DOM_GID **gid);\n+NTSTATUS rpccli_samr_set_aliasinfo(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\tPOLICY_HND *alias_pol, ALIAS_INFO_CTR *ctr);\n+NTSTATUS rpccli_samr_query_useraliases(struct rpc_pipe_client *cli,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       POLICY_HND *dom_pol, uint32 num_sids,\n+\t\t\t\t       DOM_SID2 *sid,\n+\t\t\t\t       uint32 *num_aliases, uint32 **als_rids);\n+NTSTATUS rpccli_samr_query_groupmem(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *group_pol, uint32 *num_mem,\n+\t\t\t\t    uint32 **rid, uint32 **attr);\n+NTSTATUS rpccli_samr_enum_dom_users(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                 POLICY_HND *pol, uint32 *start_idx,  \nuint32 acb_mask,\n+                                 uint32 size, char ***dom_users,  \nuint32 **rids,\n+                                 uint32 *num_dom_users);\n+NTSTATUS rpccli_samr_enum_dom_groups(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *pol, uint32 *start_idx,\n+\t\t\t\t     uint32 size, struct acct_info **dom_groups,\n+\t\t\t\t     uint32 *num_dom_groups);\n+NTSTATUS rpccli_samr_enum_als_groups(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *pol, uint32 *start_idx,\n+\t\t\t\t     uint32 size, struct acct_info **dom_aliases,\n+\t\t\t\t     uint32 *num_dom_aliases);\n+NTSTATUS rpccli_samr_query_aliasmem(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *alias_pol, uint32 *num_mem,\n+\t\t\t\t    DOM_SID **sids);\n+NTSTATUS rpccli_samr_open_alias(struct rpc_pipe_client *cli,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tPOLICY_HND *domain_pol, uint32 access_mask,\n+\t\t\t\tuint32 alias_rid, POLICY_HND *alias_pol);\n+NTSTATUS rpccli_samr_create_dom_alias(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t   POLICY_HND *domain_pol, const char *name,\n+\t\t\t\t   POLICY_HND *alias_pol);\n+NTSTATUS rpccli_samr_add_aliasmem(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t       POLICY_HND *alias_pol, DOM_SID *member);\n+NTSTATUS rpccli_samr_del_aliasmem(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t       POLICY_HND *alias_pol, DOM_SID *member);\n+NTSTATUS rpccli_samr_query_alias_info(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t   POLICY_HND *alias_pol, uint16 switch_value,\n+\t\t\t\t   ALIAS_INFO_CTR *ctr);\n+NTSTATUS rpccli_samr_query_dom_info(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *domain_pol,\n+\t\t\t\t    uint16 switch_value,\n+\t\t\t\t    SAM_UNK_CTR *ctr);\n+NTSTATUS rpccli_samr_query_dom_info2(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *domain_pol,\n+\t\t\t\t     uint16 switch_value,\n+\t\t\t\t     SAM_UNK_CTR *ctr);\n+NTSTATUS rpccli_samr_set_domain_info(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *domain_pol,\n+\t\t\t\t     uint16 switch_value,\n+\t\t\t\t     SAM_UNK_CTR *ctr);\n+NTSTATUS rpccli_samr_chgpasswd_user(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    const char *username,\n+\t\t\t\t    const char *newpassword,\n+\t\t\t\t    const char *oldpassword );\n+NTSTATUS rpccli_samr_chng_pswd_auth_crap(struct rpc_pipe_client *cli,\n+\t\t\t\t\t TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t const char *username,\n+\t\t\t\t\t DATA_BLOB new_nt_password,\n+\t\t\t\t\t DATA_BLOB old_nt_hash_enc,\n+\t\t\t\t\t DATA_BLOB new_lm_password,\n+\t\t\t\t\t DATA_BLOB old_lm_hash_enc);\n+NTSTATUS rpccli_samr_chgpasswd3(struct rpc_pipe_client *cli,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tconst char *username,\n+\t\t\t\tconst char *newpassword,\n+\t\t\t\tconst char *oldpassword,\n+\t\t\t\tSAM_UNK_INFO_1 *info,\n+\t\t\t\tSAMR_CHANGE_REJECT *reject);\n+void get_query_dispinfo_params(int loop_count, uint32 *max_entries,\n+\t\t\t       uint32 *max_size);\n+NTSTATUS rpccli_samr_query_dispinfo(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *domain_pol, uint32 *start_idx,\n+\t\t\t\t    uint16 switch_value, uint32 *num_entries,\n+\t\t\t\t    uint32 max_entries, uint32 max_size,\n+\t\t\t\t    SAM_DISPINFO_CTR *ctr);\n+NTSTATUS rpccli_samr_query_dispinfo2(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *domain_pol, uint32 *start_idx,\n+\t\t\t\t     uint16 switch_value, uint32 *num_entries,\n+\t\t\t\t     uint32 max_entries, uint32 max_size,\n+\t\t\t\t     SAM_DISPINFO_CTR *ctr);\n+NTSTATUS rpccli_samr_query_dispinfo3(struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *domain_pol, uint32 *start_idx,\n+\t\t\t\t     uint16 switch_value, uint32 *num_entries,\n+\t\t\t\t     uint32 max_entries, uint32 max_size,\n+\t\t\t\t     SAM_DISPINFO_CTR *ctr);\n+NTSTATUS rpccli_samr_get_dispenum_index(struct rpc_pipe_client *cli,\n+\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\tPOLICY_HND *domain_pol,\n+\t\t\t\t\tuint16 switch_value,\n+\t\t\t\t\tconst char *name,\n+\t\t\t\t\tuint32 *idx);\n+NTSTATUS rpccli_samr_get_dispenum_index2(struct rpc_pipe_client *cli,\n+\t\t\t\t\t TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t POLICY_HND *domain_pol,\n+\t\t\t\t\t uint16 switch_value,\n+\t\t\t\t\t const char *name,\n+\t\t\t\t\t uint32 *idx);\n+NTSTATUS rpccli_samr_lookup_rids(struct rpc_pipe_client *cli,\n+\t\t\t\t TALLOC_CTX *mem_ctx,\n+\t\t\t\t POLICY_HND *domain_pol,\n+\t\t\t\t uint32 num_rids, uint32 *rids,\n+\t\t\t\t uint32 *num_names, char ***names,\n+\t\t\t\t uint32 **name_types);\n+NTSTATUS rpccli_samr_lookup_names(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                               POLICY_HND *domain_pol, uint32 flags,\n+                               uint32 num_names, const char **names,\n+                               uint32 *num_rids, uint32 **rids,\n+                               uint32 **rid_types);\n+NTSTATUS rpccli_samr_create_dom_user(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                  POLICY_HND *domain_pol, const char  \n*acct_name,\n+                                  uint32 acb_info, uint32 unknown,\n+                                  POLICY_HND *user_pol, uint32 *rid);\n+NTSTATUS rpccli_samr_set_userinfo(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                               const POLICY_HND *user_pol, uint16  \nswitch_value,\n+                               DATA_BLOB *sess_key, SAM_USERINFO_CTR  \n*ctr);\n+NTSTATUS rpccli_samr_set_userinfo2(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t   const POLICY_HND *user_pol, uint16 switch_value,\n+                                DATA_BLOB *sess_key,  \nSAM_USERINFO_CTR *ctr);\n+NTSTATUS rpccli_samr_delete_dom_group(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                  POLICY_HND *group_pol);\n+NTSTATUS rpccli_samr_delete_dom_alias(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                  POLICY_HND *alias_pol);\n+NTSTATUS rpccli_samr_delete_dom_user(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                  POLICY_HND *user_pol);\n+NTSTATUS rpccli_samr_remove_sid_foreign_domain(struct  \nrpc_pipe_client *cli,\n+\t\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t    POLICY_HND *user_pol,\n+\t\t\t\t\t    DOM_SID *sid);\n+NTSTATUS rpccli_samr_query_sec_obj(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                 POLICY_HND *user_pol, uint32 sec_info,\n+                                 TALLOC_CTX *ctx, SEC_DESC_BUF  \n**sec_desc_buf);\n+NTSTATUS rpccli_samr_set_sec_obj(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                 POLICY_HND *user_pol, uint32 sec_info,\n+                                 SEC_DESC_BUF *sec_desc_buf);\n+NTSTATUS rpccli_samr_get_dom_pwinfo(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t uint16 *min_pwd_length, uint32 *password_properties);\n+NTSTATUS rpccli_samr_get_usrdom_pwinfo(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t       POLICY_HND *pol, uint16 *min_pwd_length,\n+\t\t\t\t       uint32 *password_properties, uint32 *unknown1);\n+NTSTATUS rpccli_samr_lookup_domain(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\tPOLICY_HND *user_pol, char *domain_name,\n+\t\t\t\tDOM_SID *sid);\n+\n+/* The following definitions come from rpc_client/cli_spoolss.c  */\n+\n+WERROR rpccli_spoolss_open_printer_ex(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\tconst char *printername, const char *datatype, uint32  \naccess_required,\n+\t\t\t\tconst char *station, const char *username, POLICY_HND *pol);\n+WERROR rpccli_spoolss_close_printer(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t POLICY_HND *pol);\n+WERROR rpccli_spoolss_enum_printers(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t char *name, uint32 flags, uint32 level,\n+\t\t\t\t uint32 *num_printers, PRINTER_INFO_CTR *ctr);\n+WERROR rpccli_spoolss_enum_ports(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t      uint32 level, uint32 *num_ports, PORT_INFO_CTR *ctr);\n+WERROR rpccli_spoolss_getprinter(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t      POLICY_HND *pol, uint32 level,\n+\t\t\t      PRINTER_INFO_CTR *ctr);\n+WERROR rpccli_spoolss_setprinter(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t      POLICY_HND *pol, uint32 level,\n+\t\t\t      PRINTER_INFO_CTR *ctr, uint32 command);\n+WERROR rpccli_spoolss_getprinterdriver(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *pol, uint32 level,\n+\t\t\t\t    const char *env, int version, PRINTER_DRIVER_CTR *ctr);\n+WERROR rpccli_spoolss_enumprinterdrivers (struct rpc_pipe_client *cli,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       uint32 level, const char *env,\n+\t\t\t\t       uint32 *num_drivers,\n+\t\t\t\t       PRINTER_DRIVER_CTR *ctr);\n+WERROR rpccli_spoolss_getprinterdriverdir (struct rpc_pipe_client *cli,\n+\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\tuint32 level, char *env,\n+\t\t\t\t\tDRIVER_DIRECTORY_CTR *ctr);\n+WERROR rpccli_spoolss_addprinterdriver (struct rpc_pipe_client *cli,\n+\t\t\t\t     TALLOC_CTX *mem_ctx, uint32 level,\n+\t\t\t\t     PRINTER_DRIVER_CTR *ctr);\n+WERROR rpccli_spoolss_addprinterex (struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t uint32 level, PRINTER_INFO_CTR*ctr);\n+WERROR rpccli_spoolss_deleteprinterdriverex(struct rpc_pipe_client  \n*cli,\n+                                         TALLOC_CTX *mem_ctx, const  \nchar *arch,\n+                                         const char *driver, int  \nversion);\n+WERROR rpccli_spoolss_deleteprinterdriver (struct rpc_pipe_client *cli,\n+\t\t\t\t\tTALLOC_CTX *mem_ctx, const char *arch,\n+\t\t\t\t\tconst char *driver);\n+WERROR rpccli_spoolss_getprintprocessordirectory(struct  \nrpc_pipe_client *cli,\n+\t\t\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t      char *name, char *environment,\n+\t\t\t\t\t      fstring procdir);\n+WERROR rpccli_spoolss_addform(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t   POLICY_HND *handle, uint32 level, FORM *form);\n+WERROR rpccli_spoolss_setform(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t   POLICY_HND *handle, uint32 level,\n+\t\t\t   const char *form_name, FORM *form);\n+WERROR rpccli_spoolss_getform(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t   POLICY_HND *handle, const char *formname,\n+\t\t\t   uint32 level, FORM_1 *form);\n+WERROR rpccli_spoolss_deleteform(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t      POLICY_HND *handle, const char *form_name);\n+WERROR rpccli_spoolss_enumforms(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t     POLICY_HND *handle, int level, uint32 *num_forms,\n+\t\t\t     FORM_1 **forms);\n+WERROR rpccli_spoolss_enumjobs(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t    POLICY_HND *hnd, uint32 level, uint32 firstjob,\n+\t\t\t    uint32 num_jobs, uint32 *returned, JOB_INFO_CTR *ctr);\n+WERROR rpccli_spoolss_setjob(struct rpc_pipe_client *cli, TALLOC_CTX  \n*mem_ctx,\n+\t\t\t  POLICY_HND *hnd, uint32 jobid, uint32 level,\n+\t\t\t  uint32 command);\n+WERROR rpccli_spoolss_getjob(struct rpc_pipe_client *cli, TALLOC_CTX  \n*mem_ctx,\n+\t\t\t  POLICY_HND *hnd, uint32 jobid, uint32 level,\n+\t\t\t  JOB_INFO_CTR *ctr);\n+WERROR rpccli_spoolss_startpageprinter(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *hnd);\n+WERROR rpccli_spoolss_endpageprinter(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t  POLICY_HND *hnd);\n+WERROR rpccli_spoolss_startdocprinter(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t   POLICY_HND *hnd, char *docname,\n+\t\t\t\t   char *outputfile, char *datatype,\n+\t\t\t\t   uint32 *jobid);\n+WERROR rpccli_spoolss_enddocprinter(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t  POLICY_HND *hnd);\n+WERROR rpccli_spoolss_getprinterdata(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t  POLICY_HND *hnd, const char *valuename,\n+\t\t\t\t  REGISTRY_VALUE *value);\n+WERROR rpccli_spoolss_getprinterdataex(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *hnd, const char *keyname,\n+\t\t\t\t    const char *valuename,\n+\t\t\t\t    REGISTRY_VALUE *value);\n+WERROR rpccli_spoolss_setprinterdata(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t  POLICY_HND *hnd, REGISTRY_VALUE *value);\n+WERROR rpccli_spoolss_setprinterdataex(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *hnd, char *keyname,\n+\t\t\t\t    REGISTRY_VALUE *value);\n+WERROR rpccli_spoolss_enumprinterdata(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t   POLICY_HND *hnd, uint32 ndx,\n+\t\t\t\t   uint32 value_offered, uint32 data_offered,\n+\t\t\t\t   uint32 *value_needed, uint32 *data_needed,\n+\t\t\t\t   REGISTRY_VALUE *value);\n+WERROR rpccli_spoolss_enumprinterdataex(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *hnd, const char *keyname,\n+\t\t\t\t     REGVAL_CTR *ctr);\n+WERROR rpccli_spoolss_writeprinter(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\tPOLICY_HND *hnd, uint32 data_size, char *data,\n+\t\t\t\tuint32 *num_written);\n+WERROR rpccli_spoolss_deleteprinterdata(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t     POLICY_HND *hnd, char *valuename);\n+WERROR rpccli_spoolss_deleteprinterdataex(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t       POLICY_HND *hnd, char *keyname,\n+\t\t\t\t       char *valuename);\n+WERROR rpccli_spoolss_enumprinterkey(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t  POLICY_HND *hnd, const char *keyname,\n+\t\t\t\t  uint16 **keylist, uint32 *len);\n+WERROR rpccli_spoolss_deleteprinterkey(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *hnd, char *keyname);\n+\n+/* The following definitions come from rpc_client/ \ncli_spoolss_notify.c  */\n+\n+WERROR rpccli_spoolss_reply_open_printer(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t      const char *printer, uint32 printerlocal, uint32 type,\n+\t\t\t\t      POLICY_HND *handle);\n+WERROR rpccli_spoolss_reply_close_printer(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t       POLICY_HND *handle);\n+WERROR rpccli_spoolss_routerreplyprinter(struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+\t\t\t\t      POLICY_HND *pol, uint32 condition, uint32 change_id);\n+WERROR rpccli_spoolss_rrpcn(struct rpc_pipe_client *cli, TALLOC_CTX  \n*mem_ctx,\n+\t\t\t POLICY_HND *pol, uint32 notify_data_len,\n+\t\t\t SPOOL_NOTIFY_INFO_DATA *notify_data,\n+\t\t\t uint32 change_low, uint32 change_high);\n+WERROR rpccli_spoolss_rffpcnex(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+\t\t\t    POLICY_HND *pol, uint32 flags, uint32 options,\n+\t\t\t    const char *localmachine, uint32 printerlocal,\n+\t\t\t    SPOOL_NOTIFY_OPTION *option);\n+\n+/* The following definitions come from rpc_client/cli_svcctl.c  */\n+\n+const char* svc_status_string( uint32 state );\n+WERROR rpccli_svcctl_open_scm(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                              POLICY_HND *hSCM, uint32  \naccess_desired );\n+WERROR rpccli_svcctl_open_service( struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                POLICY_HND *hSCM, POLICY_HND *hService,\n+\t\t\t\tconst char *servicename, uint32 access_desired );\n+WERROR rpccli_svcctl_enumerate_services( struct rpc_pipe_client  \n*cli, TALLOC_CTX *mem_ctx,\n+                                      POLICY_HND *hSCM, uint32 type,  \nuint32 state,\n+\t\t\t\t      uint32 *returned, ENUM_SERVICES_STATUS **service_array  );\n+WERROR rpccli_svcctl_query_status( struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                POLICY_HND *hService, SERVICE_STATUS  \n*status );\n+WERROR rpccli_svcctl_query_config(struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                POLICY_HND *hService, SERVICE_CONFIG  \n*config );\n+WERROR rpccli_svcctl_start_service( struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                 POLICY_HND *hService,\n+                                 const char **parm_array, uint32  \nparmcount );\n+WERROR rpccli_svcctl_control_service( struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                   POLICY_HND *hService, uint32  \ncontrol,\n+\t\t\t\t   SERVICE_STATUS *status );\n+WERROR rpccli_svcctl_get_dispname( struct rpc_pipe_client *cli,  \nTALLOC_CTX *mem_ctx,\n+                                POLICY_HND *hService, fstring  \ndisplayname );\n+\n+/* The following definitions come from rpc_client/ndr.c  */\n+\n+NTSTATUS cli_do_rpc_ndr(struct rpc_pipe_client *cli, TALLOC_CTX  \n*mem_ctx,\n+\t\t\tint p_idx, int opnum, void *data,\n+\t\t\tndr_pull_flags_fn_t pull_fn, ndr_push_flags_fn_t push_fn);\n+\n+/* The following definitions come from rpc_parse/parse_buffer.c  */\n+\n+void rpcbuf_init(RPC_BUFFER *buffer, uint32 size, TALLOC_CTX *ctx);\n+BOOL prs_rpcbuffer(const char *desc, prs_struct *ps, int depth,  \nRPC_BUFFER *buffer);\n+BOOL prs_rpcbuffer_p(const char *desc, prs_struct *ps, int depth,  \nRPC_BUFFER **buffer);\n+BOOL rpcbuf_alloc_size(RPC_BUFFER *buffer, uint32 buffer_size);\n+void rpcbuf_move(RPC_BUFFER *src, RPC_BUFFER **dest);\n+uint32 rpcbuf_get_size(RPC_BUFFER *buffer);\n+BOOL smb_io_relstr(const char *desc, RPC_BUFFER *buffer, int depth,  \nUNISTR *string);\n+BOOL smb_io_relarraystr(const char *desc, RPC_BUFFER *buffer, int  \ndepth, uint16 **string);\n+BOOL smb_io_relsecdesc(const char *desc, RPC_BUFFER *buffer, int  \ndepth, SEC_DESC **secdesc);\n+uint32 size_of_relative_string(UNISTR *string);\n+\n+/* The following definitions come from rpc_parse/parse_ds.c  */\n+\n+BOOL ds_io_q_getprimdominfo( const char *desc, DS_Q_GETPRIMDOMINFO  \n*q_u, prs_struct *ps, int depth);\n+BOOL ds_io_r_getprimdominfo( const char *desc, DS_R_GETPRIMDOMINFO  \n*r_u, prs_struct *ps, int depth);\n+BOOL init_q_ds_enum_domain_trusts( DS_Q_ENUM_DOM_TRUSTS *q, const  \nchar *server, uint32 flags );\n+BOOL ds_io_q_enum_domain_trusts( const char *desc,  \nDS_Q_ENUM_DOM_TRUSTS *q_u, prs_struct *ps, int depth);\n+BOOL ds_io_r_enum_domain_trusts( const char *desc,  \nDS_R_ENUM_DOM_TRUSTS *r_u, prs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_eventlog.c  */\n+\n+BOOL prs_ev_open_unknown0( const char *desc, prs_struct *ps, int  \ndepth, EVENTLOG_OPEN_UNKNOWN0 *u );\n+BOOL eventlog_io_q_open_eventlog(const char *desc,  \nEVENTLOG_Q_OPEN_EVENTLOG *q_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+BOOL eventlog_io_r_open_eventlog(const char *desc,  \nEVENTLOG_R_OPEN_EVENTLOG *r_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+BOOL eventlog_io_q_get_num_records(const char *desc,  \nEVENTLOG_Q_GET_NUM_RECORDS *q_u,\n+\t\t\t\t   prs_struct *ps, int depth);\n+BOOL eventlog_io_r_get_num_records(const char *desc,  \nEVENTLOG_R_GET_NUM_RECORDS *r_u,\n+\t\t\t\t   prs_struct *ps, int depth);\n+BOOL eventlog_io_q_get_oldest_entry(const char *desc,  \nEVENTLOG_Q_GET_OLDEST_ENTRY *q_u,\n+\t\t\t\t    prs_struct *ps, int depth);\n+BOOL eventlog_io_r_get_oldest_entry(const char *desc,  \nEVENTLOG_R_GET_OLDEST_ENTRY *r_u,\n+\t\t\t\t    prs_struct *ps, int depth);\n+BOOL eventlog_io_q_read_eventlog(const char *desc,  \nEVENTLOG_Q_READ_EVENTLOG *q_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+BOOL eventlog_io_r_read_eventlog(const char *desc,\n+\t\t\t\t EVENTLOG_Q_READ_EVENTLOG *q_u,\n+\t\t\t\t EVENTLOG_R_READ_EVENTLOG *r_u,\n+\t\t\t\t prs_struct *ps,\n+\t\t\t\t int depth);\n+BOOL eventlog_io_q_clear_eventlog(const char *desc,  \nEVENTLOG_Q_CLEAR_EVENTLOG *q_u,\n+\t\t\t\t  prs_struct *ps, int depth);\n+BOOL eventlog_io_r_clear_eventlog(const char *desc,  \nEVENTLOG_R_CLEAR_EVENTLOG *r_u,\n+\t\t\t\t  prs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_lsa.c  */\n+\n+void init_lsa_trans_name(LSA_TRANS_NAME *trn, UNISTR2 *uni_name,\n+\t\t\t uint16 sid_name_use, const char *name, uint32 idx);\n+void init_lsa_trans_name2(LSA_TRANS_NAME2 *trn, UNISTR2 *uni_name,\n+\t\t\t uint16 sid_name_use, const char *name, uint32 idx);\n+void init_lsa_sec_qos(LSA_SEC_QOS *qos, uint16 imp_lev, uint8 ctxt,  \nuint8 eff);\n+void init_q_open_pol(LSA_Q_OPEN_POL *in, uint16 system_name,\n+\t\t     uint32 attributes, uint32 desired_access,\n+\t\t     LSA_SEC_QOS *qos);\n+BOOL lsa_io_q_open_pol(const char *desc, LSA_Q_OPEN_POL *in,  \nprs_struct *ps,\n+\t\t       int depth);\n+BOOL lsa_io_r_open_pol(const char *desc, LSA_R_OPEN_POL *out,  \nprs_struct *ps,\n+\t\t       int depth);\n+void init_q_open_pol2(LSA_Q_OPEN_POL2 *in, const char *server_name,\n+\t\t\tuint32 attributes, uint32 desired_access,\n+\t\t\tLSA_SEC_QOS *qos);\n+BOOL lsa_io_q_open_pol2(const char *desc, LSA_Q_OPEN_POL2 *in,  \nprs_struct *ps,\n+\t\t\tint depth);\n+BOOL lsa_io_r_open_pol2(const char *desc, LSA_R_OPEN_POL2 *out,  \nprs_struct *ps,\n+\t\t\tint depth);\n+void init_q_query_sec_obj(LSA_Q_QUERY_SEC_OBJ *in, const POLICY_HND  \n*hnd,\n+\t\t\t  uint32 sec_info);\n+BOOL lsa_io_q_query_sec_obj(const char *desc, LSA_Q_QUERY_SEC_OBJ *in,\n+\t\t\t    prs_struct *ps, int depth);\n+BOOL lsa_io_r_query_sec_obj(const char *desc, LSA_R_QUERY_SEC_OBJ  \n*out, prs_struct *ps, int depth);\n+void init_q_query(LSA_Q_QUERY_INFO *in, POLICY_HND *hnd, uint16  \ninfo_class);\n+BOOL lsa_io_q_query(const char *desc, LSA_Q_QUERY_INFO *in,  \nprs_struct *ps,\n+\t\t    int depth);\n+BOOL init_q_enum_trust_dom(LSA_Q_ENUM_TRUST_DOM * q_e, POLICY_HND *pol,\n+\t\t\t   uint32 enum_context, uint32 preferred_len);\n+BOOL lsa_io_q_enum_trust_dom(const char *desc, LSA_Q_ENUM_TRUST_DOM  \n*q_e,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_r_enum_trust_dom(TALLOC_CTX *ctx, LSA_R_ENUM_TRUST_DOM *out,\n+\t\t\t   uint32 enum_context, uint32 num_domains,\n+\t\t\t   struct trustdom_info **td);\n+BOOL lsa_io_domain_list( const char *desc, prs_struct *ps, int  \ndepth, DOMAIN_LIST *domlist );\n+BOOL lsa_io_r_enum_trust_dom(const char *desc, LSA_R_ENUM_TRUST_DOM  \n*out,\n+\t\t\t     prs_struct *ps, int depth);\n+BOOL lsa_io_dom_query_12(const char *desc, DOM_QUERY_12 *info,  \nprs_struct *ps, int depth);\n+void init_q_set(LSA_Q_SET_INFO *in, POLICY_HND *hnd, uint16  \ninfo_class, LSA_INFO_CTR ctr);\n+BOOL lsa_io_r_query(const char *desc, LSA_R_QUERY_INFO *out,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_q_set(const char *desc, LSA_Q_SET_INFO *in, prs_struct *ps,\n+\t\t  int depth);\n+BOOL lsa_io_r_set(const char *desc, LSA_R_SET_INFO *out, prs_struct  \n*ps, int depth);\n+void init_q_lookup_sids(TALLOC_CTX *mem_ctx, LSA_Q_LOOKUP_SIDS *q_l,\n+\t\t\tPOLICY_HND *hnd, int num_sids, const DOM_SID *sids,\n+\t\t\tuint16 level);\n+BOOL lsa_io_q_lookup_sids(const char *desc, LSA_Q_LOOKUP_SIDS *q_s,  \nprs_struct *ps,\n+\t\t\t  int depth);\n+BOOL lsa_io_q_lookup_sids2(const char *desc, LSA_Q_LOOKUP_SIDS2  \n*q_s, prs_struct *ps,\n+\t\t\t  int depth);\n+BOOL lsa_io_q_lookup_sids3(const char *desc, LSA_Q_LOOKUP_SIDS3  \n*q_s, prs_struct *ps,\n+\t\t\t  int depth);\n+BOOL lsa_io_r_lookup_sids(const char *desc, LSA_R_LOOKUP_SIDS *r_s,\n+\t\t\t  prs_struct *ps, int depth);\n+BOOL lsa_io_r_lookup_sids2(const char *desc, LSA_R_LOOKUP_SIDS2 *r_s,\n+\t\t\t  prs_struct *ps, int depth);\n+BOOL lsa_io_r_lookup_sids3(const char *desc, LSA_R_LOOKUP_SIDS3 *r_s,\n+\t\t\t  prs_struct *ps, int depth);\n+void init_q_lookup_names(TALLOC_CTX *mem_ctx, LSA_Q_LOOKUP_NAMES *q_l,\n+\t\t\t POLICY_HND *hnd, int num_names, const char **names);\n+BOOL lsa_io_q_lookup_names(const char *desc, LSA_Q_LOOKUP_NAMES *q_r,\n+\t\t\t   prs_struct *ps, int depth);\n+BOOL lsa_io_r_lookup_names(const char *desc, LSA_R_LOOKUP_NAMES  \n*out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_lookup_names2(const char *desc, LSA_Q_LOOKUP_NAMES2 *q_r,\n+\t\t\t   prs_struct *ps, int depth);\n+BOOL lsa_io_r_lookup_names2(const char *desc, LSA_R_LOOKUP_NAMES2  \n*out, prs_struct *ps, int depth);\n+BOOL smb_io_lsa_translated_sids3(const char *desc,  \nLSA_TRANSLATED_SID3 *q_r,\n+\t\t\t   prs_struct *ps, int depth);\n+BOOL lsa_io_q_lookup_names3(const char *desc, LSA_Q_LOOKUP_NAMES3 *q_r,\n+\t\t\t   prs_struct *ps, int depth);\n+BOOL lsa_io_r_lookup_names3(const char *desc, LSA_R_LOOKUP_NAMES3  \n*out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_lookup_names4(const char *desc, LSA_Q_LOOKUP_NAMES4 *q_r,\n+\t\t\t   prs_struct *ps, int depth);\n+BOOL lsa_io_r_lookup_names4(const char *desc, LSA_R_LOOKUP_NAMES4  \n*out, prs_struct *ps, int depth);\n+void init_lsa_q_close(LSA_Q_CLOSE *in, POLICY_HND *hnd);\n+BOOL lsa_io_q_close(const char *desc, LSA_Q_CLOSE *in, prs_struct  \n*ps, int depth);\n+BOOL lsa_io_r_close(const char *desc,  LSA_R_CLOSE *out, prs_struct  \n*ps, int depth);\n+BOOL lsa_io_q_open_secret(const char *desc, LSA_Q_OPEN_SECRET *in,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_r_open_secret(const char *desc, LSA_R_OPEN_SECRET *out,  \nprs_struct *ps, int depth);\n+void init_q_enum_privs(LSA_Q_ENUM_PRIVS *in, POLICY_HND *hnd, uint32  \nenum_context, uint32 pref_max_length);\n+BOOL lsa_io_q_enum_privs(const char *desc, LSA_Q_ENUM_PRIVS *in,  \nprs_struct *ps, int depth);\n+void init_lsa_r_enum_privs(LSA_R_ENUM_PRIVS *out, uint32 enum_context,\n+\t\t\t  uint32 count, LSA_PRIV_ENTRY *entries);\n+BOOL lsa_io_r_enum_privs(const char *desc, LSA_R_ENUM_PRIVS *out,  \nprs_struct *ps, int depth);\n+void init_lsa_priv_get_dispname(LSA_Q_PRIV_GET_DISPNAME *trn,  \nPOLICY_HND *hnd, const char *name, uint16 lang_id, uint16 lang_id_sys);\n+BOOL lsa_io_q_priv_get_dispname(const char *desc,  \nLSA_Q_PRIV_GET_DISPNAME *in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_priv_get_dispname(const char *desc,  \nLSA_R_PRIV_GET_DISPNAME *out, prs_struct *ps, int depth);\n+void init_lsa_q_enum_accounts(LSA_Q_ENUM_ACCOUNTS *trn, POLICY_HND  \n*hnd, uint32 enum_context, uint32 pref_max_length);\n+BOOL lsa_io_q_enum_accounts(const char *desc, LSA_Q_ENUM_ACCOUNTS  \n*in, prs_struct *ps, int depth);\n+void init_lsa_r_enum_accounts(LSA_R_ENUM_ACCOUNTS *out, uint32  \nenum_context);\n+BOOL lsa_io_r_enum_accounts(const char *desc, LSA_R_ENUM_ACCOUNTS  \n*out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_unk_get_connuser(const char *desc,  \nLSA_Q_UNK_GET_CONNUSER *in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_unk_get_connuser(const char *desc,  \nLSA_R_UNK_GET_CONNUSER *out, prs_struct *ps, int depth);\n+void init_lsa_q_create_account(LSA_Q_CREATEACCOUNT *trn, POLICY_HND  \n*hnd, DOM_SID *sid, uint32 desired_access);\n+BOOL lsa_io_q_create_account(const char *desc, LSA_Q_CREATEACCOUNT  \n*out, prs_struct *ps, int depth);\n+BOOL lsa_io_r_create_account(const char *desc, LSA_R_CREATEACCOUNT   \n*out, prs_struct *ps, int depth);\n+void init_lsa_q_open_account(LSA_Q_OPENACCOUNT *trn, POLICY_HND  \n*hnd, DOM_SID *sid, uint32 desired_access);\n+BOOL lsa_io_q_open_account(const char *desc, LSA_Q_OPENACCOUNT *out,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_r_open_account(const char *desc, LSA_R_OPENACCOUNT   \n*out, prs_struct *ps, int depth);\n+void init_lsa_q_enum_privsaccount(LSA_Q_ENUMPRIVSACCOUNT *trn,  \nPOLICY_HND *hnd);\n+BOOL lsa_io_q_enum_privsaccount(const char *desc,  \nLSA_Q_ENUMPRIVSACCOUNT *out, prs_struct *ps, int depth);\n+NTSTATUS init_lsa_r_enum_privsaccount(TALLOC_CTX *mem_ctx,  \nLSA_R_ENUMPRIVSACCOUNT *out, LUID_ATTR *set, uint32 count, uint32  \ncontrol);\n+BOOL lsa_io_r_enum_privsaccount(const char *desc,  \nLSA_R_ENUMPRIVSACCOUNT *out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_getsystemaccount(const char *desc,  \nLSA_Q_GETSYSTEMACCOUNT  *out, prs_struct *ps, int depth);\n+BOOL lsa_io_r_getsystemaccount(const char *desc,  \nLSA_R_GETSYSTEMACCOUNT  *out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_setsystemaccount(const char *desc,  \nLSA_Q_SETSYSTEMACCOUNT  *out, prs_struct *ps, int depth);\n+BOOL lsa_io_r_setsystemaccount(const char *desc,  \nLSA_R_SETSYSTEMACCOUNT  *out, prs_struct *ps, int depth);\n+void init_lsa_string( LSA_STRING *uni, const char *string );\n+void init_lsa_q_lookup_priv_value(LSA_Q_LOOKUP_PRIV_VALUE *q_u,  \nPOLICY_HND *hnd, const char *name);\n+BOOL smb_io_lsa_string( const char *desc, LSA_STRING *string,  \nprs_struct *ps, int depth );\n+BOOL lsa_io_q_lookup_priv_value(const char *desc,  \nLSA_Q_LOOKUP_PRIV_VALUE  *out, prs_struct *ps, int depth);\n+BOOL lsa_io_r_lookup_priv_value(const char *desc,  \nLSA_R_LOOKUP_PRIV_VALUE  *out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_addprivs(const char *desc, LSA_Q_ADDPRIVS *out,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_r_addprivs(const char *desc, LSA_R_ADDPRIVS *out,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_q_removeprivs(const char *desc, LSA_Q_REMOVEPRIVS *out,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_r_removeprivs(const char *desc, LSA_R_REMOVEPRIVS *out,  \nprs_struct *ps, int depth);\n+BOOL policy_handle_is_valid(const POLICY_HND *hnd);\n+void init_q_query2(LSA_Q_QUERY_INFO2 *in, POLICY_HND *hnd, uint16  \ninfo_class);\n+BOOL lsa_io_q_query_info2(const char *desc, LSA_Q_QUERY_INFO2 *in,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_r_query_info2(const char *desc, LSA_R_QUERY_INFO2 *out,\n+\t\t\t  prs_struct *ps, int depth);\n+void init_q_enum_acct_rights(LSA_Q_ENUM_ACCT_RIGHTS *in,\n+\t\t\t     POLICY_HND *hnd,\n+\t\t\t     uint32 count,\n+\t\t\t     DOM_SID *sid);\n+NTSTATUS init_r_enum_acct_rights( LSA_R_ENUM_ACCT_RIGHTS *out,  \nPRIVILEGE_SET *privileges );\n+BOOL lsa_io_q_enum_acct_rights(const char *desc,  \nLSA_Q_ENUM_ACCT_RIGHTS *in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_enum_acct_rights(const char *desc,  \nLSA_R_ENUM_ACCT_RIGHTS *out, prs_struct *ps, int depth);\n+void init_q_add_acct_rights( LSA_Q_ADD_ACCT_RIGHTS *in, POLICY_HND  \n*hnd,\n+                             DOM_SID *sid, uint32 count, const char  \n**rights );\n+BOOL lsa_io_q_add_acct_rights(const char *desc,  \nLSA_Q_ADD_ACCT_RIGHTS *in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_add_acct_rights(const char *desc,  \nLSA_R_ADD_ACCT_RIGHTS *out, prs_struct *ps, int depth);\n+void init_q_remove_acct_rights(LSA_Q_REMOVE_ACCT_RIGHTS *in,\n+\t\t\t       POLICY_HND *hnd,\n+\t\t\t       DOM_SID *sid,\n+\t\t\t       uint32 removeall,\n+\t\t\t       uint32 count,\n+\t\t\t       const char **rights);\n+BOOL lsa_io_q_remove_acct_rights(const char *desc,  \nLSA_Q_REMOVE_ACCT_RIGHTS *in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_remove_acct_rights(const char *desc,  \nLSA_R_REMOVE_ACCT_RIGHTS *out, prs_struct *ps, int depth);\n+void init_lsa_q_open_trusted_domain(LSA_Q_OPEN_TRUSTED_DOMAIN *q,  \nPOLICY_HND *hnd, DOM_SID *sid, uint32 desired_access);\n+BOOL lsa_io_q_open_trusted_domain(const char *desc,  \nLSA_Q_OPEN_TRUSTED_DOMAIN *in, prs_struct *ps, int depth);\n+void init_lsa_q_open_trusted_domain_by_name \n(LSA_Q_OPEN_TRUSTED_DOMAIN_BY_NAME *q,\n+\t\t\t\t\t    POLICY_HND *hnd,\n+\t\t\t\t\t    const char *name,\n+\t\t\t\t\t    uint32 desired_access);\n+BOOL lsa_io_q_open_trusted_domain_by_name(const char *desc,  \nLSA_Q_OPEN_TRUSTED_DOMAIN_BY_NAME *q_o, prs_struct *ps, int depth);\n+BOOL lsa_io_r_open_trusted_domain_by_name(const char *desc,  \nLSA_R_OPEN_TRUSTED_DOMAIN_BY_NAME *out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_open_trusted_domain(const char *desc,  \nLSA_Q_OPEN_TRUSTED_DOMAIN *q_o, prs_struct *ps, int depth);\n+BOOL lsa_io_r_open_trusted_domain(const char *desc,  \nLSA_R_OPEN_TRUSTED_DOMAIN *out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_create_trusted_domain(const char *desc,  \nLSA_Q_CREATE_TRUSTED_DOMAIN *in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_create_trusted_domain(const char *desc,  \nLSA_R_CREATE_TRUSTED_DOMAIN *out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_create_secret(const char *desc, LSA_Q_CREATE_SECRET  \n*in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_create_secret(const char *desc, LSA_R_CREATE_SECRET  \n*out, prs_struct *ps, int depth);\n+BOOL lsa_io_q_set_secret(const char *desc, LSA_Q_SET_SECRET *in,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_r_set_secret(const char *desc, LSA_R_SET_SECRET *out,  \nprs_struct *ps, int depth);\n+BOOL lsa_io_q_delete_object(const char *desc, LSA_Q_DELETE_OBJECT  \n*in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_delete_object(const char *desc, LSA_R_DELETE_OBJECT  \n*out, prs_struct *ps, int depth);\n+void init_q_query_trusted_domain_info \n(LSA_Q_QUERY_TRUSTED_DOMAIN_INFO *q,\n+\t\t\t\t      POLICY_HND *hnd, uint16 info_class) ;\n+void init_q_query_trusted_domain_info_by_name \n(LSA_Q_QUERY_TRUSTED_DOMAIN_INFO_BY_NAME *q,\n+\t\t\t\t\t      POLICY_HND *hnd, uint16 info_class,\n+\t\t\t\t\t      const char *dom_name);\n+void init_q_query_trusted_domain_info_by_sid \n(LSA_Q_QUERY_TRUSTED_DOMAIN_INFO_BY_SID *q,\n+\t\t\t\t\t     POLICY_HND *hnd, uint16 info_class,\n+\t\t\t\t\t     DOM_SID *dom_sid);\n+BOOL lsa_io_q_query_trusted_domain_info(const char *desc,\n+\t\t\t\t\tLSA_Q_QUERY_TRUSTED_DOMAIN_INFO *q_q,\n+\t\t\t\t\tprs_struct *ps, int depth);\n+BOOL lsa_io_q_query_trusted_domain_info_by_sid(const char *desc,\n+\t\t\t\t\t       LSA_Q_QUERY_TRUSTED_DOMAIN_INFO_BY_SID *q_q,\n+\t\t\t\t\t       prs_struct *ps, int depth);\n+BOOL lsa_io_q_query_trusted_domain_info_by_name(const char *desc,\n+\t\t\t\t\t        LSA_Q_QUERY_TRUSTED_DOMAIN_INFO_BY_NAME *q_q,\n+\t\t\t\t\t        prs_struct *ps, int depth);\n+BOOL lsa_io_r_query_trusted_domain_info(const char *desc,\n+\t\t\t\t\tLSA_R_QUERY_TRUSTED_DOMAIN_INFO *r_q,\n+\t\t\t\t\tprs_struct *ps, int depth);\n+void init_q_query_dom_info(LSA_Q_QUERY_DOM_INFO_POLICY *in,  \nPOLICY_HND *hnd, uint16 info_class);\n+BOOL lsa_io_q_query_dom_info(const char *desc,  \nLSA_Q_QUERY_DOM_INFO_POLICY *in, prs_struct *ps, int depth);\n+BOOL lsa_io_r_query_dom_info(const char *desc,  \nLSA_R_QUERY_DOM_INFO_POLICY *out,\n+\t\t\t     prs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_misc.c  */\n+\n+void set_current_rpc_talloc( TALLOC_CTX *ctx);\n+void main_loop_TALLOC_FREE(void);\n+TALLOC_CTX *main_loop_talloc_get(void);\n+TALLOC_CTX *get_talloc_ctx(void);\n+BOOL smb_io_time(const char *desc, NTTIME *nttime, prs_struct *ps,  \nint depth);\n+BOOL smb_io_nttime(const char *desc, prs_struct *ps, int depth,  \nNTTIME *nttime);\n+BOOL smb_io_dom_sid(const char *desc, DOM_SID *sid, prs_struct *ps,  \nint depth);\n+void init_dom_sid2(DOM_SID2 *sid2, const DOM_SID *sid);\n+BOOL smb_io_dom_sid2_p(const char *desc, prs_struct *ps, int depth,  \nDOM_SID2 **sid2);\n+BOOL smb_io_dom_sid2(const char *desc, DOM_SID2 *sid, prs_struct  \n*ps, int depth);\n+BOOL smb_io_uuid(const char *desc, struct GUID *uuid,\n+\t\t prs_struct *ps, int depth);\n+void init_str_hdr(STRHDR *hdr, int max_len, int len, uint32 buffer);\n+BOOL smb_io_strhdr(const char *desc,  STRHDR *hdr, prs_struct *ps,  \nint depth);\n+void init_uni_hdr(UNIHDR *hdr, UNISTR2 *str2);\n+BOOL smb_io_unihdr(const char *desc, UNIHDR *hdr, prs_struct *ps,  \nint depth);\n+void init_buf_hdr(BUFHDR *hdr, int max_len, int len);\n+BOOL smb_io_hdrbuf_pre(const char *desc, BUFHDR *hdr, prs_struct  \n*ps, int depth, uint32 *offset);\n+BOOL smb_io_hdrbuf_post(const char *desc, BUFHDR *hdr, prs_struct  \n*ps, int depth,\n+\t\t\t\tuint32 ptr_hdrbuf, uint32 max_len, uint32 len);\n+BOOL smb_io_hdrbuf(const char *desc, BUFHDR *hdr, prs_struct *ps,  \nint depth);\n+void init_unistr(UNISTR *str, const char *buf);\n+BOOL smb_io_unistr(const char *desc, UNISTR *uni, prs_struct *ps,  \nint depth);\n+void init_rpc_blob_uint32(RPC_DATA_BLOB *str, uint32 val);\n+void init_rpc_blob_str(RPC_DATA_BLOB *str, const char *buf, int len);\n+void init_rpc_blob_hex(RPC_DATA_BLOB *str, const char *buf);\n+void init_rpc_blob_bytes(RPC_DATA_BLOB *str, uint8 *buf, size_t len);\n+BOOL smb_io_buffer5(const char *desc, BUFFER5 *buf5, prs_struct *ps,  \nint depth);\n+void init_regval_buffer(REGVAL_BUFFER *str, const uint8 *buf, size_t  \nlen);\n+BOOL smb_io_regval_buffer(const char *desc, prs_struct *ps, int  \ndepth, REGVAL_BUFFER *buf2);\n+void init_buf_unistr2(UNISTR2 *str, uint32 *ptr, const char *buf);\n+void copy_unistr2(UNISTR2 *str, const UNISTR2 *from);\n+void init_string2(STRING2 *str, const char *buf, size_t max_len,  \nsize_t str_len);\n+BOOL smb_io_string2(const char *desc, STRING2 *str2, uint32 buffer,  \nprs_struct *ps, int depth);\n+void init_unistr2(UNISTR2 *str, const char *buf, enum  \nunistr2_term_codes flags);\n+void init_unistr4(UNISTR4 *uni4, const char *buf, enum  \nunistr2_term_codes flags);\n+void init_unistr4_w( TALLOC_CTX *ctx, UNISTR4 *uni4, const  \nsmb_ucs2_t *buf );\n+void init_unistr2_w(TALLOC_CTX *ctx, UNISTR2 *str, const smb_ucs2_t  \n*buf);\n+void init_unistr2_from_unistr(UNISTR2 *to, const UNISTR *from);\n+void init_unistr2_from_datablob(UNISTR2 *str, DATA_BLOB *blob) ;\n+BOOL prs_io_unistr2_p(const char *desc, prs_struct *ps, int depth,  \nUNISTR2 **uni2);\n+BOOL prs_io_unistr2(const char *desc, prs_struct *ps, int depth,  \nUNISTR2 *uni2 );\n+BOOL smb_io_unistr2(const char *desc, UNISTR2 *uni2, uint32 buffer,  \nprs_struct *ps, int depth);\n+BOOL prs_unistr4(const char *desc, prs_struct *ps, int depth,  \nUNISTR4 *uni4);\n+BOOL prs_unistr4_hdr(const char *desc, prs_struct *ps, int depth,  \nUNISTR4 *uni4);\n+BOOL prs_unistr4_str(const char *desc, prs_struct *ps, int depth,  \nUNISTR4 *uni4);\n+BOOL prs_unistr4_array(const char *desc, prs_struct *ps, int depth,  \nUNISTR4_ARRAY *array );\n+BOOL init_unistr4_array( UNISTR4_ARRAY *array, uint32 count, const  \nchar **strings );\n+BOOL smb_io_lockout_string_hdr(const char *desc, HDR_LOCKOUT_STRING  \n*hdr_account_lockout, prs_struct *ps, int depth);\n+BOOL smb_io_account_lockout_str(const char *desc, LOCKOUT_STRING  \n*account_lockout, uint32 buffer, prs_struct *ps, int depth);\n+void init_dom_rid(DOM_RID *prid, uint32 rid, uint16 type, uint32 idx);\n+BOOL smb_io_dom_rid(const char *desc, DOM_RID *rid, prs_struct *ps,  \nint depth);\n+BOOL smb_io_dom_rid2(const char *desc, DOM_RID2 *rid, prs_struct  \n*ps, int depth);\n+void init_dom_rid3(DOM_RID3 *rid3, uint32 rid, uint8 type);\n+BOOL smb_io_dom_rid3(const char *desc, DOM_RID3 *rid3, prs_struct  \n*ps, int depth);\n+void init_dom_rid4(DOM_RID4 *rid4, uint16 unknown, uint16 attr,  \nuint32 rid);\n+void init_clnt_srv(DOM_CLNT_SRV *logcln, const char *logon_srv,\n+\t\t   const char *comp_name);\n+BOOL smb_io_clnt_srv(const char *desc, DOM_CLNT_SRV *logcln,  \nprs_struct *ps, int depth);\n+void init_log_info(DOM_LOG_INFO *loginfo, const char *logon_srv,  \nconst char *acct_name,\n+\t\tuint16 sec_chan, const char *comp_name);\n+BOOL smb_io_log_info(const char *desc, DOM_LOG_INFO *loginfo,  \nprs_struct *ps, int depth);\n+BOOL smb_io_chal(const char *desc, DOM_CHAL *chal, prs_struct *ps,  \nint depth);\n+BOOL smb_io_cred(const char *desc,  DOM_CRED *cred, prs_struct *ps,  \nint depth);\n+void init_clnt_info2(DOM_CLNT_INFO2 *clnt,\n+\t\t\t\tconst char *logon_srv, const char *comp_name,\n+\t\t\t\tconst DOM_CRED *clnt_cred);\n+BOOL smb_io_clnt_info2(const char *desc, DOM_CLNT_INFO2 *clnt,  \nprs_struct *ps, int depth);\n+void init_clnt_info(DOM_CLNT_INFO *clnt,\n+\t\tconst char *logon_srv, const char *acct_name,\n+\t\tuint16 sec_chan, const char *comp_name,\n+\t\tconst DOM_CRED *cred);\n+BOOL smb_io_clnt_info(const char *desc,  DOM_CLNT_INFO *clnt,  \nprs_struct *ps, int depth);\n+void init_logon_id(DOM_LOGON_ID *logonid, uint32 log_id_low, uint32  \nlog_id_high);\n+BOOL smb_io_logon_id(const char *desc, DOM_LOGON_ID *logonid,  \nprs_struct *ps, int depth);\n+void init_owf_info(OWF_INFO *hash, const uint8 data[16]);\n+BOOL smb_io_owf_info(const char *desc, OWF_INFO *hash, prs_struct  \n*ps, int depth);\n+BOOL smb_io_gid(const char *desc,  DOM_GID *gid, prs_struct *ps, int  \ndepth);\n+BOOL smb_io_pol_hnd(const char *desc, POLICY_HND *pol, prs_struct  \n*ps, int depth);\n+void init_unistr3(UNISTR3 *str, const char *buf);\n+BOOL smb_io_unistr3(const char *desc, UNISTR3 *name, prs_struct *ps,  \nint depth);\n+BOOL prs_uint64(const char *name, prs_struct *ps, int depth, uint64  \n*data64);\n+BOOL smb_io_bufhdr2(const char *desc, BUFHDR2 *hdr, prs_struct *ps,  \nint depth);\n+BOOL smb_io_bufhdr4(const char *desc, BUFHDR4 *hdr, prs_struct *ps,  \nint depth);\n+BOOL smb_io_rpc_blob(const char *desc, RPC_DATA_BLOB *blob,  \nprs_struct *ps, int depth);\n+BOOL make_uni_hdr(UNIHDR *hdr, int len);\n+BOOL make_bufhdr2(BUFHDR2 *hdr, uint32 info_level, uint32 length,  \nuint32 buffer);\n+uint32 str_len_uni(UNISTR *source);\n+\n+/* The following definitions come from rpc_parse/parse_net.c  */\n+\n+BOOL net_io_q_logon_ctrl2(const char *desc, NET_Q_LOGON_CTRL2 *q_l,  \nprs_struct *ps, int depth);\n+void init_net_q_logon_ctrl2(NET_Q_LOGON_CTRL2 *q_l, const char  \n*srv_name,\n+\t\t\t    uint32 query_level);\n+void init_net_r_logon_ctrl2(NET_R_LOGON_CTRL2 *r_l, uint32 query_level,\n+\t\t\t    uint32 flags, uint32 pdc_status,\n+\t\t\t    uint32 logon_attempts, uint32 tc_status,\n+\t\t\t    const char *trusted_domain_name);\n+BOOL net_io_r_logon_ctrl2(const char *desc, NET_R_LOGON_CTRL2 *r_l,  \nprs_struct *ps, int depth);\n+BOOL net_io_q_logon_ctrl(const char *desc, NET_Q_LOGON_CTRL *q_l,  \nprs_struct *ps,\n+\t\t\t int depth);\n+void init_net_q_logon_ctrl(NET_Q_LOGON_CTRL *q_l, const char *srv_name,\n+\t\t\t   uint32 query_level);\n+void init_net_r_logon_ctrl(NET_R_LOGON_CTRL *r_l, uint32 query_level,\n+\t\t\t   uint32 flags, uint32 pdc_status);\n+BOOL net_io_r_logon_ctrl(const char *desc, NET_R_LOGON_CTRL *r_l,  \nprs_struct *ps,\n+\t\t\t int depth);\n+void init_net_q_getanydcname(NET_Q_GETANYDCNAME *r_t, const char  \n*logon_server,\n+\t\t\t     const char *domainname);\n+BOOL net_io_q_getanydcname(const char *desc, NET_Q_GETANYDCNAME  \n*r_t, prs_struct *ps,\n+\t\t\t   int depth);\n+void init_net_r_getanydcname(NET_R_GETANYDCNAME *r_t, const char  \n*dcname);\n+BOOL net_io_r_getanydcname(const char *desc, NET_R_GETANYDCNAME  \n*r_t, prs_struct *ps,\n+\t\t\t   int depth);\n+void init_net_q_getdcname(NET_Q_GETDCNAME *r_t, const char  \n*logon_server,\n+\t\t\t  const char *domainname);\n+BOOL net_io_q_getdcname(const char *desc, NET_Q_GETDCNAME *r_t,  \nprs_struct *ps,\n+\t\t\tint depth);\n+void init_net_r_getdcname(NET_R_GETDCNAME *r_t, const char *dcname);\n+BOOL net_io_r_getdcname(const char *desc, NET_R_GETDCNAME *r_t,  \nprs_struct *ps,\n+\t\t\tint depth);\n+void init_r_trust_dom(NET_R_TRUST_DOM_LIST *r_t,\n+\t\t\tuint32 num_doms, const char *dom_name);\n+BOOL net_io_r_trust_dom(const char *desc, NET_R_TRUST_DOM_LIST *r_t,  \nprs_struct *ps, int depth);\n+BOOL net_io_q_trust_dom(const char *desc, NET_Q_TRUST_DOM_LIST *q_l,  \nprs_struct *ps, int depth);\n+void init_q_req_chal(NET_Q_REQ_CHAL *q_c,\n+\t\t     const char *logon_srv, const char *logon_clnt,\n+\t\t     const DOM_CHAL *clnt_chal);\n+BOOL net_io_q_req_chal(const char *desc,  NET_Q_REQ_CHAL *q_c,  \nprs_struct *ps, int depth);\n+BOOL net_io_r_req_chal(const char *desc, NET_R_REQ_CHAL *r_c,  \nprs_struct *ps, int depth);\n+BOOL net_io_q_auth(const char *desc, NET_Q_AUTH *q_a, prs_struct  \n*ps, int depth);\n+BOOL net_io_r_auth(const char *desc, NET_R_AUTH *r_a, prs_struct  \n*ps, int depth);\n+void init_q_auth_2(NET_Q_AUTH_2 *q_a,\n+\t\tconst char *logon_srv, const char *acct_name, uint16 sec_chan,  \nconst char *comp_name,\n+\t\tconst DOM_CHAL *clnt_chal, uint32 clnt_flgs);\n+BOOL net_io_q_auth_2(const char *desc, NET_Q_AUTH_2 *q_a, prs_struct  \n*ps, int depth);\n+BOOL net_io_r_auth_2(const char *desc, NET_R_AUTH_2 *r_a, prs_struct  \n*ps, int depth);\n+void init_q_auth_3(NET_Q_AUTH_3 *q_a,\n+\t\tconst char *logon_srv, const char *acct_name, uint16 sec_chan,  \nconst char *comp_name,\n+\t\tconst DOM_CHAL *clnt_chal, uint32 clnt_flgs);\n+BOOL net_io_q_auth_3(const char *desc, NET_Q_AUTH_3 *q_a, prs_struct  \n*ps, int depth);\n+BOOL net_io_r_auth_3(const char *desc, NET_R_AUTH_3 *r_a, prs_struct  \n*ps, int depth);\n+void init_q_srv_pwset(NET_Q_SRV_PWSET *q_s,\n+\t\tconst char *logon_srv, const char *sess_key, const char *acct_name,\n+                uint16 sec_chan, const char *comp_name,\n+\t\tDOM_CRED *cred, const uchar hashed_mach_pwd[16]);\n+BOOL net_io_q_srv_pwset(const char *desc, NET_Q_SRV_PWSET *q_s,  \nprs_struct *ps, int depth);\n+BOOL net_io_r_srv_pwset(const char *desc, NET_R_SRV_PWSET *r_s,  \nprs_struct *ps, int depth);\n+void init_id_info1(NET_ID_INFO_1 *id, const char *domain_name,\n+\t\t\t\tuint32 param_ctrl, uint32 log_id_low, uint32 log_id_high,\n+\t\t\t\tconst char *user_name, const char *wksta_name,\n+\t\t\t\tconst char *sess_key,\n+\t\t\t\tunsigned char lm_cypher[16], unsigned char nt_cypher[16]);\n+void init_id_info2(NET_ID_INFO_2 * id, const char *domain_name,\n+\t\t   uint32 param_ctrl,\n+\t\t   uint32 log_id_low, uint32 log_id_high,\n+\t\t   const char *user_name, const char *wksta_name,\n+\t\t   const uchar lm_challenge[8],\n+\t\t   const uchar * lm_chal_resp, size_t lm_chal_resp_len,\n+\t\t   const uchar * nt_chal_resp, size_t nt_chal_resp_len);\n+void init_sam_info(DOM_SAM_INFO *sam,\n+\t\t\t\tconst char *logon_srv, const char *comp_name,\n+\t\t\t\tDOM_CRED *clnt_cred,\n+\t\t\t\tDOM_CRED *rtn_cred, uint16 logon_level,\n+\t\t\t\tNET_ID_INFO_CTR *ctr);\n+void init_sam_info_ex(DOM_SAM_INFO_EX *sam,\n+\t\t      const char *logon_srv, const char *comp_name,\n+\t\t      uint16 logon_level, NET_ID_INFO_CTR *ctr);\n+void init_net_user_info3(TALLOC_CTX *ctx, NET_USER_INFO_3 *usr,\n+\t\t\t uint32                user_rid,\n+\t\t\t uint32                group_rid,\n+\n+\t\t\t const char*\t\tuser_name,\n+\t\t\t const char*\t\tfull_name,\n+\t\t\t const char*\t\thome_dir,\n+\t\t\t const char*\t\tdir_drive,\n+\t\t\t const char*\t\tlogon_script,\n+\t\t\t const char*\t\tprofile_path,\n+\n+\t\t\t time_t unix_logon_time,\n+\t\t\t time_t unix_logoff_time,\n+\t\t\t time_t unix_kickoff_time,\n+\t\t\t time_t unix_pass_last_set_time,\n+\t\t\t time_t unix_pass_can_change_time,\n+\t\t\t time_t unix_pass_must_change_time,\n+\t\t\t\n+\t\t\t uint16 logon_count, uint16 bad_pw_count,\n+ \t\t \t uint32 num_groups, const DOM_GID *gids,\n+\t\t\t uint32 user_flgs, uint32 acct_flags,\n+\t\t\t uchar user_session_key[16],\n+\t\t\t uchar lm_session_key[16],\n+ \t\t\t const char *logon_srv, const char *logon_dom,\n+\t\t\t const DOM_SID *dom_sid);\n+BOOL net_io_user_info3(const char *desc, NET_USER_INFO_3 *usr,  \nprs_struct *ps,\n+\t\t       int depth, uint16 validation_level, BOOL  \nkerb_validation_level);\n+BOOL net_io_q_sam_logon(const char *desc, NET_Q_SAM_LOGON *q_l,  \nprs_struct *ps, int depth);\n+BOOL net_io_r_sam_logon(const char *desc, NET_R_SAM_LOGON *r_l,  \nprs_struct *ps, int depth);\n+BOOL net_io_q_sam_logon_ex(const char *desc, NET_Q_SAM_LOGON_EX  \n*q_l, prs_struct *ps, int depth);\n+BOOL net_io_r_sam_logon_ex(const char *desc, NET_R_SAM_LOGON_EX  \n*r_l, prs_struct *ps, int depth);\n+BOOL net_io_q_sam_logoff(const char *desc,  NET_Q_SAM_LOGOFF *q_l,  \nprs_struct *ps, int depth);\n+BOOL net_io_r_sam_logoff(const char *desc, NET_R_SAM_LOGOFF *r_l,  \nprs_struct *ps, int depth);\n+BOOL init_net_q_sam_sync(NET_Q_SAM_SYNC * q_s, const char *srv_name,\n+                         const char *cli_name, DOM_CRED *cli_creds,\n+                         DOM_CRED *ret_creds, uint32 database_id,\n+\t\t\t uint32 next_rid);\n+BOOL net_io_q_sam_sync(const char *desc, NET_Q_SAM_SYNC * q_s,  \nprs_struct *ps,\n+\t\t       int depth);\n+BOOL net_io_r_sam_sync(const char *desc,\n+\t\t       NET_R_SAM_SYNC * r_s, prs_struct *ps, int depth);\n+BOOL init_net_q_sam_deltas(NET_Q_SAM_DELTAS *q_s, const char *srv_name,\n+                           const char *cli_name, DOM_CRED *cli_creds,\n+                           uint32 database_id, uint64 dom_mod_count);\n+BOOL net_io_q_sam_deltas(const char *desc, NET_Q_SAM_DELTAS *q_s,  \nprs_struct *ps,\n+                         int depth);\n+BOOL net_io_r_sam_deltas(const char *desc,\n+                         NET_R_SAM_DELTAS *r_s, prs_struct *ps, int  \ndepth);\n+void init_net_q_dsr_getdcname(NET_Q_DSR_GETDCNAME *r_t, const char  \n*server_unc,\n+\t\t\t      const char *domain_name,\n+\t\t\t      struct GUID *domain_guid,\n+\t\t\t      struct GUID *site_guid,\n+\t\t\t      uint32_t flags);\n+void init_net_q_dsr_getdcnameex(NET_Q_DSR_GETDCNAMEEX *r_t, const  \nchar *server_unc,\n+\t\t\t\tconst char *domain_name,\n+\t\t\t\tstruct GUID *domain_guid,\n+\t\t\t\tconst char *site_name,\n+\t\t\t\tuint32_t flags);\n+void init_net_q_dsr_getdcnameex2(NET_Q_DSR_GETDCNAMEEX2 *r_t, const  \nchar *server_unc,\n+\t\t\t\t const char *domain_name,\n+\t\t\t\t const char *client_account,\n+\t\t\t\t uint32 mask,\n+\t\t\t\t struct GUID *domain_guid,\n+\t\t\t\t const char *site_name,\n+\t\t\t\t uint32_t flags);\n+BOOL net_io_q_dsr_getdcname(const char *desc, NET_Q_DSR_GETDCNAME *r_t,\n+\t\t\t    prs_struct *ps, int depth);\n+BOOL net_io_q_dsr_getdcnameex(const char *desc,  \nNET_Q_DSR_GETDCNAMEEX *r_t,\n+\t\t\t      prs_struct *ps, int depth);\n+BOOL net_io_q_dsr_getdcnameex2(const char *desc,  \nNET_Q_DSR_GETDCNAMEEX2 *r_t,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_net_r_dsr_getdcname(NET_R_DSR_GETDCNAME *r_t, const char  \n*dc_unc,\n+\t\t\t      const char *dc_address, int32 dc_address_type,\n+\t\t\t      struct GUID domain_guid, const char *domain_name,\n+\t\t\t      const char *forest_name, uint32 dc_flags,\n+\t\t\t      const char *dc_site_name,\n+\t\t\t      const char *client_site_name);\n+BOOL net_io_r_dsr_getdcname(const char *desc, NET_R_DSR_GETDCNAME *r_t,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_net_q_dsr_getsitename(NET_Q_DSR_GETSITENAME *r_t, const  \nchar *computer_name);\n+BOOL net_io_q_dsr_getsitename(const char *desc,  \nNET_Q_DSR_GETSITENAME *r_t,\n+\t\t\t      prs_struct *ps, int depth);\n+BOOL net_io_r_dsr_getsitename(const char *desc,  \nNET_R_DSR_GETSITENAME *r_t,\n+\t\t\t      prs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_ntsvcs.c  */\n+\n+BOOL ntsvcs_io_q_get_version(const char *desc, NTSVCS_Q_GET_VERSION  \n*q_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_r_get_version(const char *desc, NTSVCS_R_GET_VERSION  \n*r_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_q_get_device_list_size(const char *desc,  \nNTSVCS_Q_GET_DEVICE_LIST_SIZE *q_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_r_get_device_list_size(const char *desc,  \nNTSVCS_R_GET_DEVICE_LIST_SIZE *r_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_q_get_device_list(const char *desc,  \nNTSVCS_Q_GET_DEVICE_LIST *q_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_r_get_device_list(const char *desc,  \nNTSVCS_R_GET_DEVICE_LIST *r_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_q_validate_device_instance(const char *desc,  \nNTSVCS_Q_VALIDATE_DEVICE_INSTANCE *q_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_r_validate_device_instance(const char *desc,  \nNTSVCS_R_VALIDATE_DEVICE_INSTANCE *r_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_q_get_device_reg_property(const char *desc,  \nNTSVCS_Q_GET_DEVICE_REG_PROPERTY *q_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_r_get_device_reg_property(const char *desc,  \nNTSVCS_R_GET_DEVICE_REG_PROPERTY *r_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_q_get_hw_profile_info(const char *desc,  \nNTSVCS_Q_GET_HW_PROFILE_INFO *q_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_r_get_hw_profile_info(const char *desc,  \nNTSVCS_R_GET_HW_PROFILE_INFO *r_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_q_hw_profile_flags(const char *desc,  \nNTSVCS_Q_HW_PROFILE_FLAGS *q_u, prs_struct *ps, int depth);\n+BOOL ntsvcs_io_r_hw_profile_flags(const char *desc,  \nNTSVCS_R_HW_PROFILE_FLAGS *r_u, prs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_prs.c  */\n+\n+void prs_dump(char *name, int v, prs_struct *ps);\n+void prs_dump_before(char *name, int v, prs_struct *ps);\n+void prs_dump_region(char *name, int v, prs_struct *ps,\n+\t\t     int from_off, int to_off);\n+void prs_debug(prs_struct *ps, int depth, const char *desc, const  \nchar *fn_name);\n+BOOL prs_init(prs_struct *ps, uint32 size, TALLOC_CTX *ctx, BOOL io);\n+void prs_mem_free(prs_struct *ps);\n+void prs_mem_clear(prs_struct *ps);\n+char *prs_alloc_mem_(prs_struct *ps, size_t size, unsigned int count);\n+char *prs_alloc_mem(prs_struct *ps, size_t size, unsigned int count);\n+TALLOC_CTX *prs_get_mem_context(prs_struct *ps);\n+void prs_give_memory(prs_struct *ps, char *buf, uint32 size, BOOL  \nis_dynamic);\n+char *prs_take_memory(prs_struct *ps, uint32 *psize);\n+BOOL prs_set_buffer_size(prs_struct *ps, uint32 newsize);\n+BOOL prs_grow(prs_struct *ps, uint32 extra_space);\n+BOOL prs_force_grow(prs_struct *ps, uint32 extra_space);\n+char *prs_data_p(prs_struct *ps);\n+uint32 prs_data_size(prs_struct *ps);\n+uint32 prs_offset(prs_struct *ps);\n+BOOL prs_set_offset(prs_struct *ps, uint32 offset);\n+BOOL prs_append_prs_data(prs_struct *dst, prs_struct *src);\n+BOOL prs_append_some_prs_data(prs_struct *dst, prs_struct *src,  \nint32 start, uint32 len);\n+BOOL prs_copy_data_in(prs_struct *dst, const char *src, uint32 len);\n+BOOL prs_copy_data_out(char *dst, prs_struct *src, uint32 len);\n+BOOL prs_copy_all_data_out(char *dst, prs_struct *src);\n+void prs_set_endian_data(prs_struct *ps, BOOL endian);\n+BOOL prs_align(prs_struct *ps);\n+BOOL prs_align_uint16(prs_struct *ps);\n+BOOL prs_align_uint64(prs_struct *ps);\n+BOOL prs_align_custom(prs_struct *ps, uint8 boundary);\n+BOOL prs_align_needed(prs_struct *ps, uint32 needed);\n+char *prs_mem_get(prs_struct *ps, uint32 extra_size);\n+void prs_switch_type(prs_struct *ps, BOOL io);\n+void prs_force_dynamic(prs_struct *ps);\n+void prs_set_session_key(prs_struct *ps, const char sess_key[16]);\n+BOOL prs_uint8(const char *name, prs_struct *ps, int depth, uint8  \n*data8);\n+BOOL prs_pointer( const char *name, prs_struct *ps, int depth,\n+                 void *dta, size_t data_size,\n+                 BOOL(*prs_fn)(const char*, prs_struct*, int, void*) );\n+BOOL prs_uint16(const char *name, prs_struct *ps, int depth, uint16  \n*data16);\n+BOOL prs_uint32(const char *name, prs_struct *ps, int depth, uint32  \n*data32);\n+BOOL prs_int32(const char *name, prs_struct *ps, int depth, int32  \n*data32);\n+BOOL prs_ntstatus(const char *name, prs_struct *ps, int depth,  \nNTSTATUS *status);\n+BOOL prs_dcerpc_status(const char *name, prs_struct *ps, int depth,  \nNTSTATUS *status);\n+BOOL prs_werror(const char *name, prs_struct *ps, int depth, WERROR  \n*status);\n+BOOL prs_uint8s(BOOL charmode, const char *name, prs_struct *ps, int  \ndepth, uint8 *data8s, int len);\n+BOOL prs_uint16s(BOOL charmode, const char *name, prs_struct *ps,  \nint depth, uint16 *data16s, int len);\n+BOOL prs_uint16uni(BOOL charmode, const char *name, prs_struct *ps,  \nint depth, uint16 *data16s, int len);\n+BOOL prs_uint32s(BOOL charmode, const char *name, prs_struct *ps,  \nint depth, uint32 *data32s, int len);\n+BOOL prs_buffer5(BOOL charmode, const char *name, prs_struct *ps,  \nint depth, BUFFER5 *str);\n+BOOL prs_regval_buffer(BOOL charmode, const char *name, prs_struct  \n*ps, int depth, REGVAL_BUFFER *buf);\n+BOOL prs_string2(BOOL charmode, const char *name, prs_struct *ps,  \nint depth, STRING2 *str);\n+BOOL prs_unistr2(BOOL charmode, const char *name, prs_struct *ps,  \nint depth, UNISTR2 *str);\n+BOOL prs_unistr3(BOOL charmode, const char *name, UNISTR3 *str,  \nprs_struct *ps, int depth);\n+BOOL prs_unistr(const char *name, prs_struct *ps, int depth, UNISTR  \n*str);\n+BOOL prs_string(const char *name, prs_struct *ps, int depth, char  \n*str, int max_buf_size);\n+BOOL prs_string_alloc(const char *name, prs_struct *ps, int depth,  \nconst char **str);\n+BOOL prs_uint16_pre(const char *name, prs_struct *ps, int depth,  \nuint16 *data16, uint32 *offset);\n+BOOL prs_uint16_post(const char *name, prs_struct *ps, int depth,  \nuint16 *data16,\n+\t\t\t\tuint32 ptr_uint16, uint32 start_offset);\n+BOOL prs_uint32_pre(const char *name, prs_struct *ps, int depth,  \nuint32 *data32, uint32 *offset);\n+BOOL prs_uint32_post(const char *name, prs_struct *ps, int depth,  \nuint32 *data32,\n+\t\t\t\tuint32 ptr_uint32, uint32 data_size);\n+int tdb_prs_store(TDB_CONTEXT *tdb, TDB_DATA kbuf, prs_struct *ps);\n+int tdb_prs_store_bystring(TDB_CONTEXT *tdb, char *keystr,  \nprs_struct *ps);\n+int tdb_prs_fetch(TDB_CONTEXT *tdb, TDB_DATA kbuf, prs_struct *ps,  \nTALLOC_CTX *mem_ctx);\n+int tdb_prs_fetch_bystring(TDB_CONTEXT *tdb, char *keystr,  \nprs_struct *ps, TALLOC_CTX *mem_ctx);\n+BOOL prs_hash1(prs_struct *ps, uint32 offset, int len);\n+void schannel_encode(struct schannel_auth_struct *a, enum  \npipe_auth_level auth_level,\n+\t\t   enum schannel_direction direction,\n+\t\t   RPC_AUTH_SCHANNEL_CHK * verf,\n+\t\t   char *data, size_t data_len);\n+BOOL schannel_decode(struct schannel_auth_struct *a, enum  \npipe_auth_level auth_level,\n+\t\t   enum schannel_direction direction,\n+\t\t   RPC_AUTH_SCHANNEL_CHK * verf, char *data, size_t data_len);\n+BOOL prs_init_data_blob(prs_struct *prs, DATA_BLOB *blob, TALLOC_CTX  \n*mem_ctx);\n+BOOL prs_data_blob(prs_struct *prs, DATA_BLOB *blob, TALLOC_CTX  \n*mem_ctx);\n+\n+/* The following definitions come from rpc_parse/parse_rpc.c  */\n+\n+const char *cli_get_pipe_name(int pipe_idx);\n+void init_rpc_hdr(RPC_HDR *hdr, enum RPC_PKT_TYPE pkt_type, uint8  \nflags,\n+\t\t\t\tuint32 call_id, int data_len, int auth_len);\n+BOOL smb_io_rpc_hdr(const char *desc,  RPC_HDR *rpc, prs_struct *ps,  \nint depth);\n+void init_rpc_context(RPC_CONTEXT *rpc_ctx, uint16 context_id,  \nRPC_IFACE *abstract, RPC_IFACE *transfer);\n+void init_rpc_hdr_rb(RPC_HDR_RB *rpc,\n+\t\t\t\tuint16 max_tsize, uint16 max_rsize, uint32 assoc_gid,\n+\t\t\t\tRPC_CONTEXT *context);\n+BOOL smb_io_rpc_context(const char *desc, RPC_CONTEXT *rpc_ctx,  \nprs_struct *ps, int depth);\n+BOOL smb_io_rpc_hdr_rb(const char *desc, RPC_HDR_RB *rpc, prs_struct  \n*ps, int depth);\n+void init_rpc_hdr_ba(RPC_HDR_BA *rpc,\n+\t\t\t\tuint16 max_tsize, uint16 max_rsize, uint32 assoc_gid,\n+\t\t\t\tconst char *pipe_addr,\n+\t\t\t\tuint8 num_results, uint16 result, uint16 reason,\n+\t\t\t\tRPC_IFACE *transfer);\n+BOOL smb_io_rpc_hdr_ba(const char *desc, RPC_HDR_BA *rpc, prs_struct  \n*ps, int depth);\n+void init_rpc_hdr_req(RPC_HDR_REQ *hdr, uint32 alloc_hint, uint16  \nopnum);\n+BOOL smb_io_rpc_hdr_req(const char *desc, RPC_HDR_REQ *rpc,  \nprs_struct *ps, int depth);\n+BOOL smb_io_rpc_hdr_resp(const char *desc, RPC_HDR_RESP *rpc,  \nprs_struct *ps, int depth);\n+BOOL smb_io_rpc_hdr_fault(const char *desc, RPC_HDR_FAULT *rpc,  \nprs_struct *ps, int depth);\n+void init_rpc_hdr_auth(RPC_HDR_AUTH *rai,\n+\t\t\t\tuint8 auth_type, uint8 auth_level,\n+\t\t\t\tuint8 auth_pad_len,\n+\t\t\t\tuint32 auth_context_id);\n+BOOL smb_io_rpc_hdr_auth(const char *desc, RPC_HDR_AUTH *rai,  \nprs_struct *ps, int depth);\n+BOOL rpc_auth_verifier_chk(RPC_AUTH_VERIFIER *rav,\n+\t\t\t\tconst char *signature, uint32 msg_type);\n+void init_rpc_auth_verifier(RPC_AUTH_VERIFIER *rav,\n+\t\t\t\tconst char *signature, uint32 msg_type);\n+BOOL smb_io_rpc_auth_verifier(const char *desc, RPC_AUTH_VERIFIER  \n*rav, prs_struct *ps, int depth);\n+BOOL smb_io_rpc_schannel_verifier(const char *desc,  \nRPC_AUTH_VERIFIER *rav, prs_struct *ps, int depth);\n+void init_rpc_auth_schannel_neg(RPC_AUTH_SCHANNEL_NEG *neg,\n+\t\t\t      const char *domain, const char *myname);\n+BOOL smb_io_rpc_auth_schannel_neg(const char *desc,  \nRPC_AUTH_SCHANNEL_NEG *neg,\n+\t\t\t\tprs_struct *ps, int depth);\n+BOOL smb_io_rpc_auth_schannel_chk(const char *desc, int auth_len,\n+                                RPC_AUTH_SCHANNEL_CHK * chk,\n+\t\t\t\tprs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_samr.c  */\n+\n+void init_samr_q_close_hnd(SAMR_Q_CLOSE_HND * q_c, POLICY_HND *hnd);\n+BOOL samr_io_q_close_hnd(const char *desc, SAMR_Q_CLOSE_HND * q_u,\n+\t\t\t prs_struct *ps, int depth);\n+BOOL samr_io_r_close_hnd(const char *desc, SAMR_R_CLOSE_HND * r_u,\n+\t\t\t prs_struct *ps, int depth);\n+void init_samr_q_lookup_domain(SAMR_Q_LOOKUP_DOMAIN * q_u,\n+\t\t\t       POLICY_HND *pol, char *dom_name);\n+BOOL samr_io_q_lookup_domain(const char *desc, SAMR_Q_LOOKUP_DOMAIN  \n* q_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_r_lookup_domain(SAMR_R_LOOKUP_DOMAIN * r_u,\n+\t\t\t       DOM_SID *dom_sid, NTSTATUS status);\n+BOOL samr_io_r_lookup_domain(const char *desc, SAMR_R_LOOKUP_DOMAIN  \n* r_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_q_remove_sid_foreign_domain \n(SAMR_Q_REMOVE_SID_FOREIGN_DOMAIN * q_u, POLICY_HND *dom_pol, DOM_SID  \n*sid);\n+BOOL samr_io_q_remove_sid_foreign_domain(const char *desc,  \nSAMR_Q_REMOVE_SID_FOREIGN_DOMAIN * q_u,\n+\t\t\t  prs_struct *ps, int depth);\n+BOOL samr_io_r_remove_sid_foreign_domain(const char *desc,  \nSAMR_R_REMOVE_SID_FOREIGN_DOMAIN * r_u,\n+\t\t\t  prs_struct *ps, int depth);\n+void init_samr_q_open_domain(SAMR_Q_OPEN_DOMAIN * q_u,\n+\t\t\t     POLICY_HND *pol, uint32 flags,\n+\t\t\t     const DOM_SID *sid);\n+BOOL samr_io_q_open_domain(const char *desc, SAMR_Q_OPEN_DOMAIN * q_u,\n+\t\t\t   prs_struct *ps, int depth);\n+BOOL samr_io_r_open_domain(const char *desc, SAMR_R_OPEN_DOMAIN * r_u,\n+\t\t\t   prs_struct *ps, int depth);\n+void init_samr_q_get_usrdom_pwinfo(SAMR_Q_GET_USRDOM_PWINFO * q_u,\n+\t\t\t\t   POLICY_HND *user_pol);\n+BOOL samr_io_q_get_usrdom_pwinfo(const char *desc,  \nSAMR_Q_GET_USRDOM_PWINFO * q_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+void init_samr_r_get_usrdom_pwinfo(SAMR_R_GET_USRDOM_PWINFO *r_u,  \nNTSTATUS status);\n+BOOL samr_io_r_get_usrdom_pwinfo(const char *desc,  \nSAMR_R_GET_USRDOM_PWINFO * r_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+BOOL samr_io_q_set_sec_obj(const char *desc, SAMR_Q_SET_SEC_OBJ * q_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_q_query_sec_obj(SAMR_Q_QUERY_SEC_OBJ * q_u,\n+\t\t\t       POLICY_HND *user_pol, uint32 sec_info);\n+BOOL samr_io_q_query_sec_obj(const char *desc, SAMR_Q_QUERY_SEC_OBJ  \n* q_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_q_query_domain_info(SAMR_Q_QUERY_DOMAIN_INFO * q_u,\n+\t\t\t\t   POLICY_HND *domain_pol, uint16 switch_value);\n+BOOL samr_io_q_query_domain_info(const char *desc,  \nSAMR_Q_QUERY_DOMAIN_INFO * q_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+void init_unk_info1(SAM_UNK_INFO_1 *u_1, uint16 min_pass_len, uint16  \npass_hist,\n+\t\t    uint32 password_properties, NTTIME nt_expire, NTTIME nt_min_age);\n+void init_unk_info2(SAM_UNK_INFO_2 * u_2,\n+\t\t\tconst char *comment, const char *domain, const char *server,\n+\t\t\tuint32 seq_num, uint32 num_users, uint32 num_groups, uint32  \nnum_alias, NTTIME nt_logout, uint32 server_role);\n+void init_unk_info3(SAM_UNK_INFO_3 *u_3, NTTIME nt_logout);\n+void init_unk_info4(SAM_UNK_INFO_4 * u_4,const char *comment);\n+void init_unk_info5(SAM_UNK_INFO_5 * u_5,const char *domain);\n+void init_unk_info6(SAM_UNK_INFO_6 * u_6, const char *server);\n+void init_unk_info7(SAM_UNK_INFO_7 * u_7, uint32 server_role);\n+void init_unk_info8(SAM_UNK_INFO_8 * u_8, uint32 seq_num);\n+void init_unk_info9(SAM_UNK_INFO_9 * u_9, uint32 unknown);\n+void init_unk_info12(SAM_UNK_INFO_12 * u_12, NTTIME  \nnt_lock_duration, NTTIME nt_reset_time, uint16 lockout);\n+void init_unk_info13(SAM_UNK_INFO_13 * u_13, uint32 seq_num);\n+void init_samr_r_query_domain_info(SAMR_R_QUERY_DOMAIN_INFO * r_u,\n+\t\t\t\t   uint16 switch_value, SAM_UNK_CTR * ctr,\n+\t\t\t\t   NTSTATUS status);\n+BOOL samr_io_r_query_domain_info(const char *desc,  \nSAMR_R_QUERY_DOMAIN_INFO * r_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+void init_samr_q_set_sec_obj(SAMR_Q_SET_SEC_OBJ * q_u,\n+\t\t\t     POLICY_HND *pol, uint32 sec_info, SEC_DESC_BUF *buf);\n+BOOL samr_io_r_set_sec_obj(const char *desc, SAMR_R_SET_SEC_OBJ * r_u,\n+\t\t\t     prs_struct *ps, int depth);\n+BOOL samr_io_r_query_sec_obj(const char *desc, SAMR_R_QUERY_SEC_OBJ  \n* r_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_sam_entry(SAM_ENTRY *sam, UNISTR2 *uni2, uint32 rid);\n+void init_samr_q_enum_dom_users(SAMR_Q_ENUM_DOM_USERS * q_e,  \nPOLICY_HND *pol,\n+\t\t\t\tuint32 start_idx,\n+\t\t\t\tuint32 acb_mask, uint32 size);\n+BOOL samr_io_q_enum_dom_users(const char *desc,  \nSAMR_Q_ENUM_DOM_USERS * q_e,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_r_enum_dom_users(SAMR_R_ENUM_DOM_USERS * r_u,\n+\t\t\t\tuint32 next_idx, uint32 num_sam_entries);\n+BOOL samr_io_r_enum_dom_users(const char *desc,  \nSAMR_R_ENUM_DOM_USERS * r_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_q_query_dispinfo(SAMR_Q_QUERY_DISPINFO * q_e,  \nPOLICY_HND *pol,\n+\t\t\t\tuint16 switch_level, uint32 start_idx,\n+\t\t\t\tuint32 max_entries, uint32 max_size);\n+BOOL samr_io_q_query_dispinfo(const char *desc,  \nSAMR_Q_QUERY_DISPINFO * q_e,\n+\t\t\t      prs_struct *ps, int depth);\n+NTSTATUS init_sam_dispinfo_1(TALLOC_CTX *ctx, SAM_DISPINFO_1 **sam,\n+\t\t\t     uint32 num_entries, uint32 start_idx,\n+\t\t\t     struct samr_displayentry *entries);\n+NTSTATUS init_sam_dispinfo_2(TALLOC_CTX *ctx, SAM_DISPINFO_2 **sam,\n+\t\t\t     uint32 num_entries, uint32 start_idx,\n+\t\t\t     struct samr_displayentry *entries);\n+NTSTATUS init_sam_dispinfo_3(TALLOC_CTX *ctx, SAM_DISPINFO_3 **sam,\n+\t\t\t     uint32 num_entries, uint32 start_idx,\n+\t\t\t     struct samr_displayentry *entries);\n+NTSTATUS init_sam_dispinfo_4(TALLOC_CTX *ctx, SAM_DISPINFO_4 **sam,\n+\t\t\t     uint32 num_entries, uint32 start_idx,\n+\t\t\t     struct samr_displayentry *entries);\n+NTSTATUS init_sam_dispinfo_5(TALLOC_CTX *ctx, SAM_DISPINFO_5 **sam,\n+\t\t\t     uint32 num_entries, uint32 start_idx,\n+\t\t\t     struct samr_displayentry *entries);\n+void init_samr_r_query_dispinfo(SAMR_R_QUERY_DISPINFO * r_u,\n+\t\t\t\tuint32 num_entries, uint32 total_size, uint32 data_size,\n+\t\t\t\tuint16 switch_level, SAM_DISPINFO_CTR * ctr,\n+\t\t\t\tNTSTATUS status);\n+BOOL samr_io_r_query_dispinfo(const char *desc,  \nSAMR_R_QUERY_DISPINFO * r_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_q_get_dispenum_index(SAMR_Q_GET_DISPENUM_INDEX * q_e,  \nPOLICY_HND *pol,\n+\t\t\t\t    uint16 switch_level, const char *name);\n+BOOL samr_io_q_get_dispenum_index(const char *desc,  \nSAMR_Q_GET_DISPENUM_INDEX * q_e,\n+\t\t\t\t  prs_struct *ps, int depth);\n+BOOL samr_io_r_get_dispenum_index(const char *desc,  \nSAMR_R_GET_DISPENUM_INDEX * r_u,\n+\t\t\t\t  prs_struct *ps, int depth);\n+void init_samr_q_open_group(SAMR_Q_OPEN_GROUP * q_c,\n+\t\t\t    POLICY_HND *hnd,\n+\t\t\t    uint32 access_mask, uint32 rid);\n+BOOL samr_io_q_open_group(const char *desc, SAMR_Q_OPEN_GROUP * q_u,\n+\t\t\t  prs_struct *ps, int depth);\n+BOOL samr_io_r_open_group(const char *desc, SAMR_R_OPEN_GROUP * r_u,\n+\t\t\t  prs_struct *ps, int depth);\n+void init_samr_group_info1(GROUP_INFO1 * gr1,\n+\t\t\t   char *acct_name, char *acct_desc,\n+\t\t\t   uint32 num_members);\n+BOOL samr_io_group_info1(const char *desc, GROUP_INFO1 * gr1,\n+\t\t\t prs_struct *ps, int depth);\n+void init_samr_group_info2(GROUP_INFO2 * gr2, const char *acct_name);\n+BOOL samr_io_group_info2(const char *desc, GROUP_INFO2 *gr2,  \nprs_struct *ps, int depth);\n+void init_samr_group_info3(GROUP_INFO3 *gr3);\n+BOOL samr_io_group_info3(const char *desc, GROUP_INFO3 *gr3,  \nprs_struct *ps, int depth);\n+void init_samr_group_info4(GROUP_INFO4 * gr4, const char *acct_desc);\n+BOOL samr_io_group_info4(const char *desc, GROUP_INFO4 * gr4,\n+\t\t\t prs_struct *ps, int depth);\n+void init_samr_group_info5(GROUP_INFO5 * gr5,\n+\t\t\t   char *acct_name, char *acct_desc,\n+\t\t\t   uint32 num_members);\n+BOOL samr_io_group_info5(const char *desc, GROUP_INFO5 * gr5,\n+\t\t\t prs_struct *ps, int depth);\n+void init_samr_q_create_dom_group(SAMR_Q_CREATE_DOM_GROUP * q_e,\n+\t\t\t\t  POLICY_HND *pol, const char *acct_desc,\n+\t\t\t\t  uint32 access_mask);\n+BOOL samr_io_q_create_dom_group(const char *desc,  \nSAMR_Q_CREATE_DOM_GROUP * q_e,\n+\t\t\t\tprs_struct *ps, int depth);\n+BOOL samr_io_r_create_dom_group(const char *desc,  \nSAMR_R_CREATE_DOM_GROUP * r_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_q_delete_dom_group(SAMR_Q_DELETE_DOM_GROUP * q_c,\n+\t\t\t\t  POLICY_HND *hnd);\n+BOOL samr_io_q_delete_dom_group(const char *desc,  \nSAMR_Q_DELETE_DOM_GROUP * q_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+BOOL samr_io_r_delete_dom_group(const char *desc,  \nSAMR_R_DELETE_DOM_GROUP * r_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_q_del_groupmem(SAMR_Q_DEL_GROUPMEM * q_e,\n+\t\t\t      POLICY_HND *pol, uint32 rid);\n+BOOL samr_io_q_del_groupmem(const char *desc, SAMR_Q_DEL_GROUPMEM *  \nq_e,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_r_del_groupmem(SAMR_R_DEL_GROUPMEM * r_u, POLICY_HND  \n*pol,\n+\t\t\t      NTSTATUS status);\n+BOOL samr_io_r_del_groupmem(const char *desc, SAMR_R_DEL_GROUPMEM *  \nr_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_add_groupmem(SAMR_Q_ADD_GROUPMEM * q_e,\n+\t\t\t      POLICY_HND *pol, uint32 rid);\n+BOOL samr_io_q_add_groupmem(const char *desc, SAMR_Q_ADD_GROUPMEM *  \nq_e,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_r_add_groupmem(SAMR_R_ADD_GROUPMEM * r_u, POLICY_HND  \n*pol,\n+\t\t\t      NTSTATUS status);\n+BOOL samr_io_r_add_groupmem(const char *desc, SAMR_R_ADD_GROUPMEM *  \nr_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_set_groupinfo(SAMR_Q_SET_GROUPINFO * q_e,\n+\t\t\t       POLICY_HND *pol, GROUP_INFO_CTR * ctr);\n+BOOL samr_io_q_set_groupinfo(const char *desc, SAMR_Q_SET_GROUPINFO  \n* q_e,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_r_set_groupinfo(SAMR_R_SET_GROUPINFO * r_u, NTSTATUS  \nstatus);\n+BOOL samr_io_r_set_groupinfo(const char *desc, SAMR_R_SET_GROUPINFO  \n* r_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_q_query_groupinfo(SAMR_Q_QUERY_GROUPINFO * q_e,\n+\t\t\t\t POLICY_HND *pol, uint16 switch_level);\n+BOOL samr_io_q_query_groupinfo(const char *desc,  \nSAMR_Q_QUERY_GROUPINFO * q_e,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_r_query_groupinfo(SAMR_R_QUERY_GROUPINFO * r_u,\n+\t\t\t\t GROUP_INFO_CTR * ctr, NTSTATUS status);\n+BOOL samr_io_r_query_groupinfo(const char *desc,  \nSAMR_R_QUERY_GROUPINFO * r_u,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_q_query_groupmem(SAMR_Q_QUERY_GROUPMEM * q_c,  \nPOLICY_HND *hnd);\n+BOOL samr_io_q_query_groupmem(const char *desc,  \nSAMR_Q_QUERY_GROUPMEM * q_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_r_query_groupmem(SAMR_R_QUERY_GROUPMEM * r_u,\n+\t\t\t\tuint32 num_entries, uint32 *rid,\n+\t\t\t\tuint32 *attr, NTSTATUS status);\n+BOOL samr_io_r_query_groupmem(const char *desc,  \nSAMR_R_QUERY_GROUPMEM * r_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_q_query_usergroups(SAMR_Q_QUERY_USERGROUPS * q_u,\n+\t\t\t\t  POLICY_HND *hnd);\n+BOOL samr_io_q_query_usergroups(const char *desc,  \nSAMR_Q_QUERY_USERGROUPS * q_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_r_query_usergroups(SAMR_R_QUERY_USERGROUPS * r_u,\n+\t\t\t\t  uint32 num_gids, DOM_GID * gid,\n+\t\t\t\t  NTSTATUS status);\n+BOOL samr_io_gids(const char *desc, uint32 *num_gids, DOM_GID ** gid,\n+\t\t  prs_struct *ps, int depth);\n+BOOL samr_io_r_query_usergroups(const char *desc,  \nSAMR_R_QUERY_USERGROUPS * r_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_q_enum_domains(SAMR_Q_ENUM_DOMAINS * q_e,\n+\t\t\t      POLICY_HND *pol,\n+\t\t\t      uint32 start_idx, uint32 size);\n+BOOL samr_io_q_enum_domains(const char *desc, SAMR_Q_ENUM_DOMAINS *  \nq_e,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_r_enum_domains(SAMR_R_ENUM_DOMAINS * r_u,\n+\t\t\t      uint32 next_idx, uint32 num_sam_entries);\n+BOOL samr_io_r_enum_domains(const char *desc, SAMR_R_ENUM_DOMAINS *  \nr_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_enum_dom_groups(SAMR_Q_ENUM_DOM_GROUPS * q_e,\n+\t\t\t\t POLICY_HND *pol,\n+\t\t\t\t uint32 start_idx, uint32 size);\n+BOOL samr_io_q_enum_dom_groups(const char *desc,  \nSAMR_Q_ENUM_DOM_GROUPS * q_e,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_r_enum_dom_groups(SAMR_R_ENUM_DOM_GROUPS * r_u,\n+\t\t\t\t uint32 next_idx, uint32 num_sam_entries);\n+BOOL samr_io_r_enum_dom_groups(const char *desc,  \nSAMR_R_ENUM_DOM_GROUPS * r_u,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_q_enum_dom_aliases(SAMR_Q_ENUM_DOM_ALIASES * q_e,\n+\t\t\t\t  POLICY_HND *pol, uint32 start_idx,\n+\t\t\t\t  uint32 size);\n+BOOL samr_io_q_enum_dom_aliases(const char *desc,  \nSAMR_Q_ENUM_DOM_ALIASES * q_e,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_r_enum_dom_aliases(SAMR_R_ENUM_DOM_ALIASES *r_u,  \nuint32 next_idx, uint32 num_sam_entries);\n+BOOL samr_io_r_enum_dom_aliases(const char *desc,  \nSAMR_R_ENUM_DOM_ALIASES * r_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_alias_info1(ALIAS_INFO1 * al1, char *acct_name,  \nuint32 num_member, char *acct_desc);\n+BOOL samr_io_alias_info1(const char *desc, ALIAS_INFO1 * al1,\n+\t\t\t prs_struct *ps, int depth);\n+void init_samr_alias_info3(ALIAS_INFO3 * al3, const char *acct_desc);\n+BOOL samr_io_alias_info3(const char *desc, ALIAS_INFO3 *al3,\n+\t\t\t prs_struct *ps, int depth);\n+BOOL samr_io_alias_info2(const char *desc, ALIAS_INFO2 *al2,\n+\t\t\t prs_struct *ps, int depth);\n+BOOL samr_alias_info_ctr(const char *desc, prs_struct *ps, int  \ndepth, ALIAS_INFO_CTR * ctr);\n+void init_samr_q_query_aliasinfo(SAMR_Q_QUERY_ALIASINFO * q_e,\n+\t\t\t\t POLICY_HND *pol, uint32 switch_level);\n+BOOL samr_io_q_query_aliasinfo(const char *desc,  \nSAMR_Q_QUERY_ALIASINFO *in,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_r_query_aliasinfo(SAMR_R_QUERY_ALIASINFO *out,\n+\t\t\t\t ALIAS_INFO_CTR * ctr, NTSTATUS status);\n+BOOL samr_io_r_query_aliasinfo(const char *desc,  \nSAMR_R_QUERY_ALIASINFO *out,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_q_set_aliasinfo(SAMR_Q_SET_ALIASINFO * q_u,\n+\t\t\t       POLICY_HND *hnd, ALIAS_INFO_CTR * ctr);\n+BOOL samr_io_q_set_aliasinfo(const char *desc, SAMR_Q_SET_ALIASINFO  \n* q_u,\n+\t\t\t     prs_struct *ps, int depth);\n+BOOL samr_io_r_set_aliasinfo(const char *desc, SAMR_R_SET_ALIASINFO  \n* r_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_q_query_useraliases(SAMR_Q_QUERY_USERALIASES * q_u,\n+\t\t\t\t   POLICY_HND *hnd,\n+\t\t\t\t   uint32 num_sids,\n+\t\t\t\t   uint32 *ptr_sid, DOM_SID2 * sid);\n+BOOL samr_io_q_query_useraliases(const char *desc,  \nSAMR_Q_QUERY_USERALIASES * q_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+void init_samr_r_query_useraliases(SAMR_R_QUERY_USERALIASES * r_u,\n+\t\t\t\t   uint32 num_rids, uint32 *rid,\n+\t\t\t\t   NTSTATUS status);\n+BOOL samr_io_rids(const char *desc, uint32 *num_rids, uint32 **rid,\n+\t\t  prs_struct *ps, int depth);\n+BOOL samr_io_r_query_useraliases(const char *desc,  \nSAMR_R_QUERY_USERALIASES * r_u,\n+\t\t\t\t prs_struct *ps, int depth);\n+void init_samr_q_open_alias(SAMR_Q_OPEN_ALIAS * q_u, POLICY_HND *pol,\n+\t\t\t    uint32 access_mask, uint32 rid);\n+BOOL samr_io_q_open_alias(const char *desc, SAMR_Q_OPEN_ALIAS * q_u,\n+\t\t\t  prs_struct *ps, int depth);\n+BOOL samr_io_r_open_alias(const char *desc, SAMR_R_OPEN_ALIAS * r_u,\n+\t\t\t  prs_struct *ps, int depth);\n+void init_samr_q_lookup_rids(TALLOC_CTX *ctx, SAMR_Q_LOOKUP_RIDS * q_u,\n+\t\t\t     POLICY_HND *pol, uint32 flags,\n+\t\t\t     uint32 num_rids, uint32 *rid);\n+BOOL samr_io_q_lookup_rids(const char *desc, SAMR_Q_LOOKUP_RIDS * q_u,\n+\t\t\t   prs_struct *ps, int depth);\n+void init_samr_r_lookup_rids(SAMR_R_LOOKUP_RIDS * r_u,\n+\t\t\t     uint32 num_names, UNIHDR * hdr_name,\n+\t\t\t     UNISTR2 *uni_name, uint32 *type);\n+BOOL samr_io_r_lookup_rids(const char *desc, SAMR_R_LOOKUP_RIDS * r_u,\n+\t\t\t   prs_struct *ps, int depth);\n+void init_samr_q_delete_alias(SAMR_Q_DELETE_DOM_ALIAS * q_u,  \nPOLICY_HND *hnd);\n+BOOL samr_io_q_delete_alias(const char *desc,  \nSAMR_Q_DELETE_DOM_ALIAS * q_u,\n+\t\t\t    prs_struct *ps, int depth);\n+BOOL samr_io_r_delete_alias(const char *desc,  \nSAMR_R_DELETE_DOM_ALIAS * r_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_create_dom_alias(SAMR_Q_CREATE_DOM_ALIAS * q_u,\n+\t\t\t\t  POLICY_HND *hnd, const char *acct_desc);\n+BOOL samr_io_q_create_dom_alias(const char *desc,  \nSAMR_Q_CREATE_DOM_ALIAS * q_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+BOOL samr_io_r_create_dom_alias(const char *desc,  \nSAMR_R_CREATE_DOM_ALIAS * r_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_q_add_aliasmem(SAMR_Q_ADD_ALIASMEM * q_u, POLICY_HND  \n*hnd,\n+\t\t\t      DOM_SID *sid);\n+BOOL samr_io_q_add_aliasmem(const char *desc, SAMR_Q_ADD_ALIASMEM *  \nq_u,\n+\t\t\t    prs_struct *ps, int depth);\n+BOOL samr_io_r_add_aliasmem(const char *desc, SAMR_R_ADD_ALIASMEM *  \nr_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_del_aliasmem(SAMR_Q_DEL_ALIASMEM * q_u, POLICY_HND  \n*hnd,\n+\t\t\t      DOM_SID *sid);\n+BOOL samr_io_q_del_aliasmem(const char *desc, SAMR_Q_DEL_ALIASMEM *  \nq_u,\n+\t\t\t    prs_struct *ps, int depth);\n+BOOL samr_io_r_del_aliasmem(const char *desc, SAMR_R_DEL_ALIASMEM *  \nr_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_delete_dom_alias(SAMR_Q_DELETE_DOM_ALIAS * q_c,\n+\t\t\t\t  POLICY_HND *hnd);\n+BOOL samr_io_q_delete_dom_alias(const char *desc,  \nSAMR_Q_DELETE_DOM_ALIAS * q_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_r_delete_dom_alias(SAMR_R_DELETE_DOM_ALIAS * r_u,\n+\t\t\t\t  NTSTATUS status);\n+BOOL samr_io_r_delete_dom_alias(const char *desc,  \nSAMR_R_DELETE_DOM_ALIAS * r_u,\n+\t\t\t\tprs_struct *ps, int depth);\n+void init_samr_q_query_aliasmem(SAMR_Q_QUERY_ALIASMEM * q_c,\n+\t\t\t\tPOLICY_HND *hnd);\n+BOOL samr_io_q_query_aliasmem(const char *desc,  \nSAMR_Q_QUERY_ALIASMEM * q_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_r_query_aliasmem(SAMR_R_QUERY_ALIASMEM * r_u,\n+\t\t\t\tuint32 num_sids, DOM_SID2 * sid,\n+\t\t\t\tNTSTATUS status);\n+BOOL samr_io_r_query_aliasmem(const char *desc,  \nSAMR_R_QUERY_ALIASMEM * r_u,\n+\t\t\t      prs_struct *ps, int depth);\n+NTSTATUS init_samr_q_lookup_names(TALLOC_CTX *ctx,  \nSAMR_Q_LOOKUP_NAMES * q_u,\n+\t\t\t      POLICY_HND *pol, uint32 flags,\n+\t\t\t      uint32 num_names, const char **name);\n+BOOL samr_io_q_lookup_names(const char *desc, SAMR_Q_LOOKUP_NAMES *  \nq_u,\n+\t\t\t    prs_struct *ps, int depth);\n+NTSTATUS init_samr_r_lookup_names(TALLOC_CTX *ctx,  \nSAMR_R_LOOKUP_NAMES * r_u,\n+\t\t\t      uint32 num_rids,\n+\t\t\t      uint32 *rid, enum lsa_SidType *type,\n+\t\t\t      NTSTATUS status);\n+BOOL samr_io_r_lookup_names(const char *desc, SAMR_R_LOOKUP_NAMES *  \nr_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_delete_dom_user(SAMR_Q_DELETE_DOM_USER * q_c,\n+\t\t\t\t POLICY_HND *hnd);\n+BOOL samr_io_q_delete_dom_user(const char *desc,  \nSAMR_Q_DELETE_DOM_USER * q_u,\n+\t\t\t       prs_struct *ps, int depth);\n+BOOL samr_io_r_delete_dom_user(const char *desc,  \nSAMR_R_DELETE_DOM_USER * r_u,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_q_open_user(SAMR_Q_OPEN_USER * q_u,\n+\t\t\t   POLICY_HND *pol,\n+\t\t\t   uint32 access_mask, uint32 rid);\n+BOOL samr_io_q_open_user(const char *desc, SAMR_Q_OPEN_USER * q_u,\n+\t\t\t prs_struct *ps, int depth);\n+BOOL samr_io_r_open_user(const char *desc, SAMR_R_OPEN_USER * r_u,\n+\t\t\t prs_struct *ps, int depth);\n+void init_samr_q_create_user(SAMR_Q_CREATE_USER * q_u,\n+\t\t\t     POLICY_HND *pol,\n+\t\t\t     const char *name,\n+\t\t\t     uint32 acb_info, uint32 access_mask);\n+BOOL samr_io_q_create_user(const char *desc, SAMR_Q_CREATE_USER * q_u,\n+\t\t\t   prs_struct *ps, int depth);\n+BOOL samr_io_r_create_user(const char *desc, SAMR_R_CREATE_USER * r_u,\n+\t\t\t   prs_struct *ps, int depth);\n+void init_samr_q_query_userinfo(SAMR_Q_QUERY_USERINFO * q_u,\n+\t\t\t\tconst POLICY_HND *hnd, uint16 switch_value);\n+BOOL samr_io_q_query_userinfo(const char *desc,  \nSAMR_Q_QUERY_USERINFO * q_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_sam_user_info18(SAM_USER_INFO_18 * usr,\n+\t\t\t  const uint8 lm_pwd[16], const uint8 nt_pwd[16]);\n+void init_sam_user_info7(SAM_USER_INFO_7 * usr, const char *name);\n+void init_sam_user_info9(SAM_USER_INFO_9 * usr, uint32 rid_group);\n+void init_sam_user_info16(SAM_USER_INFO_16 * usr, uint32 acb_info);\n+void init_sam_user_info17(SAM_USER_INFO_17 * usr,\n+\t\t\t  NTTIME * expiry,\n+\t\t\t  char *mach_acct,\n+\t\t\t  uint32 rid_user, uint32 rid_group, uint16 acct_ctrl);\n+void init_sam_user_info24(SAM_USER_INFO_24 * usr, char newpass[516],\n+\t\t\t  uint8 pw_len);\n+void init_sam_user_info23W(SAM_USER_INFO_23 * usr, NTTIME *  \nlogon_time,\t/* all zeros */\n+\t\t\tNTTIME * logoff_time,\t/* all zeros */\n+\t\t\tNTTIME * kickoff_time,\t/* all zeros */\n+\t\t\tNTTIME * pass_last_set_time,\t/* all zeros */\n+\t\t\tNTTIME * pass_can_change_time,\t/* all zeros */\n+\t\t\tNTTIME * pass_must_change_time,\t/* all zeros */\n+\t\t\tUNISTR2 *user_name,\n+\t\t\tUNISTR2 *full_name,\n+\t\t\tUNISTR2 *home_dir,\n+\t\t\tUNISTR2 *dir_drive,\n+\t\t\tUNISTR2 *log_scr,\n+\t\t\tUNISTR2 *prof_path,\n+\t\t\tUNISTR2 *desc,\n+\t\t\tUNISTR2 *wkstas,\n+\t\t\tUNISTR2 *unk_str,\n+\t\t\tUNISTR2 *mung_dial,\n+\t\t\tuint32 user_rid,\t/* 0x0000 0000 */\n+\t\t\tuint32 group_rid,\n+\t\t\tuint32 acb_info,\n+\t\t\tuint32 fields_present,\n+\t\t\tuint16 logon_divs,\n+\t\t\tLOGON_HRS * hrs,\n+\t\t\tuint16 bad_password_count,\n+\t\t\tuint16 logon_count,\n+\t\t\tchar newpass[516]);\n+void init_sam_user_info23A(SAM_USER_INFO_23 * usr, NTTIME *  \nlogon_time,\t/* all zeros */\n+\t\t\t   NTTIME * logoff_time,\t/* all zeros */\n+\t\t\t   NTTIME * kickoff_time,\t/* all zeros */\n+\t\t\t   NTTIME * pass_last_set_time,\t/* all zeros */\n+\t\t\t   NTTIME * pass_can_change_time,\t/* all zeros */\n+\t\t\t   NTTIME * pass_must_change_time,\t/* all zeros */\n+\t\t\t   char *user_name,\t/* NULL */\n+\t\t\t   char *full_name,\n+\t\t\t   char *home_dir, char *dir_drive, char *log_scr,\n+\t\t\t   char *prof_path, const char *desc, char *wkstas,\n+\t\t\t   char *unk_str, char *mung_dial, uint32 user_rid,\t/* 0x0000  \n0000 */\n+\t\t\t   uint32 group_rid, uint32 acb_info,\n+\t\t\t   uint32 fields_present, uint16 logon_divs,\n+\t\t\t   LOGON_HRS * hrs, uint16 bad_password_count, uint16 logon_count,\n+\t\t\t   char newpass[516]);\n+void init_sam_user_info21W(SAM_USER_INFO_21 * usr,\n+\t\t\t   NTTIME * logon_time,\n+\t\t\t   NTTIME * logoff_time,\n+\t\t\t   NTTIME * kickoff_time,\n+\t\t\t   NTTIME * pass_last_set_time,\n+\t\t\t   NTTIME * pass_can_change_time,\n+\t\t\t   NTTIME * pass_must_change_time,\n+\t\t\t   UNISTR2 *user_name,\n+\t\t\t   UNISTR2 *full_name,\n+\t\t\t   UNISTR2 *home_dir,\n+\t\t\t   UNISTR2 *dir_drive,\n+\t\t\t   UNISTR2 *log_scr,\n+\t\t\t   UNISTR2 *prof_path,\n+\t\t\t   UNISTR2 *desc,\n+\t\t\t   UNISTR2 *wkstas,\n+\t\t\t   UNISTR2 *unk_str,\n+\t\t\t   UNISTR2 *mung_dial,\n+\t\t\t   uchar lm_pwd[16],\n+\t\t\t   uchar nt_pwd[16],\n+\t\t\t   uint32 user_rid,\n+\t\t\t   uint32 group_rid,\n+\t\t\t   uint32 acb_info,\n+\t\t\t   uint32 fields_present,\n+\t\t\t   uint16 logon_divs,\n+\t\t\t   LOGON_HRS * hrs,\n+\t\t\t   uint16 bad_password_count,\n+\t\t\t   uint16 logon_count);\n+NTSTATUS init_sam_user_info21A(SAM_USER_INFO_21 *usr, struct samu  \n*pw, DOM_SID *domain_sid);\n+void init_sam_user_info20A(SAM_USER_INFO_20 *usr, struct samu *pw);\n+NTSTATUS make_samr_userinfo_ctr_usr21(TALLOC_CTX *ctx,  \nSAM_USERINFO_CTR * ctr,\n+\t\t\t\t    uint16 switch_value,\n+\t\t\t\t    SAM_USER_INFO_21 * usr);\n+void init_samr_r_query_userinfo(SAMR_R_QUERY_USERINFO * r_u,\n+\t\t\t\tSAM_USERINFO_CTR * ctr, NTSTATUS status);\n+BOOL samr_io_r_query_userinfo(const char *desc,  \nSAMR_R_QUERY_USERINFO * r_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_q_set_userinfo(SAMR_Q_SET_USERINFO * q_u,\n+\t\t\t      const POLICY_HND *hnd, DATA_BLOB *sess_key,\n+\t\t\t      uint16 switch_value, void *info);\n+BOOL samr_io_q_set_userinfo(const char *desc, SAMR_Q_SET_USERINFO *  \nq_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_r_set_userinfo(SAMR_R_SET_USERINFO * r_u, NTSTATUS  \nstatus);\n+BOOL samr_io_r_set_userinfo(const char *desc, SAMR_R_SET_USERINFO *  \nr_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_set_userinfo2(SAMR_Q_SET_USERINFO2 * q_u,\n+\t\t\t       const POLICY_HND *hnd, DATA_BLOB *sess_key,\n+\t\t\t       uint16 switch_value, SAM_USERINFO_CTR * ctr);\n+BOOL samr_io_q_set_userinfo2(const char *desc, SAMR_Q_SET_USERINFO2  \n* q_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_r_set_userinfo2(SAMR_R_SET_USERINFO2 * r_u, NTSTATUS  \nstatus);\n+BOOL samr_io_r_set_userinfo2(const char *desc, SAMR_R_SET_USERINFO2  \n* r_u,\n+\t\t\t     prs_struct *ps, int depth);\n+void init_samr_q_connect(SAMR_Q_CONNECT * q_u,\n+\t\t\t char *srv_name, uint32 access_mask);\n+BOOL samr_io_q_connect(const char *desc, SAMR_Q_CONNECT * q_u,\n+\t\t       prs_struct *ps, int depth);\n+BOOL samr_io_r_connect(const char *desc, SAMR_R_CONNECT * r_u,\n+\t\t       prs_struct *ps, int depth);\n+void init_samr_q_connect4(SAMR_Q_CONNECT4 * q_u,\n+\t\t\t  char *srv_name, uint32 access_mask);\n+BOOL samr_io_q_connect4(const char *desc, SAMR_Q_CONNECT4 * q_u,\n+\t\t\tprs_struct *ps, int depth);\n+BOOL samr_io_r_connect4(const char *desc, SAMR_R_CONNECT4 * r_u,\n+\t\t\tprs_struct *ps, int depth);\n+void init_samr_q_connect5(SAMR_Q_CONNECT5 * q_u,\n+\t\t\t  char *srv_name, uint32 access_mask);\n+void init_samr_r_connect5(SAMR_R_CONNECT5 * r_u, POLICY_HND *pol,  \nNTSTATUS status);\n+BOOL samr_io_q_connect5(const char *desc, SAMR_Q_CONNECT5 * q_u,\n+\t\t\tprs_struct *ps, int depth);\n+BOOL samr_io_r_connect5(const char *desc, SAMR_R_CONNECT5 * r_u,\n+\t\t\tprs_struct *ps, int depth);\n+void init_samr_q_connect_anon(SAMR_Q_CONNECT_ANON * q_u);\n+BOOL samr_io_q_connect_anon(const char *desc, SAMR_Q_CONNECT_ANON *  \nq_u,\n+\t\t\t    prs_struct *ps, int depth);\n+BOOL samr_io_r_connect_anon(const char *desc, SAMR_R_CONNECT_ANON *  \nr_u,\n+\t\t\t    prs_struct *ps, int depth);\n+void init_samr_q_get_dom_pwinfo(SAMR_Q_GET_DOM_PWINFO * q_u,\n+\t\t\t\tchar *srv_name);\n+BOOL samr_io_q_get_dom_pwinfo(const char *desc,  \nSAMR_Q_GET_DOM_PWINFO * q_u,\n+\t\t\t      prs_struct *ps, int depth);\n+BOOL samr_io_r_get_dom_pwinfo(const char *desc,  \nSAMR_R_GET_DOM_PWINFO * r_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_enc_passwd(SAMR_ENC_PASSWD * pwd, const char pass[512]);\n+BOOL samr_io_enc_passwd(const char *desc, SAMR_ENC_PASSWD * pwd,\n+\t\t\tprs_struct *ps, int depth);\n+void init_enc_hash(SAMR_ENC_HASH * hsh, const uchar hash[16]);\n+BOOL samr_io_enc_hash(const char *desc, SAMR_ENC_HASH * hsh,\n+\t\t      prs_struct *ps, int depth);\n+void init_samr_q_chgpasswd_user(SAMR_Q_CHGPASSWD_USER * q_u,\n+\t\t\t\tconst char *dest_host, const char *user_name,\n+\t\t\t\tconst uchar nt_newpass[516],\n+\t\t\t\tconst uchar nt_oldhash[16],\n+\t\t\t\tconst uchar lm_newpass[516],\n+\t\t\t\tconst uchar lm_oldhash[16]);\n+BOOL samr_io_q_chgpasswd_user(const char *desc,  \nSAMR_Q_CHGPASSWD_USER * q_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_r_chgpasswd_user(SAMR_R_CHGPASSWD_USER * r_u,  \nNTSTATUS status);\n+BOOL samr_io_r_chgpasswd_user(const char *desc,  \nSAMR_R_CHGPASSWD_USER * r_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_q_chgpasswd_user3(SAMR_Q_CHGPASSWD_USER3 * q_u,\n+\t\t\t\t const char *dest_host, const char *user_name,\n+\t\t\t\t const uchar nt_newpass[516],\n+\t\t\t\t const uchar nt_oldhash[16],\n+\t\t\t\t const uchar lm_newpass[516],\n+\t\t\t\t const uchar lm_oldhash[16]);\n+BOOL samr_io_q_chgpasswd_user3(const char *desc,  \nSAMR_Q_CHGPASSWD_USER3 * q_u,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_r_chgpasswd_user3(SAMR_R_CHGPASSWD_USER3 *r_u,  \nNTSTATUS status,\n+\t\t\t\t SAMR_CHANGE_REJECT *reject, SAM_UNK_INFO_1 *info);\n+BOOL samr_io_change_reject(const char *desc, SAMR_CHANGE_REJECT  \n*reject, prs_struct *ps, int depth);\n+BOOL samr_io_r_chgpasswd_user3(const char *desc,  \nSAMR_R_CHGPASSWD_USER3 *r_u,\n+\t\t\t       prs_struct *ps, int depth);\n+void init_samr_q_query_domain_info2(SAMR_Q_QUERY_DOMAIN_INFO2 *q_u,\n+\t\t\t\tPOLICY_HND *domain_pol, uint16 switch_value);\n+BOOL samr_io_q_query_domain_info2(const char *desc,  \nSAMR_Q_QUERY_DOMAIN_INFO2 *q_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_r_query_domain_info2(SAMR_R_QUERY_DOMAIN_INFO2 * r_u,\n+\t\t\t\t    uint16 switch_value, SAM_UNK_CTR * ctr,\n+\t\t\t\t    NTSTATUS status);\n+BOOL samr_io_r_query_domain_info2(const char *desc,  \nSAMR_R_QUERY_DOMAIN_INFO2 * r_u,\n+\t\t\t\t  prs_struct *ps, int depth);\n+void init_samr_q_set_domain_info(SAMR_Q_SET_DOMAIN_INFO *q_u,\n+\t\t\t\tPOLICY_HND *domain_pol, uint16 switch_value, SAM_UNK_CTR *ctr);\n+BOOL samr_io_q_set_domain_info(const char *desc,  \nSAMR_Q_SET_DOMAIN_INFO *q_u,\n+\t\t\t      prs_struct *ps, int depth);\n+void init_samr_r_set_domain_info(SAMR_R_SET_DOMAIN_INFO * r_u,  \nNTSTATUS status);\n+BOOL samr_io_r_set_domain_info(const char *desc,  \nSAMR_R_SET_DOMAIN_INFO * r_u,\n+\t\t\t      prs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_sec.c  */\n+\n+BOOL sec_io_access(const char *desc, SEC_ACCESS *t, prs_struct *ps,  \nint depth);\n+BOOL sec_io_ace(const char *desc, SEC_ACE *psa, prs_struct *ps, int  \ndepth);\n+BOOL sec_io_acl(const char *desc, SEC_ACL **ppsa, prs_struct *ps,  \nint depth);\n+BOOL sec_io_desc(const char *desc, SEC_DESC **ppsd, prs_struct *ps,  \nint depth);\n+BOOL sec_io_desc_buf(const char *desc, SEC_DESC_BUF **ppsdb,  \nprs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_parse/parse_spoolss.c  */\n+\n+BOOL spoolss_io_system_time(const char *desc, prs_struct *ps, int  \ndepth, SYSTEMTIME *systime);\n+BOOL make_systemtime(SYSTEMTIME *systime, struct tm *unixtime);\n+BOOL smb_io_notify_info_data_strings(const char  \n*desc,SPOOL_NOTIFY_INFO_DATA *data,\n+                                     prs_struct *ps, int depth);\n+BOOL spool_io_user_level_1( const char *desc, prs_struct *ps, int  \ndepth, SPOOL_USER_1 *q_u );\n+BOOL spoolss_io_devmode(const char *desc, prs_struct *ps, int depth,  \nDEVICEMODE *devmode);\n+BOOL make_spoolss_q_open_printer_ex(SPOOL_Q_OPEN_PRINTER_EX *q_u,\n+\t\tconst fstring printername,\n+\t\tconst fstring datatype,\n+\t\tuint32 access_required,\n+\t\tconst fstring clientname,\n+\t\tconst fstring user_name);\n+BOOL make_spoolss_q_addprinterex( TALLOC_CTX *mem_ctx,  \nSPOOL_Q_ADDPRINTEREX *q_u,\n+\tconst char *srv_name, const char* clientname, const char* user_name,\n+\tuint32 level, PRINTER_INFO_CTR *ctr);\n+BOOL make_spoolss_printer_info_2(TALLOC_CTX *mem_ctx,  \nSPOOL_PRINTER_INFO_LEVEL_2 **spool_info2,\n+\t\t\t\tPRINTER_INFO_2 *info);\n+BOOL make_spoolss_printer_info_3(TALLOC_CTX *mem_ctx,  \nSPOOL_PRINTER_INFO_LEVEL_3 **spool_info3,\n+\t\t\t\tPRINTER_INFO_3 *info);\n+BOOL make_spoolss_printer_info_7(TALLOC_CTX *mem_ctx,  \nSPOOL_PRINTER_INFO_LEVEL_7 **spool_info7,\n+\t\t\t\tPRINTER_INFO_7 *info);\n+BOOL spoolss_io_q_open_printer(const char *desc,  \nSPOOL_Q_OPEN_PRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_open_printer(const char *desc,  \nSPOOL_R_OPEN_PRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_open_printer_ex(const char *desc,  \nSPOOL_Q_OPEN_PRINTER_EX *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_open_printer_ex(const char *desc,  \nSPOOL_R_OPEN_PRINTER_EX *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_deleteprinterdriverex( TALLOC_CTX *mem_ctx,\n+                                            \nSPOOL_Q_DELETEPRINTERDRIVEREX *q_u,\n+                                           const char *server,\n+                                           const char* arch,\n+                                           const char* driver,\n+                                           int version);\n+BOOL make_spoolss_q_deleteprinterdriver(\n+\tTALLOC_CTX *mem_ctx,\n+\tSPOOL_Q_DELETEPRINTERDRIVER *q_u,\n+\tconst char *server,\n+\tconst char* arch,\n+\tconst char* driver\n+);\n+BOOL make_spoolss_q_getprinterdata(SPOOL_Q_GETPRINTERDATA *q_u,\n+\t\t\t\t   const POLICY_HND *handle,\n+\t\t\t\t   const char *valuename, uint32 size);\n+BOOL make_spoolss_q_getprinterdataex(SPOOL_Q_GETPRINTERDATAEX *q_u,\n+\t\t\t\t     const POLICY_HND *handle,\n+\t\t\t\t     const char *keyname,\n+\t\t\t\t     const char *valuename, uint32 size);\n+BOOL spoolss_io_q_getprinterdata(const char *desc,  \nSPOOL_Q_GETPRINTERDATA *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_deleteprinterdata(const char *desc,  \nSPOOL_Q_DELETEPRINTERDATA *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_deleteprinterdata(const char *desc,  \nSPOOL_R_DELETEPRINTERDATA *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_deleteprinterdataex(const char *desc,  \nSPOOL_Q_DELETEPRINTERDATAEX *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_deleteprinterdataex(const char *desc,  \nSPOOL_R_DELETEPRINTERDATAEX *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_getprinterdata(const char *desc,  \nSPOOL_R_GETPRINTERDATA *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_closeprinter(SPOOL_Q_CLOSEPRINTER *q_u,  \nPOLICY_HND *hnd);\n+BOOL spoolss_io_q_abortprinter(const char *desc,  \nSPOOL_Q_ABORTPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_abortprinter(const char *desc,  \nSPOOL_R_ABORTPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_deleteprinter(const char *desc,  \nSPOOL_Q_DELETEPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_deleteprinter(const char *desc,  \nSPOOL_R_DELETEPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_deleteprinterdriver(const char *desc,  \nSPOOL_Q_DELETEPRINTERDRIVER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_deleteprinterdriver(const char *desc,  \nSPOOL_R_DELETEPRINTERDRIVER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_deleteprinterdriverex(const char *desc,  \nSPOOL_Q_DELETEPRINTERDRIVEREX *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_deleteprinterdriverex(const char *desc,  \nSPOOL_R_DELETEPRINTERDRIVEREX *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_closeprinter(const char *desc,  \nSPOOL_Q_CLOSEPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_closeprinter(const char *desc,  \nSPOOL_R_CLOSEPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_startdocprinter(const char *desc,  \nSPOOL_Q_STARTDOCPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_startdocprinter(const char *desc,  \nSPOOL_R_STARTDOCPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_enddocprinter(const char *desc,  \nSPOOL_Q_ENDDOCPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enddocprinter(const char *desc,  \nSPOOL_R_ENDDOCPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_startpageprinter(const char *desc,  \nSPOOL_Q_STARTPAGEPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_startpageprinter(const char *desc,  \nSPOOL_R_STARTPAGEPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_endpageprinter(const char *desc,  \nSPOOL_Q_ENDPAGEPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_endpageprinter(const char *desc,  \nSPOOL_R_ENDPAGEPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_writeprinter(const char *desc,  \nSPOOL_Q_WRITEPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_writeprinter(const char *desc,  \nSPOOL_R_WRITEPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_rffpcnex(const char *desc, SPOOL_Q_RFFPCNEX *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_rffpcnex(const char *desc, SPOOL_R_RFFPCNEX *r_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_q_rfnpcnex(const char *desc, SPOOL_Q_RFNPCNEX *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_rfnpcnex(const char *desc, SPOOL_R_RFNPCNEX *r_u,  \nprs_struct *ps, int depth);\n+BOOL smb_io_printer_info_0(const char *desc, RPC_BUFFER *buffer,  \nPRINTER_INFO_0 *info, int depth);\n+BOOL smb_io_printer_info_1(const char *desc, RPC_BUFFER *buffer,  \nPRINTER_INFO_1 *info, int depth);\n+BOOL smb_io_printer_info_2(const char *desc, RPC_BUFFER *buffer,  \nPRINTER_INFO_2 *info, int depth);\n+BOOL smb_io_printer_info_3(const char *desc, RPC_BUFFER *buffer,  \nPRINTER_INFO_3 *info, int depth);\n+BOOL smb_io_printer_info_4(const char *desc, RPC_BUFFER *buffer,  \nPRINTER_INFO_4 *info, int depth);\n+BOOL smb_io_printer_info_5(const char *desc, RPC_BUFFER *buffer,  \nPRINTER_INFO_5 *info, int depth);\n+BOOL smb_io_printer_info_6(const char *desc, RPC_BUFFER *buffer,\n+\t\t\t   PRINTER_INFO_6 *info, int depth);\n+BOOL smb_io_printer_info_7(const char *desc, RPC_BUFFER *buffer,  \nPRINTER_INFO_7 *info, int depth);\n+BOOL smb_io_port_info_1(const char *desc, RPC_BUFFER *buffer,  \nPORT_INFO_1 *info, int depth);\n+BOOL smb_io_port_info_2(const char *desc, RPC_BUFFER *buffer,  \nPORT_INFO_2 *info, int depth);\n+BOOL smb_io_printer_driver_info_1(const char *desc, RPC_BUFFER  \n*buffer, DRIVER_INFO_1 *info, int depth) ;\n+BOOL smb_io_printer_driver_info_2(const char *desc, RPC_BUFFER  \n*buffer, DRIVER_INFO_2 *info, int depth) ;\n+BOOL smb_io_printer_driver_info_3(const char *desc, RPC_BUFFER  \n*buffer, DRIVER_INFO_3 *info, int depth);\n+BOOL smb_io_printer_driver_info_6(const char *desc, RPC_BUFFER  \n*buffer, DRIVER_INFO_6 *info, int depth);\n+BOOL smb_io_job_info_1(const char *desc, RPC_BUFFER *buffer,  \nJOB_INFO_1 *info, int depth);\n+BOOL smb_io_job_info_2(const char *desc, RPC_BUFFER *buffer,  \nJOB_INFO_2 *info, int depth);\n+BOOL smb_io_form_1(const char *desc, RPC_BUFFER *buffer, FORM_1  \n*info, int depth);\n+BOOL smb_io_driverdir_1(const char *desc, RPC_BUFFER *buffer,  \nDRIVER_DIRECTORY_1 *info, int depth);\n+BOOL smb_io_port_1(const char *desc, RPC_BUFFER *buffer, PORT_INFO_1  \n*info, int depth);\n+BOOL smb_io_port_2(const char *desc, RPC_BUFFER *buffer, PORT_INFO_2  \n*info, int depth);\n+BOOL smb_io_printprocessor_info_1(const char *desc, RPC_BUFFER  \n*buffer, PRINTPROCESSOR_1 *info, int depth);\n+BOOL smb_io_printprocdatatype_info_1(const char *desc, RPC_BUFFER  \n*buffer, PRINTPROCDATATYPE_1 *info, int depth);\n+BOOL smb_io_printmonitor_info_1(const char *desc, RPC_BUFFER  \n*buffer, PRINTMONITOR_1 *info, int depth);\n+BOOL smb_io_printmonitor_info_2(const char *desc, RPC_BUFFER  \n*buffer, PRINTMONITOR_2 *info, int depth);\n+uint32 spoolss_size_printer_info_0(PRINTER_INFO_0 *info);\n+uint32 spoolss_size_printer_info_1(PRINTER_INFO_1 *info);\n+uint32 spoolss_size_printer_info_2(PRINTER_INFO_2 *info);\n+uint32 spoolss_size_printer_info_4(PRINTER_INFO_4 *info);\n+uint32 spoolss_size_printer_info_5(PRINTER_INFO_5 *info);\n+uint32 spoolss_size_printer_info_6(PRINTER_INFO_6 *info);\n+uint32 spoolss_size_printer_info_3(PRINTER_INFO_3 *info);\n+uint32 spoolss_size_printer_info_7(PRINTER_INFO_7 *info);\n+uint32 spoolss_size_printer_driver_info_1(DRIVER_INFO_1 *info);\n+uint32 spoolss_size_printer_driver_info_2(DRIVER_INFO_2 *info);\n+uint32 spoolss_size_string_array(uint16 *string);\n+uint32 spoolss_size_printer_driver_info_3(DRIVER_INFO_3 *info);\n+uint32 spoolss_size_printer_driver_info_6(DRIVER_INFO_6 *info);\n+uint32 spoolss_size_job_info_1(JOB_INFO_1 *info);\n+uint32 spoolss_size_job_info_2(JOB_INFO_2 *info);\n+uint32 spoolss_size_form_1(FORM_1 *info);\n+uint32 spoolss_size_port_info_1(PORT_INFO_1 *info);\n+uint32 spoolss_size_driverdir_info_1(DRIVER_DIRECTORY_1 *info);\n+uint32 spoolss_size_printprocessordirectory_info_1 \n(PRINTPROCESSOR_DIRECTORY_1 *info);\n+uint32 spoolss_size_port_info_2(PORT_INFO_2 *info);\n+uint32 spoolss_size_printprocessor_info_1(PRINTPROCESSOR_1 *info);\n+uint32 spoolss_size_printprocdatatype_info_1(PRINTPROCDATATYPE_1  \n*info);\n+uint32 spoolss_size_printer_enum_values(PRINTER_ENUM_VALUES *p);\n+uint32 spoolss_size_printmonitor_info_1(PRINTMONITOR_1 *info);\n+uint32 spoolss_size_printmonitor_info_2(PRINTMONITOR_2 *info);\n+BOOL make_spoolss_q_getprinterdriver2(SPOOL_Q_GETPRINTERDRIVER2 *q_u,\n+\t\t\t       const POLICY_HND *hnd,\n+\t\t\t       const fstring architecture,\n+\t\t\t       uint32 level, uint32 clientmajor, uint32 clientminor,\n+\t\t\t       RPC_BUFFER *buffer, uint32 offered);\n+BOOL spoolss_io_q_getprinterdriver2(const char *desc,  \nSPOOL_Q_GETPRINTERDRIVER2 *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_getprinterdriver2(const char *desc,  \nSPOOL_R_GETPRINTERDRIVER2 *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_enumprinters(\n+\tSPOOL_Q_ENUMPRINTERS *q_u,\n+\tuint32 flags,\n+\tchar *servername,\n+\tuint32 level,\n+\tRPC_BUFFER *buffer,\n+\tuint32 offered\n+);\n+BOOL make_spoolss_q_enumports(SPOOL_Q_ENUMPORTS *q_u,\n+\t\t\t\tfstring servername, uint32 level,\n+\t\t\t\tRPC_BUFFER *buffer, uint32 offered);\n+BOOL spoolss_io_q_enumprinters(const char *desc,  \nSPOOL_Q_ENUMPRINTERS *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumprinters(const char *desc,  \nSPOOL_R_ENUMPRINTERS *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_getprinter(const char *desc, SPOOL_R_GETPRINTER  \n*r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_getprinter(const char *desc, SPOOL_Q_GETPRINTER  \n*q_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_getprinter(\n+\tTALLOC_CTX *mem_ctx,\n+\tSPOOL_Q_GETPRINTER *q_u,\n+\tconst POLICY_HND *hnd,\n+\tuint32 level,\n+\tRPC_BUFFER *buffer,\n+\tuint32 offered\n+);\n+BOOL make_spoolss_q_setprinter(TALLOC_CTX *mem_ctx,  \nSPOOL_Q_SETPRINTER *q_u,\n+\t\t\t\tconst POLICY_HND *hnd, uint32 level, PRINTER_INFO_CTR *info,\n+\t\t\t\tuint32 command);\n+BOOL spoolss_io_r_setprinter(const char *desc, SPOOL_R_SETPRINTER  \n*r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_setprinter(const char *desc, SPOOL_Q_SETPRINTER  \n*q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_fcpn(const char *desc, SPOOL_R_FCPN *r_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_q_fcpn(const char *desc, SPOOL_Q_FCPN *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_addjob(const char *desc, SPOOL_R_ADDJOB *r_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_q_addjob(const char *desc, SPOOL_Q_ADDJOB *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumjobs(const char *desc, SPOOL_R_ENUMJOBS *r_u,  \nprs_struct *ps, int depth);\n+BOOL make_spoolss_q_enumjobs(SPOOL_Q_ENUMJOBS *q_u, const POLICY_HND  \n*hnd,\n+\t\t\t\tuint32 firstjob,\n+\t\t\t\tuint32 numofjobs,\n+\t\t\t\tuint32 level,\n+\t\t\t\tRPC_BUFFER *buffer,\n+\t\t\t\tuint32 offered);\n+BOOL spoolss_io_q_enumjobs(const char *desc, SPOOL_Q_ENUMJOBS *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_schedulejob(const char *desc, SPOOL_R_SCHEDULEJOB  \n*r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_schedulejob(const char *desc, SPOOL_Q_SCHEDULEJOB  \n*q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_setjob(const char *desc, SPOOL_R_SETJOB *r_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_q_setjob(const char *desc, SPOOL_Q_SETJOB *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumprinterdrivers(const char *desc,  \nSPOOL_R_ENUMPRINTERDRIVERS *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_enumprinterdrivers(SPOOL_Q_ENUMPRINTERDRIVERS *q_u,\n+                                const char *name,\n+                                const char *environment,\n+                                uint32 level,\n+                                RPC_BUFFER *buffer, uint32 offered);\n+BOOL spoolss_io_q_enumprinterdrivers(const char *desc,  \nSPOOL_Q_ENUMPRINTERDRIVERS *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_enumforms(const char *desc, SPOOL_Q_ENUMFORMS  \n*q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumforms(const char *desc, SPOOL_R_ENUMFORMS  \n*r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_getform(const char *desc, SPOOL_Q_GETFORM *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_getform(const char *desc, SPOOL_R_GETFORM *r_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumports(const char *desc, SPOOL_R_ENUMPORTS  \n*r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_enumports(const char *desc, SPOOL_Q_ENUMPORTS  \n*q_u, prs_struct *ps, int depth);\n+BOOL spool_io_printer_info_level_1(const char *desc,  \nSPOOL_PRINTER_INFO_LEVEL_1 *il, prs_struct *ps, int depth);\n+BOOL spool_io_printer_info_level_3(const char *desc,  \nSPOOL_PRINTER_INFO_LEVEL_3 *il, prs_struct *ps, int depth);\n+BOOL spool_io_printer_info_level_2(const char *desc,  \nSPOOL_PRINTER_INFO_LEVEL_2 *il, prs_struct *ps, int depth);\n+BOOL spool_io_printer_info_level_7(const char *desc,  \nSPOOL_PRINTER_INFO_LEVEL_7 *il, prs_struct *ps, int depth);\n+BOOL spool_io_printer_info_level(const char *desc,  \nSPOOL_PRINTER_INFO_LEVEL *il, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_addprinterex(const char *desc,  \nSPOOL_Q_ADDPRINTEREX *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_addprinterex(const char *desc,  \nSPOOL_R_ADDPRINTEREX *r_u,\n+\t\t\t       prs_struct *ps, int depth);\n+BOOL spool_io_printer_driver_info_level_3(const char *desc,  \nSPOOL_PRINTER_DRIVER_INFO_LEVEL_3 **q_u,\n+                                          prs_struct *ps, int depth);\n+BOOL spool_io_printer_driver_info_level_6(const char *desc,  \nSPOOL_PRINTER_DRIVER_INFO_LEVEL_6 **q_u,\n+                                          prs_struct *ps, int depth);\n+BOOL smb_io_unibuffer(const char *desc, UNISTR2 *buffer, prs_struct  \n*ps, int depth);\n+BOOL spool_io_printer_driver_info_level(const char *desc,  \nSPOOL_PRINTER_DRIVER_INFO_LEVEL *il, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_addprinterdriver(TALLOC_CTX *mem_ctx,\n+\t\t\t\tSPOOL_Q_ADDPRINTERDRIVER *q_u, const char* srv_name,\n+\t\t\t\tuint32 level, PRINTER_DRIVER_CTR *info);\n+BOOL make_spoolss_driver_info_3(TALLOC_CTX *mem_ctx,\n+\tSPOOL_PRINTER_DRIVER_INFO_LEVEL_3 **spool_drv_info,\n+\t\t\t\tDRIVER_INFO_3 *info3);\n+BOOL make_spoolss_buffer5(TALLOC_CTX *mem_ctx, BUFFER5 *buf5, uint32  \nlen, uint16 *src);\n+BOOL spoolss_io_q_addprinterdriver(const char *desc,  \nSPOOL_Q_ADDPRINTERDRIVER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_addprinterdriver(const char *desc,  \nSPOOL_R_ADDPRINTERDRIVER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_addprinterdriverex(const char *desc,  \nSPOOL_Q_ADDPRINTERDRIVEREX *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_addprinterdriverex(const char *desc,  \nSPOOL_R_ADDPRINTERDRIVEREX *q_u, prs_struct *ps, int depth);\n+BOOL uni_2_asc_printer_driver_3(SPOOL_PRINTER_DRIVER_INFO_LEVEL_3 *uni,\n+                                NT_PRINTER_DRIVER_INFO_LEVEL_3 **asc);\n+BOOL uni_2_asc_printer_driver_6(SPOOL_PRINTER_DRIVER_INFO_LEVEL_6 *uni,\n+                                NT_PRINTER_DRIVER_INFO_LEVEL_6 **asc);\n+BOOL uni_2_asc_printer_info_2(const SPOOL_PRINTER_INFO_LEVEL_2 *uni,\n+                              NT_PRINTER_INFO_LEVEL_2  *d);\n+BOOL make_spoolss_q_getprinterdriverdir(SPOOL_Q_GETPRINTERDRIVERDIR  \n*q_u,\n+                                fstring servername, fstring  \nenv_name, uint32 level,\n+                                RPC_BUFFER *buffer, uint32 offered);\n+BOOL spoolss_io_q_getprinterdriverdir(const char *desc,  \nSPOOL_Q_GETPRINTERDRIVERDIR *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_getprinterdriverdir(const char *desc,  \nSPOOL_R_GETPRINTERDRIVERDIR *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumprintprocessors(const char *desc,  \nSPOOL_R_ENUMPRINTPROCESSORS *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_enumprintprocessors(const char *desc,  \nSPOOL_Q_ENUMPRINTPROCESSORS *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_addprintprocessor(const char *desc,  \nSPOOL_Q_ADDPRINTPROCESSOR *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_addprintprocessor(const char *desc,  \nSPOOL_R_ADDPRINTPROCESSOR *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumprintprocdatatypes(const char *desc,  \nSPOOL_R_ENUMPRINTPROCDATATYPES *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_enumprintprocdatatypes(const char *desc,  \nSPOOL_Q_ENUMPRINTPROCDATATYPES *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_enumprintmonitors(const char *desc,  \nSPOOL_Q_ENUMPRINTMONITORS *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumprintmonitors(const char *desc,  \nSPOOL_R_ENUMPRINTMONITORS *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumprinterdata(const char *desc,  \nSPOOL_R_ENUMPRINTERDATA *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_enumprinterdata(const char *desc,  \nSPOOL_Q_ENUMPRINTERDATA *q_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_enumprinterdata(SPOOL_Q_ENUMPRINTERDATA *q_u,\n+\t\tconst POLICY_HND *hnd,\n+\t\tuint32 idx, uint32 valuelen, uint32 datalen);\n+BOOL make_spoolss_q_enumprinterdataex(SPOOL_Q_ENUMPRINTERDATAEX *q_u,\n+\t\t\t\t      const POLICY_HND *hnd, const char *key,\n+\t\t\t\t      uint32 size);\n+BOOL make_spoolss_q_setprinterdata(SPOOL_Q_SETPRINTERDATA *q_u,  \nconst POLICY_HND *hnd,\n+\t\t\t\t   char* value, uint32 data_type, char* data, uint32 data_size);\n+BOOL make_spoolss_q_setprinterdataex(SPOOL_Q_SETPRINTERDATAEX *q_u,  \nconst POLICY_HND *hnd,\n+\t\t\t\t     char *key, char* value, uint32 data_type, char* data,\n+\t\t\t\t     uint32 data_size);\n+BOOL spoolss_io_q_setprinterdata(const char *desc,  \nSPOOL_Q_SETPRINTERDATA *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_setprinterdata(const char *desc,  \nSPOOL_R_SETPRINTERDATA *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_resetprinter(const char *desc,  \nSPOOL_Q_RESETPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_resetprinter(const char *desc,  \nSPOOL_R_RESETPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_deleteform(const char *desc, SPOOL_Q_DELETEFORM  \n*q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_deleteform(const char *desc, SPOOL_R_DELETEFORM  \n*r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_addform(const char *desc, SPOOL_Q_ADDFORM *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_addform(const char *desc, SPOOL_R_ADDFORM *r_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_q_setform(const char *desc, SPOOL_Q_SETFORM *q_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_setform(const char *desc, SPOOL_R_SETFORM *r_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_r_getjob(const char *desc, SPOOL_R_GETJOB *r_u,  \nprs_struct *ps, int depth);\n+BOOL spoolss_io_q_getjob(const char *desc, SPOOL_Q_GETJOB *q_u,  \nprs_struct *ps, int depth);\n+void free_devmode(DEVICEMODE *devmode);\n+void free_printer_info_1(PRINTER_INFO_1 *printer);\n+void free_printer_info_2(PRINTER_INFO_2 *printer);\n+void free_printer_info_3(PRINTER_INFO_3 *printer);\n+void free_printer_info_4(PRINTER_INFO_4 *printer);\n+void free_printer_info_5(PRINTER_INFO_5 *printer);\n+void free_printer_info_6(PRINTER_INFO_6 *printer);\n+void free_printer_info_7(PRINTER_INFO_7 *printer);\n+void free_job_info_2(JOB_INFO_2 *job);\n+BOOL make_spoolss_q_replyopenprinter(SPOOL_Q_REPLYOPENPRINTER *q_u,\n+\t\t\t       const fstring string, uint32 printer, uint32 type);\n+BOOL spoolss_io_q_replyopenprinter(const char *desc,  \nSPOOL_Q_REPLYOPENPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_replyopenprinter(const char *desc,  \nSPOOL_R_REPLYOPENPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_routerreplyprinter(SPOOL_Q_ROUTERREPLYPRINTER  \n*q_u, POLICY_HND *hnd,\n+\t\t\t\t\tuint32 condition, uint32 change_id);\n+BOOL spoolss_io_q_routerreplyprinter (const char *desc,  \nSPOOL_Q_ROUTERREPLYPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_routerreplyprinter (const char *desc,  \nSPOOL_R_ROUTERREPLYPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_reply_closeprinter(SPOOL_Q_REPLYCLOSEPRINTER  \n*q_u, POLICY_HND *hnd);\n+BOOL spoolss_io_q_replycloseprinter(const char *desc,  \nSPOOL_Q_REPLYCLOSEPRINTER *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_replycloseprinter(const char *desc,  \nSPOOL_R_REPLYCLOSEPRINTER *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_reply_rrpcn(SPOOL_Q_REPLY_RRPCN *q_u, POLICY_HND  \n*hnd,\n+\t\t\t        uint32 change_low, uint32 change_high,\n+\t\t\t\tSPOOL_NOTIFY_INFO *info);\n+BOOL spoolss_io_q_reply_rrpcn(const char *desc, SPOOL_Q_REPLY_RRPCN  \n*q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_reply_rrpcn(const char *desc, SPOOL_R_REPLY_RRPCN  \n*r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_getprinterdataex(const char *desc,  \nSPOOL_Q_GETPRINTERDATAEX *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_getprinterdataex(const char *desc,  \nSPOOL_R_GETPRINTERDATAEX *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_setprinterdataex(const char *desc,  \nSPOOL_Q_SETPRINTERDATAEX *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_setprinterdataex(const char *desc,  \nSPOOL_R_SETPRINTERDATAEX *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_enumprinterkey(SPOOL_Q_ENUMPRINTERKEY *q_u,\n+\t\t\t\t   POLICY_HND *hnd, const char *key,\n+\t\t\t\t   uint32 size);\n+BOOL spoolss_io_q_enumprinterkey(const char *desc,  \nSPOOL_Q_ENUMPRINTERKEY *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumprinterkey(const char *desc,  \nSPOOL_R_ENUMPRINTERKEY *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_deleteprinterkey(SPOOL_Q_DELETEPRINTERKEY *q_u,\n+\t\t\t\t     POLICY_HND *hnd, char *keyname);\n+BOOL spoolss_io_q_deleteprinterkey(const char *desc,  \nSPOOL_Q_DELETEPRINTERKEY *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_deleteprinterkey(const char *desc,  \nSPOOL_R_DELETEPRINTERKEY *r_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_q_enumprinterdataex(const char *desc,  \nSPOOL_Q_ENUMPRINTERDATAEX *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_enumprinterdataex(const char *desc,  \nSPOOL_R_ENUMPRINTERDATAEX *r_u, prs_struct *ps, int depth);\n+BOOL make_spoolss_q_getprintprocessordirectory \n(SPOOL_Q_GETPRINTPROCESSORDIRECTORY *q_u, const char *name, char  \n*environment, int level, RPC_BUFFER *buffer, uint32 offered);\n+BOOL spoolss_io_q_getprintprocessordirectory(const char *desc,  \nSPOOL_Q_GETPRINTPROCESSORDIRECTORY *q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_getprintprocessordirectory(const char *desc,  \nSPOOL_R_GETPRINTPROCESSORDIRECTORY *r_u, prs_struct *ps, int depth);\n+BOOL smb_io_printprocessordirectory_1(const char *desc, RPC_BUFFER  \n*buffer, PRINTPROCESSOR_DIRECTORY_1 *info, int depth);\n+BOOL make_spoolss_q_addform(SPOOL_Q_ADDFORM *q_u, POLICY_HND *handle,\n+\t\t\t    int level, FORM *form);\n+BOOL make_spoolss_q_setform(SPOOL_Q_SETFORM *q_u, POLICY_HND *handle,\n+\t\t\t    int level, const char *form_name, FORM *form);\n+BOOL make_spoolss_q_deleteform(SPOOL_Q_DELETEFORM *q_u, POLICY_HND  \n*handle,\n+\t\t\t       const char *form);\n+BOOL make_spoolss_q_getform(SPOOL_Q_GETFORM *q_u, POLICY_HND *handle,\n+                            const char *formname, uint32 level,\n+\t\t\t    RPC_BUFFER *buffer, uint32 offered);\n+BOOL make_spoolss_q_enumforms(SPOOL_Q_ENUMFORMS *q_u, POLICY_HND  \n*handle,\n+\t\t\t      uint32 level, RPC_BUFFER *buffer,\n+\t\t\t      uint32 offered);\n+BOOL make_spoolss_q_setjob(SPOOL_Q_SETJOB *q_u, POLICY_HND *handle,\n+\t\t\t   uint32 jobid, uint32 level, uint32 command);\n+BOOL make_spoolss_q_getjob(SPOOL_Q_GETJOB *q_u, POLICY_HND *handle,\n+\t\t\t   uint32 jobid, uint32 level, RPC_BUFFER *buffer,\n+\t\t\t   uint32 offered);\n+BOOL make_spoolss_q_startpageprinter(SPOOL_Q_STARTPAGEPRINTER *q_u,\n+\t\t\t\t     POLICY_HND *handle);\n+BOOL make_spoolss_q_endpageprinter(SPOOL_Q_ENDPAGEPRINTER *q_u,\n+\t\t\t\t   POLICY_HND *handle);\n+BOOL make_spoolss_q_startdocprinter(SPOOL_Q_STARTDOCPRINTER *q_u,\n+\t\t\t\t    POLICY_HND *handle, uint32 level,\n+\t\t\t\t    char *docname, char *outputfile,\n+\t\t\t\t    char *datatype);\n+BOOL make_spoolss_q_enddocprinter(SPOOL_Q_ENDDOCPRINTER *q_u,\n+\t\t\t\t  POLICY_HND *handle);\n+BOOL make_spoolss_q_writeprinter(SPOOL_Q_WRITEPRINTER *q_u,\n+\t\t\t\t POLICY_HND *handle, uint32 data_size,\n+\t\t\t\t char *data);\n+BOOL make_spoolss_q_deleteprinterdata(SPOOL_Q_DELETEPRINTERDATA *q_u,\n+\t\t\t\t POLICY_HND *handle, char *valuename);\n+BOOL make_spoolss_q_deleteprinterdataex(SPOOL_Q_DELETEPRINTERDATAEX  \n*q_u,\n+\t\t\t\t\tPOLICY_HND *handle, char *key,\n+\t\t\t\t\tchar *value);\n+BOOL make_spoolss_q_rffpcnex(SPOOL_Q_RFFPCNEX *q_u, POLICY_HND *handle,\n+\t\t\t     uint32 flags, uint32 options, const char *localmachine,\n+\t\t\t     uint32 printerlocal, SPOOL_NOTIFY_OPTION *option);\n+BOOL spoolss_io_q_xcvdataport(const char *desc, SPOOL_Q_XCVDATAPORT  \n*q_u, prs_struct *ps, int depth);\n+BOOL spoolss_io_r_xcvdataport(const char *desc, SPOOL_R_XCVDATAPORT  \n*r_u, prs_struct *ps, int depth);\n+BOOL make_monitorui_buf( RPC_BUFFER *buf, const char *dllname );\n+BOOL convert_port_data_1( NT_PORT_DATA_1 *port1, RPC_BUFFER *buf ) ;\n+\n+/* The following definitions come from rpc_parse/parse_svcctl.c  */\n+\n+BOOL svcctl_io_enum_services_status( const char *desc,  \nENUM_SERVICES_STATUS *enum_status, RPC_BUFFER *buffer, int depth );\n+BOOL svcctl_io_service_status_process( const char *desc,  \nSERVICE_STATUS_PROCESS *status, RPC_BUFFER *buffer, int depth );\n+uint32 svcctl_sizeof_enum_services_status( ENUM_SERVICES_STATUS  \n*status );\n+uint32 svcctl_sizeof_service_config( SERVICE_CONFIG *config );\n+BOOL svcctl_io_q_open_scmanager(const char *desc,  \nSVCCTL_Q_OPEN_SCMANAGER *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_open_scmanager(const char *desc,  \nSVCCTL_R_OPEN_SCMANAGER *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_get_display_name(const char *desc,  \nSVCCTL_Q_GET_DISPLAY_NAME *q_u, prs_struct *ps, int depth);\n+BOOL init_svcctl_r_get_display_name( SVCCTL_R_GET_DISPLAY_NAME *r_u,  \nconst char *displayname );\n+BOOL svcctl_io_r_get_display_name(const char *desc,  \nSVCCTL_R_GET_DISPLAY_NAME *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_open_service(const char *desc,  \nSVCCTL_Q_OPEN_SERVICE *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_open_service(const char *desc,  \nSVCCTL_R_OPEN_SERVICE *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_query_status(const char *desc,  \nSVCCTL_Q_QUERY_STATUS *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_query_status(const char *desc,  \nSVCCTL_R_QUERY_STATUS *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_enum_services_status(const char *desc,  \nSVCCTL_Q_ENUM_SERVICES_STATUS *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_enum_services_status(const char *desc,  \nSVCCTL_R_ENUM_SERVICES_STATUS *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_start_service(const char *desc,  \nSVCCTL_Q_START_SERVICE *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_start_service(const char *desc,  \nSVCCTL_R_START_SERVICE *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_enum_dependent_services(const char *desc,  \nSVCCTL_Q_ENUM_DEPENDENT_SERVICES *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_enum_dependent_services(const char *desc,  \nSVCCTL_R_ENUM_DEPENDENT_SERVICES *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_control_service(const char *desc,  \nSVCCTL_Q_CONTROL_SERVICE *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_control_service(const char *desc,  \nSVCCTL_R_CONTROL_SERVICE *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_query_service_config(const char *desc,  \nSVCCTL_Q_QUERY_SERVICE_CONFIG *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_query_service_config(const char *desc,  \nSVCCTL_R_QUERY_SERVICE_CONFIG *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_query_service_config2(const char *desc,  \nSVCCTL_Q_QUERY_SERVICE_CONFIG2 *q_u, prs_struct *ps, int depth);\n+void init_service_description_buffer(SERVICE_DESCRIPTION *desc,  \nconst char *service_desc );\n+BOOL svcctl_io_service_description( const char *desc,  \nSERVICE_DESCRIPTION *description, RPC_BUFFER *buffer, int depth );\n+uint32 svcctl_sizeof_service_description( SERVICE_DESCRIPTION *desc );\n+BOOL svcctl_io_service_fa( const char *desc, SERVICE_FAILURE_ACTIONS  \n*fa, RPC_BUFFER *buffer, int depth );\n+uint32 svcctl_sizeof_service_fa( SERVICE_FAILURE_ACTIONS *fa);\n+BOOL svcctl_io_r_query_service_config2(const char *desc,  \nSVCCTL_R_QUERY_SERVICE_CONFIG2 *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_query_service_status_ex(const char *desc,  \nSVCCTL_Q_QUERY_SERVICE_STATUSEX *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_query_service_status_ex(const char *desc,  \nSVCCTL_R_QUERY_SERVICE_STATUSEX *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_lock_service_db(const char *desc,  \nSVCCTL_Q_LOCK_SERVICE_DB *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_lock_service_db(const char *desc,  \nSVCCTL_R_LOCK_SERVICE_DB *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_unlock_service_db(const char *desc,  \nSVCCTL_Q_UNLOCK_SERVICE_DB *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_unlock_service_db(const char *desc,  \nSVCCTL_R_UNLOCK_SERVICE_DB *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_query_service_sec(const char *desc,  \nSVCCTL_Q_QUERY_SERVICE_SEC *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_query_service_sec(const char *desc,  \nSVCCTL_R_QUERY_SERVICE_SEC *r_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_q_set_service_sec(const char *desc,  \nSVCCTL_Q_SET_SERVICE_SEC *q_u, prs_struct *ps, int depth);\n+BOOL svcctl_io_r_set_service_sec(const char *desc,  \nSVCCTL_R_SET_SERVICE_SEC *r_u, prs_struct *ps, int depth);\n+\n+/* The following definitions come from rpc_server/srv_dfs_nt.c  */\n+\n+void _dfs_GetManagerVersion(pipes_struct *p, struct  \ndfs_GetManagerVersion *r);\n+WERROR _dfs_Add(pipes_struct *p, struct dfs_Add *r);\n+WERROR _dfs_Remove(pipes_struct *p, struct dfs_Remove *r);\n+WERROR _dfs_Enum(pipes_struct *p, struct dfs_Enum *r);\n+WERROR _dfs_GetInfo(pipes_struct *p, struct dfs_GetInfo *r);\n+WERROR _dfs_SetInfo(pipes_struct *p, struct dfs_SetInfo *r);\n+WERROR _dfs_Rename(pipes_struct *p, struct dfs_Rename *r);\n+WERROR _dfs_Move(pipes_struct *p, struct dfs_Move *r);\n+WERROR _dfs_ManagerGetConfigInfo(pipes_struct *p, struct  \ndfs_ManagerGetConfigInfo *r);\n+WERROR _dfs_ManagerSendSiteInfo(pipes_struct *p, struct  \ndfs_ManagerSendSiteInfo *r);\n+WERROR _dfs_AddFtRoot(pipes_struct *p, struct dfs_AddFtRoot *r);\n+WERROR _dfs_RemoveFtRoot(pipes_struct *p, struct dfs_RemoveFtRoot *r);\n+WERROR _dfs_AddStdRoot(pipes_struct *p, struct dfs_AddStdRoot *r);\n+WERROR _dfs_RemoveStdRoot(pipes_struct *p, struct dfs_RemoveStdRoot  \n*r);\n+WERROR _dfs_ManagerInitialize(pipes_struct *p, struct  \ndfs_ManagerInitialize *r);\n+WERROR _dfs_AddStdRootForced(pipes_struct *p, struct  \ndfs_AddStdRootForced *r);\n+WERROR _dfs_GetDcAddress(pipes_struct *p, struct dfs_GetDcAddress *r);\n+WERROR _dfs_SetDcAddress(pipes_struct *p, struct dfs_SetDcAddress *r);\n+WERROR _dfs_FlushFtTable(pipes_struct *p, struct dfs_FlushFtTable *r);\n+WERROR _dfs_Add2(pipes_struct *p, struct dfs_Add2 *r);\n+WERROR _dfs_Remove2(pipes_struct *p, struct dfs_Remove2 *r);\n+WERROR _dfs_EnumEx(pipes_struct *p, struct dfs_EnumEx *r);\n+WERROR _dfs_SetInfo2(pipes_struct *p, struct dfs_SetInfo2 *r);\n+\n+/* The following definitions come from rpc_server/srv_echo_nt.c  */\n+\n+void _echo_AddOne(pipes_struct *p, struct echo_AddOne *r );\n+void _echo_EchoData(pipes_struct *p, struct echo_EchoData *r);\n+void _echo_SinkData(pipes_struct *p, struct echo_SinkData *r);\n+void _echo_SourceData(pipes_struct *p, struct echo_SourceData *r);\n+void _echo_TestCall(pipes_struct *p, struct echo_TestCall *r);\n+NTSTATUS _echo_TestCall2(pipes_struct *p, struct echo_TestCall2 *r);\n+uint32 _echo_TestSleep(pipes_struct *p, struct echo_TestSleep *r);\n+void _echo_TestEnum(pipes_struct *p, struct echo_TestEnum *r);\n+void _echo_TestSurrounding(pipes_struct *p, struct  \necho_TestSurrounding *r);\n+uint16 _echo_TestDoublePointer(pipes_struct *p, struct  \necho_TestDoublePointer *r);\n+\n+/* The following definitions come from rpc_server/srv_epmapper_nt.c  */\n+\n+uint32 _epm_MapAuth(pipes_struct *p, struct epm_MapAuth *r) ;\n+uint32 _epm_MgmtDelete(pipes_struct *p, struct epm_MgmtDelete *r);\n+uint32 _epm_InqObject(pipes_struct *p, struct epm_InqObject *r);\n+uint32 _epm_LookupHandleFree(pipes_struct *p, struct  \nepm_LookupHandleFree *r);\n+uint32 _epm_Map(pipes_struct *p, struct epm_Map *r);\n+uint32 _epm_Lookup(pipes_struct *p, struct epm_Lookup *r);\n+uint32 _epm_Delete(pipes_struct *p, struct epm_Delete *r);\n+uint32 _epm_Insert(pipes_struct *p, struct epm_Insert *r);\n+\n+/* The following definitions come from rpc_server/srv_eventlog.c  */\n+\n+NTSTATUS rpc_eventlog2_init(void);\n+void eventlog2_get_pipe_fns(struct api_struct **fns, int *n_fns);\n+\n+/* The following definitions come from rpc_server/ \nsrv_eventlog_lib.c  */\n+\n+TDB_CONTEXT *elog_init_tdb( char *tdbfilename );\n+char *elog_tdbname( const char *name );\n+int elog_tdb_size( TDB_CONTEXT * tdb, int *MaxSize, int *Retention );\n+BOOL make_way_for_eventlogs( TDB_CONTEXT * the_tdb, int32 needed,\n+\t\t\t     BOOL whack_by_date );\n+BOOL prune_eventlog( TDB_CONTEXT * tdb );\n+BOOL can_write_to_eventlog( TDB_CONTEXT * tdb, int32 needed );\n+ELOG_TDB *elog_open_tdb( char *logname, BOOL force_clear );\n+int elog_close_tdb( ELOG_TDB *etdb, BOOL force_close );\n+int write_eventlog_tdb( TDB_CONTEXT * the_tdb, Eventlog_entry * ee );\n+void fixup_eventlog_entry( Eventlog_entry * ee );\n+BOOL parse_logentry( char *line, Eventlog_entry * entry, BOOL * eor );\n+\n+/* The following definitions come from rpc_server/srv_eventlog_nt.c  */\n+\n+NTSTATUS _eventlog_open_eventlog( pipes_struct * p,\n+\t\t\t\tEVENTLOG_Q_OPEN_EVENTLOG * q_u,\n+\t\t\t\tEVENTLOG_R_OPEN_EVENTLOG * r_u );\n+NTSTATUS _eventlog_clear_eventlog( pipes_struct * p,\n+\t\t\t\t EVENTLOG_Q_CLEAR_EVENTLOG * q_u,\n+\t\t\t\t EVENTLOG_R_CLEAR_EVENTLOG * r_u );\n+NTSTATUS _eventlog_CloseEventLog( pipes_struct * p, struct  \neventlog_CloseEventLog *r );\n+NTSTATUS _eventlog_read_eventlog( pipes_struct * p,\n+\t\t\t\tEVENTLOG_Q_READ_EVENTLOG * q_u,\n+\t\t\t\tEVENTLOG_R_READ_EVENTLOG * r_u );\n+NTSTATUS _eventlog_get_oldest_entry( pipes_struct * p,\n+\t\t\t\t   EVENTLOG_Q_GET_OLDEST_ENTRY * q_u,\n+\t\t\t\t   EVENTLOG_R_GET_OLDEST_ENTRY * r_u );\n+NTSTATUS _eventlog_get_num_records( pipes_struct * p,\n+\t\t\t\t  EVENTLOG_Q_GET_NUM_RECORDS * q_u,\n+\t\t\t\t  EVENTLOG_R_GET_NUM_RECORDS * r_u );\n+NTSTATUS _eventlog_ClearEventLogW(pipes_struct *p, struct  \neventlog_ClearEventLogW *r);\n+NTSTATUS _eventlog_BackupEventLogW(pipes_struct *p, struct  \neventlog_BackupEventLogW *r);\n+NTSTATUS _eventlog_DeregisterEventSource(pipes_struct *p, struct  \neventlog_DeregisterEventSource *r);\n+NTSTATUS _eventlog_GetNumRecords(pipes_struct *p, struct  \neventlog_GetNumRecords *r);\n+NTSTATUS _eventlog_GetOldestRecord(pipes_struct *p, struct  \neventlog_GetOldestRecord *r);\n+NTSTATUS _eventlog_ChangeNotify(pipes_struct *p, struct  \neventlog_ChangeNotify *r);\n+NTSTATUS _eventlog_OpenEventLogW(pipes_struct *p, struct  \neventlog_OpenEventLogW *r);\n+NTSTATUS _eventlog_RegisterEventSourceW(pipes_struct *p, struct  \neventlog_RegisterEventSourceW *r);\n+NTSTATUS _eventlog_OpenBackupEventLogW(pipes_struct *p, struct  \neventlog_OpenBackupEventLogW *r);\n+NTSTATUS _eventlog_ReadEventLogW(pipes_struct *p, struct  \neventlog_ReadEventLogW *r);\n+NTSTATUS _eventlog_ReportEventW(pipes_struct *p, struct  \neventlog_ReportEventW *r);\n+NTSTATUS _eventlog_ClearEventLogA(pipes_struct *p, struct  \neventlog_ClearEventLogA *r);\n+NTSTATUS _eventlog_BackupEventLogA(pipes_struct *p, struct  \neventlog_BackupEventLogA *r);\n+NTSTATUS _eventlog_OpenEventLogA(pipes_struct *p, struct  \neventlog_OpenEventLogA *r);\n+NTSTATUS _eventlog_RegisterEventSourceA(pipes_struct *p, struct  \neventlog_RegisterEventSourceA *r);\n+NTSTATUS _eventlog_OpenBackupEventLogA(pipes_struct *p, struct  \neventlog_OpenBackupEventLogA *r);\n+NTSTATUS _eventlog_ReadEventLogA(pipes_struct *p, struct  \neventlog_ReadEventLogA *r);\n+NTSTATUS _eventlog_ReportEventA(pipes_struct *p, struct  \neventlog_ReportEventA *r);\n+NTSTATUS _eventlog_RegisterClusterSvc(pipes_struct *p, struct  \neventlog_RegisterClusterSvc *r);\n+NTSTATUS _eventlog_DeregisterClusterSvc(pipes_struct *p, struct  \neventlog_DeregisterClusterSvc *r);\n+NTSTATUS _eventlog_WriteClusterEvents(pipes_struct *p, struct  \neventlog_WriteClusterEvents *r);\n+NTSTATUS _eventlog_GetLogIntormation(pipes_struct *p, struct  \neventlog_GetLogIntormation *r);\n+NTSTATUS _eventlog_FlushEventLog(pipes_struct *p, struct  \neventlog_FlushEventLog *r);\n+\n+/* The following definitions come from rpc_server/ \nsrv_initshutdown_nt.c  */\n+\n+WERROR _initshutdown_Init(pipes_struct *p, struct initshutdown_Init  \n*r);\n+WERROR _initshutdown_InitEx(pipes_struct *p, struct  \ninitshutdown_InitEx *r);\n+WERROR _initshutdown_Abort(pipes_struct *p, struct  \ninitshutdown_Abort *r);\n+\n+/* The following definitions come from rpc_server/srv_lsa.c  */\n+\n+void lsa_get_pipe_fns( struct api_struct **fns, int *n_fns );\n+NTSTATUS rpc_lsa_init(void);\n+\n+/* The following definitions come from rpc_server/srv_lsa_ds.c  */\n+\n+void lsa_ds_get_pipe_fns( struct api_struct **fns, int *n_fns );\n+NTSTATUS rpc_lsa_ds_init(void);\n+\n+/* The following definitions come from rpc_server/srv_lsa_ds_nt.c  */\n+\n+NTSTATUS _dsrole_get_primary_dominfo(pipes_struct *p,  \nDS_Q_GETPRIMDOMINFO *q_u, DS_R_GETPRIMDOMINFO *r_u);\n+\n+/* The following definitions come from rpc_server/srv_lsa_hnd.c  */\n+\n+BOOL init_pipe_handle_list(pipes_struct *p, char *pipe_name);\n+BOOL create_policy_hnd(pipes_struct *p, POLICY_HND *hnd, void  \n(*free_fn)(void *), void *data_ptr);\n+BOOL find_policy_by_hnd(pipes_struct *p, POLICY_HND *hnd, void  \n**data_p);\n+BOOL close_policy_hnd(pipes_struct *p, POLICY_HND *hnd);\n+void close_policy_by_pipe(pipes_struct *p);\n+BOOL pipe_access_check(pipes_struct *p);\n+\n+/* The following definitions come from rpc_server/srv_lsa_nt.c  */\n+\n+NTSTATUS _lsa_open_policy2(pipes_struct *p, LSA_Q_OPEN_POL2 *q_u,  \nLSA_R_OPEN_POL2 *r_u);\n+NTSTATUS _lsa_open_policy(pipes_struct *p, LSA_Q_OPEN_POL *q_u,  \nLSA_R_OPEN_POL *r_u);\n+NTSTATUS _lsa_enum_trust_dom(pipes_struct *p, LSA_Q_ENUM_TRUST_DOM  \n*q_u,\n+\t\t\t     LSA_R_ENUM_TRUST_DOM *r_u);\n+NTSTATUS _lsa_query_info(pipes_struct *p, LSA_Q_QUERY_INFO *q_u,  \nLSA_R_QUERY_INFO *r_u);\n+NTSTATUS _lsa_lookup_sids(pipes_struct *p,\n+\t\t\t  LSA_Q_LOOKUP_SIDS *q_u,\n+\t\t\t  LSA_R_LOOKUP_SIDS *r_u);\n+NTSTATUS _lsa_lookup_sids2(pipes_struct *p,\n+\t\t\t  LSA_Q_LOOKUP_SIDS2 *q_u,\n+\t\t\t  LSA_R_LOOKUP_SIDS2 *r_u);\n+NTSTATUS _lsa_lookup_sids3(pipes_struct *p,\n+\t\t\t  LSA_Q_LOOKUP_SIDS3 *q_u,\n+\t\t\t  LSA_R_LOOKUP_SIDS3 *r_u);\n+NTSTATUS _lsa_lookup_names(pipes_struct *p,LSA_Q_LOOKUP_NAMES *q_u,  \nLSA_R_LOOKUP_NAMES *r_u);\n+NTSTATUS _lsa_lookup_names2(pipes_struct *p, LSA_Q_LOOKUP_NAMES2  \n*q_u, LSA_R_LOOKUP_NAMES2 *r_u);\n+NTSTATUS _lsa_lookup_names3(pipes_struct *p, LSA_Q_LOOKUP_NAMES3  \n*q_u, LSA_R_LOOKUP_NAMES3 *r_u);\n+NTSTATUS _lsa_lookup_names4(pipes_struct *p, LSA_Q_LOOKUP_NAMES4  \n*q_u, LSA_R_LOOKUP_NAMES4 *r_u);\n+NTSTATUS _lsa_Close(pipes_struct *p, struct lsa_Close *r);\n+NTSTATUS _lsa_OpenSecret(pipes_struct *p, struct lsa_OpenSecret *r);\n+NTSTATUS _lsa_OpenTrustedDomain(pipes_struct *p, struct  \nlsa_OpenTrustedDomain *r);\n+NTSTATUS _lsa_CreateTrustedDomain(pipes_struct *p, struct  \nlsa_CreateTrustedDomain *r);\n+NTSTATUS _lsa_CreateSecret(pipes_struct *p, struct lsa_CreateSecret  \n*r);\n+NTSTATUS _lsa_SetSecret(pipes_struct *p, struct lsa_SetSecret *r);\n+NTSTATUS _lsa_delete_object(pipes_struct *p, LSA_Q_DELETE_OBJECT  \n*q_u, LSA_R_DELETE_OBJECT *r_u);\n+NTSTATUS _lsa_enum_privs(pipes_struct *p, LSA_Q_ENUM_PRIVS *q_u,  \nLSA_R_ENUM_PRIVS *r_u);\n+NTSTATUS _lsa_priv_get_dispname(pipes_struct *p,  \nLSA_Q_PRIV_GET_DISPNAME *q_u, LSA_R_PRIV_GET_DISPNAME *r_u);\n+NTSTATUS _lsa_enum_accounts(pipes_struct *p, LSA_Q_ENUM_ACCOUNTS  \n*q_u, LSA_R_ENUM_ACCOUNTS *r_u);\n+NTSTATUS _lsa_unk_get_connuser(pipes_struct *p,  \nLSA_Q_UNK_GET_CONNUSER *q_u, LSA_R_UNK_GET_CONNUSER *r_u);\n+NTSTATUS _lsa_create_account(pipes_struct *p, LSA_Q_CREATEACCOUNT  \n*q_u, LSA_R_CREATEACCOUNT *r_u);\n+NTSTATUS _lsa_open_account(pipes_struct *p, LSA_Q_OPENACCOUNT *q_u,  \nLSA_R_OPENACCOUNT *r_u);\n+NTSTATUS _lsa_enum_privsaccount(pipes_struct *p, prs_struct *ps,  \nLSA_Q_ENUMPRIVSACCOUNT *q_u, LSA_R_ENUMPRIVSACCOUNT *r_u);\n+NTSTATUS _lsa_getsystemaccount(pipes_struct *p,  \nLSA_Q_GETSYSTEMACCOUNT *q_u, LSA_R_GETSYSTEMACCOUNT *r_u);\n+NTSTATUS _lsa_setsystemaccount(pipes_struct *p,  \nLSA_Q_SETSYSTEMACCOUNT *q_u, LSA_R_SETSYSTEMACCOUNT *r_u);\n+NTSTATUS _lsa_addprivs(pipes_struct *p, LSA_Q_ADDPRIVS *q_u,  \nLSA_R_ADDPRIVS *r_u);\n+NTSTATUS _lsa_removeprivs(pipes_struct *p, LSA_Q_REMOVEPRIVS *q_u,  \nLSA_R_REMOVEPRIVS *r_u);\n+NTSTATUS _lsa_query_secobj(pipes_struct *p, LSA_Q_QUERY_SEC_OBJ  \n*q_u, LSA_R_QUERY_SEC_OBJ *r_u);\n+NTSTATUS _lsa_query_info2(pipes_struct *p, LSA_Q_QUERY_INFO2 *q_u,  \nLSA_R_QUERY_INFO2 *r_u);\n+NTSTATUS _lsa_add_acct_rights(pipes_struct *p, LSA_Q_ADD_ACCT_RIGHTS  \n*q_u, LSA_R_ADD_ACCT_RIGHTS *r_u);\n+NTSTATUS _lsa_remove_acct_rights(pipes_struct *p,  \nLSA_Q_REMOVE_ACCT_RIGHTS *q_u, LSA_R_REMOVE_ACCT_RIGHTS *r_u);\n+NTSTATUS _lsa_enum_acct_rights(pipes_struct *p,  \nLSA_Q_ENUM_ACCT_RIGHTS *q_u, LSA_R_ENUM_ACCT_RIGHTS *r_u);\n+NTSTATUS _lsa_lookup_priv_value(pipes_struct *p,  \nLSA_Q_LOOKUP_PRIV_VALUE *q_u, LSA_R_LOOKUP_PRIV_VALUE *r_u);\n+NTSTATUS _lsa_Delete(pipes_struct *p, struct lsa_Delete *r);\n+NTSTATUS _lsa_EnumPrivs(pipes_struct *p, struct lsa_EnumPrivs *r);\n+NTSTATUS _lsa_QuerySecurity(pipes_struct *p, struct  \nlsa_QuerySecurity *r);\n+NTSTATUS _lsa_SetSecObj(pipes_struct *p, struct lsa_SetSecObj *r);\n+NTSTATUS _lsa_ChangePassword(pipes_struct *p, struct  \nlsa_ChangePassword *r);\n+NTSTATUS _lsa_OpenPolicy(pipes_struct *p, struct lsa_OpenPolicy *r);\n+NTSTATUS _lsa_QueryInfoPolicy(pipes_struct *p, struct  \nlsa_QueryInfoPolicy *r);\n+NTSTATUS _lsa_SetInfoPolicy(pipes_struct *p, struct  \nlsa_SetInfoPolicy *r);\n+NTSTATUS _lsa_ClearAuditLog(pipes_struct *p, struct  \nlsa_ClearAuditLog *r);\n+NTSTATUS _lsa_CreateAccount(pipes_struct *p, struct  \nlsa_CreateAccount *r);\n+NTSTATUS _lsa_EnumAccounts(pipes_struct *p, struct lsa_EnumAccounts  \n*r);\n+NTSTATUS _lsa_EnumTrustDom(pipes_struct *p, struct lsa_EnumTrustDom  \n*r);\n+NTSTATUS _lsa_LookupNames(pipes_struct *p, struct lsa_LookupNames *r);\n+NTSTATUS _lsa_LookupSids(pipes_struct *p, struct lsa_LookupSids *r);\n+NTSTATUS _lsa_OpenAccount(pipes_struct *p, struct lsa_OpenAccount *r);\n+NTSTATUS _lsa_EnumPrivsAccount(pipes_struct *p, struct  \nlsa_EnumPrivsAccount *r);\n+NTSTATUS _lsa_AddPrivilegesToAccount(pipes_struct *p, struct  \nlsa_AddPrivilegesToAccount *r);\n+NTSTATUS _lsa_RemovePrivilegesFromAccount(pipes_struct *p, struct  \nlsa_RemovePrivilegesFromAccount *r);\n+NTSTATUS _lsa_GetQuotasForAccount(pipes_struct *p, struct  \nlsa_GetQuotasForAccount *r);\n+NTSTATUS _lsa_SetQuotasForAccount(pipes_struct *p, struct  \nlsa_SetQuotasForAccount *r);\n+NTSTATUS _lsa_GetSystemAccessAccount(pipes_struct *p, struct  \nlsa_GetSystemAccessAccount *r);\n+NTSTATUS _lsa_SetSystemAccessAccount(pipes_struct *p, struct  \nlsa_SetSystemAccessAccount *r);\n+NTSTATUS _lsa_QueryTrustedDomainInfo(pipes_struct *p, struct  \nlsa_QueryTrustedDomainInfo *r);\n+NTSTATUS _lsa_SetInformationTrustedDomain(pipes_struct *p, struct  \nlsa_SetInformationTrustedDomain *r);\n+NTSTATUS _lsa_QuerySecret(pipes_struct *p, struct lsa_QuerySecret *r);\n+NTSTATUS _lsa_LookupPrivValue(pipes_struct *p, struct  \nlsa_LookupPrivValue *r);\n+NTSTATUS _lsa_LookupPrivName(pipes_struct *p, struct  \nlsa_LookupPrivName *r);\n+NTSTATUS _lsa_LookupPrivDisplayName(pipes_struct *p, struct  \nlsa_LookupPrivDisplayName *r);\n+NTSTATUS _lsa_DeleteObject(pipes_struct *p, struct lsa_DeleteObject  \n*r);\n+NTSTATUS _lsa_EnumAccountsWithUserRight(pipes_struct *p, struct  \nlsa_EnumAccountsWithUserRight *r);\n+NTSTATUS _lsa_EnumAccountRights(pipes_struct *p, struct  \nlsa_EnumAccountRights *r);\n+NTSTATUS _lsa_AddAccountRights(pipes_struct *p, struct  \nlsa_AddAccountRights *r);\n+NTSTATUS _lsa_RemoveAccountRights(pipes_struct *p, struct  \nlsa_RemoveAccountRights *r);\n+NTSTATUS _lsa_QueryTrustedDomainInfoBySid(pipes_struct *p, struct  \nlsa_QueryTrustedDomainInfoBySid *r);\n+NTSTATUS _lsa_SetTrustedDomainInfo(pipes_struct *p, struct  \nlsa_SetTrustedDomainInfo *r);\n+NTSTATUS _lsa_DeleteTrustedDomain(pipes_struct *p, struct  \nlsa_DeleteTrustedDomain *r);\n+NTSTATUS _lsa_StorePrivateData(pipes_struct *p, struct  \nlsa_StorePrivateData *r);\n+NTSTATUS _lsa_RetrievePrivateData(pipes_struct *p, struct  \nlsa_RetrievePrivateData *r);\n+NTSTATUS _lsa_OpenPolicy2(pipes_struct *p, struct lsa_OpenPolicy2 *r);\n+NTSTATUS _lsa_GetUserName(pipes_struct *p, struct lsa_GetUserName *r);\n+NTSTATUS _lsa_QueryInfoPolicy2(pipes_struct *p, struct  \nlsa_QueryInfoPolicy2 *r);\n+NTSTATUS _lsa_SetInfoPolicy2(pipes_struct *p, struct  \nlsa_SetInfoPolicy2 *r);\n+NTSTATUS _lsa_QueryTrustedDomainInfoByName(pipes_struct *p, struct  \nlsa_QueryTrustedDomainInfoByName *r);\n+NTSTATUS _lsa_SetTrustedDomainInfoByName(pipes_struct *p, struct  \nlsa_SetTrustedDomainInfoByName *r);\n+NTSTATUS _lsa_EnumTrustedDomainsEx(pipes_struct *p, struct  \nlsa_EnumTrustedDomainsEx *r);\n+NTSTATUS _lsa_CreateTrustedDomainEx(pipes_struct *p, struct  \nlsa_CreateTrustedDomainEx *r);\n+NTSTATUS _lsa_CloseTrustedDomainEx(pipes_struct *p, struct  \nlsa_CloseTrustedDomainEx *r);\n+NTSTATUS _lsa_QueryDomainInformationPolicy(pipes_struct *p, struct  \nlsa_QueryDomainInformationPolicy *r);\n+NTSTATUS _lsa_SetDomainInformationPolicy(pipes_struct *p, struct  \nlsa_SetDomainInformationPolicy *r);\n+NTSTATUS _lsa_OpenTrustedDomainByName(pipes_struct *p, struct  \nlsa_OpenTrustedDomainByName *r);\n+NTSTATUS _lsa_TestCall(pipes_struct *p, struct lsa_TestCall *r);\n+NTSTATUS _lsa_LookupSids2(pipes_struct *p, struct lsa_LookupSids2 *r);\n+NTSTATUS _lsa_LookupNames2(pipes_struct *p, struct lsa_LookupNames2  \n*r);\n+NTSTATUS _lsa_CreateTrustedDomainEx2(pipes_struct *p, struct  \nlsa_CreateTrustedDomainEx2 *r);\n+NTSTATUS _lsa_CREDRWRITE(pipes_struct *p, struct lsa_CREDRWRITE *r);\n+NTSTATUS _lsa_CREDRREAD(pipes_struct *p, struct lsa_CREDRREAD *r);\n+NTSTATUS _lsa_CREDRENUMERATE(pipes_struct *p, struct  \nlsa_CREDRENUMERATE *r);\n+NTSTATUS _lsa_CREDRWRITEDOMAINCREDENTIALS(pipes_struct *p, struct  \nlsa_CREDRWRITEDOMAINCREDENTIALS *r);\n+NTSTATUS _lsa_CREDRREADDOMAINCREDENTIALS(pipes_struct *p, struct  \nlsa_CREDRREADDOMAINCREDENTIALS *r);\n+NTSTATUS _lsa_CREDRDELETE(pipes_struct *p, struct lsa_CREDRDELETE *r);\n+NTSTATUS _lsa_CREDRGETTARGETINFO(pipes_struct *p, struct  \nlsa_CREDRGETTARGETINFO *r);\n+NTSTATUS _lsa_CREDRPROFILELOADED(pipes_struct *p, struct  \nlsa_CREDRPROFILELOADED *r);\n+NTSTATUS _lsa_LookupNames3(pipes_struct *p, struct lsa_LookupNames3  \n*r);\n+NTSTATUS _lsa_CREDRGETSESSIONTYPES(pipes_struct *p, struct  \nlsa_CREDRGETSESSIONTYPES *r);\n+NTSTATUS _lsa_LSARREGISTERAUDITEVENT(pipes_struct *p, struct  \nlsa_LSARREGISTERAUDITEVENT *r);\n+NTSTATUS _lsa_LSARGENAUDITEVENT(pipes_struct *p, struct  \nlsa_LSARGENAUDITEVENT *r);\n+NTSTATUS _lsa_LSARUNREGISTERAUDITEVENT(pipes_struct *p, struct  \nlsa_LSARUNREGISTERAUDITEVENT *r);\n+NTSTATUS _lsa_LSARQUERYFORESTTRUSTINFORMATION(pipes_struct *p,  \nstruct lsa_LSARQUERYFORESTTRUSTINFORMATION *r);\n+NTSTATUS _lsa_LSARSETFORESTTRUSTINFORMATION(pipes_struct *p, struct  \nlsa_LSARSETFORESTTRUSTINFORMATION *r);\n+NTSTATUS _lsa_CREDRRENAME(pipes_struct *p, struct lsa_CREDRRENAME *r);\n+NTSTATUS _lsa_LookupSids3(pipes_struct *p, struct lsa_LookupSids3 *r);\n+NTSTATUS _lsa_LookupNames4(pipes_struct *p, struct lsa_LookupNames4  \n*r);\n+NTSTATUS _lsa_LSAROPENPOLICYSCE(pipes_struct *p, struct  \nlsa_LSAROPENPOLICYSCE *r);\n+NTSTATUS _lsa_LSARADTREGISTERSECURITYEVENTSOURCE(pipes_struct *p,  \nstruct lsa_LSARADTREGISTERSECURITYEVENTSOURCE *r);\n+NTSTATUS _lsa_LSARADTUNREGISTERSECURITYEVENTSOURCE(pipes_struct *p,  \nstruct lsa_LSARADTUNREGISTERSECURITYEVENTSOURCE *r);\n+NTSTATUS _lsa_LSARADTREPORTSECURITYEVENT(pipes_struct *p, struct  \nlsa_LSARADTREPORTSECURITYEVENT *r);\n+\n+/* The following definitions come from rpc_server/srv_netlog.c  */\n+\n+void netlog_get_pipe_fns( struct api_struct **fns, int *n_fns );\n+NTSTATUS rpc_net_init(void);\n+\n+/* The following definitions come from rpc_server/srv_netlog_nt.c  */\n+\n+NTSTATUS _net_logon_ctrl(pipes_struct *p, NET_Q_LOGON_CTRL *q_u,\n+\t\t       NET_R_LOGON_CTRL *r_u);\n+NTSTATUS _net_logon_ctrl2(pipes_struct *p, NET_Q_LOGON_CTRL2 *q_u,  \nNET_R_LOGON_CTRL2 *r_u);\n+NTSTATUS _net_trust_dom_list(pipes_struct *p, NET_Q_TRUST_DOM_LIST  \n*q_u, NET_R_TRUST_DOM_LIST *r_u);\n+NTSTATUS _net_req_chal(pipes_struct *p, NET_Q_REQ_CHAL *q_u,  \nNET_R_REQ_CHAL *r_u);\n+NTSTATUS _net_auth(pipes_struct *p, NET_Q_AUTH *q_u, NET_R_AUTH *r_u);\n+NTSTATUS _net_auth_2(pipes_struct *p, NET_Q_AUTH_2 *q_u,  \nNET_R_AUTH_2 *r_u);\n+NTSTATUS _net_srv_pwset(pipes_struct *p, NET_Q_SRV_PWSET *q_u,  \nNET_R_SRV_PWSET *r_u);\n+NTSTATUS _net_sam_logoff(pipes_struct *p, NET_Q_SAM_LOGOFF *q_u,  \nNET_R_SAM_LOGOFF *r_u);\n+NTSTATUS _net_sam_logon(pipes_struct *p, NET_Q_SAM_LOGON *q_u,  \nNET_R_SAM_LOGON *r_u);\n+NTSTATUS _net_sam_logon_ex(pipes_struct *p, NET_Q_SAM_LOGON_EX *q_u,  \nNET_R_SAM_LOGON_EX *r_u);\n+NTSTATUS _ds_enum_dom_trusts(pipes_struct *p, DS_Q_ENUM_DOM_TRUSTS  \n*q_u,\n+\t\t\t     DS_R_ENUM_DOM_TRUSTS *r_u);\n+\n+/* The following definitions come from rpc_server/srv_ntsvcs.c  */\n+\n+void ntsvcs_get_pipe_fns( struct api_struct **fns, int *n_fns );\n+NTSTATUS rpc_ntsvcs_init(void);\n+\n+/* The following definitions come from rpc_server/srv_ntsvcs_nt.c  */\n+\n+WERROR _ntsvcs_get_version( pipes_struct *p, NTSVCS_Q_GET_VERSION  \n*q_u, NTSVCS_R_GET_VERSION *r_u );\n+WERROR _ntsvcs_get_device_list_size( pipes_struct *p,  \nNTSVCS_Q_GET_DEVICE_LIST_SIZE *q_u, NTSVCS_R_GET_DEVICE_LIST_SIZE  \n*r_u );\n+WERROR _ntsvcs_get_device_list( pipes_struct *p,  \nNTSVCS_Q_GET_DEVICE_LIST *q_u, NTSVCS_R_GET_DEVICE_LIST *r_u );\n+WERROR _ntsvcs_get_device_reg_property( pipes_struct *p,  \nNTSVCS_Q_GET_DEVICE_REG_PROPERTY *q_u,  \nNTSVCS_R_GET_DEVICE_REG_PROPERTY *r_u );\n+WERROR _ntsvcs_validate_device_instance( pipes_struct *p,  \nNTSVCS_Q_VALIDATE_DEVICE_INSTANCE *q_u,  \nNTSVCS_R_VALIDATE_DEVICE_INSTANCE *r_u );\n+WERROR _ntsvcs_get_hw_profile_info( pipes_struct *p,  \nNTSVCS_Q_GET_HW_PROFILE_INFO *q_u, NTSVCS_R_GET_HW_PROFILE_INFO *r_u );\n+WERROR _ntsvcs_hw_profile_flags( pipes_struct *p,  \nNTSVCS_Q_HW_PROFILE_FLAGS *q_u, NTSVCS_R_HW_PROFILE_FLAGS *r_u );\n+\n+/* The following definitions come from rpc_server/srv_pipe.c  */\n+\n+BOOL create_next_pdu(pipes_struct *p);\n+BOOL api_pipe_bind_auth3(pipes_struct *p, prs_struct *rpc_in_p);\n+BOOL setup_fault_pdu(pipes_struct *p, NTSTATUS status);\n+BOOL setup_cancel_ack_reply(pipes_struct *p, prs_struct *rpc_in_p);\n+BOOL check_bind_req(struct pipes_struct *p, RPC_IFACE* abstract,\n+                    RPC_IFACE* transfer, uint32 context_id);\n+NTSTATUS rpc_pipe_register_commands(int version, const char *clnt,  \nconst char *srv, const struct api_struct *cmds, int size);\n+BOOL api_pipe_bind_req(pipes_struct *p, prs_struct *rpc_in_p);\n+BOOL api_pipe_alter_context(pipes_struct *p, prs_struct *rpc_in_p);\n+BOOL api_pipe_ntlmssp_auth_process(pipes_struct *p, prs_struct *rpc_in,\n+\t\t\t\t\tuint32 *p_ss_padding_len, NTSTATUS *pstatus);\n+BOOL api_pipe_schannel_process(pipes_struct *p, prs_struct *rpc_in,  \nuint32 *p_ss_padding_len);\n+void free_pipe_rpc_context( PIPE_RPC_FNS *list );\n+BOOL api_pipe_request(pipes_struct *p);\n+BOOL api_rpcTNP(pipes_struct *p, const char *rpc_name,\n+\t\tconst struct api_struct *api_rpc_cmds, int n_cmds);\n+void get_pipe_fns( int idx, struct api_struct **fns, int *n_fns );\n+\n+/* The following definitions come from rpc_server/srv_pipe_hnd.c  */\n+\n+smb_np_struct *get_first_pipe(void);\n+smb_np_struct *get_next_pipe(smb_np_struct *p);\n+pipes_struct *get_first_internal_pipe(void);\n+pipes_struct *get_next_internal_pipe(pipes_struct *p);\n+void set_pipe_handle_offset(int max_open_files);\n+void reset_chain_p(void);\n+void init_rpc_pipe_hnd(void);\n+smb_np_struct *open_rpc_pipe_p(char *pipe_name,\n+\t\t\t      connection_struct *conn, uint16 vuid);\n+ssize_t write_to_pipe(smb_np_struct *p, char *data, size_t n);\n+ssize_t read_from_pipe(smb_np_struct *p, char *data, size_t n,\n+\t\tBOOL *is_data_outstanding);\n+BOOL wait_rpc_pipe_hnd_state(smb_np_struct *p, uint16 priority);\n+BOOL set_rpc_pipe_hnd_state(smb_np_struct *p, uint16 device_state);\n+BOOL close_rpc_pipe_hnd(smb_np_struct *p);\n+void pipe_close_conn(connection_struct *conn);\n+smb_np_struct *get_rpc_pipe_p(char *buf, int where);\n+smb_np_struct *get_rpc_pipe(int pnum);\n+\n+/* The following definitions come from rpc_server/srv_samr.c  */\n+\n+void samr_get_pipe_fns( struct api_struct **fns, int *n_fns );\n+NTSTATUS rpc_samr_init(void);\n+\n+/* The following definitions come from rpc_server/srv_samr_nt.c  */\n+\n+NTSTATUS _samr_close_hnd(pipes_struct *p, SAMR_Q_CLOSE_HND *q_u,  \nSAMR_R_CLOSE_HND *r_u);\n+NTSTATUS _samr_open_domain(pipes_struct *p, SAMR_Q_OPEN_DOMAIN *q_u,  \nSAMR_R_OPEN_DOMAIN *r_u);\n+NTSTATUS _samr_get_usrdom_pwinfo(pipes_struct *p,  \nSAMR_Q_GET_USRDOM_PWINFO *q_u, SAMR_R_GET_USRDOM_PWINFO *r_u);\n+NTSTATUS _samr_set_sec_obj(pipes_struct *p, SAMR_Q_SET_SEC_OBJ *q_u,  \nSAMR_R_SET_SEC_OBJ *r_u);\n+NTSTATUS _samr_query_sec_obj(pipes_struct *p, SAMR_Q_QUERY_SEC_OBJ  \n*q_u, SAMR_R_QUERY_SEC_OBJ *r_u);\n+NTSTATUS _samr_enum_dom_users(pipes_struct *p, SAMR_Q_ENUM_DOM_USERS  \n*q_u,\n+\t\t\t      SAMR_R_ENUM_DOM_USERS *r_u);\n+NTSTATUS _samr_enum_dom_groups(pipes_struct *p,  \nSAMR_Q_ENUM_DOM_GROUPS *q_u, SAMR_R_ENUM_DOM_GROUPS *r_u);\n+NTSTATUS _samr_enum_dom_aliases(pipes_struct *p,  \nSAMR_Q_ENUM_DOM_ALIASES *q_u, SAMR_R_ENUM_DOM_ALIASES *r_u);\n+NTSTATUS _samr_query_dispinfo(pipes_struct *p, SAMR_Q_QUERY_DISPINFO  \n*q_u,\n+\t\t\t      SAMR_R_QUERY_DISPINFO *r_u);\n+NTSTATUS _samr_query_aliasinfo(pipes_struct *p,  \nSAMR_Q_QUERY_ALIASINFO *q_u, SAMR_R_QUERY_ALIASINFO *r_u);\n+NTSTATUS _samr_lookup_names(pipes_struct *p, SAMR_Q_LOOKUP_NAMES  \n*q_u, SAMR_R_LOOKUP_NAMES *r_u);\n+NTSTATUS _samr_chgpasswd_user(pipes_struct *p, SAMR_Q_CHGPASSWD_USER  \n*q_u, SAMR_R_CHGPASSWD_USER *r_u);\n+NTSTATUS _samr_chgpasswd_user3(pipes_struct *p,  \nSAMR_Q_CHGPASSWD_USER3 *q_u, SAMR_R_CHGPASSWD_USER3 *r_u);\n+NTSTATUS _samr_lookup_rids(pipes_struct *p, SAMR_Q_LOOKUP_RIDS *q_u,  \nSAMR_R_LOOKUP_RIDS *r_u);\n+NTSTATUS _samr_open_user(pipes_struct *p, SAMR_Q_OPEN_USER *q_u,  \nSAMR_R_OPEN_USER *r_u);\n+NTSTATUS _samr_query_userinfo(pipes_struct *p, SAMR_Q_QUERY_USERINFO  \n*q_u, SAMR_R_QUERY_USERINFO *r_u);\n+NTSTATUS _samr_query_usergroups(pipes_struct *p,  \nSAMR_Q_QUERY_USERGROUPS *q_u, SAMR_R_QUERY_USERGROUPS *r_u);\n+NTSTATUS _samr_query_domain_info(pipes_struct *p,\n+\t\t\t\t SAMR_Q_QUERY_DOMAIN_INFO *q_u,\n+\t\t\t\t SAMR_R_QUERY_DOMAIN_INFO *r_u);\n+NTSTATUS _samr_create_user(pipes_struct *p, SAMR_Q_CREATE_USER *q_u,\n+\t\t\t   SAMR_R_CREATE_USER *r_u);\n+NTSTATUS _samr_connect_anon(pipes_struct *p, SAMR_Q_CONNECT_ANON  \n*q_u, SAMR_R_CONNECT_ANON *r_u);\n+NTSTATUS _samr_connect(pipes_struct *p, SAMR_Q_CONNECT *q_u,  \nSAMR_R_CONNECT *r_u);\n+NTSTATUS _samr_connect4(pipes_struct *p, SAMR_Q_CONNECT4 *q_u,  \nSAMR_R_CONNECT4 *r_u);\n+NTSTATUS _samr_connect5(pipes_struct *p, SAMR_Q_CONNECT5 *q_u,  \nSAMR_R_CONNECT5 *r_u);\n+NTSTATUS _samr_lookup_domain(pipes_struct *p, SAMR_Q_LOOKUP_DOMAIN  \n*q_u, SAMR_R_LOOKUP_DOMAIN *r_u);\n+NTSTATUS _samr_enum_domains(pipes_struct *p, SAMR_Q_ENUM_DOMAINS  \n*q_u, SAMR_R_ENUM_DOMAINS *r_u);\n+NTSTATUS _samr_open_alias(pipes_struct *p, SAMR_Q_OPEN_ALIAS *q_u,  \nSAMR_R_OPEN_ALIAS *r_u);\n+NTSTATUS _samr_set_userinfo(pipes_struct *p, SAMR_Q_SET_USERINFO  \n*q_u, SAMR_R_SET_USERINFO *r_u);\n+NTSTATUS _samr_set_userinfo2(pipes_struct *p, SAMR_Q_SET_USERINFO2  \n*q_u, SAMR_R_SET_USERINFO2 *r_u);\n+NTSTATUS _samr_query_useraliases(pipes_struct *p,  \nSAMR_Q_QUERY_USERALIASES *q_u, SAMR_R_QUERY_USERALIASES *r_u);\n+NTSTATUS _samr_query_aliasmem(pipes_struct *p, SAMR_Q_QUERY_ALIASMEM  \n*q_u, SAMR_R_QUERY_ALIASMEM *r_u);\n+NTSTATUS _samr_query_groupmem(pipes_struct *p, SAMR_Q_QUERY_GROUPMEM  \n*q_u, SAMR_R_QUERY_GROUPMEM *r_u);\n+NTSTATUS _samr_add_aliasmem(pipes_struct *p, SAMR_Q_ADD_ALIASMEM  \n*q_u, SAMR_R_ADD_ALIASMEM *r_u);\n+NTSTATUS _samr_del_aliasmem(pipes_struct *p, SAMR_Q_DEL_ALIASMEM  \n*q_u, SAMR_R_DEL_ALIASMEM *r_u);\n+NTSTATUS _samr_add_groupmem(pipes_struct *p, SAMR_Q_ADD_GROUPMEM  \n*q_u, SAMR_R_ADD_GROUPMEM *r_u);\n+NTSTATUS _samr_del_groupmem(pipes_struct *p, SAMR_Q_DEL_GROUPMEM  \n*q_u, SAMR_R_DEL_GROUPMEM *r_u);\n+NTSTATUS _samr_delete_dom_user(pipes_struct *p,  \nSAMR_Q_DELETE_DOM_USER *q_u, SAMR_R_DELETE_DOM_USER *r_u );\n+NTSTATUS _samr_delete_dom_group(pipes_struct *p,  \nSAMR_Q_DELETE_DOM_GROUP *q_u, SAMR_R_DELETE_DOM_GROUP *r_u);\n+NTSTATUS _samr_delete_dom_alias(pipes_struct *p,  \nSAMR_Q_DELETE_DOM_ALIAS *q_u, SAMR_R_DELETE_DOM_ALIAS *r_u);\n+NTSTATUS _samr_create_dom_group(pipes_struct *p,  \nSAMR_Q_CREATE_DOM_GROUP *q_u, SAMR_R_CREATE_DOM_GROUP *r_u);\n+NTSTATUS _samr_create_dom_alias(pipes_struct *p,  \nSAMR_Q_CREATE_DOM_ALIAS *q_u, SAMR_R_CREATE_DOM_ALIAS *r_u);\n+NTSTATUS _samr_query_groupinfo(pipes_struct *p,  \nSAMR_Q_QUERY_GROUPINFO *q_u, SAMR_R_QUERY_GROUPINFO *r_u);\n+NTSTATUS _samr_set_groupinfo(pipes_struct *p, SAMR_Q_SET_GROUPINFO  \n*q_u, SAMR_R_SET_GROUPINFO *r_u);\n+NTSTATUS _samr_set_aliasinfo(pipes_struct *p, SAMR_Q_SET_ALIASINFO  \n*q_u, SAMR_R_SET_ALIASINFO *r_u);\n+NTSTATUS _samr_get_dom_pwinfo(pipes_struct *p, SAMR_Q_GET_DOM_PWINFO  \n*q_u, SAMR_R_GET_DOM_PWINFO *r_u);\n+NTSTATUS _samr_open_group(pipes_struct *p, SAMR_Q_OPEN_GROUP *q_u,  \nSAMR_R_OPEN_GROUP *r_u);\n+NTSTATUS _samr_remove_sid_foreign_domain(pipes_struct *p,\n+                                           \nSAMR_Q_REMOVE_SID_FOREIGN_DOMAIN *q_u,\n+                                           \nSAMR_R_REMOVE_SID_FOREIGN_DOMAIN *r_u);\n+NTSTATUS _samr_query_domain_info2(pipes_struct *p,\n+\t\t\t\t  SAMR_Q_QUERY_DOMAIN_INFO2 *q_u,\n+\t\t\t\t  SAMR_R_QUERY_DOMAIN_INFO2 *r_u);\n+NTSTATUS _samr_set_dom_info(pipes_struct *p, SAMR_Q_SET_DOMAIN_INFO  \n*q_u, SAMR_R_SET_DOMAIN_INFO *r_u);\n+\n+/* The following definitions come from rpc_server/srv_samr_util.c  */\n+\n+void copy_id20_to_sam_passwd(struct samu *to, SAM_USER_INFO_20 *from);\n+void copy_id21_to_sam_passwd(struct samu *to, SAM_USER_INFO_21 *from);\n+void copy_id23_to_sam_passwd(struct samu *to, SAM_USER_INFO_23 *from);\n+void copy_id25_to_sam_passwd(struct samu *to, SAM_USER_INFO_25 *from);\n+\n+/* The following definitions come from rpc_server/srv_spoolss.c  */\n+\n+void spoolss_get_pipe_fns( struct api_struct **fns, int *n_fns );\n+NTSTATUS rpc_spoolss_init(void);\n+\n+/* The following definitions come from rpc_server/srv_spoolss_nt.c  */\n+\n+WERROR delete_printer_hook( NT_USER_TOKEN *token, const char  \n*sharename );\n+void do_drv_upgrade_printer(struct messaging_context *msg,\n+\t\t\t    void *private_data,\n+\t\t\t    uint32_t msg_type,\n+\t\t\t    struct server_id server_id,\n+\t\t\t    DATA_BLOB *data);\n+void update_monitored_printq_cache( void );\n+void reset_all_printerdata(struct messaging_context *msg,\n+\t\t\t   void *private_data,\n+\t\t\t   uint32_t msg_type,\n+\t\t\t   struct server_id server_id,\n+\t\t\t   DATA_BLOB *data);\n+WERROR _spoolss_open_printer(pipes_struct *p, SPOOL_Q_OPEN_PRINTER  \n*q_u, SPOOL_R_OPEN_PRINTER *r_u);\n+WERROR _spoolss_open_printer_ex( pipes_struct *p,  \nSPOOL_Q_OPEN_PRINTER_EX *q_u, SPOOL_R_OPEN_PRINTER_EX *r_u);\n+BOOL convert_devicemode(const char *printername, const DEVICEMODE  \n*devmode,\n+\t\t\t\tNT_DEVICEMODE **pp_nt_devmode);\n+WERROR _spoolss_closeprinter(pipes_struct *p, SPOOL_Q_CLOSEPRINTER  \n*q_u, SPOOL_R_CLOSEPRINTER *r_u);\n+WERROR _spoolss_deleteprinter(pipes_struct *p, SPOOL_Q_DELETEPRINTER  \n*q_u, SPOOL_R_DELETEPRINTER *r_u);\n+WERROR _spoolss_deleteprinterdriver(pipes_struct *p,  \nSPOOL_Q_DELETEPRINTERDRIVER *q_u, SPOOL_R_DELETEPRINTERDRIVER *r_u);\n+WERROR _spoolss_deleteprinterdriverex(pipes_struct *p,  \nSPOOL_Q_DELETEPRINTERDRIVEREX *q_u, SPOOL_R_DELETEPRINTERDRIVEREX *r_u);\n+WERROR set_printer_dataex( NT_PRINTER_INFO_LEVEL *printer, const  \nchar *key, const char *value,\n+                                  uint32 type, uint8 *data, int  \nreal_len  );\n+WERROR _spoolss_getprinterdata(pipes_struct *p,  \nSPOOL_Q_GETPRINTERDATA *q_u, SPOOL_R_GETPRINTERDATA *r_u);\n+WERROR _spoolss_rffpcnex(pipes_struct *p, SPOOL_Q_RFFPCNEX *q_u,  \nSPOOL_R_RFFPCNEX *r_u);\n+void spoolss_notify_server_name(int snum,\n+\t\t\t\t       SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t       print_queue_struct *queue,\n+\t\t\t\t       NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t       TALLOC_CTX *mem_ctx) ;\n+void spoolss_notify_printer_name(int snum,\n+\t\t\t\t\tSPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t\tprint_queue_struct *queue,\n+\t\t\t\t\tNT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t\tTALLOC_CTX *mem_ctx);\n+void spoolss_notify_share_name(int snum,\n+\t\t\t\t      SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t      print_queue_struct *queue,\n+\t\t\t\t      NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t      TALLOC_CTX *mem_ctx);\n+void spoolss_notify_port_name(int snum,\n+\t\t\t\t     SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t     print_queue_struct *queue,\n+\t\t\t\t     NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t     TALLOC_CTX *mem_ctx);\n+void spoolss_notify_driver_name(int snum,\n+\t\t\t\t       SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t       print_queue_struct *queue,\n+\t\t\t\t       NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t       TALLOC_CTX *mem_ctx);\n+void spoolss_notify_comment(int snum,\n+\t\t\t\t   SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t   print_queue_struct *queue,\n+\t\t\t\t   NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t   TALLOC_CTX *mem_ctx);\n+void spoolss_notify_location(int snum,\n+\t\t\t\t    SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t    print_queue_struct *queue,\n+\t\t\t\t    NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t    TALLOC_CTX *mem_ctx);\n+void spoolss_notify_sepfile(int snum,\n+\t\t\t\t   SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t   print_queue_struct *queue,\n+\t\t\t\t   NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t   TALLOC_CTX *mem_ctx);\n+void spoolss_notify_print_processor(int snum,\n+\t\t\t\t\t   SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t\t   print_queue_struct *queue,\n+\t\t\t\t\t   NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t\t   TALLOC_CTX *mem_ctx);\n+void spoolss_notify_parameters(int snum,\n+\t\t\t\t      SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t      print_queue_struct *queue,\n+\t\t\t\t      NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t      TALLOC_CTX *mem_ctx);\n+void spoolss_notify_datatype(int snum,\n+\t\t\t\t    SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t    print_queue_struct *queue,\n+\t\t\t\t    NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t    TALLOC_CTX *mem_ctx);\n+void spoolss_notify_attributes(int snum,\n+\t\t\t\t      SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t      print_queue_struct *queue,\n+\t\t\t\t      NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t      TALLOC_CTX *mem_ctx);\n+void spoolss_notify_cjobs(int snum,\n+\t\t\t\t SPOOL_NOTIFY_INFO_DATA *data,\n+\t\t\t\t print_queue_struct *queue,\n+\t\t\t\t NT_PRINTER_INFO_LEVEL *printer,\n+\t\t\t\t TALLOC_CTX *mem_ctx);\n+void construct_info_data(SPOOL_NOTIFY_INFO_DATA *info_data, uint16  \ntype, uint16 field, int id);\n+WERROR _spoolss_rfnpcnex( pipes_struct *p, SPOOL_Q_RFNPCNEX *q_u,  \nSPOOL_R_RFNPCNEX *r_u);\n+DEVICEMODE *construct_dev_mode(const char *servicename);\n+WERROR _spoolss_enumprinters( pipes_struct *p, SPOOL_Q_ENUMPRINTERS  \n*q_u, SPOOL_R_ENUMPRINTERS *r_u);\n+WERROR _spoolss_getprinter(pipes_struct *p, SPOOL_Q_GETPRINTER *q_u,  \nSPOOL_R_GETPRINTER *r_u);\n+WERROR _spoolss_getprinterdriver2(pipes_struct *p,  \nSPOOL_Q_GETPRINTERDRIVER2 *q_u, SPOOL_R_GETPRINTERDRIVER2 *r_u);\n+WERROR _spoolss_startpageprinter(pipes_struct *p,  \nSPOOL_Q_STARTPAGEPRINTER *q_u, SPOOL_R_STARTPAGEPRINTER *r_u);\n+WERROR _spoolss_endpageprinter(pipes_struct *p,  \nSPOOL_Q_ENDPAGEPRINTER *q_u, SPOOL_R_ENDPAGEPRINTER *r_u);\n+WERROR _spoolss_startdocprinter(pipes_struct *p,  \nSPOOL_Q_STARTDOCPRINTER *q_u, SPOOL_R_STARTDOCPRINTER *r_u);\n+WERROR _spoolss_enddocprinter(pipes_struct *p, SPOOL_Q_ENDDOCPRINTER  \n*q_u, SPOOL_R_ENDDOCPRINTER *r_u);\n+WERROR _spoolss_writeprinter(pipes_struct *p, SPOOL_Q_WRITEPRINTER  \n*q_u, SPOOL_R_WRITEPRINTER *r_u);\n+WERROR _spoolss_abortprinter(pipes_struct *p, SPOOL_Q_ABORTPRINTER  \n*q_u, SPOOL_R_ABORTPRINTER *r_u);\n+WERROR add_port_hook(NT_USER_TOKEN *token, const char *portname,  \nconst char *uri );\n+BOOL add_printer_hook(NT_USER_TOKEN *token, NT_PRINTER_INFO_LEVEL  \n*printer);\n+WERROR _spoolss_setprinter(pipes_struct *p, SPOOL_Q_SETPRINTER *q_u,  \nSPOOL_R_SETPRINTER *r_u);\n+WERROR _spoolss_fcpn(pipes_struct *p, SPOOL_Q_FCPN *q_u,  \nSPOOL_R_FCPN *r_u);\n+WERROR _spoolss_addjob(pipes_struct *p, SPOOL_Q_ADDJOB *q_u,  \nSPOOL_R_ADDJOB *r_u);\n+WERROR _spoolss_enumjobs( pipes_struct *p, SPOOL_Q_ENUMJOBS *q_u,  \nSPOOL_R_ENUMJOBS *r_u);\n+WERROR _spoolss_schedulejob( pipes_struct *p, SPOOL_Q_SCHEDULEJOB  \n*q_u, SPOOL_R_SCHEDULEJOB *r_u);\n+WERROR _spoolss_setjob(pipes_struct *p, SPOOL_Q_SETJOB *q_u,  \nSPOOL_R_SETJOB *r_u);\n+WERROR _spoolss_enumprinterdrivers( pipes_struct *p,  \nSPOOL_Q_ENUMPRINTERDRIVERS *q_u, SPOOL_R_ENUMPRINTERDRIVERS *r_u);\n+WERROR _spoolss_enumforms(pipes_struct *p, SPOOL_Q_ENUMFORMS *q_u,  \nSPOOL_R_ENUMFORMS *r_u);\n+WERROR _spoolss_getform(pipes_struct *p, SPOOL_Q_GETFORM *q_u,  \nSPOOL_R_GETFORM *r_u);\n+WERROR enumports_hook( int *count, char ***lines );\n+WERROR _spoolss_enumports( pipes_struct *p, SPOOL_Q_ENUMPORTS *q_u,  \nSPOOL_R_ENUMPORTS *r_u);\n+WERROR _spoolss_addprinterex( pipes_struct *p, SPOOL_Q_ADDPRINTEREX  \n*q_u, SPOOL_R_ADDPRINTEREX *r_u);\n+WERROR _spoolss_addprinterdriver(pipes_struct *p,  \nSPOOL_Q_ADDPRINTERDRIVER *q_u, SPOOL_R_ADDPRINTERDRIVER *r_u);\n+WERROR _spoolss_addprinterdriverex(pipes_struct *p,  \nSPOOL_Q_ADDPRINTERDRIVEREX *q_u, SPOOL_R_ADDPRINTERDRIVEREX *r_u);\n+WERROR _spoolss_getprinterdriverdirectory(pipes_struct *p,  \nSPOOL_Q_GETPRINTERDRIVERDIR *q_u, SPOOL_R_GETPRINTERDRIVERDIR *r_u);\n+WERROR _spoolss_enumprinterdata(pipes_struct *p,  \nSPOOL_Q_ENUMPRINTERDATA *q_u, SPOOL_R_ENUMPRINTERDATA *r_u);\n+WERROR _spoolss_setprinterdata( pipes_struct *p,  \nSPOOL_Q_SETPRINTERDATA *q_u, SPOOL_R_SETPRINTERDATA *r_u);\n+WERROR _spoolss_resetprinter(pipes_struct *p, SPOOL_Q_RESETPRINTER  \n*q_u, SPOOL_R_RESETPRINTER *r_u);\n+WERROR _spoolss_deleteprinterdata(pipes_struct *p,  \nSPOOL_Q_DELETEPRINTERDATA *q_u, SPOOL_R_DELETEPRINTERDATA *r_u);\n+WERROR _spoolss_addform( pipes_struct *p, SPOOL_Q_ADDFORM *q_u,  \nSPOOL_R_ADDFORM *r_u);\n+WERROR _spoolss_deleteform( pipes_struct *p, SPOOL_Q_DELETEFORM  \n*q_u, SPOOL_R_DELETEFORM *r_u);\n+WERROR _spoolss_setform(pipes_struct *p, SPOOL_Q_SETFORM *q_u,  \nSPOOL_R_SETFORM *r_u);\n+WERROR _spoolss_enumprintprocessors(pipes_struct *p,  \nSPOOL_Q_ENUMPRINTPROCESSORS *q_u, SPOOL_R_ENUMPRINTPROCESSORS *r_u);\n+WERROR _spoolss_enumprintprocdatatypes(pipes_struct *p,  \nSPOOL_Q_ENUMPRINTPROCDATATYPES *q_u, SPOOL_R_ENUMPRINTPROCDATATYPES  \n*r_u);\n+WERROR _spoolss_enumprintmonitors(pipes_struct *p,  \nSPOOL_Q_ENUMPRINTMONITORS *q_u, SPOOL_R_ENUMPRINTMONITORS *r_u);\n+WERROR _spoolss_getjob( pipes_struct *p, SPOOL_Q_GETJOB *q_u,  \nSPOOL_R_GETJOB *r_u);\n+WERROR _spoolss_getprinterdataex(pipes_struct *p,  \nSPOOL_Q_GETPRINTERDATAEX *q_u, SPOOL_R_GETPRINTERDATAEX *r_u);\n+WERROR _spoolss_setprinterdataex(pipes_struct *p,  \nSPOOL_Q_SETPRINTERDATAEX *q_u, SPOOL_R_SETPRINTERDATAEX *r_u);\n+WERROR _spoolss_deleteprinterdataex(pipes_struct *p,  \nSPOOL_Q_DELETEPRINTERDATAEX *q_u, SPOOL_R_DELETEPRINTERDATAEX *r_u);\n+WERROR _spoolss_enumprinterkey(pipes_struct *p,  \nSPOOL_Q_ENUMPRINTERKEY *q_u, SPOOL_R_ENUMPRINTERKEY *r_u);\n+WERROR _spoolss_deleteprinterkey(pipes_struct *p,  \nSPOOL_Q_DELETEPRINTERKEY *q_u, SPOOL_R_DELETEPRINTERKEY *r_u);\n+WERROR _spoolss_enumprinterdataex(pipes_struct *p,  \nSPOOL_Q_ENUMPRINTERDATAEX *q_u, SPOOL_R_ENUMPRINTERDATAEX *r_u);\n+WERROR _spoolss_getprintprocessordirectory(pipes_struct *p,  \nSPOOL_Q_GETPRINTPROCESSORDIRECTORY *q_u,  \nSPOOL_R_GETPRINTPROCESSORDIRECTORY *r_u);\n+WERROR _spoolss_xcvdataport(pipes_struct *p, SPOOL_Q_XCVDATAPORT  \n*q_u, SPOOL_R_XCVDATAPORT *r_u);\n+\n+/* The following definitions come from rpc_server/srv_srvsvc_nt.c  */\n+\n+WERROR _srvsvc_NetFileEnum(pipes_struct *p, struct  \nsrvsvc_NetFileEnum *r);\n+WERROR _srvsvc_NetSrvGetInfo(pipes_struct *p, struct  \nsrvsvc_NetSrvGetInfo *r);\n+WERROR _srvsvc_NetSrvSetInfo(pipes_struct *p, struct  \nsrvsvc_NetSrvSetInfo *r);\n+WERROR _srvsvc_NetConnEnum(pipes_struct *p, struct  \nsrvsvc_NetConnEnum *r);\n+WERROR _srvsvc_NetSessEnum(pipes_struct *p, struct  \nsrvsvc_NetSessEnum *r);\n+WERROR _srvsvc_NetSessDel(pipes_struct *p, struct srvsvc_NetSessDel  \n*r);\n+WERROR _srvsvc_NetShareEnumAll(pipes_struct *p, struct  \nsrvsvc_NetShareEnumAll *r);\n+WERROR _srvsvc_NetShareEnum(pipes_struct *p, struct  \nsrvsvc_NetShareEnum *r);\n+WERROR _srvsvc_NetShareGetInfo(pipes_struct *p, struct  \nsrvsvc_NetShareGetInfo *r);\n+char *valid_share_pathname(char *dos_pathname);\n+WERROR _srvsvc_NetShareSetInfo(pipes_struct *p, struct  \nsrvsvc_NetShareSetInfo *r);\n+WERROR _srvsvc_NetShareAdd(pipes_struct *p, struct  \nsrvsvc_NetShareAdd *r);\n+WERROR _srvsvc_NetShareDel(pipes_struct *p, struct  \nsrvsvc_NetShareDel *r);\n+WERROR _srvsvc_NetShareDelSticky(pipes_struct *p, struct  \nsrvsvc_NetShareDelSticky *r);\n+WERROR _srvsvc_NetRemoteTOD(pipes_struct *p, struct  \nsrvsvc_NetRemoteTOD *r);\n+WERROR _srvsvc_NetGetFileSecurity(pipes_struct *p, struct  \nsrvsvc_NetGetFileSecurity *r);\n+WERROR _srvsvc_NetSetFileSecurity(pipes_struct *p, struct  \nsrvsvc_NetSetFileSecurity *r);\n+WERROR _srvsvc_NetDiskEnum(pipes_struct *p, struct  \nsrvsvc_NetDiskEnum *r);\n+WERROR _srvsvc_NetNameValidate(pipes_struct *p, struct  \nsrvsvc_NetNameValidate *r);\n+WERROR _srvsvc_NetFileClose(pipes_struct *p, struct  \nsrvsvc_NetFileClose *r);\n+WERROR _srvsvc_NetCharDevEnum(pipes_struct *p, struct  \nsrvsvc_NetCharDevEnum *r);\n+WERROR _srvsvc_NetCharDevGetInfo(pipes_struct *p, struct  \nsrvsvc_NetCharDevGetInfo *r);\n+WERROR _srvsvc_NetCharDevControl(pipes_struct *p, struct  \nsrvsvc_NetCharDevControl *r);\n+WERROR _srvsvc_NetCharDevQEnum(pipes_struct *p, struct  \nsrvsvc_NetCharDevQEnum *r);\n+WERROR _srvsvc_NetCharDevQGetInfo(pipes_struct *p, struct  \nsrvsvc_NetCharDevQGetInfo *r);\n+WERROR _srvsvc_NetCharDevQSetInfo(pipes_struct *p, struct  \nsrvsvc_NetCharDevQSetInfo *r);\n+WERROR _srvsvc_NetCharDevQPurge(pipes_struct *p, struct  \nsrvsvc_NetCharDevQPurge *r);\n+WERROR _srvsvc_NetCharDevQPurgeSelf(pipes_struct *p, struct  \nsrvsvc_NetCharDevQPurgeSelf *r);\n+WERROR _srvsvc_NetFileGetInfo(pipes_struct *p, struct  \nsrvsvc_NetFileGetInfo *r);\n+WERROR _srvsvc_NetShareCheck(pipes_struct *p, struct  \nsrvsvc_NetShareCheck *r);\n+WERROR _srvsvc_NetServerStatisticsGet(pipes_struct *p, struct  \nsrvsvc_NetServerStatisticsGet *r);\n+WERROR _srvsvc_NetTransportAdd(pipes_struct *p, struct  \nsrvsvc_NetTransportAdd *r);\n+WERROR _srvsvc_NetTransportEnum(pipes_struct *p, struct  \nsrvsvc_NetTransportEnum *r);\n+WERROR _srvsvc_NetTransportDel(pipes_struct *p, struct  \nsrvsvc_NetTransportDel *r);\n+WERROR _srvsvc_NetSetServiceBits(pipes_struct *p, struct  \nsrvsvc_NetSetServiceBits *r);\n+WERROR _srvsvc_NetPathType(pipes_struct *p, struct  \nsrvsvc_NetPathType *r);\n+WERROR _srvsvc_NetPathCanonicalize(pipes_struct *p, struct  \nsrvsvc_NetPathCanonicalize *r);\n+WERROR _srvsvc_NetPathCompare(pipes_struct *p, struct  \nsrvsvc_NetPathCompare *r);\n+WERROR _srvsvc_NETRPRNAMECANONICALIZE(pipes_struct *p, struct  \nsrvsvc_NETRPRNAMECANONICALIZE *r);\n+WERROR _srvsvc_NetPRNameCompare(pipes_struct *p, struct  \nsrvsvc_NetPRNameCompare *r);\n+WERROR _srvsvc_NetShareDelStart(pipes_struct *p, struct  \nsrvsvc_NetShareDelStart *r);\n+WERROR _srvsvc_NetShareDelCommit(pipes_struct *p, struct  \nsrvsvc_NetShareDelCommit *r);\n+WERROR _srvsvc_NetServerTransportAddEx(pipes_struct *p, struct  \nsrvsvc_NetServerTransportAddEx *r);\n+WERROR _srvsvc_NetServerSetServiceBitsEx(pipes_struct *p, struct  \nsrvsvc_NetServerSetServiceBitsEx *r);\n+WERROR _srvsvc_NETRDFSGETVERSION(pipes_struct *p, struct  \nsrvsvc_NETRDFSGETVERSION *r);\n+WERROR _srvsvc_NETRDFSCREATELOCALPARTITION(pipes_struct *p, struct  \nsrvsvc_NETRDFSCREATELOCALPARTITION *r);\n+WERROR _srvsvc_NETRDFSDELETELOCALPARTITION(pipes_struct *p, struct  \nsrvsvc_NETRDFSDELETELOCALPARTITION *r);\n+WERROR _srvsvc_NETRDFSSETLOCALVOLUMESTATE(pipes_struct *p, struct  \nsrvsvc_NETRDFSSETLOCALVOLUMESTATE *R);\n+WERROR _srvsvc_NETRDFSSETSERVERINFO(pipes_struct *p, struct  \nsrvsvc_NETRDFSSETSERVERINFO *r);\n+WERROR _srvsvc_NETRDFSCREATEEXITPOINT(pipes_struct *p, struct  \nsrvsvc_NETRDFSCREATEEXITPOINT *r);\n+WERROR _srvsvc_NETRDFSDELETEEXITPOINT(pipes_struct *p, struct  \nsrvsvc_NETRDFSDELETEEXITPOINT *r);\n+WERROR _srvsvc_NETRSERVERTRANSPORTDELEX(pipes_struct *p, struct  \nsrvsvc_NETRSERVERTRANSPORTDELEX *r);\n+WERROR _srvsvc_NETRDFSMANAGERREPORTSITEINFO(pipes_struct *p, struct  \nsrvsvc_NETRDFSMANAGERREPORTSITEINFO *r);\n+WERROR _srvsvc_NETRDFSMODIFYPREFIX(pipes_struct *p, struct  \nsrvsvc_NETRDFSMODIFYPREFIX *r);\n+WERROR _srvsvc_NETRDFSFIXLOCALVOLUME(pipes_struct *p, struct  \nsrvsvc_NETRDFSFIXLOCALVOLUME *r);\n+\n+/* The following definitions come from rpc_server/srv_svcctl.c  */\n+\n+void svcctl2_get_pipe_fns( struct api_struct **fns, int *n_fns );\n+NTSTATUS rpc_svcctl2_init(void);\n+\n+/* The following definitions come from rpc_server/srv_svcctl_nt.c  */\n+\n+BOOL init_service_op_table( void );\n+WERROR _svcctl_open_scmanager(pipes_struct *p,  \nSVCCTL_Q_OPEN_SCMANAGER *q_u, SVCCTL_R_OPEN_SCMANAGER *r_u);\n+WERROR _svcctl_open_service(pipes_struct *p, SVCCTL_Q_OPEN_SERVICE  \n*q_u, SVCCTL_R_OPEN_SERVICE *r_u);\n+WERROR _svcctl_CloseServiceHandle(pipes_struct *p, struct  \nsvcctl_CloseServiceHandle *r);\n+WERROR _svcctl_get_display_name(pipes_struct *p,  \nSVCCTL_Q_GET_DISPLAY_NAME *q_u, SVCCTL_R_GET_DISPLAY_NAME *r_u);\n+WERROR _svcctl_query_status(pipes_struct *p, SVCCTL_Q_QUERY_STATUS  \n*q_u, SVCCTL_R_QUERY_STATUS *r_u);\n+WERROR _svcctl_enum_services_status(pipes_struct *p,  \nSVCCTL_Q_ENUM_SERVICES_STATUS *q_u, SVCCTL_R_ENUM_SERVICES_STATUS *r_u);\n+WERROR _svcctl_start_service(pipes_struct *p, SVCCTL_Q_START_SERVICE  \n*q_u, SVCCTL_R_START_SERVICE *r_u);\n+WERROR _svcctl_control_service(pipes_struct *p,  \nSVCCTL_Q_CONTROL_SERVICE *q_u, SVCCTL_R_CONTROL_SERVICE *r_u);\n+WERROR _svcctl_enum_dependent_services( pipes_struct *p,  \nSVCCTL_Q_ENUM_DEPENDENT_SERVICES *q_u,  \nSVCCTL_R_ENUM_DEPENDENT_SERVICES *r_u );\n+WERROR _svcctl_query_service_status_ex( pipes_struct *p,  \nSVCCTL_Q_QUERY_SERVICE_STATUSEX *q_u, SVCCTL_R_QUERY_SERVICE_STATUSEX  \n*r_u );\n+WERROR _svcctl_query_service_config( pipes_struct *p,  \nSVCCTL_Q_QUERY_SERVICE_CONFIG *q_u, SVCCTL_R_QUERY_SERVICE_CONFIG  \n*r_u );\n+WERROR _svcctl_query_service_config2( pipes_struct *p,  \nSVCCTL_Q_QUERY_SERVICE_CONFIG2 *q_u, SVCCTL_R_QUERY_SERVICE_CONFIG2  \n*r_u );\n+WERROR _svcctl_lock_service_db( pipes_struct *p,  \nSVCCTL_Q_LOCK_SERVICE_DB *q_u, SVCCTL_R_LOCK_SERVICE_DB *r_u );\n+WERROR _svcctl_unlock_service_db( pipes_struct *p,  \nSVCCTL_Q_UNLOCK_SERVICE_DB *q_u, SVCCTL_R_UNLOCK_SERVICE_DB *r_u );\n+WERROR _svcctl_query_service_sec( pipes_struct *p,  \nSVCCTL_Q_QUERY_SERVICE_SEC *q_u, SVCCTL_R_QUERY_SERVICE_SEC *r_u );\n+WERROR _svcctl_set_service_sec( pipes_struct *p,  \nSVCCTL_Q_SET_SERVICE_SEC *q_u, SVCCTL_R_SET_SERVICE_SEC *r_u );\n+WERROR _svcctl_ControlService(pipes_struct *p, struct  \nsvcctl_ControlService *r);\n+WERROR _svcctl_DeleteService(pipes_struct *p, struct  \nsvcctl_DeleteService *r);\n+WERROR _svcctl_LockServiceDatabase(pipes_struct *p, struct  \nsvcctl_LockServiceDatabase *r);\n+WERROR _svcctl_QueryServiceObjectSecurity(pipes_struct *p, struct  \nsvcctl_QueryServiceObjectSecurity *r);\n+WERROR _svcctl_SetServiceObjectSecurity(pipes_struct *p, struct  \nsvcctl_SetServiceObjectSecurity *r);\n+WERROR _svcctl_QueryServiceStatus(pipes_struct *p, struct  \nsvcctl_QueryServiceStatus *r);\n+WERROR _svcctl_SetServiceStatus(pipes_struct *p, struct  \nsvcctl_SetServiceStatus *r);\n+WERROR _svcctl_UnlockServiceDatabase(pipes_struct *p, struct  \nsvcctl_UnlockServiceDatabase *r);\n+WERROR _svcctl_NotifyBootConfigStatus(pipes_struct *p, struct  \nsvcctl_NotifyBootConfigStatus *r);\n+WERROR _svcctl_SCSetServiceBitsW(pipes_struct *p, struct  \nsvcctl_SCSetServiceBitsW *r);\n+WERROR _svcctl_ChangeServiceConfigW(pipes_struct *p, struct  \nsvcctl_ChangeServiceConfigW *r);\n+WERROR _svcctl_CreateServiceW(pipes_struct *p, struct  \nsvcctl_CreateServiceW *r);\n+WERROR _svcctl_EnumDependentServicesW(pipes_struct *p, struct  \nsvcctl_EnumDependentServicesW *r);\n+WERROR _svcctl_EnumServicesStatusW(pipes_struct *p, struct  \nsvcctl_EnumServicesStatusW *r);\n+WERROR _svcctl_OpenSCManagerW(pipes_struct *p, struct  \nsvcctl_OpenSCManagerW *r);\n+WERROR _svcctl_OpenServiceW(pipes_struct *p, struct  \nsvcctl_OpenServiceW *r);\n+WERROR _svcctl_QueryServiceConfigW(pipes_struct *p, struct  \nsvcctl_QueryServiceConfigW *r);\n+WERROR _svcctl_QueryServiceLockStatusW(pipes_struct *p, struct  \nsvcctl_QueryServiceLockStatusW *r);\n+WERROR _svcctl_StartServiceW(pipes_struct *p, struct  \nsvcctl_StartServiceW *r);\n+WERROR _svcctl_GetServiceDisplayNameW(pipes_struct *p, struct  \nsvcctl_GetServiceDisplayNameW *r);\n+WERROR _svcctl_GetServiceKeyNameW(pipes_struct *p, struct  \nsvcctl_GetServiceKeyNameW *r);\n+WERROR _svcctl_SCSetServiceBitsA(pipes_struct *p, struct  \nsvcctl_SCSetServiceBitsA *r);\n+WERROR _svcctl_ChangeServiceConfigA(pipes_struct *p, struct  \nsvcctl_ChangeServiceConfigA *r);\n+WERROR _svcctl_CreateServiceA(pipes_struct *p, struct  \nsvcctl_CreateServiceA *r);\n+WERROR _svcctl_EnumDependentServicesA(pipes_struct *p, struct  \nsvcctl_EnumDependentServicesA *r);\n+WERROR _svcctl_EnumServicesStatusA(pipes_struct *p, struct  \nsvcctl_EnumServicesStatusA *r);\n+WERROR _svcctl_OpenSCManagerA(pipes_struct *p, struct  \nsvcctl_OpenSCManagerA *r);\n+WERROR _svcctl_OpenServiceA(pipes_struct *p, struct  \nsvcctl_OpenServiceA *r);\n+WERROR _svcctl_QueryServiceConfigA(pipes_struct *p, struct  \nsvcctl_QueryServiceConfigA *r);\n+WERROR _svcctl_QueryServiceLockStatusA(pipes_struct *p, struct  \nsvcctl_QueryServiceLockStatusA *r);\n+WERROR _svcctl_StartServiceA(pipes_struct *p, struct  \nsvcctl_StartServiceA *r);\n+WERROR _svcctl_GetServiceDisplayNameA(pipes_struct *p, struct  \nsvcctl_GetServiceDisplayNameA *r);\n+WERROR _svcctl_GetServiceKeyNameA(pipes_struct *p, struct  \nsvcctl_GetServiceKeyNameA *r);\n+WERROR _svcctl_GetCurrentGroupeStateW(pipes_struct *p, struct  \nsvcctl_GetCurrentGroupeStateW *r);\n+WERROR _svcctl_EnumServiceGroupW(pipes_struct *p, struct  \nsvcctl_EnumServiceGroupW *r);\n+WERROR _svcctl_ChangeServiceConfig2A(pipes_struct *p, struct  \nsvcctl_ChangeServiceConfig2A *r);\n+WERROR _svcctl_ChangeServiceConfig2W(pipes_struct *p, struct  \nsvcctl_ChangeServiceConfig2W *r);\n+WERROR _svcctl_QueryServiceConfig2A(pipes_struct *p, struct  \nsvcctl_QueryServiceConfig2A *r);\n+WERROR _svcctl_QueryServiceConfig2W(pipes_struct *p, struct  \nsvcctl_QueryServiceConfig2W *r);\n+WERROR _svcctl_QueryServiceStatusEx(pipes_struct *p, struct  \nsvcctl_QueryServiceStatusEx *r);\n+WERROR _EnumServicesStatusExA(pipes_struct *p, struct  \nEnumServicesStatusExA *r);\n+WERROR _EnumServicesStatusExW(pipes_struct *p, struct  \nEnumServicesStatusExW *r);\n+WERROR _svcctl_SCSendTSMessage(pipes_struct *p, struct  \nsvcctl_SCSendTSMessage *r);\n+\n+/* The following definitions come from rpc_server/srv_unixinfo_nt.c  */\n+\n+NTSTATUS _unixinfo_SidToUid(pipes_struct *p, struct  \nunixinfo_SidToUid *r);\n+NTSTATUS _unixinfo_UidToSid(pipes_struct *p, struct  \nunixinfo_UidToSid *r);\n+NTSTATUS _unixinfo_SidToGid(pipes_struct *p, struct  \nunixinfo_SidToGid *r);\n+NTSTATUS _unixinfo_GidToSid(pipes_struct *p, struct  \nunixinfo_GidToSid *r);\n+NTSTATUS _unixinfo_GetPWUid(pipes_struct *p, struct  \nunixinfo_GetPWUid *r);\n+\n+/* The following definitions come from rpc_server/srv_winreg_nt.c  */\n+\n+WERROR _winreg_CloseKey(pipes_struct *p, struct winreg_CloseKey *r);\n+WERROR _winreg_OpenHKLM(pipes_struct *p, struct winreg_OpenHKLM *r);\n+WERROR _winreg_OpenHKPD(pipes_struct *p, struct winreg_OpenHKPD *r);\n+WERROR _winreg_OpenHKPT(pipes_struct *p, struct winreg_OpenHKPT *r);\n+WERROR _winreg_OpenHKCR(pipes_struct *p, struct winreg_OpenHKCR *r);\n+WERROR _winreg_OpenHKU(pipes_struct *p, struct winreg_OpenHKU *r);\n+WERROR _winreg_OpenHKCU(pipes_struct *p, struct winreg_OpenHKCU *r);\n+WERROR _winreg_OpenHKCC(pipes_struct *p, struct winreg_OpenHKCC *r);\n+WERROR _winreg_OpenHKDD(pipes_struct *p, struct winreg_OpenHKDD *r);\n+WERROR _winreg_OpenHKPN(pipes_struct *p, struct winreg_OpenHKPN *r);\n+WERROR _winreg_OpenKey(pipes_struct *p, struct winreg_OpenKey *r);\n+WERROR _winreg_QueryValue(pipes_struct *p, struct winreg_QueryValue  \n*r);\n+WERROR _winreg_QueryInfoKey(pipes_struct *p, struct  \nwinreg_QueryInfoKey *r);\n+WERROR _winreg_GetVersion(pipes_struct *p, struct winreg_GetVersion  \n*r);\n+WERROR _winreg_EnumKey(pipes_struct *p, struct winreg_EnumKey *r);\n+WERROR _winreg_EnumValue(pipes_struct *p, struct winreg_EnumValue *r);\n+WERROR _winreg_InitiateSystemShutdown(pipes_struct *p, struct  \nwinreg_InitiateSystemShutdown *r);\n+WERROR _winreg_InitiateSystemShutdownEx(pipes_struct *p, struct  \nwinreg_InitiateSystemShutdownEx *r);\n+WERROR _winreg_AbortSystemShutdown(pipes_struct *p, struct  \nwinreg_AbortSystemShutdown *r);\n+WERROR _winreg_RestoreKey(pipes_struct *p, struct winreg_RestoreKey  \n*r);\n+WERROR _winreg_SaveKey(pipes_struct *p, struct winreg_SaveKey *r);\n+WERROR _winreg_SaveKeyEx(pipes_struct *p, struct winreg_SaveKeyEx *r);\n+WERROR _winreg_CreateKey( pipes_struct *p, struct winreg_CreateKey *r);\n+WERROR _winreg_SetValue(pipes_struct *p, struct winreg_SetValue *r);\n+WERROR _winreg_DeleteKey(pipes_struct *p, struct winreg_DeleteKey *r);\n+WERROR _winreg_DeleteValue(pipes_struct *p, struct  \nwinreg_DeleteValue *r);\n+WERROR _winreg_GetKeySecurity(pipes_struct *p, struct  \nwinreg_GetKeySecurity *r);\n+WERROR _winreg_SetKeySecurity(pipes_struct *p, struct  \nwinreg_SetKeySecurity *r);\n+WERROR _winreg_FlushKey(pipes_struct *p, struct winreg_FlushKey *r);\n+WERROR _winreg_UnLoadKey(pipes_struct *p, struct winreg_UnLoadKey *r);\n+WERROR _winreg_ReplaceKey(pipes_struct *p, struct winreg_ReplaceKey  \n*r);\n+WERROR _winreg_LoadKey(pipes_struct *p, struct winreg_LoadKey *r);\n+WERROR _winreg_NotifyChangeKeyValue(pipes_struct *p, struct  \nwinreg_NotifyChangeKeyValue *r);\n+WERROR _winreg_QueryMultipleValues(pipes_struct *p, struct  \nwinreg_QueryMultipleValues *r);\n+WERROR _winreg_QueryMultipleValues2(pipes_struct *p, struct  \nwinreg_QueryMultipleValues2 *r);\n+\n+/* The following definitions come from rpc_server/srv_wkssvc_nt.c  */\n+\n+WERROR _wkssvc_NetWkstaGetInfo( pipes_struct *p, struct  \nwkssvc_NetWkstaGetInfo *r);\n+WERROR _wkssvc_NetWkstaSetInfo( pipes_struct *p, struct  \nwkssvc_NetWkstaSetInfo *r);\n+WERROR _wkssvc_NetWkstaEnumUsers( pipes_struct *p, struct  \nwkssvc_NetWkstaEnumUsers *r);\n+WERROR _WKSSVC_NETRWKSTAUSERGETINFO( pipes_struct *p, struct  \nWKSSVC_NETRWKSTAUSERGETINFO *r );\n+WERROR _WKSSVC_NETRWKSTAUSERSETINFO( pipes_struct *p, struct  \nWKSSVC_NETRWKSTAUSERSETINFO *r );\n+WERROR _wkssvc_NetWkstaTransportEnum( pipes_struct *p, struct  \nwkssvc_NetWkstaTransportEnum *r);\n+WERROR _WKSSVC_NETRWKSTATRANSPORTADD( pipes_struct *p, struct  \nWKSSVC_NETRWKSTATRANSPORTADD *r );\n+WERROR _WKSSVC_NETRWKSTATRANSPORTDEL( pipes_struct *p, struct  \nWKSSVC_NETRWKSTATRANSPORTDEL *r );\n+WERROR _WKSSVC_NETRUSEADD( pipes_struct *p, struct WKSSVC_NETRUSEADD  \n*r );\n+WERROR _WKSSVC_NETRUSEGETINFO( pipes_struct *p, struct  \nWKSSVC_NETRUSEGETINFO *r );\n+WERROR _WKSSVC_NETRUSEDEL( pipes_struct *p, struct WKSSVC_NETRUSEDEL  \n*r );\n+WERROR _WKSSVC_NETRUSEENUM( pipes_struct *p, struct  \nWKSSVC_NETRUSEENUM *r );\n+WERROR _WKSSVC_NETRMESSAGEBUFFERSEND( pipes_struct *p, struct  \nWKSSVC_NETRMESSAGEBUFFERSEND *r );\n+WERROR _WKSSVC_NETRWORKSTATIONSTATISTICSGET( pipes_struct *p, struct  \nWKSSVC_NETRWORKSTATIONSTATISTICSGET *r );\n+WERROR _WKSSVC_NETRLOGONDOMAINNAMEADD( pipes_struct *p, struct  \nWKSSVC_NETRLOGONDOMAINNAMEADD *r );\n+WERROR _WKSSVC_NETRLOGONDOMAINNAMEDEL( pipes_struct *p, struct  \nWKSSVC_NETRLOGONDOMAINNAMEDEL *r );\n+WERROR _WKSSVC_NETRJOINDOMAIN( pipes_struct *p, struct  \nWKSSVC_NETRJOINDOMAIN *r );\n+WERROR _WKSSVC_NETRUNJOINDOMAIN( pipes_struct *p, struct  \nWKSSVC_NETRUNJOINDOMAIN *r );\n+WERROR _WKSSVC_NETRRENAMEMACHINEINDOMAIN( pipes_struct *p, struct  \nWKSSVC_NETRRENAMEMACHINEINDOMAIN *r );\n+WERROR _WKSSVC_NETRVALIDATENAME( pipes_struct *p, struct  \nWKSSVC_NETRVALIDATENAME *r );\n+WERROR _WKSSVC_NETRGETJOININFORMATION( pipes_struct *p, struct  \nWKSSVC_NETRGETJOININFORMATION *r );\n+WERROR _WKSSVC_NETRGETJOINABLEOUS( pipes_struct *p, struct  \nWKSSVC_NETRGETJOINABLEOUS *r );\n+WERROR _wkssvc_NetrJoinDomain2(pipes_struct *p, struct  \nwkssvc_NetrJoinDomain2 *r);\n+WERROR _wkssvc_NetrUnjoinDomain2(pipes_struct *p, struct  \nwkssvc_NetrUnjoinDomain2 *r);\n+WERROR _wkssvc_NetrRenameMachineInDomain2(pipes_struct *p, struct  \nwkssvc_NetrRenameMachineInDomain2 *r);\n+WERROR _WKSSVC_NETRVALIDATENAME2( pipes_struct *p, struct  \nWKSSVC_NETRVALIDATENAME2 *r );\n+WERROR _WKSSVC_NETRGETJOINABLEOUS2( pipes_struct *p, struct  \nWKSSVC_NETRGETJOINABLEOUS2 *r );\n+WERROR _wkssvc_NetrAddAlternateComputerName(pipes_struct *p, struct  \nwkssvc_NetrAddAlternateComputerName *r );\n+WERROR _wkssvc_NetrRemoveAlternateComputerName(pipes_struct *p,  \nstruct wkssvc_NetrRemoveAlternateComputerName *r);\n+WERROR _WKSSVC_NETRSETPRIMARYCOMPUTERNAME( pipes_struct *p, struct  \nWKSSVC_NETRSETPRIMARYCOMPUTERNAME *r );\n+WERROR _WKSSVC_NETRENUMERATECOMPUTERNAMES( pipes_struct *p, struct  \nWKSSVC_NETRENUMERATECOMPUTERNAMES *r );\n+\n+/* The following definitions come from rpcclient/cmd_dfs.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_ds.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_echo.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_lsarpc.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_netlogon.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_samr.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_shutdown.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_spoolss.c  */\n+\n+void set_drv_info_3_env (DRIVER_INFO_3 *info, const char *arch);\n+\n+/* The following definitions come from rpcclient/cmd_srvsvc.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_test.c  */\n+\n+\n+/* The following definitions come from rpcclient/cmd_unixinfo.c  */\n+\n+\n+/* The following definitions come from rpcclient/rpcclient.c  */\n+\n+\n+/* The following definitions come from services/services_db.c  */\n+\n+void svcctl_init_keys( void );\n+SEC_DESC* svcctl_get_secdesc( TALLOC_CTX *ctx, const char *name,  \nNT_USER_TOKEN *token );\n+BOOL svcctl_set_secdesc( TALLOC_CTX *ctx, const char *name, SEC_DESC  \n*sec_desc, NT_USER_TOKEN *token );\n+char* svcctl_lookup_dispname( const char *name, NT_USER_TOKEN *token );\n+char* svcctl_lookup_description( const char *name, NT_USER_TOKEN  \n*token );\n+REGVAL_CTR* svcctl_fetch_regvalues( const char *name, NT_USER_TOKEN  \n*token );\n+\n+/* The following definitions come from services/svc_netlogon.c  */\n+\n+\n+/* The following definitions come from services/svc_rcinit.c  */\n+\n+\n+/* The following definitions come from services/svc_spoolss.c  */\n+\n+\n+/* The following definitions come from services/svc_winreg.c  */\n+\n+\n+/* The following definitions come from services/svc_wins.c  */\n+\n+\n+/* The following definitions come from smbd/aio.c  */\n+\n+BOOL aio_finished(void);\n+void initialize_async_io_handler(void);\n+BOOL schedule_aio_read_and_X(connection_struct *conn,\n+\t\t\t     char *inbuf, char *outbuf,\n+\t\t\t     int length, int len_outbuf,\n+\t\t\t     files_struct *fsp, SMB_OFF_T startpos,\n+\t\t\t     size_t smb_maxcnt);\n+BOOL schedule_aio_write_and_X(connection_struct *conn,\n+\t\t\t\tchar *inbuf, char *outbuf,\n+\t\t\t\tint length, int len_outbuf,\n+\t\t\t\tfiles_struct *fsp, char *data,\n+\t\t\t\tSMB_OFF_T startpos,\n+\t\t\t\tsize_t numtowrite);\n+int process_aio_queue(void);\n+void cancel_aio_by_fsp(files_struct *fsp);\n+BOOL aio_finished(void);\n+void initialize_async_io_handler(void);\n+int process_aio_queue(void);\n+BOOL schedule_aio_read_and_X(connection_struct *conn,\n+\t\t\t     char *inbuf, char *outbuf,\n+\t\t\t     int length, int len_outbuf,\n+\t\t\t     files_struct *fsp, SMB_OFF_T startpos,\n+\t\t\t     size_t smb_maxcnt);\n+BOOL schedule_aio_write_and_X(connection_struct *conn,\n+                                char *inbuf, char *outbuf,\n+                                int length, int len_outbuf,\n+                                files_struct *fsp, char *data,\n+                                SMB_OFF_T startpos,\n+                                size_t numtowrite);\n+void cancel_aio_by_fsp(files_struct *fsp);\n+\n+/* The following definitions come from smbd/blocking.c  */\n+\n+BOOL push_blocking_lock_request( struct byte_range_lock *br_lck,\n+\t\tchar *inbuf, int length,\n+\t\tfiles_struct *fsp,\n+\t\tint lock_timeout,\n+\t\tint lock_num,\n+\t\tuint32 lock_pid,\n+\t\tenum brl_type lock_type,\n+\t\tenum brl_flavour lock_flav,\n+\t\tSMB_BIG_UINT offset,\n+\t\tSMB_BIG_UINT count,\n+\t\tuint32 blocking_pid);\n+void cancel_pending_lock_requests_by_fid(files_struct *fsp, struct  \nbyte_range_lock *br_lck);\n+void remove_pending_lock_requests_by_mid(int mid);\n+BOOL blocking_lock_was_deferred(int mid);\n+BOOL blocking_lock_cancel(files_struct *fsp,\n+\t\t\tuint32 lock_pid,\n+\t\t\tSMB_BIG_UINT offset,\n+\t\t\tSMB_BIG_UINT count,\n+\t\t\tenum brl_flavour lock_flav,\n+\t\t\tunsigned char locktype,\n+                        NTSTATUS err);\n+\n+/* The following definitions come from smbd/change_trust_pw.c  */\n+\n+NTSTATUS change_trust_account_password( const char *domain, const  \nchar *remote_machine);\n+\n+/* The following definitions come from smbd/chgpasswd.c  */\n+\n+BOOL chgpasswd(const char *name, const struct passwd *pass,\n+\t       const char *oldpass, const char *newpass, BOOL as_root);\n+BOOL chgpasswd(const char *name, const struct passwd *pass,\n+\t       const char *oldpass, const char *newpass, BOOL as_root);\n+BOOL check_lanman_password(char *user, uchar * pass1,\n+\t\t\t   uchar * pass2, struct samu **hnd);\n+BOOL change_lanman_password(struct samu *sampass, uchar *pass2);\n+NTSTATUS pass_oem_change(char *user,\n+\t\t\t uchar password_encrypted_with_lm_hash[516],\n+\t\t\t const uchar old_lm_hash_encrypted[16],\n+\t\t\t uchar password_encrypted_with_nt_hash[516],\n+\t\t\t const uchar old_nt_hash_encrypted[16],\n+\t\t\t uint32 *reject_reason);\n+NTSTATUS change_oem_password(struct samu *hnd, char *old_passwd,  \nchar *new_passwd, BOOL as_root, uint32 *samr_reject_reason);\n+\n+/* The following definitions come from smbd/close.c  */\n+\n+NTSTATUS close_stat(files_struct *fsp);\n+NTSTATUS close_file(files_struct *fsp, enum file_close_type  \nclose_type);\n+\n+/* The following definitions come from smbd/conn.c  */\n+\n+void conn_init(void);\n+int conn_num_open(void);\n+BOOL conn_snum_used(int snum);\n+connection_struct *conn_find(unsigned cnum);\n+connection_struct *conn_new(void);\n+void conn_close_all(void);\n+BOOL conn_idle_all(time_t t);\n+void conn_clear_vuid_cache(uint16 vuid);\n+void conn_free_internal(connection_struct *conn);\n+void conn_free(connection_struct *conn);\n+void msg_force_tdis(struct messaging_context *msg,\n+\t\t    void *private_data,\n+\t\t    uint32_t msg_type,\n+\t\t    struct server_id server_id,\n+\t\t    DATA_BLOB *data);\n+\n+/* The following definitions come from smbd/connection.c  */\n+\n+BOOL yield_connection(connection_struct *conn, const char *name);\n+int count_current_connections( const char *sharename, BOOL clear  );\n+int count_all_current_connections(void);\n+BOOL claim_connection(connection_struct *conn, const char *name,\n+\t\t      uint32 msg_flags);\n+BOOL register_message_flags(BOOL doreg, uint32 msg_flags);\n+BOOL store_pipe_opendb( smb_np_struct *p );\n+BOOL delete_pipe_opendb( smb_np_struct *p );\n+\n+/* The following definitions come from smbd/dfree.c  */\n+\n+SMB_BIG_UINT sys_disk_free(connection_struct *conn, const char  \n*path, BOOL small_query,\n+                              SMB_BIG_UINT *bsize,SMB_BIG_UINT  \n*dfree,SMB_BIG_UINT *dsize);\n+SMB_BIG_UINT get_dfree_info(connection_struct *conn,\n+\t\t\tconst char *path,\n+\t\t\tBOOL small_query,\n+\t\t\tSMB_BIG_UINT *bsize,\n+\t\t\tSMB_BIG_UINT *dfree,\n+\t\t\tSMB_BIG_UINT *dsize);\n+\n+/* The following definitions come from smbd/dir.c  */\n+\n+void make_dir_struct(char *buf, const char *mask, const char  \n*fname,SMB_OFF_T size,uint32 mode,time_t date, BOOL uc);\n+void init_dptrs(void);\n+char *dptr_path(int key);\n+char *dptr_wcard(int key);\n+uint16 dptr_attr(int key);\n+void dptr_close(int *key);\n+void dptr_closecnum(connection_struct *conn);\n+void dptr_idlecnum(connection_struct *conn);\n+void dptr_closepath(char *path,uint16 spid);\n+NTSTATUS dptr_create(connection_struct *conn, pstring path, BOOL  \nold_handle, BOOL expect_close,uint16 spid,\n+\t\tconst char *wcard, BOOL wcard_has_wild, uint32 attr, struct  \ndptr_struct **dptr_ret);\n+int dptr_CloseDir(struct dptr_struct *dptr);\n+void dptr_SeekDir(struct dptr_struct *dptr, long offset);\n+long dptr_TellDir(struct dptr_struct *dptr);\n+BOOL dptr_has_wild(struct dptr_struct *dptr);\n+int dptr_dnum(struct dptr_struct *dptr);\n+const char *dptr_ReadDirName(struct dptr_struct *dptr, long  \n*poffset, SMB_STRUCT_STAT *pst);\n+BOOL dptr_SearchDir(struct dptr_struct *dptr, const char *name, long  \n*poffset, SMB_STRUCT_STAT *pst);\n+void dptr_DirCacheAdd(struct dptr_struct *dptr, const char *name,  \nlong offset);\n+BOOL dptr_fill(char *buf1,unsigned int key);\n+struct dptr_struct *dptr_fetch(char *buf,int *num);\n+struct dptr_struct *dptr_fetch_lanman2(int dptr_num);\n+BOOL dir_check_ftype(connection_struct *conn, uint32 mode, uint32  \ndirtype);\n+BOOL get_dir_entry(connection_struct *conn,char *mask,uint32  \ndirtype, pstring fname,\n+                   SMB_OFF_T *size,uint32 *mode,time_t *date,BOOL  \ncheck_descend);\n+BOOL is_visible_file(connection_struct *conn, const char *dir_path,  \nconst char *name, SMB_STRUCT_STAT *pst, BOOL use_veto);\n+struct smb_Dir *OpenDir(connection_struct *conn, const char *name,  \nconst char *mask, uint32 attr);\n+int CloseDir(struct smb_Dir *dirp);\n+const char *ReadDirName(struct smb_Dir *dirp, long *poffset);\n+void RewindDir(struct smb_Dir *dirp, long *poffset);\n+void SeekDir(struct smb_Dir *dirp, long offset);\n+long TellDir(struct smb_Dir *dirp);\n+void DirCacheAdd(struct smb_Dir *dirp, const char *name, long offset);\n+BOOL SearchDir(struct smb_Dir *dirp, const char *name, long *poffset);\n+NTSTATUS can_delete_directory(struct connection_struct *conn,\n+\t\t\t\tconst char *dirname);\n+\n+/* The following definitions come from smbd/dmapi.c  */\n+\n+BOOL dmapi_have_session(void);\n+int dmapi_init_session(void);\n+uint32 dmapi_file_flags(const char * const path);\n+\n+/* The following definitions come from smbd/dosmode.c  */\n+\n+mode_t unix_mode(connection_struct *conn, int dosmode, const char  \n*fname,\n+\t\t const char *inherit_from_dir);\n+uint32 dos_mode_msdfs(connection_struct *conn, const char  \n*path,SMB_STRUCT_STAT *sbuf);\n+uint32 dos_mode(connection_struct *conn, const char  \n*path,SMB_STRUCT_STAT *sbuf);\n+int file_set_dosmode(connection_struct *conn, const char *fname,\n+\t\t     uint32 dosmode, SMB_STRUCT_STAT *st,\n+\t\t     const char *parent_dir);\n+int file_ntimes(connection_struct *conn, const char *fname, const  \nstruct timespec ts[2]);\n+BOOL set_filetime(connection_struct *conn, const char *fname,\n+\t\tconst struct timespec mtime);\n+\n+/* The following definitions come from smbd/error.c  */\n+\n+int cached_error_packet(const char *inbuf,char *outbuf,files_struct  \n*fsp,int line,const char *file);\n+int unix_error_packet(const char *inbuf,char *outbuf,int  \ndef_class,uint32 def_code, NTSTATUS def_status, int line, const char  \n*file);\n+BOOL use_nt_status(void);\n+void error_packet_set(char *outbuf, uint8 eclass, uint32 ecode,  \nNTSTATUS ntstatus, int line, const char *file);\n+int error_packet(const char *inbuf, char *outbuf, uint8 eclass,  \nuint32 ecode, NTSTATUS ntstatus, int line, const char *file);\n+\n+/* The following definitions come from smbd/fake_file.c  */\n+\n+enum FAKE_FILE_TYPE is_fake_file(const char *fname);\n+NTSTATUS open_fake_file(connection_struct *conn,\n+\t\t\t\tenum FAKE_FILE_TYPE fake_file_type,\n+\t\t\t\tconst char *fname,\n+\t\t\t\tuint32 access_mask,\n+\t\t\t\tfiles_struct **result);\n+void destroy_fake_file_handle(FAKE_FILE_HANDLE **fh);\n+NTSTATUS close_fake_file(files_struct *fsp);\n+\n+/* The following definitions come from smbd/fileio.c  */\n+\n+ssize_t read_file(files_struct *fsp,char *data,SMB_OFF_T pos,size_t n);\n+ssize_t write_file(files_struct *fsp, const char *data, SMB_OFF_T  \npos, size_t n);\n+void delete_write_cache(files_struct *fsp);\n+void set_filelen_write_cache(files_struct *fsp, SMB_OFF_T file_size);\n+ssize_t flush_write_cache(files_struct *fsp, enum flush_reason_enum  \nreason);\n+void sync_file(connection_struct *conn, files_struct *fsp, BOOL  \nwrite_through);\n+int fsp_stat(files_struct *fsp, SMB_STRUCT_STAT *pst);\n+\n+/* The following definitions come from smbd/filename.c  */\n+\n+NTSTATUS unix_convert(connection_struct *conn,\n+\t\t\tpstring name,\n+\t\t\tBOOL allow_wcard_last_component,\n+\t\t\tchar *saved_last_component,\n+\t\t\tSMB_STRUCT_STAT *pst);\n+NTSTATUS check_name(connection_struct *conn, const pstring name);\n+\n+/* The following definitions come from smbd/files.c  */\n+\n+NTSTATUS file_new(connection_struct *conn, files_struct **result);\n+void file_close_conn(connection_struct *conn);\n+void file_close_pid(uint16 smbpid, int vuid);\n+void file_init(void);\n+void file_close_user(int vuid);\n+void file_dump_open_table(void);\n+files_struct *file_find_fd(int fd);\n+files_struct *file_find_dif(struct file_id id, unsigned long gen_id);\n+files_struct *file_find_fsp(files_struct *orig_fsp);\n+files_struct *file_find_di_first(struct file_id id);\n+files_struct *file_find_di_next(files_struct *start_fsp);\n+files_struct *file_find_print(void);\n+void fsp_set_pending_modtime(files_struct *tfsp, const struct  \ntimespec mod);\n+void file_sync_all(connection_struct *conn);\n+void file_free(files_struct *fsp);\n+files_struct *file_fnum(uint16 fnum);\n+files_struct *file_fsp(char *buf, int where);\n+void file_chain_reset(void);\n+NTSTATUS dup_file_fsp(files_struct *fsp,\n+\t\t\t\tuint32 access_mask,\n+\t\t\t\tuint32 share_access,\n+\t\t\t\tuint32 create_options,\n+\t\t      \t\tfiles_struct **result);\n+\n+/* The following definitions come from smbd/ipc.c  */\n+\n+void send_trans_reply(const char *inbuf,\n+\t\t\tchar *outbuf,\n+\t\t\tchar *rparam,\n+\t\t\tint rparam_len,\n+\t\t\tchar *rdata,\n+\t\t\tint rdata_len,\n+\t\t\tBOOL buffer_too_large);\n+int reply_trans(connection_struct *conn,\n+\t\tchar *inbuf,\n+\t\tchar *outbuf,\n+\t\tint size,\n+\t\tint bufsize);\n+int reply_transs(connection_struct *conn, char *inbuf,char *outbuf,\n+\t\t int size, int bufsize);\n+\n+/* The following definitions come from smbd/lanman.c  */\n+\n+int api_reply(connection_struct *conn,\n+\t\tuint16 vuid,\n+\t\tconst char *inbuf,\n+\t\tchar *outbuf,\n+\t\tchar *data,\n+\t\tchar *params,\n+\t\tint tdscnt,\n+\t\tint tpscnt,\n+\t\tint mdrcnt,\n+\t\tint mprcnt);\n+\n+/* The following definitions come from smbd/mangle.c  */\n+\n+void mangle_reset_cache(void);\n+void mangle_change_to_posix(void);\n+BOOL mangle_is_mangled(const char *s, const struct share_params *p);\n+BOOL mangle_is_8_3(const char *fname, BOOL check_case,\n+\t\t   const struct share_params *p);\n+BOOL mangle_is_8_3_wildcards(const char *fname, BOOL check_case,\n+\t\t\t     const struct share_params *p);\n+BOOL mangle_check_cache(char *s, size_t maxlen,\n+\t\t\tconst struct share_params *p);\n+void mangle_map(pstring OutName, BOOL need83, BOOL cache83,\n+\t\tconst struct share_params *p);\n+\n+/* The following definitions come from smbd/mangle_hash.c  */\n+\n+struct mangle_fns *mangle_hash_init(void);\n+\n+/* The following definitions come from smbd/mangle_hash2.c  */\n+\n+struct mangle_fns *mangle_hash2_init(void);\n+struct mangle_fns *posix_mangle_init(void);\n+\n+/* The following definitions come from smbd/mangle_map.c  */\n+\n+void mangle_map_filename(fstring fname, const struct share_params *p);\n+\n+/* The following definitions come from smbd/map_username.c  */\n+\n+BOOL map_username(fstring user);\n+\n+/* The following definitions come from smbd/message.c  */\n+\n+int reply_sends(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_sendstrt(connection_struct *conn, char *inbuf,char  \n*outbuf, int dum_size, int dum_buffsize);\n+int reply_sendtxt(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_sendend(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+\n+/* The following definitions come from smbd/msdfs.c  */\n+\n+BOOL is_msdfs_link(connection_struct *conn,\n+\t\t\tconst char *path,\n+\t\t\tpstring link_target,\n+\t\t\tSMB_STRUCT_STAT *sbufp);\n+NTSTATUS get_referred_path(TALLOC_CTX *ctx,\n+\t\t\tconst char *dfs_path,\n+\t\t\tstruct junction_map *jucn,\n+\t\t\tint *consumedcntp,\n+\t\t\tBOOL *self_referralp);\n+int setup_dfs_referral(connection_struct *orig_conn,\n+\t\t\tconst char *dfs_path,\n+\t\t\tint max_referral_level,\n+\t\t\tchar **ppdata, NTSTATUS *pstatus);\n+BOOL create_junction(const char *dfs_path, struct junction_map *jucn);\n+BOOL create_msdfs_link(struct junction_map *jucn, BOOL exists);\n+BOOL remove_msdfs_link(struct junction_map *jucn);\n+int enum_msdfs_links(TALLOC_CTX *ctx, struct junction_map *jucn, int  \njn_max);\n+NTSTATUS resolve_dfspath(connection_struct *conn, BOOL  \ndfs_pathnames, pstring name);\n+NTSTATUS resolve_dfspath_wcard(connection_struct *conn, BOOL  \ndfs_pathnames, pstring name, BOOL *ppath_contains_wcard);\n+\n+/* The following definitions come from smbd/negprot.c  */\n+\n+int reply_negprot(connection_struct *conn,\n+\t\t  char *inbuf,char *outbuf, int dum_size,\n+\t\t  int dum_buffsize);\n+\n+/* The following definitions come from smbd/notify.c  */\n+\n+void change_notify_reply(const char *request_buf, uint32  \nmax_param_count,\n+\t\t\t struct notify_change_buf *notify_buf);\n+NTSTATUS change_notify_create(struct files_struct *fsp, uint32 filter,\n+\t\t\t      BOOL recursive);\n+NTSTATUS change_notify_add_request(const char *inbuf, uint32  \nmax_param_count,\n+\t\t\t\t   uint32 filter, BOOL recursive,\n+\t\t\t\t   struct files_struct *fsp);\n+void remove_pending_change_notify_requests_by_mid(uint16 mid);\n+void remove_pending_change_notify_requests_by_fid(files_struct *fsp,\n+\t\t\t\t\t\t  NTSTATUS status);\n+void notify_fname(connection_struct *conn, uint32 action, uint32  \nfilter,\n+\t\t  const char *path);\n+char *notify_filter_string(TALLOC_CTX *mem_ctx, uint32 filter);\n+struct sys_notify_context *sys_notify_context_create \n(connection_struct *conn,\n+\t\t\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\t     struct event_context *ev);\n+NTSTATUS sys_notify_watch(struct sys_notify_context *ctx,\n+\t\t\t  struct notify_entry *e,\n+\t\t\t  void (*callback)(struct sys_notify_context *ctx,\n+\t\t\t\t\t   void *private_data,\n+\t\t\t\t\t   struct notify_event *ev),\n+\t\t\t  void *private_data, void *handle);\n+\n+/* The following definitions come from smbd/notify_inotify.c  */\n+\n+NTSTATUS inotify_watch(struct sys_notify_context *ctx,\n+\t\t       struct notify_entry *e,\n+\t\t       void (*callback)(struct sys_notify_context *ctx,\n+\t\t\t\t\tvoid *private_data,\n+\t\t\t\t\tstruct notify_event *ev),\n+\t\t       void *private_data,\n+\t\t       void *handle_p);\n+\n+/* The following definitions come from smbd/notify_internal.c  */\n+\n+struct notify_context *notify_init(TALLOC_CTX *mem_ctx, struct  \nserver_id server,\n+\t\t\t\t   struct messaging_context *messaging_ctx,\n+\t\t\t\t   struct event_context *ev,\n+\t\t\t\t   connection_struct *conn);\n+NTSTATUS notify_add(struct notify_context *notify, struct  \nnotify_entry *e0,\n+\t\t    void (*callback)(void *, const struct notify_event *),\n+\t\t    void *private_data);\n+NTSTATUS notify_remove(struct notify_context *notify, void  \n*private_data);\n+void notify_trigger(struct notify_context *notify,\n+\t\t    uint32_t action, uint32_t filter, const char *path);\n+\n+/* The following definitions come from smbd/ntquotas.c  */\n+\n+int vfs_get_ntquota(files_struct *fsp, enum SMB_QUOTA_TYPE qtype,  \nDOM_SID *psid, SMB_NTQUOTA_STRUCT *qt);\n+int vfs_set_ntquota(files_struct *fsp, enum SMB_QUOTA_TYPE qtype,  \nDOM_SID *psid, SMB_NTQUOTA_STRUCT *qt);\n+int vfs_get_user_ntquota_list(files_struct *fsp, SMB_NTQUOTA_LIST  \n**qt_list);\n+void *init_quota_handle(TALLOC_CTX *mem_ctx);\n+void destroy_quota_handle(void **pqt_handle);\n+\n+/* The following definitions come from smbd/nttrans.c  */\n+\n+int send_nt_replies(const char *inbuf,\n+\t\t\tchar *outbuf,\n+\t\t\tint bufsize,\n+\t\t\tNTSTATUS nt_error,\n+\t\t\tchar *params,\n+\t\t\tint paramsize,\n+\t\t\tchar *pdata,\n+\t\t\tint datasize);\n+BOOL is_ntfs_stream_name(const char *fname);\n+int reply_ntcreate_and_X_quota(connection_struct *conn,\n+\t\t\t\tchar *inbuf,\n+\t\t\t\tchar *outbuf,\n+\t\t\t\tint length,\n+\t\t\t\tint bufsize,\n+\t\t\t\tenum FAKE_FILE_TYPE fake_file_type,\n+\t\t\t\tconst char *fname);\n+int reply_ntcreate_and_X(connection_struct *conn,\n+\t\t\t char *inbuf,char *outbuf,int length,int bufsize);\n+int reply_ntcancel(connection_struct *conn,\n+\t\t   char *inbuf,char *outbuf,int length,int bufsize);\n+int reply_ntrename(connection_struct *conn,\n+\t\t   char *inbuf,char *outbuf,int length,int bufsize);\n+int reply_nttrans(connection_struct *conn,\n+\t\t\tchar *inbuf,char *outbuf,int size,int bufsize);\n+int reply_nttranss(connection_struct *conn,  char *inbuf,char *outbuf,\n+\t\t   int size,int bufsize);\n+\n+/* The following definitions come from smbd/open.c  */\n+\n+NTSTATUS fd_close(struct connection_struct *conn, files_struct *fsp);\n+BOOL map_open_params_to_ntcreate(const char *fname, int deny_mode,  \nint open_func,\n+\t\t\t\t uint32 *paccess_mask,\n+\t\t\t\t uint32 *pshare_mode,\n+\t\t\t\t uint32 *pcreate_disposition,\n+\t\t\t\t uint32 *pcreate_options);\n+NTSTATUS open_file_ntcreate(connection_struct *conn,\n+\t\t\t    const char *fname,\n+\t\t\t    SMB_STRUCT_STAT *psbuf,\n+\t\t\t    uint32 access_mask,\t\t/* access bits (FILE_READ_DATA etc.) */\n+\t\t\t    uint32 share_access,\t/* share constants (FILE_SHARE_READ etc) */\n+\t\t\t    uint32 create_disposition,\t/* FILE_OPEN_IF etc. */\n+\t\t\t    uint32 create_options,\t/* options such as delete on close. */\n+\t\t\t    uint32 new_dos_attributes,\t/* attributes used for new file. */\n+\t\t\t    int oplock_request, \t/* internal Samba oplock codes. */\n+\t\t\t\t \t\t\t/* Information (FILE_EXISTS etc.) */\n+\t\t\t    int *pinfo,\n+\t\t\t    files_struct **result);\n+NTSTATUS open_file_fchmod(connection_struct *conn, const char *fname,\n+\t\t\t  SMB_STRUCT_STAT *psbuf, files_struct **result);\n+NTSTATUS close_file_fchmod(files_struct *fsp);\n+NTSTATUS open_directory(connection_struct *conn,\n+\t\t\tconst char *fname,\n+\t\t\tSMB_STRUCT_STAT *psbuf,\n+\t\t\tuint32 access_mask,\n+\t\t\tuint32 share_access,\n+\t\t\tuint32 create_disposition,\n+\t\t\tuint32 create_options,\n+\t\t\tuint32 file_attributes,\n+\t\t\tint *pinfo,\n+\t\t\tfiles_struct **result);\n+NTSTATUS create_directory(connection_struct *conn, const char  \n*directory);\n+NTSTATUS open_file_stat(connection_struct *conn, const char *fname,\n+\t\t\tSMB_STRUCT_STAT *psbuf, files_struct **result);\n+void msg_file_was_renamed(struct messaging_context *msg,\n+\t\t\t  void *private_data,\n+\t\t\t  uint32_t msg_type,\n+\t\t\t  struct server_id server_id,\n+\t\t\t  DATA_BLOB *data);\n+\n+/* The following definitions come from smbd/oplock.c  */\n+\n+int32 get_number_of_exclusive_open_oplocks(void);\n+BOOL oplock_message_waiting(fd_set *fds);\n+void process_kernel_oplocks(struct messaging_context *msg_ctx,  \nfd_set *pfds);\n+BOOL set_file_oplock(files_struct *fsp, int oplock_type);\n+void release_file_oplock(files_struct *fsp);\n+BOOL remove_oplock(files_struct *fsp);\n+BOOL downgrade_oplock(files_struct *fsp);\n+int oplock_notify_fd(void);\n+void reply_to_oplock_break_requests(files_struct *fsp);\n+void release_level_2_oplocks_on_change(files_struct *fsp);\n+void share_mode_entry_to_message(char *msg, struct share_mode_entry  \n*e);\n+void message_to_share_mode_entry(struct share_mode_entry *e, char  \n*msg);\n+BOOL init_oplocks(struct messaging_context *msg_ctx);\n+\n+/* The following definitions come from smbd/oplock_irix.c  */\n+\n+struct kernel_oplocks *irix_init_kernel_oplocks(void) ;\n+\n+/* The following definitions come from smbd/oplock_linux.c  */\n+\n+int linux_set_lease_sighandler(int fd);\n+int linux_setlease(int fd, int leasetype);\n+struct kernel_oplocks *linux_init_kernel_oplocks(void) ;\n+\n+/* The following definitions come from smbd/password.c  */\n+\n+user_struct *get_valid_user_struct(uint16 vuid);\n+user_struct *get_partial_auth_user_struct(uint16 vuid);\n+void invalidate_vuid(uint16 vuid);\n+void invalidate_all_vuids(void);\n+int register_vuid(auth_serversupplied_info *server_info,\n+\t\t  DATA_BLOB session_key, DATA_BLOB response_blob,\n+\t\t  const char *smb_name);\n+void add_session_user(const char *user);\n+void add_session_workgroup(const char *workgroup);\n+const char *get_session_workgroup(void);\n+BOOL user_in_netgroup(const char *user, const char *ngname);\n+BOOL user_in_list(const char *user,const char **list);\n+BOOL authorise_login(int snum, fstring user, DATA_BLOB password,\n+\t\t     BOOL *guest);\n+\n+/* The following definitions come from smbd/pipes.c  */\n+\n+int reply_open_pipe_and_X(connection_struct *conn,\n+\t\t\t  char *inbuf,char *outbuf,int length,int bufsize);\n+int reply_pipe_write(char *inbuf,char *outbuf,int length,int  \ndum_bufsize);\n+int reply_pipe_write_and_X(char *inbuf,char *outbuf,int length,int  \nbufsize);\n+int reply_pipe_read_and_X(char *inbuf,char *outbuf,int length,int  \nbufsize);\n+int reply_pipe_close(connection_struct *conn, char *inbuf,char  \n*outbuf);\n+\n+/* The following definitions come from smbd/posix_acls.c  */\n+\n+BOOL unpack_nt_owners(int snum, uid_t *puser, gid_t *pgrp, uint32  \nsecurity_info_sent, SEC_DESC *psd);\n+SMB_ACL_T free_empty_sys_acl(connection_struct *conn, SMB_ACL_T  \nthe_acl);\n+size_t get_nt_acl(files_struct *fsp, uint32 security_info, SEC_DESC  \n**ppdesc);\n+int try_chown(connection_struct *conn, const char *fname, uid_t uid,  \ngid_t gid);\n+BOOL set_nt_acl(files_struct *fsp, uint32 security_info_sent,  \nSEC_DESC *psd);\n+int get_acl_group_bits( connection_struct *conn, const char *fname,  \nmode_t *mode );\n+int chmod_acl(connection_struct *conn, const char *name, mode_t mode);\n+int inherit_access_acl(connection_struct *conn, const char  \n*inherit_from_dir,\n+\t\t       const char *name, mode_t mode);\n+int fchmod_acl(files_struct *fsp, int fd, mode_t mode);\n+BOOL directory_has_default_acl(connection_struct *conn, const char  \n*fname);\n+BOOL set_unix_posix_default_acl(connection_struct *conn, const char  \n*fname, SMB_STRUCT_STAT *psbuf,\n+\t\t\t\tuint16 num_def_acls, const char *pdata);\n+BOOL set_unix_posix_acl(connection_struct *conn, files_struct *fsp,  \nconst char *fname, uint16 num_acls, const char *pdata);\n+BOOL can_delete_file_in_directory(connection_struct *conn, const  \nchar *fname);\n+BOOL can_access_file(connection_struct *conn, const char *fname,  \nSMB_STRUCT_STAT *psbuf, uint32 access_mask);\n+BOOL can_write_to_file(connection_struct *conn, const char *fname,  \nSMB_STRUCT_STAT *psbuf);\n+SEC_DESC* get_nt_acl_no_snum( TALLOC_CTX *ctx, const char *fname);\n+\n+/* The following definitions come from smbd/process.c  */\n+\n+uint16 get_current_mid(void);\n+void remove_deferred_open_smb_message(uint16 mid);\n+void schedule_deferred_open_smb_message(uint16 mid);\n+BOOL open_was_deferred(uint16 mid);\n+struct pending_message_list *get_open_deferred_message(uint16 mid);\n+BOOL push_deferred_smb_message(uint16 mid,\n+\t\t\t       struct timeval request_time,\n+\t\t\t       struct timeval timeout,\n+\t\t\t       char *private_data, size_t priv_len);\n+struct idle_event *event_add_idle(struct event_context *event_ctx,\n+\t\t\t\t  TALLOC_CTX *mem_ctx,\n+\t\t\t\t  struct timeval interval,\n+\t\t\t\t  const char *name,\n+\t\t\t\t  BOOL (*handler)(const struct timeval *now,\n+\t\t\t\t\t\t  void *private_data),\n+\t\t\t\t  void *private_data);\n+NTSTATUS allow_new_trans(struct trans_state *list, int mid);\n+void respond_to_all_remaining_local_messages(void);\n+const char *smb_fn_name(int type);\n+void add_to_common_flags2(uint32 v);\n+void remove_from_common_flags2(uint32 v);\n+void construct_reply_common(const char *inbuf, char *outbuf);\n+int chain_reply(char *inbuf,char *outbuf,int size,int bufsize);\n+void check_reload(time_t t);\n+char *get_InBuffer(void);\n+char *get_OutBuffer(void);\n+void smbd_process(void);\n+\n+/* The following definitions come from smbd/quotas.c  */\n+\n+BOOL disk_quotas(const char *path, SMB_BIG_UINT *bsize, SMB_BIG_UINT  \n*dfree, SMB_BIG_UINT *dsize);\n+BOOL disk_quotas(const char *path, SMB_BIG_UINT *bsize, SMB_BIG_UINT  \n*dfree, SMB_BIG_UINT *dsize);\n+BOOL disk_quotas(const char *path, SMB_BIG_UINT *bsize, SMB_BIG_UINT  \n*dfree, SMB_BIG_UINT *dsize);\n+BOOL disk_quotas(const char *path, SMB_BIG_UINT *bsize, SMB_BIG_UINT  \n*dfree, SMB_BIG_UINT *dsize);\n+BOOL disk_quotas(const char *path, SMB_BIG_UINT *bsize, SMB_BIG_UINT  \n*dfree, SMB_BIG_UINT *dsize);\n+BOOL disk_quotas(const char *path, SMB_BIG_UINT *bsize, SMB_BIG_UINT  \n*dfree, SMB_BIG_UINT *dsize);\n+BOOL disk_quotas_vxfs(const pstring name, char *path, SMB_BIG_UINT  \n*bsize, SMB_BIG_UINT *dfree, SMB_BIG_UINT *dsize);\n+BOOL disk_quotas(const char *path,SMB_BIG_UINT *bsize,SMB_BIG_UINT  \n*dfree,SMB_BIG_UINT *dsize);\n+BOOL disk_quotas(const char *path,SMB_BIG_UINT *bsize,SMB_BIG_UINT  \n*dfree,SMB_BIG_UINT *dsize);\n+\n+/* The following definitions come from smbd/reply.c  */\n+\n+NTSTATUS check_path_syntax_internal(pstring destname,\n+\t\t\t\t    const pstring srcname,\n+\t\t\t\t    BOOL posix_path,\n+\t\t\t\t    BOOL *p_last_component_contains_wcard);\n+NTSTATUS check_path_syntax(pstring destname, const pstring srcname);\n+NTSTATUS check_path_syntax_wcard(pstring destname, const pstring  \nsrcname, BOOL *p_contains_wcard);\n+NTSTATUS check_path_syntax_posix(pstring destname, const pstring  \nsrcname);\n+size_t srvstr_get_path_wcard(char *inbuf, char *dest, const char  \n*src, size_t dest_len, size_t src_len, int flags,\n+\t\t\t\tNTSTATUS *err, BOOL *contains_wcard);\n+size_t srvstr_get_path(char *inbuf, char *dest, const char *src,  \nsize_t dest_len, size_t src_len, int flags, NTSTATUS *err);\n+int reply_special(char *inbuf,char *outbuf);\n+int reply_tcon(connection_struct *conn,\n+\t       char *inbuf,char *outbuf, int dum_size, int dum_buffsize);\n+int reply_tcon_and_X(connection_struct *conn, char *inbuf,char  \n*outbuf,int length,int bufsize);\n+int reply_unknown(char *inbuf,char *outbuf);\n+int reply_ioctl(connection_struct *conn,\n+\t\tchar *inbuf,char *outbuf, int dum_size, int dum_buffsize);\n+int reply_checkpath(connection_struct *conn, char *inbuf,char  \n*outbuf, int dum_size, int dum_buffsize);\n+int reply_getatr(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_setatr(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_dskattr(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_search(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_fclose(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_open(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_open_and_X(connection_struct *conn, char *inbuf,char  \n*outbuf,int length,int bufsize);\n+int reply_ulogoffX(connection_struct *conn, char *inbuf,char  \n*outbuf,int length,int bufsize);\n+int reply_mknew(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_ctemp(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+NTSTATUS unlink_internals(connection_struct *conn, uint32 dirtype,\n+\t\t\t  char *name, BOOL has_wild, BOOL can_defer);\n+int reply_unlink(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size,\n+\t\t int dum_buffsize);\n+void send_file_readbraw(connection_struct *conn, files_struct *fsp,  \nSMB_OFF_T startpos, size_t nread,\n+\t\tssize_t mincount, char *outbuf, int out_buffsize);\n+int reply_readbraw(connection_struct *conn, char *inbuf, char  \n*outbuf, int dum_size, int out_buffsize);\n+int reply_lockread(connection_struct *conn, char *inbuf,char  \n*outbuf, int length, int dum_buffsiz);\n+int reply_read(connection_struct *conn, char *inbuf,char *outbuf,  \nint size, int dum_buffsize);\n+int send_file_readX(connection_struct *conn, char *inbuf,char  \n*outbuf,int length, int len_outbuf,\n+\t\tfiles_struct *fsp, SMB_OFF_T startpos, size_t smb_maxcnt);\n+int reply_read_and_X(connection_struct *conn, char *inbuf,char  \n*outbuf,int length,int bufsize);\n+int reply_writebraw(connection_struct *conn, char *inbuf,char  \n*outbuf, int size, int dum_buffsize);\n+int reply_writeunlock(connection_struct *conn, char *inbuf,char  \n*outbuf,\n+\t\t      int size, int dum_buffsize);\n+int reply_write(connection_struct *conn, char *inbuf,char  \n*outbuf,int size,int dum_buffsize);\n+int reply_write_and_X(connection_struct *conn, char *inbuf,char  \n*outbuf,int length,int bufsize);\n+int reply_lseek(connection_struct *conn, char *inbuf,char *outbuf,  \nint size, int dum_buffsize);\n+int reply_flush(connection_struct *conn, char *inbuf,char *outbuf,  \nint size, int dum_buffsize);\n+int reply_exit(connection_struct *conn,\n+\t       char *inbuf,char *outbuf, int dum_size, int dum_buffsize);\n+int reply_close(connection_struct *conn, char *inbuf,char *outbuf,  \nint size,\n+                int dum_buffsize);\n+int reply_writeclose(connection_struct *conn,\n+\t\t     char *inbuf,char *outbuf, int size, int dum_buffsize);\n+int reply_lock(connection_struct *conn,\n+\t       char *inbuf,char *outbuf, int length, int dum_buffsize);\n+int reply_unlock(connection_struct *conn, char *inbuf,char *outbuf,  \nint size,\n+\t\t int dum_buffsize);\n+int reply_tdis(connection_struct *conn,\n+\t       char *inbuf,char *outbuf, int dum_size, int dum_buffsize);\n+int reply_echo(connection_struct *conn,\n+\t       char *inbuf,char *outbuf, int dum_size, int dum_buffsize);\n+int reply_printopen(connection_struct *conn,\n+\t\t    char *inbuf,char *outbuf, int dum_size, int dum_buffsize);\n+int reply_printclose(connection_struct *conn,\n+\t\t     char *inbuf,char *outbuf, int dum_size, int dum_buffsize);\n+int reply_printqueue(connection_struct *conn,\n+\t\t     char *inbuf,char *outbuf, int dum_size, int dum_buffsize);\n+int reply_printwrite(connection_struct *conn, char *inbuf,char  \n*outbuf, int dum_size, int dum_buffsize);\n+int reply_mkdir(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+NTSTATUS rmdir_internals(connection_struct *conn, const char  \n*directory);\n+int reply_rmdir(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+NTSTATUS rename_internals_fsp(connection_struct *conn, files_struct  \n*fsp, pstring newname, uint32 attrs, BOOL replace_if_exists);\n+NTSTATUS rename_internals(connection_struct *conn,\n+\t\t\t\tpstring name,\n+\t\t\t\tpstring newname,\n+\t\t\t\tuint32 attrs,\n+\t\t\t\tBOOL replace_if_exists,\n+\t\t\t\tBOOL src_has_wild,\n+\t\t\t\tBOOL dest_has_wild);\n+int reply_mv(connection_struct *conn, char *inbuf,char *outbuf, int  \ndum_size,\n+\t     int dum_buffsize);\n+NTSTATUS copy_file(connection_struct *conn,\n+\t\t\tchar *src,\n+\t\t\tchar *dest1,\n+\t\t\tint ofun,\n+\t\t\tint count,\n+\t\t\tBOOL target_is_directory);\n+int reply_copy(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_setdir(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+uint32 get_lock_pid( char *data, int data_offset, BOOL  \nlarge_file_format);\n+SMB_BIG_UINT get_lock_count( char *data, int data_offset, BOOL  \nlarge_file_format);\n+SMB_BIG_UINT get_lock_offset( char *data, int data_offset, BOOL  \nlarge_file_format, BOOL *err);\n+int reply_lockingX(connection_struct *conn, char *inbuf, char *outbuf,\n+\t\t   int length, int bufsize);\n+int reply_readbmpx(connection_struct *conn, char *inbuf,char  \n*outbuf,int length,int bufsize);\n+int reply_setattrE(connection_struct *conn, char *inbuf,char  \n*outbuf, int size, int dum_buffsize);\n+int reply_writebmpx(connection_struct *conn, char *inbuf,char  \n*outbuf, int size, int dum_buffsize);\n+int reply_writebs(connection_struct *conn, char *inbuf,char *outbuf,  \nint dum_size, int dum_buffsize);\n+int reply_getattrE(connection_struct *conn, char *inbuf,char  \n*outbuf, int size, int dum_buffsize);\n+\n+/* The following definitions come from smbd/seal.c  */\n+\n+BOOL srv_encryption_on(void);\n+void srv_free_enc_buffer(char *buf);\n+NTSTATUS srv_decrypt_buffer(char *buf);\n+NTSTATUS srv_encrypt_buffer(char *buf, char **buf_out);\n+NTSTATUS srv_request_encryption_setup(connection_struct *conn,\n+\t\t\t\t\tunsigned char **ppdata,\n+\t\t\t\t\tsize_t *p_data_size,\n+\t\t\t\t\tunsigned char **pparam,\n+\t\t\t\t\tsize_t *p_param_size);\n+NTSTATUS srv_encryption_start(connection_struct *conn);\n+void server_encryption_shutdown(void);\n+\n+/* The following definitions come from smbd/sec_ctx.c  */\n+\n+BOOL push_sec_ctx(void);\n+void set_sec_ctx(uid_t uid, gid_t gid, int ngroups, gid_t *groups,  \nNT_USER_TOKEN *token);\n+void set_root_sec_ctx(void);\n+BOOL pop_sec_ctx(void);\n+void init_sec_ctx(void);\n+\n+/* The following definitions come from smbd/server.c  */\n+\n+int smbd_server_fd(void);\n+struct event_context *smbd_event_context(void);\n+struct messaging_context *smbd_messaging_context(void);\n+void reload_printers(void);\n+BOOL reload_services(BOOL test);\n+void exit_server(const char *const explanation);\n+void exit_server_cleanly(const char *const explanation);\n+void exit_server_fault(void);\n+\n+/* The following definitions come from smbd/service.c  */\n+\n+void set_conn_connectpath(connection_struct *conn, const pstring  \nconnectpath);\n+BOOL set_current_service(connection_struct *conn, uint16 flags, BOOL  \ndo_chdir);\n+int add_home_service(const char *service, const char *username,  \nconst char *homedir);\n+void load_registry_shares(void);\n+int find_service(fstring service);\n+connection_struct *make_connection_with_chdir(const char *service_in,\n+\t\t\t\t\t      DATA_BLOB password,\n+\t\t\t\t\t      const char *dev, uint16 vuid,\n+\t\t\t\t\t      NTSTATUS *status);\n+connection_struct *make_connection(const char *service_in, DATA_BLOB  \npassword,\n+\t\t\t\t   const char *pdev, uint16 vuid,\n+\t\t\t\t   NTSTATUS *status);\n+void close_cnum(connection_struct *conn, uint16 vuid);\n+\n+/* The following definitions come from smbd/session.c  */\n+\n+BOOL session_init(void);\n+BOOL session_claim(user_struct *vuser);\n+void session_yield(user_struct *vuser);\n+int list_sessions(TALLOC_CTX *mem_ctx, struct sessionid  \n**session_list);\n+\n+/* The following definitions come from smbd/sesssetup.c  */\n+\n+NTSTATUS parse_spnego_mechanisms(DATA_BLOB blob_in, DATA_BLOB  \n*pblob_out, BOOL *p_is_krb5);\n+int reply_sesssetup_and_X(connection_struct *conn, char *inbuf,char  \n*outbuf,\n+\t\t\t  int length,int bufsize);\n+\n+/* The following definitions come from smbd/share_access.c  */\n+\n+BOOL token_contains_name_in_list(const char *username,\n+\t\t\t\t const char *sharename,\n+\t\t\t\t const struct nt_user_token *token,\n+\t\t\t\t const char **list);\n+BOOL user_ok_token(const char *username, struct nt_user_token  \n*token, int snum);\n+BOOL is_share_read_only_for_token(const char *username,\n+\t\t\t\t  struct nt_user_token *token, int snum);\n+\n+/* The following definitions come from smbd/sockinit.c  */\n+\n+int smbd_sockinit(const char *cmdline_ports, int listenset[FD_SETSIZE],\n+\t\t\tstruct timeval *idle);\n+\n+/* The following definitions come from smbd/srvstr.c  */\n+\n+size_t srvstr_push_fn(const char *function, unsigned int line,\n+\t\t      const char *base_ptr, void *dest,\n+\t\t      const char *src, int dest_len, int flags);\n+\n+/* The following definitions come from smbd/statcache.c  */\n+\n+void stat_cache_add( const char *full_orig_name, const char  \n*orig_translated_path, BOOL case_sensitive);\n+BOOL stat_cache_lookup(connection_struct *conn, pstring name,  \npstring dirpath,\n+\t\t       char **start, SMB_STRUCT_STAT *pst);\n+void send_stat_cache_delete_message(const char *name);\n+void stat_cache_delete(const char *name);\n+unsigned int fast_string_hash(TDB_DATA *key);\n+BOOL reset_stat_cache( void );\n+\n+/* The following definitions come from smbd/statvfs.c  */\n+\n+int sys_statvfs(const char *path, vfs_statvfs_struct *statbuf);\n+\n+/* The following definitions come from smbd/trans2.c  */\n+\n+SMB_BIG_UINT smb_roundup(connection_struct *conn, SMB_BIG_UINT val);\n+SMB_BIG_UINT get_allocation_size(connection_struct *conn,  \nfiles_struct *fsp, const SMB_STRUCT_STAT *sbuf);\n+NTSTATUS set_ea(connection_struct *conn, files_struct *fsp, const  \nchar *fname, struct ea_list *ea_list);\n+struct ea_list *read_ea_list_entry(TALLOC_CTX *ctx, const char  \n*pdata, size_t data_size, size_t *pbytes_used);\n+int send_trans2_replies(const char *inbuf,\n+\t\t\tchar *outbuf,\n+\t\t\tint bufsize,\n+\t\t\tconst char *params,\n+\t\t\tint paramsize,\n+\t\t\tconst char *pdata,\n+\t\t\tint datasize,\n+\t\t\tint max_data_bytes);\n+unsigned char *create_volume_objectid(connection_struct *conn,  \nunsigned char objid[16]);\n+NTSTATUS hardlink_internals(connection_struct *conn, pstring  \noldname, pstring newname);\n+int reply_findclose(connection_struct *conn,\n+\t\t    char *inbuf,char *outbuf,int length,int bufsize);\n+int reply_findnclose(connection_struct *conn,\n+\t\t     char *inbuf,char *outbuf,int length,int bufsize);\n+int handle_trans2(connection_struct *conn,\n+\t\t  struct trans_state *state,\n+\t\t  char *inbuf, char *outbuf, int size, int bufsize);\n+int reply_trans2(connection_struct *conn, char *inbuf,char *outbuf,\n+\t\t int size, int bufsize);\n+int reply_transs2(connection_struct *conn,\n+\t\t  char *inbuf,char *outbuf,int size,int bufsize);\n+\n+/* The following definitions come from smbd/uid.c  */\n+\n+gid_t get_current_user_gid_first(int *piterator);\n+gid_t get_current_user_gid_next(int *piterator);\n+BOOL change_to_guest(void);\n+BOOL change_to_user(connection_struct *conn, uint16 vuid);\n+BOOL change_to_root_user(void);\n+BOOL become_authenticated_pipe_user(pipes_struct *p);\n+BOOL unbecome_authenticated_pipe_user(void);\n+void become_root(void);\n+void unbecome_root(void);\n+BOOL become_user(connection_struct *conn, uint16 vuid);\n+BOOL unbecome_user(void);\n+\n+/* The following definitions come from smbd/utmp.c  */\n+\n+void sys_utmp_claim(const char *username, const char *hostname,\n+\t\t    struct in_addr *ipaddr,\n+\t\t    const char *id_str, int id_num);\n+void sys_utmp_yield(const char *username, const char *hostname,\n+\t\t    struct in_addr *ipaddr,\n+\t\t    const char *id_str, int id_num);\n+void sys_utmp_yield(const char *username, const char *hostname,\n+\t\t    struct in_addr *ipaddr,\n+\t\t    const char *id_str, int id_num);\n+void sys_utmp_claim(const char *username, const char *hostname,\n+\t\t    struct in_addr *ipaddr,\n+\t\t    const char *id_str, int id_num);\n+\n+/* The following definitions come from smbd/vfs.c  */\n+\n+NTSTATUS smb_register_vfs(int version, const char *name,  \nvfs_op_tuple *vfs_op_tuples);\n+BOOL vfs_init_custom(connection_struct *conn, const char *vfs_object);\n+void *vfs_add_fsp_extension_notype(vfs_handle_struct *handle,  \nfiles_struct *fsp, size_t ext_size);\n+void vfs_remove_fsp_extension(vfs_handle_struct *handle,  \nfiles_struct *fsp);\n+void *vfs_fetch_fsp_extension(vfs_handle_struct *handle,  \nfiles_struct *fsp);\n+BOOL smbd_vfs_init(connection_struct *conn);\n+BOOL vfs_directory_exist(connection_struct *conn, const char *dname,  \nSMB_STRUCT_STAT *st);\n+BOOL vfs_object_exist(connection_struct *conn,const char  \n*fname,SMB_STRUCT_STAT *sbuf);\n+BOOL vfs_file_exist(connection_struct *conn, const char  \n*fname,SMB_STRUCT_STAT *sbuf);\n+ssize_t vfs_read_data(files_struct *fsp, char *buf, size_t byte_count);\n+ssize_t vfs_pread_data(files_struct *fsp, char *buf,\n+                size_t byte_count, SMB_OFF_T offset);\n+ssize_t vfs_write_data(files_struct *fsp,const char *buffer,size_t N);\n+ssize_t vfs_pwrite_data(files_struct *fsp,const char *buffer,\n+                size_t N, SMB_OFF_T offset);\n+int vfs_allocate_file_space(files_struct *fsp, SMB_BIG_UINT len);\n+int vfs_set_filelen(files_struct *fsp, SMB_OFF_T len);\n+int vfs_fill_sparse(files_struct *fsp, SMB_OFF_T len);\n+SMB_OFF_T vfs_transfer_file(files_struct *in, files_struct *out,  \nSMB_OFF_T n);\n+char *vfs_readdirname(connection_struct *conn, void *p);\n+int vfs_ChDir(connection_struct *conn, const char *path);\n+char *vfs_GetWd(connection_struct *conn, char *path);\n+NTSTATUS reduce_name(connection_struct *conn, const pstring fname);\n+\n+/* The following definitions come from torture/denytest.c  */\n+\n+BOOL torture_denytest1(int dummy);\n+BOOL torture_denytest2(int dummy);\n+\n+/* The following definitions come from torture/mangle_test.c  */\n+\n+BOOL torture_mangle(int dummy);\n+\n+/* The following definitions come from torture/nbio.c  */\n+\n+double nbio_total(void);\n+void nb_alarm(int ignore);\n+void nbio_shmem(int n);\n+void nb_setup(struct cli_state *cli);\n+void nb_unlink(const char *fname);\n+void nb_createx(const char *fname,\n+\t\tunsigned create_options, unsigned create_disposition, int handle);\n+void nb_writex(int handle, int offset, int size, int ret_size);\n+void nb_readx(int handle, int offset, int size, int ret_size);\n+void nb_close(int handle);\n+void nb_rmdir(const char *fname);\n+void nb_rename(const char *oldname, const char *newname);\n+void nb_qpathinfo(const char *fname);\n+void nb_qfileinfo(int fnum);\n+void nb_qfsinfo(int level);\n+void nb_findfirst(const char *mask);\n+void nb_flush(int fnum);\n+void nb_deltree(const char *dname);\n+void nb_cleanup(void);\n+\n+/* The following definitions come from torture/scanner.c  */\n+\n+BOOL torture_trans2_scan(int dummy);\n+BOOL torture_nttrans_scan(int dummy);\n+\n+/* The following definitions come from torture/torture.c  */\n+\n+void start_timer(void);\n+double end_timer(void);\n+void *shm_setup(int size);\n+BOOL smbcli_parse_unc(const char *unc_name, TALLOC_CTX *mem_ctx,\n+\t\t      char **hostname, char **sharename);\n+void torture_open_connection_free_unclist(char **unc_list);\n+BOOL torture_open_connection(struct cli_state **c, int conn_index);\n+BOOL torture_cli_session_setup2(struct cli_state *cli, uint16  \n*new_vuid);\n+BOOL torture_close_connection(struct cli_state *c);\n+BOOL torture_ioctl_test(int dummy);\n+BOOL torture_chkpath_test(int dummy);\n+\n+/* The following definitions come from torture/utable.c  */\n+\n+BOOL torture_utable(int dummy);\n+BOOL torture_casetable(int dummy);\n+\n+/* The following definitions come from utils/passwd_util.c  */\n+\n+char *stdin_new_passwd( void);\n+char *get_pass( const char *prompt, BOOL stdin_get);\n+\n+#endif /*  _PROTO_H_  */\ndiff --git a/source/nsswitch/winbindd_proto.h b/source/nsswitch/ \nwinbindd_proto.h\nnew file mode 100644\nindex 0000000..708f323\n--- /dev/null\n+++ b/source/nsswitch/winbindd_proto.h\n@@ -0,0 +1,516 @@\n+#ifndef _WINBINDD_PROTO_H_\n+#define _WINBINDD_PROTO_H_\n+\n+/* This file is automatically generated with \"make proto\". DO NOT  \nEDIT */\n+\n+\n+/* The following definitions come from auth/token_util.c  */\n+\n+NT_USER_TOKEN *dup_nt_token(TALLOC_CTX *mem_ctx, const NT_USER_TOKEN  \n*ptoken);\n+BOOL nt_token_check_sid ( const DOM_SID *sid, const NT_USER_TOKEN  \n*token );\n+BOOL nt_token_check_domain_rid( NT_USER_TOKEN *token, uint32 rid ) ;\n+NT_USER_TOKEN *get_root_nt_token( void );\n+NTSTATUS add_aliases(const DOM_SID *domain_sid,\n+\t\t     struct nt_user_token *token);\n+struct nt_user_token *create_local_nt_token(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t    const DOM_SID *user_sid,\n+\t\t\t\t\t    BOOL is_guest,\n+\t\t\t\t\t    int num_groupsids,\n+\t\t\t\t\t    const DOM_SID *groupsids);\n+void debug_nt_user_token(int dbg_class, int dbg_lev, NT_USER_TOKEN  \n*token);\n+void debug_unix_user_token(int dbg_class, int dbg_lev, uid_t uid,  \ngid_t gid,\n+\t\t\t   int n_groups, gid_t *groups);\n+\n+/* The following definitions come from nsswitch/winbindd.c  */\n+\n+struct event_context *winbind_event_context(void);\n+struct messaging_context *winbind_messaging_context(void);\n+void add_fd_event(struct fd_event *ev);\n+void remove_fd_event(struct fd_event *ev);\n+void setup_async_read(struct fd_event *event, void *data, size_t  \nlength,\n+\t\t      void (*finished)(void *private_data, BOOL success),\n+\t\t      void *private_data);\n+void setup_async_write(struct fd_event *event, void *data, size_t  \nlength,\n+\t\t       void (*finished)(void *private_data, BOOL success),\n+\t\t       void *private_data);\n+void request_error(struct winbindd_cli_state *state);\n+void request_ok(struct winbindd_cli_state *state);\n+void request_finished_cont(void *private_data, BOOL success);\n+int main(int argc, char **argv, char **envp);\n+\n+/* The following definitions come from nsswitch/winbindd_ads.c  */\n+\n+\n+/* The following definitions come from nsswitch/winbindd_async.c  */\n+\n+void do_async_domain(TALLOC_CTX *mem_ctx, struct winbindd_domain  \n*domain,\n+\t\t     const struct winbindd_request *request,\n+\t\t     void (*cont)(TALLOC_CTX *mem_ctx, BOOL success,\n+\t\t\t\t  struct winbindd_response *response,\n+\t\t\t\t  void *c, void *private_data),\n+\t\t     void *c, void *private_data);\n+void winbindd_set_mapping_async(TALLOC_CTX *mem_ctx, const struct  \nid_map *map,\n+\t\t\t     void (*cont)(void *private_data, BOOL success),\n+\t\t\t     void *private_data);\n+enum winbindd_result winbindd_dual_set_mapping(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t    struct winbindd_cli_state *state);\n+void winbindd_set_hwm_async(TALLOC_CTX *mem_ctx, const struct unixid  \n*xid,\n+\t\t\t     void (*cont)(void *private_data, BOOL success),\n+\t\t\t     void *private_data);\n+enum winbindd_result winbindd_dual_set_hwm(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t    struct winbindd_cli_state *state);\n+void winbindd_sids2xids_async(TALLOC_CTX *mem_ctx, void *sids, int  \nsize,\n+\t\t\t void (*cont)(void *private_data, BOOL success, void *data, int  \nlen),\n+\t\t\t void *private_data);\n+enum winbindd_result winbindd_dual_sids2xids(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t   struct winbindd_cli_state *state);\n+void winbindd_sid2uid_async(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\t\t void (*cont)(void *private_data, BOOL success, uid_t uid),\n+\t\t\t void *private_data);\n+enum winbindd_result winbindd_dual_sid2uid(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t   struct winbindd_cli_state *state);\n+void winbindd_uid2name_async(TALLOC_CTX *mem_ctx, uid_t uid,\n+\t\t\t     void (*cont)(void *private_data, BOOL success,\n+\t\t\t\t\t  const char *name),\n+\t\t\t     void *private_data);\n+enum winbindd_result winbindd_dual_uid2name(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t    struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_name2uid(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t    struct winbindd_cli_state *state);\n+void winbindd_sid2gid_async(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\t\t void (*cont)(void *private_data, BOOL success, gid_t gid),\n+\t\t\t void *private_data);\n+enum winbindd_result winbindd_dual_sid2gid(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t   struct winbindd_cli_state *state);\n+void winbindd_gid2name_async(TALLOC_CTX *mem_ctx, gid_t gid,\n+\t\t\t     void (*cont)(void *private_data, BOOL success,\n+\t\t\t\t\t  const char *name),\n+\t\t\t     void *private_data);\n+enum winbindd_result winbindd_dual_gid2name(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t    struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_name2gid(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t    struct winbindd_cli_state *state);\n+void winbindd_lookupsid_async(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\t\t      void (*cont)(void *private_data, BOOL success,\n+\t\t\t\t\t   const char *dom_name,\n+\t\t\t\t\t   const char *name,\n+\t\t\t\t\t   enum lsa_SidType type),\n+\t\t\t      void *private_data);\n+enum winbindd_result winbindd_dual_lookupsid(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t     struct winbindd_cli_state *state);\n+void winbindd_lookupname_async(TALLOC_CTX *mem_ctx,\n+\t\t\t       const char *dom_name, const char *name,\n+\t\t\t       void (*cont)(void *private_data, BOOL success,\n+\t\t\t\t\t    const DOM_SID *sid,\n+\t\t\t\t\t    enum lsa_SidType type),\n+\t\t\t       enum winbindd_cmd orig_cmd,\n+\t\t\t       void *private_data);\n+enum winbindd_result winbindd_dual_lookupname(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t      struct winbindd_cli_state *state);\n+BOOL print_sidlist(TALLOC_CTX *mem_ctx, const DOM_SID *sids,\n+\t\t   size_t num_sids, char **result, ssize_t *len);\n+enum winbindd_result winbindd_dual_lookuprids(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t      struct winbindd_cli_state *state);\n+void winbindd_getsidaliases_async(struct winbindd_domain *domain,\n+\t\t\t\t  TALLOC_CTX *mem_ctx,\n+\t\t\t\t  const DOM_SID *sids, size_t num_sids,\n+\t\t\t \t  void (*cont)(void *private_data,\n+\t\t\t\t \t       BOOL success,\n+\t\t\t\t\t       const DOM_SID *aliases,\n+\t\t\t\t\t       size_t num_aliases),\n+\t\t\t\t  void *private_data);\n+enum winbindd_result winbindd_dual_getsidaliases(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\t struct winbindd_cli_state *state);\n+void winbindd_gettoken_async(TALLOC_CTX *mem_ctx, const DOM_SID  \n*user_sid,\n+\t\t\t     void (*cont)(void *private_data, BOOL success,\n+\t\t\t\t\t  DOM_SID *sids, size_t num_sids),\n+\t\t\t     void *private_data);\n+void query_user_async(TALLOC_CTX *mem_ctx, struct winbindd_domain  \n*domain,\n+\t\t      const DOM_SID *sid,\n+\t\t      void (*cont)(void *private_data, BOOL success,\n+\t\t\t\t   const char *acct_name,\n+\t\t\t\t   const char *full_name,\n+\t\t\t\t   const char *homedir,\n+\t\t\t\t   const char *shell,\n+\t\t\t\t   gid_t gid,\n+\t\t\t\t   uint32 group_rid),\n+\t\t      void *private_data);\n+void winbindd_uid2sid_async(TALLOC_CTX *mem_ctx, uid_t uid,\n+\t\t\t    void (*cont)(void *private_data, BOOL success, const char *sid),\n+\t\t\t    void *private_data);\n+enum winbindd_result winbindd_dual_uid2sid(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t   struct winbindd_cli_state *state);\n+void winbindd_gid2sid_async(TALLOC_CTX *mem_ctx, gid_t gid,\n+\t\t\t    void (*cont)(void *private_data, BOOL success, const char *sid),\n+\t\t\t    void *private_data);\n+enum winbindd_result winbindd_dual_gid2sid(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t   struct winbindd_cli_state *state);\n+void winbindd_dump_maps_async(TALLOC_CTX *mem_ctx, void *data, int  \nsize,\n+\t\t\t void (*cont)(void *private_data, BOOL success),\n+\t\t\t void *private_data);\n+enum winbindd_result winbindd_dual_dump_maps(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t   struct winbindd_cli_state *state);\n+\n+/* The following definitions come from nsswitch/winbindd_cache.c  */\n+\n+void winbindd_check_cache_size(time_t t);\n+struct cache_entry *centry_start(struct winbindd_domain *domain,  \nNTSTATUS status);\n+NTSTATUS wcache_cached_creds_exist(struct winbindd_domain *domain,  \nconst DOM_SID *sid);\n+NTSTATUS wcache_get_creds(struct winbindd_domain *domain,\n+\t\t\t  TALLOC_CTX *mem_ctx,\n+\t\t\t  const DOM_SID *sid,\n+\t\t\t  const uint8 **cached_nt_pass,\n+\t\t\t  const uint8 **cached_salt);\n+NTSTATUS wcache_save_creds(struct winbindd_domain *domain,\n+\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t   const DOM_SID *sid,\n+\t\t\t   const uint8 nt_pass[NT_HASH_LEN]);\n+void wcache_invalidate_samlogon(struct winbindd_domain *domain,\n+\t\t\t\tNET_USER_INFO_3 *info3);\n+void wcache_invalidate_cache(void);\n+BOOL init_wcache(void);\n+BOOL initialize_winbindd_cache(void);\n+void cache_store_response(pid_t pid, struct winbindd_response  \n*response);\n+BOOL cache_retrieve_response(pid_t pid, struct winbindd_response *  \nresponse);\n+void cache_cleanup_response(pid_t pid);\n+BOOL lookup_cached_sid(TALLOC_CTX *mem_ctx, const DOM_SID *sid,\n+\t\t       char **domain_name, char **name,\n+\t\t       enum lsa_SidType *type);\n+BOOL lookup_cached_name(TALLOC_CTX *mem_ctx,\n+\t\t\tconst char *domain_name,\n+\t\t\tconst char *name,\n+\t\t\tDOM_SID *sid,\n+\t\t\tenum lsa_SidType *type);\n+void cache_name2sid(struct winbindd_domain *domain,\n+\t\t    const char *domain_name, const char *name,\n+\t\t    enum lsa_SidType type, const DOM_SID *sid);\n+void wcache_flush_cache(void);\n+NTSTATUS wcache_count_cached_creds(struct winbindd_domain *domain,  \nint *count);\n+NTSTATUS wcache_remove_oldest_cached_creds(struct winbindd_domain  \n*domain, const DOM_SID *sid) ;\n+BOOL set_global_winbindd_state_offline(void);\n+void set_global_winbindd_state_online(void);\n+BOOL get_global_winbindd_state_offline(void);\n+int winbindd_validate_cache(void);\n+BOOL wcache_tdc_fetch_list( struct winbindd_tdc_domain **domains,  \nsize_t *num_domains );\n+BOOL wcache_tdc_add_domain( struct winbindd_domain *domain );\n+struct winbindd_tdc_domain * wcache_tdc_fetch_domain( TALLOC_CTX  \n*ctx, const char *name );\n+void wcache_tdc_clear( void );\n+NTSTATUS nss_get_info_cached( struct winbindd_domain *domain,\n+\t\t\t      const DOM_SID *user_sid,\n+\t\t\t      TALLOC_CTX *ctx,\n+\t\t\t      ADS_STRUCT *ads, LDAPMessage *msg,\n+\t\t\t      char **homedir, char **shell, char **gecos,\n+\t\t\t      gid_t *p_gid);\n+\n+/* The following definitions come from nsswitch/ \nwinbindd_ccache_access.c  */\n+\n+void winbindd_ccache_ntlm_auth(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_ccache_ntlm_auth(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\tstruct winbindd_cli_state *state);\n+\n+/* The following definitions come from nsswitch/winbindd_cm.c  */\n+\n+void set_domain_offline(struct winbindd_domain *domain);\n+void set_domain_online_request(struct winbindd_domain *domain);\n+void winbind_add_failed_connection_entry(const struct  \nwinbindd_domain *domain,\n+\t\t\t\t\tconst char *server,\n+\t\t\t\t\tNTSTATUS result);\n+void invalidate_cm_connection(struct winbindd_cm_conn *conn);\n+void close_conns_after_fork(void);\n+NTSTATUS init_dc_connection(struct winbindd_domain *domain);\n+NTSTATUS cm_connect_sam(struct winbindd_domain *domain, TALLOC_CTX  \n*mem_ctx,\n+\t\t\tstruct rpc_pipe_client **cli, POLICY_HND *sam_handle);\n+NTSTATUS cm_connect_lsa(struct winbindd_domain *domain, TALLOC_CTX  \n*mem_ctx,\n+\t\t\tstruct rpc_pipe_client **cli, POLICY_HND *lsa_policy);\n+NTSTATUS cm_connect_netlogon(struct winbindd_domain *domain,\n+\t\t\t     struct rpc_pipe_client **cli);\n+\n+/* The following definitions come from nsswitch/ \nwinbindd_cred_cache.c  */\n+\n+BOOL ccache_entry_exists(const char *username);\n+BOOL ccache_entry_identical(const char *username, uid_t uid, const  \nchar *ccname);\n+NTSTATUS add_ccache_to_list(const char *princ_name,\n+\t\t\t    const char *ccname,\n+\t\t\t    const char *service,\n+\t\t\t    const char *username,\n+\t\t\t    const char *realm,\n+\t\t\t    uid_t uid,\n+\t\t\t    time_t create_time,\n+\t\t\t    time_t ticket_end,\n+\t\t\t    time_t renew_until,\n+\t\t\t    BOOL postponed_request);\n+NTSTATUS remove_ccache(const char *username);\n+struct WINBINDD_MEMORY_CREDS *find_memory_creds_by_name(const char  \n*username);\n+NTSTATUS winbindd_add_memory_creds(const char *username, uid_t uid,  \nconst char *pass);\n+NTSTATUS winbindd_delete_memory_creds(const char *username);\n+NTSTATUS winbindd_replace_memory_creds(const char *username, const  \nchar *pass);\n+\n+/* The following definitions come from nsswitch/winbindd_creds.c  */\n+\n+NTSTATUS winbindd_get_creds(struct winbindd_domain *domain,\n+\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t    const DOM_SID *sid,\n+\t\t\t    NET_USER_INFO_3 **info3,\n+\t\t\t    const uint8 *cached_nt_pass[NT_HASH_LEN],\n+\t\t\t    const uint8 *cred_salt[NT_HASH_LEN]);\n+NTSTATUS winbindd_store_creds(struct winbindd_domain *domain,\n+\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t      const char *user,\n+\t\t\t      const char *pass,\n+\t\t\t      NET_USER_INFO_3 *info3,\n+\t\t\t      const DOM_SID *user_sid);\n+NTSTATUS winbindd_update_creds_by_info3(struct winbindd_domain *domain,\n+\t\t\t\t        TALLOC_CTX *mem_ctx,\n+\t\t\t\t        const char *user,\n+\t\t\t\t        const char *pass,\n+\t\t\t\t        NET_USER_INFO_3 *info3);\n+NTSTATUS winbindd_update_creds_by_sid(struct winbindd_domain *domain,\n+\t\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t\t      const DOM_SID *sid,\n+\t\t\t\t      const char *pass);\n+NTSTATUS winbindd_update_creds_by_name(struct winbindd_domain *domain,\n+\t\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t\t       const char *user,\n+\t\t\t\t       const char *pass);\n+\n+/* The following definitions come from nsswitch/winbindd_dual.c  */\n+\n+void async_request(TALLOC_CTX *mem_ctx, struct winbindd_child *child,\n+\t\t   struct winbindd_request *request,\n+\t\t   struct winbindd_response *response,\n+\t\t   void (*continuation)(void *private_data, BOOL success),\n+\t\t   void *private_data);\n+void async_domain_request(TALLOC_CTX *mem_ctx,\n+\t\t\t  struct winbindd_domain *domain,\n+\t\t\t  struct winbindd_request *request,\n+\t\t\t  struct winbindd_response *response,\n+\t\t\t  void (*continuation)(void *private_data_data, BOOL success),\n+\t\t\t  void *private_data_data);\n+void sendto_child(struct winbindd_cli_state *state,\n+\t\t  struct winbindd_child *child);\n+void sendto_domain(struct winbindd_cli_state *state,\n+\t\t   struct winbindd_domain *domain);\n+void setup_domain_child(struct winbindd_domain *domain,\n+\t\t\tstruct winbindd_child *child,\n+\t\t\tconst char *explicit_logfile);\n+void winbind_child_died(pid_t pid);\n+void winbindd_flush_negative_conn_cache(struct winbindd_domain  \n*domain);\n+void winbind_msg_offline(struct messaging_context *msg_ctx,\n+\t\t\t void *private_data,\n+\t\t\t uint32_t msg_type,\n+\t\t\t struct server_id server_id,\n+\t\t\t DATA_BLOB *data);\n+void winbind_msg_online(struct messaging_context *msg_ctx,\n+\t\t\tvoid *private_data,\n+\t\t\tuint32_t msg_type,\n+\t\t\tstruct server_id server_id,\n+\t\t\tDATA_BLOB *data);\n+void winbind_msg_onlinestatus(struct messaging_context *msg_ctx,\n+\t\t\t      void *private_data,\n+\t\t\t      uint32_t msg_type,\n+\t\t\t      struct server_id server_id,\n+\t\t\t      DATA_BLOB *data);\n+\n+/* The following definitions come from nsswitch/winbindd_group.c  */\n+\n+void winbindd_getgrnam(struct winbindd_cli_state *state);\n+void winbindd_getgrgid(struct winbindd_cli_state *state);\n+void winbindd_setgrent(struct winbindd_cli_state *state);\n+void winbindd_endgrent(struct winbindd_cli_state *state);\n+void winbindd_getgrent(struct winbindd_cli_state *state);\n+void winbindd_list_groups(struct winbindd_cli_state *state);\n+void winbindd_getgroups(struct winbindd_cli_state *state);\n+void winbindd_getusersids(struct winbindd_cli_state *state);\n+void winbindd_getuserdomgroups(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_getuserdomgroups(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\t    struct winbindd_cli_state *state);\n+\n+/* The following definitions come from nsswitch/winbindd_misc.c  */\n+\n+void winbindd_check_machine_acct(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_check_machine_acct(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\t      struct winbindd_cli_state *state);\n+void winbindd_list_trusted_domains(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_list_trusted_domains(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\t\tstruct winbindd_cli_state *state);\n+void winbindd_getdcname(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_getdcname(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t     struct winbindd_cli_state *state);\n+void winbindd_show_sequence(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_show_sequence(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\t struct winbindd_cli_state *state);\n+void winbindd_domain_info(struct winbindd_cli_state *state);\n+void winbindd_ping(struct winbindd_cli_state *state);\n+void winbindd_info(struct winbindd_cli_state *state);\n+void winbindd_interface_version(struct winbindd_cli_state *state);\n+void winbindd_domain_name(struct winbindd_cli_state *state);\n+void winbindd_netbios_name(struct winbindd_cli_state *state);\n+void winbindd_priv_pipe_dir(struct winbindd_cli_state *state);\n+\n+/* The following definitions come from nsswitch/winbindd_pam.c  */\n+\n+struct winbindd_domain *find_auth_domain(struct winbindd_cli_state  \n*state,\n+\t\t\t\t\tconst char *domain_name);\n+void winbindd_pam_auth(struct winbindd_cli_state *state);\n+NTSTATUS winbindd_dual_pam_auth_cached(struct winbindd_domain *domain,\n+\t\t\t\t       struct winbindd_cli_state *state,\n+\t\t\t\t       NET_USER_INFO_3 **info3);\n+NTSTATUS winbindd_dual_pam_auth_kerberos(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t struct winbindd_cli_state *state,\n+\t\t\t\t\t NET_USER_INFO_3 **info3);\n+NTSTATUS winbindd_dual_pam_auth_samlogon(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t struct winbindd_cli_state *state,\n+\t\t\t\t\t NET_USER_INFO_3 **info3);\n+enum winbindd_result winbindd_dual_pam_auth(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t    struct winbindd_cli_state *state) ;\n+void winbindd_pam_auth_crap(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_pam_auth_crap(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\t struct winbindd_cli_state *state) ;\n+void winbindd_pam_chauthtok(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_pam_chauthtok(struct  \nwinbindd_domain *contact_domain,\n+\t\t\t\t\t\t struct winbindd_cli_state *state);\n+void winbindd_pam_logoff(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_pam_logoff(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t      struct winbindd_cli_state *state) ;\n+void winbindd_pam_chng_pswd_auth_crap(struct winbindd_cli_state  \n*state);\n+enum winbindd_result winbindd_dual_pam_chng_pswd_auth_crap(struct  \nwinbindd_domain *domainSt, struct winbindd_cli_state *state);\n+\n+/* The following definitions come from nsswitch/winbindd_passdb.c  */\n+\n+\n+/* The following definitions come from nsswitch/ \nwinbindd_reconnect.c  */\n+\n+\n+/* The following definitions come from nsswitch/winbindd_rpc.c  */\n+\n+NTSTATUS msrpc_name_to_sid(struct winbindd_domain *domain,\n+\t\t\t   TALLOC_CTX *mem_ctx,\n+\t\t\t   enum winbindd_cmd original_cmd,\n+\t\t\t   const char *domain_name,\n+\t\t\t   const char *name,\n+\t\t\t   DOM_SID *sid,\n+\t\t\t   enum lsa_SidType *type);\n+NTSTATUS msrpc_sid_to_name(struct winbindd_domain *domain,\n+\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t    const DOM_SID *sid,\n+\t\t\t    char **domain_name,\n+\t\t\t    char **name,\n+\t\t\t    enum lsa_SidType *type);\n+NTSTATUS msrpc_rids_to_names(struct winbindd_domain *domain,\n+\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t     const DOM_SID *sid,\n+\t\t\t     uint32 *rids,\n+\t\t\t     size_t num_rids,\n+\t\t\t     char **domain_name,\n+\t\t\t     char ***names,\n+\t\t\t     enum lsa_SidType **types);\n+NTSTATUS msrpc_lookup_useraliases(struct winbindd_domain *domain,\n+\t\t\t\t  TALLOC_CTX *mem_ctx,\n+\t\t\t\t  uint32 num_sids, const DOM_SID *sids,\n+\t\t\t\t  uint32 *num_aliases, uint32 **alias_rids);\n+NTSTATUS msrpc_lockout_policy(struct winbindd_domain *domain,\n+\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t      SAM_UNK_INFO_12 *lockout_policy);\n+NTSTATUS msrpc_password_policy(struct winbindd_domain *domain,\n+\t\t\t       TALLOC_CTX *mem_ctx,\n+\t\t\t       SAM_UNK_INFO_1 *password_policy);\n+\n+/* The following definitions come from nsswitch/winbindd_sid.c  */\n+\n+void winbindd_lookupsid(struct winbindd_cli_state *state);\n+void winbindd_lookupname(struct winbindd_cli_state *state);\n+void winbindd_lookuprids(struct winbindd_cli_state *state);\n+void init_idmap_child(void);\n+struct winbindd_child *idmap_child(void);\n+void winbindd_sid_to_uid(struct winbindd_cli_state *state);\n+void winbindd_sid_to_gid(struct winbindd_cli_state *state);\n+void winbindd_sids_to_unixids(struct winbindd_cli_state *state);\n+void winbindd_set_mapping(struct winbindd_cli_state *state);\n+void winbindd_set_hwm(struct winbindd_cli_state *state);\n+void winbindd_uid_to_sid(struct winbindd_cli_state *state);\n+void winbindd_gid_to_sid(struct winbindd_cli_state *state);\n+void winbindd_allocate_uid(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_allocate_uid(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\tstruct winbindd_cli_state *state);\n+void winbindd_allocate_gid(struct winbindd_cli_state *state);\n+enum winbindd_result winbindd_dual_allocate_gid(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\tstruct winbindd_cli_state *state);\n+void winbindd_dump_maps(struct winbindd_cli_state *state);\n+\n+/* The following definitions come from nsswitch/winbindd_sockinit.c  */\n+\n+BOOL winbindd_init_sockets(int *public_sock, int *priv_sock,\n+\t\t\t\tint *idle_timeout_sec);\n+void winbindd_release_sockets(void);\n+\n+/* The following definitions come from nsswitch/winbindd_user.c  */\n+\n+enum winbindd_result winbindd_dual_userinfo(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t    struct winbindd_cli_state *state);\n+void winbindd_getpwnam(struct winbindd_cli_state *state);\n+void winbindd_getpwuid(struct winbindd_cli_state *state);\n+void winbindd_setpwent(struct winbindd_cli_state *state);\n+void winbindd_endpwent(struct winbindd_cli_state *state);\n+void winbindd_getpwent(struct winbindd_cli_state *state);\n+void winbindd_list_users(struct winbindd_cli_state *state);\n+\n+/* The following definitions come from nsswitch/winbindd_util.c  */\n+\n+struct winbindd_domain *domain_list(void);\n+void free_domain_list(void);\n+void rescan_trusted_domains( void );\n+enum winbindd_result init_child_connection(struct winbindd_domain  \n*domain,\n+\t\t\t\t\t   void (*continuation)(void *private_data,\n+\t\t\t\t\t\t\t\tBOOL success),\n+\t\t\t\t\t   void *private_data);\n+enum winbindd_result winbindd_dual_init_connection(struct  \nwinbindd_domain *domain,\n+\t\t\t\t\t\t   struct winbindd_cli_state *state);\n+BOOL init_domain_list(void);\n+void check_domain_trusted( const char *name, const DOM_SID *user_sid );\n+struct winbindd_domain *find_domain_from_name_noinit(const char  \n*domain_name);\n+struct winbindd_domain *find_domain_from_name(const char *domain_name);\n+struct winbindd_domain *find_domain_from_sid_noinit(const DOM_SID  \n*sid);\n+struct winbindd_domain *find_domain_from_sid(const DOM_SID *sid);\n+struct winbindd_domain *find_our_domain(void);\n+struct winbindd_domain *find_root_domain(void);\n+struct winbindd_domain *find_builtin_domain(void);\n+struct winbindd_domain *find_lookup_domain_from_sid(const DOM_SID  \n*sid);\n+struct winbindd_domain *find_lookup_domain_from_name(const char  \n*domain_name);\n+BOOL winbindd_lookup_sid_by_name(TALLOC_CTX *mem_ctx,\n+\t\t\t\t enum winbindd_cmd orig_cmd,\n+\t\t\t\t struct winbindd_domain *domain,\n+\t\t\t\t const char *domain_name,\n+\t\t\t\t const char *name, DOM_SID *sid,\n+\t\t\t\t enum lsa_SidType *type);\n+BOOL winbindd_lookup_name_by_sid(TALLOC_CTX *mem_ctx,\n+\t\t\t\t struct winbindd_domain *domain,\n+\t\t\t\t DOM_SID *sid,\n+\t\t\t\t char **dom_name,\n+\t\t\t\t char **name,\n+\t\t\t\t enum lsa_SidType *type);\n+void free_getent_state(struct getent_state *state);\n+BOOL parse_domain_user(const char *domuser, fstring domain, fstring  \nuser);\n+BOOL parse_domain_user_talloc(TALLOC_CTX *mem_ctx, const char *domuser,\n+\t\t\t      char **domain, char **user);\n+BOOL canonicalize_username(fstring username_inout, fstring domain,  \nfstring user);\n+void fill_domain_username(fstring name, const char *domain, const  \nchar *user, BOOL can_assume);\n+char *get_winbind_priv_pipe_dir(void) ;\n+struct winbindd_cli_state *winbindd_client_list(void);\n+void winbindd_add_client(struct winbindd_cli_state *cli);\n+void winbindd_remove_client(struct winbindd_cli_state *cli);\n+void winbindd_kill_all_clients(void);\n+int winbindd_num_clients(void);\n+NTSTATUS lookup_usergroups_cached(struct winbindd_domain *domain,\n+\t\t\t\t  TALLOC_CTX *mem_ctx,\n+\t\t\t\t  const DOM_SID *user_sid,\n+\t\t\t\t  uint32 *p_num_groups, DOM_SID **user_sids);\n+void ws_name_replace( char *name, char replace );\n+void ws_name_return( char *name, char replace );\n+BOOL winbindd_can_contact_domain( struct winbindd_domain *domain );\n+\n+/* The following definitions come from nsswitch/winbindd_wins.c  */\n+\n+void winbindd_wins_byip(struct winbindd_cli_state *state);\n+void winbindd_wins_byname(struct winbindd_cli_state *state);\n+\n+#endif /*  _WINBINDD_PROTO_H_  */\ndiff --git a/source/utils/net_proto.h b/source/utils/net_proto.h\nnew file mode 100644\nindex 0000000..05c31e6\n--- /dev/null\n+++ b/source/utils/net_proto.h\n@@ -0,0 +1,382 @@\n+#ifndef _NET_PROTO_H_\n+#define _NET_PROTO_H_\n+\n+/* This file is automatically generated with \"make proto\". DO NOT  \nEDIT */\n+\n+\n+/* The following definitions come from utils/net.c  */\n+\n+uint32 get_sec_channel_type(const char *param) ;\n+int net_run_function(int argc, const char **argv, struct functable  \n*table,\n+\t\t     int (*usage_fn)(int argc, const char **argv));\n+int net_run_function2(int argc, const char **argv, const char *whoami,\n+\t\t      struct functable2 *table);\n+NTSTATUS connect_to_service(struct cli_state **c, struct in_addr  \n*server_ip,\n+\t\t\t\t\tconst char *server_name,\n+\t\t\t\t\tconst char *service_name,\n+\t\t\t\t\tconst char *service_type);\n+NTSTATUS connect_to_ipc(struct cli_state **c, struct in_addr  \n*server_ip,\n+\t\t\t\t\tconst char *server_name);\n+NTSTATUS connect_to_ipc_anonymous(struct cli_state **c,\n+\t\t\tstruct in_addr *server_ip, const char *server_name);\n+NTSTATUS connect_to_ipc_krb5(struct cli_state **c,\n+\t\t\tstruct in_addr *server_ip, const char *server_name);\n+NTSTATUS connect_dst_pipe(struct cli_state **cli_dst, struct  \nrpc_pipe_client **pp_pipe_hnd, int pipe_num);\n+int net_use_machine_password(void) ;\n+BOOL net_find_server(const char *domain, unsigned flags, struct  \nin_addr *server_ip, char **server_name);\n+BOOL net_find_pdc(struct in_addr *server_ip, fstring server_name,  \nconst char *domain_name);\n+struct cli_state *net_make_ipc_connection( unsigned flags );\n+struct cli_state *net_make_ipc_connection_ex( const char *domain,  \nconst char *server,\n+                                              struct in_addr *ip,  \nunsigned flags);\n+int net_help_afs(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_ads.c  */\n+\n+int net_ads_usage(int argc, const char **argv);\n+ADS_STATUS ads_startup(BOOL only_own_domain, ADS_STRUCT **ads);\n+ADS_STATUS ads_startup_nobind(BOOL only_own_domain, ADS_STRUCT **ads);\n+int net_ads_check_our_domain(void);\n+int net_ads_check(void);\n+int net_ads_user(int argc, const char **argv);\n+int net_ads_group(int argc, const char **argv);\n+int net_ads_testjoin(int argc, const char **argv);\n+int net_ads_join(int argc, const char **argv);\n+int net_ads_printer_usage(int argc, const char **argv);\n+int net_ads_changetrustpw(int argc, const char **argv);\n+int net_ads_keytab(int argc, const char **argv);\n+int net_ads_help(int argc, const char **argv);\n+int net_ads(int argc, const char **argv);\n+int net_ads_keytab(int argc, const char **argv);\n+int net_ads_usage(int argc, const char **argv);\n+int net_ads_help(int argc, const char **argv);\n+int net_ads_changetrustpw(int argc, const char **argv);\n+int net_ads_join(int argc, const char **argv);\n+int net_ads_user(int argc, const char **argv);\n+int net_ads_group(int argc, const char **argv);\n+int net_ads_check(void);\n+int net_ads_check_our_domain(void);\n+int net_ads(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_ads_gpo.c  */\n+\n+int net_ads_gpo(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_cache.c  */\n+\n+int net_cache(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_conf.c  */\n+\n+int net_conf_list(int argc, const char **argv);\n+int net_conf_import(int argc, const char **argv);\n+int net_conf_listshares(int argc, const char **argv);\n+int net_conf_showshare(int argc, const char **argv);\n+int net_conf_addshare(int argc, const char **argv);\n+int net_conf_delshare(int argc, const char **argv);\n+int net_conf(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_dns.c  */\n+\n+int get_my_ip_address( struct in_addr **ips );\n+\n+/* The following definitions come from utils/net_domain.c  */\n+\n+NTSTATUS netdom_leave_domain( TALLOC_CTX *mem_ctx, struct cli_state  \n*cli,\n+                         DOM_SID *dom_sid );\n+int netdom_store_machine_account( const char *domain, DOM_SID *sid,  \nconst char *pw );\n+NTSTATUS netdom_get_domain_sid( TALLOC_CTX *mem_ctx, struct  \ncli_state *cli,\n+\t\t\t\tchar **domain, DOM_SID **sid );\n+NTSTATUS netdom_join_domain( TALLOC_CTX *mem_ctx, struct cli_state  \n*cli,\n+                           DOM_SID *dom_sid, const char *clear_pw,\n+                           enum netdom_domain_t dom_type );\n+\n+/* The following definitions come from utils/net_groupmap.c  */\n+\n+int net_help_groupmap(int argc, const char **argv);\n+int net_groupmap(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_help.c  */\n+\n+int net_common_methods_usage(int argc, const char**argv);\n+int net_common_flags_usage(int argc, const char **argv);\n+int net_help_user(int argc, const char **argv);\n+int net_help_group(int argc, const char **argv);\n+int net_help_join(int argc, const char **argv);\n+int net_help_share(int argc, const char **argv);\n+int net_help_file(int argc, const char **argv);\n+int net_help_printer(int argc, const char **argv);\n+int net_help_status(int argc, const char **argv);\n+int net_help(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_idmap.c  */\n+\n+BOOL idmap_store_secret(const char *backend, bool alloc,\n+\t\t\tconst char *domain, const char *identity,\n+\t\t\tconst char *secret);\n+int net_help_idmap(int argc, const char **argv);\n+int net_idmap(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_lookup.c  */\n+\n+int net_lookup_usage(int argc, const char **argv);\n+int net_lookup(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_rap.c  */\n+\n+int net_rap_file_usage(int argc, const char **argv);\n+int net_rap_file(int argc, const char **argv);\n+int net_rap_share_usage(int argc, const char **argv);\n+int net_rap_share(int argc, const char **argv);\n+int net_rap_session_usage(int argc, const char **argv);\n+int net_rap_session(int argc, const char **argv);\n+int net_rap_server_usage(int argc, const char **argv);\n+int net_rap_server(int argc, const char **argv);\n+int net_rap_domain_usage(int argc, const char **argv);\n+int net_rap_domain(int argc, const char **argv);\n+int net_rap_printq_usage(int argc, const char **argv);\n+int net_rap_printq(int argc, const char **argv);\n+int net_rap_user(int argc, const char **argv);\n+int net_rap_group_usage(int argc, const char **argv);\n+int net_rap_group(int argc, const char **argv);\n+int net_rap_groupmember_usage(int argc, const char **argv);\n+int net_rap_groupmember(int argc, const char **argv);\n+int net_rap_validate_usage(int argc, const char **argv);\n+int net_rap_validate(int argc, const char **argv);\n+int net_rap_service_usage(int argc, const char **argv);\n+int net_rap_service(int argc, const char **argv);\n+int net_rap_password_usage(int argc, const char **argv);\n+int net_rap_password(int argc, const char **argv);\n+int net_rap_admin_usage(int argc, const char **argv);\n+int net_rap_admin(int argc, const char **argv);\n+int net_rap_usage(int argc, const char **argv);\n+int net_rap_help(int argc, const char **argv);\n+int net_rap(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_rpc.c  */\n+\n+NTSTATUS net_get_remote_domain_sid(struct cli_state *cli, TALLOC_CTX  \n*mem_ctx,\n+\t\t\t\t   DOM_SID **domain_sid, char **domain_name);\n+int run_rpc_command(struct cli_state *cli_arg,\n+\t\t\tconst int pipe_idx,\n+\t\t\tint conn_flags,\n+\t\t\trpc_command_fn fn,\n+\t\t\tint argc,\n+\t\t\tconst char **argv) ;\n+int net_rpc_changetrustpw(int argc, const char **argv) ;\n+int net_rpc_join(int argc, const char **argv) ;\n+NTSTATUS rpc_info_internals(const DOM_SID *domain_sid,\n+\t\t\tconst char *domain_name,\n+\t\t\tstruct cli_state *cli,\n+\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\tint argc,\n+\t\t\tconst char **argv);\n+int net_rpc_info(int argc, const char **argv) ;\n+int net_rpc_getsid(int argc, const char **argv) ;\n+int net_rpc_user(int argc, const char **argv) ;\n+struct rpc_sh_cmd *net_rpc_user_edit_cmds(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t  struct rpc_sh_ctx *ctx);\n+struct rpc_sh_cmd *net_rpc_user_cmds(TALLOC_CTX *mem_ctx,\n+\t\t\t\t     struct rpc_sh_ctx *ctx);\n+int net_rpc_group(int argc, const char **argv) ;\n+BOOL sync_files(struct copy_clistate *cp_clistate, pstring mask);\n+BOOL copy_top_level_perms(struct copy_clistate *cp_clistate,\n+\t\t\t\tconst char *sharename);\n+int net_usersidlist(int argc, const char **argv);\n+int net_usersidlist_usage(int argc, const char **argv);\n+int net_rpc_share(int argc, const char **argv) ;\n+struct rpc_sh_cmd *net_rpc_share_cmds(TALLOC_CTX *mem_ctx,\n+\t\t\t\t      struct rpc_sh_ctx *ctx);\n+int net_rpc_file(int argc, const char **argv) ;\n+BOOL net_rpc_check(unsigned flags);\n+int rpc_printer_migrate(int argc, const char **argv) ;\n+int rpc_printer_usage(int argc, const char **argv);\n+int net_rpc_printer(int argc, const char **argv) ;\n+int net_rpc_usage(int argc, const char **argv) ;\n+int net_rpc_help(int argc, const char **argv);\n+int net_rpc(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_rpc_audit.c  */\n+\n+int net_rpc_audit(int argc, const char **argv) ;\n+\n+/* The following definitions come from utils/net_rpc_join.c  */\n+\n+int net_rpc_join_ok(const char *domain, const char *server, struct  \nin_addr *ip );\n+int net_rpc_join_newstyle(int argc, const char **argv) ;\n+int net_rpc_testjoin(int argc, const char **argv) ;\n+\n+/* The following definitions come from utils/net_rpc_printer.c  */\n+\n+NTSTATUS net_copy_fileattr(TALLOC_CTX *mem_ctx,\n+\t\t  struct cli_state *cli_share_src,\n+\t\t  struct cli_state *cli_share_dst,\n+\t\t  const char *src_name, const char *dst_name,\n+\t\t  BOOL copy_acls, BOOL copy_attrs,\n+\t\t  BOOL copy_timestamps, BOOL is_file);\n+NTSTATUS net_copy_file(TALLOC_CTX *mem_ctx,\n+\t\t       struct cli_state *cli_share_src,\n+\t\t       struct cli_state *cli_share_dst,\n+\t\t       const char *src_name, const char *dst_name,\n+\t\t       BOOL copy_acls, BOOL copy_attrs,\n+\t\t       BOOL copy_timestamps, BOOL is_file);\n+NTSTATUS rpc_printer_list_internals(const DOM_SID *domain_sid,\n+\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\tint argc,\n+\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_driver_list_internals(const DOM_SID *domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_publish_publish_internals(const DOM_SID  \n*domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_publish_unpublish_internals(const DOM_SID  \n*domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_publish_update_internals(const DOM_SID  \n*domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_publish_list_internals(const DOM_SID *domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_migrate_security_internals(const DOM_SID  \n*domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_migrate_forms_internals(const DOM_SID *domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_migrate_drivers_internals(const DOM_SID  \n*domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_migrate_printers_internals(const DOM_SID  \n*domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+NTSTATUS rpc_printer_migrate_settings_internals(const DOM_SID  \n*domain_sid,\n+\t\t\t\t\t\tconst char *domain_name,\n+\t\t\t\t\t\tstruct cli_state *cli,\n+\t\t\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\tint argc,\n+\t\t\t\t\t\tconst char **argv);\n+\n+/* The following definitions come from utils/net_rpc_registry.c  */\n+\n+int net_rpc_registry(int argc, const char **argv) ;\n+\n+/* The following definitions come from utils/net_rpc_rights.c  */\n+\n+int net_rpc_rights(int argc, const char **argv) ;\n+struct rpc_sh_cmd *net_rpc_rights_cmds(TALLOC_CTX *mem_ctx,\n+\t\t\t\t       struct rpc_sh_ctx *ctx);\n+\n+/* The following definitions come from utils/net_rpc_samsync.c  */\n+\n+NTSTATUS rpc_samdump_internals(const DOM_SID *domain_sid,\n+\t\t\t\tconst char *domain_name,\n+\t\t\t\tstruct cli_state *cli,\n+\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tint argc,\n+\t\t\t\tconst char **argv) ;\n+int rpc_vampire_usage(int argc, const char **argv) ;\n+NTSTATUS rpc_vampire_internals(const DOM_SID *domain_sid,\n+\t\t\t\tconst char *domain_name,\n+\t\t\t\tstruct cli_state *cli,\n+\t\t\t\tstruct rpc_pipe_client *pipe_hnd,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tint argc,\n+\t\t\t\tconst char **argv) ;\n+\n+/* The following definitions come from utils/net_rpc_service.c  */\n+\n+int net_rpc_service(int argc, const char **argv) ;\n+\n+/* The following definitions come from utils/net_rpc_sh_acct.c  */\n+\n+struct rpc_sh_cmd *net_rpc_acct_cmds(TALLOC_CTX *mem_ctx,\n+\t\t\t\t     struct rpc_sh_ctx *ctx);\n+\n+/* The following definitions come from utils/net_rpc_shell.c  */\n+\n+int net_rpc_shell(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_sam.c  */\n+\n+int net_sam(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_status.c  */\n+\n+int net_status(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_time.c  */\n+\n+int net_time_usage(int argc, const char **argv);\n+int net_time(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_usershare.c  */\n+\n+int net_usershare_usage(int argc, const char **argv);\n+int net_usershare_help(int argc, const char **argv);\n+int net_usershare(int argc, const char **argv);\n+\n+/* The following definitions come from utils/net_util.c  */\n+\n+BOOL is_valid_policy_hnd(const POLICY_HND *hnd);\n+NTSTATUS net_rpc_lookup_name(TALLOC_CTX *mem_ctx, struct cli_state  \n*cli,\n+\t\t\t     const char *name, const char **ret_domain,\n+\t\t\t     const char **ret_name, DOM_SID *ret_sid,\n+\t\t\t     enum lsa_SidType *ret_type);\n+\n+/* The following definitions come from utils/netlookup.c  */\n+\n+NTSTATUS net_lookup_name_from_sid(TALLOC_CTX *ctx,\n+\t\t\t\tDOM_SID *psid,\n+\t\t\t\tconst char **ppdomain,\n+\t\t\t\tconst char **ppname);\n+NTSTATUS net_lookup_sid_from_name(TALLOC_CTX *ctx, const char  \n*full_name, DOM_SID *pret_sid);\n+\n+/* The following definitions come from utils/passwd_util.c  */\n+\n+char *stdin_new_passwd( void);\n+char *get_pass( const char *prompt, BOOL stdin_get);\n+\n+#endif /*  _NET_PROTO_H_  */\ndiff --git a/source/utils/ntlm_auth_proto.h b/source/utils/ \nntlm_auth_proto.h\nnew file mode 100644\nindex 0000000..7dc0f44\n--- /dev/null\n+++ b/source/utils/ntlm_auth_proto.h\n@@ -0,0 +1,28 @@\n+#ifndef _NTLM_AUTH_PROTO_H_\n+#define _NTLM_AUTH_PROTO_H_\n+\n+/* This file is automatically generated with \"make proto\". DO NOT  \nEDIT */\n+\n+\n+/* The following definitions come from utils/ntlm_auth.c  */\n+\n+const char *get_winbind_domain(void);\n+const char *get_winbind_netbios_name(void);\n+DATA_BLOB get_challenge(void) ;\n+NTSTATUS contact_winbind_auth_crap(const char *username,\n+\t\t\t\t   const char *domain,\n+\t\t\t\t   const char *workstation,\n+\t\t\t\t   const DATA_BLOB *challenge,\n+\t\t\t\t   const DATA_BLOB *lm_response,\n+\t\t\t\t   const DATA_BLOB *nt_response,\n+\t\t\t\t   uint32 flags,\n+\t\t\t\t   uint8 lm_key[8],\n+\t\t\t\t   uint8 user_session_key[16],\n+\t\t\t\t   char **error_string,\n+\t\t\t\t   char **unix_name) ;\n+\n+/* The following definitions come from utils/ \nntlm_auth_diagnostics.c  */\n+\n+BOOL diagnose_ntlm_auth(void);\n+\n+#endif /*  _NTLM_AUTH_PROTO_H_  */\ndiff --git a/source/utils/passwd_proto.h b/source/utils/passwd_proto.h\nnew file mode 100644\nindex 0000000..8e8fd4b\n--- /dev/null\n+++ b/source/utils/passwd_proto.h\n@@ -0,0 +1,12 @@\n+#ifndef _PASSWD_PROTO_H_\n+#define _PASSWD_PROTO_H_\n+\n+/* This file is automatically generated with \"make proto\". DO NOT  \nEDIT */\n+\n+\n+/* The following definitions come from utils/passwd_util.c  */\n+\n+char *stdin_new_passwd( void);\n+char *get_pass( const char *prompt, BOOL stdin_get);\n+\n+#endif /*  _PASSWD_PROTO_H_  */\ndiff --git a/source/web/swat_proto.h b/source/web/swat_proto.h\nnew file mode 100644\nindex 0000000..8384f44\n--- /dev/null\n+++ b/source/web/swat_proto.h\n@@ -0,0 +1,49 @@\n+#ifndef _SWAT_PROTO_H_\n+#define _SWAT_PROTO_H_\n+\n+/* This file is automatically generated with \"make proto\". DO NOT  \nEDIT */\n+\n+\n+/* The following definitions come from web/cgi.c  */\n+\n+void cgi_load_variables(void);\n+const char *cgi_variable(const char *name);\n+const char *cgi_variable_nonull(const char *name);\n+BOOL am_root(void);\n+char *cgi_user_name(void);\n+void cgi_setup(const char *rootdir, int auth_required);\n+const char *cgi_baseurl(void);\n+const char *cgi_pathinfo(void);\n+char *cgi_remote_host(void);\n+char *cgi_remote_addr(void);\n+BOOL cgi_waspost(void);\n+\n+/* The following definitions come from web/diagnose.c  */\n+\n+BOOL winbindd_running(void);\n+BOOL nmbd_running(void);\n+BOOL smbd_running(void);\n+\n+/* The following definitions come from web/neg_lang.c  */\n+\n+int web_open(const char *fname, int flags, mode_t mode);\n+void web_set_lang(const char *lang_string);\n+\n+/* The following definitions come from web/startstop.c  */\n+\n+void start_smbd(void);\n+void start_nmbd(void);\n+void start_winbindd(void);\n+void stop_smbd(void);\n+void stop_nmbd(void);\n+void stop_winbindd(void);\n+void kill_pid(struct server_id pid);\n+\n+/* The following definitions come from web/statuspage.c  */\n+\n+void status_page(void);\n+\n+/* The following definitions come from web/swat.c  */\n+\n+\n+#endif /*  _SWAT_PROTO_H_  */\n--\n1.5.2.1\n\n\n--\nJames Peach | jpeach@samba.org\n\n\n"}