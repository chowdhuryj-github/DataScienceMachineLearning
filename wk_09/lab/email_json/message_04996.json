{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14374 - doc/trunk/design/syn", "body": "Author: larry\nDate: Fri Apr 13 17:59:55 2007\nNew Revision: 14374\n\nModified:\n   doc/trunk/design/syn/S03.pod\n   doc/trunk/design/syn/S12.pod\n\nLog:\nEliminated STATUS in favor of normal dispatch to :foo pair-handling methods.\n\n\nModified: doc/trunk/design/syn/S03.pod\n==============================================================================\n--- doc/trunk/design/syn/S03.pod\t(original)\n+++ doc/trunk/design/syn/S03.pod\tFri Apr 13 17:59:55 2007\n@@ -14,7 +14,7 @@\n   Date: 8 Mar 2004\n   Last Modified: 13 Apr 2007\n   Number: 3\n-  Version: 112\n+  Version: 113\n \n =head1 Overview\n \n@@ -2266,7 +2266,7 @@\n     Any       Num       numeric equality        +$_ == X\n     Any       Str       string equality         ~$_ eq X\n \n-    Any       Pair      test object             .STATUS(X) (Str,IO do filetest)\n+    Any       Pair      test object             .:Xkey(Xval) (e.g. filetests)\n \n     Set       Set       identical sets          $_ === X\n     Hash      Set       hash keys same set      $_.keys === X\n\nModified: doc/trunk/design/syn/S12.pod\n==============================================================================\n--- doc/trunk/design/syn/S12.pod\t(original)\n+++ doc/trunk/design/syn/S12.pod\tFri Apr 13 17:59:55 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 27 Oct 2004\n-  Last Modified: 11 Mar 2007\n+  Last Modified: 13 Apr 2007\n   Number: 12\n-  Version: 45\n+  Version: 46\n \n =head1 Overview\n \n@@ -613,26 +613,15 @@\n =head1 Pair query methods\n \n Certain classes such as filehandles allow colon pairs to be used as if they\n-were methods.  When you say:\n+were methods.  Method names beginning with a colon:\n \n     $filehandle.:e\n     $filehandle.:!x\n \n-it actually calls\n-\n-    $filehandle.STATUS(:e)\n-    $filehandle.STATUS(:!x)\n-\n-which is expected to return a value that can be used as a boolean.\n+are expected to return a value that can be used as a boolean.\n While this is primarily intended for use by file tests, other classes\n-may define a C method to provide a similar mechanism for interrogating\n-lightweight properties without having to define methods for all of them.\n-\n-Note, though, that I such queries are answered by the first located\n-C method--they are not inherited independently.  The C method\n-must explicitly pass the query on to other classes in such cases.  Likewise,\n-if conflicting C methods are composed from two different roles, they\n-must be disambiguated as any other conflicting method would be.\n+may define such methods to provide a similar mechanism for interrogating\n+properties.\n \n Depending on the class, the pairs in question may have arguments.\n The C class in particular makes use of pair syntax for subscript\n@@ -643,7 +632,10 @@\n \n This has the advantage that the pair's argument is actually parsed exactly\n as a subscript would be.  A C<.exists()> method could not easily make\n-such a guarantee about its arguments.\n+such a guarantee about its arguments.  Plus you can say:\n+\n+    %hash.:exists\n+    %hash.:delete\n \n Conjecture, the trailing subscript adverbs could be brought up front as\n well:\n\n"}