{"category": "ham", "to_address": "\"OtherRecipients of perl Ticket #42412\": ;", "from_address": "\"James Keenan via RT\" <parrotbug-followup@parrotcode.org>", "subject": "[perl #42412] Configure.pl things =no is true ", "body": "On Thu May 03 21:02:21 2007, allison  at perl.org wrote:\n> Andy Spieherty wrote:\n> > On Tue, 1 May 2007, James Keenan via RT wrote:\n> > \n> >> On Tue Apr 10 01:45:31 2007, jrisom  at gmail.com wrote:\n> >>> Configure should act as though writing --foo=no is false instead of \n> >>> true.  Tonight I tried using --execcapable=no to get around a compile \n> >>> failure, but then realized that it would probably treat \"no\" as a true \n> >>> value.\n> \n> I'm okay with having a plain English representation for \"false value\", \n> as long as we have exactly one. Pick 'no', 'none', 'false', or whatever \n> but we won't try to support every possible value a user might type in to \n> mean false. Whatever we pick will mean false everywhere, on every \n> option. And we have to be careful to make sure it's not a value that \n> someone might want to use as a string value.\n> \n\nThe more you multiply variant ways of providing values to options,\n-- the more code you have to write,\n-- the more code someone has to maintain,\n-- the more tests someone has to write to verify the validity of the code and ensure high \ncoverage by the tests, and\n-- the more documentation someone has to write to explain the code.\n\nFor at least the third of those tasks, that someone, currently, is me.  If we choose to support \n\"yes\" and \"no\" where \"1\" and \"0\" would suffice, then I have to write additional tests to test \nthat code.  That's more work for me -- but it also means that you, the Parrot developer, have \nto wait longer and longer for 'make test' to run.\n\nI'm hoping to recruit additional people to help maintain Parrot's Perl 5 configuration and \nbuild tools, and I made some progress in this regard at Hackathon Toronto.  Still, almost all \nof Configure.pl's options are completely untouched by the test suite.  Code coverage for the \nconfig/*/*.pm hierarchy is generally only around 25%.  Why multiply features for which, if \nwe're following best practices, we ought to write tests when we don't have the people to write \nthose tests?\n\nIf the values available for a given option logically reduce to a Boolean, then reduce the \npossible values to \"1\" and \"0\".  Then, document them and test them.\n\nkid51\n\n"}