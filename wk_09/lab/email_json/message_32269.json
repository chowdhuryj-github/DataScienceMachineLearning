{"category": "ham", "to_address": "jiho <jo.irisson@gmail.com>", "from_address": "Thomas Lumley <tlumley@u.washington.edu>", "subject": "Re: [R] lapply not reading arguments from the correct environment", "body": "On Fri, 18 May 2007, jiho wrote:\n\n> Hello,\n>\n> I am facing a problem with lapply which I ''''think''' may be a bug.\n> This is the most basic function in which I can reproduce it:\n>\n> myfun <- function()\n> {\n> \tfoo = data.frame(1:10,10:1)\n> \tfoos = list(foo)\n> \tfooCollumn=2\n> \tcFoo = lapply(foos,subset,select=fooCollumn)\n> \treturn(cFoo)\n> }\n>\n\n> I get this error:\n> \tError in eval(expr, envir, enclos) : object \"fooCollumn\" not found\n> while fooCollumn is defined, in the function, right before lapply.\n\n> This is with R 2.5.0 on both OS X and Linux (Fedora Core 6)\n> What did I do wrong? Is this indeed a bug? An intended behavior?\n\nNo, it isn't a bug (though it may be confusing).\n\nThe problem is that subset() evaluates its \"select\" argument in an unusual \nway. Usually the argument would be evaluated inside myfun() and the value \npassed to lapply(), and everything would work as you expect.\n\nsubset() bypasses the normal evaluation and explicitly evaluates the \n\"select\" argument in the calling frame, ie, inside lapply(), where \nfooCollumn is not visible.\n\nYou could do\n   lapply(foos, function(foo) subset(foo, select=fooCollum))\ncapturing fooCollum by lexical scope.  In R this is often a better option \nthan passing extra arguments to lapply (or other functions that take \nfunction arguments).\n\n \t-thomas\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}