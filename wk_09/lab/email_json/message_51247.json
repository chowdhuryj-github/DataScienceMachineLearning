{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: Alternatives to highly nested hashes", "body": "Mathew Snyder wrote:\n> It looks like an object is what I want.  Am I correct?  Suppose I need to work\n> with a bit of data that actually has 11 attributes.  This would be an object of\n> another type.  However, I need to manipulate pieces of it differently.  So I'm\n> guessing I would create an object thusly:\n> \n> sub objectname {\n>     my %hashOfAttribs {\n> \tattrib1 => undef,\n> \tattrib2 => undef,\n> \tattrib3 => undef\n>     }\n> }\n> \n> I would then create an instance of that object\n> \n> my $instance = new objectname();\n> \n> I'm not certain though, how to populate the elements.  would it actually be\n> my $instance = new objectname(attrib1 => value, attrib2 => value, attrib3 =>\n> value)?  Or would I create the instance as above and then populate it by some\n> other means?  For instance\n> $instance->hashOfAttribs {\n>     attrib1 => value,\n>     attrib2 => value,\n>     attrib3 => value\n> };\n> \n> Am I at least on the right track?\n\nWell, sort of. Objects are simply intelligent data structures - structures with\ncode as well as data that know how to perform operations on themselves. So you\nstill have to decide on your basic data structure first, and we still need to\nknow more about what the data is that you're trying to represent before we can\nhelp!\n\nWhat you've written above is pretty much correct expect that Perl classes (types\nof objects) are packages not subroutines. But first lets be sure you really need\nto create objects.\n\nRob\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}