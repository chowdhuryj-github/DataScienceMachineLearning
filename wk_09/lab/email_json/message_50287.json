{"category": "ham", "to_address": "\"Andy Bunn\" <Andy.Bunn@wwu.edu>", "from_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "subject": "Re: [R] Second y-axis in xyplot (lattice) where y1 and y2 have\n\tdifferent ranges", "body": "On 6/18/07, Andy Bunn  wrote:\n> Hi all,\n>\n> I realize this is asking a lot of lattice, but I want to add a second y\n> axis inside a xyplot and have y1 and y2 have different ranges. Given dat\n> below, I can add a second y axis by overlaying a new plot with\n> par(new=T) and label axis 4 with standard graphics. I've seen an example\n> for doing something similar in xyplot even though Deepayan has indicated\n> that lattice isn't the right tool for the job.\n>\n> However, is there a way to gracefully add a second y-axis to a xyplot\n> where y1 and y2 have different scales as in the example below? I've seen\n> the experimental tools to focus and modify lattice graphics but do not\n> know if these are applicable.\n\nYou could use those, but one drawback there is that you don't get the\nusual benefit of automatic allocation of space. Here is a ``better''\nsolution (as long as you realize that this is still a hack):\n\n[Note: this won't work if scales=\"free\" or \"sliced\"]\n\n[...]\n\n>   dat2 <- data.frame(Year = rep(1751:2000,2),\n>                      Stuff = rep(rnorm(250),2),\n>                      Samples = rep(floor(seq(5,30,length.out=250)+\n>                        rnorm(250,5)),2),\n>                      Grp = c(rep('SiteOne',250),\n>                              rep('SiteTwo',250)))\n\n\n\nscale.pars <- function(x)\n{\n    c(mx = min(x), dx = diff(range(x)))\n}\n\nrescale <- function(x, pars = scale.pars(x))\n{\n    (x - pars[\"mx\"]) / pars[\"dx\"]\n}\n\npars.Stuff <- scale.pars(dat2$Stuff)\npars.Samples <- scale.pars(dat2$Samples)\n\nrng.Stuff <- range(dat2$Stuff)\nrng.Samples <- range(dat2$Samples)\n\n\nmy.yscale.components <- function(lim, ...)\n{\n    ## template we will modify\n    ans <- yscale.components.default(lim, ...)\n    ## labels for Stuff in original scale\n    Stuff <- yscale.components.default(rng.Stuff, ...)\n    Stuff$left$ticks$at <-\n        rescale(Stuff$left$ticks$at, pars.Stuff)\n    Stuff$left$labels$at <-\n        rescale(Stuff$left$labels$at, pars.Stuff)\n    ## labels for Samples in original scale\n    Samples <- yscale.components.default(rng.Samples, ...)\n    Samples$left$ticks$at <-\n        rescale(Samples$left$ticks$at, pars.Samples)\n    Samples$left$labels$at <-\n        rescale(Samples$left$labels$at, pars.Samples)\n    ## modified 'components'\n    ans$left <- Stuff$left\n    ans$right <- Samples$left\n    ans\n}\n\n\nxyplot(rescale(Stuff, pars.Stuff) +\n           rescale(Samples, pars.Samples) ~ Year | Grp,\n       data=dat2,\n       panel = panel.superpose.2,\n\n       ## newlay added:\n       yscale.components = my.yscale.components,\n       scales = list(alternating = 3),\n\n       ylab = \"Stuff\",\n       legend = list(right =\n       list(fun = grid::textGrob(\"Samples\", rot = 90))),\n       type = c('l', 'l'))\n\n\n-Deepayan\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}