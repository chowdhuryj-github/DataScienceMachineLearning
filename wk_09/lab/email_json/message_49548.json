{"category": "ham", "to_address": "R-help <R-help@stat.math.ethz.ch>", "from_address": "Gavin Simpson <gavin.simpson@ucl.ac.uk>", "subject": "[R] Efficiently calculate sd on an array?", "body": "Dear list,\n\nConsider the following problem:\n\nn.obs <- 167\nn.boot <- 100\narr <- array(runif(n.obs*n.obs*n.boot), dim = c(n.obs, n.obs, n.boot))\narr[sample(n.obs, 3), sample(n.obs, 3), ] <- NA\n\nGiven the array arr, with dims = 167*167*100, I would like to calculate\nthe sd of the values in the 3rd dimension of arr, and an obvious way to\ndo this is via apply():\n\nsystem.time(res <- apply(arr, c(2,1), sd, na.rm = TRUE))\n\nThis takes over 4 seconds on my desktop.\n\nI have found an efficient way to calculate the means of the 3rd\ndimension using\n\ntemp <- t(rowMeans(arr, na.rm = TRUE, dims = 2))\n\ninstead of\n\ntemp <- apply(arr, c(2,1), mean, na.rm = TRUE)\n\nbut I am having difficulty seeing how to calculate the standard\ndeviations efficiently.\n\nAny idea how I might go about this?\n\nAll the best,\n\nG\n-- \n%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%\nGavin Simpson                     [t] +44 (0)20 7679 0522\nECRC                              [f] +44 (0)20 7679 0565\nUCL Department of Geography\nPearson Building                  [e] gavin.simpsonATNOSPAMucl.ac.uk\nGower Street\nLondon, UK                        [w] http://www.ucl.ac.uk/~ucfagls/\nWC1E 6BT                          [w] http://www.freshwaters.org.uk/\n%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}