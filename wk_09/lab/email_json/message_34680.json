{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 330: start ctdb frozen,\n\tand let the election sort things out. This prevents a race on\n\tstartup in http://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 330\nrevision-id: tridge@samba.org-20070523022307-ex37iunuyobmmun3\nparent: tridge@samba.org-20070522031451-628wjb3bbna6p4vc\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Wed 2007-05-23 12:23:07 +1000\nmessage:\n  start ctdb frozen, and let the election sort things out. This prevents a race on startup\nmodified:\n  common/ctdb_daemon.c           ctdb_daemon.c-20070409200331-3el1kqgdb9m4ib0g-1\n  common/ctdb_freeze.c           ctdb_freeze.c-20070512051503-935zdtyuqknqnhmo-1\n  include/ctdb_private.h         ctdb_private.h-20061117234101-o3qt14umlg9en8z0-13\n=== modified file 'common/ctdb_daemon.c'\n--- a/common/ctdb_daemon.c\t2007-05-19 03:45:24 +0000\n+++ b/common/ctdb_daemon.c\t2007-05-23 02:23:07 +0000\n@@ -745,12 +745,24 @@\n \ttalloc_set_destructor(domain_socket_name, unlink_destructor);\t\n \n \tctdb->ev = event_context_init(NULL);\n-\tfde = event_add_fd(ctdb->ev, ctdb, ctdb->daemon.sd, EVENT_FD_READ|EVENT_FD_AUTOCLOSE, \n-\t\t\t   ctdb_accept_client, ctdb);\n \n \t/* start monitoring for dead nodes */\n \tctdb_start_monitoring(ctdb);\n \n+\t/* start frozen, then let the first election sort things out */\n+\tif (!ctdb_blocking_freeze(ctdb)) {\n+\t\tDEBUG(0,(\"Failed to get initial freeze\\n\"));\n+\t\texit(12);\n+\t}\n+\n+\t/* force initial recovery for election */\n+\tctdb->recovery_mode = CTDB_RECOVERY_ACTIVE;\n+\n+\t/* now start accepting clients, only can do this once frozen */\n+\tfde = event_add_fd(ctdb->ev, ctdb, ctdb->daemon.sd, \n+\t\t\t   EVENT_FD_READ|EVENT_FD_AUTOCLOSE, \n+\t\t\t   ctdb_accept_client, ctdb);\n+\n \tctdb_main_loop(ctdb);\n \n \treturn 0;\n\n=== modified file 'common/ctdb_freeze.c'\n--- a/common/ctdb_freeze.c\t2007-05-18 14:56:49 +0000\n+++ b/common/ctdb_freeze.c\t2007-05-23 02:23:07 +0000\n@@ -215,6 +215,32 @@\n }\n \n \n+/*\n+  block until we are frozen, used during daemon startup\n+ */\n+bool ctdb_blocking_freeze(struct ctdb_context *ctdb)\n+{\n+\tif (ctdb->freeze_mode == CTDB_FREEZE_FROZEN) {\n+\t\t/* we're already frozen */\n+\t\treturn true;\n+\t}\n+\n+\t/* if there isn't a freeze lock child then create one */\n+\tif (!ctdb->freeze_handle) {\n+\t\tctdb->freeze_handle = ctdb_freeze_lock(ctdb);\n+\t\tCTDB_NO_MEMORY(ctdb, ctdb->freeze_handle);\n+\t\tctdb->freeze_mode = CTDB_FREEZE_PENDING;\n+\t}\n+\n+\t/* block until frozen */\n+\twhile (ctdb->freeze_mode == CTDB_FREEZE_PENDING) {\n+\t\tevent_loop_once(ctdb->ev);\n+\t}\n+\n+\treturn ctdb->freeze_mode == CTDB_FREEZE_FROZEN;\n+}\n+\n+\n \n /*\n   thaw the databases\n\n=== modified file 'include/ctdb_private.h'\n--- a/include/ctdb_private.h\t2007-05-19 07:21:58 +0000\n+++ b/include/ctdb_private.h\t2007-05-23 02:23:07 +0000\n@@ -828,5 +828,6 @@\n void ctdb_call_resend_all(struct ctdb_context *ctdb);\n void ctdb_node_dead(struct ctdb_node *node);\n void ctdb_node_connected(struct ctdb_node *node);\n+bool ctdb_blocking_freeze(struct ctdb_context *ctdb);\n \n #endif\n\n"}