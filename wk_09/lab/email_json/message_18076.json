{"category": "ham", "to_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "from_address": "Michael Kubovy <kubovy@virginia.edu>", "subject": "Re: [R] xyplot() and controlling panel.polygon()", "body": "I can't thank you enough! (I am also grateful to Sundar Dorai-Raj and  \nBert Gunter for their initial responses.)\n\nOn Apr 27, 2007, at 4:14 PM, Deepayan Sarkar wrote:\n\n> On 4/27/07, Michael Kubovy  wrote:\n>> Hi Deepayan,\n>>\n>> Your solution works, anf the polygon are drawn where I wanted them to\n>> go. I thought that I could figure out how to gain control over the\n>> colors of the four ensuing polygons (I'm trying to get two lighter\n>> shades of the lines).\n>>\n>> I've tried, for example, to see if I could control the color of the\n>> polyon outline, by adding border = 'red' to panel.polygon. That\n>> didn't work. Does it work only in lpolygon()?\n>\n> No. This is a bug, and the border color can currently only be black or\n> transparent (but it's easy to find and fix the bug; lpolygon is very\n> short, so just write a replacement).\n>\n> However, panel.superpose recognizes and splits certain graphical\n> parameters; border is not among them, but fill is. So you could do:\n>\n> my.panel.bands <-\n>    function(x, y, upper, lower,\n>             fill, col,\n>             subscripts, ..., font, fontface)\n> {\n>    upper <- upper[subscripts]\n>    lower <- lower[subscripts]\n>    panel.polygon(c(x, rev(x)), c(upper, rev(lower)),\n>                  col = fill, border = FALSE,\n>                  ...)\n> }\n>\n> xyplot(est ~ x | cond, group = grp, data = data, type = 'b',\n>       col = c(\"#0080ff\", \"#ff00ff\"),\n>       fill = c(\"#bbddff\", \"#ffbbff\"),\n>       upper = data$upper,\n>       lower = data$lower,\n>       panel = function(x, y, ...){\n>           panel.superpose(x, y, panel.groups = 'my.panel.bands', ...)\n>           panel.xyplot(x, y, ...)\n>       })\n>\n>\n>> I often can figure things out on my own, but obviously there's\n>> something fundamental that I'm not getting about inheritance and\n>> passing in these sorts of objects. I've been trying to get it from\n>> the help pages and from Murrell's book, but neither offers enough of\n>> a cookbook for me to figure these things out. Is there something I\n>> should have read?\n>\n> The concepts are all there in the help page (but it's often difficult\n> to put them together). The main points are:\n>\n> (1) unrecognized arguments get passed on to the panel function as is\n> (2) subscripts give indices of x, y, etc in the original data frame\n>\n> (the implication being that if you have another column from the\n> original data frame, such as upper and lower in your example, indexing\n> by subscripts will give you the matching subset). Other than that, the\n> panel functions have to do their own work (and what they do should\n> ideally be documented); nothing is enforced, so nothing is guaranteed.\n>\n> This sort of thing doesn't get used often enough for examples to be\n> easily found. The following demo in lattice might be helpful.\n>\n> file.show(system.file(\"demo/intervals.R\", package = \"lattice\"))\n>\n> -Deepayan\n\n_____________________________\nProfessor Michael Kubovy\nUniversity of Virginia\nDepartment of Psychology\nUSPS:     P.O.Box 400400    Charlottesville, VA 22904-4400\nParcels:    Room 102        Gilmer Hall\n         McCormick Road    Charlottesville, VA 22903\nOffice:    B011    +1-434-982-4729\nLab:        B019    +1-434-982-4751\nFax:        +1-434-982-4766\nWWW:    http://www.people.virginia.edu/~mk9y/\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}