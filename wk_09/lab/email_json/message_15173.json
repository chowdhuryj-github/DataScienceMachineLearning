{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "(Ted Harding) <ted.harding@nessie.mcc.ac.uk>", "subject": "Re: [R] How to solve difficult equations?", "body": "On 25-Apr-07 07:15:55, francogrex wrote:\n> \n> This below is not solvable with uniroot to find \"a\":\n> fn=function(a){\n> b=(0.7/a)-a\n> (1/(a+b+1))-0.0025\n> }\n> uniroot(fn,c(-500,500))  gives\n> \"Error in uniroot(fn, c(-500, 500)) : f() values at end points\n> not of opposite sign\"\n> \n> I read R-help posts and someone wrote a function:\n> http://finzi.psych.upenn.edu/R/Rhelp02a/archive/92407.html\n> but it is not very precise. Is there any '\"standard\" function\n> in R that can solve this? thanks.\n\nTwo answers: Yes, and No.\n\n\nFirst, \"No\":\n\nLet alpha denote 0.0025, and beta 0.7 (in your function \"fn\").\nThen\n\n  fna <- function(alpha,beta){ beta*alpha/(1 - alpha) }\n\nsolves it. But this is not a standard R function.\n\n\nSecond, \"Yes\":\n\nand the standard R function is uniroot(). But you can only apply\nit usefully if you first study the behaviour of your function fn(),\nin rather careful detail.\n\nOver your range (-500,500):\n\n  a<-10*(-50:50)\n  plot(a,fn(a),pch=\"+\")\n\nClearly something extreme happens just to the left of a=0. So:\n\n  a <- 0.025*(-100:0)\n  plot(a,fn(a),pch=\"+\")\n\nand so for this set of values of 'a' the previous behaviour\ncannot be seen. So:\n\n  a <- 0.01*(-100:100)+0.001\n  plot(a,fn(a),pch=\"+\")\n\nso the function goes very negative somewhere around a = -0.7.\nBut\n\n  fn(500)\n  [1] 0.996102\n\nso it is positive for a=500. Now find (inspired by the latest\nplot):\n\n  a[which(fn(a) < (-100))]\n  [1] -0.699\n\nand now you can use uniroot:\n\n  uniroot(fn,c(-0.699,500))\n  $root\n  [1] 0.001771128\n  $f.root\n  [1] 2.379763e-05\n  $iter\n  [1] 16\n  $estim.prec\n  [1] 6.103516e-05\n\nand, if that doesn't look precise enough:\n\n  uniroot(fn,c(-0.699,500),tol=1e-10)\n  $root\n  [1] 0.001754386\n  $f.root\n  [1] 1.354602e-14\n  $iter\n  [1] 18\n  $estim.prec\n  [1] 5e-11\n\n\nNow compare with the function fna() that solves it directly:\n\n  fna(0.0025,0.7)\n  [1] 0.001754386\n\n(so in fact it was worth increasing the precision for uniroot).\n\n\nBut the lesson to be drawn from all this is that for functions\nlike fn(), which have singularities (here at a = -0.7), the\nblind application of root-finding functions may not work, since\nthey are not set up to explore the function is the kind of way\nillustrated above. While there are procedures in the numerical\nanalysis world to handle this kind of thing, they tend to be\nwritten for particular classes of function, and again you will\nhave to do a bit of exploration to find out which function to use.\n\nAnd (while someone more knowledgeable may well disagree with me)\nI suspect that these are not \"standard\" R funnctions.\n\nHoping this is helpful,\nTed.\n\n\n--------------------------------------------------------------------\nE-Mail: (Ted Harding) \nFax-to-email: +44 (0)870 094 0861\nDate: 25-Apr-07                                       Time: 09:31:29\n------------------------------ XFMail ------------------------------\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}