{"category": "ham", "to_address": "\"Speakup is a screen review system for Linux.\" <speakup@braille.uwo.ca>", "from_address": "Michael Whapples <mwhapples@aim.com>", "subject": "Re: gentoo dropping speakup support", "body": "Spie your talking a lot of sense, and when I mentioned about speakup and\nhow it accesses serial ports I think I was thinking back to some of your\ncomments.\n\nYou have within this thread mentioned should be speakup be a combination\nof kernel code and user space code, I think I may have mentioned this\nbefore and would also support this type of idea. As an example, I think\nthe jupiter speech system is this combination approach, how does it\ncompare to speakup for ease of being maintained to work with newer\nkernels, I know that there has been some times in the past when speakup\nhas had to be altered specifically for newer kernels (sometimes breaking\nit for the older kernels).\n\nAnother thought about this idea of making the core of speakup not be\ninterface specific (which I think would be a good idea), is that I think\non the list someone asked about a headless install, and there was a\nreply that if by headless this would also mean no video card, then\nspeakup wouldn't work, I don't know if it could be done another way, but\nthis seems a bit specific (thinking, may be speakup would have a driver\nto access video memory, but also could have another dummy graphics\ndriver should the machine not have a video card).\n\nHaving all the boot messages, while it is useful, and speakup is about\nthe only way I know how to get the messages at the time (all, from the\nearliest possible moment), the question should be asked, on a properly\nconfigured system, how many problems might realistically occur before\nsuch a stage as USB console can work, and eventually the serial ports\nthat speakup can currently use will soon be gone if the trend of\nhardware manufacturers is anything to go by.\n\nI don't know how many are actually working on speakup, but I think it is\nonly a few and speakup is probably not the only thing for them. I have\nto admit as I understand things we are going to have to make hard\ndecissions and put what effort in the best direction, may it need to be\na complete rewrite, etc.\n\nFrom\nMichael Whapples\nOn Mon, 2007-06-18 at 01:18 -0500, Spie Sutherland wrote:\n> Speakup does use modules, and it can be statically compiled \n> into kernel instead. That's not a problem. The serial ports, \n> however only support real serial ports, not usb-serial, which \n> is becoming a problem.\n> \n> As I said a few months ago, the whole usb mess can be \n> statically compiled, including the usb core, the host controller, \n> and even usb-serial devices audio devices, and synth drivers, \n> like the dtlk for example, so in theory it should be possible to \n> boot and get speech output, with changes to speakup.\n> \n> As it is now, the code refers to the standard serial port \n> addresses and irqs, and the communication code is RS232 \n> specific. \n> \n> So this what I mean about abstraction. An abstract interface \n> does not implement anything, it only defines. The implementation \n> can be anything as long as it follows the interface. So basically \n> there needs to be a layer of code in between the serial port code\n> and the code that writes to it, one interface with several \n> implementations, RS232 serial, USB serial, and potential for any \n> other kind of implementation. And my argument was that the \n> same could be done on the user side, pressing a certain key does \n> some thing, currently assumed to be standard keyboard, but \n> would be nice if abstract interface where the keyboard is one type \n> of controller, other devices could trigger same. I'm mostly thinking \n> about mobile pervasive systems, where you might want to read a \n> message or email, not type, and your device is in your pocket. So \n> you have a little controller sort of like a game pad where you can\n> move between messages and read them etc, or get phone numbers \n> from a list. If the interface to the synth is generic then there are all \n> kinds of  possibilities.\n> \n> I will be working on this kind of thing with speech, and I am \n> still contemplating whether or not it needs to be kernel space. \n> On an embedded device you really don't need to see all the \n> boot messages, because it will load kernel from flash and will\n> always work. If I find a way to adapt this code to work on \n> arm then I might use it, but I actually think I could do the same\n> thing entirely in user space. Boot is much simpler than PC and\n> very fixed in nature, ie once done it shouldn't change, no need\n> to support gazillions of types of hardware etc. I like the idea\n> of being able to hear the console output, but then I might end\n> up just using usb-serial console and having a microcontroller\n> providing a terminal function, in other words both the speech\n> and keyboard functions. If done that way it would possibly \n> miss a very small amount of boot messages, but not many. \n> It would be the same as using a terminal program with your\n> PC connected to another PC with usb serial dongle and \n> watching the other machine boot. \n> \n>   -- Spie\n\n\n\n_______________________________________________\nSpeakup mailing list\nSpeakup@braille.uwo.ca\nhttp://speech.braille.uwo.ca/mailman/listinfo/speakup\n\n"}