{"category": "ham", "to_address": "Allison Randal <allison@perl.org>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: PMC architecture discussion", "body": "Being generally in favor of moving quickly toward a 1.0 release, I'm \nlooking at this from the perspective of \"what's essential and what's not \nessential\"?\n\nAllison Randal wrote:\n> \n> I'd like to do away with the PMC_DATA_IN_EXT flag so the \"DPOINTER \n> *data;\" struct element is always in the PMC struct instead of being \n> sometimes in the PMC struct and sometimes in the PMC_EXT struct. Access \n> is all hidden behind macros anyway, so the change shouldn't affect \n> anything outside of include/parrot/pobj.h. And, PMC_DATA_IN_EXT is \n> currently set to 1 in include/parrot/pobj.h, and never unset anywhere in \n> the repository.\n\nThis change we might as well go ahead and make. There's no reason to \nhave *data in two alternate locations. Let's put it in PMC_EXT (which is \nwhere it is now because of the fixed-value flag).\n\n> Combining this with the proposal to give PMCs a vtable function \n> responsible for constructing the PMC: calling the C opcode \n> constructs the core PMC struct for all PMCs, and then calls the \n> C (or C) vtable function. Each PMC that overrides \n> C creates its own struct to store in C. The C \n> PMC's C does nothing. C is separated from C \n> so they can be overridden separately.\n> \n> To accommodate low-level role composition, the C struct for a PMC \n> isn't defined directly in C, it's defined with a bit of Pmc2c syntactic \n> sugar. Pmc2c takes all the struct members defined in the PMC and in any \n> compile-time roles and builds them into one struct for the PMC. Also \n> included are any struct members defined in inherited PMCs. (A PMC is not \n> permitted to redefine any struct members defined in parents, and roles \n> may not contain struct members of the same name. Yes, this is rather \n> strict, but it is C.)\n\nWe add this functionality without removing or changing any of the old \nfunctionality. PMCs that want to use compile-time composition have to \nuse this interface for defining the core attributes, but with other PMCs \nit's optional.\n\n> Low-level PMCs can also have roles composed at runtime, but these are \n> entirely different creatures. They are added through the C \n> vtable function and live in a PMC data structure that hangs off the \n> PMC_EXT struct. Runtime composed roles are Role PMCs or subclasses of \n> the Role PMC.\n\nWe add another pointer to PMC_EXT.\n\nNo other changes are really necessary to get to the 1.0 release.\n\nAllison\n\n"}