{"category": "ham", "to_address": "Nigel Peck <nigel@miswebdesign.com>, beginners@perl.org", "from_address": "Ovid <publiustemp-beginnerscgi3@yahoo.com>", "subject": "Re: New to OO Perl", "body": "--- Nigel Peck  wrote:\n> A cut down version of my code goes like this...\n\n>\n######################################################################\n> \n> package MIS::Common::Image_magick;\n> \n> use Image::Magick;\n> \n> sub new {\n> \t\n> \tmy ( $class, $data ) = @_;\n> \t\n> \t$data->{image_magick_object} = Image::Magick::new();\n> \t\n> \tmy $error = $data->{image_magick_object}->Read( $data->{path} );\n> \tcroak $error if $error;\n> \t\n> \treturn bless $data, $class;\n> \t\n> }\n> \n> sub output {\n> \t\n> \tmy ( $self, $args ) = @_;\n> \t\n> \tmy $error = $self->{image_magick_object}->Write( $args->{path} );\n> \tcroak $error if $error;\n> \t\n> }\n> \n> sub resize {\n> \t\n> \tmy ( $self, $args ) = @_;\n> \t\n> \t$error = $self->{image_magick_object}->Resize( geometry => \n> $args->{geometry} );\n> \tcroak $error if $error;\n> \t\n> }\n> \n> sub crop {\n> \t\n> \tmy ( $self, $args ) = @_;\n> \t\n> \t$error = $self->{image_magick_object}->Crop( geometry => \n> $args->{geometry} );\n> \tcroak $error if $error;\n> \t\n> }\n> =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n> \n> What could I do better?\n\nWhat you're looking at is delegation and most of your code is\nidentical.  I'd factor out the common bits.  A first pass (not quite\ncompatible) looks like this:\n\n  package MIS::Common::Image_magick;\n\n  use strict;\n  use warnings;\n\n  use Carp 'croak';\n  use Image::Magick;\n\n  BEGIN {\n      my %delegate = map { $_ => ucfirst $_ } qw/read resize crop/;\n      $delegate{output} = 'Write';\n\n      while ( my ( $method, $delegate ) = each %delegate ) {\n          no strict 'refs';\n          *$method = sub {\n              my $self   = shift;\n              my $result = $self->_magick->$delegate(@_);\n              croak $result if $result;\n              return $self;\n          };\n      }\n  }\n\n  sub new {\n      my ( $class, $data ) = @_;\n      my $self = bless {} => $class;\n      $self->_initialize($data);\n  }\n\n  sub _initialize {\n    my ( $self, $data ) = @_;\n      $self->{image_magick_object} = Image::Magick->new;\n      $self->read( $data->{path} );\n      return $self;\n  }\n\n  sub _magick { shift->{image_magick_object} }\n\n  1;\n\nThe problem with this approach is that the delegated methods require\nthe same same arguments as the target methods and that's not how your\ncode works.  However, if users of your code realize this, they merely\nneed to consult the Image::Magick documentation to understand what\narguments are allowed.\n\nIf that is not desirable, it's not too hard to change the above code to\ndo what you want.  You'd need a richer structure in your begin block to\nspecify how delegate methods arguments map to the the target method\narguments.\n\nCheers,\nOvid\n\n--\n\nBuy the book -- http://www.oreilly.com/catalog/perlhks/\nPerl and CGI -- http://users.easystreet.com/ovid/cgi_course/\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}