{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "Nicholas Clark <nick@ccl4.org>", "subject": "Re: [svn:parrot] r19231 - trunk/languages/perl6/src/pmc", "body": "On Fri, Nov 07, 2008 at 03:28:40PM -0700, chromatic wrote:\n> On Friday 22 June 2007 02:07:32 Nicholas Clark wrote:\n> \n> > > We have a lot of string_from_cstring() calls with constant second\n> > > parameters and third parameters of 0 that could use updating.  There's no\n> > > sense in calling strlen() all the time.\n> \n> > I think that you need something like this\n> >\n> > /* concatenating with \"\" ensures that only literal strings are accepted as\n> > argument */ #define STR_WITH_LEN(s)  (s \"\"), (sizeof(s)-1)\n> >\n> > /* STR_WITH_LEN() shortcuts */\n> > #define newSVpvs(str) Perl_newSVpvn(aTHX_ STR_WITH_LEN(str))\n> \n> I'm not sure that's what I was asking.\n> \n> string_from_cstring()'s third parameter can be either the length of the string \n> or zero.  If it's zero, the function will call strlen() to get the string's \n> length.\n> \n> If we're passing in a string literal, it seems silly to pass in a length of 0, \n> as we're recalculating a constant on every call.  I don't see that this macro \n> fixes that.\n\nlong(er) hand, one would write\n\nstring_from_cstring(INTERP, STR_WITH_LEN(\"Bool\"));\n\nbut that's a bit obfuscated, because the macro really is a text substitution\nthat returns 2 values separated by a comma. And quite deliberately not wrapped\nin ().\n\nSo the next step is to make another macro that behaves like a conventional\nfunction:\n\n#define string_from_cstring_constant(I, S) \\\n    string_from_cstring(I, STR_WITH_LEN(S))\n\n\nor something like that, so that the messiness is all in one header. At which\npoint\n\nstring_from_cstring_constant(INTERP, \"Bool\");\n\nlooks like a regular function call, but is optimally efficient.\n(Although names that long will start to scare the VMS porters, as it's getting\nclose to 32 characters)\n\n> I do agree that updating strings and string lengths can be tedious, but I'm \n> not aware of any C89-compliant solution to keep the two synchronized.\n\nIf I've explained it clearly, then I think that it meets your requirements.\nNo strlen() call, but the correct length. And a syntax error from the compiler\nif someone mistakenly passes in anything other than a string constant.\n\nNicholas Clark\n\n"}