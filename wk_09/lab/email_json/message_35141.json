{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jra@samba.org", "subject": "svn commit: samba r23103 - in\n\tbranches/SAMBA_4_0/source/torture/basic: .", "body": "Author: jra\nDate: 2007-05-23 23:11:16 +0000 (Wed, 23 May 2007)\nNew Revision: 23103\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23103\n\nLog:\nAdd a torture test for the insane semantics Steve's cifsfs client\nuses so we don't regress :-).\nJeremy.\n\nModified:\n   branches/SAMBA_4_0/source/torture/basic/delete.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/torture/basic/delete.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/basic/delete.c\t2007-05-23 22:48:52 UTC (rev 23102)\n+++ branches/SAMBA_4_0/source/torture/basic/delete.c\t2007-05-23 23:11:16 UTC (rev 23103)\n@@ -1257,6 +1257,109 @@\n \treturn correct;\n }\n \n+/* Test 20b ... */\n+static bool deltest20b(struct torture_context *tctx, struct smbcli_state *cli1, struct smbcli_state *cli2)\n+{\n+\tint fnum1 = -1;\n+\tint fnum2 = -1;\n+\tbool correct = True;\n+\n+\tdel_clean_area(cli1, cli2);\n+\n+\t/* Test 20a. */\n+\n+\t/* Ensure the file doesn't already exist. */\n+\tsmbcli_close(cli1->tree, fnum1);\n+\tsmbcli_close(cli1->tree, fnum2);\n+\tsmbcli_setatr(cli1->tree, fname, 0, 0);\n+\tsmbcli_unlink(cli1->tree, fname);\n+\tsmbcli_setatr(cli1->tree, fname_new, 0, 0);\n+\tsmbcli_unlink(cli1->tree, fname_new);\n+\n+\t/* Firstly open and create with all access */\n+\tfnum1 = smbcli_nt_create_full(cli1->tree, fname, 0, \n+\t\t\t\t      SEC_RIGHTS_FILE_ALL,\n+\t\t\t\t      FILE_ATTRIBUTE_NORMAL,\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_READ|\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_WRITE|\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_DELETE,\n+\t\t\t\t      NTCREATEX_DISP_CREATE, \n+\t\t\t\t      0, 0);\n+\ttorture_assert(tctx, fnum1 != -1, talloc_asprintf(tctx, \"open - 1 of %s failed (%s)\", \n+\t\t       fname, smbcli_errstr(cli1->tree)));\n+\n+\t/* And close - just to create the file. */\n+\tsmbcli_close(cli1->tree, fnum1);\n+\t\n+\t/* Firstly open and create with all access */\n+\tfnum1 = smbcli_nt_create_full(cli1->tree, fname, 0, \n+\t\t\t\t      SEC_RIGHTS_FILE_ALL,\n+\t\t\t\t      FILE_ATTRIBUTE_NORMAL,\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_READ|\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_WRITE|\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_DELETE,\n+\t\t\t\t      NTCREATEX_DISP_OPEN, \n+\t\t\t\t      0, 0);\n+\ttorture_assert(tctx, fnum1 != -1, talloc_asprintf(tctx, \"open - 1 of %s failed (%s)\", \n+\t\t       fname, smbcli_errstr(cli1->tree)));\n+\n+\t/* Next open with all access, but add delete on close. */\n+\tfnum2 = smbcli_nt_create_full(cli2->tree, fname, 0, \n+\t\t\t\t      SEC_RIGHTS_FILE_ALL,\n+\t\t\t\t      FILE_ATTRIBUTE_NORMAL,\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_READ|\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_WRITE|\n+\t\t\t\t      NTCREATEX_SHARE_ACCESS_DELETE,\n+\t\t\t\t      NTCREATEX_DISP_OPEN,\n+\t\t\t\t      NTCREATEX_OPTIONS_DELETE_ON_CLOSE, 0);\n+\t\n+\ttorture_assert(tctx, fnum2 != -1, talloc_asprintf(tctx, \"open - 2 of %s failed (%s)\", \n+\t\t       fname, smbcli_errstr(cli2->tree)));\n+\n+\t/* The delete on close bit is *not* reported as being set. */\n+\tcorrect &= check_delete_on_close(tctx, cli1, fnum1, fname, False, __location__);\n+\tcorrect &= check_delete_on_close(tctx, cli2, fnum2, fname, False, __location__);\n+\n+\tsmbcli_close(cli1->tree, fnum1);\n+\n+\tcorrect &= check_delete_on_close(tctx, cli2, fnum2, fname, False, __location__);\n+\n+\t/* Rename the file by handle. */\n+\n+\t{\n+\t\tunion smb_setfileinfo sfinfo;\n+\t\tNTSTATUS status;\n+\n+\t\tmemset(&sfinfo, '\\0', sizeof(sfinfo));\n+\t\tsfinfo.generic.level = RAW_SFILEINFO_RENAME_INFORMATION;\n+\t\tsfinfo.generic.in.file.fnum = fnum2;\n+\t\tsfinfo.rename_information.in.root_fid  = 0;\n+\t\t/* Don't start the filename with '\\\\', we get NT_STATUS_NOT_SUPPORTED if so. */\n+\t\tsfinfo.rename_information.in.new_name  = fname_new + 1;\n+\t\tsfinfo.rename_information.in.overwrite = 1;\n+\n+\t\tstatus = smb_raw_setfileinfo(cli2->tree, &sfinfo);\n+\n+\t\ttorture_assert_ntstatus_equal(tctx,status,NT_STATUS_OK,talloc_asprintf(tctx, \"rename of %s to %s failed (%s)\",\n+\t\t\tfname, fname_new, smbcli_errstr(cli2->tree)));\n+\t}\n+\n+\tcorrect &= check_delete_on_close(tctx, cli2, fnum2, fname_new, False, __location__);\n+\n+\tsmbcli_close(cli2->tree, fnum2);\n+\n+\t/* See if the file is deleted - should be.... */\n+\tfnum1 = smbcli_open(cli1->tree, fname, O_RDWR, DENY_NONE);\n+\ttorture_assert(tctx, fnum1 == -1, talloc_asprintf(tctx, \"open of %s succeeded (should fail) - %s\", \n+\t\t       fname, smbcli_errstr(cli1->tree)));\n+\tfnum1 = smbcli_open(cli1->tree, fname_new, O_RDWR, DENY_NONE);\n+\ttorture_assert(tctx, fnum1 == -1, talloc_asprintf(tctx, \"open of %s succeeded (should fail) - %s\", \n+\t\t       fname_new, smbcli_errstr(cli1->tree)));\n+\n+\treturn correct;\n+}\n+\n+\n /* Test 21 ... */\n static bool deltest21(struct torture_context *tctx)\n {\n@@ -1428,6 +1531,7 @@\n \ttorture_suite_add_2smb_test(suite, \"deltest19\", deltest19);\n \ttorture_suite_add_2smb_test(suite, \"deltest20\", deltest20);\n \ttorture_suite_add_2smb_test(suite, \"deltest20a\", deltest20a);\n+\ttorture_suite_add_2smb_test(suite, \"deltest20b\", deltest20b);\n \ttorture_suite_add_simple_test(suite, \"deltest21\", deltest21);\n \ttorture_suite_add_simple_test(suite, \"deltest22\", deltest22);\n \n\n"}