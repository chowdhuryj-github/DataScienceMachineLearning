{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "allison@cvs.develooper.com", "subject": "[svn:parrot-pdd] r18419 - trunk/docs/pdds", "body": "Author: allison\nDate: Thu May  3 22:55:01 2007\nNew Revision: 18419\n\nModified:\n   trunk/docs/pdds/pdd15_objects.pod\n\nLog:\n[pdd]: A few clarifications for objects PDD from Klass-Jan Stol.\n\n\nModified: trunk/docs/pdds/pdd15_objects.pod\n==============================================================================\n--- trunk/docs/pdds/pdd15_objects.pod\t(original)\n+++ trunk/docs/pdds/pdd15_objects.pod\tThu May  3 22:55:01 2007\n@@ -452,9 +452,9 @@\n PMC.  If the method already exists (and isn't a Multi) it will replace\n the method with the new method and throw a warning.\n \n-It also takes slurpy named parameters to flag whether the method is a\n-vtable function, and whether its anonymous (no named entry as a method,\n-only as a vtable).\n+It also takes named parameters to flag whether the method is a vtable\n+function, and whether it is anonymous (no named entry as a method, only\n+as a vtable).\n \n =item methods\n \n@@ -1030,8 +1030,8 @@\n easier-to-use wrappers. These methods are all prototyped, and take a\n single fixed argument list, and return at most a single value.\n \n-To override a vtable function, either add the :vtable to the declaration\n-of the method, or pass a named, slurpy parameter \"vtable\" into the\n+To override a vtable function, either add the :vtable pragma to the\n+declaration of the method, or pass a named parameter \"vtable\" into the\n C method on a class or role.\n \n =head2 What The Bytecode Sees\n\n"}