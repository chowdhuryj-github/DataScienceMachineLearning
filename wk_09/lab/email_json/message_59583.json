{"category": "ham", "to_address": "perl6-language <perl6-language@perl.org>", "from_address": "\"Amir E. Aharoni\" <amir.aharoni@gmail.com>", "subject": "Named captures (was: **{x,y} quantifier)", "body": "On 01/07/07, Luke Palmer  wrote:\n> On 7/1/07, Amir E. Aharoni  wrote:\n> > > > please correct me if\n> > > > i say something stupid or if this has already been discussed before.)\n> >\n> > > Another important loss if we were to go with <1..3> would be the\n> > > ability to have runtime-dependent ranges; e.g.:\n> > >\n> > >     / ($ntimes) x**{$ntimes} /\n> >\n> > That's exactly what i meant by \"something stupid\".\n>\n> That's quite alright, because both interpretations of that sentence\n> were valid :-).  I meant:\n>\n>     / $ntimes := (\\d+) x**{$ntimes} /\n>\n> Luke\n>\n\nFunny - how did it make sense to me the first time around? :)\n\nThis prompted me to re-read the parts about Subpattern captures and\nAliasing in S05, and i've got to say that it's *extreme* TMTOWTDI. I'm\nhappy about it, 'cause i've been wishing for named captures for a long\ntime, but i'm not sure that i understand it in your example\ncompletely.\n\nThe examples of := usage in S05 seem to have notation such as this:\n$ := (\\d+) ....\n\nIs $ntimes supposed to be a predefined scalar variable (my $ntimes)?\nOr a regex variable?\n\nI'm getting confused ...\n\n"}