{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11192: Start working on global registry backend tests. in\n\tfile:///home/jelmer/bzr.samba-old/4.0-regwrite/", "body": "At file:///home/jelmer/bzr.samba-old/4.0-regwrite/\n\n------------------------------------------------------------\nrevno: 11192\nrevision-id: jelmer@samba.org-20070613205358-bw2nnemz6ringkd0\nparent: jelmer@samba.org-20070613001344-qkqechdlu867mozv\ncommitter: Jelmer Vernooij \nbranch nick: 4.0-regwrite\ntimestamp: Wed 2007-06-13 22:53:58 +0200\nmessage:\n  Start working on global registry backend tests.\nadded:\n  source/lib/registry/tests/registry.c registry.c-20070613193046-9w6vxztx0uea8a0p-1\nmodified:\n  source/lib/registry/hive.c     hive.c-20070602140117-9a3wth1mhbrq7ej1-1\n  source/lib/registry/hive.h     hive.h-20070423140448-w1nvzs8d2qxvyswz-1\n  source/lib/registry/interface.c svn-v2:20@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fcommon%2freg_interface.c\n  source/lib/registry/local.c    local.c-20070602140117-9a3wth1mhbrq7ej1-2\n  source/lib/registry/registry.h svn-v2:10026@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fregistry.h\n  source/torture/local/config.mk svn-v2:12008@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2ftorture%2flocal%2fconfig.mk\n=== added file 'source/lib/registry/tests/registry.c'\n--- a/source/lib/registry/tests/registry.c\t1970-01-01 00:00:00 +0000\n+++ b/source/lib/registry/tests/registry.c\t2007-06-13 20:53:58 +0000\n@@ -0,0 +1,75 @@\n+/* \n+   Unix SMB/CIFS implementation.\n+\n+   local testing of registry library - registry backend\n+\n+   Copyright (C) Jelmer Vernooij 2005-2007\n+   \n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+   \n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+*/\n+\n+#include \"includes.h\"\n+#include \"lib/registry/registry.h\"\n+#include \"lib/cmdline/popt_common.h\"\n+#include \"torture/torture.h\"\n+#include \"librpc/gen_ndr/winreg.h\"\n+#include \"system/filesys.h\"\n+\n+static bool test_get_predefined(struct torture_context *tctx,\n+\t\t\t\t\t\t\t\tconst void *_data)\n+{\n+\tconst struct registry_context *rctx = _data;\n+\tstruct registry_key *root;\n+\tWERROR error;\n+\n+\terror = reg_get_predefined_key(rctx, HKEY_CLASSES_ROOT, &root);\n+\ttorture_assert_werr_ok(tctx, error, \n+\t\t\t\t\t\t   \"getting predefined key failed\");\n+\treturn true;\n+}\n+\n+static bool setup_local_registry(struct torture_context *tctx, \n+\t\t\t\t\t\t\t\t void **data)\n+{\n+\tstruct registry_context *rctx;\n+\tWERROR error;\n+\n+\terror = reg_open_local(tctx, &rctx, NULL, NULL);\n+\tif (!W_ERROR_IS_OK(error)) {\n+\t\treturn false;\n+\t}\n+\n+\t/* FIXME */\n+\treturn true;\n+}\n+\n+static void tcase_add_tests(struct torture_tcase *tcase)\n+{\n+\ttorture_tcase_add_simple_test(tcase, \"get_predefined_key\",\n+\t\t\t\t\t\t\t\t\ttest_get_predefined);\n+}\n+\n+struct torture_suite *torture_registry_registry(TALLOC_CTX *mem_ctx) \n+{\n+\tstruct torture_tcase *tcase;\n+\tstruct torture_suite *suite = torture_suite_create(mem_ctx, \n+\t\t\t\t\t\t\t\t\t\t\t\t\t   \"REGISTRY\");\n+\t\n+\ttcase = torture_suite_add_tcase(suite, \"local\");\n+\ttorture_tcase_set_fixture(tcase, setup_local_registry, NULL);\n+\ttcase_add_tests(tcase);\n+\n+\treturn suite;\n+}\n\n=== modified file 'source/lib/registry/hive.c'\n--- a/source/lib/registry/hive.c\t2007-06-12 23:46:37 +0000\n+++ b/source/lib/registry/hive.c\t2007-06-13 20:53:58 +0000\n@@ -78,3 +78,11 @@\n {\n \treturn key->ops->del_key(key, name);\n }\n+\n+_PUBLIC_ WERROR hive_get_key_by_name(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\t\t   const struct hive_key *key, const char *name, \n+\t\t\t\t\t\t\t   struct hive_key **subkey)\n+{\n+\treturn key->ops->get_key_by_name(mem_ctx, key, name, \n+\t\t\t\t\t\t\t\t\t subkey);\n+}\n\n=== modified file 'source/lib/registry/hive.h'\n--- a/source/lib/registry/hive.h\t2007-06-12 23:46:37 +0000\n+++ b/source/lib/registry/hive.h\t2007-06-13 20:53:58 +0000\n@@ -150,6 +150,9 @@\n \t\t\t\t\t\t const char *name, const char *classname, struct security_descriptor *desc,\n \t\t\t\t\t\t struct hive_key **key);\n _PUBLIC_ WERROR hive_key_del(const struct hive_key *key, const char *name);\n+_PUBLIC_ WERROR hive_get_key_by_name(TALLOC_CTX *mem_ctx,\n+\t\t\t\t\t\t\t   const struct hive_key *key, const char *name, \n+\t\t\t\t\t\t\t   struct hive_key **subkey);\n \n \n /* Individual backends */\n\n=== modified file 'source/lib/registry/interface.c'\n--- a/source/lib/registry/interface.c\t2007-06-12 16:54:40 +0000\n+++ b/source/lib/registry/interface.c\t2007-06-13 20:53:58 +0000\n@@ -63,7 +63,8 @@\n {\n \tint i;\n \tfor (i = 0; reg_predefined_keys[i].name; i++) {\n-\t\tif (reg_predefined_keys[i].handle == hkey) return reg_predefined_keys[i].name;\n+\t\tif (reg_predefined_keys[i].handle == hkey) \n+\t\t\treturn reg_predefined_keys[i].name;\n \t}\n \n \treturn NULL;\n@@ -84,7 +85,7 @@\n }\n \n /** Get predefined key by id. */\n-_PUBLIC_ WERROR reg_get_predefined_key(struct registry_context *ctx, \n+_PUBLIC_ WERROR reg_get_predefined_key(const struct registry_context *ctx, \n \t\t\t\t\t\t\t\t\t   uint32_t hkey, struct registry_key **key)\n {\n \treturn ctx->ops->get_predefined_key(ctx, hkey, key);\n\n=== modified file 'source/lib/registry/local.c'\n--- a/source/lib/registry/local.c\t2007-06-12 20:08:26 +0000\n+++ b/source/lib/registry/local.c\t2007-06-13 20:53:58 +0000\n@@ -37,12 +37,15 @@\n \t\tstruct hive_key *key;\n \t\tstruct mountpoint *prev, *next;\n \t} *mountpoints;\n+\n+\tstruct auth_session_info *session_info; \n+\tstruct cli_credentials *credentials;\n };\n \n struct local_key {\n \tstruct registry_key global;\n \tstruct reg_key_path path;\n-\tstruct hive_key hive;\n+\tstruct hive_key *hive_key;\n };\n \n WERROR reg_mount_hive(struct registry_context *ctx, struct reg_key_path *path, \n@@ -57,13 +60,27 @@\n \tchar *orig = strdup(path),\n \t\t *curbegin = orig, \n \t\t *curend = strchr(path, '\\\\');\n-\tstruct registry_key *curkey = parent;\n+\tstruct local_key *local_parent = talloc_get_type(parent, struct local_key),\n+\t\t\t\t\t *local_key;\n+\tstruct hive_key *curkey = local_parent->hive_key;\n \tWERROR error;\n-\n-\twhile (curbegin && *curbegin) {\n+\tconst char **elements = NULL;\n+\tint el;\n+\n+\telements = talloc_array(mem_ctx, const char *, \n+\t\t\t\t\t\tstr_list_length(local_parent->path.elements) + 1);\n+\tfor (el = 0; local_parent->path.elements[el]; el++) {\n+\t\telements[el] = local_parent->path.elements[el];\n+\t}\n+\telements[el] = NULL;\n+\n+\twhile (curbegin != NULL && *curbegin) {\n \t\tif (curend != NULL)\n \t\t\t*curend = '\\0';\n-\t\terror = reg_open_key(mem_ctx, curkey, curbegin, &curkey);\n+\t\telements = talloc_realloc(mem_ctx, elements, const char *, el+2);\n+\t\telements[el] = talloc_strdup(elements, curbegin);\n+\t\tel++;\n+\t\terror = hive_get_key_by_name(mem_ctx, curkey, curbegin, &curkey);\n \t\tif (!W_ERROR_IS_OK(error)) {\n \t\t\tSAFE_FREE(orig);\n \t\t\treturn error;\n@@ -75,14 +92,48 @@\n \t}\n \tSAFE_FREE(orig);\n \n-\t*result = curkey;\n-\t\t\n-\treturn WERR_OK;\n-}\n+\tlocal_key->global.context = talloc_reference(local_key, \n+\t\t\t\t\t\t\t\t\t\t\t\t local_parent->global.context);\n+\tlocal_key->hive_key = curkey;\n+\tlocal_key->path.predefined_key = local_parent->path.predefined_key;\n+\tlocal_key->path.elements = talloc_steal(local_key, elements);\n+\n+\t*result = (struct registry_key *)local_key;\n+\t\n+\treturn WERR_OK;\n+}\n+\n+WERROR local_get_predefined_key (struct registry_context *ctx, \n+\t  uint32_t key_id, struct registry_key **key) \n+{\t\n+\tstruct registry_local *rctx = talloc_get_type(ctx, struct registry_local);\n+\tstruct local_key *local_key;\n+\tstruct mountpoint *mp;\n+\n+\tfor (mp = rctx->mountpoints; mp != NULL; mp = mp->next) {\n+\t\tif (mp->path.predefined_key == key_id && \n+\t\t\tmp->path.elements == NULL)\n+\t\t\tbreak;\n+\t}\n+\n+\tif (mp == NULL)\n+\t\treturn WERR_NOT_FOUND;\n+\n+\tlocal_key = talloc(ctx, struct local_key);\n+\tlocal_key->hive_key = mp->key;\n+\tlocal_key->global.context = ctx;\n+\tlocal_key->path = mp->path;\n+\t\n+\t*key = (struct registry_key *)local_key;\n+\n+\treturn WERR_OK;\n+}\n+\n \n const static struct registry_operations local_ops = {\n \t.name = \"local\",\n-\t.open_key = local_open_key\n+\t.open_key = local_open_key,\n+\t.get_predefined_key = local_get_predefined_key,\n };\n \n WERROR reg_open_local(TALLOC_CTX *mem_ctx, struct registry_context **ctx, \n@@ -94,6 +145,8 @@\n \tW_ERROR_HAVE_NO_MEMORY(ret);\n \n \tret->registry.ops = &local_ops;\n+\tret->session_info = session_info;\n+\tret->credentials = credentials;\n \n \t*ctx = (struct registry_context *)ret;\n \t\n\n=== modified file 'source/lib/registry/registry.h'\n--- a/source/lib/registry/registry.h\t2007-06-10 22:26:52 +0000\n+++ b/source/lib/registry/registry.h\t2007-06-13 20:53:58 +0000\n@@ -94,7 +94,7 @@\n \n \tWERROR (*flush_key) (struct registry_key *key);\n \n-\tWERROR (*get_predefined_key) (struct registry_context *ctx, \n+\tWERROR (*get_predefined_key) (const struct registry_context *ctx, \n \t\t\t\t\t\t\t  uint32_t key_id,\n \t\t\t\t\t\t\t  struct registry_key **key);\n \n@@ -198,7 +198,7 @@\n _PUBLIC_ WERROR reg_get_predefined_key_by_name(struct registry_context *ctx, \n \t\t\t\t\t\t\t\t\t\t\t   const char *name, \n \t\t\t\t\t\t\t\t\t\t\t   struct registry_key **key);\n-_PUBLIC_ WERROR reg_get_predefined_key(struct registry_context *ctx, \n+_PUBLIC_ WERROR reg_get_predefined_key(const struct registry_context *ctx, \n \t\t\t\t\t\t\t\t\t   uint32_t hkey, \n \t\t\t\t\t\t\t\t\t   struct registry_key **key);\n \n\n=== modified file 'source/torture/local/config.mk'\n--- a/source/torture/local/config.mk\t2007-06-12 16:54:40 +0000\n+++ b/source/torture/local/config.mk\t2007-06-13 20:53:58 +0000\n@@ -24,6 +24,7 @@\n \t\tirpc.o \\\n \t\t../../lib/registry/tests/generic.o \\\n \t\t../../lib/registry/tests/hive.o \\\n+\t\t../../lib/registry/tests/registry.o \\\n \t\tresolve.o \\\n \t\t../../lib/util/tests/strlist.o \\\n \t\t../../lib/util/tests/file.o \\\n\n"}