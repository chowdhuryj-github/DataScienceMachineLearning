{"category": "ham", "to_address": "beginners@perl.org, perl-beginners@moderators.isc.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: Simplest hash initialization with no value", "body": "On Jun 1, 6:08 am, alok.n...@hp.com (Alok Nath) wrote:\n\n> Why it gives syntax error when -\n>         my @myhash{qw/A B/} = ();\n\nEr... because it's not valid syntax.  That's why you'd get a syntax\nerror. Not sure what you're asking. You can't \"declare\" a hash slice.\nYou declare variables.\n\n> It works when I say -\n>         my %myhash ;\n>         @myhash{qw/A B/} = ();  \n\nRight.  Because that is valid syntax.  First you declare %myhash, then\nyou initialize two keys of that hash using a slice.\n\nYour original question was \"how to initialize a hash\".  It's apparent\nnow that you wanted to know how to \"declare and initialize a hash in\none step\".  This question comes up so frequently that it really should\nbe a FAQ.  The way you did so was fine originally.  What's wrong with\nit?  If you have a longer list of keys, you could use the map operator\nas a shortcut, so you don't write 'undef' multiple times:\n\nmy %myhash = map { $_ => undef } qw/A B C D E F G H I J K/;\n\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}