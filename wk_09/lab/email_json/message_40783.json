{"category": "ham", "to_address": "Andy Lester <andy@petdance.com>", "from_address": "Steve Peters <steve@fisharerojo.org>", "subject": "Re: SET_NULL", "body": "On Fri, Jun 01, 2007 at 07:53:35PM -0500, Andy Lester wrote:\n> From include/parrot/parrot.h:\n> \n> /* weird architectures might need this, s. C-FAQ 5.17\n> *\n> * the SET_NULL macros are only for system, where a NULL pointer\n> * isn't represented by zeroes, so don't use these, for resetting\n> * non-null pointers\n> */\n> \n> #ifdef HAS_NON_ZERO_NULL\n> #  define SET_NULL(x) x = NULL\n> #  define SET_NULL_P(x, s) x = (s)NULL\n> #else\n> #  define SET_NULL(x)\n> #  define SET_NULL_P(x, s)\n> #endif /* HAS_NON_ZERO_NULL */\n> \n> \n> This seems very wrong.  SET_NULL() isn't actually setting any values  \n> if not HAS_NON_ZERO_NULL.  Is there some reason it's not actually\n> \n> #  define SET_NULL(x)      x = 0\n> #  define SET_NULL_P(x, s) x = (s)NULL\n> \n> And for that matter, what's wrong with just using x = NULL  \n> everywhere?  Why do we need a macro to do this?\n> \n\nI can't see any need for such a macro other than for the minor obfuscation\nthat it allows.  For most of the Parrot code, I haven't SET_NULL() used, and\nI haven't used it myself.  I'm a bit curious how much it is actually used.\n\n\nSteve Peters\nsteve@fisharerojo.org\n\n"}