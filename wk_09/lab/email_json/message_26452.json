{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Nicholas Clark <nick@ccl4.org>", "subject": "Re: [svn:parrot] r18381 - trunk/include/parrot", "body": "On Tue, May 01, 2007 at 04:41:22PM -0700, particle@cvs.perl.org wrote:\n\n> +\n> +#define STRING_IS_NULL(s) ((s) == NULL)\n> +#define STRING_IS_EMPTY(s) !(int)(s)->strlen\n\nI'm really not convinced that the first macro brings any benefit.\nI'm not totally sure that the second does either, given that both operations\nare conceptually very simple.\n\nCode is read far more often than it is written, and I don't think that the\ntyping savings outweigh the learning curve of two more macros, and the\nmemory needed to keep two more in one's head.\n\n\nArguably one of the mistakes of Perl 5 was to use too many macros, which\nunintentionally contributes to obfuscating the code.\n\n\n>  /* &gen_from_def(sysinfo.pasm) prefix(SYSINFO_) */\n>  \n>  #define PARROT_INTSIZE               1\n> \n> \n\nOn Tue, May 01, 2007 at 04:41:57PM -0700, particle@cvs.perl.org wrote:\n\n> +                if (STRING_IS_NULL(src_name) || STRING_IS_EMPTY(src_name)) {\n\n> +                if (STRING_IS_NULL(dest_name) || STRING_IS_EMPTY(dest_name)) {\n\n> +                if (STRING_IS_NULL(name) || STRING_IS_EMPTY(name)) {\n\n\nIs it likely that all future use of these two will be paired? If so, its it\na better idea to abolish them and replace with one macro\nSTRING_IS_NULL_OR_EMPTY() ?\n\nAlthough, visually it's distracting, and it's still about as much typing as\nthe macros' contents.\n\nNicholas Clark\n\n"}