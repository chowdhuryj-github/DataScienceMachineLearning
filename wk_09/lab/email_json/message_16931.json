{"category": "ham", "to_address": "\"xpRt.wannabe\" <xprt.wannabe@gmail.com>", "from_address": "Duncan Murdoch <murdoch@stats.uwo.ca>", "subject": "Re: [R] A coding question involving variable assignments in ifelse()", "body": "On 4/26/2007 5:21 PM, xpRt.wannabe wrote:\n> I made a few slight modifications to the original model in an effort\n> to see the inner workings of the code:\n> \n> deductible <- 1\n> coverage.limit <- 2\n> insurance.threshold <- deductible + coverage.limit\n> \n> \n> \n> set.seed(123)\n> loss <- abs(rnorm(rpois(1, 5), 1, 3))\n> n <- length(loss)\n> accept <- runif(n) < 0.8\n> payout <- runif(n) < 0.999\n> sum(ifelse(accept & payout, ifelse(loss > insurance.threshold,\n> loss - coverage.limit, pmin(loss, deductible)), 0))\n> \n> [1] 6.188817\n> \n> \n> \n> To tease out the data as well as to see the effect of 'accept &\n> payout', I did the following:\n> \n>> loss\n> [1] 3.401663 4.570620 4.068667 4.718488\n>> accept\n> [1]  TRUE FALSE  TRUE  TRUE  # The second loss claim is NOT accepted\n> by the insurance company.\n>> payout\n> [1] TRUE TRUE TRUE TRUE\n>> accept & payout\n> [1]  TRUE FALSE  TRUE  TRUE  # The second entry is FALSE because of\n> the second entry in 'accept.'\n> \n> Based on the inner ifelse() expression, the original loss numbers\n> become : 1.401663, 2.570620, 2.068667, 2.718488, respectively (which\n> is fine and what I wanted).\n> \n> Because the second entry in 'accept & payout' is FALSE, the second\n> altered loss number (2.570620) becomes 0, making sum(...) equal\n> 6.188817.  Unfortunately this is _not_ what I want, and I apologize\n> for not being clear in the first place.  What I want is: for any FALSE\n> entry, the original loss number is unaltered, as opposed to become 0.\n> So in the example above, the four numbers that should have been added\n> are: 1.401663, 4.570620, 2.068667, 2.718488, yielding 10.759438\n> instead of 6.188817.\n> \n> Any further suggestions would be greatly appreciated.\n\nI'm sorry, but from an anonymous poster that's not a reasonable request. \n  Just work it out yourself.\n\nDuncan Murdoch\n\n> \n> On 4/26/07, Duncan Murdoch  wrote:\n>> On 4/26/2007 2:31 PM, xpRt.wannabe wrote:\n>>> Just to be sure, is what I have below the right intepretation of your\n>>> suggestion:\n>> Yes, that's what I suggested.\n>>\n>> Duncan Murdoch\n>>\n>>> deductible <- 15\n>>> coverage.limit <- 75\n>>> insurance.threshold <- deductible + coverage.limit\n>>>\n>>> tmpf <- function() {\n>>> loss <- rlnorm(rpois(1, 3), 2, 5)\n>>> n <- length(loss)\n>>> accept <- runif(n) < 0.8\n>>> payout <- runif(n) < 0.999\n>>> sum(ifelse(accept & payout, ifelse(loss > insurance.threshold, loss -\n>>> coverage.limit, pmin(loss, deductible)), 0))\n>>> }\n>>> net <- replicate(1000000, tmpf())\n>>>\n>>> On 4/26/07, Duncan Murdoch  wrote:\n>>>> On 4/26/2007 12:48 PM, xpRt.wannabe wrote:\n>>>>> Dear List,\n>>>>>\n>>>>> Below is a simple, standard loss model that takes into account the\n>>>>> terms of an insurance policy:\n>>>>>\n>>>>> deductible <- 15\n>>>>> coverage.limit <- 75\n>>>>> insurance.threshold <- deductible + coverage.limit\n>>>>>\n>>>>> tmpf <- function() {\n>>>>> loss <- rlnorm(rpois(1, 3), 2, 5)\n>>>>> sum(ifelse(loss > insurance.threshold, loss - coverage.limit,\n>>>>> pmin(loss, deductible)))\n>>>>> }\n>>>>> net <- replicate(1000000, tmpf())\n>>>>>\n>>>>> Now, I would like to enhance the model by incorporating the following\n>>>>> two probabilities:\n>>>>>\n>>>>> 1. Probability of claim being accepted by the insurance company, say, 0.8\n>>>>> 2. Probability of payout by the insurance company, say, 0.999\n>>>>>\n>>>>> Could anyone suggest how one might do this?\n>>>> A general way to generate events with probability p is runif(n) < p.  So\n>>>> I'd add\n>>>>\n>>>> n <- length(loss)\n>>>> accept <- runif(n) < 0.8\n>>>> payout <- runif(n) < 0.999\n>>>>\n>>>> and then require \"accept & payout\"  before any payment at all, e.g.\n>>>>\n>>>> sum(ifelse(accept & payout, [ your old ifelse expression ], 0))\n>>>>\n>>>> There are a lot of implicit independence assumptions here; they may not\n>>>> be very realistic.\n>>>>\n>>>> Duncan Murdoch\n>>>>\n>>> ______________________________________________\n>>> R-help@stat.math.ethz.ch mailing list\n>>> https://stat.ethz.ch/mailman/listinfo/r-help\n>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html\n>>> and provide commented, minimal, self-contained, reproducible code.\n>>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}