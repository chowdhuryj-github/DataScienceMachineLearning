{"category": "ham", "to_address": "\"jbuburuz@sce.carleton.ca\" <jbuburuz@sce.carleton.ca>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: crypt() and /etc/shadow entries do not match?", "body": "On 5/2/07, Chas Owens  wrote:\n> On 5/2/07, Chas Owens  wrote:\n> > On 5/2/07, jbuburuz@sce.carleton.ca  wrote:\n> > snip\n> > > I have tested crypt() on debian, and redhat. Same problems. The has values\n> > > do not match each other.\n> > snip\n> >\n> > It looks like your /etc/shadow file is not using crypt to store the\n> > passwords on that system.\n> >\n> > from man shadow\n> >        The password field must be filled. The encrypted password consists of\n> >        13 to 24 characters from the 64 character alphabet a thru z, A thru Z,\n> >        0 thru 9, \\. and /. Optionally it can start with a \"$\" character. This\n> >        means the encrypted password was generated using another (not DES)\n> >        algorithm. For example if it starts with \"$1$\" it means the MD5-based\n> >        algorithm was used.\n> >\n>\n> Nevermind, John's email is the one you should pay attention to\n>\nThe relevant doc is perldoc -f crypt:\n               When verifying an existing digest string you should use the\n               digest as the salt (like \"crypt($plain, $digest) eq $digest\").\n               The SALT used to create the digest is visible as part of the\n               digest.  This ensures crypt() will hash the new string with the\n               same salt as the digest.  This allows your code to work with\n               the standard crypt and with more exotic implementations.  In\n               other words, do not assume anything about the returned string\n               itself, or how many bytes in the digest matter.\n\n               Traditionally the result is a string of 13 bytes: two first\n               bytes of the salt, followed by 11 bytes from the set\n               \"[./0-9A-Za-z]\", and only the first eight bytes of the digest\n               string mattered, but alternative hashing schemes (like MD5),\n               higher level security schemes (like C2), and implementations on\n               non-UNIX platforms may produce different strings.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}