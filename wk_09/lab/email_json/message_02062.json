{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Leopold Toetsch <lt@toetsch.at>", "subject": "Re: modifying classes after they're instantiated", "body": "Am Mittwoch, 11. April 2007 00:25 schrieb Allison Randal:\n> 3) Modify the core PMC implementation so it tracks information about\n> which the different containers (registers, temporary variables,\n> namespace entries, etc.) that hold a particular PMC, and which\n> particular container was used to make the method call, so a method call\n> can modify the variable it was called on. Disadvantage: This isn't a\n> generally useful feature. (Not my favorite alternative.)\n\nI'm just answering 3):\nAnother \"container\" might be (external) C code (incl. the C stack). You can't \ntrack that in above terms. This all boils down to the same implications \nimposed by the conservative GC. You can never be sure, it's a variable (e.g. \ninteger looking like a mem addr) or just a real memory location you were \ntracking, which means: modifying adjacent (maybe inside the very PMC or not) \nmemory regions could be disastrous.\n\nleo - voting 4)\n\n"}