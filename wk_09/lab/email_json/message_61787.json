{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r23696 - in branches/SAMBA_4_0/source/param: .", "body": "Author: tridge\nDate: 2007-07-04 04:15:07 +0000 (Wed, 04 Jul 2007)\nNew Revision: 23696\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23696\n\nLog:\n\nadded the create mask and related share permissions options to Samba4,\nusing the new share_int_option() code from Simo\n\nspeaking of which, this is the first time I've looked closely at the\nshare_classic.c code. It is absolutely and completely braindead and\nbroken. Whatever drugs Simo was on at the time, he better not try to\ncross a border with them on him!\n\nProblems with it:\n\n - if you actually set a value, it gets ignored, and the defvalue gets\n   used instead ('ret' is never returned). If you don't set a value,\n   then defvalue gets returned too. Sound useful?\n\n - it means we now have to list parameters in source/param/ in lots\n   and lots of places, all of which have to match exactly. code like\n   this is supposed to reduce the likelyhood of errors, not increase\n   it!\n\n - code which has a long line of if() statements with strcmp() should\n   cause your fingers to burn on the keyboard when you type it\n   in. That's what structure lists are for. Strangely enough, we have\n   all the info in loadparm.c in a structure list, but instead it gets\n   replicated in share_classic.c in this strange if() strcmp() form\n\nexpect some changes to this code shortly. I'll need a calming cup of\ntea first though :-)\n\nModified:\n   branches/SAMBA_4_0/source/param/loadparm.c\n   branches/SAMBA_4_0/source/param/loadparm.h\n   branches/SAMBA_4_0/source/param/share.h\n   branches/SAMBA_4_0/source/param/share_classic.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/param/loadparm.c\n===================================================================\n--- branches/SAMBA_4_0/source/param/loadparm.c\t2007-07-04 03:25:44 UTC (rev 23695)\n+++ branches/SAMBA_4_0/source/param/loadparm.c\t2007-07-04 04:15:07 UTC (rev 23696)\n@@ -223,6 +223,10 @@\n \tint bMap_hidden;\n \tint bMap_archive;\n \tint bStrictLocking;\n+\tint iCreate_mask;\n+\tint iCreate_force_mode;\n+\tint iDir_mask;\n+\tint iDir_force_mode;\n \tint *copymap;\n \tint bMSDfsRoot;\n \tint bStrictSync;\n@@ -259,6 +263,10 @@\n \tFalse,\t\t\t/* bMap_hidden */\n \tTrue,\t\t\t/* bMap_archive */\n \tTrue,\t\t\t/* bStrictLocking */\n+\t0744,\t\t\t/* iCreate_mask */\n+\t0000,\t\t\t/* iCreate_force_mode */\n+\t0755,\t\t\t/* iDir_mask */\n+\t0000,\t\t\t/* iDir_force_mode */\t\n \tNULL,\t\t\t/* copymap */\n \tFalse,\t\t\t/* bMSDfsRoot */\n \tFalse,\t\t\t/* bStrictSync */\n@@ -419,6 +427,11 @@\n \t\n \t{\"read only\", P_BOOL, P_LOCAL, &sDefault.bRead_only, NULL, NULL, FLAG_BASIC | FLAG_ADVANCED | FLAG_SHARE},\n \n+\t{\"create mask\", P_OCTAL, P_LOCAL, &sDefault.iCreate_mask, NULL, NULL, FLAG_ADVANCED | FLAG_GLOBAL | FLAG_SHARE}, \n+\t{\"force create mode\", P_OCTAL, P_LOCAL, &sDefault.iCreate_force_mode, NULL, NULL, FLAG_ADVANCED | FLAG_GLOBAL | FLAG_SHARE}, \n+\t{\"directory mask\", P_OCTAL, P_LOCAL, &sDefault.iDir_mask, NULL, NULL, FLAG_ADVANCED | FLAG_GLOBAL | FLAG_SHARE}, \n+\t{\"force directory mode\", P_OCTAL, P_LOCAL, &sDefault.iDir_force_mode, NULL, NULL, FLAG_ADVANCED | FLAG_GLOBAL | FLAG_SHARE}, \n+\n \t{\"hosts allow\", P_LIST, P_LOCAL, &sDefault.szHostsallow, NULL, NULL, FLAG_GLOBAL | FLAG_BASIC | FLAG_ADVANCED | FLAG_SHARE | FLAG_PRINT | FLAG_DEVELOPER},\n \t{\"hosts deny\", P_LIST, P_LOCAL, &sDefault.szHostsdeny, NULL, NULL, FLAG_GLOBAL | FLAG_BASIC | FLAG_ADVANCED | FLAG_SHARE | FLAG_PRINT | FLAG_DEVELOPER},\n \n@@ -932,6 +945,10 @@\n _PUBLIC_ FN_LOCAL_BOOL(lp_map_system, bMap_system)\n _PUBLIC_ FN_LOCAL_INTEGER(lp_max_connections, iMaxConnections)\n _PUBLIC_ FN_LOCAL_INTEGER(lp_csc_policy, iCSCPolicy)\n+_PUBLIC_ FN_LOCAL_INTEGER(lp_create_mask, iCreate_mask)\n+_PUBLIC_ FN_LOCAL_INTEGER(lp_force_create_mode, iCreate_force_mode)\n+_PUBLIC_ FN_LOCAL_INTEGER(lp_dir_mask, iDir_mask)\n+_PUBLIC_ FN_LOCAL_INTEGER(lp_force_dir_mode, iDir_force_mode)\n _PUBLIC_ FN_GLOBAL_INTEGER(lp_server_signing, &Globals.server_signing)\n _PUBLIC_ FN_GLOBAL_INTEGER(lp_client_signing, &Globals.client_signing)\n \n@@ -1489,6 +1506,7 @@\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase P_INTEGER:\n+\t\t\t\tcase P_OCTAL:\n \t\t\t\tcase P_ENUM:\n \t\t\t\t\t*(int *)dest_ptr = *(int *)src_ptr;\n \t\t\t\t\tbreak;\n@@ -1894,6 +1912,10 @@\n \t\t\t*(int *)parm_ptr = atoi(pszParmValue);\n \t\t\tbreak;\n \n+\t\tcase P_OCTAL:\n+\t\t\t*(int *)parm_ptr = strtol(pszParmValue, NULL, 8);\n+\t\t\tbreak;\n+\n \t\tcase P_BYTES:\n \t\t{\n \t\t\tuint64_t val;\n@@ -2088,6 +2110,10 @@\n \t\t\tfprintf(f, \"%d\", *(int *)ptr);\n \t\t\tbreak;\n \n+\t\tcase P_OCTAL:\n+\t\t\tfprintf(f, \"0%o\", *(int *)ptr);\n+\t\t\tbreak;\n+\n \t\tcase P_LIST:\n \t\t\tif ((char ***)ptr && *(char ***)ptr) {\n \t\t\t\tchar **list = *(char ***)ptr;\n@@ -2120,6 +2146,7 @@\n \t\t\treturn (*((int *)ptr1) == *((int *)ptr2));\n \n \t\tcase P_INTEGER:\n+\t\tcase P_OCTAL:\n \t\tcase P_BYTES:\n \t\tcase P_ENUM:\n \t\t\treturn (*((int *)ptr1) == *((int *)ptr2));\n@@ -2209,6 +2236,7 @@\n \t\t\treturn parm_table[i].def.bvalue ==\n \t\t\t\t*(int *)parm_table[i].ptr;\n \t\tcase P_INTEGER:\n+\t\tcase P_OCTAL:\n \t\tcase P_BYTES:\n \t\tcase P_ENUM:\n \t\t\treturn parm_table[i].def.ivalue ==\n\nModified: branches/SAMBA_4_0/source/param/loadparm.h\n===================================================================\n--- branches/SAMBA_4_0/source/param/loadparm.h\t2007-07-04 03:25:44 UTC (rev 23695)\n+++ branches/SAMBA_4_0/source/param/loadparm.h\t2007-07-04 04:15:07 UTC (rev 23696)\n@@ -30,7 +30,7 @@\n \n /* the following are used by loadparm for option lists */\n typedef enum {\n-\tP_BOOL,P_INTEGER,P_BYTES,P_LIST,P_STRING,P_USTRING,P_ENUM,P_SEP\n+\tP_BOOL,P_INTEGER,P_OCTAL,P_BYTES,P_LIST,P_STRING,P_USTRING,P_ENUM,P_SEP\n } parm_type;\n \n typedef enum {\n\nModified: branches/SAMBA_4_0/source/param/share.h\n===================================================================\n--- branches/SAMBA_4_0/source/param/share.h\t2007-07-04 03:25:44 UTC (rev 23695)\n+++ branches/SAMBA_4_0/source/param/share.h\t2007-07-04 04:15:07 UTC (rev 23696)\n@@ -92,6 +92,11 @@\n #define SHARE_MSDFS_ROOT\t\"msdfs-root\"\n #define SHARE_CI_FILESYSTEM\t\"ci-filesystem\"\n \n+#define SHARE_DIR_MASK             \"directory mask\"\n+#define SHARE_CREATE_MASK          \"create mask\"\n+#define SHARE_FORCE_CREATE_MODE    \"force create mode\"\n+#define SHARE_FORCE_DIR_MODE       \"force directory mode\"\n+\n /* defaults */\n \n #define SHARE_HOST_ALLOW_DEFAULT\tNULL\n@@ -103,6 +108,13 @@\n #define SHARE_BROWSEABLE_DEFAULT\tTrue\n #define SHARE_MAX_CONNECTIONS_DEFAULT\t0\n \n+#define SHARE_DIR_MASK_DEFAULT                   0755\n+#define SHARE_CREATE_MASK_DEFAULT                0744\n+#define SHARE_FORCE_CREATE_MODE_DEFAULT          0000\n+#define SHARE_FORCE_DIR_MODE_DEFAULT             0000\n+\n+\n+\n /* I'd like to see the following options go away\n  * and always use EAs and SECDESCs */\n #define SHARE_READONLY_DEFAULT\t\tTrue\n\nModified: branches/SAMBA_4_0/source/param/share_classic.c\n===================================================================\n--- branches/SAMBA_4_0/source/param/share_classic.c\t2007-07-04 03:25:44 UTC (rev 23695)\n+++ branches/SAMBA_4_0/source/param/share_classic.c\t2007-07-04 04:15:07 UTC (rev 23696)\n@@ -90,6 +90,9 @@\n \t\treturn lp_fstype(s->snum);\n \t}\n \n+\tDEBUG(0,(\"request for unknown share string option '%s'\\n\",\n+\t\t opt_name));\n+\n \treturn defval;\n }\n \n@@ -117,19 +120,33 @@\n \t}\n \n \tif (strcmp(opt_name, SHARE_CSC_POLICY) == 0) {\n-\t\tret = lp_csc_policy(s->snum);\n-\t\tif (ret == -1) {\n-\t\t\treturn defval;\n-\t\t}\n+\t\treturn lp_csc_policy(s->snum);\n \t}\n \n \tif (strcmp(opt_name, SHARE_MAX_CONNECTIONS) == 0) {\n-\t\tret = lp_max_connections(s->snum);\n-\t\tif (ret == -1) {\n-\t\t\treturn defval;\n-\t\t}\n+\t\treturn lp_max_connections(s->snum);\n \t}\n \n+\tif (strcmp(opt_name, SHARE_CREATE_MASK) == 0) {\n+\t\treturn lp_create_mask(s->snum);\n+\t}\n+\n+\tif (strcmp(opt_name, SHARE_DIR_MASK) == 0) {\n+\t\treturn lp_dir_mask(s->snum);\n+\t}\n+\n+\tif (strcmp(opt_name, SHARE_FORCE_DIR_MODE) == 0) {\n+\t\treturn lp_force_dir_mode(s->snum);\n+\t}\n+\n+\tif (strcmp(opt_name, SHARE_FORCE_CREATE_MODE) == 0) {\n+\t\treturn lp_force_create_mode(s->snum);\n+\t}\n+\n+\n+\tDEBUG(0,(\"request for unknown share int option '%s'\\n\",\n+\t\t opt_name));\n+\n \treturn defval;\n }\n \n@@ -193,6 +210,9 @@\n \t\treturn lp_ci_filesystem(s->snum);\n \t}\n \n+\tDEBUG(0,(\"request for unknown share bool option '%s'\\n\",\n+\t\t opt_name));\n+\n \treturn defval;\n }\n \n@@ -228,6 +248,9 @@\n \t\treturn lp_ntvfs_handler(s->snum);\n \t}\n \n+\tDEBUG(0,(\"request for unknown share list option '%s'\\n\",\n+\t\t opt_name));\n+\n \treturn NULL;\n }\n \n\n"}