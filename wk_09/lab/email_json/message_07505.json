{"category": "ham", "to_address": "\"Jose Quesada \" <quesada@gmail.com>", "from_address": "Martin Maechler <maechler@stat.math.ethz.ch>", "subject": "Re: [R] colSum() in Matrix objects", "body": "\nHi Jose,\n\n    Jose> I'd like to simply add column-wise using Matrix objects (Csparse).\n    Jose> It looks like one can apply mosty any base function to these objects  \n    Jose> (i.e., apply, colSums), but there is a nasty conversion to traditional  \n    Jose> matrix objects if one does that.\n\nnot in this case, see below.\n\n    Jose> Is there any workaround? I can see colSum listed in the help for Class  \ncolSums (final 's'!)\n\n    Jose> 'CsparseMatrix' , but I wonder whether I'm using the default colSums() or  \n    Jose> the one specific to CsparseMatrix...\n\n      #example\n      (z = Matrix(c(0,1,0,0), 10,10))\n      zr = rowSums(z)\n      class(zr) # numeric; I'd like it to be a CSparseMatrix object\n\n  selectMethod(\"colSums\", class(z))\n## or\n  showMethods(\"colSums\")\n\nboth show you that you are using the class specific one.\n\nHowever, why do you assume that colSums() should not return a\nnumeric vector?  From the idea that colSums() and rowSums()\nshould be fast versions of apply(., marg, sum),\nit must return a numeric vector, as it also does for\ntraditional matrices.\n\nAre your objects so huge that even a 1-row {or 1-column} sparse\nmatrix would save a lot?\n\nRegards,\nMartin Maechler, ETH Zurich\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}