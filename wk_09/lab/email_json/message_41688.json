{"category": "ham", "to_address": "perl6-compiler@perl.org", "from_address": "\"Chris Yocum\" <cyocum@gmail.com>", "subject": "Not Understanding TGE", "body": "Hi Everyone,\n    I am not sure if this is the correct list to post this problem to\nbut I will try here first.  I am having a problem with understanding\nTGE and I was hoping someone might be able to give me some help.  I am\nwriting a parrot version of 1964 BASIC using the compiler tools and I\nhave the PGE part nearly complete (there are a few things that I need\nto finish though) and I was looking forward to using TGE but I have\nbecome stuck.\n    My problem is that when I get through the first two parts of the\ntree, I come to a point where things come to a screeching halt because\nthe node (in Basic64::Grammar::statement) does not seem to be anything\nat all or anything that I can identify.  I know from the parse output\nthat Basic64::Grammar::statement is a ResizablePMCArray (size:1) but I\nam not sure how to reflect that in PIR or if that is even significant\nhere.  Underneath that are the linenumber and statement_type rules but\nI cannot seem to access them at all.\n    I apologize in advance if this is something simple but any help\nwould be greatly appreciated.\n\nSincerely,\nChris Yocum\n\ngrammar Basic64::ASTGrammar is TGE::Grammar;\n\ntransform past (ROOT) :language('PIR') {\n        .local pmc past\n        past = new 'PAST::Node'\n        past.'init'('node'=>node, 'name'=>'anon')\n\n        .local pmc cnode, cpast\n        cnode = node[\"program\"]\n        cpast = tree.'get'('past', cnode, 'Basic64::Grammar::statements')\n        past.'push'(cpast)\n        .return (past)\n}\n\ntransform past (Basic64::Grammar::statements) :language('PIR') {\n        .local pmc result, cnode, cpast\n        result = new 'PAST::Node'\n        result.'init'('node' => node)\n\n        cnode = node[\"statement\"]\n        cpast = tree.'get'('past', cnode, 'Basic64::Grammar::statement')\n        result.'push'(cpast)\n        .return (result)\n}\n\ntransform past (Basic64::Grammar::statement) :language('PIR') {\n        .local pmc result, cnode\n        result = new 'PAST::Node'\n        result.'init'('node'=>node)\n\n}\n\nHere is the output when run:\nNull PMC access in isa()\ncurrent instr.: 'parrot;PAST::Node;node' pc 194 (PAST/Node.pir:175)\ncalled from Sub 'parrot;PAST::Node;init' pc 96 (PAST/Node.pir:91)\ncalled from Sub 'parrot;Basic64::ASTGrammar;_Basic64::Grammar::statement_past' \\\npc 14733 (Basic64ASTGrammar.tg:29)\ncalled from Sub 'parrot;TGE::Tree;_eval_cell' pc 282 (TGE/Tree.pir:175)\ncalled from Sub 'parrot;TGE::Tree;get' pc 241 (TGE/Tree.pir:155)\ncalled from Sub 'parrot;Basic64::ASTGrammar;_Basic64::Grammar::statements_past'\\\n pc 14702 (Basic64ASTGrammar.tg:21)\ncalled from Sub 'parrot;TGE::Tree;_eval_cell' pc 282 (TGE/Tree.pir:175)\ncalled from Sub 'parrot;TGE::Tree;get' pc 241 (TGE/Tree.pir:155)\ncalled from Sub 'parrot;Basic64::ASTGrammar;_Basic64::Grammar::statements_past'\\\n pc 14702 (Basic64ASTGrammar.tg:21)\ncalled from Sub 'parrot;TGE::Tree;_eval_cell' pc 282 (TGE/Tree.pir:175)\ncalled from Sub 'parrot;TGE::Tree;get' pc 241 (TGE/Tree.pir:155)\ncalled from Sub 'parrot;Basic64::ASTGrammar;_ROOT_past' pc 14655 (Basic64ASTGra\\\nmmar.tg:10)\ncalled from Sub 'parrot;TGE::Tree;_eval_cell' pc 282 (TGE/Tree.pir:175)\ncalled from Sub 'parrot;TGE::Tree;get' pc 241 (TGE/Tree.pir:155)\ncalled from Sub 'parrot;HLLCompiler;compile' pc 343 (runtime/parrot/library/Par\\\nrot/HLLCompiler.pir:248)\ncalled from Sub 'parrot;HLLCompiler;eval' pc 500 (runtime/parrot/library/Parrot\\\n/HLLCompiler.pir:338)\ncalled from Sub 'parrot;HLLCompiler;evalfiles' pc 800 (runtime/parrot/library/P\\\narrot/HLLCompiler.pir:472)\ncalled from Sub 'parrot;HLLCompiler;command_line' pc 947 (runtime/parrot/librar\\\ny/Parrot/HLLCompiler.pir:535)\ncalled from Sub 'parrot;Basic64;main' pc 67 (Basic64Main.pir:24)\n\n\nHere is the parse output for reference:\n\n\"parse\" => PMC 'Basic64::Grammar' => \"10 let foo = 5;\" @ 0 {\n     => PMC 'Basic64::Grammar' => \"10 let foo = 5;\" @ 0 {\n         => PMC 'Basic64::Grammar' => \"10 let foo = 5;\" @ 0 {\n             => ResizablePMCArray (size:1) [\n                PMC 'Basic64::Grammar' => \"10 let foo = 5\" @ 0 {\n                     => PMC 'Basic64::Grammar' => \"10\" @ 0 {\n                         => ResizablePMCArray (size:2) [\n                            PMC 'Basic64::Grammar' => \"1\" @ 0,\n                            PMC 'Basic64::Grammar' => \"0\" @ 1\n                        ]\n                    }\n                     => PMC 'Basic64::Grammar' => \"let foo = 5\"\\\n @ 3 {\n                         => PMC 'Basic64::Grammar' => \"let foo =\\\n 5\" @ 3 {\n                             => PMC 'Basic64::Grammar' => \"foo = 5\" @ 7 {\n                                 => PMC 'PGE::Match' => \"=\" @ 11 {\n                                     => \"infix:=\"\n                                    [0] => PMC 'Basic64::Grammar' => \"foo\" @ 7 \\\n{\n                                         => PMC 'Basic64::Grammar' => \"\\\nfoo\" @ 7\n                                         => \"term:\"\n                                   }\n                                    [1] => PMC 'Basic64::Grammar' => \"5\" @ 13 {\n                                         => PMC 'Basic64::Grammar' => \\\n\"5\" @ 13\n                                         => \"term:\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n\n"}