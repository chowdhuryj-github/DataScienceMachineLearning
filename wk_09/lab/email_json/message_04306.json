{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "brian d foy <brian.d.foy@gmail.com>", "subject": "What should file test operators return?", "body": "At the moment the file test operators that I expect to return true or\nfalse do, but the true is the filename. I expected a boolean, for no\nother reason than Perl 6 has them so it might as well use them. The\nsection on Smart Matching in S03 says that the ~~ doesn't have to\nreturn a boolean,  but aside from things liek :s, :M, and :A, what good\nwould it be not to? I'm happy to update S16 with whatever the answer\nis. :)\n\n\nHere's my code example that motivates this question. For a Llama6\nexercise with file test operators, I wanted to create a little table:\n\n   for @files -> $file {\n      printf \"%-70s  %s  %s  %s\\n\",\n         $file,\n         $file ~~ :r,\n         $file ~~ :w,\n         $file ~~ :x;      \n      }\n\nI get the filename for each part:\n\n   foo                   foo  foo  \n\nWhich I wanted to work like this perl5 (not that I care if it's\ndifferent, I just have to explain it to reader)\n\n   #!/usr/bin/perl5\n   foreach ( glob( \"*\" ) )\n      {\n      printf \"%30s %s %s %s\\n\", $_, -r, -w, -x\n      }\n\n\nWith the Pugs 6.2.13 (r15868), only the ~~ form seems to work, but is\nthat going to be any different than the other two forms?\n\n\n\n\npugs> ( \"Talks\" ~~ :r ).say\nTalks\nBool::True\npugs> ( \"Talks\" ~~ :d ).say\nTalks\nBool::True\n\npugs> \"Talks\".TEST(:s).say\n*** No such method in class Str: &TEST\n    at  line 1, column 1-21\n\npugs> \"Talks\".:s\nInternal error while running expression:\n*** \n    Unexpected \":s\"\n    expecting \".\", \"\\187\", \">>\", \"=\", operator name, qualified\nidentifier, variable name, \"...\", \"--\", \"++\", \"i\", array subscript,\nhash subscript or code subscript    at  line 1, column 9\npugs> \"Talks\".\":d\"\nInternal error while running expression:\n*** \n    Unexpected \"\\\":\"\n    expecting \".\", \"\\187\", \">>\", \"=\", operator name, qualified\nidentifier, variable name, \"...\", \"--\", \"++\", \"i\", array subscript,\nhash subscript or code subscript    at  line 1, column 9\n\n"}