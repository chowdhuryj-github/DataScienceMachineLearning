{"category": "ham", "to_address": "perl6-language@perl.org, perl6-compiler@perl.org", "from_address": "\"Flavio S. Glock\" <fglock@gmail.com>", "subject": "Request for kp6 compiler architecture review", "body": "I'm working on the development plan for the next generation of the\nPerl6-in-Perl6 compiler \"kp6\".  kp6 is implemented in mp6, a basic\nversion of Perl 6 which is written in mp6 itself, and bootstrapped\non Perl 5.\n\nkp6, while incomplete, runs today and can already parse and compile\na subset of Perl 6.\n\n\n* Accessing kp6:\n\n\nThe kp6 directory (Pugs /v6/v6-KindaPerl6/) contains the tools you\nneed for bootstrapping the compiler and for running programs.\n\nCompiler source code can be compiled with:\n\n $ perl mp6.pl < lib/Some/File.pl > lib5/Some/File.pl\n\nPrograms written in Perl 6 can be compiled and run with:\n\n # run a test\n $ perl kp6-perl5.pl < t/kp6/01-tap.t | perl -Ilib5\n\n # show the compiled code\n $ perl kp6-perl5.pl < hello.pl | perltidy\n\n # show the AST\n $ perl kp6-perl5.pl --ast < hello.pl | perltidy\n\nThere are shortcut scripts for some common operations:\n\n $ perl recompile.pl # recompiles all kp6 source\n\n $ sh run_tests.sh # runs all kp6 tests\n\nOnly the Perl 5 backend is fully implemented; Parrot (through\nPerl6-in-Parrot), JVM (through Groovy), and Python (possibly\nthrough RPython) are experimental.\n\n\n* Development Plan:\n\n\nThe most up-to-date document for the kp6 architecture is this\ndrawing:\n\n http://svn.pugscode.org/pugs/v6/docs/kp6.jpg\n\n # simplified version\n http://svn.pugscode.org/pugs/v6/docs/kp6-overview.jpg\n\nkp6 currently implements the compiler almost exactly as drawn.\n\nThe current development plan can be accessed from here:\n\n http://pugs.blogs.com/pugs/2007/06/kindaperl6_proj.html\n\nI'm looking for comments on how to improve the compiler internals.\n\nFor example:\n\n- One of my basic design principles was to implement AST\ntransformations as \"pluggable\" modules, using a visitor pattern.\nDo you see potential problems with this approach?\n\n- BEGIN block side-effects are recorded in a hash. This adds an\noverhead to all assignment operations. Do you see a better way to\ncheck for side-effects?\n\nI'd appreciate if I can get a compiler architecture review.\n\nI'm available on #perl6 in freenode (my timezone is -03:00).\nYou can find me there as 'fglock'.\nPlease share your comments either here on the mailinglist or via IRC.\nI look forward to your feedback\n\nthanks!\n- Flavio S. Glock (fglock)\n\n"}