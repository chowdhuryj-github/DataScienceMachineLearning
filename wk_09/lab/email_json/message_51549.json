{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: the Database is not updated", "body": "On Jun 20, 2:23 pm, mykl...@gmail.com (Aruna Goke) wrote:\n> Can someone put me thru this?\n>\n> when I run the script..it bring no error..\n\nThat's because you never asked it to give you any errors.  That's\nsomething of a Perl trait - it generally doesn't tell you anything's\nwrong unless you ask it to tell you.\n\n> however, the table radacct is not updated.\n>\n> what have i done wrong.\n>\n\n> $dbh = DBI->connect($data_source, $user, $pass);\n\nYou should pass a fourth argument to connect().  That argument is a\nreference to a hash of the options you'd like to enable.\nSpecifically, you should enable RaiseError, which tells DBI to die\nwith an error any time there's a database error.\n\nSo:\nmy $dbh = DBI->connect( $data_source, $user, $pass, { RaiseError =>\n1 } );\n\n(I also usually recomment specifying AutoCommit as either 0 or 1,\ndepending on if you want the database to commit after every insert/\nupdate/delete, because the default can change between different\ndatabase systems, different versions of the database, and different\nversions of DBD::*)\n\n> $sql = \"UPDATE radacct SET AcctSessionTime = ?, TrunkIdOut = ?,\n> TrunkIdIn = ? where AcctUniqueId = ?\";\n> $sth = $dbh->prepare($sql);\n\nBecause you've now enabled RaiseError, if prepare() has an error, Perl\nwill now exit with an error.  If you don't enable RaiseError, you must\ncheck prepare() explicitly:\nmy $sth = $dbh->prepare($sql) or\n   die \"Error preparing <<$sql>>: $DBI::errstr\";\n\n> #split the file into variables\n>    @x =(split/,/)[0,1,2,3,4,5,6];\n\nmy @x = (split /,/)[0..6];\nor\nmy @x;\n@x[0..6] = split /,/;\n\n>   $sth->execute($x[2], $x[5], $x[4], $x[6]);\n\n$sth->execute(@x[2,5,4,6]);\n\nAnd, again, if you don't enable RaiseError, you must check execute()\nfor errors explicitly:\n$sth->execute(@x[2,5,4,6]) or\n   die \"Error executing <<$sth->{Statement}>> with values @x[2,5,4,6]:\n$DBI::errstr\";\n\nThis might not be necessary for the RDMS you use, but I generally end\nmy database-driven scripts with this block:\n\nEND {\n   if ($?) {\n        print \"Exiting with error, rolling back data!\\n\";\n        $dbh->rollback();\n   } else {\n        print \"Exiting successfully, committing data\\n\";\n        $dbh->commit();\n   }\n   $dbh->disconnect();\n}\n\nHope this helps,\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}