{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jra@samba.org", "subject": "svn commit: samba r23005 - in branches: SAMBA_3_0/source\n\tSAMBA_3_0/source/lib SAMBA_3_0/source/passdb\n\tSAMBA_3_0/source/utils SAMBA_3_0_25/source\n\tSAMBA_3_0_25/source/lib SAMBA_3_0_25/source/passdb\n\tSAMBA_3_0_25/source/utils SAMBA_3_0_26/source\n\tSAMBA_3_0_26/source/lib SAMBA_3_0_26/source/passdb\n\tSAMBA_3_0_26/source/utils", "body": "Author: jra\nDate: 2007-05-18 23:38:56 +0000 (Fri, 18 May 2007)\nNew Revision: 23005\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23005\n\nLog:\nIf we're running on a system where time_t is 8 bytes\nwe have to take care to preserve the \"special\" values\nfor Windows of 0x80000000 and 0x7FFFFFFF when casting\nbetween time_t and uint32. Add conversion functions\n(and use them).\nJeremy.\n\nModified:\n   branches/SAMBA_3_0/source/configure.in\n   branches/SAMBA_3_0/source/lib/time.c\n   branches/SAMBA_3_0/source/passdb/passdb.c\n   branches/SAMBA_3_0/source/utils/pdbedit.c\n   branches/SAMBA_3_0_25/source/configure.in\n   branches/SAMBA_3_0_25/source/lib/time.c\n   branches/SAMBA_3_0_25/source/passdb/passdb.c\n   branches/SAMBA_3_0_25/source/utils/pdbedit.c\n   branches/SAMBA_3_0_26/source/configure.in\n   branches/SAMBA_3_0_26/source/lib/time.c\n   branches/SAMBA_3_0_26/source/passdb/passdb.c\n   branches/SAMBA_3_0_26/source/utils/pdbedit.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/configure.in\n===================================================================\n--- branches/SAMBA_3_0/source/configure.in\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0/source/configure.in\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -2079,6 +2079,14 @@\n fi\n \n \n+AC_CACHE_CHECK([for 64 bit time_t],samba_cv_SIZEOF_TIME_T,[\n+AC_TRY_RUN([#include \n+main() { exit((sizeof(time_t) == 8) ? 0 : 1); }],\n+samba_cv_SIZEOF_TIME_T=yes,samba_cv_SIZEOF_TIME_T=no,samba_cv_SIZEOF_TIME_T=cross)])\n+if test x\"$samba_cv_SIZEOF_TIME_T\" = x\"yes\"; then\n+    AC_DEFINE(SIZEOF_TIME_T,8,[The size of the 'time_t' type])\n+fi\n+\n AC_CACHE_CHECK([for 64 bit off_t],samba_cv_SIZEOF_OFF_T,[\n AC_TRY_RUN([#include \n #include \n\nModified: branches/SAMBA_3_0/source/lib/time.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/time.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0/source/lib/time.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -554,6 +554,37 @@\n \t\t  ((TIME_FIXUP_CONSTANT_INT + (uint64_t)tv->tv_sec) * 1000000));\n }\n \n+/**************************************************************\n+ Handle conversions between time_t and uint32, taking care to\n+ preserve the \"special\" values.\n+**************************************************************/\n+\n+uint32 convert_time_t_to_uint32(time_t t)\n+{\n+#if (defined(SIZEOF_TIME_T) && (SIZEOF_TIME_T == 8))\n+\t/* time_t is 64-bit. */\n+\tif (t == 0x8000000000000000LL) {\n+\t\treturn 0x80000000;\n+\t} else if (t == 0x7FFFFFFFFFFFFFFFLL) {\n+\t\treturn 0x7FFFFFFF;\n+\t}\n+#endif\n+\treturn (uint32)t;\n+}\n+\n+time_t convert_uint32_to_time_t(uint32 u)\n+{\n+#if (defined(SIZEOF_TIME_T) && (SIZEOF_TIME_T == 8))\n+\t/* time_t is 64-bit. */\n+\tif (u == 0x80000000) {\n+\t\treturn (time_t)0x8000000000000000LL;\n+\t} else if (u == 0x7FFFFFFF) {\n+\t\treturn (time_t)0x7FFFFFFFFFFFFFFFLL) {\n+\t}\n+#endif\n+\treturn (time_t)u;\n+}\n+\n /*******************************************************************\n  Yield the difference between *A and *B, in seconds, ignoring leap seconds.\n ********************************************************************/\n\nModified: branches/SAMBA_3_0/source/passdb/passdb.c\n===================================================================\n--- branches/SAMBA_3_0/source/passdb/passdb.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0/source/passdb/passdb.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -930,13 +930,13 @@\n \t\tgoto done;\n \t}\n \n-\tpdb_set_logon_time(sampass, logon_time, PDB_SET);\n-\tpdb_set_logoff_time(sampass, logoff_time, PDB_SET);\n-\tpdb_set_kickoff_time(sampass, kickoff_time, PDB_SET);\n-\tpdb_set_bad_password_time(sampass, bad_password_time, PDB_SET);\n-\tpdb_set_pass_can_change_time(sampass, pass_can_change_time, PDB_SET);\n-\tpdb_set_pass_must_change_time(sampass, pass_must_change_time, PDB_SET);\n-\tpdb_set_pass_last_set_time(sampass, pass_last_set_time, PDB_SET);\n+\tpdb_set_logon_time(sampass, convert_uint32_to_time_t(logon_time), PDB_SET);\n+\tpdb_set_logoff_time(sampass, convert_uint32_to_time_t(logoff_time), PDB_SET);\n+\tpdb_set_kickoff_time(sampass, convert_uint32_to_time_t(kickoff_time), PDB_SET);\n+\tpdb_set_bad_password_time(sampass, convert_uint32_to_time_t(bad_password_time), PDB_SET);\n+\tpdb_set_pass_can_change_time(sampass, convert_uint32_to_time_t(pass_can_change_time), PDB_SET);\n+\tpdb_set_pass_must_change_time(sampass, convert_uint32_to_time_t(pass_must_change_time), PDB_SET);\n+\tpdb_set_pass_last_set_time(sampass, convert_uint32_to_time_t(pass_last_set_time), PDB_SET);\n \n \tpdb_set_username(sampass, username, PDB_SET); \n \tpdb_set_domain(sampass, domain, PDB_SET);\n@@ -1118,13 +1118,13 @@\n \t*buf = NULL;\n \tbuflen = 0;\n \n-\tlogon_time = (uint32)pdb_get_logon_time(sampass);\n-\tlogoff_time = (uint32)pdb_get_logoff_time(sampass);\n-\tkickoff_time = (uint32)pdb_get_kickoff_time(sampass);\n-\tbad_password_time = (uint32)pdb_get_bad_password_time(sampass);\n-\tpass_can_change_time = (uint32)pdb_get_pass_can_change_time_noncalc(sampass);\n-\tpass_must_change_time = (uint32)pdb_get_pass_must_change_time(sampass);\n-\tpass_last_set_time = (uint32)pdb_get_pass_last_set_time(sampass);\n+\tlogon_time = convert_time_t_to_uint32(pdb_get_logon_time(sampass));\n+\tlogoff_time = convert_time_t_to_uint32(pdb_get_logoff_time(sampass));\n+\tkickoff_time = convert_time_t_to_uint32(pdb_get_kickoff_time(sampass));\n+\tbad_password_time = convert_time_t_to_uint32(pdb_get_bad_password_time(sampass));\n+\tpass_can_change_time = convert_time_t_to_uint32(pdb_get_pass_can_change_time_noncalc(sampass));\n+\tpass_must_change_time = convert_time_t_to_uint32(pdb_get_pass_must_change_time(sampass));\n+\tpass_last_set_time = convert_time_t_to_uint32(pdb_get_pass_last_set_time(sampass));\n \n \tuser_rid = pdb_get_user_rid(sampass);\n \tgroup_rid = pdb_get_group_rid(sampass);\n@@ -1408,7 +1408,7 @@\n \tLastBadPassword = pdb_get_bad_password_time(sampass);\n \tDEBUG(7, (\"LastBadPassword=%d, resettime=%d, current time=%d.\\n\", \n \t\t   (uint32) LastBadPassword, resettime, (uint32)time(NULL)));\n-\tif (time(NULL) > (LastBadPassword + (time_t)resettime*60)){\n+\tif (time(NULL) > (LastBadPassword + convert_uint32_to_time_t(resettime)*60)){\n \t\tpdb_set_bad_password_count(sampass, 0, PDB_CHANGED);\n \t\tpdb_set_bad_password_time(sampass, 0, PDB_CHANGED);\n \t\tif (updated) {\n@@ -1462,7 +1462,7 @@\n \t\treturn True;\n \t}\n \n-\tif ((time(NULL) > (LastBadPassword + (time_t) duration * 60))) {\n+\tif ((time(NULL) > (LastBadPassword + convert_uint32_to_time_t(duration) * 60))) {\n \t\tpdb_set_acct_ctrl(sampass,\n \t\t\t\t  pdb_get_acct_ctrl(sampass) & ~ACB_AUTOLOCK,\n \t\t\t\t  PDB_CHANGED);\n\nModified: branches/SAMBA_3_0/source/utils/pdbedit.c\n===================================================================\n--- branches/SAMBA_3_0/source/utils/pdbedit.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0/source/utils/pdbedit.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -285,14 +285,14 @@\n \t\t       lm_passwd,\n \t\t       nt_passwd,\n \t\t       pdb_encode_acct_ctrl(pdb_get_acct_ctrl(sam_pwent),NEW_PW_FORMAT_SPACE_PADDED_LEN),\n-\t\t       (uint32)pdb_get_pass_last_set_time(sam_pwent));\n+\t\t       (uint32)convert_time_t_to_uint32(pdb_get_pass_last_set_time(sam_pwent)));\n \t} else {\n \t\tuid = nametouid(pdb_get_username(sam_pwent));\n \t\tprintf (\"%s:%lu:%s\\n\", pdb_get_username(sam_pwent), (unsigned long)uid,\t\n \t\t\tpdb_get_fullname(sam_pwent));\n \t}\n \n-\treturn 0;\t\n+\treturn 0;\n }\n \n /*********************************************************\n\nModified: branches/SAMBA_3_0_25/source/configure.in\n===================================================================\n--- branches/SAMBA_3_0_25/source/configure.in\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0_25/source/configure.in\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -1936,6 +1936,14 @@\n fi\n \n \n+AC_CACHE_CHECK([for 64 bit time_t],samba_cv_SIZEOF_TIME_T,[\n+AC_TRY_RUN([#include \n+main() { exit((sizeof(time_t) == 8) ? 0 : 1); }],\n+samba_cv_SIZEOF_TIME_T=yes,samba_cv_SIZEOF_TIME_T=no,samba_cv_SIZEOF_TIME_T=cross)])\n+if test x\"$samba_cv_SIZEOF_TIME_T\" = x\"yes\"; then\n+    AC_DEFINE(SIZEOF_TIME_T,8,[The size of the 'time_t' type])\n+fi\n+\n AC_CACHE_CHECK([for 64 bit off_t],samba_cv_SIZEOF_OFF_T,[\n AC_TRY_RUN([#include \n #include \n\nModified: branches/SAMBA_3_0_25/source/lib/time.c\n===================================================================\n--- branches/SAMBA_3_0_25/source/lib/time.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0_25/source/lib/time.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -554,6 +554,37 @@\n \t\t  ((TIME_FIXUP_CONSTANT_INT + (uint64_t)tv->tv_sec) * 1000000));\n }\n \n+/**************************************************************\n+ Handle conversions between time_t and uint32, taking care to\n+ preserve the \"special\" values.\n+**************************************************************/\n+\n+uint32 convert_time_t_to_uint32(time_t t)\n+{\n+#if (defined(SIZEOF_TIME_T) && (SIZEOF_TIME_T == 8))\n+\t/* time_t is 64-bit. */\n+\tif (t == 0x8000000000000000LL) {\n+\t\treturn 0x80000000;\n+\t} else if (t == 0x7FFFFFFFFFFFFFFFLL) {\n+\t\treturn 0x7FFFFFFF;\n+\t}\n+#endif\n+\treturn (uint32)t;\n+}\n+\n+time_t convert_uint32_to_time_t(uint32 u)\n+{\n+#if (defined(SIZEOF_TIME_T) && (SIZEOF_TIME_T == 8))\n+\t/* time_t is 64-bit. */\n+\tif (u == 0x80000000) {\n+\t\treturn (time_t)0x8000000000000000LL;\n+\t} else if (u == 0x7FFFFFFF) {\n+\t\treturn (time_t)0x7FFFFFFFFFFFFFFFLL) {\n+\t}\n+#endif\n+\treturn (time_t)u;\n+}\n+\n /*******************************************************************\n  Yield the difference between *A and *B, in seconds, ignoring leap seconds.\n ********************************************************************/\n\nModified: branches/SAMBA_3_0_25/source/passdb/passdb.c\n===================================================================\n--- branches/SAMBA_3_0_25/source/passdb/passdb.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0_25/source/passdb/passdb.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -914,13 +914,13 @@\n \t\tgoto done;\n \t}\n \n-\tpdb_set_logon_time(sampass, logon_time, PDB_SET);\n-\tpdb_set_logoff_time(sampass, logoff_time, PDB_SET);\n-\tpdb_set_kickoff_time(sampass, kickoff_time, PDB_SET);\n-\tpdb_set_bad_password_time(sampass, bad_password_time, PDB_SET);\n-\tpdb_set_pass_can_change_time(sampass, pass_can_change_time, PDB_SET);\n-\tpdb_set_pass_must_change_time(sampass, pass_must_change_time, PDB_SET);\n-\tpdb_set_pass_last_set_time(sampass, pass_last_set_time, PDB_SET);\n+\tpdb_set_logon_time(sampass, convert_uint32_to_time_t(logon_time), PDB_SET);\n+\tpdb_set_logoff_time(sampass, convert_uint32_to_time_t(logoff_time), PDB_SET);\n+\tpdb_set_kickoff_time(sampass, convert_uint32_to_time_t(kickoff_time), PDB_SET);\n+\tpdb_set_bad_password_time(sampass, convert_uint32_to_time_t(bad_password_time), PDB_SET);\n+\tpdb_set_pass_can_change_time(sampass, convert_uint32_to_time_t(pass_can_change_time), PDB_SET);\n+\tpdb_set_pass_must_change_time(sampass, convert_uint32_to_time_t(pass_must_change_time), PDB_SET);\n+\tpdb_set_pass_last_set_time(sampass, convert_uint32_to_time_t(pass_last_set_time), PDB_SET);\n \n \tpdb_set_username(sampass, username, PDB_SET); \n \tpdb_set_domain(sampass, domain, PDB_SET);\n@@ -1102,13 +1102,13 @@\n \t*buf = NULL;\n \tbuflen = 0;\n \n-\tlogon_time = (uint32)pdb_get_logon_time(sampass);\n-\tlogoff_time = (uint32)pdb_get_logoff_time(sampass);\n-\tkickoff_time = (uint32)pdb_get_kickoff_time(sampass);\n-\tbad_password_time = (uint32)pdb_get_bad_password_time(sampass);\n-\tpass_can_change_time = (uint32)pdb_get_pass_can_change_time_noncalc(sampass);\n-\tpass_must_change_time = (uint32)pdb_get_pass_must_change_time(sampass);\n-\tpass_last_set_time = (uint32)pdb_get_pass_last_set_time(sampass);\n+\tlogon_time = convert_time_t_to_uint32(pdb_get_logon_time(sampass));\n+\tlogoff_time = convert_time_t_to_uint32(pdb_get_logoff_time(sampass));\n+\tkickoff_time = convert_time_t_to_uint32(pdb_get_kickoff_time(sampass));\n+\tbad_password_time = convert_time_t_to_uint32(pdb_get_bad_password_time(sampass));\n+\tpass_can_change_time = convert_time_t_to_uint32(pdb_get_pass_can_change_time_noncalc(sampass));\n+\tpass_must_change_time = convert_time_t_to_uint32(pdb_get_pass_must_change_time(sampass));\n+\tpass_last_set_time = convert_time_t_to_uint32(pdb_get_pass_last_set_time(sampass));\n \n \tuser_rid = pdb_get_user_rid(sampass);\n \tgroup_rid = pdb_get_group_rid(sampass);\n@@ -1392,7 +1392,7 @@\n \tLastBadPassword = pdb_get_bad_password_time(sampass);\n \tDEBUG(7, (\"LastBadPassword=%d, resettime=%d, current time=%d.\\n\", \n \t\t   (uint32) LastBadPassword, resettime, (uint32)time(NULL)));\n-\tif (time(NULL) > (LastBadPassword + (time_t)resettime*60)){\n+\tif (time(NULL) > (LastBadPassword + convert_uint32_to_time_t(resettime)*60)){\n \t\tpdb_set_bad_password_count(sampass, 0, PDB_CHANGED);\n \t\tpdb_set_bad_password_time(sampass, 0, PDB_CHANGED);\n \t\tif (updated) {\n@@ -1445,7 +1445,7 @@\n \t\t\treturn True;\n \t}\n \n-\tif ((time(NULL) > (LastBadPassword + (time_t) duration * 60))) {\n+\tif ((time(NULL) > (LastBadPassword + convert_uint32_to_time_t(duration) * 60))) {\n \t\tpdb_set_acct_ctrl(sampass,\n \t\t\t\t  pdb_get_acct_ctrl(sampass) & ~ACB_AUTOLOCK,\n \t\t\t\t  PDB_CHANGED);\n\nModified: branches/SAMBA_3_0_25/source/utils/pdbedit.c\n===================================================================\n--- branches/SAMBA_3_0_25/source/utils/pdbedit.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0_25/source/utils/pdbedit.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -285,14 +285,14 @@\n \t\t       lm_passwd,\n \t\t       nt_passwd,\n \t\t       pdb_encode_acct_ctrl(pdb_get_acct_ctrl(sam_pwent),NEW_PW_FORMAT_SPACE_PADDED_LEN),\n-\t\t       (uint32)pdb_get_pass_last_set_time(sam_pwent));\n+\t\t       (uint32)convert_time_t_to_uint32(pdb_get_pass_last_set_time(sam_pwent)));\n \t} else {\n \t\tuid = nametouid(pdb_get_username(sam_pwent));\n \t\tprintf (\"%s:%lu:%s\\n\", pdb_get_username(sam_pwent), (unsigned long)uid,\t\n \t\t\tpdb_get_fullname(sam_pwent));\n \t}\n \n-\treturn 0;\t\n+\treturn 0;\n }\n \n /*********************************************************\n\nModified: branches/SAMBA_3_0_26/source/configure.in\n===================================================================\n--- branches/SAMBA_3_0_26/source/configure.in\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0_26/source/configure.in\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -1943,6 +1943,14 @@\n fi\n \n \n+AC_CACHE_CHECK([for 64 bit time_t],samba_cv_SIZEOF_TIME_T,[\n+AC_TRY_RUN([#include \n+main() { exit((sizeof(time_t) == 8) ? 0 : 1); }],\n+samba_cv_SIZEOF_TIME_T=yes,samba_cv_SIZEOF_TIME_T=no,samba_cv_SIZEOF_TIME_T=cross)])\n+if test x\"$samba_cv_SIZEOF_TIME_T\" = x\"yes\"; then\n+    AC_DEFINE(SIZEOF_TIME_T,8,[The size of the 'time_t' type])\n+fi\n+\n AC_CACHE_CHECK([for 64 bit off_t],samba_cv_SIZEOF_OFF_T,[\n AC_TRY_RUN([#include \n #include \n\nModified: branches/SAMBA_3_0_26/source/lib/time.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/time.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0_26/source/lib/time.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -554,6 +554,37 @@\n \t\t  ((TIME_FIXUP_CONSTANT_INT + (uint64_t)tv->tv_sec) * 1000000));\n }\n \n+/**************************************************************\n+ Handle conversions between time_t and uint32, taking care to\n+ preserve the \"special\" values.\n+**************************************************************/\n+\n+uint32 convert_time_t_to_uint32(time_t t)\n+{\n+#if (defined(SIZEOF_TIME_T) && (SIZEOF_TIME_T == 8))\n+\t/* time_t is 64-bit. */\n+\tif (t == 0x8000000000000000LL) {\n+\t\treturn 0x80000000;\n+\t} else if (t == 0x7FFFFFFFFFFFFFFFLL) {\n+\t\treturn 0x7FFFFFFF;\n+\t}\n+#endif\n+\treturn (uint32)t;\n+}\n+\n+time_t convert_uint32_to_time_t(uint32 u)\n+{\n+#if (defined(SIZEOF_TIME_T) && (SIZEOF_TIME_T == 8))\n+\t/* time_t is 64-bit. */\n+\tif (u == 0x80000000) {\n+\t\treturn (time_t)0x8000000000000000LL;\n+\t} else if (u == 0x7FFFFFFF) {\n+\t\treturn (time_t)0x7FFFFFFFFFFFFFFFLL) {\n+\t}\n+#endif\n+\treturn (time_t)u;\n+}\n+\n /*******************************************************************\n  Yield the difference between *A and *B, in seconds, ignoring leap seconds.\n ********************************************************************/\n\nModified: branches/SAMBA_3_0_26/source/passdb/passdb.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/passdb/passdb.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0_26/source/passdb/passdb.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -914,13 +914,13 @@\n \t\tgoto done;\n \t}\n \n-\tpdb_set_logon_time(sampass, logon_time, PDB_SET);\n-\tpdb_set_logoff_time(sampass, logoff_time, PDB_SET);\n-\tpdb_set_kickoff_time(sampass, kickoff_time, PDB_SET);\n-\tpdb_set_bad_password_time(sampass, bad_password_time, PDB_SET);\n-\tpdb_set_pass_can_change_time(sampass, pass_can_change_time, PDB_SET);\n-\tpdb_set_pass_must_change_time(sampass, pass_must_change_time, PDB_SET);\n-\tpdb_set_pass_last_set_time(sampass, pass_last_set_time, PDB_SET);\n+\tpdb_set_logon_time(sampass, convert_uint32_to_time_t(logon_time), PDB_SET);\n+\tpdb_set_logoff_time(sampass, convert_uint32_to_time_t(logoff_time), PDB_SET);\n+\tpdb_set_kickoff_time(sampass, convert_uint32_to_time_t(kickoff_time), PDB_SET);\n+\tpdb_set_bad_password_time(sampass, convert_uint32_to_time_t(bad_password_time), PDB_SET);\n+\tpdb_set_pass_can_change_time(sampass, convert_uint32_to_time_t(pass_can_change_time), PDB_SET);\n+\tpdb_set_pass_must_change_time(sampass, convert_uint32_to_time_t(pass_must_change_time), PDB_SET);\n+\tpdb_set_pass_last_set_time(sampass, convert_uint32_to_time_t(pass_last_set_time), PDB_SET);\n \n \tpdb_set_username(sampass, username, PDB_SET); \n \tpdb_set_domain(sampass, domain, PDB_SET);\n@@ -1102,13 +1102,13 @@\n \t*buf = NULL;\n \tbuflen = 0;\n \n-\tlogon_time = (uint32)pdb_get_logon_time(sampass);\n-\tlogoff_time = (uint32)pdb_get_logoff_time(sampass);\n-\tkickoff_time = (uint32)pdb_get_kickoff_time(sampass);\n-\tbad_password_time = (uint32)pdb_get_bad_password_time(sampass);\n-\tpass_can_change_time = (uint32)pdb_get_pass_can_change_time_noncalc(sampass);\n-\tpass_must_change_time = (uint32)pdb_get_pass_must_change_time(sampass);\n-\tpass_last_set_time = (uint32)pdb_get_pass_last_set_time(sampass);\n+\tlogon_time = convert_time_t_to_uint32(pdb_get_logon_time(sampass));\n+\tlogoff_time = convert_time_t_to_uint32(pdb_get_logoff_time(sampass));\n+\tkickoff_time = convert_time_t_to_uint32(pdb_get_kickoff_time(sampass));\n+\tbad_password_time = convert_time_t_to_uint32(pdb_get_bad_password_time(sampass));\n+\tpass_can_change_time = convert_time_t_to_uint32(pdb_get_pass_can_change_time_noncalc(sampass));\n+\tpass_must_change_time = convert_time_t_to_uint32(pdb_get_pass_must_change_time(sampass));\n+\tpass_last_set_time = convert_time_t_to_uint32(pdb_get_pass_last_set_time(sampass));\n \n \tuser_rid = pdb_get_user_rid(sampass);\n \tgroup_rid = pdb_get_group_rid(sampass);\n@@ -1392,7 +1392,7 @@\n \tLastBadPassword = pdb_get_bad_password_time(sampass);\n \tDEBUG(7, (\"LastBadPassword=%d, resettime=%d, current time=%d.\\n\", \n \t\t   (uint32) LastBadPassword, resettime, (uint32)time(NULL)));\n-\tif (time(NULL) > (LastBadPassword + (time_t)resettime*60)){\n+\tif (time(NULL) > (LastBadPassword + convert_uint32_to_time_t(resettime)*60)){\n \t\tpdb_set_bad_password_count(sampass, 0, PDB_CHANGED);\n \t\tpdb_set_bad_password_time(sampass, 0, PDB_CHANGED);\n \t\tif (updated) {\n@@ -1445,7 +1445,7 @@\n \t\t\treturn True;\n \t}\n \n-\tif ((time(NULL) > (LastBadPassword + (time_t) duration * 60))) {\n+\tif ((time(NULL) > (LastBadPassword + convert_uint32_to_time_t(duration) * 60))) {\n \t\tpdb_set_acct_ctrl(sampass,\n \t\t\t\t  pdb_get_acct_ctrl(sampass) & ~ACB_AUTOLOCK,\n \t\t\t\t  PDB_CHANGED);\n\nModified: branches/SAMBA_3_0_26/source/utils/pdbedit.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/utils/pdbedit.c\t2007-05-18 20:57:01 UTC (rev 23004)\n+++ branches/SAMBA_3_0_26/source/utils/pdbedit.c\t2007-05-18 23:38:56 UTC (rev 23005)\n@@ -285,14 +285,14 @@\n \t\t       lm_passwd,\n \t\t       nt_passwd,\n \t\t       pdb_encode_acct_ctrl(pdb_get_acct_ctrl(sam_pwent),NEW_PW_FORMAT_SPACE_PADDED_LEN),\n-\t\t       (uint32)pdb_get_pass_last_set_time(sam_pwent));\n+\t\t       (uint32)convert_time_t_to_uint32(pdb_get_pass_last_set_time(sam_pwent)));\n \t} else {\n \t\tuid = nametouid(pdb_get_username(sam_pwent));\n \t\tprintf (\"%s:%lu:%s\\n\", pdb_get_username(sam_pwent), (unsigned long)uid,\t\n \t\t\tpdb_get_fullname(sam_pwent));\n \t}\n \n-\treturn 0;\t\n+\treturn 0;\n }\n \n /*********************************************************\n\n"}