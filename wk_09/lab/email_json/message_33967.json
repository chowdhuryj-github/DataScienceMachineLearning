{"category": "ham", "to_address": "perl6-internals@perl.org, Mark Glines <mark@glines.org>", "from_address": "James E Keenan <jkeen@verizon.net>", "subject": "Re: POD Coverage ", "body": "Mark Glines wrote:\n\n> \n> Ok.  Thanks for the feedback.  Lets see what I can do with it...\n> \n> First.  Frankly, I don't care about the *style* of POD in use, just that\n> there *is* some.  \"Well-formedness\" for me comes down to parsability,\n> not style.  So Perl::Critic can GTFOMI.  :)  And there already is a POD\n> well-formedness test (t/doc/pod.t), so all the codingstd test I'm\n> proposing would do is make sure some pod exists, at least for\n> non-generated sources in POD-capable file formats.\n> \n\nAhhh, I'm starting to breathe easier (uh, \"more easily\" for the grammar \npolice).\n\n> I feel the same way you do about Test::Pod::Coverage; its the reason I\n> haven't added POD coverage tests to my own distributions.  \n\nAhhh, so I'm not alone in this!\n\nIt's quite\n> possible to document a module properly without having a separate =head\n> tag for each subroutine in it.\n\nAnd, IIRC, that was exactly why my POD for List::Compare was judged to \nbe of low \"kwalitee.\"\n\n> \n> Second.  How do you feel about a codingstd test for this that is not run\n> during \"make test\" or \"make smoke\"?  \n\nWell, I think it should be given serious consideration.  The tests I \nhave in 'make buildtools_tests' do not run during 'make test' and, in \nfact, they're not intended to do so.  So perhaps this is another such case.\n\n(Coincidentally, one of the things I'm going to argue for in my talk at \nYAPC is a more fine-grained concept of which tests should be run when.)\n\n\n> The @coding_std_tests variable in\n> t/harness looks to me like a whitelist for which tests to run on\n> non-release builds... so if this test isn't part of the list, then\n> everyone is happy?  (Or have I misunderstood that code?)\n> \n\nTo tell the truth, I'm not that familiar with Parrot's t/harness or with \nthat variable in particular.  I'll have to take a look.\n\nThank you very much.\nkid51\n\n"}