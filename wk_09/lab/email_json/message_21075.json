{"category": "ham", "to_address": "pbarata@infolink.com.br", "from_address": "Paul Murrell <p.murrell@auckland.ac.nz>", "subject": "Re: [R] to draw a smooth arc", "body": "Hi\n\n\nPaulo Barata wrote:\n> Dr. Murrell and all,\n> \n> One final suggestion: a future function arc() in package graphics,\n> with centre-radius-angle parameterisation, could also include an\n> option to draw arrows at either end of the arc, as one can find\n> in function arrows().\n\n\n... and in grid.xspline() and grid.curve().\n\nPaul\n\n\n> Thank you.\n> \n> Paulo Barata\n> \n> -----------------------------------------------------------------------\n> Paul Murrell wrote:\n>> Hi\n>>\n>>\n>> Paulo Barata wrote:\n>>> Dr. Snow and Prof. Ripley,\n>>>\n>>> Dr. Snow's suggestion, using clipplot (package TeachingDemos),\n>>> is maybe a partial solution to the problem of drawing an arc of\n>>> a circle (as long as the line width of the arc is not that large,\n>>> as pointed out by Prof. Ripley). If the arc is symmetrical around\n>>> a vertical line, then it is not so difficult to draw it that way.\n>>> But an arc that does not have this kind of symmetry would possibly\n>>> require some geometrical computations to find the proper rectangle\n>>> to be used for clipping.\n>>>\n>>> I would like to suggest that in a future version of R some function\n>>> be included in the graphics package to draw smooth arcs with\n>>> given center, radius, initial and final angles. I suppose\n>>> that the basic ingredients are available in function \"symbols\"\n>>> (graphics).\n>>\n>> Just to back up a few previous posts ...\n>>\n>> There is something like this facility already available via the\n>> grid.xspline() function in the grid package.  This provides very\n>> flexible curve drawing (including curves very close to Bezier curves)\n>> based on the X-Splines implemented in xfig.  The grid.curve() function\n>> provides a convenience layer that allows for at least certain\n>> parameterisations of arcs (you specify the arc end points and the angle).\n>>\n>> These functions are built on functionality within the core graphics\n>> engine, so exposing a similar interface (e.g., an xspline() function)\n>> within \"traditional\" graphics would be relatively straightforward.\n>>\n>> The core functionality draws the curves as line segments (but\n>> automatically figures out how many segments to use so that the curve\n>> looks smooth);  it does NOT call curve-drawing primitives in the\n>> graphics device (like PostScript's curveto).\n>>\n>> In summary:  there is some support for smooth curves, but we could still\n>> benefit from a specific arc() function with the standard\n>> centre-radius-angle parameterisation and we could also benefit from\n>> exposing the native strengths of different graphics devices (rather than\n>> the current lowest-common-denominator approach).\n>>\n>> Paul\n>>\n>>\n>>> Thank you very much.\n>>>\n>>> Paulo Barata\n>>> (Rio de Janeiro - Brazil)\n>>>\n>>> -----------------------------------------------------------------------\n>>> Prof Brian Ripley wrote:\n>>>> On Tue, 1 May 2007, Greg Snow wrote:\n>>>>\n>>>>> Here is an approach that clips the circle you like from symbols down to\n>>>>> an arc (this will work as long as the arc is less than half a circle,\n>>>>> for arcs greater than half a circle, you could draw the whole circle\n>>>>> then use this to draw an arc of the bacground color over the section you\n>>>>> don't want):\n>>>>>\n>>>>> library(TeachingDemos)\n>>>>> plot(-5:5, -5:5, type='n')\n>>>>> clipplot( symbols(0,0,circles=2, add=TRUE), c(0,5), c(0,5) )\n>>>> I had considered this approach: clipping a circle to a rectangle isn't \n>>>> strictly an arc, as will be clear if the line width is large.\n>>>> Consider\n>>>>\n>>>> clipplot(symbols(0, 0 ,circles=2, add=TRUE, lwd=5), c(-1,5), c(-1,5))\n>>>>\n>>>> Note too that what happens with clipping is device-dependent.  If R's \n>>>> internal clipping is used, the part-circle is converted to a polygon.\n>>>>\n>>>>\n>>> ______________________________________________\n>>> R-help@stat.math.ethz.ch mailing list\n>>> https://stat.ethz.ch/mailman/listinfo/r-help\n>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html\n>>> and provide commented, minimal, self-contained, reproducible code.\n\n-- \nDr Paul Murrell\nDepartment of Statistics\nThe University of Auckland\nPrivate Bag 92019\nAuckland\nNew Zealand\n64 9 3737599 x85392\npaul@stat.auckland.ac.nz\nhttp://www.stat.auckland.ac.nz/~paul/\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}