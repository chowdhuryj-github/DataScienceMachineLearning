{"category": "ham", "to_address": "\"Vahid Moghaddasi\" <vahid.moghaddasi@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: writung to file", "body": "On 6/21/07, Vahid Moghaddasi  wrote:\n> On 6/21/07, Chas Owens  wrote:\n> >\n> > Well, first you don't use awk inside of Perl.  This is about as useful\n> > as riding a bike on a bus.\n> >\n> Thanks, that worked very well for me.\n> Beside the force of habit, awk was the only way I could get the\n> password file sorted unique and always keep *only* the first\n> occurrence of the duplicate UID and discard the second duplicate.\n> Thanks again.\n\nThere is a script included in the Perl distribution called a2p.  The\nnext time you are stumped in Perl, but know how to do it in awk, use\nit to figure out a way to do it in Perl.\n\na2p -F:\na[$1]++==0\n#!/usr/bin/perl\neval 'exec /usr/bin/perl -S $0 ${1+\"$@\"}'\n    if $running_under_some_shell;\n                        # this emulates #! processing on NIH machines.\n                        # (remove #! line above if indigestible)\n\neval '$'.$1.'$2;' while $ARGV[0] =~ /^([A-Za-z_0-9]+=)(.*)/ && shift;\n                        # process any FOO=bar switches\n\n$[ = 1;                 # set array base to 1\n$FS = ':';              # field separator from -F switch\n\nwhile (<>) {\n    @Fld = split(/[:\\n]/, $_, -1);\n    print $_ if $a{$Fld[1]}++ == 0;\n}\n\nNow, this isn't pretty code, but it can give you a starting point.\nThe first nine lines are boilerplate and can be safely ignored.  The\ntenth line is a dangerous thing you should never do.  It is being done\nhere to emulate awk's indexing method, but it will not be necessary in\nyour Perl code; just remember, Perl starts at zero.  The eleventh line\nis meaningless in this context (it is only useful if your awk code\nreferenced $FS at some point).  The real meat is in lines thirteen\nthrough sixteen and they are functionally equivalent to the code I\nsent.  The only real difference is that it is keeping a copy of the\nfields for the life of loop in case later code (that does not exist)\nwants to look at it.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}