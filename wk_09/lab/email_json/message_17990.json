{"category": "ham", "to_address": "Deepayan Sarkar <deepayan.sarkar@gmail.com>", "from_address": "Michael Kubovy <kubovy@virginia.edu>", "subject": "Re: [R] xyplot() and controlling panel.polygon()", "body": "Hi Deepayan,\n\nYour solution works, anf the polygon are drawn where I wanted them to  \ngo. I thought that I could figure out how to gain control over the  \ncolors of the four ensuing polygons (I'm trying to get two lighter  \nshades of the lines).\n\nI've tried, for example, to see if I could control the color of the  \npolyon outline, by adding border = 'red' to panel.polygon. That  \ndidn't work. Does it work only in lpolygon()?\n\nI often can figure things out on my own, but obviously there's  \nsomething fundamental that I'm not getting about inheritance and  \npassing in these sorts of objects. I've been trying to get it from  \nthe help pages and from Murrell's book, but neither offers enough of  \na cookbook for me to figure these things out. Is there something I  \nshould have read?\n\nThanks,\nMIchael\n\nOn Apr 27, 2007, at 2:25 PM, Deepayan Sarkar wrote:\n\n> On 4/27/07, Michael Kubovy  wrote:\n>> Hi Deepayan,\n>>\n>> Thanks for your advice. This is moving along, however:\n>> The following is drawing the same polygons in each panel. I'm trying\n>> to get a different polygon (confidence band) for each group in each\n>> panel. That's why I thought I would need to pass groups and\n>> subscripts to the panel.groups\n>>\n>> est <- c(1:4, 3:6, 7, 9, 11, 13, 12, 15, 18, 21)\n>> cond <- rep(c('a','b'), each = 8)\n>> grp <- rep(c('I', 'II'), each = 4, 2)\n>> x <- rep(c(.5, .7, .9, 1.1), 4)\n>> upper <- est + 1\n>> lower = est - 1\n>> data <- data.frame(est = est, x = x, cond = cond, grp = grp, upper =\n>> upper, lower = lower)\n>>\n>> my.panel.polygon <- function(..., font, fontface)\n>> {\n>>     panel.polygon(...)\n>> }\n>>\n>> xyplot(est ~ x | cond, group = grp, data = data, type = 'b',\n>>      panel = function(x, y, ...){\n>>          panel.superpose(c(x, rev(x)), c(upper, rev(lower)),\n>>              panel.groups = 'my.panel.polygon', default.units =\n>> 'native', ...)\n>>          panel.xyplot(x, y, ...)\n>>      }\n>> )\n>>\n>> It's pretty clear that panel.superpose is not getting its x and y\n>> values after they are split by group and panel.\n>\n> You are not even trying to do that; you have\n>\n>  panel.superpose(c(x, rev(x)), c(upper, rev(lower)), <...>\n>\n> so your x=c(x, rev(x)) is not the same length as x (and  \n> subscripts), and your\n> y = c(upper, rev(lower)) is not the same length as anything. Also,\n> your upper and lower are being taken from the global env, not data\n> (they happen to be the same, but since your data has them, I assume\n> you want to use them).\n>\n> Perhaps you are looking for something like this:\n>\n>\n> panel.bands <-\n>    function(x, y, upper, lower,\n>             subscripts, ..., font, fontface)\n> {\n>    upper <- upper[subscripts]\n>    lower <- lower[subscripts]\n>    panel.polygon(c(x, rev(x)), c(upper, rev(lower)), ...)\n> }\n>\n> xyplot(est ~ x | cond, group = grp, data = data, type = 'b',\n>       upper = data$upper,\n>       lower = data$lower,\n>       panel = function(x, y, ...){\n>           panel.superpose(x, y, panel.groups = 'panel.bands', ...)\n>           panel.xyplot(x, y, ...)\n>       })\n>\n> -Deepayan\n\n_____________________________\nProfessor Michael Kubovy\nUniversity of Virginia\nDepartment of Psychology\nUSPS:     P.O.Box 400400    Charlottesville, VA 22904-4400\nParcels:    Room 102        Gilmer Hall\n         McCormick Road    Charlottesville, VA 22903\nOffice:    B011    +1-434-982-4729\nLab:        B019    +1-434-982-4751\nFax:        +1-434-982-4766\nWWW:    http://www.people.virginia.edu/~mk9y/\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}