{"category": "ham", "to_address": "\"new ruser\" <newruser@yahoo.com>", "from_address": "\"jim holtman\" <jholtman@gmail.com>", "subject": "Re: [R] how to pass \"arguments\" to a function within a function?", "body": "You weren't passing in any 'x' and 'y' arguments to the 'fun'.\n\nTry this:\n\nvars.in = data.frame(x='sample1',y='sample2')\n\n\nexamplefun  <- function(fun, vars=vars.in, ...) {\n\n       for(v in 1: ncol(vars) ) {\n           assign( names(vars)[v]  , vars[1,v]  , env=.GlobalEnv)\n       }\n       fun(x=as.character(vars[1,1]), y=as.character(vars[1,2]))\n}\n\nexamplefun(fun=minus, vars = vars.in)\n\n\nOn 5/10/07, new ruser  wrote:\n> I have searched the r-help files but have not been able to find an answer to this question.  I apologize if this questions has been asked previously.\n>\n> (Please excuse the ludicrousness of this example, as I have simplified my task for the purposes of this help inquiry.  Please trust me that something like this will in fact be useful what I am trying to accomplish. I am using R 2.4.1 in Windows XP.)\n>\n> I have created two functions:\n>\n> 1. minus <- function(x,y) {get(x)-get(y)}\n>\n> a. note: x and y are of type character and represent the names of numerical objects)\n>\n>\n> 2. examplefun  <- function(fun, vars=vars.in, ...) {\n>\n>        for(v in 1: ncol(vars) ) {\n>            assign( names(vars)[v]  , vars[1,v]  , env=.GlobalEnv)\n>                                        }\n>\n> fun(...) }\n>\n> a. FUN = another function (e.g. minus() that takes as its inputs variables of type chatrcater\n> b. vars = (a data.frame with the names of variables that will be passed to \"FUN\"\n>\n> My problem: various inputs for \"FUN\" will require different arguments.  These arguments will be contained in the column names of \"vars\".  How do I pass these arguments to FUN()?\n>\n>\n> My example and my attempt:\n>\n> what I am trying to do, successfully accomplished without a function:\n> x='sample1'\n> y='sample2'\n>\n> sample1=c(222,333,444)\n> sample2=c(100,200,300)\n>\n> minus <- function(x,y) {get(x)-get(y)}\n> minus(x,y)\n>\n> #########################################################\n>\n> #My so-far failing attempt to write a function to do the same thing:\n>\n> vars.in = data.frame(x='sample1',y='sample2')\n>\n>\n> examplefun  <- function(fun, vars=vars.in, ...) {\n>\n>        for(v in 1: ncol(vars) ) {\n>            assign( names(vars)[v]  , vars[1,v]  , env=.GlobalEnv)\n>                                        }\n>\n> fun(...) }\n>\n> examplefun(fun=minus, vars = vars.in)\n>\n>\n> ---------------------------------\n> Now that's room service! Choose from over 150,000 hotels\n>\n>        [[alternative HTML version deleted]]\n>\n> ______________________________________________\n> R-help@stat.math.ethz.ch mailing list\n> https://stat.ethz.ch/mailman/listinfo/r-help\n> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html\n> and provide commented, minimal, self-contained, reproducible code.\n>\n\n\n-- \nJim Holtman\nCincinnati, OH\n+1 513 646 9390\n\nWhat is the problem you are trying to solve?\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}