{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 142: more DEBUG() calls in http://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 142\nrevision-id: tridge@samba.org-20070417122717-55b27f525e956688\nparent: tridge@samba.org-20070417121650-abbb360fdc1b534d\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Tue 2007-04-17 22:27:17 +1000\nmessage:\n  more DEBUG() calls\nmodified:\n  common/ctdb_daemon.c           ctdb_daemon.c-20070409200331-3el1kqgdb9m4ib0g-1\n  common/ctdb_ltdb.c             ctdb_ltdb.c-20061128065342-to93h6eejj5kon81-2\n  common/ctdb_message.c          ctdb_message.c-20070208224107-9dnio7x7z33prrmt-1\n  tests/ctdb_messaging.c         ctdb_messaging.c-20070411034205-6d6vne56pbih2x1p-1\n=== modified file 'common/ctdb_daemon.c'\n--- a/common/ctdb_daemon.c\t2007-04-17 07:36:53 +0000\n+++ b/common/ctdb_daemon.c\t2007-04-17 12:27:17 +0000\n@@ -36,7 +36,7 @@\n \t/* go into a wait loop to allow other nodes to complete */\n \tevent_loop_wait(ctdb->ev);\n \n-\tprintf(\"event_loop_wait() returned. this should not happen\\n\");\n+\tDEBUG(0,(\"event_loop_wait() returned. this should not happen\\n\"));\n \texit(1);\n }\n \n@@ -118,7 +118,8 @@\n \t\t\t\t\t    c->srvid, daemon_message_handler, \n \t\t\t\t\t    client);\n \tif (res != 0) {\n-\t\tprintf(\"Failed to register handler %u in daemon\\n\", c->srvid);\n+\t\tDEBUG(0,(__location__ \" Failed to register handler %u in daemon\\n\", \n+\t\t\t c->srvid));\n \t}\n }\n \n@@ -168,7 +169,7 @@\n \tlength = offsetof(struct ctdb_reply_fetch_lock, data) + state->call.reply_data.dsize;\n \tr = ctdbd_allocate_pkt(client->ctdb, length);\n \tif (r == NULL) {\n-\t\tprintf(\"Failed to allocate reply_call in ctdb daemon\\n\");\n+\t\tDEBUG(0,(__location__ \" Failed to allocate reply_call in ctdb daemon\\n\"));\n \t\treturn;\n \t}\n \tmemset(r, 0, offsetof(struct ctdb_reply_fetch_lock, data));\n@@ -183,7 +184,7 @@\n \n \tres = ctdb_queue_send(client->queue, (uint8_t *)&r->hdr, r->hdr.length);\n \tif (res != 0) {\n-\t\tprintf(\"Failed to queue packet from daemon to client\\n\");\n+\t\tDEBUG(0,(__location__ \" Failed to queue packet from daemon to client\\n\"));\n \t}\n \ttalloc_free(r);\n }\n@@ -260,7 +261,7 @@\n \t\n \tres = ctdb_queue_send(client->queue, (uint8_t *)&r.hdr, r.hdr.length);\n \tif (res != 0) {\n-\t\tprintf(\"Failed to queue a connect wait response\\n\");\n+\t\tDEBUG(0,(__location__ \" Failed to queue a connect wait response\\n\"));\n \t\treturn;\n \t}\n }\n@@ -298,8 +299,8 @@\n \tres = ctdb_daemon_send_message(client->ctdb, c->hdr.destnode,\n \t\t\t\t       c->srvid, data);\n \tif (res != 0) {\n-\t\tprintf(\"Failed to send message to remote node %u\\n\",\n-\t\t       c->hdr.destnode);\n+\t\tDEBUG(0,(__location__ \" Failed to send message to remote node %u\\n\",\n+\t\t\t c->hdr.destnode));\n \t}\n }\n \n@@ -319,7 +320,8 @@\n \n \tctdb_db = find_ctdb_db(client->ctdb, c->db_id);\n \tif (!ctdb_db) {\n-\t\tprintf(\"Unknown database in request. db_id==0x%08x\",c->db_id);\n+\t\tDEBUG(0, (__location__ \" Unknown database in request. db_id==0x%08x\",\n+\t\t\t  c->db_id));\n \t\treturn;\n \t}\n \n@@ -337,14 +339,14 @@\n /* XXX this must be converted to fully async */\n \tres = ctdb_daemon_call_recv(state, &call);\n \tif (res != 0) {\n-\t\tprintf(\"ctdbd_call_recv() returned error\\n\");\n+\t\tDEBUG(0, (__location__ \" ctdbd_call_recv() returned error\\n\"));\n \t\texit(1);\n \t}\n \n \tlength = offsetof(struct ctdb_reply_call, data) + call.reply_data.dsize;\n \tr = ctdbd_allocate_pkt(client->ctdb, length);\n \tif (r == NULL) {\n-\t\tprintf(\"Failed to allocate reply_call in ctdb daemon\\n\");\n+\t\tDEBUG(0, (__location__ \" Failed to allocate reply_call in ctdb daemon\\n\"));\n \t\treturn;\n \t}\n \tmemset(r, 0, offsetof(struct ctdb_reply_call, data));\n@@ -358,7 +360,7 @@\n \n \tres = ctdb_queue_send(client->queue, (uint8_t *)&r->hdr, r->hdr.length);\n \tif (res != 0) {\n-\t\tprintf(\"Failed to queue packet from daemon to client\\n\");\n+\t\tDEBUG(0, (__location__ \"Failed to queue packet from daemon to client\\n\"));\n \t}\n \ttalloc_free(r);\n }\n@@ -399,7 +401,8 @@\n \t\tdaemon_request_fetch_lock(client, (struct ctdb_req_fetch_lock *)hdr);\n \t\tbreak;\n \tdefault:\n-\t\tprintf(\"daemon: unrecognized operation:%d\\n\",hdr->operation);\n+\t\tDEBUG(0,(__location__ \" daemon: unrecognized operation %d\\n\",\n+\t\t\t hdr->operation));\n \t}\n \n done:\n@@ -481,10 +484,10 @@\n \t/* XXX this is a good place to try doing some cleaning up before exiting */\n \tcnt = read(*fd, &buf, 1);\n \tif (cnt==0) {\n-\t\tprintf(\"parent process exited. filedescriptor dissappeared\\n\");\n+\t\tDEBUG(0,(__location__ \" parent process exited. filedescriptor dissappeared\\n\"));\n \t\texit(1);\n \t} else {\n-\t\tprintf(\"ctdb: did not expect data from parent process\\n\");\n+\t\tDEBUG(0,(__location__ \" ctdb: did not expect data from parent process\\n\"));\n \t\texit(1);\n \t}\n }\n@@ -549,18 +552,18 @@\n \t/* create a unix domain stream socket to listen to */\n \tres = ux_socket_bind(ctdb);\n \tif (res!=0) {\n-\t\tprintf(\"Failed to open CTDB unix domain socket\\n\");\n+\t\tDEBUG(0,(__location__ \" Failed to open CTDB unix domain socket\\n\"));\n \t\texit(10);\n \t}\n \n \tres = pipe(&fd[0]);\n \tif (res) {\n-\t\tprintf(\"Failed to open pipe for CTDB\\n\");\n+\t\tDEBUG(0,(__location__ \" Failed to open pipe for CTDB\\n\"));\n \t\texit(1);\n \t}\n \tpid = fork();\n \tif (pid==-1) {\n-\t\tprintf(\"Failed to fork CTDB daemon\\n\");\n+\t\tDEBUG(0,(__location__ \" Failed to fork CTDB daemon\\n\"));\n \t\texit(1);\n \t}\n \n\n=== modified file 'common/ctdb_ltdb.c'\n--- a/common/ctdb_ltdb.c\t2007-04-17 06:20:32 +0000\n+++ b/common/ctdb_ltdb.c\t2007-04-17 12:27:17 +0000\n@@ -227,7 +227,7 @@\n \tstruct ctdb_req_header *hdr = p;\n \tstruct ctdb_context *ctdb = talloc_find_parent_bytype(p, struct ctdb_context);\n \tctdb_recv_pkt(ctdb, (uint8_t *)hdr, hdr->length);\n-\tprintf(\"PACKET REQUEUED\\n\");\n+\tDEBUG(0,(__location__ \" PACKET REQUEUED\\n\"));\n }\n \n /*\n\n=== modified file 'common/ctdb_message.c'\n--- a/common/ctdb_message.c\t2007-04-17 04:52:51 +0000\n+++ b/common/ctdb_message.c\t2007-04-17 12:27:17 +0000\n@@ -42,7 +42,8 @@\n \t\tif (ml->srvid == srvid || ml->srvid == CTDB_SRVID_ALL) break;\n \t}\n \tif (ml == NULL) {\n-\t\tprintf(\"daemon vnn:%d  no msg handler for srvid=%u\\n\", ctdb_get_vnn(ctdb), srvid);\n+\t\tDEBUG(0,(__location__ \" daemon vnn:%d  no msg handler for srvid=%u\\n\", \n+\t\t\t ctdb_get_vnn(ctdb), srvid));\n \t\t/* no registered message handler */\n \t\treturn -1;\n \t}\n@@ -86,7 +87,7 @@\n \n \tres = ctdb_dispatch_message(m->ctdb, m->srvid, m->data);\n \tif (res != 0) {\n-\t\tprintf(\"Failed to dispatch message for srvid=%u\\n\", m->srvid);\n+\t\tDEBUG(0, (__location__ \" Failed to dispatch message for srvid=%u\\n\", m->srvid));\n \t}\n \ttalloc_free(m);\n }\n\n=== modified file 'tests/ctdb_messaging.c'\n--- a/tests/ctdb_messaging.c\t2007-04-17 12:16:50 +0000\n+++ b/tests/ctdb_messaging.c\t2007-04-17 12:27:17 +0000\n@@ -130,7 +130,7 @@\n \t\tfor (j=0;j<num_clients;j++) {\n \t\t\tprintf(\"sending message to %d:%d\\n\", i, j);\n \t\t\tsprintf(buf,\"Message from %d to vnn:%d srvid:%d\",ctdb_get_vnn(ctdb),i,j);\n-\t\t\tdata.dptr=buf;\n+\t\t\tdata.dptr = (unsigned char *)buf;\n \t\t\tdata.dsize=strlen(buf)+1;\n \t\t\tctdb_send_message(ctdb, i, j, data);\n \t\t}\n\n"}