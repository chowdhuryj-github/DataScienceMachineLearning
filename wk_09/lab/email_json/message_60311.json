{"category": "ham", "to_address": "\"Gabriel Striewe\" <email@gabriel-striewe.de>, beginners@perl.org", "from_address": "\"Adriano Ferreira\" <a.r.ferreira@gmail.com>", "subject": "Re: interpolation of function reference in a here doc", "body": "On 7/2/07, Gabriel Striewe  wrote:\n> Dear List,\n>\n> I wanted to interpolate a function reference in a here doc.\n> The following works fine:\n>\n> my $hello = sub {\n>                  return \"hello world!\";\n>                 };\n>\n> printf \"hello $s\\n\", &$hello();\n>\n> But when I use a heredoc instead, it doesn't work:\n>\n> print < hello &$hello()\n> END\n>\n> At least it does not properly dereference this function\n> reference.\n>\n> What do I do wrong?\n\nYou will encounter the problem if instead of\n\n    printf \"hello %s\\n\", &$hello();\n\nyou would have tried:\n\n    print \"hello &$hello()\\n\";\n\nThat's an issue with the rules of string interpolation. (Read \"perldoc\nperlop\", section on quote-like operators.) Simplistically, I think the\nright thing you are expecting for (calling the code ref in $hello) is\nnot done because the only sigils that matter in interpolation are $\nand @. That's why\n\n   $ perl -e '$h = sub {1}; print \"hello &$h()\" '\n   hello &CODE(0x10240d64)()\n\n(where the only thing interpolated was the stringification of the code\nref in $h).\n\nThe weird/scary way to make it work is\n\n$ perl -e '$h = sub {1}; print \"hello @{[ &$h() ]}\" '\nhello 1\n\n>\n> Thanks for your advice.\n>\n> Gabriel\n>\n> --\n> http://www.gabriel-striewe.de\n>\n>\n>\n> --\n> To unsubscribe, e-mail: beginners-unsubscribe@perl.org\n> For additional commands, e-mail: beginners-help@perl.org\n> http://learn.perl.org/\n>\n>\n>\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}