{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Karyn Williams <karyn@calarts.edu>", "subject": "Redirecting STDOUT & STDERR", "body": "I have this script I have been working on where I need to redirect STDOUT\nand STDERR to files at the beginning of the script and then back to default\n(terminal) at the end of the script. I found an example on-line and used it\nand it works, however it generates a warning when running my script. I\nwould prefer to make that warning go away. This is the output of the script:\n\nalum# ./match.pl\nName \"main::OLDERR\" used only once: possible typo at ./match.pl line 38.\nName \"main::OLDOUT\" used only once: possible typo at ./match.pl line 37.\nRecords processed: 2\nKicked as dups: 1\nKicked as exceptions: 0\nAccounts created: 1\n\nThis is the script:\n\n#!/usr/bin/perl\n\n# match.pl expanded\n# Checks the current csv against the passwd file to detect and prevent\ncreating duplicate accounts\n\nuse strict;\nuse warnings;\n\nmy $dir = \"/usr/local/accounts\";\n\nmy $csv = \"isirin.csv\";\nmy $expin = \"exceptions.csv\";\nmy $pwfile = \"/etc/passwd\";\nmy $expout = \"exceptions.log\";\nmy $clog = \"account_change.log\";\nmy $as400 = \"as400.txt\";\nmy $admiss = \"admissions.txt\";\nmy $err = \"error.log\";\n\nmy $description = \"SIR Fall 2007\";\n\nmy $date = localtime();\nmy ($sec,$min,$hour,$mday,$mon,$year) = (localtime)[0,1,2,3,4,5];\n$mday++;\n$mon++;\n$year += 1900;\nmy $today = sprintf(\"%04d%02d%02d-%02d%02d%02d\", $year, $mon, $mday, $hour,\n$min, $sec);\n\n# Read in csv file from Accounting and check for existing accounts.\n\nopen (IN, \"$dir/$csv\") or die \"$dir/$csv does not exist. This file must be\navailable to run this script: $!\";\nopen (EX, \"$dir/$expin\") or die \"Can't open EX $expin : $!\";\nopen (PW, \"$pwfile\") or die \"Can't open PW $pwfile : $!\";\nopen (EXCEP, \">>$dir/$expout\") or die \"Can't open EXCEP: $!\";\nopen (OUT, \">>$dir/$clog\") or die \"Can't open OUT: $!\";\nopen (AOUT, \">$dir/$as400\") or die \"Can't open AOUT: $!\";\nopen (OLDOUT, \">&STDOUT\");\nopen (OLDERR, \">&STDERR\");\nopen (STDOUT, \">$dir/$admiss\") or die \"Can't open STDOUT: $!\";\nopen (STDERR, \">>$dir/$err\") or die \"Can't open STDERR: $!\";\n\nmy $pwf;\nmy $exp;\nmy $gecos;\nmy $login;\nmy $rcount = 0;\nmy $acount = 0;\nmy $ecount = 0;\nmy $lcount = 0 ;\n\nmy @line = ;\n\nprintf STDOUT (\"$date\\n\");\n\n# Slurp the /etc/passwd file into one string and then search for matching\nStudent IDs in that \n# string. Use this later for checking unused loginnames also.\n\nwhile () {\n        $pwf .= $_;\n        }\n\nwhile () {\n        $exp .= $_;\n        }\n\n# Create GECOS and login info and then create account using pw\n\nforeach my $line (@line) {\n        next if $line =~ /^nameid/;\n        next if $line =~ /^$/;\n        next if $line =~ /^\\s+$/;\n        # file format is nameid,first,init,last\n        #print $line;\n        chomp $line;\n        $rcount++;\n        my ($sid,$name) = split(/,/, $line,2);\n        if ($pwf =~ /\\b$sid\\b/) {\n                printf EXCEP (\"$date, $name, $sid, possible dup\naccount\\n\"); $acount++;\n                } elsif ($exp =~ /\\b$sid\\b/) {\n                printf EXCEP (\"$date, $name, $sid, listed in\nexceptions.csv\\n\"); $ecount++;\n                } else {\n\n        my ($first, $initial, $last) = split(/,/, $name, 3);\n        # Create gecos info\n        $last =~ s/[\",]//g;\n        $first =~ s/[\",]//g;\n        $initial =~ s/[\",]//g;\n        if ($initial) { \n                $gecos = \"\\\"$first $initial $last, $sid, $description\\\"\";\n                } else {\n                $gecos = \"\\\"$first $last, $sid, $description\\\"\"; }\n        #print \"GECOS IS $gecos\\n\";\n        # Now guess at a login\n        my $lfirst = $first;\n        $lfirst =~ s/[^a-zA-Z]//g;\n        #(my $lfirst = $first) =~ s/[^a-zA-Z]//g);\n        my @last = split(/\\s/, $last, 2);\n        my $llast = $last[0];\n        $llast =~ s/[-\\s]//g;\n        #print \"LoginLast is $llast\\n\";\n        if (length($lfirst) + length($llast) <= 16) {\n                $login = $lfirst . $llast; \n                } else {\n                my $f = substr(($lfirst),0,1);\n                $login = $f . $llast;\n                }\n        $login = lc($login); \n        #print \"Login is $login\\n\";\n        #printf STDOUT (\"$first $initial $last, $sid, $login, passwd\\n\");\n        printf STDOUT (\"$first $initial $last, $sid, $login, \");\n        #This next line is for testing purposes\n        system(\"pw useradd -n $login -c $gecos -m -s /bin/ftpshell -N\");\n        #system(\"pw useradd -n $login -c $gecos -m -s /bin/ftpshell -w\nrandom\");\n        printf OUT (\"$date Account Added, $first $initial $last, $login,\n$sid\\n\");\n        printf AOUT (\"$sid, $first $initial $last, $login\\n\");\n        $lcount++;\n        }\n}\n\nclose IN;\nclose OUT;\nclose AOUT;\nclose STDOUT;\nclose STDERR;\nclose EX;\nclose PW;\nclose EXCEP;\n\nrename (\"$dir/$csv\", \"$dir/$csv.$today\") or die \"Can't rename $dir/$csv : $!\";\n\nopen(STDOUT, \">&OLDOUT\");\nopen(STDERR, \">&OLDERR\");\n\nprint \"Records processed: $rcount\\n\";\nprint \"Kicked as dups: $acount\\n\";\nprint \"Kicked as exceptions: $ecount\\n\";\nprint \"Accounts created: $lcount\\n\";\n\n# send via e-mail output of this script.\n\nmy $to = \"To: karyn\\@calarts.edu\";\nmy $from = \"From: accounts\\@alum.calarts.edu\";\nmy $subject = \"Subject: Test Output for SIRs\";\nmy $sendmail = \"/usr/sbin/sendmail -t\";\n\nmy @files = (\"$dir/$as400\", \"$dir/$admiss\");\nmy @mail = ();\n\nforeach my $file (@files) {\n\nopen (MAIL, \"|$sendmail\") or die \"Can't open $sendmail: $!\";\nopen (AOUT, \"<$file\") or die \"Can't open AOUT for read: $!\";\n\nprint MAIL \"$to\\n\";    \nprint MAIL \"$from\\n\";      \nprint MAIL \"$subject\\n\";         \n\n@mail = ;\n        foreach my $line (@mail) {\n                print MAIL $line;\n        }\n\nclose (MAIL);\nclose AOUT;\n\n}\n\n# end of script\n\nTIA\n\n-- \n\nKaryn Williams\nNetwork Services Manager\nCalifornia Institute of the Arts\nkaryn@calarts.edu\nhttp://www.calarts.edu/network\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}