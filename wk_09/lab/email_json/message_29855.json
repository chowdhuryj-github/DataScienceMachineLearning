{"category": "ham", "to_address": "Thomas Wittek <mail@gedankenkonstrukt.de>", "from_address": "Tibor Foeldes <tifo@comple.at>", "subject": "Re: Is Perl 6 too late?", "body": "OK! Be concrete  !  :-) ( Hart wie Beton !)\n> As Ruby and Python are getting more and more attraction [1][2] I think\n> they do something right, that Perl doesn't.\n> What I think where both (especially Python) do better is in readable \n> code.\n>\n> What makes Perl hard to read is the excessive use of special characters\n> (/\\W/).\n>   \n(/\\W/)\nIt is  in Ruby the same.  In Python  re.search('\\W',foo).    Is  it  \nreally nicer ?\n\n> In my opinion, reducing the use of those characters would make Perl a\n> lot easier to read and also easier to write.\n> Global variables with cryptic names, that no beginner can make any sense\n> of by reading it. And after not working with \"$<\" for some months I\n> can't remember it either, although I've got quite some Perl experience.\n>\n>   \nIn Perl6:  $*UID   (see S02.pod)\n> Additionally I'm not a friend of sigils: Typing them is relatively\n> painful, for reading there is no advantage if you use an editor with\n> decent syntax highlighting and the code looks more cryptic. The answer\n> in Perl6 are twigils, great... One step backwards in my optinion.\n> Most programming languages\n> /C(++|#)?|Java(Script)?|Python|Ruby|Groovy/... don't need them. The only\n> obvious advantage of using sigils is variable interpolation in strings.\n> But that could easily be done only in strings without the need to put a\n> $ in front of each and every variable name in the rest of the code.\n>\n>   \nPerl is a language with sigils. We must see it more penetrating ! The \nadvantages of sigils in Perl are overall, by item access in structures, \nby the flexibility of subroutine calls, interpolation , global \nvariables,  ....\nPerl wants separate variables from other language structures . Perl \nwithout sigils is not Perl more.  Perl6 in this regards is really to \nlate for you :-)\n> I would also like semicolons to be optional. There are far more cases of\n> single line statements than multiline statements. So you would save\n> quite some characters, when the semicolon would be optional and you\n> could concatenate multiline statements with e.g. a backslash.\n>\n> Some say that there are too much operators in Perl(6). I partially\n> agree. I don't like the implicit type casting forced by the operators\n> (== int / eq string). That's harder to learn and remember. Harder to\n> read also.\nOperators are only another format ( nice ) of functions.\n> I really like the Python way of doing it: Set the variables type on the\n>   assignment and remember it. The (fewer) operators now work according to\n> the type of the operands. No implicit (and error prone) type casting.\n> That way seems to be the best compromise of easiness and type safety.\n> I could continue on that, but I've already written too much...\n>   \n\"use warnings\" is helping you !\n\nAnd you can always make explicit type conversion. That does mean \nexplicit :-) . But you must type something more.\nThe only builtin implicit type casting in Perl is this numeric / string \nconversion and it is fairly obvious and absolutely not error-prone.\n\n> [1] http://radar.oreilly.com/archives/2007/05/state_of_the_co_6.html\n> [2] http://www.google.com/trends?q=perl%2C+python+-snake%2C+ruby\n>\n>   \nThese reports are fairly special. These are not about popularity of a \nprogramming language , but\nhow many books O'Reilly sold, and how many were googled. What about is \nnot clear. Maybe waiting for Perl6 ?\nIn place of contributing? Searching for redemption ?\n> People not only want code that _is_ sexy, but they also want it to\n> _look_ sexy.\n>   \nSex is oftentimes perversion ;-) Well, natural selection. Survives the \nfittest idea , not necessarily the sexiest look.\n\nTibor\n\n"}