{"category": "ham", "to_address": "\"Sharan Basappa\" <sharan.basappa@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: zero width lookahead match", "body": "On 5/30/07, Sharan Basappa  wrote:\n> >> this is what the zero-width lookahead assertion means.  It say with\n> >>out moving where you are currently starting the match, make certain\n> >>you can match the following pattern.  If you want it to move where the\n> >>match starts then you have to include something that does not have\n> >>zero-width like this\n>\n> >> #match groups of three characters followed by three characters: \"123\" and\n> \"456\"\n> >> @store = $str =~ m/(\\d\\d\\d)(?=\\d\\d\\d)/g;\n>\n> You mention that if I write a rule like @store = $str =~ m/((?=\\d\\d\\d))/g;\n> then the scanner does not move ahead. But as I mentioned in my mail,\n> the result of this regex is 123 234 etc. This clearly shows that after every\n> match,\n> the regex engine of perl is moving its pointer to next char in the string\n> (i.e. it starts\n> looking at 23456 once 123 is matched)\n> This was exactly my question.\nsnip\n\nBecause it always moves ahead by either one character or the match,\nbut zero-width constructs do not consume any characters.  That is why\nthey are called zero-width.\n\nsnip\n> Regarding the other question about comparing with Flex, actually there is\n> no need to compare with flex. What I was trying to understand is, why is\n> that\n> it is called zero lookahead rule when the number of chars it looks ahead\n> depends\n> on the rule I write. For example, the regex in the above rule looks ahead 3\n> chars\n> ahead to find a match ..\nsnip\n\nBecause it is not called zero lookahead, it is called zero-width\npositive lookahead assertion, that is it consumes zero characters from\nthe string while at the same time causing the match to fail if the\nassertion does not match.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}