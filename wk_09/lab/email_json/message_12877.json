{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11975: Fix TDR testsuite without using our. in\n\tfile:///home/jelmer/bzr.samba/SAMBA_4_0/", "body": "At file:///home/jelmer/bzr.samba/SAMBA_4_0/\n\n------------------------------------------------------------\nrevno: 11975\nrevision-id: jelmer@samba.org-20070422114018-a4qub9vrc82f8bb5\nparent: svn-v2:22452@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0\ncommitter: Jelmer Vernooij \nbranch nick: SAMBA_4_0\ntimestamp: Sun 2007-04-22 13:40:18 +0200\nmessage:\n  Fix TDR testsuite without using our.\nmodified:\n  source/pidl/lib/Parse/Pidl/Samba4/TDR.pm svn-v2:12463@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fpidl%2flib%2fParse%2fPidl%2fSamba4%2fTDR.pm\n  source/pidl/tests/tdr.pl       svn-v2:21433@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fpidl%2ftests%2ftdr.pl\n=== modified file 'source/pidl/lib/Parse/Pidl/Samba4/TDR.pm'\n--- a/source/pidl/lib/Parse/Pidl/Samba4/TDR.pm\t2007-04-19 01:26:15 +0000\n+++ b/source/pidl/lib/Parse/Pidl/Samba4/TDR.pm\t2007-04-22 11:40:18 +0000\n@@ -17,14 +17,16 @@\n \n use strict;\n \n-my $ret;\n-my $ret_hdr;\n-my $tabs = \"\";\n+sub new($) {\n+\tmy ($class) = shift;\n+\tmy $self = { ret => \"\", ret_hdr => \"\", tabs => \"\" };\n+\tbless($self, $class);\n+}\n \n-sub indent() { $tabs.=\"\\t\"; }\n-sub deindent() { $tabs = substr($tabs, 1); }\n-sub pidl($) { $ret .= $tabs.(shift).\"\\n\"; }\n-sub pidl_hdr($) { $ret_hdr .= (shift).\"\\n\"; }\n+sub indent($) { my $self = shift; $self->{tabs}.=\"\\t\"; }\n+sub deindent($) { my $self = shift; $self->{tabs} = substr($self->{tabs}, 1); }\n+sub pidl($$) { my $self = shift; $self->{ret} .= $self->{tabs}.(shift).\"\\n\"; }\n+sub pidl_hdr($$) { my $self = shift; $self->{ret_hdr} .= (shift).\"\\n\"; }\n sub typearg($) { \n \tmy $t = shift; \n \treturn(\", const char *name\") if ($t eq \"print\");\n@@ -32,10 +34,14 @@\n \treturn(\"\");\n }\n \n-sub fn_declare($$)\n+sub fn_declare($$$)\n {\n-\tmy ($p, $d) = @_;\n-\tif ($p) { pidl $d; pidl_hdr \"$d;\"; } else { pidl \"static $d\"; }\n+\tmy ($self, $p, $d) = @_;\n+\tif ($p) { \n+\t\t$self->pidl($d); $self->pidl_hdr(\"$d;\"); \n+\t} else { \n+\t\t$self->pidl(\"static $d\"); \n+\t}\n }\n \n sub ContainsArray($)\n@@ -50,9 +56,9 @@\n \treturn 0;\n }\n \n-sub ParserElement($$$)\n+sub ParserElement($$$$)\n {\n-\tmy ($e,$t,$env) = @_;\n+\tmy ($self, $e,$t,$env) = @_;\n \tmy $switch = \"\";\n \tmy $array = \"\";\n \tmy $name = \"\";\n@@ -67,10 +73,10 @@\n \t}\n \n \tif (has_property($e, \"flag\")) {\n-\t\tpidl \"{\";\n-\t\tindent;\n-\t\tpidl \"uint32_t saved_flags = tdr->flags;\";\n-\t\tpidl \"tdr->flags |= $e->{PROPERTIES}->{flag};\";\n+\t\t$self->pidl(\"{\");\n+\t\t$self->indent;\n+\t\t$self->pidl(\"uint32_t saved_flags = tdr->flags;\");\n+\t\t$self->pidl(\"tdr->flags |= $e->{PROPERTIES}->{flag};\");\n \t}\n \n \tif (has_property($e, \"charset\")) {\n@@ -79,7 +85,7 @@\n \t\tmy $len = ParseExpr(@{$e->{ARRAY_LEN}}[0], $env, $e);\n \t\tif ($len eq \"*\") { $len = \"-1\"; }\n \t\t$name = \", mem_ctx\" if ($t eq \"pull\");\n-\t\tpidl \"TDR_CHECK(tdr_$t\\_charset(tdr$name, &v->$e->{NAME}, $len, sizeof($e->{TYPE}_t), CH_$e->{PROPERTIES}->{charset}));\";\n+\t\t$self->pidl(\"TDR_CHECK(tdr_$t\\_charset(tdr$name, &v->$e->{NAME}, $len, sizeof($e->{TYPE}_t), CH_$e->{PROPERTIES}->{charset}));\");\n \t\treturn;\n \t}\n \n@@ -91,12 +97,12 @@\n \t\tmy $len = ParseExpr($e->{ARRAY_LEN}[0], $env, $e);\n \n \t\tif ($t eq \"pull\" and not is_constant($len)) {\n-\t\t\tpidl \"TDR_ALLOC(mem_ctx, v->$e->{NAME}, $len);\";\n+\t\t\t$self->pidl(\"TDR_ALLOC(mem_ctx, v->$e->{NAME}, $len);\");\n \t\t\t$mem_ctx = \"v->$e->{NAME}\";\n \t\t}\n \n-\t\tpidl \"for (i = 0; i < $len; i++) {\";\n-\t\tindent;\n+\t\t$self->pidl(\"for (i = 0; i < $len; i++) {\");\n+\t\t$self->indent;\n \t\t$array = \"[i]\";\n \t}\n \n@@ -105,116 +111,116 @@\n \t}\n \n \tif (has_property($e, \"value\") && $t eq \"push\") {\n-\t\tpidl \"v->$e->{NAME} = \".ParseExpr($e->{PROPERTIES}->{value}, $env, $e).\";\";\n+\t\t$self->pidl(\"v->$e->{NAME} = \".ParseExpr($e->{PROPERTIES}->{value}, $env, $e).\";\");\n \t}\n \n-\tpidl \"TDR_CHECK(tdr_$t\\_$e->{TYPE}(tdr$name$switch, &v->$e->{NAME}$array));\";\n+\t$self->pidl(\"TDR_CHECK(tdr_$t\\_$e->{TYPE}(tdr$name$switch, &v->$e->{NAME}$array));\");\n \n-\tif ($array) { deindent; pidl \"}\"; }\n+\tif ($array) { $self->deindent; $self->pidl(\"}\"); }\n \n \tif (has_property($e, \"flag\")) {\n-\t\tpidl \"tdr->flags = saved_flags;\";\n-\t\tdeindent;\n-\t\tpidl \"}\";\n+\t\t$self->pidl(\"tdr->flags = saved_flags;\");\n+\t\t$self->deindent;\n+\t\t$self->pidl(\"}\");\n \t}\n }\n \n-sub ParserStruct($$$$)\n+sub ParserStruct($$$$$)\n {\n-\tmy ($e,$t,$p) = @_;\n+\tmy ($self, $e,$t,$p) = @_;\n \n-\tfn_declare($p,\"NTSTATUS tdr_$t\\_$e->{NAME} (struct tdr_$t *tdr\".typearg($t).\", struct $e->{NAME} *v)\");\n-\tpidl \"{\"; indent;\n-\tpidl \"int i;\" if (ContainsArray($e));\n+\t$self->fn_declare($p,\"NTSTATUS tdr_$t\\_$e->{NAME} (struct tdr_$t *tdr\".typearg($t).\", struct $e->{NAME} *v)\");\n+\t$self->pidl(\"{\"); $self->indent;\n+\t$self->pidl(\"int i;\") if (ContainsArray($e));\n \n \tif ($t eq \"print\") {\n-\t\tpidl \"tdr->print(tdr, \\\"\\%-25s: struct $e->{NAME}\\\", name);\";\n-\t\tpidl \"tdr->level++;\";\n+\t\t$self->pidl(\"tdr->print(tdr, \\\"\\%-25s: struct $e->{NAME}\\\", name);\");\n+\t\t$self->pidl(\"tdr->level++;\");\n \t}\n \n \tmy %env = map { $_->{NAME} => \"v->$_->{NAME}\" } @{$e->{ELEMENTS}};\n \t$env{\"this\"} = \"v\";\n-\tParserElement($_, $t, \\%env) foreach (@{$e->{ELEMENTS}});\n+\t$self->ParserElement($_, $t, \\%env) foreach (@{$e->{ELEMENTS}});\n \t\n \tif ($t eq \"print\") {\n-\t\tpidl \"tdr->level--;\";\n+\t\t$self->pidl(\"tdr->level--;\");\n \t}\n \n-\tpidl \"return NT_STATUS_OK;\";\n+\t$self->pidl(\"return NT_STATUS_OK;\");\n \n-\tdeindent; pidl \"}\";\n+\t$self->deindent; $self->pidl(\"}\");\n }\n \n-sub ParserUnion($$$)\n+sub ParserUnion($$$$)\n {\n-\tmy ($e,$t,$p) = @_;\n+\tmy ($self, $e,$t,$p) = @_;\n \n-\tfn_declare($p,\"NTSTATUS tdr_$t\\_$e->{NAME}(struct tdr_$t *tdr\".typearg($t).\", int level, union $e->{NAME} *v)\");\n-\tpidl \"{\"; indent;\n-\tpidl \"int i;\" if (ContainsArray($e));\n+\t$self->fn_declare($p,\"NTSTATUS tdr_$t\\_$e->{NAME}(struct tdr_$t *tdr\".typearg($t).\", int level, union $e->{NAME} *v)\");\n+\t$self->pidl(\"{\"); $self->indent;\n+\t$self->pidl(\"int i;\") if (ContainsArray($e));\n \n \tif ($t eq \"print\") {\n-\t\tpidl \"tdr->print(tdr, \\\"\\%-25s: union $e->{NAME}\\\", name);\";\n-\t\tpidl \"tdr->level++;\";\n+\t\t$self->pidl(\"tdr->print(tdr, \\\"\\%-25s: union $e->{NAME}\\\", name);\");\n+\t\t$self->pidl(\"tdr->level++;\");\n \t}\n \t\n-\tpidl \"switch (level) {\"; indent;\n+\t$self->pidl(\"switch (level) {\"); $self->indent;\n \tforeach (@{$e->{ELEMENTS}}) {\n \t\tif (has_property($_, \"case\")) {\n-\t\t\tpidl \"case \" . $_->{PROPERTIES}->{case} . \":\";\n+\t\t\t$self->pidl(\"case \" . $_->{PROPERTIES}->{case} . \":\");\n \t\t} elsif (has_property($_, \"default\")) {\n-\t\t\tpidl \"default:\";\n+\t\t\t$self->pidl(\"default:\");\n \t\t}\n-\t\tindent; ParserElement($_, $t, {}); deindent;\n-\t\tpidl \"break;\";\n+\t\t$self->indent; $self->ParserElement($_, $t, {}); $self->deindent;\n+\t\t$self->pidl(\"break;\");\n \t}\n-\tdeindent; pidl \"}\";\n+\t$self->deindent; $self->pidl(\"}\");\n \n \tif ($t eq \"print\") {\n-\t\tpidl \"tdr->level--;\";\n+\t\t$self->pidl(\"tdr->level--;\");\n \t}\n \t\n-\tpidl \"return NT_STATUS_OK;\\n\";\n-\tdeindent; pidl \"}\";\n+\t$self->pidl(\"return NT_STATUS_OK;\\n\");\n+\t$self->deindent; $self->pidl(\"}\");\n }\n \n-sub ParserBitmap($$$)\n+sub ParserBitmap($$$$)\n {\n-\tmy ($e,$t,$p) = @_;\n+\tmy ($self,$e,$t,$p) = @_;\n \treturn if ($p);\n-\tpidl \"#define tdr_$t\\_$e->{NAME} tdr_$t\\_\" . Parse::Pidl::Typelist::bitmap_type_fn($e);\n+\t$self->pidl(\"#define tdr_$t\\_$e->{NAME} tdr_$t\\_\" . Parse::Pidl::Typelist::bitmap_type_fn($e));\n }\n \n-sub ParserEnum($$$)\n+sub ParserEnum($$$$)\n {\n-\tmy ($e,$t,$p) = @_;\n+\tmy ($self,$e,$t,$p) = @_;\n \tmy $bt = ($e->{PROPERTIES}->{base_type} or \"uint8\");\n \t\n-\tfn_declare($p, \"NTSTATUS tdr_$t\\_$e->{NAME} (struct tdr_$t *tdr\".typearg($t).\", enum $e->{NAME} *v)\");\n-\tpidl \"{\";\n+\t$self->fn_declare($p, \"NTSTATUS tdr_$t\\_$e->{NAME} (struct tdr_$t *tdr\".typearg($t).\", enum $e->{NAME} *v)\");\n+\t$self->pidl(\"{\");\n \tif ($t eq \"pull\") {\n-\t\tpidl \"\\t$bt\\_t r;\";\n-\t\tpidl \"\\tTDR_CHECK(tdr_$t\\_$bt(tdr, mem_ctx, \\&r));\";\n-\t\tpidl \"\\t*v = r;\";\n+\t\t$self->pidl(\"\\t$bt\\_t r;\");\n+\t\t$self->pidl(\"\\tTDR_CHECK(tdr_$t\\_$bt(tdr, mem_ctx, \\&r));\");\n+\t\t$self->pidl(\"\\t*v = r;\");\n \t} elsif ($t eq \"push\") {\n-\t\tpidl \"\\tTDR_CHECK(tdr_$t\\_$bt(tdr, ($bt\\_t *)v));\";\n+\t\t$self->pidl(\"\\tTDR_CHECK(tdr_$t\\_$bt(tdr, ($bt\\_t *)v));\");\n \t} elsif ($t eq \"print\") {\n-\t\tpidl \"\\t/* FIXME */\";\n+\t\t$self->pidl(\"\\t/* FIXME */\");\n \t}\n-\tpidl \"\\treturn NT_STATUS_OK;\";\n-\tpidl \"}\";\n-}\n-\n-sub ParserTypedef($$$)\n-{\n-\tmy ($e,$t,$p) = @_;\n-\n-\tParserType($e->{DATA},$t);\n-}\n-\n-sub ParserType($$)\n-{\n-\tmy ($e,$t) = @_;\n+\t$self->pidl(\"\\treturn NT_STATUS_OK;\");\n+\t$self->pidl(\"}\");\n+}\n+\n+sub ParserTypedef($$$$)\n+{\n+\tmy ($self, $e,$t,$p) = @_;\n+\n+\t$self->ParserType($e->{DATA},$t);\n+}\n+\n+sub ParserType($$$)\n+{\n+\tmy ($self, $e,$t) = @_;\n \n \treturn if (has_property($e, \"no$t\"));\n \n@@ -224,53 +230,52 @@\n \t\tTYPEDEF => \\&ParserTypedef\n \t};\n \t\n-\t$handlers->{$e->{TYPE}}->($e, $t, has_property($e, \"public\")) \n+\t$handlers->{$e->{TYPE}}->($self, $e, $t, has_property($e, \"public\")) \n \t\tif (defined($handlers->{$e->{TYPE}}));\n \n-\tpidl \"\";\n+\t$self->pidl(\"\");\n }\n \n-sub ParserInterface($)\n+sub ParserInterface($$)\n {\n-\tmy $x = shift;\n+\tmy ($self,$x) = @_;\n \t\n-\tpidl_hdr \"#ifndef __TDR_$x->{NAME}_HEADER__\";\n-\tpidl_hdr \"#define __TDR_$x->{NAME}_HEADER__\";\n+\t$self->pidl_hdr(\"#ifndef __TDR_$x->{NAME}_HEADER__\");\n+\t$self->pidl_hdr(\"#define __TDR_$x->{NAME}_HEADER__\");\n \n \tforeach (@{$x->{DATA}}) {\n-\t\tParserType($_, \"pull\");\n-\t\tParserType($_, \"push\");\n-\t\tParserType($_, \"print\");\n+\t\t$self->ParserType($_, \"pull\");\n+\t\t$self->ParserType($_, \"push\");\n+\t\t$self->ParserType($_, \"print\");\n \t}\n \n-\tpidl_hdr \"#endif /* __TDR_$x->{NAME}_HEADER__ */\";\n+\t$self->pidl_hdr(\"#endif /* __TDR_$x->{NAME}_HEADER__ */\");\n }\n \n-sub Parser($$$)\n+sub Parser($$$$)\n {\n-\tmy ($idl,$hdrname,$baseheader) = @_;\n-\t$ret = \"\"; $ret_hdr = \"\";\n-\tpidl \"/* autogenerated by pidl */\";\n+\tmy ($self,$idl,$hdrname,$baseheader) = @_;\n+\t$self->pidl(\"/* autogenerated by pidl */\");\n \tif (is_intree()) {\n-\t\tpidl \"#include \\\"includes.h\\\"\";\n+\t\t$self->pidl(\"#include \\\"includes.h\\\"\");\n \t} else {\n-\t\tpidl \"#include \";\n-\t\tpidl \"#include \";\n-\t\tpidl \"#include \";\n-\t\tpidl \"#include \";\n-\t\tpidl \"#include \";\n-\t\tpidl \"#include \";\n-\t\tpidl \"#include \";\n+\t\t$self->pidl(\"#include \");\n+\t\t$self->pidl(\"#include \");\n+\t\t$self->pidl(\"#include \");\n+\t\t$self->pidl(\"#include \");\n+\t\t$self->pidl(\"#include \");\n+\t\t$self->pidl(\"#include \");\n+\t\t$self->pidl(\"#include \");\n \t}\n-\tpidl \"#include \\\"$hdrname\\\"\";\n-\tpidl \"\";\n-\tpidl_hdr \"/* autogenerated by pidl */\";\n-\tpidl_hdr \"#include \\\"$baseheader\\\"\";\n-\tpidl_hdr choose_header(\"tdr/tdr.h\", \"tdr.h\");\n-\tpidl_hdr \"\";\n+\t$self->pidl(\"#include \\\"$hdrname\\\"\");\n+\t$self->pidl(\"\");\n+\t$self->pidl_hdr(\"/* autogenerated by pidl */\");\n+\t$self->pidl_hdr(\"#include \\\"$baseheader\\\"\");\n+\t$self->pidl_hdr(choose_header(\"tdr/tdr.h\", \"tdr.h\"));\n+\t$self->pidl_hdr(\"\");\n \n-\tforeach (@$idl) { ParserInterface($_) if ($_->{TYPE} eq \"INTERFACE\"); }\t\n-\treturn ($ret_hdr, $ret);\n+\tforeach (@$idl) { $self->ParserInterface($_) if ($_->{TYPE} eq \"INTERFACE\"); }\t\n+\treturn ($self->{ret_hdr}, $self->{ret});\n }\n \n 1;\n\n=== modified file 'source/pidl/tests/tdr.pl'\n--- a/source/pidl/tests/tdr.pl\t2007-02-18 18:44:56 +0000\n+++ b/source/pidl/tests/tdr.pl\t2007-04-22 11:40:18 +0000\n@@ -8,21 +8,23 @@\n use FindBin qw($RealBin);\n use lib \"$RealBin\";\n use Util;\n-use Parse::Pidl::Samba4::TDR qw($ret $ret_hdr ParserType);\n-\n-ParserType({TYPE => \"STRUCT\", NAME => \"foo\", PROPERTIES => {public => 1}}, \"pull\");\n-is($ret, \"NTSTATUS tdr_pull_foo (struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, struct foo *v)\n+use Parse::Pidl::Samba4::TDR qw(ParserType);\n+\n+my $tdr = new Parse::Pidl::Samba4::TDR();\n+\n+$tdr->ParserType({TYPE => \"STRUCT\", NAME => \"foo\", PROPERTIES => {public => 1}}, \"pull\");\n+is($tdr->{ret}, \"NTSTATUS tdr_pull_foo (struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, struct foo *v)\n {\n \treturn NT_STATUS_OK;\n }\n \n \");\n-is($ret_hdr, \"NTSTATUS tdr_pull_foo (struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, struct foo *v);\\n\");\n-\n-$ret = \"\"; $ret_hdr = \"\";\n-\n-ParserType({TYPE => \"UNION\", NAME => \"bar\", PROPERTIES => {public => 1}}, \"pull\");\n-is($ret, \"NTSTATUS tdr_pull_bar(struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, int level, union bar *v)\n+is($tdr->{ret_hdr}, \"NTSTATUS tdr_pull_foo (struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, struct foo *v);\\n\");\n+\n+\n+$tdr = new Parse::Pidl::Samba4::TDR();\n+$tdr->ParserType({TYPE => \"UNION\", NAME => \"bar\", PROPERTIES => {public => 1}}, \"pull\");\n+is($tdr->{ret}, \"NTSTATUS tdr_pull_bar(struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, int level, union bar *v)\n {\n \tswitch (level) {\n \t}\n@@ -31,12 +33,11 @@\n }\n \n \");\n-is($ret_hdr, \"NTSTATUS tdr_pull_bar(struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, int level, union bar *v);\\n\");\n-\n-$ret = \"\"; $ret_hdr = \"\";\n-\n-ParserType({TYPE => \"UNION\", NAME => \"bar\", PROPERTIES => {}}, \"pull\");\n-is($ret, \"static NTSTATUS tdr_pull_bar(struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, int level, union bar *v)\n+is($tdr->{ret_hdr}, \"NTSTATUS tdr_pull_bar(struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, int level, union bar *v);\\n\");\n+\n+$tdr = new Parse::Pidl::Samba4::TDR();\n+$tdr->ParserType({TYPE => \"UNION\", NAME => \"bar\", PROPERTIES => {}}, \"pull\");\n+is($tdr->{ret}, \"static NTSTATUS tdr_pull_bar(struct tdr_pull *tdr, TALLOC_CTX *mem_ctx, int level, union bar *v)\n {\n \tswitch (level) {\n \t}\n@@ -45,4 +46,4 @@\n }\n \n \"); \n-is($ret_hdr, \"\");\n+is($tdr->{ret_hdr}, \"\");\n\n"}