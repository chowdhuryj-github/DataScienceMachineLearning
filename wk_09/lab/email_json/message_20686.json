{"category": "ham", "to_address": "\"brian d foy\" <brian.d.foy@gmail.com>, p6l <perl6-language@perl.org>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Re: Default filehandles, or topicalizing filehandles, or something", "body": "On 5/1/07, brian d foy  wrote:\n> I was thinking about default filehandles yesterday. select() doesn't\n> seem to be around except as an \"Unfiled\" function in S16.\n>\n> Then, as I was looking at\n>\n>    .say( \"Hello World\" );\n\nAt various times, I have seen something to the effect of each of the\nfollowing being bandied about:\n\n  $*OUT.say( \"Hello World\" );\n  \"Hello World\".say;\n\nThat is, both filehandles and strings have 'say' methods that do\nessentially the same thing, but using subtly different syntax.  How\nwould I use &(\"Hello World\".say) to write to filehandle $FH?  My gut\nreaction would be to use an adverb for the purpose:\n\n  \"Hello World\".say :to($FH);\n\nThis would also work for the sub version:\n\n  say :to($FH) \"Hello World\";\n\nWith this in mind, you probably could create a localized alias for\n'say', if you wanted to:\n\n  {\n    my &say := &OUTER::say.assuming(:to($FH));\n    say \"Hello World\"; # same as 'say \"Hello World\" :to($FH);'\n  }\n\nThe catch with this is that you'd have to do this for each output\nroutine separately.\n\nHow about this: Do the output routines default to the global\nfilehandles directly, or do they default to lexical bindings of them?\nThat is, does 'say' output to $*OUT in the absence of an explicit\nfilehandle, or does it output to $OUT (with the latter normally being\nbound to $*OUT)?  If the latter, you should be able to redirect all of\nyour output in the rest of the current scope by saying:\n\n  $OUT := $*ERR;\n\nI can understand not being able to rebind the global filehandles.\nAfter all: once they're rebound, how would you ever find what they\nwere originally bound to?\n\n-- \nJonathan \"Dataweaver\" Lang\n\n"}