{"category": "ham", "to_address": "parrot-porters@perl.org", "from_address": "Jonathan Worthington <jonathan@jnthn.net>", "subject": "PDD15 implementation status", "body": "Hi,\n\nWith much of PDD15 implemented, I thought it'd be good to explain how \nfar along we are (and aren't) as the next release approaches. Here's \nsome code examples.\n\n---\n# You can initialize a class with a hash...\n$P0 = new 'Hash'\n\n# Set name Will also associate with Monkey namespace nested in current NS.\n# You can set $P0['namespace'] instead (or as well) to specify a full keyed\n# namespace, which is taken to be from the HLL root.\n$P0['name'] = 'Monkey'\n\n# Make an array of attributes.\n$P1 = new 'ResizableStringArray'\n$P1[0] = 'banana'\n$P0['attributes'] = $P1\n\n# Let's create a class!\n$P1 = new 'Class', $P0\n\n# You can add stuff to it later too, provided it ain't instantiated yet.\n$P2 = find_global 'say_ook'\nadd_method $P1, 'say_ook', $P2\n\n# Add parents...\n$P2 = get_class 'Primate'\nadd_parent $P1, $P2\n\n# Create a role...\n$P0 = new 'Hash'\n$P0['name'] = 'JungleActivities'\n$P2 = new 'Role', $P0\n$P3 = find_global 'ja_swing'\nadd_method $P2, 'swing', $P3\n\n# And compose it in! If we wanted to resolve conflicts, can use \n'add_role' method.\nadd_role $P1, $P2\n\n# Instantiate it.\n$P2 = $P2.new()\n\n# Call methods and get/set attributes just as before.\n$P2.swing()\n$P3 = new 'Banana'\nsetattribute $P2, 'banana', $P3\n$P2.say_ook()\n\n# Inspect a class to find out about its guts.\n$P3 = inspect $P1\n$P4 = inspect $P1, 'attributes'\n\n# Here's now to instantiate a class associated with a given namespace...\n$P5 = get_class [ 'Creation', 'Animals', 'Monkey' ]\n$P6 = $P5.new()\n---\n\nExcuse any typo's in the above. As you can see, fairly capable. However, \nthere's still some work to do and limitations.\n\n* addattribute segfaults if passed a PDD15 class. I'll fix that \ntomorrow, if nobody beats me to it\n\n* Oh, and the Role PMC doesn't do the name/namespace stuff right yet; \nit's mostly a case of looking at the Class PMC and stealing stuff. \nDoable before release...again, please beat me to it. ;-)\n\n* The Object PMC is missing some vtable methods and its guts need \nsorting out - also probably doable before release - I'll have time for \nthis pre-release too\n\n* You can't inherit from a PMC yet. Depends on needed stuff being spec'd \nand implemented.\n\n* Overriding of vtable methods ain't implemented yet\n\n* Attribute composition from roles ain't implemented yet\n\nSo I think we're looking at having PDD15 usable by some people in this \nrelease, but not being able to inherit from PMCs is going to prevent a \nlot of people jumping over to it just yet. It'll probably be a little \nwhile before we can really deprecate ParrotClass and ParrotObject. What \nwe certainly need is more test coverage and feedback from people using \nthe new stuff.\n\nI'm aware that I probably have the most in-depth knowledge of the PDD15 \nimplementation. Parrot's losing me for pretty much all of May, so if \nanyone has questions on the code, please try and catch me about them \nwithin the next week, either on list or IRC.\n\nHave fun,\n\nJonathan\n\n"}