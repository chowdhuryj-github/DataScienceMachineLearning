{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 495: use a priority time for the election data,\n\tnot just the vnn in http://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 495\nrevision-id: tridge@samba.org-20070607083727-7839ezzz8od0tndc\nparent: tridge@samba.org-20070607081314-uvsnbz2gwbqsc0am\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Thu 2007-06-07 18:37:27 +1000\nmessage:\n  use a priority time for the election data, not just the vnn\nmodified:\n  common/ctdb_client.c           ctdb_client.c-20070411010216-3kd8v37k61steeya-1\n  common/ctdb_recoverd.c         recoverd.c-20070503213540-bvxuyd9jm1f7ig90-1\n=== modified file 'common/ctdb_client.c'\n--- a/common/ctdb_client.c\t2007-06-07 08:05:25 +0000\n+++ b/common/ctdb_client.c\t2007-06-07 08:37:27 +0000\n@@ -1968,7 +1968,7 @@\n \n \tif (outdata.dsize != sizeof(*tunables)) {\n \t\tDEBUG(0,(__location__ \" bad data size %u in ctdb_ctrl_get_all_tunables should be %u\\n\",\n-\t\t\t outdata.dsize, sizeof(*tunables)));\n+\t\t\t (unsigned)outdata.dsize, (unsigned)sizeof(*tunables)));\n \t\treturn -1;\t\t\n \t}\n \n\n=== modified file 'common/ctdb_recoverd.c'\n--- a/common/ctdb_recoverd.c\t2007-06-07 08:05:25 +0000\n+++ b/common/ctdb_recoverd.c\t2007-06-07 08:37:27 +0000\n@@ -42,6 +42,7 @@\n \tuint32_t culprit_counter;\n \tstruct timeval first_recover_time;\n \tstruct ban_state **banned_nodes;\n+\tstruct timeval priority_time;\n };\n \n #define CONTROL_TIMEOUT() timeval_current_ofs(ctdb->tunable.recover_timeout, 0)\n@@ -79,7 +80,7 @@\n \tstruct ctdb_recoverd *rec = state->rec;\n \tuint32_t vnn = state->banned_node;\n \n-\tDEBUG(0,(\"Node %u in now unbanned\\n\", vnn));\n+\tDEBUG(0,(\"Node %u is now unbanned\\n\", vnn));\n \tctdb_unban_node(rec, vnn);\n }\n \n@@ -95,6 +96,11 @@\n \t\treturn;\n \t}\n \n+\tif (vnn == ctdb->vnn) {\n+\t\t/* banning ourselves - lower our election priority */\n+\t\trec->priority_time = timeval_current();\n+\t}\n+\n \tctdb_ctrl_modflags(ctdb, CONTROL_TIMEOUT(), vnn, NODE_FLAGS_BANNED, 0);\n \n \trec->banned_nodes[vnn] = talloc(rec, struct ban_state);\n@@ -778,22 +784,25 @@\n \n struct election_message {\n \tuint32_t vnn;\n+\tstruct timeval priority_time;\n };\n \n \n /*\n   send out an election request\n  */\n-static int send_election_request(struct ctdb_context *ctdb, TALLOC_CTX *mem_ctx, uint32_t vnn)\n+static int send_election_request(struct ctdb_recoverd *rec, TALLOC_CTX *mem_ctx, uint32_t vnn)\n {\n \tint ret;\n \tTDB_DATA election_data;\n \tstruct election_message emsg;\n \tuint64_t srvid;\n+\tstruct ctdb_context *ctdb = rec->ctdb;\n \t\n \tsrvid = CTDB_SRVID_RECOVERY;\n \n \temsg.vnn = vnn;\n+\temsg.priority_time = rec->priority_time;\n \n \telection_data.dsize = sizeof(struct election_message);\n \telection_data.dptr  = (unsigned char *)&emsg\n@@ -826,6 +835,7 @@\n \tint ret;\n \tstruct election_message *em = (struct election_message *)data.dptr;\n \tTALLOC_CTX *mem_ctx;\n+\tint cmp;\n \n \tmem_ctx = talloc_new(ctdb);\n \t\t\n@@ -833,11 +843,9 @@\n \t   and if we disagree and we would rather be the elected node, \n \t   send a new election message to all other nodes\n \t */\n-\t/* for now we just check the vnn number and allow the lowest\n-\t   vnn number to become recovery master\n-\t */\n-\tif (em->vnn > ctdb_get_vnn(ctdb)) {\n-\t\tret = send_election_request(ctdb, mem_ctx, ctdb_get_vnn(ctdb));\n+\tcmp = timeval_compare(&em->priority_time, &rec->priority_time);\n+\tif (cmp > 0 || (cmp == 0 && em->vnn > ctdb->vnn)) {\n+\t\tret = send_election_request(rec, mem_ctx, ctdb_get_vnn(ctdb));\n \t\tif (ret!=0) {\n \t\t\tDEBUG(0, (__location__ \" failed to initiate recmaster election\"));\n \t\t}\n@@ -846,7 +854,7 @@\n \t}\n \n \t/* release the recmaster lock */\n-\tif (em->vnn != ctdb_get_vnn(ctdb) &&\n+\tif (em->vnn != ctdb->vnn &&\n \t    ctdb->recovery_lock_fd != -1) {\n \t\tclose(ctdb->recovery_lock_fd);\n \t\tctdb->recovery_lock_fd = -1;\n@@ -896,9 +904,11 @@\n /*\n   force the start of the election process\n  */\n-static void force_election(struct ctdb_context *ctdb, TALLOC_CTX *mem_ctx, uint32_t vnn, struct ctdb_node_map *nodemap)\n+static void force_election(struct ctdb_recoverd *rec, TALLOC_CTX *mem_ctx, uint32_t vnn, \n+\t\t\t   struct ctdb_node_map *nodemap)\n {\n \tint ret;\n+\tstruct ctdb_context *ctdb = rec->ctdb;\n \n \t/* set all nodes to recovery mode to stop all internode traffic */\n \tret = set_recovery_mode(ctdb, nodemap, CTDB_RECOVERY_ACTIVE);\n@@ -907,7 +917,7 @@\n \t\treturn;\n \t}\n \t\n-\tret = send_election_request(ctdb, mem_ctx, vnn);\n+\tret = send_election_request(rec, mem_ctx, vnn);\n \tif (ret!=0) {\n \t\tDEBUG(0, (__location__ \" failed to initiate recmaster election\"));\n \t\treturn;\n@@ -1002,6 +1012,8 @@\n \trec->banned_nodes = talloc_zero_array(rec, struct ban_state *, ctdb->num_nodes);\n \tCTDB_NO_MEMORY_FATAL(ctdb, rec->banned_nodes);\n \n+\trec->priority_time = timeval_current();\n+\n \t/* register a message port for recovery elections */\n \tctdb_set_message_handler(ctdb, CTDB_SRVID_RECOVERY, election_handler, rec);\n \n@@ -1082,7 +1094,7 @@\n \n \tif (recmaster == (uint32_t)-1) {\n \t\tDEBUG(0,(__location__ \" Initial recovery master set - forcing election\\n\"));\n-\t\tforce_election(ctdb, mem_ctx, vnn, nodemap);\n+\t\tforce_election(rec, mem_ctx, vnn, nodemap);\n \t\tgoto again;\n \t}\n \t\n@@ -1095,13 +1107,13 @@\n \n \tif (j == nodemap->num) {\n \t\tDEBUG(0, (\"Recmaster node %u not in list. Force reelection\\n\", recmaster));\n-\t\tforce_election(ctdb, mem_ctx, vnn, nodemap);\n+\t\tforce_election(rec, mem_ctx, vnn, nodemap);\n \t\tgoto again;\n \t}\n \n \tif (nodemap->nodes[j].flags & NODE_FLAGS_INACTIVE) {\n \t\tDEBUG(0, (\"Recmaster node %u no longer available. Force reelection\\n\", nodemap->nodes[j].vnn));\n-\t\tforce_election(ctdb, mem_ctx, vnn, nodemap);\n+\t\tforce_election(rec, mem_ctx, vnn, nodemap);\n \t\tgoto again;\n \t}\n \t\n@@ -1131,7 +1143,7 @@\n \n \t\tif (recmaster!=vnn) {\n \t\t\tDEBUG(0, (\"Node %u does not agree we are the recmaster. Force reelection\\n\", nodemap->nodes[j].vnn));\n-\t\t\tforce_election(ctdb, mem_ctx, vnn, nodemap);\n+\t\t\tforce_election(rec, mem_ctx, vnn, nodemap);\n \t\t\tgoto again;\n \t\t}\n \t}\n\n"}