{"category": "ham", "to_address": "\"Steve Peters\" <steve@fisharerojo.org>", "from_address": "\"Paul Cochrane\" <paultcochrane@gmail.com>", "subject": "Re: Building with icc", "body": "On 07/06/07, Paul Cochrane  wrote:\n> > perl Configure.pl --cc=icc --link=icc --ld=icc\n>\n> I tried this, but got the following output from Configure.pl:\n>\n> cochrane@avon parrot_svn2 $ perl Configure.pl --cc=icc --link=icc --ld=icc\n> Parrot Version 0.4.12 Configure 2.0\n> Copyright (C) 2001-2007, The Perl Foundation.\n>\n> Hello, I'm Configure. My job is to poke and prod your system to figure out\n> how to build Parrot. The process is completely automated, unless you passed in\n> the `--ask' flag on the command line, in which case it'll prompt you for a few\n> pieces of info.\n>\n> Since you're running this program, you obviously have Perl 5--I'll be pulling\n> some defaults from its configuration.\n>\n> Checking MANIFEST.....................................................done.\n> Setting up Configure's default values.................................done.\n> Setting up installation paths.........................................done.\n> Tweaking settings for miniparrot...................................skipped.\n> Loading platform and local hints files................................done.\n> Determining nongenerated header files.................................done.\n> Determining what C compiler and linker to use.........................done.\n> Determining whether make is installed..................................yes.\n> Determining whether lex is installed...............................skipped.\n> Determining whether yacc is installed..............................skipped.\n> Determining if your C compiler is actually gcc..........................no.\n> Determining if your C compiler is actually Visual C++...................no.\n> Enabling optimization...................................................no.\n> Determining flags for building shared libraries......................-fPIC.\n> Determine if parrot should be linked against a shared library..........yes.\n> Determining what charset files should be compiled in..................done.\n> Determining what encoding files should be compiled in.................done.\n> Determining what types Parrot should use..............................done.\n> Determining what opcode files should be compiled in...................done.\n> Determining what pmc files should be compiled in......................done.\n> Determining your minimum pointer alignment......................... 1 byte.\n> Probing for C headers.................................................done.\n> Determining some sizes................................................done.\n> Computing native byteorder for Parrot's wordsize.............little-endian.\n> Test the type of va_ptr (this test is likely to segfault)...\n> step auto::va_ptr died during execution: Unknown va_ptr type at\n> config/auto/va_ptr.pm line 38.\n>\n>  at Configure.pl line 350\n>\n> Figuring out how to pack() Parrot's types.............................done.\n> Figuring out what formats should be used for sprintf..................done.\n> Determining if your C library has a working S_ISREG....................yes.\n> Determining architecture, OS and JIT capability.......................done.\n> Generating CPU specific stuff.........................................done.\n> Verifying that the compiler supports function pointer casts............yes.\n> Determining whether your compiler supports computed goto...............yes.\n> Determining if your compiler supports inline...........................yes.\n> Determining what allocator to use.....................................done.\n> Determining if your C library supports memalign........................yes.\n> Determining some signal stuff.........................................done.\n> Determining whether there is socklen_t.................................yes.\n> Determining if your C library has setenv / unsetenv...................both.\n> Determining if your platform supports AIO..............................yes.\n> Determining if your platform supports GMP..............................yes.\n> Determining if your platform supports readline.........................yes.\n> Determining if your platform supports gdbm.............................yes.\n> Testing snprintf......................................................done.\n> Determining whether perldoc is installed...............................yes.\n> Determining whether python is installed.........................yes, 2.4.4.\n> Determining whether GNU m4 is installed................................yes.\n> Running CPU specific stuff............................................done.\n> Determining whether ICU is installed...................................yes.\n> Determining Parrot's revision.......................................r18861.\n> Generating C headers...Use of uninitialized value in concatenation (.)\n> or string at (eval 76) line 63, <$in> line 10.\n> Use of uninitialized value in string eq at (eval 76) line 67, <$in> line 10.\n> Use of uninitialized value in string eq at (eval 76) line 73, <$in> line 10.\n> ...............................................done.\n> Generating core pmc list..............................................done.\n> Generating runtime/parrot/include.....................................done.\n> Configuring languages.................................................done.\n> Generating makefiles and other build files............................done.\n> Moving platform files into place......................................done.\n> Recording configuration data for later retrieval......................done.\n> Okay, we're done!\n>\n> You can now use `make' to build your Parrot.\n> (NOTE: do not use `make -j '!)\n> After that, you can use `make test' to run the test suite.\n>\n> Happy Hacking,\n>         The Parrot Team\n>\n>\n> And now make complains with:\n>\n> Makefile:830: *** missing separator.  Stop.\n>\n>\n> My platform is Gentoo Linux x86 and\n>\n> cochrane@avon parrot_svn2 $ icc --version\n> iccbin (ICC) 9.1 20061103\n> Copyright (C) 1985-2006 Intel Corporation.  All rights reserved.\n>\n>\n\nThe va_ptr problem mentioned above comes about because icc isn't\nseeing its own version of stdarg.h.  The fix for this is to add the\npath to icc's headers to the Configure.pl line like so:\n\nperl Configure.pl --cc=icc --link=icc --ld=icc\n--ccflags=-I/opt/intel/compiler91/include/\n\n(you will need to change the path to correspond to that of your\ninstallation of icc).\n\nThis now gets icc building parrot on my linux box.\n\nHope this helps,\n\nPaul\n\n"}