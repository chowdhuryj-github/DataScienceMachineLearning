{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"Dr.Ruud\" <rvtol+news@isolution.nl>", "subject": "Re: freeze after <STDIN>", "body": "Paul Lalli schreef:\n> Ryan:\n\n>> I thought the * character needed a backslash to be taken literally.\n>> But I guess that's only in regular expressions?  I was confused\n>> about that.\n>\n> Correct.  * is not special in a double quoted string.  The only\n> character[s] that always need to be backslashed in a double-quoted\nstring\n> are:\n> $ (otherwise, it's the start of a scalar variable, array element, or\n> hash element)\n> @ (otherwise, it's the start of an array or slice)\n\nAn unescaped @ can be safe, like in \"@\", qq{@}, qq{@=}, etc.\nSo the @ should not be followed by word characters or plus or minus or,\ninside qq{}, any of the delimiters.\nBut better safe than sorry, so yes, it's best to always escape the @\ninside a double quoted string.\n\nSee `perldoc perlop` about qq() and qx() and qx'' and `` and <<.\n\nSee `perldoc perlre` too, because the pattern in any regex, and also the\nRHS (right hand side) of a substitution (s///) are also double quoted\nstrings.\n\n\n> \\ (otherwise, it's the indication that the next character is to be\n> escaped)\n>\n> Characters that *sometimes* need to be backslashed in a double quoted\n> string include:\n> \" (if and only if you're actually using \" as your string delimiter)\n> ' (if it is both preceded by an interpolated variable, and followed by\n> word characters)\n> : (if it is both preceded by an interpolated variable, and followed by\n> a second :, and then word characters)\n> Whatever delimiter you're using if you use the qq{} operator.\n\nFine. A \"bad\" example of what qq() can cope with:\nperl -wle'print qq{a{b}c}'\na{b}c\n\n-- \nAffijn, Ruud\n\n\"Gewoon is een tijger.\"\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}