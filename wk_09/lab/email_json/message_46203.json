{"category": "ham", "to_address": "\"Ron Blaschke\" <ron@rblasch.org>", "from_address": "\"Paul Cochrane\" <paultcochrane@gmail.com>", "subject": "Re: [perl #41569] t/distro/file_metadata.t fails on win32", "body": "On 11/06/07, Ron Blaschke  wrote:\n> jerry gay wrote:\n> > On 6/11/07, Paul Cochrane  wrote:\n> >> On 09/03/07, chromatic  wrote:\n> >> > On Friday 09 March 2007 05:00, Ron Blaschke wrote:\n> >> >\n> >> > > Attached patch replaces the backslashes with slashes on Windows.\n> >> >\n> >> > Would using File::Spec be less fragile?\n> >>\n> >> I've attached a patch which uses File::Spec instead of replacing one\n> >> set of slashes with another.  Comments welcome!  :-)\n> >>\n> > good idea.\n> >\n> > instead of breaking up the path and reconstructing it separately\n> > (since the individual components of the path aren't used anywhere\n> > else,) how about using 'canonpath' to clean up the path in one step.\n> > something like:\n> >\n> >                if ( $result =~ m{(.*) - (.*)} ) {\n> >                    my $file = canonpath $1;\n> >                    my $attribute = $2;\n> >\n> >                    # and add to the results hash\n> >                    $results{$file} = $attribute;\n> >                }\n>\n> I may be missing something here, but I think the problem was that the\n> file name sets in MANIFEST and those reported by svn must match up, but\n> didn't because of the file separator.  MANIFEST uses forward slashes,\n> File::Spec those of the current platform, which probably brings you back\n> to square one.\n\nBut if we convert what MANIFEST provides (i.e. Unix directory\nseparators) into whatever the current platform needs (i.e. what\ncanonpath() does) then it should agree with whatever svn spits out.\nOr am I missing something?\n\nEssentially my patch is just a less fragile version of the patch you\nsubmitted to get this test to work on Windows.  (at least, I don't\nthink I'm changing the functionality that much).\n\nPaul\n\n"}