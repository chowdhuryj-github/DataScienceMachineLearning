{"category": "ham", "to_address": "Bob Rogers <rogers-perl6@rgrjr.dyndns.org>", "from_address": "\"Patrick R. Michaud\" <pmichaud@pobox.com>", "subject": "Re: pdd15 - How do I add a class method?", "body": "On Wed, Jun 20, 2007 at 10:38:08PM -0400, Bob Rogers wrote:\n>    From: \"Patrick R. Michaud\" \n>    On Wed, Jun 20, 2007 at 09:41:00PM -0400, Bob Rogers wrote:\n>    >    Patrick R. Michaud wrote:\n>    >    > My first question is \"How do I add a class method?\" -- i.e.,\n>    >    > a method that operates on a class instance as opposed\n>    >    > to an object instance of that class . . .\n>    > \n>    > A method that operates on a class instance would be an instance method\n>    > of the class metaclass, wouldn't it?  But I think you meant \"on a\n>    > *particular* class [metaclass] instance\", am I right?\n> \n>    Yes, I believe this is a better phrasing.  If I want to define a\n>    new method or or override an existing method on a metaclass instance\n>    [a class], then how do I do that?\n> \n> AFAICS, there isn't currently a good way to do that.  (Depending, of\n> course, on whether you think Jonathan's suggestion qualifies.  ;-)\n> Nor does PDD15 seem to cover this; it actually says very little about\n> metaclasses, beyond just the fact that they exist (and even then only\n> mentions class metaclasses).\n\nTo somewhat see where I came from in this, pdd15 has a =head3\nsection titled \"Class Methods\", where all of the methods appear to\nbe operations on classes, as opposed to instances of the\nclass.  There's also a line in pdd15 that reads:\n\n    =item - Classes are instances of a meta-class and have their \n    own sets of class methods and class attributes\n\nSo, I was wondering how one would create a class method.\n\n>    The particular instance I'm looking at is a C class for\n>    Perl 6, where I want the get_string vtable function for the\n>    C metaclass instance is different from get_string of \n>    a C class object.\n> \n> To me, the phrases \"C metaclass instance\" and \"C class object\"\n> sound like the same thing.  Did you mean \"C object\" in the second\n> case?  \n\nI did.  Apologies for the ambiguity.\n\n> If so, then get_string on the class metaclass would just affect\n> the way the class stringifies, and not any of the instances, but I don't\n> get the point of that.  So I'm sure I must be misunderstanding you.  Do\n> you have an example?  Maybe the perl6 code you mention?\n\nWell, after re-reading S12 this evening I've determined that\nthe perl6 example I was thinking of isn't precisely correct\nfor the current spec, and I think it's better not to confuse \nthe issue (or myself) by trying to describe my incorrect example.\n(Essentially, it had to do with the way the Str class stringifies \nas opposed to the way a Str object stringifies.)\n\nBut, I think I have another way to describe what I'm asking.  \nIn an earlier message [1] Allison wrote that the 'typeof' operator\nwill now return different values for class objects and instances of\nthe class.  For example:\n\n    $P0 = newclass \"Foo\"\n    $P1 = new $P0\n\n    $S0 = typeof $P0   # returns \"Class\"\n    $S1 = typeof $P1   # returns \"Foo\"\n\nI was wanting to know how to do something similar, except with\nget_string instead of typeof.  In particular, the example I've\nbeen thinking of is:\n\n    $P0 = get_class \"Str\"  # get the Str class\n    $P1 = new $P0          # create a Str instance\n    assign $P1, \"XYZ\"      # give it a value\n\n    $S0 = $P0              # returns \"Str\"\n    $S1 = $P1              # returns \"XYZ\"\n\nIn short, I was wondering how I would get a class to stringify\nto its name (or possibly some mocked value), while having \nthe instances of that class continue to stringify to their values.  \n\nAs I mentioned above, my re-reading of S12 may make this\nparticular question moot, although it's important to note\nthat Jonathan apparently encountered something like it as\nwell.  :-)  At any rate, I hope the example here hopes to\nclear up what I was looking for.\n\nAnd thanks for being so patient as I try to get an accurate\ndescription together.  :-)\n\nPm\n\n[1] http://www.nntp.perl.org/group/perl.perl6.internals/2007/06/msg38608.html\n\n"}