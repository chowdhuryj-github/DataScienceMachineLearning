{"category": "ham", "to_address": "Gavin Simpson <gavin.simpson@ucl.ac.uk>", "from_address": "Prof Brian Ripley <ripley@stats.ox.ac.uk>", "subject": "Re: [R] Names of objects passed as ... to a function?", "body": "On Sat, 23 Jun 2007, Gavin Simpson wrote:\n\n> Dear list,\n>\n> I have a function whose first argument is '...'. Each element of '...'\n> is a data frame, and there will be at least 2 data frames in '...'. The\n> function processes each of the data frames in '...' and returns a list,\n> whose components are the processed data frames. I would like to name the\n> components of this returned list with the names of the original data\n> frames.\n>\n> Normally I'd use deparse(substitute()) to do this, but here I do not\n> know the appropriate argument to run deparse(substitute()) on, and doing\n> this on ... only returns a single \"name\":\n>\n>> foo <- function(...)\n> +                 deparse(substitute(...))\n>> dat1 <- rnorm(10)\n>> dat2 <- runif(10)\n>> foo(dat1, dat2)\n> [1] \"dat1\"\n>\n> Can anyone suggest to me a way to get the names of objects passed as\n> the ... argument of a function?\n\nThat's a little tricky.  The following may suffice:\n\nfoo <- function(...)\n{\n   as.character(match.call())[-1]\n}\n\nThe problem is that under certain circumstances match.call can give names \nlike '..2'\n\n> bar <- function(...) foo(...)\n> bar(dat1, dat2)\n[1] \"..1\" \"..2\"\n\nand I don't know a comprehensive R-level solution to that.\n\n-- \nBrian D. Ripley,                  ripley@stats.ox.ac.uk\nProfessor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/\nUniversity of Oxford,             Tel:  +44 1865 272861 (self)\n1 South Parks Road,                     +44 1865 272866 (PA)\nOxford OX1 3TG, UK                Fax:  +44 1865 272595\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}