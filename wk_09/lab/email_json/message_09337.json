{"category": "ham", "to_address": "Alek Storm <alek.storm@gmail.com>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "Alek Storm wrote:\n> \n>> Again, the only part of :method that :vtable needs to imply is the \n>> part that\n>> sets the invocant in the proper register and makes 'self' available \n>> within\n>> the body of the method.\n> \n> So, that still means :method can mean two different things, depending\n> on whether :vtable is present or not.  That's still bad.\n\nHow so? Without :vtable, :method adds a method to the class. With \n:vtable, :method adds a method to the class.\n\nOh, I should add, under the new OO spec, methods don't get entries in \nthe \"namespace\" either, they only get entries in the class itself (since \nyou may have multiple classes with different implementations pointing to \nthe same namespace). It's really that fact more than anything else that \nhas changed my thinking on the appropriate division of sub modifiers.\n\nAllison\n\n"}