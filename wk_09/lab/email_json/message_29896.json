{"category": "ham", "to_address": "Andrew Bartlett <abartlet@samba.org>", "from_address": "Michael B Allen <mba2000@ioplex.com>", "subject": "Re: Does PAC Validation Require External Communication?", "body": "On Tue, 15 May 2007 11:27:48 +1000\nAndrew Bartlett  wrote:\n\n> On Mon, 2007-05-14 at 20:17 -0400, Michael B Allen wrote:\n> > On Tue, 15 May 2007 09:29:14 +1000\n> > Andrew Bartlett  wrote:\n> > \n> > > > > spoof their way to any (CIFS) user via the PAC, because they could make\n> > > > > up a fake one.  Similarly, as always with kerberos, they could change\n> > > > > the principal in the ticket, etc. \n> > > > > \n> > > > > This can be worked around by validating the PAC to the KDC, but should\n> > > > > be of concern to anyone who shares that keytab too broadly (eg with\n> > > > > apache). \n> > > > \n> > > > So exploring the Apache example a little more - if Apache loaded the\n> > > > keytab as root when it initialized and stored it in an in-memory only\n> > > > keytab so that workers didn't really have access to it\n> > > \n> > > You would need to *ensure* the workers didn't have access to it.  (ie,\n> > > the GSSAPI authentication should go via a IPC mechanism.\n> > \n> > Or one of the lower level Kerberos checksum verification routines. Sounds\n> > more complicated than it's worth but definitely something to keep in mind.\n> \n> One of the advantages of the work that Love has done to put the PAC\n> validation into the kerberos library is that we could potentially\n> seperate all kerberos processing into a locked-down selinux-protected\n> special user.  Then the various system tools wanting to do kerberos\n> would not need the long-term keys, but could still get stuff like the\n> PAC back, validated.\n> \n> Likewise, I think a similar tool (achieving the same ideas as the\n> winbind kinit integration, possibly such as kcm?) could handle all the\n> kerberos, keeping the user's TGT away from the desktop apps. \n\nJust in case Love suddenly get's inspired by all of this - rather than\nrequiring a specific process model, I would like to see just a socket\ndescriptor and a function to process the server side so that I can use\nit with existing muxer code. I don't want to crap up my process table\nwith daemons. Also, the IPC should be well defined and simple so that\nI can go that low if I want.\n\nMike\n\n"}