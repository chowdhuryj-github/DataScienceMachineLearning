{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14373 - doc/trunk/design/syn", "body": "Author: larry\nDate: Fri Apr 13 16:23:17 2007\nNew Revision: 14373\n\nModified:\n   doc/trunk/design/syn/S03.pod\n\nLog:\nRanges over enums and such also can use *, suggested by Jonathan Lang++\n\n\nModified: doc/trunk/design/syn/S03.pod\n==============================================================================\n--- doc/trunk/design/syn/S03.pod\t(original)\n+++ doc/trunk/design/syn/S03.pod\tFri Apr 13 16:23:17 2007\n@@ -14,7 +14,7 @@\n   Date: 8 Mar 2004\n   Last Modified: 13 Apr 2007\n   Number: 3\n-  Version: 111\n+  Version: 112\n \n =head1 Overview\n \n@@ -749,7 +749,7 @@\n These operators compare their operands using numeric, string,\n or C semantics respectively, and depending on the order return\n one of C, C, or C\n-(which numerify to -1, 0, or +1).  See L.\n+(which numerify to -1, 0, or +1).  See L.\n \n =item *\n \n@@ -2104,18 +2104,20 @@\n     2.1 ~~ 1..2    # false, equivalent to 1 <= 2.1 <= 2\n \n If a C<*> (see the \"Whatever\" type in S02) occurs on the right side\n-of a range, it is taken to mean \"positive infinity\" in whatever space\n-the range is operating.  A C<*> on the left means \"negative infinity\"\n-for types that support negative values. (The sign of those infinities\n-reverses for a negative step.)  If the C<*> occurs on one side but\n-not the other, the type is inferred from the other argument.  A star\n-on both sides will match any value that supports the C role.\n+of a range, it is taken to mean \"positive infinity\" in whatever\n+typespace the range is operating, as inferred from the left operand.\n+A C<*> on the left means \"negative infinity\" for types that support\n+negative values, and the first value in the typespace otherwise as\n+inferred from the right operand.  (For signed infinities the signs\n+reverse for a negative step.)  A star on both sides prevents any type\n+from being inferred other than the C role.\n \n     0..*        # 0 .. +Inf\n     'a'..*      # 'a' .. 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzz...'\n     *..0        # -Inf .. 0\n     *..*        # \"-Inf .. +Inf\", really Ordered\n     1.2.3..*    # Any version higher than 1.2.3.\n+    May..*      # May through December\n \n Note: infinite lists are constructed lazily.  And even though C<*..*>\n can't be constructed at all, it's still useful as a selector object.\n\n"}