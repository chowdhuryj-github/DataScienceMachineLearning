{"category": "ham", "to_address": "\"Speakup is a screen review system for Linux.\" <speakup@braille.uwo.ca>", "from_address": "\"Spie Sutherland\" <spie@proficio.ca>", "subject": "Re: gentoo dropping speakup support", "body": "Speakup does use modules, and it can be statically compiled \ninto kernel instead. That's not a problem. The serial ports, \nhowever only support real serial ports, not usb-serial, which \nis becoming a problem.\n\nAs I said a few months ago, the whole usb mess can be \nstatically compiled, including the usb core, the host controller, \nand even usb-serial devices audio devices, and synth drivers, \nlike the dtlk for example, so in theory it should be possible to \nboot and get speech output, with changes to speakup.\n\nAs it is now, the code refers to the standard serial port \naddresses and irqs, and the communication code is RS232 \nspecific. \n\nSo this what I mean about abstraction. An abstract interface \ndoes not implement anything, it only defines. The implementation \ncan be anything as long as it follows the interface. So basically \nthere needs to be a layer of code in between the serial port code\nand the code that writes to it, one interface with several \nimplementations, RS232 serial, USB serial, and potential for any \nother kind of implementation. And my argument was that the \nsame could be done on the user side, pressing a certain key does \nsome thing, currently assumed to be standard keyboard, but \nwould be nice if abstract interface where the keyboard is one type \nof controller, other devices could trigger same. I'm mostly thinking \nabout mobile pervasive systems, where you might want to read a \nmessage or email, not type, and your device is in your pocket. So \nyou have a little controller sort of like a game pad where you can\nmove between messages and read them etc, or get phone numbers \nfrom a list. If the interface to the synth is generic then there are all \nkinds of  possibilities.\n\nI will be working on this kind of thing with speech, and I am \nstill contemplating whether or not it needs to be kernel space. \nOn an embedded device you really don't need to see all the \nboot messages, because it will load kernel from flash and will\nalways work. If I find a way to adapt this code to work on \narm then I might use it, but I actually think I could do the same\nthing entirely in user space. Boot is much simpler than PC and\nvery fixed in nature, ie once done it shouldn't change, no need\nto support gazillions of types of hardware etc. I like the idea\nof being able to hear the console output, but then I might end\nup just using usb-serial console and having a microcontroller\nproviding a terminal function, in other words both the speech\nand keyboard functions. If done that way it would possibly \nmiss a very small amount of boot messages, but not many. \nIt would be the same as using a terminal program with your\nPC connected to another PC with usb serial dongle and \nwatching the other machine boot. \n\n  -- Spie\n\n_______________________________________________\nSpeakup mailing list\nSpeakup@braille.uwo.ca\nhttp://speech.braille.uwo.ca/mailman/listinfo/speakup\n\n"}