{"category": "ham", "to_address": "<beginners@perl.org>", "from_address": "Jeff <pl@loserville.org>", "subject": "Conditional in regex", "body": "\nHi all. I'm new to perl, a new programmer, and I badly need guidance. I'm\ntrying to parse a config file with key/value pairs seperated by white space\nand surrounded by curly brackets. It has multiple fields that look like\nthis:\n\n{\nKey  value\nKey   value\n}\n\nMy solution has been to parse it with something simple --\n\nwhile ($file_contents =~ /(\\w+)\\s*\\{([^}]*)\\}/gs) {\n       push @new, $2;\n}\n\nforeach (@new){\n                  $_  =~ /\\b(\\w+)\\s+(.*)\\s+\n                          \\b(\\w+)\\s+(.*)/xgs;\n\nMy @next_tmp_variable = ($1, $2, etc);\n}\n\n-- but the config definitions contained in those curly brackets are\ndifferent lengths. Some only have a four left hand values, while others have\nsix or more. My solution isn't giving me what I really need.\n\nSo I have two questions. First, I don't understand how to test this so that\nI parse all the values between the curly braces, regardless of how many\nitems are there. Second, and equally important, what kind of data structure\nshould I put the results in? I think I need a hash of hashes. What I'd like\nto do is assign each left hand value as the key in a hash. Then, in each set\nthere's a left 'command' where the right hand value will always be unique,\nwhich would be perfect for use as the name of an alias for the hash or as\nthe key to a reference to a hash of that definition. Is there a better way?\nWhat's the best method for assigning all that stuff?\n\nThanks!\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}