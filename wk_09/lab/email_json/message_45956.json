{"category": "ham", "to_address": "tronter <pev340002003@yahoo.com>", "from_address": "Spencer Graves <spencer.graves@pdf.com>", "subject": "Re: [R] Nonlinear Regression", "body": "      Have you worked through the examples in the 'nls' help file, \nespecially the following: \n\n     DNase1 <- subset(DNase, Run == 1)\n     fm3DNase1 <- nls(density ~ Asym/(1 + exp((xmid - log(conc))/scal)),\n                      data = DNase1,\n                      start = list(Asym = 3, xmid = 0, scal = 1),\n                      trace = TRUE)\n\n           Treated <- Puromycin[Puromycin$state == \"treated\", ]\n     weighted.MM <- function(resp, conc, Vm, K)\n     {\n         ## Purpose: exactly as white book p. 451 -- RHS for nls()\n         ##  Weighted version of Michaelis-Menten model\n         ## ----------------------------------------------------------\n         ## Arguments: 'y', 'x' and the two parameters (see book)\n         ## ----------------------------------------------------------\n         ## Author: Martin Maechler, Date: 23 Mar 2001\n\n         pred <- (Vm * conc)/(K + conc)\n         (resp - pred) / sqrt(pred)\n     }\n\n     Pur.wt <- nls( ~ weighted.MM(rate, conc, Vm, K), data = Treated,\n                   start = list(Vm = 200, K = 0.1),\n                   trace = TRUE)\n112.5978 :  200.0   0.1\n17.33824 :  205.67588840   0.04692873\n14.6097 :  206.33087396   0.05387279\n14.59694 :  206.79883508   0.05457132\n14.59690 :  206.83291286   0.05460917\n14.59690 :  206.83468191   0.05461109\n\n# In the call to 'nls' here, 'Vm' and 'K' are in 'start' and must \ntherefore be parameters to be estimated. \n# The other names passed to the global 'weighted.MM' must be columns of \n'data = Treated'. \n\n# To get the residual sum of squares, first note that it is printed as \nthe first column in the trace output. \n\n# To get that from Pur.wt, I first tried 'class(Pur.wt)'. \n# This told me it was of class 'nls'. \n# I then tried \"method(class='nls')\". \n# One of the functions listed was 'residuals.nls'.  That gave me the \nresiduals. \n# I then tried 'sum(residuals(Pur.wt)^2)', which returned 14.59690. \n\n      Hope this helps. \n      Spencer Graves\np.s.  Did this answer your question?  Your example did not seem to me to \nbe self contained, which makes it more difficult for me to know if I'm \nmisinterpreting your question.  If the example had been self contained, \nI might have replied a couple of days ago. \n\ntronter wrote:\n> Hello\n>\n> I followed the example in page 59, chapter 11 of the 'Introduction to R'\n> manual. I entered my own x,y data. I used the least squares. My function has\n> 5 parameters: p[1], p[2], p[3], p[4], p[5]. I plotted the x-y data. Then I\n> used lines(spline(xfit,yfit)) to overlay best curves on the data while\n> changing the parameters. My question is how do I calculate the residual sum\n> of squares. In the example they have the following:\n>\n> df <- data.frame( x=x, y=y)\n>\n> fit <- nls(y ~SSmicmen(s, Vm, K), df)\n>\n> fit\n>\n>\n> In the second line how would I input my function? Would it be:\n>\n> fit <- nls(y ~ myfunction(p[1], p[2], p[3], p[4], p[5]), df) where\n> myfunction is the actual function? My function doesnt have a name, so should\n> I just enter it?\n>\n> Thanks\n>\n>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}