{"category": "ham", "to_address": "James Peach <jpeach@samba.org>, tridge@samba.org", "from_address": "\"Gerald (Jerry) Carter\" <jerry@samba.org>", "subject": "Re: getting rid of mkproto.sh from Samba3", "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nTridge,\n\nYou know I'm going to say this, but I respectfully disagree. :-)\n\nI don't want to start any flame wars on style so this is\nall I will say on the subject, but IMO all of your points \nimply that autogenerated headers are better because they\nsupport bad programming habits.  Autogenerated headers are\neasier for one programmer to develop but they are harder\nfor other programmers to use. Proto.h is a compiler workaround.\nIt does not make Samba development easier for anyone else.\n\nMaybe I'm just immature and don't know any better....\nBut I will tackle this on my own time, in my own tree and\npropose changes when and if I have working code to compare\nagainst the SAMBA_4_0 build/proto system.  For now, this\nappears to be a dead issue.\n\nSorry James.\n\n\n\n\ncheers, jerry\n=====================================================================\nSamba                                    ------- http://www.samba.org\nCenteris                         -----------  http://www.centeris.com\n\"What man is a man who does not make the world better?\"      --Balian\n\n\n> On 05/06/2007, at 5:10 PM, tridge@samba.org wrote:\n>\n>> James,\n>> \n>>> If I have a decent header file, I can see the full interface in a\n>>> single screen, along with comments, macros and typedefs. I don't think\n>>> the argument about the extra typing involved in changing headers by\n>>> hand is very strong, since the code needs to be read and understood\n>>> thousands more times than it needs to be written.\n>> \n>> It is not the extra typing, it's the mistakes. Before we had auto\n>> prototypes in Samba the following mistakes were common:\n>> \n>> *) leaving a prototype in a header for a function that has been\n>>  removed. I don't know of any tool that will find/remove those.\n\nYou find it as soon as someone tries to use it.\n\n>> *) getting details in the prototype wrong, especially the varargs\n>>  functions with printf arguments.\n\nProgrammer error.\n\n>> *) when the arguments to a function change, and the prototype isn't\n>>  updated. This is especially insidious when the new and old arguments\n>>  are type compatible, but change their meaning, so the old prototype\n>>  is completely misleading (ie. is still takes an int as the 3rd\n>>  argument, but now its a set of flags, not a counter)\n\nprogrammer error.\n\n>> *) once you start breaking up your includes out of a single\n>>  includes.h, then you risk getting the prototype completely wrong if\n>>  the source file of the function doesn't include the prototype\n>>  header. The compiler won't complain.\n\nprogrammer error.\n\n>> *) programmers add nice comments to the prototype header, which is in\n>>  a completely different file to the code. Those comments will degrade\n>>  over time as the code changes and the comment is not upgraded, so\n>>  those nice docs that you do this month will become completely wrong\n>>  by next year, and the person updating the function will not notice,\n>>  as the prototype is not on the same screen as the code they are\n>>  changing.\n\nprogrammer error.  And besides that, all code suffers from\nthis.  It is not specific to header files.\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.6 (GNU/Linux)\nComment: For info see http://quantumlab.net/pine_privacy_guard/\n\niD8DBQFGZiDMIR7qMdg1EfYRAmM2AJ9rAfPGNNL8pvDuozVu/LeISAWwewCghvK5\nchf79MgFfxJdqIXw50yP8eE=\n=bvKa\n-----END PGP SIGNATURE-----\n\n"}