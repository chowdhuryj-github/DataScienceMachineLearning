{"category": "ham", "to_address": "beginners@perl.org", "from_address": "zentara <zentara@highstream.net>", "subject": "Re: Inter-thread communications", "body": "On Mon, 18 Jun 2007 12:58:31 -0400, rvm@CBORD.com (\"Bob McConnell\")\nwrote:\n\n>I have two questions about this. First, is there a standard Perl IPC\n>interface between threads? I am not familiar with pipes in this context,\n>although I have used mailboxes and single word messages in various\n>multi-processing environments, including POSIX threads.\n\nThis is a big topic, so I'll briefly try to bring you up to speed.\n\nI'm assuming you are talking about threads in the pure sense, as opposed\nto calling separate processes \"threads\". ( It's further confused by\nMSWindows, emulating fork with threads).\n\nThere are totally independent processes, for which you can do IPC with\npipes, sockets, shared memory segments, etc.\n\nThreads are different.\nThreads are sort of concurrent code which can all run under the same\nparent pid. If one thread exits, the whole thread system will die. So\ncare must be taken. However, you can easily share scalar data between\nrunning threads, and this is their advantage.\n\nSo the standard Perl IPC interface for threads, is shared variables:\nsee \"perldoc threads::shared\". Also to be\nhappy with threads under Perl, you need a version greater than 5.8\nPerl5.6 uses an obsolete thread version which will give you trouble.\n\nIf you are not specifically interested in perl threads, you may want to\nread \"perldoc perlipc\". The things mentioned in perlipc, are the\noriginal methods of ipc, before threads came along (only recently). \n\nThere are 2 things threads can do for you.\n1. Share variables in realtime between threads.\n2. Share filehandles between threads, by passing their fileno\n    thru the shared variable mechanism.\n\nThe problem is that one thread will not know if another thread has\nchanged a shared variable, so you either need an event-loop system,\nor a complex while() loop to constantly monitor the values of the shared\nvariables.\n\nThe typical setup is a main thread which has an event loop (Tk, POE,\nGlib, etc), and as many worker threads as you want. The worker threads\nwill do things and set shared variables, and the main thread will\nmonitor the value of the shared vars and do what is needed.\n\nThe main thread will also clean up the worker threads at program end.\n\n>\n>Second, is there a way to set this up so the transmit thread timeout can\n>be easily implemented as a side effect of waiting for the ACK/NAK to\n>arrive on that interface? I was thinking of using a semaphore, but they\n>don't appear to be implemented on Win32.\n\nYeah, it depends on how your code is written, but you can setup many\ntimers in an event-loop system to time out something. Warning.... alarm \ndoes not work well in threads, you need timers.\n\nSee how GLib can help\nhttp://perlmonks.org?node_id=538341\n\nAlso there is POE, and (Tk and Gtk2 if you want a GUI).\n\n>\n>For this emulation, the outgoing messages are read from a text file and\n>the incoming messages are stored in another text file. Timing of\n>outgoing messages is controlled when that file is read. I am hoping this\n>can provide a workaround for the alarm failure I ran into on the single\n>threaded version as well as being a better emulation of the actual\n>system.\n\n\nI run linux, so there may be win32 problems that I'm unfamiliar with,\nbut all of it seems feasible.\n\nIt seems that once the serial port connection is established, and you\nhave the filehandle, you could have a main thread to control, and 2 \nworker threads, one to send, and one to receive.  You would setup\nsome shared variables, like \"$ack_received\" , etc., and share the fileno\nof the port filehandle between the threads.\nThen again, with a proper IO::Select setup, you may not need threads\nat all.\n\nYou might want to ask this on http://perlmonks.org\nA few monks there are good with win32, and Win32::SerialPort.\nIf you could show some pseudo-code it would be helpful to them.\n\nGoodluck,\nzentara\n\n\n-- \nI'm not really a human, but I play one on earth.\nhttp://zentara.net/japh.html\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}