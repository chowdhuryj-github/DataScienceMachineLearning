{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 345: keep sending ARPs for 2 minutes,\n\tevery 5 seconds in http://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 345\nrevision-id: tridge@samba.org-20070525112726-m22jkf53zf4xkfpc\nparent: tridge@samba.org-20070525100006-gpdqevfym61pqwm6\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Fri 2007-05-25 21:27:26 +1000\nmessage:\n  keep sending ARPs for 2 minutes, every 5 seconds\nmodified:\n  include/ctdb_private.h         ctdb_private.h-20061117234101-o3qt14umlg9en8z0-13\n  takeover/ctdb_takeover.c       ctdb_takeover.c-20070525071636-a5n1ihghjtppy08r-2\n=== modified file 'include/ctdb_private.h'\n--- a/include/ctdb_private.h\t2007-05-25 10:00:06 +0000\n+++ b/include/ctdb_private.h\t2007-05-25 11:27:26 +0000\n@@ -250,6 +250,7 @@\n struct ctdb_takeover {\n \tbool enabled;\n \tconst char *interface;\n+\tTALLOC_CTX *last_ctx;\n };\n \n \n\n=== modified file 'takeover/ctdb_takeover.c'\n--- a/takeover/ctdb_takeover.c\t2007-05-25 07:16:50 +0000\n+++ b/takeover/ctdb_takeover.c\t2007-05-25 11:27:26 +0000\n@@ -29,6 +29,43 @@\n \n #define TAKEOVER_TIMEOUT() timeval_current_ofs(5,0)\n \n+#define CTDB_ARP_INTERVAL 5\n+#define CTDB_ARP_REPEAT  24\n+\n+struct ctdb_takeover_arp {\n+\tstruct ctdb_context *ctdb;\n+\tuint32_t count;\n+\tstruct sockaddr_in sin;\n+};\n+\n+\n+/*\n+  send a gratuitous arp\n+ */\n+static void ctdb_control_send_arp(struct event_context *ev, struct timed_event *te, \n+\t\t\t\t  struct timeval t, void *private_data)\n+{\n+\tstruct ctdb_takeover_arp *arp = talloc_get_type(private_data, \n+\t\t\t\t\t\t\tstruct ctdb_takeover_arp);\n+\tint ret;\n+\n+\tret = ctdb_sys_send_arp(&arp->sin, arp->ctdb->takeover.interface);\n+\tif (ret != 0) {\n+\t\tDEBUG(0,(__location__ \"sending of arp failed (%s)\\n\", strerror(errno)));\n+\t}\n+\n+\tarp->count++;\n+\n+\tif (arp->count == CTDB_ARP_REPEAT) {\n+\t\ttalloc_free(arp);\n+\t\treturn;\n+\t}\n+\t\n+\tevent_add_timed(arp->ctdb->ev, arp->ctdb->takeover.last_ctx, \n+\t\t\ttimeval_current_ofs(CTDB_ARP_INTERVAL, 0), \n+\t\t\tctdb_control_send_arp, arp);\n+}\n+\n /*\n   take over an ip address\n  */\n@@ -37,6 +74,7 @@\n \tint ret;\n \tstruct sockaddr_in *sin = (struct sockaddr_in *)indata.dptr;\n \tchar *cmdstr;\n+\tstruct ctdb_takeover_arp *arp;\n \n \tcmdstr = talloc_asprintf(ctdb, \"ip addr add %s/32 dev %s 2> /dev/null\",\n \t\t\t\t inet_ntoa(sin->sin_addr), ctdb->takeover.interface);\n@@ -46,11 +84,20 @@\n \tsystem(cmdstr);\n \ttalloc_free(cmdstr);\n \n-\tret = ctdb_sys_send_arp(sin, ctdb->takeover.interface);\n-\tif (ret != 0) {\n-\t\tDEBUG(0,(__location__ \"sending of arp failed (%s)\\n\", strerror(errno)));\n+\tif (!ctdb->takeover.last_ctx) {\n+\t\tctdb->takeover.last_ctx = talloc_new(ctdb);\n+\t\tCTDB_NO_MEMORY(ctdb, ctdb->takeover.last_ctx);\n \t}\n \n+\tarp = talloc_zero(ctdb->takeover.last_ctx, struct ctdb_takeover_arp);\n+\tCTDB_NO_MEMORY(ctdb, arp);\n+\t\n+\tarp->ctdb = ctdb;\n+\tarp->sin = *sin;\n+\n+\tevent_add_timed(arp->ctdb->ev, arp->ctdb->takeover.last_ctx, \n+\t\t\ttimeval_zero(), ctdb_control_send_arp, arp);\n+\n \treturn ret;\n }\n \n@@ -62,6 +109,10 @@\n \tstruct sockaddr_in *sin = (struct sockaddr_in *)indata.dptr;\n \tchar *cmdstr;\n \n+\t/* stop any previous arps */\n+\ttalloc_free(ctdb->takeover.last_ctx);\n+\tctdb->takeover.last_ctx = NULL;\n+\n \tcmdstr = talloc_asprintf(ctdb, \"ip addr del %s/32 dev %s 2> /dev/null\",\n \t\t\t\t inet_ntoa(sin->sin_addr), ctdb->takeover.interface);\n \t\t\n\n"}