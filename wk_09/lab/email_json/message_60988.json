{"category": "ham", "to_address": "Chas Owens <chas.owens@gmail.com>", "from_address": "Paul Johnson <paul@pjcj.net>", "subject": "Re: Conditional question", "body": "On Tue, Jul 03, 2007 at 02:42:29AM -0400, Chas Owens wrote:\n> On 7/3/07, Paul Johnson  wrote:\n> snip\n> >And, in this case, more accurate.  Unless you know something the rest of us\n> >don't.\n> snip\n> \n> The trinary operator (?:) returns the value of either the true or\n> false portion depending on the conditional portion, so putting print\n> in both the true and false portions is redundant.  Also 0 is one of\n> the 5ish false values* so !$var1 is the same thing** as $var1 == 0 and\n> 1 is one of the infinite true values***  so $var2 is equivalent to\n> $var2 == 1 so long as you are testing for truth rather than the\n> specific value 1.\n> \n> #!/usr/bin/perl -l\n> \n> use strict;\n> use warnings;\n> \n> my $var1 = 0;\n> my $var2 = 1;\n> print \"should print hai:\", !$var1 && $var2 ? \"hai\" : \"bye\";\n> \n> $var1 = 1;\n> print \"should print bye:\", !$var1 && $var2 ? \"hai\" : \"bye\";\n> \n> $var2 = $var1 = 0;\n> print \"should print bye:\", !$var1 && $var2 ? \"hai\" : \"bye\";\n\nEven with these assumptions and caveats, I think you may have forgotton to\nconsider strings, as well as such esoterica as 0e0 and \"0 but true\".\n\nBut apart from matters such as having a firm specification or testing boundary\nconditions, I fear we're starting to veer away from what might be considered\nuseful on a beginners list, so I'll leave it there for now.\n\n-- \nPaul Johnson - paul@pjcj.net\nhttp://www.pjcj.net\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}