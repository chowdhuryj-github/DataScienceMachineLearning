{"category": "ham", "to_address": "bugs-bitbucket@netlabs.develooper.com", "from_address": "James Keenan (via RT) <parrotbug-followup@parrotcode.org>", "subject": "[perl #42975] [BUG] t/tools/ops2pmutils/08-sort_ops.t experiencing test failure when warning was not emitted ", "body": "# New Ticket Created by  James Keenan \n# Please include the string:  [perl #42975]\n# in the subject line of all future correspondence about this issue. \n# \n\n\nOne of the tests in t/tools/ops2pmutils/08-sort_ops.t has begun to fail.\n\n[li11-226:parrot] 504 $ prove -v t/tools/ops2pmutils/08-sort_ops.t\nt/tools/ops2pmutils/08-sort_ops....\nOK:  Parrot top directory located\n1..91\nok 1 - use Parrot::Ops2pm::Utils;\nok 2 - use Parrot::IO::Capture::Mini;\n...\nnot ok 71 - Got expected warning about ops in neither ops.num or  \nops.skip\n\n#     Failed test (t/tools/ops2pmutils/08-sort_ops.t at line 235)\n#                   undef\n#     doesn't match '(?-xism:not in ops\\.num nor ops\\.skip)'\nok 72 - changed back to starting directory after testing\n...\n\nParadoxically, this may be a good thing -- or it may simply indicate  \nthe limitations of my test.\n\n1.  The test file itself has not been altered since r18040 (Apr 08  \n2007).  This failure occurred at r18576 (May 16 2007).\n\n------------------------------------------------------------------------\nr18040 | jkeenan | 2007-04-08 10:25:01 -0400 (Sun, 08 Apr 2007) | 8  \nlines\n\n\n2.  The module being tested, lib/Parrot/Ops2pm/Utils.pm, has not  \nchanged since I originally committed it to trunk, excepting ptc's  \nperltidy cleanups.\n\n3.  The code in Parrot::Ops2pm::Utils touched during the failing test  \nis this in sort_ops() (edited slightly for clarity):\n\nsub sort_ops {\n     my $self = shift;\n     for my $el ( @{ $self->{ops}->{OPS} } ) {\n         if ( exists $self->{optable}->{ $el->full_name } ) {\n             # assign something to $el->{CODE}\n         }\n         elsif ( exists $self->{skiptable}->{ $el->full_name } ) {\n             # assign something to $el->{CODE}\n         }\n         elsif ( $el->{experimental} ) {\n             my $n = $self->{optable}->{ $el->full_name } = ++$self-> \n{max_op_num};\n             warn sprintf( \"%-25s %-10s experimental, not in ops.num \n\\n\", $el->full_name, $n )\n                 if -e \"DEVELOPING\";\n             # assign something to $el->{CODE}\n         }\n         else {\n             warn sprintf( \"%-25s %-10s SKIPPED: not in ops.num nor  \nops.skip\\n\", $el->full_name, \"\" )\n                 if -e \"DEVELOPING\";   ##### This is causing a test  \nto fail\n             # assign something to $el->{CODE}\n         }\n     }\n     @{ $self->{ops}->{OPS} } =\n         sort { $a->{CODE} <=> $b->{CODE} } ( @{ $self->{ops}-> \n{OPS} } );\n}\n\n4.  This is the failing test:\n\n         my $msg;\n         my $tie = tie *STDERR, \"Parrot::IO::Capture::Mini\"\n             or croak \"Unable to tie\";\n         ok( defined $tie, \"tie established for testing\" );\n         ok( $self->sort_ops(), \"sort_ops returned successfully\" );\n         $msg = $tie->READLINE;\n         untie *STDERR;\n         like(\n             $msg,\n             qr|not in ops\\.num nor ops\\.skip|,\n             \"Got expected warning about ops in neither ops.num or  \nops.skip\"\n         );\n\nThe test asserts, \"If 'DEVELOPING' exists [which it does], then any  \nops which is found *neither* in src/ops/ops.num *nor* in src/ops/ \nops.skip will cause a warning to be generated alerting the developer  \nto that situation.  That warning will be captured in $msg, which  \nshould then match the pattern in the like() test.\n\nThe fact that the like() test fails means that $msg, at the very  \nleast, did *not* match the pattern in the qr|| function in the like()  \ntest.  In point of fact, $msg is 'undef', which means that no warning  \nwas thrown by any of the ops tested during this test.  Which in turn  \nmeans that all ops tested were mentioned *either* in src/ops/ops.num  \nor in src/ops/ops.skip.\n\nDoes that mean we should break out the cigars and champagne?  No.   \nWhy?  Because the test, as written, entails a little cheat for  \npracticality's sake.  Parrot::Ops2pm::Utils has to be passed a list  \nof ops:\n\n         my $self = Parrot::Ops2pm::Utils->new(\n             {\n                 argv    => [@opsfiles],\n                 script  => \"tools/build/ops2pm.pl\",\n                 nolines => undef,\n                 renum   => undef,\n             }\n         );\n\n... but I didn't provide the constructor with *every* ops (as happens  \nin 'make'), but only with a very limited selection of ops:\n\n     local @ARGV = qw(\n         src/ops/core.ops\n         src/ops/bit.ops\n         src/ops/object.ops\n     );\n\nFour months ago, this selection of ops was sufficient, i.e., there  \nwas at least one ops somewhere in those files that was not found in  \neither ops.num or ops.skip, and so triggered the warning, which  \ncaused the test to pass.\n\nMy objective in writing the test was, in large part, simply to  \n'cover' the code, i.e., to demonstrate that that 'else' block inside  \nParrot::Ops2pm::Utils::sort_ops() could be reached by a Perl  \nprogram.  Only one instance was needed to generate that coverage.\n\nBut, apparently due to improvements in the ops by other Parrot  \nhackers, those three ops files are no longer sufficient to reach the  \n'else' block even once.  So no warning is generated and the code is  \nnot 'covered' by the test suite in t/tools/ops2pmutils/*.t.\n\n5.  So, can anyone suggest a file in src/ops/*.ops that *would*  \ncontain an ops found *neither* in ops.num nor in ops.skip?  I would  \nthen pass that file as an argument to this test; a warning would be  \ngenerated; and the test would once again pass.\n\nThank you very much.\nkid51\n\n"}