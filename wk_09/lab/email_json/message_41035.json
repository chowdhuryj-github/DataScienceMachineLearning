{"category": "ham", "to_address": "Jeremy Allison <jra@samba.org>", "from_address": "simo <idra@samba.org>", "subject": "Re: svn commit: samba r23290 - in\n\tbranches:\tSAMBA_3_0/source/nsswitch SAMBA_3_0_26/source/nsswitch", "body": "On Fri, 2007-06-01 at 21:58 -0700, Jeremy Allison wrote:\n> On Fri, Jun 01, 2007 at 10:02:30PM -0500, Gerald (Jerry) Carter wrote:\n> > \n> > It's is better IMO to use the correct context pointer\n> > so that in this case you can free the array\n> > witout worrying about it the mem_ctx point is freed\n> \n> I don't know what you mean by this. Actually, either\n> pointer works, it simply is a matter of taste.\n\nI am sorry to contradict you Jeremy, but it is not a matter of taste.\nIf you alloc all array children on the array, then if you want to\nsteal/move/free the array, you have to care _only_ about the array\npointer. You don;t risk leaving behind children on the wrong context,\nand maybe have them freed while you are still keeping around the parent.\n\n> > I think Michael's original code is correct.\n> > For example, this is how the struct samu* stuff\n> > is done.\n> \n> Fair enough. We were discussing taste though\n> (which is why I prefered talloc_move rather\n> than talloc_steal :-).\n\ntalloc_steal/talloc_move are the reasons to not alloc everything on the\ngeneric mem_ctx, but to build memory hierarchies that reflect structure\nhierarchies :)\n\n> > The moral of the story is \"Don't mix malloc and\n> > talloc\".\n> \n> That's true enough :-)\n\nHoly words.\n\nSimo.\n\n-- \nSimo Sorce\nSamba Team GPL Compliance Officer\nemail: idra@samba.org\nhttp://samba.org\n\n"}