{"category": "ham", "to_address": "Perl beginners <beginners@perl.org>", "from_address": "\"John W. Krahn\" <krahnj@telus.net>", "subject": "Re: Snippet explanation please", "body": "Monty wrote:\n> I'm reading \"Network Programming with Perl\" by Lincoln Stein, and I've\n> come across a snippet of code I'mnot quite following:\n> \n> open (WHOFH, \"who |\") or die \"Can't open who: $!\";\n> \n> While () {\n\n'While' is an error.  What the code probably said was 'while' (Perl is case \nsensitive.)\n\nThis reads each \"line\" from the file/pipe where \"line\" is defined by the Input \nRecord Separator $/ and the current \"line\" is stored in the $_ variable.\n\n>     next unless /^(\\S+)/;\n\nThe current line is matched against the regular expression /^(\\S+)/ which says \nthat the beginning of the line must start with one or more non-whitespace \ncharacters and those non-whitespace characters are captured by the parentheses \ninto the $1 variable.  If the current line does not match the pattern the next \nloops back to the start and another line is obtained.\n\n\n>     $who{$1}++;\n\nIf the pattern matched we get to this point where the captured string is used \nas the key of the %who hash and the value of that key is incremented.\n\n\n> }\n> \n> It's the 'next' line I'm unclear on.  I know that results: parse the\n> first field from each output line of the 'who' command, but I'm\n> wondering why this might have been done in this way.  It seems to me\n> that the 'next' line states \"get the next record unless the current\n> one startes with a non-whitespace character\".\n> \n> The UNIX 'who' command output lines always start with non-whitespace\n> characters, as far as I can see.  It seems just as sensible to leave\n> this line out.  Does anyone know additional value to doing this?\n\nYou should never use the numeric variables like $1 unless you are sure that \nthe pattern matched otherwise the value in $1 will be left over from a \nprevious successful match so this ensures that $1 always has a valid value.\n\n\n> Also, the '$who{$1}++' lines has the same effect here as \"awk '{ print\n> $1 }'\",\n\nIn perl \"awk '{ print $1 }'\" would be written as \"perl -lane'print $F[0]'\"\n\n\n> and leads me to believe that $2, $3, etc. also exist, but that\n> doesn't seem to be the case as I've tried printing those variables.\n> How does the '$1' work in this case?\n\nperldoc perlre\n\nYou have to have sets of parentheses for each numeric variable.\n\n\n\nJohn\n-- \nPerl isn't a toolbox, but a small machine shop where you\ncan special-order certain sorts of tools at low cost and\nin short order.                            -- Larry Wall\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}