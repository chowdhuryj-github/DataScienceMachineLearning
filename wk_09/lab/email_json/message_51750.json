{"category": "ham", "to_address": "Bob Rogers <rogers-perl6@rgrjr.dyndns.org>", "from_address": "\"Patrick R. Michaud\" <pmichaud@pobox.com>", "subject": "Re: pdd15 - How do I add a class method?", "body": "On Wed, Jun 20, 2007 at 09:41:00PM -0400, Bob Rogers wrote:\n>    From: Jonathan Worthington \n>    Date: Thu, 21 Jun 2007 00:05:00 +0100\n> \n>    Hi,\n> \n>    Patrick R. Michaud wrote:\n>    > My first question is \"How do I add a class method?\" -- i.e.,\n>    > a method that operates on a class instance as opposed\n>    > to an object instance of that class . . .\n> \n> A method that operates on a class instance would be an instance method\n> of the class metaclass, wouldn't it?  But I think you meant \"on a\n> *particular* class [metaclass] instance\", am I right?\n\nYes, I believe this is a better phrasing.  If I want to define a\nnew method or or override an existing method on a metaclass instance\n[a class], then how do I do that?\n\nThe particular instance I'm looking at is a C class for\nPerl 6, where I want the get_string vtable function for the\nC metaclass instance is different from get_string of \na C class object.\n\nAt the moment perl6 is handling this (in PMC classes) by \nchecking the identify of the invocant when get_string is \nexecuted and then responding appropriately.  But I'm thinking\nit's likely that C will be implemented using pdd15\nobjects, so I'm looking for the \"preferred approach\" \nfor doing things like this.\n\nThanks,\n\nPm\n\n"}