{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"John W. Krahn\" <krahnj@telus.net>", "subject": "Re: zero width lookahead match", "body": "Rob Dixon wrote:\n> \n> As far as lookahead expressions are concerned, Perl functions identically\n> to Flex. It is called zero-width lookahead because it matches a zero-width\n> /position/ in the string instead of a sequence of characters. If I write\n> \n> '123456' =~ /\\d\\d\\d(...)/\n> \n> then '456' will be captured as the first three characters were consumed by\n> the preceding pattern. However if I write\n> \n> '123456' =~ /(?=\\d\\d\\d)(...)/\n> \n> then '123' will be captured instead because the lookahead pattern has zero\n> width.\n> \n>> The other question I have is - how does regex engine decide that it has\n>> to move further its scanner by 1 character everytime since I get output\n>> 123 234\n>> 345 456\n>> when I run this script ?\n> \n> The engine moves as far through your target string as it needs to to find\n> a new match. If I write\n> \n> '1B3D5F' =~ /(?=(.\\d.))/g;\n> \n> then the engine will find a match at only every second character, and if I\n> use a much simpler zero-width match, just\n> \n> 'ABCDEF' =~ //g\n> \n> then the regex will match seven times - at the beginning and end and\n> between every pair of characters\n\nThat will only work if there are no previous patterns in your program\notherwise:\n\nperldoc perlop\n\n[ snip ]\n\n        If the PATTERN evaluates to the empty string, the last successfully\n        matched regular expression is used instead. In this case, only\n        the \"g\" and \"c\" flags on the empty pattern is honoured - the other\n        flags are taken from the original pattern. If no match has\n        previously succeeded, this will (silently) act instead as a genuine\n        empty pattern (which will always match).\n\n\n\nJohn\n-- \nPerl isn't a toolbox, but a small machine shop where you can special-order\ncertain sorts of tools at low cost and in short order.       -- Larry Wall\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}