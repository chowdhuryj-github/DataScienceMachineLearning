{"category": "ham", "to_address": "\"Dr.Ruud\" <rvtol+news@isolution.nl>", "from_address": "Mathew Snyder <theillien@yahoo.com>", "subject": "Re: Proper class setup?", "body": "Dr.Ruud wrote:\n> Mathew Snyder schreef:\n> \n>> I'm presently learning OOP as Perl does it using online resources and\n>> and Programming Perl as my tutors.  I'm not certain I have it right\n>> though.  Is this correct for the package:\n> \n> [whitespace is cheap]\n\nDuly noted :D\n\n> \n>> package Report;\n>>\n>> require Exporter;\n>> use strict;\n>>\n>> our @ISA       = qw(Exporter);\n>> our @EXPORT    = qw(new);\n> \n> Exporting is not necessary, you can leave these two lines out.\n> \n> \n>> sub new {\n>>         my ($class) = @_;\n>>         my $self    = {\n>>                 _id               => undef,\n>>                 _queue    => undef,\n>>                 _owner    => undef,\n>>                 _priority => undef,\n>>                 _worked   => undef,\n>>                 _timeLeft => undef,\n>>                 _due      => undef,\n>>                 _created  => undef,\n>>                 _updated  => undef,\n>>                 _severity => undef,\n>>                 _ccl      => undef\n>>         };\n>>         bless $self, $class;\n>>         return $self;\n>> }\n> \n> Change your new() in a new() and an init(). Do as little as possible in\n> your new(), for the sake of inheritance etc.\n> \n\nI'm not sure what you mean by \"Change your new() in a new() and init()\".\n\n> Although there is no real need to prepare the hash with undef values. So\n> \"my $self = {};\" suffices, and keeps your objects lean.\n> \n> \n>> # Accessor method for Reports _id\n>> sub id {\n>>         my ($self, $id) = @_;\n>>         $self->{_id} = $id if defined($id);\n>>         return $self->{_id};\n>> }\n>>\n>> # Accessor method for Reports _queue\n>> sub queue {\n>>         my ($self, $queue) = @_;\n>>         $self->{_queue} = $queue if defined($queue);\n>>         return $self->{_queue};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub owner {\n>>         my ($self, $owner) = @_;\n>>         $self->{_owner} = $owner if defined($owner);\n>>         return $self->{_owner};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub priority {\n>>         my ($self, $priority) = @_;\n>>         $self->{_priority} = $priority if defined($priority);\n>>         return $self->{_priority};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub worked {\n>>         my ($self, $worked) = @_;\n>>         $self->{_worked} = $worked if defined($worked);\n>>         return $self->{_worked};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub timeLeft {\n>>         my ($self, $timeLeft) = @_;\n>>         $self->{_timeLeft} = $timeLeft if defined($timeLeft);\n>>         return $self->{_timeLeft};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub due {\n>>         my ($self, $due) = @_;\n>>         $self->{_due} = $due if defined($due);\n>>         return $self->{_due};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub created {\n>>         my ($self, $created) = @_;\n>>         $self->{_created} = $created if defined($created);\n>>         return $self->{_created};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub updated {\n>>         my ($self, $updated) = @_;\n>>         $self->{_updated} = $updated if defined($updated);\n>>         return $self->{_updated};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub severity {\n>>         my ($self, $severity) = @_;\n>>         $self->{_severity} = $severity if defined($severity);\n>>         return $self->{_severity};\n>> }\n>>\n>> # Accessor method for Reports _owner\n>> sub ccl {\n>>         my ($self, $ccl) = @_;\n>>         $self->{_ccl} = $ccl if defined($ccl);\n>>         return $self->{_ccl};\n>> }\n> \n> \n> I see a pattern there. :)\n> These 11 methods are all doing basically the same, right?\n> So consider a set/get approach.\n> \n\nWhat do you mean by \"set/get approach\"?\n\n> The \"if defined($value)\" parts are not really necessary, but it's good\n> that they are there: your class could, for example, be used in an\n> environment where dirtying the cache can hurt performance.\n> There can be one problem though: what if you want to change a property's\n> value to undef? :)\n> \n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}