{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "On Wednesday 11 April 2007 05:40, Alek Storm wrote:\n\n> On 4/11/07, Allison Randal  wrote:\n\n> > Actually, setting :vtable without setting :method makes a great deal of\n> > sense, if you want to override a low-level vtable operation without\n> > adding a named method to the class.\n\n> Just use the :anon flag.  It was designed for this.  Vtable methods are\n> methods, and they're called as methods from C.\n\nBoth options seem slightly wrong to me.\n\nVtable methods are methods, yes, so they should receive the invocant \nautomagically.  I don't believe they do this currently:\n\n.sub 'set_integer_native' :vtable :method\n    .param int size\n\n    .local pmc size_pmc\n    size_pmc = getattribute self, 'size'\n    size_pmc = size\n.end\n\n(runs fine)\n\n.sub 'set_integer_native' :vtable\n    .param int size\n\n    .local pmc size_pmc\n    size_pmc = getattribute self, 'size'\n    size_pmc = size\n.end\n\nerror:imcc:The opcode 'getattribute_p_ic_sc' (getattribute<3>) was not found. \nCheck the type and number of the arguments\n\nAllison's right about method visibility outside of the vtable, and \nthrowing :anon on there seems a little hacky.\n\nHowever, requiring :method to make vtable methods actually work if you use \nself inside fails Allison's visibility problem.\n\n-- c\n\n"}