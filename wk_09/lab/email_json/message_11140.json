{"category": "ham", "to_address": "yitzle <yitzle@users.sourceforge.net>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Nested loop", "body": "On 4/20/07, yitzle  wrote:\n> There's been mentions of efficiency.\n> I'm under the impression that for the uses Perl is put to, the\n> efficiency of a loop is sorta irrelevent. If you are doing\n> harddrive/network access, the performance gain of one loop over the\n> other is more of less invisible.\n> Come to think of it, the time for interpretting got to overshadow the\n> performance gain...\n\nI was trying to address all arguments for the use of C-style for.  In\ngeneral, though, premature optimization is a waste of time.  You\nshould be aware of the general cost of the constructs you use (that is\nwhy I occasionally post benchmarks for alternate algorithms), but you\nshould be more concerned with making what you write clearly express\nyour intent.  This is why I prefer\n\nmy @a = (0 .. 10);\nmy $i = 0;\nfor my $elem (grep {not $i++ % 3} @a) {\n       func($elem);\n}\n\nto\n\nfor (my $i = 0; $i < @a; $i += 3) {\n    func($a[$i]\n}\n\nThe grep clearly states that I am looking for something and its block\ntells me what the criteria are.\n\n> For running mathematical stuff, wouldn't you use C?\n\nNah, Fortran.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}