{"category": "ham", "to_address": "Klaas-Jan Stol <parrotcode@gmail.com>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: Minor notes/suggestions on PDD15", "body": "Klaas-Jan Stol wrote:\n> hi,\n> \n> Some suggestions for PDD15:\n> \n> 1.\n> reading PDD15, I noticed that some methods/ops are named using an \n> underscore to separate words, others don't, for instance:\n> * get_class (but also \"getclass\" is used in the examples)\n> * newclass\n> \n> IMO, it'd be nice to be consistent, and stick to 1 style. (My personal \n> preference is to leave out the underscore)\n\nThe get_ standard entered with namespaces, and was itself a modification \nof the find_ standard from the earlier opcodes for dealing with globals \nand lexicals. For methods, I'd say the underscores are standard. For \nopcoess, it's debatable whether underscores or no underscores is \nstandard at this point. I made a note to review it when I get to the \nOpcodes PDD.\n\n> 2.\n> Another thing; operations such as find_method return a NULL PMC on \n> failure. It might be nice to have it configurable for the user so s/he \n> can choose whether an exception will be thrown, or a NULL PMC is \n> returned. (IIRC, this can already be done for some ops, it'd be nice to \n> set it for all ops that may return a NULL PMC).\n> \n> (as a detail: in PIR this might be represented by a pragma, like: \n> \".pragma exceptions 1\")\n\nThis is the same question we have for I/O, and really for large parts of \nParrot. I've temporarily held off on this decision until the new \nexceptions PDD is implemented (widespread exceptions really aren't \npractical with the current exceptions implementation).\n\n> 3.\n> The syntactic sugar for the op:\n> \n> callmethodsupercc \"foo\"\n> \n> could well be: super.\"foo\"()\n> \n> but you I guess you have thought  of that yourselves already :-)\n\nYeah, that could work. A pseudo-variable like 'self' in every method. Or,\n\n   self.super.\"foo\"()\n\n> 4.\n> Likewise, syntactic sugar for:\n> callmethodnextcc \"foo\"\n> \n> (assuming object \"obj\")\n> Could be: obj.\"foo\".next() (or maybe: obj.\"foo\"().next, so there's a \n> little bit more emphasis as it looks stranger)\n\nAlso a good candidate. Or, to only modify PIR syntax in one spot,\n\n   self.next.\"foo\"()\n\nGreat thoughts, thanks!\nAllison\n\n"}