{"category": "ham", "to_address": "\"Dharshana Eswaran\" <dharshana.ve@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: String Manipulation", "body": "On 6/27/07, Dharshana Eswaran  wrote:\n> On 6/28/07, Tom Phoenix  wrote:\n> >\n> > On 6/27/07, Dharshana Eswaran  wrote:\n> >\n> > > I am unable to get a generalised way in which it can extract them as few\n> > > structures have comments, few does not hav comments etc.\n> >\n> > Does the data have some defined grammar, or a definable one at least?\n>\n>\n>\n> The defined Grammer here is\n> {\n> xyz1 abc1; /*Comments*/\n> xyz2 abc2;\n> xyz3 abc3[req];\n> xyz4 abc4[req]; /*Comments*/\n> };\n>\n> Here, i have defined different possibility of occurences of the structure\n> elements. If i could get a regex for extracting xyz1, xyz2, xyz3, xyz4 and\n> abc1, abc2, abc3[req], abc4[req] would be helpful. Here, the comments are of\n> no use, i just need to ignore them.\n>\n> >If you are up to using Parse::RecDescent, it will probably do the job.\n>\n> I am restricted from using modules and i am unable to come up with a regex\n> or regexes to do this job.\n>\n>   >http://search.cpan.org/author/DCONWAY/Parse-RecDescent-1.94\n> >/lib/Parse/RecDescent.pod\n>\n> >Hope this helps!\n>\n> >--Tom Phoenix\n> >Stonehenge Perl Training\n>\n> Can anyone guide me in this?\n>\n> Thanks and Regards,\n> Dharshana\n>\n\nIt is fragile, but here are a set of regexes that parse the string you\nmentioned.  I did notice that this string differs significantly from\nthe ones you gave earlier and this set of regexes will not correctly\nhandle them.\n\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nmy $comment    = qr{\\s* (?:/\\* .*? \\*/ \\s*)*}xs;\nmy $identifier = qr{ [A-Za-z_]\\w* }xs;\nmy $statement  = qr{\n        \\s*\n        ($identifier)\n        \\s+\n        ($identifier)\n        \\s*\n        (?: \\[ (.*?) \\] )?\n        \\s*\n        ;\n        \\s*\n        $comment?\n}xs;\n\nmy $str = <()) == 3) {\n        if ($elems) {\n                $type = \"array of $type with $elems elements\";\n        }\n        print \"type is $type and variable is $var\\n\";\n}\n\nsub by_n {\n        my ($n, $a) = @_;\n        my $i = 0;\n        sub {\n                return undef if $i > $#$a;\n                my @ret = @{$a}[$i .. $i + $n - 1];\n                $i += $n;\n                return @ret;\n        }\n}\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}