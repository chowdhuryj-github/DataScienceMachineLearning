{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Michael Adam <ma@sernet.de>", "subject": "Rev 5351: create a fake user token consisting of builtin\n\tadministrators sid and in\n\thttp://samba.sernet.de/ma/bzr/SAMBA_3_0-registry.bzr/", "body": "At http://samba.sernet.de/ma/bzr/SAMBA_3_0-registry.bzr/\n\n------------------------------------------------------------\nrevno: 5351\nrevision-id: ma@sernet.de-20070412122743-d447faac65352b25\nparent: ma@sernet.de-20070411150619-9f3271e9d353c422\ncommitter: Michael Adam \nbranch nick: SAMBA_3_0-registry.bzr\ntimestamp: Thu 2007-04-12 14:27:43 +0200\nmessage:\n  create a fake user token consisting of builtin administrators sid and\n  se_disk_operators privilege by hand instead of using get_root_nt_token()\n  to minimize linker deps for bin/net.\n  \n  * new function registry_create_admin_token() in lib/util_reg.c\n  * move dup_nt_token from auth/token_util.c to new file lib/util_nttoken.c\n  * adapt net_conf.c and Makefile.in accordingly\nadded:\n  source/lib/util_nttoken.c      util_nttoken.c-20070412121956-apjs5s3igy1ydc2e-1\nmodified:\n  source/Makefile.in             Makefile.in-20060530022626-b16dac2328ebe703\n  source/auth/token_util.c       token_util.c-20070409110214-hxmlg8kreyeuci30-1\n  source/lib/util_reg.c          util_reg.c-20060711181331-c2d45d0e1f4a8648\n  source/utils/net_conf.c        net_conf.c-20070409110216-64p0zt0mes4j6yoe-1\n=== added file 'source/lib/util_nttoken.c'\n--- a/source/lib/util_nttoken.c\t1970-01-01 00:00:00 +0000\n+++ b/source/lib/util_nttoken.c\t2007-04-12 12:27:43 +0000\n@@ -0,0 +1,70 @@\n+/* \n+ *  Unix SMB/CIFS implementation.\n+ *  Authentication utility functions\n+ *  Copyright (C) Andrew Tridgell 1992-1998\n+ *  Copyright (C) Andrew Bartlett 2001\n+ *  Copyright (C) Jeremy Allison 2000-2001\n+ *  Copyright (C) Rafal Szczesniak 2002\n+ *  Copyright (C) Volker Lendecke 2006\n+ *  Copyright (C) Michael Adam 2007\n+ *\n+ *  This program is free software; you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation; either version 2 of the License, or\n+ *  (at your option) any later version.\n+ *  \n+ *  This program is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *  \n+ *  You should have received a copy of the GNU General Public License\n+ *  along with this program; if not, write to the Free Software\n+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+ */\n+\n+/* function(s) moved from auth/auth_util.c to minimize linker deps */\n+\n+#include \"includes.h\"\n+\n+/****************************************************************************\n+ Duplicate a SID token.\n+****************************************************************************/\n+\n+NT_USER_TOKEN *dup_nt_token(TALLOC_CTX *mem_ctx, const NT_USER_TOKEN *ptoken)\n+{\n+\tNT_USER_TOKEN *token;\n+\n+\tif (!ptoken)\n+\t\treturn NULL;\n+\n+\ttoken = TALLOC_P(mem_ctx, NT_USER_TOKEN);\n+\tif (token == NULL) {\n+\t\tDEBUG(0, (\"talloc failed\\n\"));\n+\t\treturn NULL;\n+\t}\n+\n+\tZERO_STRUCTP(token);\n+\n+\tif (ptoken->user_sids && ptoken->num_sids) {\n+\t\ttoken->user_sids = (DOM_SID *)talloc_memdup(\n+\t\t\ttoken, ptoken->user_sids, sizeof(DOM_SID) * ptoken->num_sids );\n+\n+\t\tif (token->user_sids == NULL) {\n+\t\t\tDEBUG(0, (\"talloc_memdup failed\\n\"));\n+\t\t\tTALLOC_FREE(token);\n+\t\t\treturn NULL;\n+\t\t}\n+\t\ttoken->num_sids = ptoken->num_sids;\n+\t}\n+\t\n+\t/* copy the privileges; don't consider failure to be critical here */\n+\t\n+\tif ( !se_priv_copy( &token->privileges, &ptoken->privileges ) ) {\n+\t\tDEBUG(0,(\"dup_nt_token: Failure to copy SE_PRIV!.  \"\n+\t\t\t \"Continuing with 0 privileges assigned.\\n\"));\n+\t}\n+\n+\treturn token;\n+}\n+\n\n=== modified file 'source/Makefile.in'\n--- a/source/Makefile.in\t2007-04-10 10:34:43 +0000\n+++ b/source/Makefile.in\t2007-04-12 12:27:43 +0000\n@@ -464,6 +464,7 @@\n AUTH_SCRIPT_OBJ = auth/auth_script.o\n \n AUTH_OBJ = auth/auth.o @AUTH_STATIC@ auth/auth_util.o auth/token_util.o \\\n+\t   lib/util_nttoken.o \\\n \t   auth/auth_compat.o auth/auth_ntlmssp.o \\\n \t   $(PLAINTEXT_AUTH_OBJ) $(SLCACHE_OBJ) $(DCUTIL_OBJ)\n \n@@ -654,7 +655,7 @@\n \t      registry/reg_perfcount.o \\\n \t      registry/reg_dynamic.o \\\n \t      \\\n-\t      auth/token_util.o\n+\t      lib/util_nttoken.o\n   \n NET_OBJ = $(NET_OBJ1) $(PARAM_OBJ) $(SECRETS_OBJ) $(LIBSMB_OBJ) \\\n \t  $(RPC_PARSE_OBJ) $(PASSDB_OBJ) $(GROUPDB_OBJ) \\\n\n=== modified file 'source/auth/token_util.c'\n--- a/source/auth/token_util.c\t2007-04-09 11:02:19 +0000\n+++ b/source/auth/token_util.c\t2007-04-12 12:27:43 +0000\n@@ -28,47 +28,6 @@\n #include \"includes.h\"\n \n /****************************************************************************\n- Duplicate a SID token.\n-****************************************************************************/\n-\n-NT_USER_TOKEN *dup_nt_token(TALLOC_CTX *mem_ctx, const NT_USER_TOKEN *ptoken)\n-{\n-\tNT_USER_TOKEN *token;\n-\n-\tif (!ptoken)\n-\t\treturn NULL;\n-\n-\ttoken = TALLOC_P(mem_ctx, NT_USER_TOKEN);\n-\tif (token == NULL) {\n-\t\tDEBUG(0, (\"talloc failed\\n\"));\n-\t\treturn NULL;\n-\t}\n-\n-\tZERO_STRUCTP(token);\n-\n-\tif (ptoken->user_sids && ptoken->num_sids) {\n-\t\ttoken->user_sids = (DOM_SID *)talloc_memdup(\n-\t\t\ttoken, ptoken->user_sids, sizeof(DOM_SID) * ptoken->num_sids );\n-\n-\t\tif (token->user_sids == NULL) {\n-\t\t\tDEBUG(0, (\"talloc_memdup failed\\n\"));\n-\t\t\tTALLOC_FREE(token);\n-\t\t\treturn NULL;\n-\t\t}\n-\t\ttoken->num_sids = ptoken->num_sids;\n-\t}\n-\t\n-\t/* copy the privileges; don't consider failure to be critical here */\n-\t\n-\tif ( !se_priv_copy( &token->privileges, &ptoken->privileges ) ) {\n-\t\tDEBUG(0,(\"dup_nt_token: Failure to copy SE_PRIV!.  \"\n-\t\t\t \"Continuing with 0 privileges assigned.\\n\"));\n-\t}\n-\n-\treturn token;\n-}\n-\n-/****************************************************************************\n  Check for a SID in an NT_USER_TOKEN\n ****************************************************************************/\n \n\n=== modified file 'source/lib/util_reg.c'\n--- a/source/lib/util_reg.c\t2006-12-03 12:52:21 +0000\n+++ b/source/lib/util_reg.c\t2007-04-12 12:27:43 +0000\n@@ -223,3 +223,26 @@\n \n \treturn WERR_OK;\n }\n+\n+NT_USER_TOKEN *registry_create_admin_token(TALLOC_CTX *mem_ctx)\n+{\n+\tNT_USER_TOKEN *token = NULL;\n+\n+\t/* fake a user token: builtin administrators sid and the\n+\t * disk operators privilege is all we need to access the \n+\t * registry... */\n+\tif (!(token = TALLOC_ZERO_P(mem_ctx, NT_USER_TOKEN))) {\n+\t\tDEBUG(1, (\"talloc failed\\n\"));\n+\t\tgoto done;\n+\t}\n+\ttoken->privileges = se_disk_operators;\n+\tif (!add_sid_to_array(token, &global_sid_Builtin_Administrators,\n+\t\t\t &token->user_sids, &token->num_sids)) {\n+\t\tDEBUG(1, (\"Error adding builtin administrators sid \"\n+\t\t\t  \"to fake token.\\n\"));\n+\t\tgoto done;\n+\t}\n+done:\n+\treturn token;\n+}\n+\n\n=== modified file 'source/utils/net_conf.c'\n--- a/source/utils/net_conf.c\t2007-04-09 11:02:19 +0000\n+++ b/source/utils/net_conf.c\t2007-04-12 12:27:43 +0000\n@@ -198,6 +198,12 @@\n {\n \tWERROR werr = WERR_OK;\n \tchar *path = NULL;\n+\tNT_USER_TOKEN *token;\n+\n+\tif (!(token = registry_create_admin_token(ctx))) {\n+\t\tDEBUG(1, (\"Error creating admin token\\n\"));\n+\t\tgoto done;\n+\t}\n \n \tif (subkeyname == NULL) {\n \t\tpath = talloc_strdup(ctx, KEY_SMBCONF);\n@@ -207,8 +213,9 @@\n \t}\n \n \twerr = reg_open_path(ctx, path, desired_access,\n-\t\t\t     get_root_nt_token(), key);\n+\t\t\t     token, key);\n \n+done:\n \tTALLOC_FREE(path);\n \treturn werr;\n }\n\n"}