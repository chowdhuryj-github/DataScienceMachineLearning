{"category": "ham", "to_address": "derrell@samba.org", "from_address": "David Collier-Brown <davec-b@rogers.com>", "subject": "Re: readahead() which is Linux-only vs. posix_fadvise()", "body": "   And even that isn't extant on Solaris, so both calls are no-ops.\n\n   In general, you will find most filesystems try to do coalescence on\nwrites and readahed on reads, irrespective of vendor.\nOn solaris this is controlled by the -C option on newfs, and affected\nby the -a (maxcontig) option to newfs/tunefs.\n\n--dave\n\nderrell@samba.org wrote:\n> As I was working on a solution to the fact that my system provides the\n> readahead() function but not a declaration for that function, I discovered\n> that readahead() is documented as:\n> \n>  CONFORMING TO\n>        The  readahead()  system  call is Linux specific, and its use should be\n>        avoided in portable applications.\n> \n> Given this, it is possible that different Linux versions may conceivably use\n> slightly different prototypes for readahead(), so providing a declaration in\n> lib/replace is somewhat dangerous.\n> \n> In researching this, I discovered what appears to be a POSIX replacement.  It\n> looks like readahead is equivalent to posix_fadvise(..., POSIX_FADV_WILLNEED).\n> \n> The only place that readahead() is used, I think, is in vfs_readahead.c.\n> It might make sense for the maintainer of this module to look into using\n> posix_fadvise() instead of readahead().\n> \n> Cheers,\n> \n> Derrell\n> \n\n-- \nDavid Collier-Brown,         | Always do right. This will gratify\nSystem Programmer and Author | some people and astonish the rest\ndavecb@spamcop.net           |                      -- Mark Twain\n(416) 223-5943\n\n"}