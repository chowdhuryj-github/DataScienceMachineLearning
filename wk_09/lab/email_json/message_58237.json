{"category": "ham", "to_address": "\"alex.jamestin+usenet@gmail.com\" <alex.jamestin@gmail.com>", "from_address": "Steve Bertrand <iaccounts@ibctech.ca>", "subject": "Re: How can i make a perl program lauch another perl program that\n takes options", "body": "alex.jamestin+usenet@gmail.com wrote:\n> Hi all,\n> \n> Any help on this would be appreciated :)\n> \n> Currently I have a perl program thats required to call another perl\n> program. The second one takes arguments and can be called as:\n> \n>             perl vplan_all.pl 5.6 24.0 ajtest\n> \n> Here 5.6, 24.0 and ajtest are all command line options.\n> \n> I have to call this from a second program that i wrote. I tried the\n> call as below -\n> \n>           system( \"perl vplan_all.pl 5.6 24.0\")\n>             or die \"Couldn't run the vplan_all.pl script: $!\\n\";\n> \n> However, this doesn't seem to work. The shell reports that perl can't\n> find the file. However, when i simply try with -\n> \n>           system( \"perl vplan_all.pl\")\n>             or die \"Couldn't run the vplan_all.pl script: $!\\n\";\n> \n> The script is now called and i get the result -\n> \n>           vp_all: USAGE: perl vplan_all.pl  \n> \n> \n> which is the expected behaviour when no options are provided.\n> So apparently the shell calls perl and passes the entire \"perl\n> vplan_all.pl 5.6 24.0\" as a chunk. Perl can't then seem to\n> differentiate between the code name and the options.\n> \n> I've tried bypassing the shell [ system(xxx,xxx,xx)] but that doesn't\n> seem to help.\n\nIf vplan_all.pl is in fact it's own application, try calling it without\ncalling Perl first:\n\nsystem(\"/path/to/program/vp_all.pl arg1 arg2\") or die \"blah blah: $!\";\n\nBTW, AFAIR, inserting a \\n after the $! will negate the $!, but I may be\nmistaken.\n\nSteve\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}