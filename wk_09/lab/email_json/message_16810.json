{"category": "ham", "to_address": "James E Keenan <jkeen_via_google@yahoo.com>", "from_address": "Joshua Isom <jrisom@gmail.com>", "subject": "Re: Is Parrot 1.0 too late?", "body": "\nOn Apr 26, 2007, at 8:28 AM, James E Keenan wrote:\n\n> Allison Randal wrote:\n>> Nicholas Clark wrote:\n>>>\n>>> I guess that the most obvious current thing that ties Parrot to the \n>>> Perl\n>>> community is that Parrot requires a copy of Perl to bootstrap, and \n>>> all the\n>>> build tools are written in Perl 5.\n>> This is slated to change before the 1.0 release.\n>\n> Since November I've been working on maintaining those of Parrot's \n> configuration and build tools written in Perl 5.  Lately I've been \n> trying to recruit others to help in that process.  The discussion in \n> this thread suggests that at some future point some or all of the Perl \n> scripts/modules I've been working on will be replaced with ... \n> something else.\n>\n> This, of course, makes me wonder what I'm doing now and, more \n> importantly, makes me wonder what to say to other people with Perl 5 \n> skills who want to help with the Parrot project.\n>\n> This is not simply an ego thing on my part.  I've written very little \n> of the Perl 5 tools and taken on maintenance of a bit more, but one \n> thing I realize is how much of Parrot's source code is written in Perl \n> 5.  How much of that must eventually be replaced?\n>\n> And who is going to maintain it?  In my experience Perl 5 programmers \n> are relatively abundant while C programmers (these days) are rarer.  \n> How many people might actually learn the yet-to-be-designed HLL that \n> would presumably replace a lot of the Perl 5 we currently use?\n>\n> So, can someone draw a roadmap of:\n>\n> -- *which parts* of Parrot's configuration and build tools *need* to \n> be replaced with something else;\n>\n\nEverything using perl5, since parrot will ultimately help to get rid of \nperl5, until a perl5 port comes along.  You could theoretically use \nperl6, but that would presently hurt portability(since pugs uses ghc).\n\n> -- *why* that replacement is necessary;\n>\n\nThere won't be a perl5 to depend on.  Currently, building perl5 \nrequires perl5, which can be difficult with porting.  Plus parrot's \nconfig is greatly dependent on perl's config instead of having it's own \nconfig.\n\n> -- *when* in the design process that replacement must take place; and\n>\n\nI've never heard of a timetable for this one.  I know it's been a goal \nfor a long time now.  I've often thought about the various ways to \ncleanly bootstrap parrot with as few external dependencies as possible, \nand to make those dependencies as generic as possible.  But I have so \nlittle time available so have never got to the point of actually coding \nto see how to do a clean bootstrap, so no reliance on an installed perl \nor parrot.\n\n> -- *how* that replacement will be maintained going forward from there?\n>\n\nWith the right abstraction in the right points, a proper directory \nlayout, and good documentation, it'll be good.  Plus, starting from \nscratch is always a good thing, sometimes...\n\n> If this is already discussed in some of the design documents, I would \n> appreciate a link.  Thank you very much.\n>\n> kid51\n>\n>\n\nI think the first step would be to decide how to bootstrap a miniparrot \neasily, either via a generic makefile and a predefined config.h, or a c \nprogram to probe and build whatever.  Actually implementing that step \nwouldn't need to be immediate.  Then to figure out what the bare \nminimum of parrot would be needed, most likely be writing a \nConfigure.pir set of code(and if we abstract enough, other programs \nlike perl6 and ruby would use it for whatever configuration they need, \nsuch as for building dynoplibs and dynpmcs).  Then we'd just need to \nbuild a parrot that can support just that, which wouldn't require any \njit, or cgp cores, or have to deal with threading.  Plus that so called \nminiparrot could also be used some for an embedded parrot.\n\nAfter knowing what's needed to configure for parrot, the next step is \nprobably the build tools.  We know we our aim is to replace perl5 in \nthe long run, and that perl5 won't be available eventually(how many \nsystems contain perl4?).\n\nOther than \"parrot will eventually use miniparrot to configure and \nbuilt itself\" I don't believe there's been a lot of discussion of just \nhow to go about it.  All I've had time to do is ponder how to do it \ncleanly.\n\n"}