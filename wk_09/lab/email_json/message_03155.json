{"category": "ham", "to_address": "Alison Winters <alisonw@sgi.com>", "from_address": "James Peach <jpeach@samba.org>", "subject": "Re: samba profiling and pcp pmda", "body": "On 11/04/2007, at 6:34 PM, Alison Winters wrote:\n\n> CC:ed into samba-technical from personal email, this is a discussion\n> about the steps we could to take to enhance the existing profiling  \n> code\n> in Samba.\n>\n> James Peach wrote:\n>> The metrics export mechanism from jpeach-xmetrics belongs in the main\n>> samba tree.\n>>\n> Agreed.\n>\n>> The first thing you need to do to get this in is to split it into\n>> multiple mmap'ed files. That is, each different metrics structure  \n>> should\n>> have its own mmap and backing store. Once you do this, the allocator\n>> becomes a simple slot allocator and most of the really ugly code  \n>> goes away.\n>>\n> Do you mean having one header file that everything mmaps and a  \n> bunch of\n> files for each connected client and configured share that get mmapped\n> separately?\n\nI mean to use one mmap per record type. The current scheme is ugly  \nbecause it really doesn't want to be a proper allocator but it has to  \ndeal with 2 different sizes of records in the mmap. If you have a  \nseparate mmap for each record type, the allocator goes back to being  \nnice and simple.\n\n> I'm assuming the ugly code you're referring to is the bit\n> where it has to keep growing the file whenever new connections join  \n> etc.\n\nNo, I'm referring to the allocation of metric records inside the mmap.\n\n>\n>> The second thing that you need os some way of gathering the stats  \n>> that\n>> is not that horrible VFS module :)\n>>\n> That's in the pipeline :)  What i'm planning is to just add a bit of\n> extra magic to the existing Samba profiling macros that allow us to\n> split it out per-client and per-share along with the existing  \n> recording\n> of global counts and times.  I'm pretty sure this is going to be  \n> fairly\n> elegant and small if i get it right.\n\nThat sounds neat. It would be great if you had some code to reconcile  \nthe existing profiling stats with these metrics.\n\n> I have a separate patch which i can't submit yet (it's copyright SGI)\n> that splits out all of the current profiling statistics into smaller\n> groups that we can turn on and off independently.\n\nDo you mean the stats that currently live in the sysv shared memory  \nsegment?\n\n> This will allow us\n> more granular control over what to profile, and will hopefully avoid\n> nasty performance hits when we're only interested in isolated areas of\n> the code.\n\nIIRC you only get a big performance hit when you are timing  \noperations. You can probably avoid this (to some degree) by using  \nplatform-specific timers.\n\n>> Once you have a stable, versioned export mechanism, then the PMDA can\n>> simply be one of the consumers of the exported metrics. There's  \n>> not real\n>> need for it to be in the Samba tree. I'd be OK with making the client\n>> interfaces (header file and shared library) LGPL.\n>>\n> I guess my real problem with this is that there's already a PMDA in  \n> the\n> pcp/ subdirectory in Samba.  This PMDA is broken right now - it won't\n> compile because some definitions have been moved around.  If it's not\n> going to be maintained then it should be removed from the tree - i can\n> just have a closed-source PMDA that builds independently (assuming  \n> LGPL\n> headers).  On the other hand, since it's in the tree anyway it  \n> could be\n> maintained as part of Samba - in which case i think applying the\n> attached two patches (move, then add) would be the right thing to do.\n> These patches move the PMDA into the main build - they're just a  \n> subset\n> of your xmetrics branch.\n\nIMHO, the Samba PMDA belongs in the PCP tree, not in the Samba tree.  \nSince you are going to be the one maintaining it, it's easier all  \nround if it lives there. We can simply remove the existing PMDA from  \nthe Samba tree.\n\n--\nJames Peach | jpeach@samba.org\n\n\n"}