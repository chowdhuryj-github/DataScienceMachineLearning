{"category": "ham", "to_address": "\"Rob Dixon\" <rob.dixon@350.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Nested loop", "body": "On 4/19/07, Rob Dixon  wrote:\nsnip\n> for (my $elem = $doc->firstChild; $elem; $elem = $elem->nextSibling) {\n>   :\n> }\nsnip\n\nI covered that in my earlier email:\n    Weirder stuff that you only tend to see people coming from a C background do\n    for (my $node = $head; $node;$node = $node->next) {}\n    ...\n    But in Perl it is rarely necessary to do this sort of loop since most\n    functions return a list that can be iterated over using for:\n\n    for my $node ($head->nodes) {}\n\nIn this case your module should include a children method\n\nfor my $elem ($doc->children) {}\n\nor a true iterator\n\nmy $iter = $doc->child_iter;\nwhile (my $elem = $iter->next) {}\n\nIf it doesn't then bug the maintainer to add one or both.  Having a\ntrue iterator will put him or her ahead of the curve for Perl 6's\niterated-the-iterator operator\n\nfor =$iter -> $elem {}\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}