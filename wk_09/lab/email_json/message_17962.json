{"category": "ham", "to_address": "\"Matthew J. Avitable\" <mja@richweb.com>", "from_address": "Pierre Mariani <frenchyp@gmail.com>", "subject": "Re: improving my code: array of references", "body": "On Fri, 2007-04-27 at 14:26 -0400, Matthew J. Avitable wrote:\n> Pierre,\n> >> Thank you, but I got it to work the way I wanted, thanks to Matthew and\n> >> Rob's posts:\n> >>\n> >> map { modify_variable(${$_}) } = \\($var1, $var2, $var3);\n> >>     \n> \n> To annotate to what Paul said - the above won't work.  The block syntax \n> of map is \"map BLOCK LIST\".  Plus, it looks like you are going to \n> dereference $_ before it gets passed into the function.  I'm not \n> particularly sure what the statement above will do. :)   The following \n> should work, if your version of modify_variable treats its first \n> argument as a scalar reference.  See my earlier post for an example of \n> how modify_variable could work.\n> \n> map { modify_variable($_) } \\($var1, $var2, $var3);  \n\nGood catch. My code would not have compiled with the '=' sign. I should\npay more attention. Thanks\n\n\n> \n> > And map in void context is generally frowned upon.\n> >   \n> \n> There's lots of heated debate about this apparently.  I'm certainly not \n> into starting a flame war, so I'll just point out an interesting \n> conversation which explores this topic, pretty well in depth.\n> \n> http://www.perlmonks.org/index.pl?node_id=296742\n> \n> \n> -m\n> \n> -- \n> + Matt J. Avitable: Senior Systems Analyst, Richweb, Inc.\n> + Richweb.com: Providing Internet-Based Business Solutions since 1995\n> + (804) 747.8592 x 109\n> \n> \n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}