{"category": "ham", "to_address": "deepayan.sarkar@gmail.com, \"Martin Morgan\" <mtmorgan@fhcrc.org>", "from_address": "\"Michael Frumin\" <michael@frumin.net>", "subject": "Re: [R] Lookups in R", "body": "the problem I have is that userid's are not just sequential from\n1:n_users.  if they were, of course I'd have made a big matrix that was\nn_users x n_fields and that would be that.  but, I think what I cando is\njust use the hash to store the index into the result matrix, nothing\nmore. then the rest of it will be easy.\n\nbut please tell me more about eliminating loops.  In many cases in R I\nhave used lapply and derivatives to avoid loops, but in this case they\nseem to give me extra overhead simply by the generation of their result\nlists:\n\n> system.time(lapply(1:10^4, mean))\n   user  system elapsed \n   1.31    0.00    1.31 \n> system.time(for(i in 1:10^4) mean(i))\n   user  system elapsed \n   0.33    0.00    0.32 \n\n\nthanks,\nmike\n\n\n> I don't think that's a fair comparison--- much of the overhead comes\n> from the use of data frames and the creation of the indexing vector. I\n> get\n> \n> > n_accts <- 10^3\n> > n_trans <- 10^4\n> > t <- list()\n> > t$amt <- runif(n_trans)\n> > t$acct <- as.character(round(runif(n_trans, 1, n_accts)))\n> > uhash <- new.env(hash=TRUE, parent=emptyenv(), size=n_accts)\n> > for (acct in as.character(1:n_accts)) uhash[[acct]] <- list(amt=0, n=0)\n> > system.time(for (i in seq_along(t$amt)) {\n> +     acct <- t$acct[i]\n> +     x <- uhash[[acct]]\n> +     uhash[[acct]] <- list(amt=x$amt + t$amt[i], n=x$n + 1)\n> + }, gcFirst = TRUE)\n>    user  system elapsed\n>   0.508   0.008   0.517\n> > udf <- matrix(0, nrow = n_accts, ncol = 2)\n> > rownames(udf) <- as.character(1:n_accts)\n> > colnames(udf) <- c(\"amt\", \"n\")\n> > system.time(for (i in seq_along(t$amt)) {\n> +     idx <- t$acct[i]\n> +     udf[idx, ] <- udf[idx, ] + c(t$amt[i], 1)\n> + }, gcFirst = TRUE)\n>    user  system elapsed\n>   1.872   0.008   1.883\n> \n> The loop is still going to be the problem for realistic examples.\n> \n> -Deepayan\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}