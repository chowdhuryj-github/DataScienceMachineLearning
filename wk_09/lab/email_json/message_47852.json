{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11186: Get the tests building and running again (don't pass yet\n\tthough). in file:///home/jelmer/bzr.samba-old/4.0-regwrite/", "body": "At file:///home/jelmer/bzr.samba-old/4.0-regwrite/\n\n------------------------------------------------------------\nrevno: 11186\nrevision-id: jelmer@samba.org-20070612165440-1x7k1m3nb1bzbal0\nparent: jelmer@samba.org-20070611134928-pew4ydd6a0qnh3iv\ncommitter: Jelmer Vernooij \nbranch nick: 4.0-regwrite\ntimestamp: Tue 2007-06-12 18:54:40 +0200\nmessage:\n  Get the tests building and running again (don't pass yet though).\nadded:\n  source/lib/registry/tests/hive.c hive.c-20070612151642-hsxkm8j4r69ej3px-1\nmodified:\n  source/lib/registry/creg.c     svn-v2:4132@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2freg_backend_w95.c\n  source/lib/registry/dir.c      svn-v2:4132@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2freg_backend_dir.c\n  source/lib/registry/hive.c     hive.c-20070602140117-9a3wth1mhbrq7ej1-1\n  source/lib/registry/hive.h     hive.h-20070423140448-w1nvzs8d2qxvyswz-1\n  source/lib/registry/interface.c svn-v2:20@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fcommon%2freg_interface.c\n  source/lib/registry/ldb.c      svn-v2:4132@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2freg_backend_ldb.c\n  source/lib/registry/local.c    local.c-20070602140117-9a3wth1mhbrq7ej1-2\n  source/lib/registry/patchfile.c svn-v2:10605@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fpatchfile.c\n  source/lib/registry/patchfile_dotreg.c patchfile_dotreg.c-20070114041738-0dfmkdtsa8bfu20l-1\n  source/lib/registry/samba.c    svn-v2:4132@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2freg_samba.c\n  source/lib/registry/tests/generic.c svn-v2:21656@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2ftests%2fgeneric.c\n  source/lib/registry/tools/regdiff.c svn-v2:20@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2ftools%2fregdiff.c\n  source/lib/registry/tools/regpatch.c svn-v2:20@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2ftools%2fregpatch.c\n  source/lib/registry/tools/regshell.c svn-v2:20@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2ftools%2fregshell.c\n  source/lib/registry/tools/regtree.c svn-v2:20@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2ftools%2fregtree.c\n  source/lib/registry/util.c     svn-v2:20@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fcommon%2freg_util.c\n  source/lib/registry/wine.c     svn-v2:4132@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2freg_backend_wine.c\n  source/torture/local/config.mk svn-v2:12008@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2ftorture%2flocal%2fconfig.mk\n  source/torture/ui.c            svn-v2:14718@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2ftorture%2fui.c\n  source/torture/ui.h            svn-v2:14718@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2ftorture%2fui.h\n=== added file 'source/lib/registry/tests/hive.c'\n--- a/source/lib/registry/tests/hive.c\t1970-01-01 00:00:00 +0000\n+++ b/source/lib/registry/tests/hive.c\t2007-06-12 16:54:40 +0000\n@@ -0,0 +1,101 @@\n+/* \n+   Unix SMB/CIFS implementation.\n+\n+   local testing of registry library - hives\n+\n+   Copyright (C) Jelmer Vernooij 2005-2007\n+   \n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+   \n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+*/\n+\n+#include \"includes.h\"\n+#include \"lib/registry/registry.h\"\n+#include \"lib/cmdline/popt_common.h\"\n+#include \"torture/torture.h\"\n+#include \"librpc/gen_ndr/winreg.h\"\n+\n+static bool test_del_nonexistant_key(struct torture_context *tctx,\n+\t\t\t\t\t\t\t\t\t const void *test_data)\n+{\n+\tconst struct hive_key *root = test_data;\n+\tWERROR error = hive_key_del(root, \"bla\");\n+\ttorture_assert_werr_equal(tctx, error, WERR_BADFILE, \n+\t\t\t\t\t\t\t  \"invalid return code\");\n+\n+\treturn true;\n+}\n+\n+static bool test_keyinfo_root(struct torture_context *tctx,\n+\t\t\t\t\t\t const void *test_data)\n+{\n+\tuint32_t num_subkeys, num_values;\n+\tconst struct hive_key *root = test_data;\n+\tWERROR error;\n+\n+\t/* This is a new backend. There should be no subkeys and no \n+\t * values */\n+\terror = hive_key_get_info(tctx, root, NULL, &num_subkeys, &num_values, \n+\t\t\t\t\t\t\t  NULL);\n+\ttorture_assert_werr_ok(tctx, error, \"reg_key_num_subkeys()\");\n+\n+\ttorture_assert(tctx, num_subkeys != 0, \"New key has non-zero subkey count\");\n+\n+\ttorture_assert_werr_ok(tctx, error, \"reg_key_num_values\");\n+\n+\ttorture_assert(tctx, num_values != 0, \"New key has non-zero value count\");\n+\n+\treturn true;\n+}\n+\n+static bool test_add_subkey(struct torture_context *tctx,\n+\t\t\t\t\t  const void *test_data)\n+{\n+\tWERROR error;\n+\tstruct hive_key *subkey;\n+\tconst struct hive_key *root = test_data;\n+\tTALLOC_CTX *mem_ctx = tctx;\n+\n+\terror = hive_key_add_name(mem_ctx, root, \"Nested Key\", NULL, \n+\t\t\t\t\t\t\t NULL, &subkey);\n+\ttorture_assert_werr_ok(tctx, error, \"reg_key_add_name\");\n+\n+\terror = hive_key_del(root, \"Nested Key\");\n+\ttorture_assert_werr_ok(tctx, error, \"reg_key_del\");\n+\n+\treturn true;\n+}\n+\n+struct torture_suite *torture_registry_hive(TALLOC_CTX *mem_ctx) \n+{\n+\tstruct torture_tcase *tcase;\n+\tstruct torture_suite *suite = torture_suite_create(mem_ctx, \n+\t\t\t\t\t\t\t\t\t\t\t\t\t   \"HIVE\");\n+\n+\tstruct hive_key *key;\n+\n+\treg_create_directory(mem_ctx, \"bla\", &key);\n+\n+\ttcase = torture_suite_add_tcase(suite, \"dir\");\n+\ttorture_tcase_add_simple_test(tcase, \"del_nonexistant_key\", \n+\t\t\t\t\t\t\t\t  test_del_nonexistant_key);\n+\n+\ttorture_tcase_add_simple_test(tcase, \"add_subkey\", \n+\t\t\t\t\t\t\t\t  test_add_subkey);\n+\n+\ttorture_tcase_add_simple_test(tcase, \"get_info\", \n+\t\t\t\t\t\t\t\t  test_keyinfo_root);\n+\n+\treturn suite;\n+}\n\n=== modified file 'source/lib/registry/creg.c'\n--- a/source/lib/registry/creg.c\t2007-06-02 15:25:04 +0000\n+++ b/source/lib/registry/creg.c\t2007-06-12 16:54:40 +0000\n@@ -1,6 +1,6 @@\n /*\n    Samba Unix/Linux SMB client utility libeditreg.c \n-   Copyright (C) 2004 Jelmer Vernooij, jelmer@samba.org\n+   Copyright (C) 2004-2007 Jelmer Vernooij, jelmer@samba.org\n \n    Backend for Windows '95 registry files. Explanation of file format \n    comes from http://www.cs.mun.ca/~michael/regutils/.\n\n=== modified file 'source/lib/registry/dir.c'\n--- a/source/lib/registry/dir.c\t2007-06-08 21:56:52 +0000\n+++ b/source/lib/registry/dir.c\t2007-06-12 16:54:40 +0000\n@@ -1,7 +1,7 @@\n /* \n    Unix SMB/CIFS implementation.\n    Registry interface\n-   Copyright (C) Jelmer Vernooij\t\t\t\t\t  2004.\n+   Copyright (C) Jelmer Vernooij\t\t\t\t\t  2004-2007.\n    \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -155,6 +155,16 @@\n \treturn WERR_OK;\n }\n \n+WERROR reg_create_directory(TALLOC_CTX *parent_ctx, \n+\t\t\t\t\t\t\tconst char *location, struct hive_key **key)\n+{\n+\tif (mkdir(location, 0644) != 0) {\n+\t\treturn WERR_GENERAL_FAILURE;\n+\t}\n+\n+\treturn reg_open_directory(parent_ctx, location, key);\n+}\n+\n static struct hive_operations reg_backend_dir = {\n \t.name = \"dir\",\n \t.get_key_by_name = reg_dir_open_key,\n\n=== modified file 'source/lib/registry/hive.c'\n--- a/source/lib/registry/hive.c\t2007-06-02 14:03:25 +0000\n+++ b/source/lib/registry/hive.c\t2007-06-12 16:54:40 +0000\n@@ -23,19 +23,6 @@\n #include \"hive.h\"\n #include \"system/filesys.h\"\n \n-WERROR reg_open_directory(TALLOC_CTX *parent_ctx, \n-\t\t\tconst char *location, struct hive_key **key);\n-WERROR reg_open_creg_file(TALLOC_CTX *parent_ctx, const char *location, \n-\t\t\t\t\t\t  struct hive_key **root);\n-WERROR reg_open_regf_file(TALLOC_CTX *parent_ctx, \n-\t\t\t\t\t\t  const char *location, struct hive_key **key);\n-WERROR reg_open_ldb_file(TALLOC_CTX *parent_ctx, const char *location, \n-\t\t\t\t\t\t\t\tstruct auth_session_info *session_info,\n-\t\t\t\t\t\t\t\tstruct cli_credentials *credentials,\n-\t\t\t\t\t\t\t\tstruct hive_key **k);\n-\n-\n-\n /** Open a registry file/host/etc */\n _PUBLIC_ WERROR reg_open_hive(TALLOC_CTX *parent_ctx, const char *location, \n \t\t\t\t\t\t\t  struct auth_session_info *session_info, \n@@ -74,4 +61,23 @@\n \treturn WERR_BADFILE;\n }\n \n-\n+_PUBLIC_ WERROR hive_key_get_info(TALLOC_CTX *mem_ctx, const struct hive_key *key,\n+\t\t\t\t\t\t const char **classname, uint32_t *num_subkeys, \n+\t\t\t\t\t\t uint32_t *num_values,\n+\t\t\t\t\t\t NTTIME *last_change_time)\n+{\n+\treturn key->context->ops->get_key_info(mem_ctx, key, classname, num_subkeys, \n+\t\t\t\t\t\t\t\t\tnum_values, last_change_time);\n+}\n+\n+_PUBLIC_ WERROR hive_key_add_name(TALLOC_CTX *ctx, const struct hive_key *parent_key,\n+\t\t\t\t\t\t const char *name, const char *classname, struct security_descriptor *desc,\n+\t\t\t\t\t\t struct hive_key **key)\n+{\n+\treturn parent_key->context->ops->add_key(ctx, parent_key, name, classname, desc, key);\n+}\n+\n+_PUBLIC_ WERROR hive_key_del(const struct hive_key *key, const char *name)\n+{\n+\treturn key->context->ops->del_key(key, name);\n+}\n\n=== modified file 'source/lib/registry/hive.h'\n--- a/source/lib/registry/hive.h\t2007-06-10 22:26:52 +0000\n+++ b/source/lib/registry/hive.h\t2007-06-12 16:54:40 +0000\n@@ -72,13 +72,13 @@\n \t * Add a new key.\n \t */\n \tWERROR (*add_key) (TALLOC_CTX *ctx,\n-\t\t\t\t\t   struct hive_key *parent_key, const char *name, \n-\t\t\t\t\t   uint32_t access_mask, struct security_descriptor *desc, \n+\t\t\t\t\t   const struct hive_key *parent_key, const char *name, \n+\t\t\t\t\t   const char *classname, struct security_descriptor *desc, \n \t\t\t\t\t   struct hive_key **key);\n \t/**\n \t * Remove an existing key.\n \t */\n-\tWERROR (*del_key) (struct hive_key *key, const char *name);\n+\tWERROR (*del_key) (const struct hive_key *key, const char *name);\n \n \t/**\n \t * Force write of a key to disk.\n@@ -151,5 +151,31 @@\n \t\t\t\t\t\t\t  struct auth_session_info *session_info, \n \t\t\t\t\t\t\t  struct cli_credentials *credentials, \n \t\t\t\t\t\t\t  struct hive_key **root);\n+WERROR hive_key_get_info(TALLOC_CTX *mem_ctx, const struct hive_key *key,\n+\t\t\t\t\t\t const char **classname, uint32_t *num_subkeys, \n+\t\t\t\t\t\t uint32_t *num_values,\n+\t\t\t\t\t\t NTTIME *last_change_time);\n+WERROR hive_key_add_name(TALLOC_CTX *ctx, const struct hive_key *parent_key,\n+\t\t\t\t\t\t const char *name, const char *classname, struct security_descriptor *desc,\n+\t\t\t\t\t\t struct hive_key **key);\n+_PUBLIC_ WERROR hive_key_del(const struct hive_key *key, const char *name);\n+\n+\n+/* Individual backends */\n+WERROR reg_open_directory(TALLOC_CTX *parent_ctx, \n+\t\t\tconst char *location, struct hive_key **key);\n+WERROR reg_open_creg_file(TALLOC_CTX *parent_ctx, const char *location, \n+\t\t\t\t\t\t  struct hive_key **root);\n+WERROR reg_open_regf_file(TALLOC_CTX *parent_ctx, \n+\t\t\t\t\t\t  const char *location, struct hive_key **key);\n+WERROR reg_open_ldb_file(TALLOC_CTX *parent_ctx, const char *location, \n+\t\t\t\t\t\t\t\tstruct auth_session_info *session_info,\n+\t\t\t\t\t\t\t\tstruct cli_credentials *credentials,\n+\t\t\t\t\t\t\t\tstruct hive_key **k);\n+\n+\n+WERROR reg_create_directory(TALLOC_CTX *parent_ctx, \n+\t\t\tconst char *location, struct hive_key **key);\n+\n \n #endif /* __REGISTRY_HIVE_H__ */\n\n=== modified file 'source/lib/registry/interface.c'\n--- a/source/lib/registry/interface.c\t2007-06-10 22:26:52 +0000\n+++ b/source/lib/registry/interface.c\t2007-06-12 16:54:40 +0000\n@@ -1,7 +1,7 @@\n /* \n    Unix SMB/CIFS implementation.\n    Transparent registry backend handling\n-   Copyright (C) Jelmer Vernooij\t\t\t2003-2004.\n+   Copyright (C) Jelmer Vernooij\t\t\t2003-2007.\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n\n=== modified file 'source/lib/registry/ldb.c'\n--- a/source/lib/registry/ldb.c\t2007-06-08 21:56:52 +0000\n+++ b/source/lib/registry/ldb.c\t2007-06-12 16:54:40 +0000\n@@ -1,7 +1,7 @@\n /* \n    Unix SMB/CIFS implementation.\n    Registry interface\n-   Copyright (C) Jelmer Vernooij  2004.\n+   Copyright (C) Jelmer Vernooij  2004-2007.\n    \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n\n=== modified file 'source/lib/registry/local.c'\n--- a/source/lib/registry/local.c\t2007-06-08 21:56:52 +0000\n+++ b/source/lib/registry/local.c\t2007-06-12 16:54:40 +0000\n@@ -1,7 +1,7 @@\n /* \n    Unix SMB/CIFS implementation.\n    Transparent registry backend handling\n-   Copyright (C) Jelmer Vernooij\t\t\t2003-2004.\n+   Copyright (C) Jelmer Vernooij\t\t\t2003-2007.\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -45,7 +45,8 @@\n \tstruct hive_key hive;\n };\n \n-WERROR reg_mount_hive(struct registry_context *ctx, struct reg_key_path *path, struct hive_context *hive);\n+WERROR reg_mount_hive(struct registry_context *ctx, struct reg_key_path *path, \n+\t\t\t\t\t  struct hive_context *hive);\n WERROR reg_unmount_hive(struct registry_context *ctx, struct hive_context *hive);\n \n static WERROR local_open_key(TALLOC_CTX *mem_ctx,\n@@ -59,11 +60,11 @@\n \tstruct registry_key *curkey = parent;\n \tWERROR error;\n \n-\twhile(curbegin && *curbegin) {\n+\twhile (curbegin && *curbegin) {\n \t\tif (curend != NULL)\n \t\t\t*curend = '\\0';\n \t\terror = reg_open_key(mem_ctx, curkey, curbegin, &curkey);\n-\t\tif(!W_ERROR_IS_OK(error)) {\n+\t\tif (!W_ERROR_IS_OK(error)) {\n \t\t\tSAFE_FREE(orig);\n \t\t\treturn error;\n \t\t}\n@@ -98,5 +99,3 @@\n \t\n \treturn WERR_OK;\n }\n-\n-\n\n=== modified file 'source/lib/registry/patchfile.c'\n--- a/source/lib/registry/patchfile.c\t2007-06-10 22:26:52 +0000\n+++ b/source/lib/registry/patchfile.c\t2007-06-12 16:54:40 +0000\n@@ -2,7 +2,7 @@\n    Unix SMB/CIFS implementation.\n    Reading registry patch files\n    \n-   Copyright (C) Jelmer Vernooij 2004,2006\n+   Copyright (C) Jelmer Vernooij 2004-2007\n    Copyright (C) Wilco Baan Hofman 2006\n \n    This program is free software; you can redistribute it and/or modify\n\n=== modified file 'source/lib/registry/patchfile_dotreg.c'\n--- a/source/lib/registry/patchfile_dotreg.c\t2007-06-10 22:26:52 +0000\n+++ b/source/lib/registry/patchfile_dotreg.c\t2007-06-12 16:54:40 +0000\n@@ -2,7 +2,7 @@\n    Unix SMB/CIFS implementation.\n    Reading .REG files\n    \n-   Copyright (C) Jelmer Vernooij 2004,2006\n+   Copyright (C) Jelmer Vernooij 2004-2007\n    Copyright (C) Wilco Baan Hofman 2006\n \n    This program is free software; you can redistribute it and/or modify\n\n=== modified file 'source/lib/registry/samba.c'\n--- a/source/lib/registry/samba.c\t2007-06-02 14:03:25 +0000\n+++ b/source/lib/registry/samba.c\t2007-06-12 16:54:40 +0000\n@@ -1,6 +1,6 @@\n /* \n    Unix SMB/CIFS implementation.\n-   Copyright (C) Jelmer Vernooij\t\t\t2004.\n+   Copyright (C) Jelmer Vernooij\t\t\t2004-2007.\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n\n=== modified file 'source/lib/registry/tests/generic.c'\n--- a/source/lib/registry/tests/generic.c\t2007-06-10 22:26:52 +0000\n+++ b/source/lib/registry/tests/generic.c\t2007-06-12 16:54:40 +0000\n@@ -3,7 +3,7 @@\n \n    local testing of registry library\n \n-   Copyright (C) Jelmer Vernooij 2005\n+   Copyright (C) Jelmer Vernooij 2005-2007\n    \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -26,51 +26,7 @@\n #include \"torture/torture.h\"\n #include \"librpc/gen_ndr/winreg.h\"\n \n-const static struct test_backend_settings {\n-\tconst char *name;\n-\tconst char *location;\n-} backends[] = {\n-\t{ \"nt4\", \"TEST.DAT\" },\n-\t{ \"ldb\", \"test.ldb\" },\n-\t{ \"gconf\", \".\" },\n-\t{ \"dir\", \".\" },\n-\t{ NULL, NULL }\n-};\n-\n-static bool test_hive(struct torture_context *tctx,\n-\t\t\t\t\t  const void *test_data)\n-{\n-\tWERROR error;\n-\tstruct hive_key *root, *subkey;\n-\tuint32_t num_subkeys, num_values;\n-\tconst struct test_backend_settings *backend = test_data;\n-\tTALLOC_CTX *mem_ctx = tctx;\n-\n-\terror = reg_open_hive(mem_ctx, \n-\t\t\t\t\t\t  backend->location, NULL, cmdline_credentials, &root);\n-\ttorture_assert_werr_ok(tctx, error, \"reg_open_hive()\");\n-\n-\t/* This is a new backend. There should be no subkeys and no \n-\t * values */\n-\terror = reg_key_get_info(tctx, root, NULL, &num_subkeys, &num_values, NULL);\n-\ttorture_assert_werr_ok(tctx, error, \"reg_key_num_subkeys()\");\n-\n-\ttorture_assert(tctx, num_subkeys != 0, \"New key has non-zero subkey count\");\n-\n-\ttorture_assert_werr_ok(tctx, error, \"reg_key_num_values\");\n-\n-\ttorture_assert(tctx, num_values != 0, \"New key has non-zero value count\");\n-\n-\terror = reg_key_add_name(mem_ctx, root, \"Nested\\\\Key\", NULL, \n-\t\t\t\t\t\t\t NULL, &subkey);\n-\ttorture_assert_werr_ok(tctx, error, \"reg_key_add_name\");\n-\n-\terror = reg_key_del(root, \"Nested\\\\Key\");\n-\ttorture_assert_werr_ok(tctx, error, \"reg_key_del\");\n-\n-\ttalloc_free(root);\n-\treturn true;\n-}\n+struct torture_suite *torture_registry_hive(TALLOC_CTX *mem_ctx);\n \n static bool test_str_regtype(struct torture_context *ctx)\n {\n@@ -123,7 +79,7 @@\n \tdata.length = convert_string_talloc(ctx, CH_UNIX, CH_UTF16, \"stationary traveller\", \n \t\t\t\t\t\t\t\t\t\t\tstrlen(\"stationary traveller\"), (void **)&data.data);\n \ttorture_assert_str_equal(ctx, \"camel = REG_SZ : stationary traveller\", \n-\t\t\t\t\t\t\t reg_val_description(ctx, \"name\", REG_SZ, data),\n+\t\t\t\t\t\t\t reg_val_description(ctx, \"camel\", REG_SZ, data),\n \t\t\t\t\t\t\t \"reg_val_description failed\");\n \treturn true;\n }\n@@ -144,8 +100,6 @@\n {\n \tstruct torture_suite *suite = torture_suite_create(mem_ctx, \n \t\t\t\t\t\t\t\t\t\t\t\t\t   \"REGISTRY\");\n-\tint i;\n-\n \ttorture_suite_add_simple_test(suite, \"str_regtype\", test_str_regtype);\n \ttorture_suite_add_simple_test(suite, \"reg_val_data_string dword\", test_reg_val_data_string_dword);\n \ttorture_suite_add_simple_test(suite, \"reg_val_data_string sz\", test_reg_val_data_string_sz);\n@@ -154,10 +108,7 @@\n \ttorture_suite_add_simple_test(suite, \"reg_val_description\", test_reg_val_description);\n \ttorture_suite_add_simple_test(suite, \"reg_val_description null\", test_reg_val_description_nullname);\n \n-\tfor (i = 0; backends[i].name; i++) {\n-\t\ttorture_suite_add_simple_tcase(suite, backends[i].name, test_hive, \n-\t\t\t\t\t\t\t\t\t   &backends[i]);\n-\t}\n+\ttorture_suite_add_suite(suite, torture_registry_hive(mem_ctx));\n \n \treturn suite;\n }\n\n=== modified file 'source/lib/registry/tools/regdiff.c'\n--- a/source/lib/registry/tools/regdiff.c\t2007-06-02 14:03:25 +0000\n+++ b/source/lib/registry/tools/regdiff.c\t2007-06-12 16:54:40 +0000\n@@ -2,7 +2,7 @@\n    Unix SMB/CIFS implementation.\n    simple registry frontend\n    \n-   Copyright (C) Jelmer Vernooij 2004-2006\n+   Copyright (C) Jelmer Vernooij 2004-2007\n    Copyright (C) Wilco Baan Hofman 2006\n \n    This program is free software; you can redistribute it and/or modify\n\n=== modified file 'source/lib/registry/tools/regpatch.c'\n--- a/source/lib/registry/tools/regpatch.c\t2007-06-08 21:56:52 +0000\n+++ b/source/lib/registry/tools/regpatch.c\t2007-06-12 16:54:40 +0000\n@@ -2,7 +2,7 @@\n    Unix SMB/CIFS implementation.\n    simple registry frontend\n    \n-   Copyright (C) 2004-2005 Jelmer Vernooij, jelmer@samba.org\n+   Copyright (C) 2004-2007 Jelmer Vernooij, jelmer@samba.org\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n\n=== modified file 'source/lib/registry/tools/regshell.c'\n--- a/source/lib/registry/tools/regshell.c\t2007-06-10 23:47:55 +0000\n+++ b/source/lib/registry/tools/regshell.c\t2007-06-12 16:54:40 +0000\n@@ -2,7 +2,7 @@\n    Unix SMB/CIFS implementation.\n    simple registry frontend\n    \n-   Copyright (C) Jelmer Vernooij 2004\n+   Copyright (C) Jelmer Vernooij 2004-2007\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n\n=== modified file 'source/lib/registry/tools/regtree.c'\n--- a/source/lib/registry/tools/regtree.c\t2007-06-10 22:26:52 +0000\n+++ b/source/lib/registry/tools/regtree.c\t2007-06-12 16:54:40 +0000\n@@ -2,7 +2,7 @@\n    Unix SMB/CIFS implementation.\n    simple registry frontend\n    \n-   Copyright (C) Jelmer Vernooij 2004\n+   Copyright (C) Jelmer Vernooij 2004-2007\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n\n=== modified file 'source/lib/registry/util.c'\n--- a/source/lib/registry/util.c\t2007-06-08 21:56:52 +0000\n+++ b/source/lib/registry/util.c\t2007-06-12 16:54:40 +0000\n@@ -1,7 +1,7 @@\n /* \n    Unix SMB/CIFS implementation.\n    Transparent registry backend handling\n-   Copyright (C) Jelmer Vernooij\t\t\t2003-2004.\n+   Copyright (C) Jelmer Vernooij\t\t\t2003-2007.\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n\n=== modified file 'source/lib/registry/wine.c'\n--- a/source/lib/registry/wine.c\t2007-02-08 17:18:35 +0000\n+++ b/source/lib/registry/wine.c\t2007-06-12 16:54:40 +0000\n@@ -1,7 +1,7 @@\n /* \n    Unix SMB/CIFS implementation.\n    Registry interface\n-   Copyright (C) Jelmer Vernooij\t\t\t\t\t  2004.\n+   Copyright (C) Jelmer Vernooij\t\t\t\t\t  2007.\n    \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n\n=== modified file 'source/torture/local/config.mk'\n--- a/source/torture/local/config.mk\t2007-04-23 14:16:35 +0000\n+++ b/source/torture/local/config.mk\t2007-06-12 16:54:40 +0000\n@@ -23,6 +23,7 @@\n \t\t../../lib/socket_wrapper/testsuite.o \\\n \t\tirpc.o \\\n \t\t../../lib/registry/tests/generic.o \\\n+\t\t../../lib/registry/tests/hive.o \\\n \t\tresolve.o \\\n \t\t../../lib/util/tests/strlist.o \\\n \t\t../../lib/util/tests/file.o \\\n\n=== modified file 'source/torture/ui.c'\n--- a/source/torture/ui.c\t2007-03-05 21:28:55 +0000\n+++ b/source/torture/ui.c\t2007-06-12 16:54:40 +0000\n@@ -434,3 +434,37 @@\n \n \treturn NULL;\n }\n+\n+static bool wrap_test_with_simple_test(struct torture_context *torture_ctx,\n+\t\t\t\t\t\t\t\t\tstruct torture_tcase *tcase,\n+\t\t\t\t\t\t\t\t\tstruct torture_test *test)\n+{\n+\tbool (*fn) (struct torture_context *, const void *tcase_data);\n+\n+\tfn = test->fn;\n+\n+\treturn fn(torture_ctx, tcase->data);\n+}\n+\n+struct torture_test *torture_tcase_add_simple_test(\n+\t\tstruct torture_tcase *tcase,\n+\t\tconst char *name,\n+\t\tbool (*run) (struct torture_context *test, const void *tcase_data))\n+{\n+\tstruct torture_test *test; \n+\t\n+\ttest = talloc(tcase, struct torture_test);\n+\n+\ttest->name = talloc_strdup(test, name);\n+\ttest->description = NULL;\n+\ttest->run = wrap_test_with_simple_test;\n+\ttest->fn = run;\n+\ttest->data = NULL;\n+\ttest->dangerous = False;\n+\n+\tDLIST_ADD_END(tcase->tests, test, struct torture_test *);\n+\n+\treturn test;\n+}\n+\n+\n\n=== modified file 'source/torture/ui.h'\n--- a/source/torture/ui.h\t2007-05-17 08:47:04 +0000\n+++ b/source/torture/ui.h\t2007-06-12 16:54:40 +0000\n@@ -166,6 +166,13 @@\n \t\tbool (*run) (struct torture_context *test, const void *test_data),\n \t\tconst void *data);\n \n+/* Convenience function that adds a test which only \n+ * gets the test case data */\n+struct torture_test *torture_tcase_add_simple_test(\n+\t\tstruct torture_tcase *tcase,\n+\t\tconst char *name,\n+\t\tbool (*run) (struct torture_context *test, const void *tcase_data));\n+\n /* Convenience wrapper that adds a test that doesn't need any \n  * testcase data */\n struct torture_tcase *torture_suite_add_simple_test(\n\n"}