{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "Mathew Snyder <theillien@yahoo.com>", "subject": "Effective date grab", "body": "A while ago I had posted requesting help with a long block of code that would do\nall kinds of stuff dealing with the date.  It turned out to not work despite\nbeing technically, correct.  Instead of getting help with it, Mr. Phoenix\nprovided me with a block of code that did what I needed but much more concisely.\n And, more importantly, correctly.\n\nfor (1 .. 7) {\n  $time -= 24*60*60;\n  my @date = (localtime($time))[3 .. 5];\n  push @days, (sprintf '%02d', $date[0]);\n  push @months,(sprintf '%02d',$date[1] + 1);\n  push @years, $date[2] + 1900;\n  push @searchDate, join \"-\", ($date[2] + 1900), (sprintf '%02d',$date[1] + 1),\n(sprintf '%02d', $date[0]);\n}\n\nThis will give me a weeks worth of dates regardless of whether or not the month\nflips over in the middle of the week.\n\nWhat I'd like to do now is modify this or figure out a similar block of code\nthat will do the same only for an entire month.  The thing I see being a problem\nthough is that some months have 30 days, some months have 31 days and February\nhas 28/29 days.  This makes it pretty much impossible to just do a for loop\nutilizing (1..whatever).  How can I populate an array of an entire month's worth\nof dates without worrying about how many days the month has?\n\nMathew\n-- \nKeep up with me and what I'm up to: http://theillien.blogspot.com\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}