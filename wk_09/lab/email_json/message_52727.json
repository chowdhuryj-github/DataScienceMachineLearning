{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "Mathew Snyder <theillien@yahoo.com>", "subject": "Proper class setup?", "body": "I'm presently learning OOP as Perl does it using online resources and and\nProgramming Perl as my tutors.  I'm not certain I have it right though.  Is this\ncorrect for the package:\npackage Report;\n\nrequire Exporter;\nuse strict;\n\nour @ISA       = qw(Exporter);\nour @EXPORT    = qw(new);\n\n\nsub new {\n        my ($class) = @_;\n        my $self    = {\n                _id               => undef,\n                _queue    => undef,\n                _owner    => undef,\n                _priority => undef,\n                _worked   => undef,\n                _timeLeft => undef,\n                _due      => undef,\n                _created  => undef,\n                _updated  => undef,\n                _severity => undef,\n                _ccl      => undef\n        };\n        bless $self, $class;\n        return $self;\n}\n\n# Accessor method for Reports _id\nsub id {\n        my ($self, $id) = @_;\n        $self->{_id} = $id if defined($id);\n        return $self->{_id};\n}\n\n# Accessor method for Reports _queue\nsub queue {\n        my ($self, $queue) = @_;\n        $self->{_queue} = $queue if defined($queue);\n        return $self->{_queue};\n}\n\n# Accessor method for Reports _owner\nsub owner {\n        my ($self, $owner) = @_;\n        $self->{_owner} = $owner if defined($owner);\n        return $self->{_owner};\n}\n\n# Accessor method for Reports _owner\nsub priority {\n        my ($self, $priority) = @_;\n        $self->{_priority} = $priority if defined($priority);\n        return $self->{_priority};\n}\n\n# Accessor method for Reports _owner\nsub worked {\n        my ($self, $worked) = @_;\n        $self->{_worked} = $worked if defined($worked);\n        return $self->{_worked};\n}\n\n# Accessor method for Reports _owner\nsub timeLeft {\n        my ($self, $timeLeft) = @_;\n        $self->{_timeLeft} = $timeLeft if defined($timeLeft);\n        return $self->{_timeLeft};\n}\n\n# Accessor method for Reports _owner\nsub due {\n        my ($self, $due) = @_;\n        $self->{_due} = $due if defined($due);\n        return $self->{_due};\n}\n\n# Accessor method for Reports _owner\nsub created {\n        my ($self, $created) = @_;\n        $self->{_created} = $created if defined($created);\n        return $self->{_created};\n}\n\n# Accessor method for Reports _owner\nsub updated {\n        my ($self, $updated) = @_;\n        $self->{_updated} = $updated if defined($updated);\n        return $self->{_updated};\n}\n\n# Accessor method for Reports _owner\nsub severity {\n        my ($self, $severity) = @_;\n        $self->{_severity} = $severity if defined($severity);\n        return $self->{_severity};\n}\n\n# Accessor method for Reports _owner\nsub ccl {\n        my ($self, $ccl) = @_;\n        $self->{_ccl} = $ccl if defined($ccl);\n        return $self->{_ccl};\n}\n\nsub print {\n        my ($self) = @_;\n\n        # Print Report info\n        print $self->id . \" \" . $self->queue . \"\\n\";\n}\n\n1;\n\nMathew\n-- \nKeep up with me and what I'm up to: http://theillien.blogspot.com\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}