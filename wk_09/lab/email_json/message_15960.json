{"category": "ham", "to_address": "samba-technical@lists.samba.org", "from_address": "Johannes Bauer <dfnsonfsduifb@gmx.de>", "subject": "libsmbclient: smbc_stat buffer overflow", "body": "Hello list,\n\nI've recently encountered a problem with libsmbclient which causes the\nsmb_stat function to write over the \"struct stat\" buffer exactly 8 bytes\non x86_32 (i686) systems. x86_64 seems not to be affected.\n\nAffected versions:\n  3.0.22 (Ubuntu)\n  3.0.24 (Gentoo)\n  3.0.24 (Gentoo, different system)\n\nThis program demonstrates the problem (replace //joeserver/transfer by a\nvalid samba share, of course):\n\n#include \n#include \n#include \n#include \n#include \n#include \n#include \n\nstruct smbstat {\n\tstruct stat stat;\n\tunsigned char pad[16];\n};\n\nstatic void Authentication_Function(const char *pServer, const char\n*pShare, char *pWorkgroup, int workgroup_len, char *pUsername, int\nusername_len, char *pPassword, int password_len) {\n    strncpy(pUsername, \"guest\", username_len);\n    strncpy(pPassword, \"\", password_len);\n}\n\nint main(int argc, char **argv) {\n\tint dir;\n\tstruct smbc_dirent *Directory_Entry;\n\tchar Buffer[256];\n\n\tif (smbc_init(Authentication_Function, 0) != 0) {\n\t\tfprintf(stderr, \"smblister: Could not initialize smbc-library.\\n\");\n\t\texit(6);\n\t}\n\n\tdir = smbc_opendir(\"smb://joeserver/transfer\");\n\t\n\twhile ((Directory_Entry = smbc_readdir(dir)) != NULL) {\n\t\tif (Directory_Entry->smbc_type == SMBC_FILE) {\n\t\t\tint i;\n\t\t\toff_t Filesize;\n\t\t\tstruct smbstat Filestats;\n\t\t\tmemset(&Filestats, 0x63, sizeof(struct smbstat));\n\t\t\tsnprintf(Buffer, sizeof(Buffer), \"smb://joeserver/transfer/%s\",\nDirectory_Entry->name);\n\t\t\tif (!smbc_stat(Buffer, (struct stat*)&Filestats)) {\n\t\t\t\tFilesize = Filestats.stat.st_size;\n\t\t\t} else {\n\t\t\t\tFilesize = 0;\n\t\t\t}\n\t\t\tprintf(\"%s %ld\\n\", Directory_Entry->name, Filesize);\n\t\t\tfor (i = 0; i < 16; i++) printf(\"%02x \", Filestats.pad[i]);\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\t\n\tsmbc_closedir(dir);\n\treturn 0;\n}\n\nAnd the output on an i686 machine:\n\nout.bmp 3932214\n16 2f 00 00 00 00 00 00 63 63 63 63 63 63 63 63\nx.pdf 296844\n14 09 00 00 00 00 00 00 63 63 63 63 63 63 63 63\n\nClearly it can be seen that the first eight bytes of \"pad\" become\noverwritten.\n\nI've traced this error down to this point - it has, of course,\ncatastrophal consequences: programs using the smb_stat sometimes showed\nchrashing (segfaults) und undefined behaviour (defect samba contexts).\nExploitation of this bug seems unlinkely, however.\n\nPlease tell me what you think.\nThank you,\nGreetings,\nJohannes\n\n\n"}