{"category": "ham", "to_address": "Alberto Vieira Ferreira Monteiro <albmont@centroin.com.br>", "from_address": "Duncan Murdoch <murdoch@stats.uwo.ca>", "subject": "Re: [R] Help with map", "body": "On 04/05/2007 9:00 PM, Alberto Vieira Ferreira Monteiro wrote:\n> [for those that worry about these things, this _is_ a homework\n> assignment. However, it's not an R homework, it's a Geography\n> and History homework... and I want to use R to create a pretty\n> map]\n> \n> Roger Bivand wrote:\n>>> Is there any way to associate one color to each country?\n>> Try:\n>>\n>> map_poly_obj <- map(\"worldHires\", c(\"Argentina\", \"Brazil\"), plot=FALSE,\n>>   fill=TRUE)\n>> str(map_poly_obj)\n>>\n>> and you'll see that the component of interest is the named polygons, of\n>> which there are 28, namely\n>>\n> Ok, I guess I can see what you mean. It worked, but I don't think\n> this is a practical way to draw things.\n> \n> For example, suppose [this would help homework mentioned above] I\n> want to draw a series of maps showing the evolution of Communism\n> in the XX century. I would like to start with a 1917 map, showing most\n> countries as in...\n> \n> map(\"worldHires\")\n> \n> ... but with the Soviet Union in red. I don't see how I could mix the two \n> maps (BTW, there's no Russia in worldHires, but there is a USSR...)\n> \n> map(\"worldHires\"); map(\"worldHires\", \"USSR\", col=\"red\", fill=T)\n> \n>> map_poly_obj$names\n>>\n>> So you can build a matching colours vector, or:\n>>\n>> library(sp)\n>> library(maptools)\n>> IDs <- sapply(strsplit(map_poly_obj$names, \":\"), function(x) x[1])\n>> SP_AB <- map2SpatialPolygons(map_poly_obj, IDs=IDs,\n>>   proj4string=CRS(\"+proj=longlat +datum=wgs84\"))\n>>\n>> but\n>>\n>> plot(SP_AB, col=c(\"cyan\", \"green\"))\n>>\n>> still misses, because some polygons have their rings of coordinates in\n>> counter-clockwise order, so:\n>>\n>> pl_new <- lapply(slot(SP_AB, \"polygons\"), checkPolygonsHoles)\n>> slot(SP_AB, \"polygons\") <- pl_new\n>> # please forget the assignment to the slot and do not do it unless you can\n>> # replace what was there before\n>>\n>> plot(SP_AB, col=c(\"cyan\", \"green\"), axes=TRUE)\n>>\n>> now works. Moreover, SP_AB is a SpatialPolygons object, which can be\n>> promoted to a SpatialPolygonsDataFrame object, for a data slot holding a\n>> data.frame with row names matching the Polygons ID values:\n>>\n>> sapply(slot(SP_AB, \"polygons\"), function(x) slot(x, \"ID\"))\n>>\n>> So adding a suitable data frame gets you to the lattice graphics method\n>>\n>> spplot(SP_AB, \"my_var\")\n>>\n>> Hope this helps,\n>>\n> So, in the above mentioned case, I could do something like:\n> \n> library(mapdata)\n> commies <- c(\"USSR\", \"Mongolia\") \n> # Mongolia was the 2nd communist country, in 1925\n> map_poly_obj <- map(\"worldHires\", plot=FALSE)\n> map_poly_commies <- map(\"worldHires\", commies,\n>   plot=FALSE, fill=TRUE)\n> plot(map_poly_obj, type=\"l\")\n> polygon(map_poly_commies, col=\"red\", border=\"black\")\n> \n> I guess I can keep going, unless there is a simpler solution.\n\nHere's the sloppy code I used to put together the map in the persp3d \nexample in rgl 0.71.  I've just made a few edits; I hope it still runs.\nThe idea is to do a lot of calculations on a vector of colours, then\nplot them all at once.\n\n> library(mapdata)\n> \n> names <- map(\"worldHires\", plot=FALSE, namesonly=TRUE)\n\n> countries <- gsub(\":.*\", \"\", names)  # the first part of the name\n> lakes <- grep(\"Lake\", names)\n> lakes <- lakes[-15]\n> lakes <- unique(c(lakes, grep(\"Ozero\", names), \n>                          grep(\"Vodokh\", names),\n> \t\t\t   grep(\"Nuur\", names),\n> \t\t\t   grep(\"Ostrov Ol'khon\", names),\n> \t\t\t   grep(\"Hayk\", names),\n> \t\t\t   grep(\"Lago\", names)))  # The map doesn't distinguish these\n> \n> seas <- grep(\"Sea\", names) \n> nfld <- grep(\"^Newfoundland$\", names) # nfld should be coloured as Canada\n> canada <- grep(\"^Canada$\", names)\n\n> svalbard <- grep(\"Svalbard\", names)   # Svalbard coloured as Norway\n> norway <- grep(\"^Norway$\", names)\n> \n> nums <- as.numeric(factor(countries))\n> N <- max(nums)\n> set.seed(3)\n> col <-  hcl(h=sample((1:N)*360/N),\n>             c=sample(seq(35,45,len=N)),\n>             l=sample(seq(75,85,len=N)))[nums]  # random colours by country\n> col[c(lakes,seas)] <- \"white\" # with lakes and seas white\n> col[nfld] <- col[canada]\n> col[svalbard] <- col[norway]\n> \n>  png(width=2200, height=2200, file='world.png')\n>  map('worldHires', fill = TRUE, col = col, ylim=c(-90,90))\n>  abline(h=c(-90, 90))\n>  abline(v=c(-180.05, 180.05))\n>  dev.off()\n\nI hope this gives you some ideas.\n\nDuncan Murdoch\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}