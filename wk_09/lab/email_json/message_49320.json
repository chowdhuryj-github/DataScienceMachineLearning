{"category": "ham", "to_address": "\"Speakup is a screen review system for Linux.\" <speakup@braille.uwo.ca>", "from_address": "\"Spie Sutherland\" <spie@proficio.ca>", "subject": "Re: moving from amd to p3?", "body": "The kernel is easy to compile, although it seems daunting when\nyou first do it. Configuring the kernel, selecting which drivers to\ninclude and such is actually more tedious than the compilation.\n\nIf you google for \"linux kernel compilation\" you'll find lots of \nFAQs and articles. There are minor differences in compiling \n2.4 and 2.6 kernels, and depending on the linux distro the \nfinal steps of updating the bootloader may be different, but in\na nutshell it goes something like:\n\ndownload kernel source tarball usually from kernel.org\nftp ftp.kernel.org then go to pub/linux/kernel and pick the \nversion you want, put it in /usr/src/linux and extract it there.\n\nThere will be a symbolic link of /usr/src/linux to the kernel \nversion you have, need to update that if changing to new \nkernel, so for example\n\nrm /usr/src/linux\nln -s /usr/src/linux-2.6.21.5 /usr/src/linux\n\nThis make /usr/src/linux a link to the specific kernel. You \nwould normally leave your older version kernel there in case\nthe new one doesn't work.\n\nBefore you begin, do this to save your old .config \nand make sure you have a clean source tree\n\ncd /usr/src/linux\ncp .config .config.SAVE\nmake mrproper\n\nIf you were installing speakup, at this point you would do \nthe speakup patching of the kernel source.\n\nThen you configure the kernel, most people do\nmake menuconfig \nwhich is ncurses menu based, but you can also do\nmake config\nwhich is interactive text\n\nIf you want to configure using your old configuration\nas a start and just change a few things, you can do\nmake oldconfig\n\nThis creates the .config file which the kernal makefile\nuses to determine which drivers to include when building\nthe kernel, which are statically built into the kernel, which\nare buit as loadable modules, and possibly setting some \nkernel parameters for some drivers.\n\nOnce the kernel is configured, you simply build it:\n\nmake dep\nmake clean\nmake bzImage\nmake modules\n\nThat all takes quite a while, once complete you copy the \ncompiled kernel to the boot location\n\ncp /usr/src/linux/arch/i386/boot/bzImage /boot\n\nThen install the modules\nmake modules_install\n\nFinally update the bootloader to use the new kernel. \nThis depends on the distro since some use lilo and \nothers use grub etc. For example, on slackware, it\nuses lilo, so I would edit lilo.conf and add a new \nentry for the new kernel then run lilo -v to update \nthe bootloader. You always want to leave your old\nkernel there, both the kernel itself and the entry in \nthe bootloader, in case the new kernel won't boot, \nyou need to be able to boot the new.\n\nThat's it in a nutshell. There are lots of docs on the \nweb for more detailed info.\n\nScott said:\nWhat if you don't know how to compile a kernel\n\n_______________________________________________\nSpeakup mailing list\nSpeakup@braille.uwo.ca\nhttp://speech.braille.uwo.ca/mailman/listinfo/speakup\n\n"}