{"category": "ham", "to_address": "Michael Stone <michael@laptop.org>", "from_address": "Bert Freudenberg <bert@freudenbergs.de>", "subject": "Re: [sugar] Activity Launching Change Proposal", "body": "On Jun 22, 2007, at 18:43 , Michael Stone wrote:\n\n>   The low-level problem is that, after a Rainbow-child-process  \n> enters a\n>   container to start the desired activity, the Rainbow-child- \n> process must\n>   actually start the activity's 'ActivityFactory', then send it a  \n> 'create'\n>   message *over the session bus*\n>\n> Solution:\n>\n>   The procedure described in the preceding paragraph for actually  \n> starting\n>   activities inside an active container is overly-complicated at  \n> best and is\n>   highly error-prone at worst. A much simpler, more robust  \n> procedure would be\n>   leave out the DBus call to the factory's 'create' method and  \n> would merely\n>   rely on the execution of the factory process itself to perform  \n> whatever\n>   activity is appropriate to make a new activity instance inside  \n> the container.\n>\n> Feedback on this proposal in general and on the appropriate  \n> information to pass\n> to the proposed factory executable would be most appreciated.\n\nHow would you launch the second instance if the factory does not  \nprovide a dbus service? That's why it's called a factory, after all.\n\nAlso, please keep in mind that whatever protocol changes you  \nintroduce cannot be fixed up solely by adapting the default activity  \ncode in Sugar. There are native activities implementing the raw DBus  \nprotocol, too. One example is Etoys (not sure if there are more at  \nthis time). So please notify activity developers in advance to give  \nus a little bit of time to adapt to protocol changes.\n\n- Bert -\n\n\n_______________________________________________\nSugar mailing list\nSugar@lists.laptop.org\nhttp://lists.laptop.org/listinfo/sugar\n\n"}