{"category": "ham", "to_address": "Patrick Rutkowski <rutski89@gmail.com>", "from_address": "Leopold Toetsch <lt@toetsch.at>", "subject": "Re: I Don't Understand The Context Allocation/Destruction Code", "body": "Am Sonntag, 22. April 2007 22:47 schrieb Patrick Rutkowski:\n> Yes, I see that now, but that doesn't answer the questions.\n>\n> Why did you choose reg_alloc/8 as an index into free_list?\n\nA granualrity of 8 is of course arbitratly, could be some bigger power of 2 \ntoo.\n\n> Why does the code need to increase the size of free_list so\n> dramatically in the branching into the first if()?\n\nErr. If memory for slots up to 8 is allocated and there's a need for 80, then \nthe pointer list is (as you have observed) extended by 72 more slote. Next \nallocation size might be for slot 30 or 50 or some such. As the allocation is \nfor register space, there's for sure a good chance that the needed allocation \nsize has a freelist after some program runtime.\n\nleo\n\n"}