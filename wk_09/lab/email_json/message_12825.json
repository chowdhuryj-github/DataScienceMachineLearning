{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Patrick Rutkowski <rutski89@gmail.com>", "subject": "Re: I Don't Understand The Context Allocation/Destruction Code", "body": "Well this is embarrassing.\n\nI tested it yes, but when I tested it I had:\n\nreg_alloc = ((reg_alloc + 7) >> 3) << 3\nconst int slot = reg_alloc / 8;\n\nThen I remembered that some less friendly compilers\nwon't like the the declaration being after a statement.\nSo I pulled it out and changed it to:\n\nconst int slot;\nreg_alloc = ((reg_alloc + 7) >> 3) << 3\nslot = reg_alloc / 8;\n\nAnd that I did not test.\n\nJust cut off the const keyword and it'll work.\n\nApologies,\nPatrick\n\nIndex: register.c\n===================================================================\n--- register.c\t(revision 18296)\n+++ register.c\t(working copy)\n@@ -338,9 +338,16 @@\n      size_t reg_alloc = size_nip +\n          sizeof (STRING*) *  n_regs_used[REGNO_STR];\n-    const int slot = (reg_alloc + 7) >> 3;\n-    reg_alloc = slot << 3;\n+    int slot;\n+    /* round reg_alloc up to the nearest multiple of 8 */\n+    reg_alloc = ((reg_alloc + 7) >> 3) << 3;\n+\n+    /* reg_alloc now divides evenly by 8 because of the previous\n+       rounding. A granularity of 8 is arbitrary, it could have been\n+       some bigger power of 2 */\n+    slot = reg_alloc / 8;\n+\n      if (slot >= interp->ctx_mem.n_free_slots) {\n          const int n = slot + 1;\n          int i;\n\nOn Apr 22, 2007, at 5:55 PM, Leopold Toetsch wrote:\n\n> Am Sonntag, 22. April 2007 23:34 schrieb Patrick Rutkowski:\n>> +    const int slot;\n>> +    /* round reg_alloc up to the nearest multiple of 8 */\n>> +    reg_alloc = ((reg_alloc + 7) >> 3) << 3;\n>> +\n>> +    /* reg_alloc now divides evenly by 8 because of the previous\n>> +       rounding. A granualrity of 8 is arbitratly, it could have  \n>> been\n>> +       some bigger power of 2 */\n>> +    slot = reg_alloc / 8;\n>\n> Did you even compile & test this patch?\n>\n>  error: assignment of read-only variable 'slot'\n>\n> leo\n\n"}