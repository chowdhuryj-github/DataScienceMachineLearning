{"category": "ham", "to_address": "simo <idra@samba.org>", "from_address": "Alan DeKok <aland@ox.org>", "subject": "Re: Short HOWTO on using git for Samba development", "body": "simo wrote:\n> The only downside of this is forgetting, missing parts.\n\n1) commit\n2) push commits to a different server.\n\n  What's to forget?\n\n  If you still want to send patches, use a \"trunk\" and a \"branch\".  Then\ncreate the patch by diff'ing the two.\n\n>> The other advantage of using something like git is that\n>> branch maintenance is reduced as individuals no longer\n>> have to checkin to multiple branches.  The SAMBA_3_0_*\n>> branches we have in svn will simply go away.  Of course,\n>> the patch release model doesn't go away, but the responsibility\n>> shifts.\n> \n> Uhmm how this is true? I mean, in some case the code need to be\n> different between 2 trees, who will adjust the patches to apply\n> cleanly ?\n\n  Someone has to pull the changes from one branch to another.  If the\nchanges don't merge cleanly, they are edited, committed, and then pushed.\n\n> Ahh so more people can commit on the same tree?\n\n  In git/mercurial, each checkout *is* a tree.  All commits are local,\nso there's no problem.  Then, commits are pushed to a central tree.\nThat tree can have multiple people pushing to it.\n\n> I didn't understand this, if that works then I guess we could end up\n> with the best mix between centralized and distributed development,\n> sounds interesting.\n\n  I've used mercurial in a number of projects.  It's much better than\nanything else I've used, and the repositories are smaller than git,\ntoo!.  It's simple, easy to use, and the tool just doesn't get in the way.\n\n> Ok, but to really test the D in DSCM we need to be more than one and\n> test how the exchange of patches between individual trees works.\n\n  \"very well\" is my experience.\n\n  If N people are working on a project, it's usually useful to set up a\ncentral repository for them, separate from the main tree.  That way they\ncan commit to their local trees, and they still have a central point of\ncoordination.  This subgroup tree can also have a copy of the main\ntrunk, so that merges from trunk to development branch happen only once.\n\n  Then, when development finishes, you can push the changes or a patch\nback to the main trunk, knowing that you're in sync, and that everything\nworks.\n\n  Alan DeKok.\n\n"}