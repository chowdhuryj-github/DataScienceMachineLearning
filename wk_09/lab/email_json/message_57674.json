{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jerry@samba.org", "subject": "svn commit: samba r23645 - in branches: SAMBA_3_0 SAMBA_3_0_25\n\tSAMBA_3_0_26", "body": "Author: jerry\nDate: 2007-06-28 19:27:30 +0000 (Thu, 28 Jun 2007)\nNew Revision: 23645\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23645\n\nLog:\nadd examples and try to answer some common questions in the coding style guide\nModified:\n   branches/SAMBA_3_0/README.Coding\n   branches/SAMBA_3_0_25/README.Coding\n   branches/SAMBA_3_0_26/README.Coding\n\n\nChangeset:\nModified: branches/SAMBA_3_0/README.Coding\n===================================================================\n--- branches/SAMBA_3_0/README.Coding\t2007-06-28 18:09:37 UTC (rev 23644)\n+++ branches/SAMBA_3_0/README.Coding\t2007-06-28 19:27:30 UTC (rev 23645)\n@@ -59,14 +59,14 @@\n --\n (Thanks to SATOH Fumiyasu  for these hints):\n \n-For the basic vi eitor including with all variants of *nix, add the \n+For the basic vi editor including with all variants of *nix, add the \n following to $HOME/.exrc:\n \n   set tabstop=8\n   set shiftwidth=8\n \n For Vim, the following settings in $HOME/.vimrc will also deal with \n-disaplaying trailing whitespace:\n+displaying trailing whitespace:\n \n   if has(\"syntax\") && (&t_Co > 2 || has(\"gui_running\"))\n \tsyntax on\n@@ -78,10 +78,138 @@\n   endif\n \n \n-===================\n-Statement Reference\n-===================\n+=========================\n+FAQ & Statement Reference\n+=========================\n \n-To be filled later in as needed.\n+Comments\n+--------\n \n+Comments should always use the standard C syntax.  I.e. /* ... */.  C++ \n+style comments are not currently allowed.\n \n+\n+Indention & Whitespace & 80 columns\n+-----------------------------------\n+\n+To avoid confusion, indentations are to be 8 character with tab (not \n+8 ' ' characters.  When wrapping parameters for function calls, \n+alignment parameter list with the first parameter on the previous line.\n+Use tabs to get as close as possible and then fill in the final 7 \n+characters or less with whitespace.  For example,\n+\n+\tvar1 = foo(arg1, arg2,\n+\t\t   arg3);\n+\n+The previous example is intended to illustrate alignment of function \n+parameters across lines and not as encourage for gratuitous line \n+splitting.  Never split a line before columns 70 - 79 unless you\n+have a really good reason.  Be smart about formatting.\n+\n+\n+If, switch, & Code blocks\n+-------------------------\n+\n+Always follow an 'if' keyword with a space but don't include additional\n+spaces following or preceding the parentheses in the conditional.\n+This is good:\n+\n+\tif (x == 1)\n+\n+This is bad:\n+\n+\tif ( x == 1 )\n+\n+Yes we have a lot of code that uses the second form and we are trying \n+to clean it up without being overly intrusive.\n+\n+Note that this is a rule about parentheses following keywords and not\n+functions.  Don't insert a space between the name and left parentheses when \n+invoking functions.\n+\n+Braces for code blocks used by for, if, switch, while, do..while, etc...\n+should begin on the same line as the statement keyword and end on a line \n+of their own.  NOTE: Functions are different and the beginning left brace\n+should begin on a line of its own.\n+\n+If the beginning statement has to be broken across lines due to length,\n+the beginning brace should be on a line of its own.\n+\n+The exception to the ending rule is when the closing brace is followed by \n+another language keyword such as else or the closing while in a do..while \n+loop.\n+\n+Good examples:\n+\n+\tif (x == 1) {\n+\t\tprintf(\"good\\n\");\n+\t}\n+\n+\tfor (x=1;\n+\t     x<10;\n+\t     x++)\n+\t{\n+\t\tprint(\"%d\\n\", x);\n+\t}\n+\n+\tdo {\n+\t\tprintf(\"also good\\n\");\n+\t} while (1);\n+\n+Bad examples:\n+\n+\twhile (1)\n+\t{\n+\t\tprint(\"I'm in a loop!\\n\"); }\n+\t\n+\n+Goto\n+----\n+\n+While many people have been academically taught that goto's are fundamentally\n+evil, then can greatly enhance readability and reduce memory leaks when used\n+as the single exit point from a function.  But in no Samba world what so ever \n+is a goto outside of a function or block of code a good idea.\n+\n+Good Examples:\n+\n+int function foo(int y)\n+{\n+\tint *z = NULL;\n+\tint ret = 0;\n+\n+\tif ( y < 10 ) {\n+\t\tz = malloc(sizeof(int)*y);\n+\t\tif (!z) {\n+\t\t\tret = 1;\n+\t\t\tgoto done;\n+\t\t}\n+\t}\n+\n+\tprint(\"Allocated %d elements.\\n\", y);\n+\n+ done: \n+\tif (z)\n+\t\tfree(z);\n+\n+\treturn ret;\n+}\n+\n+\n+Checking Pointer Values\n+-----------------------\n+\n+When invoking functions that return pointer values, either of the following \n+are acceptable.  Use you best judgement and choose the more readable option.\n+Remember that many other people will review it.\n+\n+\tif ((x = malloc(sizeof(short)*10)) == NULL ) {\n+\t\tfprintf(stderr, \"Unable to alloc memory!\\n\");\n+\t}\n+\n+or\n+\n+\tx = malloc(sizeof(short)*10);\n+\tif (!x) {\n+\t\tfprintf(stderr, \"Unable to alloc memory!\\n\");\n+\t}\n\nModified: branches/SAMBA_3_0_25/README.Coding\n===================================================================\n--- branches/SAMBA_3_0_25/README.Coding\t2007-06-28 18:09:37 UTC (rev 23644)\n+++ branches/SAMBA_3_0_25/README.Coding\t2007-06-28 19:27:30 UTC (rev 23645)\n@@ -59,14 +59,14 @@\n --\n (Thanks to SATOH Fumiyasu  for these hints):\n \n-For the basic vi eitor including with all variants of *nix, add the \n+For the basic vi editor including with all variants of *nix, add the \n following to $HOME/.exrc:\n \n   set tabstop=8\n   set shiftwidth=8\n \n For Vim, the following settings in $HOME/.vimrc will also deal with \n-disaplaying trailing whitespace:\n+displaying trailing whitespace:\n \n   if has(\"syntax\") && (&t_Co > 2 || has(\"gui_running\"))\n \tsyntax on\n@@ -78,10 +78,138 @@\n   endif\n \n \n-===================\n-Statement Reference\n-===================\n+=========================\n+FAQ & Statement Reference\n+=========================\n \n-To be filled later in as needed.\n+Comments\n+--------\n \n+Comments should always use the standard C syntax.  I.e. /* ... */.  C++ \n+style comments are not currently allowed.\n \n+\n+Indention & Whitespace & 80 columns\n+-----------------------------------\n+\n+To avoid confusion, indentations are to be 8 character with tab (not \n+8 ' ' characters.  When wrapping parameters for function calls, \n+alignment parameter list with the first parameter on the previous line.\n+Use tabs to get as close as possible and then fill in the final 7 \n+characters or less with whitespace.  For example,\n+\n+\tvar1 = foo(arg1, arg2,\n+\t\t   arg3);\n+\n+The previous example is intended to illustrate alignment of function \n+parameters across lines and not as encourage for gratuitous line \n+splitting.  Never split a line before columns 70 - 79 unless you\n+have a really good reason.  Be smart about formatting.\n+\n+\n+If, switch, & Code blocks\n+-------------------------\n+\n+Always follow an 'if' keyword with a space but don't include additional\n+spaces following or preceding the parentheses in the conditional.\n+This is good:\n+\n+\tif (x == 1)\n+\n+This is bad:\n+\n+\tif ( x == 1 )\n+\n+Yes we have a lot of code that uses the second form and we are trying \n+to clean it up without being overly intrusive.\n+\n+Note that this is a rule about parentheses following keywords and not\n+functions.  Don't insert a space between the name and left parentheses when \n+invoking functions.\n+\n+Braces for code blocks used by for, if, switch, while, do..while, etc...\n+should begin on the same line as the statement keyword and end on a line \n+of their own.  NOTE: Functions are different and the beginning left brace\n+should begin on a line of its own.\n+\n+If the beginning statement has to be broken across lines due to length,\n+the beginning brace should be on a line of its own.\n+\n+The exception to the ending rule is when the closing brace is followed by \n+another language keyword such as else or the closing while in a do..while \n+loop.\n+\n+Good examples:\n+\n+\tif (x == 1) {\n+\t\tprintf(\"good\\n\");\n+\t}\n+\n+\tfor (x=1;\n+\t     x<10;\n+\t     x++)\n+\t{\n+\t\tprint(\"%d\\n\", x);\n+\t}\n+\n+\tdo {\n+\t\tprintf(\"also good\\n\");\n+\t} while (1);\n+\n+Bad examples:\n+\n+\twhile (1)\n+\t{\n+\t\tprint(\"I'm in a loop!\\n\"); }\n+\t\n+\n+Goto\n+----\n+\n+While many people have been academically taught that goto's are fundamentally\n+evil, then can greatly enhance readability and reduce memory leaks when used\n+as the single exit point from a function.  But in no Samba world what so ever \n+is a goto outside of a function or block of code a good idea.\n+\n+Good Examples:\n+\n+int function foo(int y)\n+{\n+\tint *z = NULL;\n+\tint ret = 0;\n+\n+\tif ( y < 10 ) {\n+\t\tz = malloc(sizeof(int)*y);\n+\t\tif (!z) {\n+\t\t\tret = 1;\n+\t\t\tgoto done;\n+\t\t}\n+\t}\n+\n+\tprint(\"Allocated %d elements.\\n\", y);\n+\n+ done: \n+\tif (z)\n+\t\tfree(z);\n+\n+\treturn ret;\n+}\n+\n+\n+Checking Pointer Values\n+-----------------------\n+\n+When invoking functions that return pointer values, either of the following \n+are acceptable.  Use you best judgement and choose the more readable option.\n+Remember that many other people will review it.\n+\n+\tif ((x = malloc(sizeof(short)*10)) == NULL ) {\n+\t\tfprintf(stderr, \"Unable to alloc memory!\\n\");\n+\t}\n+\n+or\n+\n+\tx = malloc(sizeof(short)*10);\n+\tif (!x) {\n+\t\tfprintf(stderr, \"Unable to alloc memory!\\n\");\n+\t}\n\nModified: branches/SAMBA_3_0_26/README.Coding\n===================================================================\n--- branches/SAMBA_3_0_26/README.Coding\t2007-06-28 18:09:37 UTC (rev 23644)\n+++ branches/SAMBA_3_0_26/README.Coding\t2007-06-28 19:27:30 UTC (rev 23645)\n@@ -59,14 +59,14 @@\n --\n (Thanks to SATOH Fumiyasu  for these hints):\n \n-For the basic vi eitor including with all variants of *nix, add the \n+For the basic vi editor including with all variants of *nix, add the \n following to $HOME/.exrc:\n \n   set tabstop=8\n   set shiftwidth=8\n \n For Vim, the following settings in $HOME/.vimrc will also deal with \n-disaplaying trailing whitespace:\n+displaying trailing whitespace:\n \n   if has(\"syntax\") && (&t_Co > 2 || has(\"gui_running\"))\n \tsyntax on\n@@ -78,10 +78,138 @@\n   endif\n \n \n-===================\n-Statement Reference\n-===================\n+=========================\n+FAQ & Statement Reference\n+=========================\n \n-To be filled later in as needed.\n+Comments\n+--------\n \n+Comments should always use the standard C syntax.  I.e. /* ... */.  C++ \n+style comments are not currently allowed.\n \n+\n+Indention & Whitespace & 80 columns\n+-----------------------------------\n+\n+To avoid confusion, indentations are to be 8 character with tab (not \n+8 ' ' characters.  When wrapping parameters for function calls, \n+alignment parameter list with the first parameter on the previous line.\n+Use tabs to get as close as possible and then fill in the final 7 \n+characters or less with whitespace.  For example,\n+\n+\tvar1 = foo(arg1, arg2,\n+\t\t   arg3);\n+\n+The previous example is intended to illustrate alignment of function \n+parameters across lines and not as encourage for gratuitous line \n+splitting.  Never split a line before columns 70 - 79 unless you\n+have a really good reason.  Be smart about formatting.\n+\n+\n+If, switch, & Code blocks\n+-------------------------\n+\n+Always follow an 'if' keyword with a space but don't include additional\n+spaces following or preceding the parentheses in the conditional.\n+This is good:\n+\n+\tif (x == 1)\n+\n+This is bad:\n+\n+\tif ( x == 1 )\n+\n+Yes we have a lot of code that uses the second form and we are trying \n+to clean it up without being overly intrusive.\n+\n+Note that this is a rule about parentheses following keywords and not\n+functions.  Don't insert a space between the name and left parentheses when \n+invoking functions.\n+\n+Braces for code blocks used by for, if, switch, while, do..while, etc...\n+should begin on the same line as the statement keyword and end on a line \n+of their own.  NOTE: Functions are different and the beginning left brace\n+should begin on a line of its own.\n+\n+If the beginning statement has to be broken across lines due to length,\n+the beginning brace should be on a line of its own.\n+\n+The exception to the ending rule is when the closing brace is followed by \n+another language keyword such as else or the closing while in a do..while \n+loop.\n+\n+Good examples:\n+\n+\tif (x == 1) {\n+\t\tprintf(\"good\\n\");\n+\t}\n+\n+\tfor (x=1;\n+\t     x<10;\n+\t     x++)\n+\t{\n+\t\tprint(\"%d\\n\", x);\n+\t}\n+\n+\tdo {\n+\t\tprintf(\"also good\\n\");\n+\t} while (1);\n+\n+Bad examples:\n+\n+\twhile (1)\n+\t{\n+\t\tprint(\"I'm in a loop!\\n\"); }\n+\t\n+\n+Goto\n+----\n+\n+While many people have been academically taught that goto's are fundamentally\n+evil, then can greatly enhance readability and reduce memory leaks when used\n+as the single exit point from a function.  But in no Samba world what so ever \n+is a goto outside of a function or block of code a good idea.\n+\n+Good Examples:\n+\n+int function foo(int y)\n+{\n+\tint *z = NULL;\n+\tint ret = 0;\n+\n+\tif ( y < 10 ) {\n+\t\tz = malloc(sizeof(int)*y);\n+\t\tif (!z) {\n+\t\t\tret = 1;\n+\t\t\tgoto done;\n+\t\t}\n+\t}\n+\n+\tprint(\"Allocated %d elements.\\n\", y);\n+\n+ done: \n+\tif (z)\n+\t\tfree(z);\n+\n+\treturn ret;\n+}\n+\n+\n+Checking Pointer Values\n+-----------------------\n+\n+When invoking functions that return pointer values, either of the following \n+are acceptable.  Use you best judgement and choose the more readable option.\n+Remember that many other people will review it.\n+\n+\tif ((x = malloc(sizeof(short)*10)) == NULL ) {\n+\t\tfprintf(stderr, \"Unable to alloc memory!\\n\");\n+\t}\n+\n+or\n+\n+\tx = malloc(sizeof(short)*10);\n+\tif (!x) {\n+\t\tfprintf(stderr, \"Unable to alloc memory!\\n\");\n+\t}\n\n"}