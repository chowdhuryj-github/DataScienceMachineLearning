{"category": "ham", "to_address": "Simon McVittie <simon.mcvittie@collabora.co.uk>", "from_address": "Dan Williams <dcbw@redhat.com>", "subject": "Re: [sugar] [PATCH] services/presence/server_plugin.py:\n\tHandle\tpresence more correctly.", "body": "On Wed, 2007-05-16 at 11:40 +0100, Simon McVittie wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n> \n> This avoids unnecessary attempts to look up the buddy properties of\n> channel-specific handles (which doesn't work) by only looking up the buddy\n> properties of people we're subscribed to.\n> Also, this approves subscription requests that come in while we're online,\n> rather than handling them when we next go from offline to online.\n\nGreat, looks good.\n\n> - ---\n>  services/presence/server_plugin.py |   53 +++++++++++++++++++++++++++++++++---\n>  1 files changed, 49 insertions(+), 4 deletions(-)\n> \n> diff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py\n> index b3b9482..ac569ba 100644\n> - --- a/services/presence/server_plugin.py\n> +++ b/services/presence/server_plugin.py\n> @@ -320,11 +320,22 @@ class ServerPlugin(gobject.GObject):\n>  \n>          # the group of contacts who may receive your presence\n>          publish = self._request_list_channel('publish')\n> - -        publish_handles, local_pending, remote_pending = publish[CHANNEL_INTERFACE_GROUP].GetAllMembers()\n> +        self._publish_channel = publish\n> +        publish[CHANNEL_INTERFACE_GROUP].connect_to_signal('MembersChanged',\n> +                self._publish_members_changed_cb)\n> +        publish_handles, local_pending, remote_pending = \\\n> +                publish[CHANNEL_INTERFACE_GROUP].GetAllMembers()\n>  \n>          # the group of contacts for whom you wish to receive presence\n>          subscribe = self._request_list_channel('subscribe')\n> - -        subscribe_handles = subscribe[CHANNEL_INTERFACE_GROUP].GetMembers()\n> +        self._subscribe_channel = subscribe\n> +        subscribe[CHANNEL_INTERFACE_GROUP].connect_to_signal('MembersChanged',\n> +                self._subscribe_members_changed_cb)\n> +        subscribe_handles, subscribe_lp, subscribe_rp = \\\n> +                subscribe[CHANNEL_INTERFACE_GROUP].GetAllMembers()\n> +        self._subscribe_members = set(subscribe_handles)\n> +        self._subscribe_local_pending = set(subscribe_lp)\n> +        self._subscribe_remote_pending = set(subscribe_rp)\n>  \n>          if local_pending:\n>              # accept pending subscriptions\n> @@ -364,8 +375,7 @@ class ServerPlugin(gobject.GObject):\n>          self._set_self_current_activity()\n>          self._set_self_avatar()\n>  \n> - -        # Request presence for everyone on the channel\n> - -        subscribe_handles = subscribe[CHANNEL_INTERFACE_GROUP].GetMembers()\n> +        # Request presence for everyone we're subscribed to\n>          self._conn[CONN_INTERFACE_PRESENCE].RequestPresence(subscribe_handles)\n>          return True\n>  \n> @@ -690,6 +700,13 @@ class ServerPlugin(gobject.GObject):\n>  \n>      def _contact_online(self, handle):\n>          \"\"\"Handle a contact coming online\"\"\"\n> +        if (handle not in self._subscribe_members and\n> +                handle not in self._subscribe_local_pending and\n> +                handle not in self._subscribe_remote_pending):\n> +            # it's probably a channel-specific handle - can't create a Buddy\n> +            # object\n> +            return\n> +\n>          self._online_contacts[handle] = None\n>          if handle == self._conn[CONN_INTERFACE].GetSelfHandle():\n>              jid = self._conn[CONN_INTERFACE].InspectHandles(CONNECTION_HANDLE_TYPE_CONTACT, [handle])[0]\n> @@ -702,6 +719,34 @@ class ServerPlugin(gobject.GObject):\n>              reply_handler=lambda *args: self._contact_online_properties_cb(handle, *args),\n>              error_handler=lambda *args: self._contact_online_properties_error_cb(handle, *args))\n>  \n> +    def _subscribe_members_changed_cb(self, added, removed, local_pending,\n> +            remote_pending, actor, reason):\n> +        for handle in added:\n> +            self._subscribe_members.add(handle)\n> +        for handle in local_pending:\n> +            self._subscribe_local_pending.add(handle)\n> +        for handle in remote_pending:\n> +            self._subscribe_remote_pending.add(handle)\n> +        for handle in removed:\n> +            self._subscribe_members.discard(handle)\n> +            self._subscribe_local_pending.discard(handle)\n> +            self._subscribe_remote_pending.discard(handle)\n> +\n> +    def _publish_members_changed_cb(self, added, removed, local_pending,\n> +            remote_pending, actor, reason):\n> +\n> +        if local_pending:\n> +            # accept all requested subscriptions\n> +            self._publish_channel[CHANNEL_INTERFACE_GROUP].AddMembers(\n> +                    local_pending, '')\n> +\n> +        # subscribe to people who've subscribed to us, if necessary\n> +        added = list(set(added) - self._subscribe_members\n> +                     - self._subscribe_remote_pending)\n> +        if added:\n> +            self._subscribe_channel[CHANNEL_INTERFACE_GROUP].AddMembers(\n> +                    added, '')\n> +\n>      def _presence_update_cb(self, presence):\n>          \"\"\"Send update for online/offline status of presence\"\"\"\n>          for handle in presence:\n> - -- \n> 1.5.2-rc2.GIT\n> \n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.6 (GNU/Linux)\n> Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net\n> \n> iD8DBQFGSt+PWSc8zVUw7HYRAmTjAJ4wT5vmv7wOLkNeXekAcee4H2eR/ACgh+I3\n> wf36dxS4smqSWF1atTqgBQA=\n> =D7w9\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> Sugar mailing list\n> Sugar@laptop.org\n> http://mailman.laptop.org/mailman/listinfo/sugar\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}