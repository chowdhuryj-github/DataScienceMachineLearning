{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "gabriele renzi <surrender_it@rc.europe.yahoo-eu1.akadns.net>", "subject": "Re: [S02] Sigils", "body": "Jonathan Lang wrote:\n>  From S02:\n> \n> -- \n> \n> Perl 6 includes a system of B to mark the fundamental\n> structural type of a variable:\n> \n>    $   scalar (object)\n>    @   ordered array\n>    %   unordered hash (associative array)\n>    &   code/rule/token/regex\n>    ::  package/module/class/role/subset/enum/type/grammar\n>    @@  multislice view of @\n\nwhile we are at it:\n:: and & are _really_ sigils for variables?\nThey seem (to me) more akin to a literal syntax, and I wonder what would \nhappen in a case like this:\n\nsub foo {}\nsub bar {}\n# currently syntax error in pugs, but if is a variable sigil\n# why I can't have it on a variable?\nmy &foo = &bar\n&foo('hello')\n\nI have to understand that\n  &foo = &somefunction\nis actually redefining the foo() sub?\n\nIf not, which gets called in the above case? can I have access again to \nthe original &foo sub here?\n\nand in these context\n\nmulti foo(Int $i) {...}\nmulti foo(Str $i) {...}\n\nmy &foo = &foo\n&foo('hello')\n\ndo I get an error, since we are using the variant defined for Ints or is \nthe multiple dispatch called again?\n\nSame for ::\n  ::Object = $?GRAMMAR\nis guaranteed to explode in my face or is it just a syntactic error (as \nit currently is in pugs) ?\n\n"}