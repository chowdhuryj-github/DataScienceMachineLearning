{"category": "ham", "to_address": "William Constantine <wconstan@gmail.com>", "from_address": "Prof Brian Ripley <ripley@stats.ox.ac.uk>", "subject": "Re: [R] Calling LAPACK functions directly from R", "body": "This was much more appropriate for R-devel, so please move any followup \nthere.\n\nOn Wed, 11 Apr 2007, William Constantine wrote:\n\n> I am interested in tapping into LAPACK functionality directly from R.\n> Using R-2.4.1 for Windows, I was able to do so ala:\n>\n> dyn.load(\"bin/Rlapack.dll\")\n> is.loaded(\"dstebz\") # returns TRUE\n>\n> N <- 100\n> NW <- 4\n> n.tapers <- 5\n> tpW <- (2 * pi * NW)/N\n> otNmo <- 1:N\n> D <- as.double(cos(tpW) * ((N - 1 - 2 * (0:(N - 1)))/2)^2)\n> E <- as.double((otNmo * (N - otNmo))/2)\n>\n> z <- .Fortran(\"dstebz\",\n>  \"I\", \"B\", as.integer(N), double(1), double(1),\n>  as.integer(N - n.tapers + 1), as.integer(N), double(1),\n>  D, E, integer(1), integer(1), double(N), integer(N), integer(N),\n>  double(4 * N), integer(3 * N), integer(1))[13:15]\n>\n> I then extended this approach in developing an R package\n> where I added the following to the appropriate .First.lib():\n>\n>  lapack.path <- file.path(R.home(), ifelse(.Platform$OS.type == \"windows\",\n>    file.path(\"bin\", \"Rlapack\"), file.path(\"lib\", \"libRlapack\")))\n>  dyn.load(paste(lapack.path,.Platform$dynlib.ext, sep=\"\"))\n>\n> which loads the LAPACK shared objects in lib/libRlapack.so for LINUX/UNIX\n> and bin/Rlapack.dll for Windows.\n>\n> Q1: Is there a better or more robust way of loading LAPACK symbols\n> into R, (e.g., one that is not platform dependent)?\n\nWhy do you want to do that?  All uses of LAPACK in R itself are via small \nC wrappers that make life a lot easier.\n\n> ---------------------------------------------------------------------------------------------------------------------\n>\n> My R package does not currently contain any C or FORTRAN code. However,\n> it has been suggested to me that creating a src/Makevars file containing\n> the line:\n>\n>  PKG_LIBS=$(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)\n>\n> is a better means of loading LAPACK symbols as it\n> would eliminate the need to use dyn.load() as shown in my .First.lib().\n> In Windows, however, this suggestion fails and results (for example)\n> in the above code returning a \"missing dstebz symbol\" error. My understanding\n> is that one need only create such a src/Makevar if they are interested in\n> tapping into LAPACK functionality from their src/ C or FORTRAN code\n> and so am doubtful of this suggestion.\n>\n> Q2: Given that I have no C/FORTRAN code in my package, am I\n> correct to assume that creating a Makevars files in such a way\n> does not eliminate the need to use dyn.load() as in the above?\n>\n> Q3: For future releases of R, should I expect the path of the LAPACK\n> library to remain as they are noted above in my .First.lib() example?\n\nIt may not work even now.  Buiilds of R do not necessarily contain \nLAPACK code (you can link to an external library) even on Windows.\n\nThe portable way to link to LAPACK is to use a C wrapper as described in \n'Writing R Extensions'.\n\n\n-- \nBrian D. Ripley,                  ripley@stats.ox.ac.uk\nProfessor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/\nUniversity of Oxford,             Tel:  +44 1865 272861 (self)\n1 South Parks Road,                     +44 1865 272866 (PA)\nOxford OX1 3TG, UK                Fax:  +44 1865 272595\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}