{"category": "ham", "to_address": "\"Patrick R. Michaud\" <pmichaud@pobox.com>", "from_address": "\"jerry gay\" <jerry.gay@gmail.com>", "subject": "Re: pdd15: How do I subclass a parrot; PMC class?", "body": "On 6/29/07, Patrick R. Michaud  wrote:\n> On Fri, Jun 29, 2007 at 11:23:46AM -0700, jerry gay wrote:\n> > On 6/28/07, Patrick R. Michaud  wrote:\n> > >Another question about pdd15...:\n> > >\n> > >If I'm in a different HLL namespace (e.g., via a .HLL directive), how do\n> > >I get a PMC class from the 'parrot' HLL namespace?\n> > >\n> > >Here is an example (which obviously won't work):  I'm creating a\n> > >'perl6;Str' class and then attempting to add (parrot's) String class\n> > >as a parent.  But of course the constant 'String' here refers to\n> > >the wrong HLL namespace:\n> > >\n> > >    $ cat z.pir\n> > >    .HLL \"perl6\", \"\"\n> > >\n> > >    .namespace [ \"\" ]\n> > >\n> > >    .sub main :main\n> > >        # create 'Str' class\n> > >        $P1 = new 'Class'\n> > >        $P1.'name'('Str')\n> > >\n> > >        # add parrot;String PMC as a parent class\n> > >        $P2 = get_class 'String'\n> > >        addparent $P1, $P2\n> > >    .end\n> > >\n> > >    $ ./parrot z.pir\n> > >    Class 'String' doesn't exist\n> > >    current instr.: 'perl6;;main' pc 12 (z.pir:11)\n> > >    $\n> > >\n> > >Of course, I'm mostly interested in knowing what the answer \"should be\",\n> > >but I'm\n> > >also interested in what \"works today\".\n> > >\n> > i've tried attacking this from a number of directions with current\n> > functionality, and can't seem to get anything to work.\n> >\n> > note that this example only works if *both* the .HLL and .namespace\n> > lines are commented out. i can't quite figure out why that is, but\n> > i'll to stare at the C source a bit and see if something jumps out.\n>\n> I think this is a case where the spec simply doesn't cover the needed\n> behavior yet, not that the implementation is missing something.\n>\n> If I use C< get_class \"String\" > in a HLL other than parrot,\n> then I somewhat expect the behavior we're already seeing.  In\n> other words, we're asking for a \"String\" class in the current\n> (HLL) namespace, and there isn't one, and thus we get an\n> exception.\n>\n> So, the question is -- how do we locate PMC classes in other\n> HLL namespaces?\n>\nthe get_class opcode takes a NameSpace PMC or a String, as per\nsrc/ops/object.ops:\n\n\n  =item B(out PMC, in STR)\n\n  =item B(out PMC, in PMC)\n\n  Find the PMC for a class, by string name or by key.\n\n  =cut\n\nmind you, the documentation could be a bit more specific, but i expect\nthat passing it a NameSpace PMC relative to the root namespace should\nwork. i haven't been able to get it to work--but i'd be happy to be\nproven wrong.\n~jerry\n\n"}