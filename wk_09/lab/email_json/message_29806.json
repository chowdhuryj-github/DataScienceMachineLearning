{"category": "ham", "to_address": "Thomas Wittek <mail@gedankenkonstrukt.de>", "from_address": "John Macdonald <john@perlwolf.com>", "subject": "Re: explicit line termination with \";\": why?", "body": "On Tue, May 15, 2007 at 01:22:48AM +0200, Thomas Wittek wrote:\n> Andrew Shitov:\n> > If the line of code is not ended with ';' the parser tries first\n> > to assume [..]\n> \n> Wouldn't that be unambigous?\n> \n>  foo = 23\n>  bar = \\\n>        42\n> \n> ?\n> \n> I think there would be no ambiguities and you only had to add additional\n> syntax for the rare cases instead of the common cases.\n\nWithout explicit \\ to join unterminated lines you get:\n\n  foo = 23\n  if x == 7\n  { y = 5; z = 6 }\n\nIs that:\n\n  foo = 23\n      if x == 7;\n  { y = 5; z = 6 }\n\nor:\n\n  foo = 23;\n  if x == 7\n      { y = 5; z = 6 }\n\n?\n\nWith explicit \\ to join unterminated lines you just get more\nugliness than having semicolons.  It's also, in many cases,\nharder to edit - that's why a trailing comma in a list that\nis surrounded by parens, or a trailing semicolon in a block\nsurrounded by braces, is easier to manage.  The syntax of\nthe last element is the same as the rest so you can shuffle\nthe order around easily without having to add a separator to\nthe end of what used to be the final element and remove the\nseparator on what is now the final element.\n\nHaving punctuation where there is a stop is more natural than\nhaving an explicit marker for \"don't stop here, keep going\".\n\n-- \n\n"}