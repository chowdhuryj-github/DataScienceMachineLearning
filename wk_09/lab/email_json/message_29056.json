{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r22834 - in branches/SAMBA_4_0/source/torture: .", "body": "Author: tridge\nDate: 2007-05-14 01:04:01 +0000 (Mon, 14 May 2007)\nNew Revision: 22834\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22834\n\nLog:\n\nfixed a memory leak in the torture_open_connection() code, and removed\nthe duplicate handling of the unclist. This now exposes a function\ntorture_get_conn_index() which can be used by tests to work out which\nhost to talk to using the unclist. I will be using that as part of a\nset of tests for clustered Samba that need to do auto-reconnect (to\nallow testing of cluster node failure)\n\nModified:\n   branches/SAMBA_4_0/source/torture/util_smb.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/torture/util_smb.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/util_smb.c\t2007-05-14 01:01:05 UTC (rev 22833)\n+++ branches/SAMBA_4_0/source/torture/util_smb.c\t2007-05-14 01:04:01 UTC (rev 22834)\n@@ -486,71 +486,66 @@\n \treturn True;\n }\n \n-_PUBLIC_ bool torture_open_connection(struct smbcli_state **c, int conn_index)\n+_PUBLIC_ bool torture_get_conn_index(int conn_index,\n+\t\t\t\t     TALLOC_CTX *mem_ctx,\n+\t\t\t\t     char **host, char **share)\n {\n-\tconst char *host = lp_parm_string(-1, \"torture\", \"host\");\n-\tconst char *share = lp_parm_string(-1, \"torture\", \"share\");\n \tchar **unc_list = NULL;\n \tint num_unc_names = 0;\n \tconst char *p;\n+\n+\t(*host) = talloc_strdup(mem_ctx, lp_parm_string(-1, \"torture\", \"host\"));\n+\t(*share) = talloc_strdup(mem_ctx, lp_parm_string(-1, \"torture\", \"share\"));\n \t\n \tp = lp_parm_string(-1, \"torture\", \"unclist\");\n-\tif (p) {\n-\t\tchar *h, *s;\n-\t\tunc_list = file_lines_load(p, &num_unc_names, NULL);\n-\t\tif (!unc_list || num_unc_names <= 0) {\n-\t\t\tprintf(\"Failed to load unc names list from '%s'\\n\", p);\n-\t\t\texit(1);\n-\t\t}\n+\tif (!p) {\n+\t\treturn True;\n+\t}\n \n-\t\tif (!smbcli_parse_unc(unc_list[conn_index % num_unc_names],\n-\t\t\t\t      NULL, &h, &s)) {\n-\t\t\tprintf(\"Failed to parse UNC name %s\\n\",\n-\t\t\t       unc_list[conn_index % num_unc_names]);\n-\t\t\texit(1);\n-\t\t}\n-\t\thost = h;\n-\t\tshare = s;\n+\tunc_list = file_lines_load(p, &num_unc_names, NULL);\n+\tif (!unc_list || num_unc_names <= 0) {\n+\t\tDEBUG(0,(\"Failed to load unc names list from '%s'\\n\", p));\n+\t\treturn False;\n \t}\n \n-\treturn torture_open_connection_share(NULL, c, host, share, NULL);\n+\tif (!smbcli_parse_unc(unc_list[conn_index % num_unc_names],\n+\t\t\t      mem_ctx, host, share)) {\n+\t\tDEBUG(0, (\"Failed to parse UNC name %s\\n\",\n+\t\t\t  unc_list[conn_index % num_unc_names]));\n+\t\treturn False;\n+\t}\n+\n+\ttalloc_free(unc_list);\n+\treturn True;\n }\n \n+\n+\n _PUBLIC_ bool torture_open_connection_ev(struct smbcli_state **c,\n \t\t\t\t\t int conn_index,\n \t\t\t\t\t struct event_context *ev)\n {\n-\tconst char *host = lp_parm_string(-1, \"torture\", \"host\");\n-\tconst char *share = lp_parm_string(-1, \"torture\", \"share\");\n-\tchar **unc_list = NULL;\n-\tint num_unc_names = 0;\n-\tconst char *p;\n-\t\n-\tp = lp_parm_string(-1, \"torture\", \"unclist\");\n-\tif (p) {\n-\t\tchar *h, *s;\n-\t\tunc_list = file_lines_load(p, &num_unc_names, NULL);\n-\t\tif (!unc_list || num_unc_names <= 0) {\n-\t\t\tprintf(\"Failed to load unc names list from '%s'\\n\", p);\n-\t\t\texit(1);\n-\t\t}\n+\tchar *host, *share;\n+\tbool ret;\n \n-\t\tif (!smbcli_parse_unc(unc_list[conn_index % num_unc_names],\n-\t\t\t\t      NULL, &h, &s)) {\n-\t\t\tprintf(\"Failed to parse UNC name %s\\n\",\n-\t\t\t       unc_list[conn_index % num_unc_names]);\n-\t\t\texit(1);\n-\t\t}\n-\t\thost = h;\n-\t\tshare = s;\n+\tif (!torture_get_conn_index(conn_index, ev, &host, &share)) {\n+\t\treturn False;\n \t}\n \n+\tret = torture_open_connection_share(NULL, c, host, share, ev);\n+\ttalloc_free(host);\n+\ttalloc_free(share);\n \n-\treturn torture_open_connection_share(NULL, c, host, share, ev);\n+\treturn ret;\n }\n \n+_PUBLIC_ bool torture_open_connection(struct smbcli_state **c, int conn_index)\n+{\n+\treturn torture_open_connection_ev(c, conn_index, NULL);\n+}\n \n \n+\n _PUBLIC_ bool torture_close_connection(struct smbcli_state *c)\n {\n \tbool ret = True;\n\n"}