{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Damian Conway <damian@conway.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Mark Overmeer wrote:\n\n >> Would the following syntax suffice?\n >>\n >>    method isValidPostalCode(str $postalcode) returns bool {...}\n >>    =PURPOSE  Check weather the postal code confirms to the standards\n >>    =ARG $postalcode\n >>        a string with blanks trimmed.\n >>    =RETURN\n >>        the string is not cleaned-up.\n >>\n >> Because you can already do precisely that in the current design of Pod 6.\n >\n > This is syntactically what can be done with the current design,\n > but is semantically very different.\n\nI don't think so. It's all just mark-up, no matter what the specific\nsyntax looks like. The semantics are provided by the behaviour of the tools \nthat parse and interpret that mark-up. If the tools treat:\n\n       =ARG $postalcode\n           a string with blanks trimmed.\n\nthe same as they treat:\n\n       `$postalcode: a string with blanks trimmed.\n\nthen semantically the two are exactly the same.\n\n\n > Besides the point that I do not really like the YELLING all the time,\n\nSo you create a Pod module that defines \"quieter\" user-defined block names, \nand write:\n\n       =use OOdoc:ver<6.0.0>\n\n       method isValidPostalCode(str $postalcode) returns bool {...}\n       =Purpose  Check weather the postal code confirms to the standards\n       =Arg $postalcode\n           a string with blanks trimmed.\n       =Return\n           the string is not cleaned-up.\n\n\n > You gave the hint that comments are also in the parse tree.\n\nThey can be. Better still, the (raw) Pod can also be kept in the parse \ntree...since, like comments, the Perl parser still has to recognize it, even \nwhen it's focusing on extracting Perl.\n\n\n > So, that is sufficient for me:\n\nAnd for others too, I hope.\n\nDefining Perl 6 and Pod 6 independently opens up so many options for\nbuilding documentation tools:\n\n     * As you've observed, you can build them on top of the Perl 6\n       parser, using any mark-up syntax that will fit in a comment;\n\n     * And, as I've indicated, you can build them on top of\n       the Pod parser, using the standard Pod syntax;\n\n     * Or you can build them on top of the Perl 6 parser, but using the\n       standard Pod syntax...by parsing Pod from within the appropriate\n       nodes of the Perl AST using the Pod parser;\n\n     * Or you can build them on top of the Pod parser, using the standard\n       Pod syntax, by parsing any code-bearing \"ambient\" nodes within the\n       Pod DOM using the Perl 6 parser;\n\n     * Or you can even build them by using *both* parsers at once and\n       then walking the two resulting hierarchical representations (AST\n       and DOM) in parallel, since Perl 6 has very good support for such\n       concurrent tree traversals.\n\nI don't believe any one of those alternatives will prove to be *the*\nuniversal best approach for implementing all documentation tools, but I\ndo believe that having all those alternatives will make it as easy as\npossible for us to collectively create the best tools for the each of\nthe many approaches to documentation that the Perl community is\nultimately going to want to support.\n\nAnd that's what keeping Perl 6 and Pod 6 separate buys you: choice,\noptions, alternatives, the possibility of creating very different styles\nof documentation for very different styles of programming. And for\ndifferent kinds of programmer: for the Busy Documentor, tools that\nextract documentation automatically from code; for the Exacting\nDocumentor, a structural mark-up that allows precise manual control over\nwhat's documented...and how; for the Pragmatic Documentor, tools that\nallow structural mark-up and automatic extraction to be sensibly mixed.\n\nAnd therefore I see the very fact that you don't like my design of Pod 6\nas a strong argument in *favour* of that design, since that design aims\nto provide the necessary syntactic extensibility and the essential\nbuilding blocks (parser, DOM, module support) required for the\nproponents of each individual documentation philosophy to create a\nmark-up system and supporting tools best suited to their specific needs\nand objectives.\n\nDamian\n\n"}