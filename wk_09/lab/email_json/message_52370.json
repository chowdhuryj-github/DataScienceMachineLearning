{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Smylers <Smylers@stripey.com>", "subject": "Re: Referring to source code within Perldoc: the new A<> code", "body": "Juerd Waalboer writes:\n\n> Damian Conway skribis 2007-06-21 11:45 (+1000):\n> \n> > A dedicated OO documentation tool could certainly do a better job in\n> > that case, I heartily agree. I'm looking forward to using one.\n> \n> This dedicated OO documentation must be core, because Perl itself is\n> heavily OO.\n\nThat doesn't follow.\n\n> If we are to ever have consistent, semantic, structured OO\n> documentation throughout CPAN (and numerous in house projects), we\n> must start with Perl itself,\n\nI disagree.  perldoc.perl.org was started by JJ, gained popularity, and\nthen got awarded the official blessing of the onion.  Over the years\nthere have many several sites with Perl documenation.\n\nLet the same thing happen with Perl 6: allow innovation, and if you, or\nMarkov, or anybody creates a particularly fine site then people will\nadmire it, use it ... and then perhaps it can be made official.\n\nThere isn't really anything to be gained by pre-empting this and picking\nsomething initially.\n\nDocumentation, unlike code, doesn't have to be backwards compatible: if\nPerl 6.0.1 changes the API of a standard function that will break\nexisting code; but if Perl 6.0.1 has documentation with a different\nstructure from Perl 6.0.0, that won't break anything.\n\nAlso it's much easier for people to get the benefit of documentation\nimprovements than of code improvements.  If Perl 6.0.1 introduces a new\nfeature then I need to upgrade from Perl 6.0.0 on all my computers to be\nable to use it; but if Perl 6.0.1 has improved documentation then I can\nread, browse, and search that documentation on its website without\nneeding to upgrade any of my computers.\n\nSmylers\n\n"}