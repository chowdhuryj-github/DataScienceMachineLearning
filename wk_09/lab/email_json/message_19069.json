{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14389 - doc/trunk/design/syn", "body": "Author: larry\nDate: Sat Apr 28 15:23:15 2007\nNew Revision: 14389\n\nModified:\n   doc/trunk/design/syn/S12.pod\n\nLog:\nUse of protoobjects for role initial values.\n\n\nModified: doc/trunk/design/syn/S12.pod\n==============================================================================\n--- doc/trunk/design/syn/S12.pod\t(original)\n+++ doc/trunk/design/syn/S12.pod\tSat Apr 28 15:23:15 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 27 Oct 2004\n-  Last Modified: 27 Apr 2007\n+  Last Modified: 28 Apr 2007\n   Number: 12\n-  Version: 48\n+  Version: 49\n \n =head1 Overview\n \n@@ -1898,17 +1898,32 @@\n \n     Dog{ :name }\n \n-This is still lazily evaluated:\n+This form is also lazily evaluated:\n \n     my $dog = Dog{ :name };\n     defined $dog or say \"doesn't exist\";  # Fido doesn't exist\n     $dog.wag()                            # Fido wags his tail\n \n-Note that when used as an argument to a method like C, the\n-protoobject is sufficiently lazy that autovivifying is done only by\n-the appropriate C routine.  It does not waste energy creating\n-a C object when that object's attributes would later have to be\n-copied into the actual object.\n+When the typename happens to be a role, autovivifying it involves\n+attempting to create a punned class of the same name as the role.\n+Whether this succeeds or not depends on whether the role is\n+sufficiently complete to serve as a class on its own.  Regardless of\n+whether such an attempt would succeed, it is always perfectly fine to\n+define a lazy protoobject for a role just as long as it's only ever\n+used as an argument to C, since C will only be using\n+its closure to construct the role's C arguments in the context\n+of the complete new class.  (Of course, an inconsistent or incomplete\n+class composition may subsequently fail, and in fact the incomplete\n+role autovivification mentioned above is likely to be implemented by\n+failing at the point of class composition.)\n+\n+Note that when used as an argument to a method like C,\n+the protoobject is sufficiently lazy that autovivifying is done\n+only by the appropriate C routine.  It does not waste energy\n+creating a C object when that object's attributes would later\n+have to be copied into the actual object.  (On top of which, such\n+an implementation would make it impossible to use protoobjects to\n+initialize incomplete roles.)\n \n The object autovivification syntax works only for literal named types,\n so any indirection must be written more explicitly:\n\n"}