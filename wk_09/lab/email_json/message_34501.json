{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23081 - in branches/SAMBA_3_0/source/rpc_client:\n\t.", "body": "Author: obnox\nDate: 2007-05-22 21:04:56 +0000 (Tue, 22 May 2007)\nNew Revision: 23081\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23081\n\nLog:\nReorder the lsa_lookup_sids functions so that the order makes more sense... \n\n\nModified:\n   branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c\n===================================================================\n--- branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c\t2007-05-22 20:20:01 UTC (rev 23080)\n+++ branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c\t2007-05-22 21:04:56 UTC (rev 23081)\n@@ -214,8 +214,8 @@\n \t\t\t}\n \n \t\t} else {\n-\t\t\t(names)[i] = NULL;\n-\t\t\t(domains)[i] = NULL;\n+\t\t\t(names)[i] = \"\";\n+\t\t\t(domains)[i] = \"\";\n \t\t\t(types)[i] = SID_NAME_UNKNOWN;\n \t\t}\n \t}\n@@ -225,6 +225,117 @@\n \treturn result;\n }\n \n+/* Lookup a list of sids \n+ *\n+ * do it the right way: there is a limit (of 20480 for w2k3) entries\n+ * returned by this call. when the sids list contains more entries,\n+ * empty lists are returned. This version of lsa_lookup_sids passes\n+ * the list of sids in hunks of LOOKUP_SIDS_HUNK_SIZE to the lsa call. */\n+\n+/* This constant defines the limit of how many sids to look up\n+ * in one call (maximum). the limit from the server side is\n+ * at 20480 for win2k3, but we keep it at a save 1000 for now. */\n+#define LOOKUP_SIDS_HUNK_SIZE 1000\n+\n+NTSTATUS rpccli_lsa_lookup_sids_all(struct rpc_pipe_client *cli,\n+\t\t\t\t    TALLOC_CTX *mem_ctx,\n+\t\t\t\t    POLICY_HND *pol, \n+\t\t\t\t    int num_sids,\n+\t\t\t\t    const DOM_SID *sids, \n+\t\t\t\t    char ***domains,\n+\t\t\t\t    char ***names,\n+\t\t\t\t    enum lsa_SidType **types)\n+{\n+\tNTSTATUS result = NT_STATUS_OK;\n+\tint sids_left = 0;\n+\tint sids_processed = 0;\n+\tconst DOM_SID *hunk_sids = sids;\n+\tchar **hunk_domains = NULL;\n+\tchar **hunk_names = NULL;\n+\tenum lsa_SidType *hunk_types = NULL;\n+\n+\tif (num_sids) {\n+\t\tif (!((*domains) = TALLOC_ARRAY(mem_ctx, char *, num_sids))) {\n+\t\t\tDEBUG(0, (\"rpccli_lsa_lookup_sids_all(): out of memory\\n\"));\n+\t\t\tresult = NT_STATUS_NO_MEMORY;\n+\t\t\tgoto done;\n+\t\t}\n+\n+\t\tif (!((*names) = TALLOC_ARRAY(mem_ctx, char *, num_sids))) {\n+\t\t\tDEBUG(0, (\"rpccli_lsa_lookup_sids_all(): out of memory\\n\"));\n+\t\t\tresult = NT_STATUS_NO_MEMORY;\n+\t\t\tgoto done;\n+\t\t}\n+\n+\t\tif (!((*types) = TALLOC_ARRAY(mem_ctx, enum lsa_SidType, num_sids))) {\n+\t\t\tDEBUG(0, (\"rpccli_lsa_lookup_sids_all(): out of memory\\n\"));\n+\t\t\tresult = NT_STATUS_NO_MEMORY;\n+\t\t\tgoto done;\n+\t\t}\n+\t} else {\n+\t\t(*domains) = NULL;\n+\t\t(*names) = NULL;\n+\t\t(*types) = NULL;\n+\t}\n+\t\n+\tsids_left = num_sids;\n+\thunk_domains = *domains;\n+\thunk_names = *names;\n+\thunk_types = *types;\n+\n+\twhile (sids_left > 0) {\n+\t\tint hunk_num_sids;\n+\t\tNTSTATUS hunk_result = NT_STATUS_OK;\n+\n+\t\thunk_num_sids = ((sids_left > LOOKUP_SIDS_HUNK_SIZE) \n+\t\t\t\t? LOOKUP_SIDS_HUNK_SIZE \n+\t\t\t\t: sids_left);\n+\n+\t\tDEBUG(10, (\"rpccli_lsa_lookup_sids_all: processing items \"\n+\t\t\t   \"%d -- %d of %d.\\n\", \n+\t\t\t   sids_processed, \n+\t\t\t   sids_processed + hunk_num_sids - 1,\n+\t\t\t   num_sids));\n+\n+\t\thunk_result = rpccli_lsa_lookup_sids_noalloc(cli,\n+\t\t\t\t\t\t\t     mem_ctx,\n+\t\t\t\t\t\t\t     pol,\n+\t\t\t\t\t\t\t     hunk_num_sids, \n+\t\t\t\t\t\t\t     hunk_sids,\n+\t\t\t\t\t\t\t     hunk_domains,\n+\t\t\t\t\t\t\t     hunk_names,\n+\t\t\t\t\t\t\t     hunk_types);\n+\n+\t\tif (!NT_STATUS_IS_OK(hunk_result) &&\n+\t\t    !NT_STATUS_EQUAL(hunk_result, STATUS_SOME_UNMAPPED) &&\n+\t\t    !NT_STATUS_EQUAL(hunk_result, NT_STATUS_NONE_MAPPED)) \n+\t\t{\n+\t\t\t/* An actual error occured */\n+\t\t\tgoto done;\n+\t\t}\n+\n+\t\t/* adapt overall result */\n+\t\tif (( NT_STATUS_IS_OK(result) && \n+\t\t     !NT_STATUS_IS_OK(hunk_result)) \n+\t\t    ||\n+\t\t    ( NT_STATUS_EQUAL(result, NT_STATUS_NONE_MAPPED) &&\n+\t\t     !NT_STATUS_EQUAL(hunk_result, NT_STATUS_NONE_MAPPED)))\n+\t\t{\n+\t\t\tresult = STATUS_SOME_UNMAPPED;\n+\t\t}\n+\n+\t\tsids_left -= hunk_num_sids;\n+\t\tsids_processed += hunk_num_sids; /* only used in DEBUG */\n+\t\thunk_sids += hunk_num_sids;\n+\t\thunk_domains += hunk_num_sids;\n+\t\thunk_names += hunk_num_sids;\n+\t\thunk_types += hunk_num_sids;\n+\t}\n+\n+done:\n+\treturn result;\n+}\n+\n /** Lookup a list of sids */\n \n NTSTATUS rpccli_lsa_lookup_sids(struct rpc_pipe_client *cli,\n@@ -336,117 +447,6 @@\n \treturn result;\n }\n \n-/* Lookup a list of sids \n- *\n- * do it the right way: there is a limit (of 20480 for w2k3) entries\n- * returned by this call. when the sids list contains more entries,\n- * empty lists are returned. This version of lsa_lookup_sids passes\n- * the list of sids in hunks of LOOKUP_SIDS_HUNK_SIZE to the lsa call. */\n-\n-/* This constant defines the limit of how many sids to look up\n- * in one call (maximum). the limit from the server side is\n- * at 20480 for win2k3, but we keep it at a save 1000 for now. */\n-#define LOOKUP_SIDS_HUNK_SIZE 1000\n-\n-NTSTATUS rpccli_lsa_lookup_sids_all(struct rpc_pipe_client *cli,\n-\t\t\t\t    TALLOC_CTX *mem_ctx,\n-\t\t\t\t    POLICY_HND *pol, \n-\t\t\t\t    int num_sids,\n-\t\t\t\t    const DOM_SID *sids, \n-\t\t\t\t    char ***domains,\n-\t\t\t\t    char ***names,\n-\t\t\t\t    enum lsa_SidType **types)\n-{\n-\tNTSTATUS result = NT_STATUS_OK;\n-\tint sids_left = 0;\n-\tint sids_processed = 0;\n-\tconst DOM_SID *hunk_sids = sids;\n-\tchar **hunk_domains = NULL;\n-\tchar **hunk_names = NULL;\n-\tenum lsa_SidType *hunk_types = NULL;\n-\n-\tif (num_sids) {\n-\t\tif (!((*domains) = TALLOC_ARRAY(mem_ctx, char *, num_sids))) {\n-\t\t\tDEBUG(0, (\"rpccli_lsa_lookup_sids_all(): out of memory\\n\"));\n-\t\t\tresult = NT_STATUS_NO_MEMORY;\n-\t\t\tgoto done;\n-\t\t}\n-\n-\t\tif (!((*names) = TALLOC_ARRAY(mem_ctx, char *, num_sids))) {\n-\t\t\tDEBUG(0, (\"rpccli_lsa_lookup_sids_all(): out of memory\\n\"));\n-\t\t\tresult = NT_STATUS_NO_MEMORY;\n-\t\t\tgoto done;\n-\t\t}\n-\n-\t\tif (!((*types) = TALLOC_ARRAY(mem_ctx, enum lsa_SidType, num_sids))) {\n-\t\t\tDEBUG(0, (\"rpccli_lsa_lookup_sids_all(): out of memory\\n\"));\n-\t\t\tresult = NT_STATUS_NO_MEMORY;\n-\t\t\tgoto done;\n-\t\t}\n-\t} else {\n-\t\t(*domains) = NULL;\n-\t\t(*names) = NULL;\n-\t\t(*types) = NULL;\n-\t}\n-\t\n-\tsids_left = num_sids;\n-\thunk_domains = *domains;\n-\thunk_names = *names;\n-\thunk_types = *types;\n-\n-\twhile (sids_left > 0) {\n-\t\tint hunk_num_sids;\n-\t\tNTSTATUS hunk_result = NT_STATUS_OK;\n-\n-\t\thunk_num_sids = ((sids_left > LOOKUP_SIDS_HUNK_SIZE) \n-\t\t\t\t? LOOKUP_SIDS_HUNK_SIZE \n-\t\t\t\t: sids_left);\n-\n-\t\tDEBUG(10, (\"rpccli_lsa_lookup_sids_all: processing items \"\n-\t\t\t   \"%d -- %d of %d.\\n\", \n-\t\t\t   sids_processed, \n-\t\t\t   sids_processed + hunk_num_sids - 1,\n-\t\t\t   num_sids));\n-\n-\t\thunk_result = rpccli_lsa_lookup_sids_noalloc(cli,\n-\t\t\t\t\t\t\t     mem_ctx,\n-\t\t\t\t\t\t\t     pol,\n-\t\t\t\t\t\t\t     hunk_num_sids, \n-\t\t\t\t\t\t\t     hunk_sids,\n-\t\t\t\t\t\t\t     hunk_domains,\n-\t\t\t\t\t\t\t     hunk_names,\n-\t\t\t\t\t\t\t     hunk_types);\n-\n-\t\tif (!NT_STATUS_IS_OK(hunk_result) &&\n-\t\t    !NT_STATUS_EQUAL(hunk_result, STATUS_SOME_UNMAPPED) &&\n-\t\t    !NT_STATUS_EQUAL(hunk_result, NT_STATUS_NONE_MAPPED)) \n-\t\t{\n-\t\t\t/* An actual error occured */\n-\t\t\tgoto done;\n-\t\t}\n-\n-\t\t/* adapt overall result */\n-\t\tif (( NT_STATUS_IS_OK(result) && \n-\t\t     !NT_STATUS_IS_OK(hunk_result)) \n-\t\t    ||\n-\t\t    ( NT_STATUS_EQUAL(result, NT_STATUS_NONE_MAPPED) &&\n-\t\t     !NT_STATUS_EQUAL(hunk_result, NT_STATUS_NONE_MAPPED)))\n-\t\t{\n-\t\t\tresult = STATUS_SOME_UNMAPPED;\n-\t\t}\n-\n-\t\tsids_left -= hunk_num_sids;\n-\t\tsids_processed += hunk_num_sids; /* only used in DEBUG */\n-\t\thunk_sids += hunk_num_sids;\n-\t\thunk_domains += hunk_num_sids;\n-\t\thunk_names += hunk_num_sids;\n-\t\thunk_types += hunk_num_sids;\n-\t}\n-\n-done:\n-\treturn result;\n-}\n-\n /** Lookup a list of names */\n \n NTSTATUS rpccli_lsa_lookup_names(struct rpc_pipe_client *cli,\n\n"}