{"category": "ham", "to_address": "<R-help@stat.math.ethz.ch>", "from_address": "\"Muenchen, Robert A (Bob)\" <muenchen@utk.edu>", "subject": "Re: [R] do.call vs. lapply for lists", "body": "Marc,\n\nThat makes the difference between do.call and lapply crystal clear. Your\nexplanation would make a nice FAQ entry.\n\nThanks!\nBob\n\n=========================================================\n  Bob Muenchen (pronounced Min'-chen), Manager  \n  Statistical Consulting Center\n  U of TN Office of Information Technology\n  200 Stokely Management Center, Knoxville, TN 37996-0520\n  Voice: (865) 974-5230  \n  FAX:   (865) 974-4810\n  Email: muenchen@utk.edu\n  Web:   http://oit.utk.edu/scc, \n  News:  http://listserv.utk.edu/archives/statnews.html\n=========================================================\n\n\n> -----Original Message-----\n> From: Marc Schwartz [mailto:marc_schwartz@comcast.net]\n> Sent: Monday, April 09, 2007 1:06 PM\n> To: Muenchen, Robert A (Bob)\n> Cc: R-help@stat.math.ethz.ch\n> Subject: Re: do.call vs. lapply for lists\n> \n> On Mon, 2007-04-09 at 12:45 -0400, Muenchen, Robert A (Bob) wrote:\n> > Hi All,\n> >\n> > I'm trying to understand the difference between do.call and lapply\n> for\n> > applying a function to a list. Below is one of the variations of\n> > programs (by Marc Schwartz) discussed here recently to select the\n> first\n> > and last n observations per group.\n> >\n> > I've looked in several books, the R FAQ and searched the archives,\n> but I\n> > can't find enough to figure out why lapply doesn't do what do.call\n> does\n> > in this case. The help files & newsletter descriptions of do.call\n> sound\n> > like it would do the same thing, but I'm sure that's due to my lack\n> of\n> > understanding about their specific terminology. I would appreciate\nit\n> if\n> > you could take a moment to enlighten me.\n> >\n> > Thanks,\n> > Bob\n> >\n> > mydata <- data.frame(\n> >   id      = c('001','001','001','002','003','003'),\n> >   math    = c(80,75,70,65,65,70),\n> >   reading = c(65,70,88,NA,90,NA)\n> > )\n> > mydata\n> >\n> > mylast <- lapply( split(mydata,mydata$id), tail, n=1)\n> > mylast\n> > class(mylast) #It's a list, so lapply will so *something* with it.\n> >\n> > #This gets the desired result:\n> > do.call(\"rbind\", mylast)\n> >\n> > #This doesn't do the same thing, which confuses me:\n> > lapply(mylast,rbind)\n> >\n> > #...and data.frame won't fix it as I've seen it do in other\n> > circumstances:\n> > data.frame( lapply(mylast,rbind) )\n> \n> Bob,\n> \n> A key difference is that do.call() operates (in the above example) as\n> if\n> the actual call was:\n> \n> > rbind(mylast[[1]], mylast[[2]], mylast[[3]])\n>    id math reading\n> 3 001   70      88\n> 4 002   65      NA\n> 6 003   70      NA\n> \n> In other words, do.call() takes the quoted function and passes the\nlist\n> object as if it was a list of individual arguments. So rbind() is only\n> called once.\n> \n> In this case, rbind() internally handles all of the factor level\n> issues,\n> etc. to enable a single common data frame to be created from the three\n> independent data frames contained in 'mylast':\n> \n> > str(mylast)\n> List of 3\n>  $ 001:'data.frame':    1 obs. of  3 variables:\n>   ..$ id     : Factor w/ 3 levels \"001\",\"002\",\"003\": 1\n>   ..$ math   : num 70\n>   ..$ reading: num 88\n>  $ 002:'data.frame':    1 obs. of  3 variables:\n>   ..$ id     : Factor w/ 3 levels \"001\",\"002\",\"003\": 2\n>   ..$ math   : num 65\n>   ..$ reading: num NA\n>  $ 003:'data.frame':    1 obs. of  3 variables:\n>   ..$ id     : Factor w/ 3 levels \"001\",\"002\",\"003\": 3\n>   ..$ math   : num 70\n>   ..$ reading: num NA\n> \n> \n> On the other hand, lapply() (as above) calls rbind() _separately_ for\n> each component of mylast.  It therefore acts as if the following\nseries\n> of three separate calls were made:\n> \n> \n> > rbind(mylast[[1]])\n>    id math reading\n> 3 001   70      88\n> \n> > rbind(mylast[[2]])\n>    id math reading\n> 4 002   65      NA\n> \n> > rbind(mylast[[3]])\n>    id math reading\n> 6 003   70      NA\n> \n> \n> Of course, the result of lapply() is that the above are combined into\na\n> single R list object and returned:\n> \n> > lapply(mylast, rbind)\n> $`001`\n>    id math reading\n> 3 001   70      88\n> \n> $`002`\n>    id math reading\n> 4 002   65      NA\n> \n> $`003`\n>    id math reading\n> 6 003   70      NA\n> \n> \n> It is a subtle, but of course critical, difference in how the internal\n> function is called and how the arguments are passed.\n> \n> Does that help?\n> \n> Regards,\n> \n> Marc Schwartz\n>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}