{"category": "ham", "to_address": "\"Mihai Vlad\" <mihai.vlad@axigen.com>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: Perl BUG?", "body": "On 6/27/07, Mihai Vlad  wrote:\n\n> $a = 'whatever';\n> $b = '';\n>\n> $test = 'x\\ y';\n> $test =~ s/\\\\ / /;\n\nThis replaces a backslash and a space with a space. But it's also a\nsuccessful pattern match, which will matter in a moment.\n\n> if ( $a =~ m/$b/ ) {\n\nWhat's that pattern? It's not an empty pattern. According to perlop's\nentry on m// :\n\n    If the PATTERN evaluates to the empty string, the last successfully\n    matched regular expression is used instead. .... If no match has\n    previously succeeded, this will (silently) act instead as a genuine\n    empty pattern (which will always match).\n\nSo by using the empty string, you triggered this obscure feature. You\nmight have wanted something like this for $b to get a true empty\npattern:\n\n    my $b = qr/(?#empty)/;\n\nYou're not the first person to discover this feature by accident,\nthough; that's one of the reasons it's been removed in Perl 6.\n\nHope this helps!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}