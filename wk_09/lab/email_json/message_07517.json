{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "metze@samba.org", "subject": "svn commit: samba r22297 - in branches/SAMBA_4_0/source/lib:\n\treplace util", "body": "Author: metze\nDate: 2007-04-17 08:03:01 +0000 (Tue, 17 Apr 2007)\nNew Revision: 22297\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22297\n\nLog:\nmove ZERO_*, ARRAY_SIZE and PTR_DIFF macros into libreplace\n\nmetze\nModified:\n   branches/SAMBA_4_0/source/lib/replace/README\n   branches/SAMBA_4_0/source/lib/replace/replace.h\n   branches/SAMBA_4_0/source/lib/util/util.h\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/replace/README\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/README\t2007-04-17 07:45:54 UTC (rev 22296)\n+++ branches/SAMBA_4_0/source/lib/replace/README\t2007-04-17 08:03:01 UTC (rev 22297)\n@@ -86,6 +86,12 @@\n MIN\n MAX\n QSORT_CAST\n+ZERO_STRUCT\n+ZERO_STRUCTP\n+ZERO_STRUCTPN\n+ZERO_ARRAY\n+ARRAY_SIZE\n+PTR_DIFF\n \n Headers:\n stdint.h\n\nModified: branches/SAMBA_4_0/source/lib/replace/replace.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/replace.h\t2007-04-17 07:45:54 UTC (rev 22296)\n+++ branches/SAMBA_4_0/source/lib/replace/replace.h\t2007-04-17 08:03:01 UTC (rev 22297)\n@@ -451,6 +451,35 @@\n #define __location__ __FILE__ \":\" __LINESTR__\n #endif\n \n+/** \n+ * zero a structure \n+ */\n+#define ZERO_STRUCT(x) memset((char *)&(x), 0, sizeof(x))\n+\n+/** \n+ * zero a structure given a pointer to the structure \n+ */\n+#define ZERO_STRUCTP(x) do { if ((x) != NULL) memset((char *)(x), 0, sizeof(*(x))); } while(0)\n+\n+/** \n+ * zero a structure given a pointer to the structure - no zero check \n+ */\n+#define ZERO_STRUCTPN(x) memset((char *)(x), 0, sizeof(*(x)))\n+\n+/* zero an array - note that sizeof(array) must work - ie. it must not be a\n+   pointer */\n+#define ZERO_ARRAY(x) memset((char *)(x), 0, sizeof(x))\n+\n+/**\n+ * work out how many elements there are in a static array \n+ */\n+#define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))\n+\n+/** \n+ * pointer difference macro \n+ */\n+#define PTR_DIFF(p1,p2) ((ptrdiff_t)(((const char *)(p1)) - (const char *)(p2)))\n+\n #if MMAP_BLACKLIST\n #undef HAVE_MMAP\n #endif\n\nModified: branches/SAMBA_4_0/source/lib/util/util.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/util/util.h\t2007-04-17 07:45:54 UTC (rev 22296)\n+++ branches/SAMBA_4_0/source/lib/util/util.h\t2007-04-17 08:03:01 UTC (rev 22297)\n@@ -41,32 +41,7 @@\n #include \"util/byteorder.h\"\n #include \"lib/util/util_proto.h\"\n \n-/** \n- * zero a structure \n- */\n-#define ZERO_STRUCT(x) memset((char *)&(x), 0, sizeof(x))\n-\n-/** \n- * zero a structure given a pointer to the structure \n- */\n-#define ZERO_STRUCTP(x) do { if ((x) != NULL) memset((char *)(x), 0, sizeof(*(x))); } while(0)\n-\n-/** \n- * zero a structure given a pointer to the structure - no zero check \n- */\n-#define ZERO_STRUCTPN(x) memset((char *)(x), 0, sizeof(*(x)))\n-\n-/** \n- * pointer difference macro \n- */\n-#define PTR_DIFF(p1,p2) ((ptrdiff_t)(((const char *)(p1)) - (const char *)(p2)))\n-\n /**\n- * work out how many elements there are in a static array \n- */\n-#define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))\n-\n-/**\n  * assert macros \n  */\n #define SMB_ASSERT(b) do { if (!(b)) { \\\n\n"}