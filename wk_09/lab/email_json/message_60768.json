{"category": "ham", "to_address": "Ovid <curtis_ovid_poe@yahoo.com>", "from_address": "Adrian Howard <adrianh@quietstars.com>", "subject": "Re: Test::Class fixture problem", "body": "Belated response...\n\nOn 1 Jul 2007, at 23:19, Ovid wrote:\n[snip]\n> I've just spent quite a bit of time debugging a problem where a  \n> Test::Class setup method was misbehaving.  My tests passed, but  \n> mysql was spitting out errors directly to STDERR and quite a bit of  \n> tracing led me to the following:\n>\n>   sub setup : Tests(setup) {\n>       my $test = shift;\n>       $test->SUPER::startup;\n>       $test->_make_test_servers(\n>           num_servers => 2,\n>           username    => 'Ovid',\n>       );\n>   }\n>\n> As you can see, I called SUPER::startup instead of SUPER::setup.\n[snip]\n\nNot that it helps solve your problem - but I tend to use multiple  \nsetup routines rather than inheritance to add extra set up code to a  \nclass. I generally find it reads more cleanly since I can give my  \nmethods more intention revealing names.\n\n[snip]\n> It's trivial to write code in my stubs which check the caller and  \n> issue a warning and maybe I can just walk back through the call  \n> stack to issue a warning if I'm ever called by an inappropriately  \n> named method, but that seems a bit hackish.  Is there some better  \n> way to solve this problem?\n[snip]\n\nNothing obvious springs to mind - seems like a generic perl problem/ \nfeature.\nThen again I'm not exactly feeling 100% at the moment so I could be  \nmissing something obvious :-)\n\nYou could, of course, use something like chromatic's SUPER and write  \nit as:\n\n   sub setup : Tests(setup) {\n       my $test = shift;\n       super;\n       $test->_make_test_servers(\n           num_servers => 2,\n           username    => 'Ovid',\n       );\n   }\n\n?\n\nAdrian\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}