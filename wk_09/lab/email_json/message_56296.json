{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "gd@samba.org", "subject": "svn commit: samba r23628 - in branches: SAMBA_3_0/source/rpcclient\n\tSAMBA_3_0_26/source/rpcclient", "body": "Author: gd\nDate: 2007-06-27 12:27:00 +0000 (Wed, 27 Jun 2007)\nNew Revision: 23628\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23628\n\nLog:\nAdd LSA lookupnames_level to rpcclient.\n\nGuenther\n\nModified:\n   branches/SAMBA_3_0/source/rpcclient/cmd_lsarpc.c\n   branches/SAMBA_3_0_26/source/rpcclient/cmd_lsarpc.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/rpcclient/cmd_lsarpc.c\n===================================================================\n--- branches/SAMBA_3_0/source/rpcclient/cmd_lsarpc.c\t2007-06-27 11:42:17 UTC (rev 23627)\n+++ branches/SAMBA_3_0/source/rpcclient/cmd_lsarpc.c\t2007-06-27 12:27:00 UTC (rev 23628)\n@@ -262,6 +262,57 @@\n \treturn result;\n }\n \n+/* Resolve a list of names to a list of sids */\n+\n+static NTSTATUS cmd_lsa_lookup_names_level(struct rpc_pipe_client *cli, \n+\t\t\t\t\t   TALLOC_CTX *mem_ctx, int argc, \n+\t\t\t\t\t   const char **argv)\n+{\n+\tPOLICY_HND pol;\n+\tNTSTATUS result = NT_STATUS_UNSUCCESSFUL;\n+\tDOM_SID *sids;\n+\tenum lsa_SidType *types;\n+\tint i, level;\n+\n+\tif (argc < 3) {\n+\t\tprintf(\"Usage: %s [level] [name1 [name2 [...]]]\\n\", argv[0]);\n+\t\treturn NT_STATUS_OK;\n+\t}\n+\n+\tresult = rpccli_lsa_open_policy(cli, mem_ctx, True, \n+\t\t\t\t     SEC_RIGHTS_MAXIMUM_ALLOWED,\n+\t\t\t\t     &pol);\n+\n+\tif (!NT_STATUS_IS_OK(result))\n+\t\tgoto done;\n+\n+\tlevel = atoi(argv[1]);\n+\n+\tresult = rpccli_lsa_lookup_names(cli, mem_ctx, &pol, argc - 2, \n+\t\t\t\t      (const char**)(argv + 2), NULL, level, &sids, &types);\n+\n+\tif (!NT_STATUS_IS_OK(result) && NT_STATUS_V(result) != \n+\t    NT_STATUS_V(STATUS_SOME_UNMAPPED))\n+\t\tgoto done;\n+\n+\tresult = NT_STATUS_OK;\n+\n+\t/* Print results */\n+\n+\tfor (i = 0; i < (argc - 2); i++) {\n+\t\tfstring sid_str;\n+\t\tsid_to_string(sid_str, &sids[i]);\n+\t\tprintf(\"%s %s (%s: %d)\\n\", argv[i + 2], sid_str,\n+\t\t       sid_type_lookup(types[i]), types[i]);\n+\t}\n+\n+\trpccli_lsa_Close(cli, mem_ctx, &pol);\n+\n+ done:\n+\treturn result;\n+}\n+\n+\n /* Resolve a list of SIDs to a list of names */\n \n static NTSTATUS cmd_lsa_lookup_sids(struct rpc_pipe_client *cli, TALLOC_CTX *mem_ctx,\n@@ -1047,6 +1098,7 @@\n \t{ \"lsaquery\", \t         RPC_RTYPE_NTSTATUS, cmd_lsa_query_info_policy,  NULL, PI_LSARPC, NULL, \"Query info policy\",                    \"\" },\n \t{ \"lookupsids\",          RPC_RTYPE_NTSTATUS, cmd_lsa_lookup_sids,        NULL, PI_LSARPC, NULL, \"Convert SIDs to names\",                \"\" },\n \t{ \"lookupnames\",         RPC_RTYPE_NTSTATUS, cmd_lsa_lookup_names,       NULL, PI_LSARPC, NULL, \"Convert names to SIDs\",                \"\" },\n+\t{ \"lookupnames_level\",   RPC_RTYPE_NTSTATUS, cmd_lsa_lookup_names_level, NULL, PI_LSARPC, NULL, \"Convert names to SIDs\",                \"\" },\n \t{ \"enumtrust\", \t         RPC_RTYPE_NTSTATUS, cmd_lsa_enum_trust_dom,     NULL, PI_LSARPC, NULL, \"Enumerate trusted domains\",            \"Usage: [preferred max number] [enum context (0)]\" },\n \t{ \"enumprivs\", \t         RPC_RTYPE_NTSTATUS, cmd_lsa_enum_privilege,     NULL, PI_LSARPC, NULL, \"Enumerate privileges\",                 \"\" },\n \t{ \"getdispname\",         RPC_RTYPE_NTSTATUS, cmd_lsa_get_dispname,       NULL, PI_LSARPC, NULL, \"Get the privilege name\",               \"\" },\n\nModified: branches/SAMBA_3_0_26/source/rpcclient/cmd_lsarpc.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/rpcclient/cmd_lsarpc.c\t2007-06-27 11:42:17 UTC (rev 23627)\n+++ branches/SAMBA_3_0_26/source/rpcclient/cmd_lsarpc.c\t2007-06-27 12:27:00 UTC (rev 23628)\n@@ -262,6 +262,57 @@\n \treturn result;\n }\n \n+/* Resolve a list of names to a list of sids */\n+\n+static NTSTATUS cmd_lsa_lookup_names_level(struct rpc_pipe_client *cli, \n+\t\t\t\t\t   TALLOC_CTX *mem_ctx, int argc, \n+\t\t\t\t\t   const char **argv)\n+{\n+\tPOLICY_HND pol;\n+\tNTSTATUS result = NT_STATUS_UNSUCCESSFUL;\n+\tDOM_SID *sids;\n+\tenum lsa_SidType *types;\n+\tint i, level;\n+\n+\tif (argc < 3) {\n+\t\tprintf(\"Usage: %s [level] [name1 [name2 [...]]]\\n\", argv[0]);\n+\t\treturn NT_STATUS_OK;\n+\t}\n+\n+\tresult = rpccli_lsa_open_policy(cli, mem_ctx, True, \n+\t\t\t\t     SEC_RIGHTS_MAXIMUM_ALLOWED,\n+\t\t\t\t     &pol);\n+\n+\tif (!NT_STATUS_IS_OK(result))\n+\t\tgoto done;\n+\n+\tlevel = atoi(argv[1]);\n+\n+\tresult = rpccli_lsa_lookup_names(cli, mem_ctx, &pol, argc - 2, \n+\t\t\t\t      (const char**)(argv + 2), NULL, level, &sids, &types);\n+\n+\tif (!NT_STATUS_IS_OK(result) && NT_STATUS_V(result) != \n+\t    NT_STATUS_V(STATUS_SOME_UNMAPPED))\n+\t\tgoto done;\n+\n+\tresult = NT_STATUS_OK;\n+\n+\t/* Print results */\n+\n+\tfor (i = 0; i < (argc - 2); i++) {\n+\t\tfstring sid_str;\n+\t\tsid_to_string(sid_str, &sids[i]);\n+\t\tprintf(\"%s %s (%s: %d)\\n\", argv[i + 2], sid_str,\n+\t\t       sid_type_lookup(types[i]), types[i]);\n+\t}\n+\n+\trpccli_lsa_Close(cli, mem_ctx, &pol);\n+\n+ done:\n+\treturn result;\n+}\n+\n+\n /* Resolve a list of SIDs to a list of names */\n \n static NTSTATUS cmd_lsa_lookup_sids(struct rpc_pipe_client *cli, TALLOC_CTX *mem_ctx,\n@@ -1047,6 +1098,7 @@\n \t{ \"lsaquery\", \t         RPC_RTYPE_NTSTATUS, cmd_lsa_query_info_policy,  NULL, PI_LSARPC, NULL, \"Query info policy\",                    \"\" },\n \t{ \"lookupsids\",          RPC_RTYPE_NTSTATUS, cmd_lsa_lookup_sids,        NULL, PI_LSARPC, NULL, \"Convert SIDs to names\",                \"\" },\n \t{ \"lookupnames\",         RPC_RTYPE_NTSTATUS, cmd_lsa_lookup_names,       NULL, PI_LSARPC, NULL, \"Convert names to SIDs\",                \"\" },\n+\t{ \"lookupnames_level\",   RPC_RTYPE_NTSTATUS, cmd_lsa_lookup_names_level, NULL, PI_LSARPC, NULL, \"Convert names to SIDs\",                \"\" },\n \t{ \"enumtrust\", \t         RPC_RTYPE_NTSTATUS, cmd_lsa_enum_trust_dom,     NULL, PI_LSARPC, NULL, \"Enumerate trusted domains\",            \"Usage: [preferred max number] [enum context (0)]\" },\n \t{ \"enumprivs\", \t         RPC_RTYPE_NTSTATUS, cmd_lsa_enum_privilege,     NULL, PI_LSARPC, NULL, \"Enumerate privileges\",                 \"\" },\n \t{ \"getdispname\",         RPC_RTYPE_NTSTATUS, cmd_lsa_get_dispname,       NULL, PI_LSARPC, NULL, \"Get the privilege name\",               \"\" },\n\n"}