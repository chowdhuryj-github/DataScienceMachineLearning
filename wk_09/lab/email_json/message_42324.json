{"category": "ham", "to_address": "<r-help@stat.math.ethz.ch>", "from_address": "\"Caskenette, Amanda\" <CaskenetteA@dfo-mpo.gc.ca>", "subject": "[R] Local polynomial regression using locfit", "body": "\nI have a dataset of pregnancy values for multiple years (and ages, not\nincluded) with missing years. I would like to use local polynomial\nregression to smooth the values and estimate for the missing years. I\nwould also like to use GCV to justify the smoothing parameter selection.\n\n\nWhen using locfit() with lp() I found that the gcvplot function does not\nwork as it is looking for an alpha value to replace so I used gcv():\n\n########################################################################\n#\nlibrary(locfit)\n### approx. my data\nYear=\nc(1954,1965,1966,1967,1968,1969,1970,1978,1979,1980,1981,1982,1985,1987,\n1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2002,20\n03,2004)\nNum.sampled=\nc(3,44,9,19,19,25,13,38,15,2,4,5,3,8,6,9,7,11,11,17,16,13,6,4,10,7,9,4,3\n,4)\nNum.preg=\nc(1,5,1,4,6,4,3,23,8,1,3,2,1,3,1,1,1,2,3,2,2,6,0,0,3,0,3,1,2,1)\n\nx =  Year\ny = Num.preg/Num.sampled\n\ngcv.fit = c(0) \nb = seq(from = 0.4, to = 1, by = 0.01)\nfor(i in 1:length(b))\n{\nfit = locfit(y~lp(x, nn = b[i]))         \ngcv.fit[i] =  gcv(fit)[4]\n}\ngcv.fit = round(gcv.fit,4)\nb1 = b[min(which.min(gcv.fit))]\nfit = locfit(y~lp(x, nn = b1))\n\n## plots and predicting missing years\nxg = 1954:2004\nplot(x,y,xlab=\"Years\",ylab=\"Proportion Pregnant\",pch=16,cex=0.5)\nlines(xg,predict(fit,newdata=xg),col=4)\nx11()\nplot(b,gcv.fit) \n########################################################################\n#\n\nThis seems to work (correct me if I am wrong), however, now I am looking\nfor a way to penalise pregnancy rates that are derived from low sample\nsizes. There isn't much documentation on the arguments to lp() \nThe locfit function has the argument \"weights\", I tried this function\noutside of lp() and it had no effect.  It is not listed as an argument\nto lp()...however I tried using it as an argument and it changed the\noutput:\n\nfor(i in 1:length(b))\n{\nfit = locfit(y~lp(x, nn = b[i], weights = n))    \ngcv.fit[i] =  gcv(fit)[4]\n}\ngcv.fit = round(gcv.fit,3)\nb1 = b[min(which.min(gcv.fit))]\nfit = locfit(y~lp(x, nn = b1, weights = n))    \n\nHowever, this does not give \"pretty\" results, so I have a feeling that\nit really isn't doing what I think it is doing. (I also tried log(n)).\nCan weights be a vector? Should I be altering the sample size is some\nway? There isn't much documentation on the weights argument, can it even\nbe used within the lp()?\n\n\nThank you\nAmanda\n\n\n\t[[alternative HTML version deleted]]\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}