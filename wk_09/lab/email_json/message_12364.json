{"category": "ham", "to_address": null, "from_address": "Mark Glines <mark@glines.org>", "subject": "Re: I Don't Understand The Context Allocation/Destruction Code", "body": "On Sun, 22 Apr 2007 02:31:26 -0700\nMark Glines  wrote:\n\n> On Sat, 21 Apr 2007 18:24:18 -0700\n> chromatic  wrote:\n> > Then it calculates a slot value:\n> > \n> >     const int slot = (reg_alloc + 7) >> 3;\n> >     reg_alloc = slot << 3;\n> > \n> > This is where I start not to understand.  Why reg_alloc + 7?  Why\n> > shift left and right by 3?\n> \n> To me it looks like it's just rounding up to the next 8-byte boundary.\n\nOops, 8-slot boundary.  Whatever that means.  After that add and\nshifting stuff, slot is guaranteed to be a multiple of 8. That idiom is\npretty common for cache alignment purposes and such, but I usually see\nit being done to a pointer value, not an integer.  Well, perhaps they\nwant the pointer to be cache-aligned.\n\nAnyway, \"slot\" is guaranteed to be a multiple of 8.  But that entry\nmight not exist in the array yet, so the next if() statement checks for\nthat, and if not, does a realloc() to ensure there are now slot+1\nentries, and zeroes out the new pointers.\n\n...after that point, it gets difficult for me to understand :)\n\nMark\n\n"}