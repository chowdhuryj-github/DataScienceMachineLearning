{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"alex.jamestin+usenet@gmail.com\" <alex.jamestin@gmail.com>", "subject": "How can i make a perl program lauch another perl program that takes options", "body": "Hi all,\n\nAny help on this would be appreciated :)\n\nCurrently I have a perl program thats required to call another perl\nprogram. The second one takes arguments and can be called as:\n\n            perl vplan_all.pl 5.6 24.0 ajtest\n\nHere 5.6, 24.0 and ajtest are all command line options.\n\nI have to call this from a second program that i wrote. I tried the\ncall as below -\n\n          system( \"perl vplan_all.pl 5.6 24.0\")\n            or die \"Couldn't run the vplan_all.pl script: $!\\n\";\n\nHowever, this doesn't seem to work. The shell reports that perl can't\nfind the file. However, when i simply try with -\n\n          system( \"perl vplan_all.pl\")\n            or die \"Couldn't run the vplan_all.pl script: $!\\n\";\n\nThe script is now called and i get the result -\n\n          vp_all: USAGE: perl vplan_all.pl  \n\n\nwhich is the expected behaviour when no options are provided.\nSo apparently the shell calls perl and passes the entire \"perl\nvplan_all.pl 5.6 24.0\" as a chunk. Perl can't then seem to\ndifferentiate between the code name and the options.\n\nI've tried bypassing the shell [ system(xxx,xxx,xx)] but that doesn't\nseem to help.\n\nPlease do point out any ideas on this one.\nThx in advance!\nAlex Jamestin\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}