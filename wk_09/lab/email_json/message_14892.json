{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14379 - doc/trunk/design/syn", "body": "Author: larry\nDate: Tue Apr 24 17:02:17 2007\nNew Revision: 14379\n\nModified:\n   doc/trunk/design/syn/S13.pod\n\nLog:\nClarification suggested by TheDamian++\n\n\nModified: doc/trunk/design/syn/S13.pod\n==============================================================================\n--- doc/trunk/design/syn/S13.pod\t(original)\n+++ doc/trunk/design/syn/S13.pod\tTue Apr 24 17:02:17 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 2 Nov 2004\n-  Last Modified: 17 Feb 2007\n+  Last Modified: 24 Apr 2007\n   Number: 13\n-  Version: 7\n+  Version: 8\n \n =head1 Overview\n \n@@ -156,11 +156,26 @@\n     method @.[ *@@slices ] {...}\n     method %.{ *@@slices } {...}\n \n-The actual sigil used doesn't matter as long as it's followed by a dot\n-and the bracket pair containing the signature.  (Note that the angle\n-bracket subscripting form C<< . >> automatically translates\n-itself into a call to C< .{'a','b','c'} >, so defining methods for\n-angles is basically useless.)\n+The sigil-dot sequence in these short forms autogenerates the\n+corresponding public operators, in exactly the same way that\n+the sigil-dot in:\n+\n+    has $.action;\n+    has @.sequence;\n+    has %.mapping;\n+\n+autogenerates public accessor methods.\n+\n+And because it uses the same method-autogeneration mechanism, the\n+specific sigil used to specify a short-form postcircumfix operator\n+doesn't actually matter...as long as it's followed by a dot and the\n+bracket pair containing the signature. (Though it's probably kinder\n+to future readers of your code to stick with the \"natural\" sigil\n+for each type of bracket.)\n+\n+Note that the angle bracket subscripting form C<< . >>\n+automatically translates itself into a call to C< .{'a','b','c'} >,\n+so defining methods for angles is basically useless.\n \n The expected semantics of C<&.()> is that of a type coercion which may\n or may not create a new object.  So if you say:\n\n"}