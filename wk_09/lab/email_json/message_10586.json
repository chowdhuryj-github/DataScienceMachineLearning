{"category": "ham", "to_address": "\"John W. Krahn\" <krahnj@telus.net>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Nested loop", "body": "On 4/19/07, John W. Krahn  wrote:\n> Chas Owens wrote:\n> > Yes, foreach was aliased to for for backwards compatibility,\n>\n> Huh?  Do you have something to back up that claim?\n\nWell, perlsyn* says\n       The \"foreach\" keyword is actually a synonym for the \"for\" keyword, so\n       you can use \"foreach\" for readability or \"for\" for brevity.  (Or\n       because the Bourne shell is more familiar to you than csh, so writing\n       \"for\" comes more naturally.)\n\nBut Synopsis 4* says\n       There is no foreach statement any more. It's always spelled for\nin Perl 6,\n       so it always takes a list as an argument\n\nSo, you can either start training yourself to say for instead of\nforeach now or wait for culture shock down the road.\n\n>\n> > but, like\n> > telnet and rsh, it should not be used in new code.\n>\n> Really?  I assume you mean the protocols and not the programs?\n\nThe protocols and the programs (unless you are using the telnet\nprogram for manual testing of server protocols).\n\n>\n> >> I would myself use \"for\" for the C-style loops\n> >\n> > And this is why.  As long as people think \"well, I have foreach which\n> > is for iterating and for which is for C-style loops\" they will\n> > continue to write C-style loops.  C-style loops are bad.  They are\n> > there for backwards compatibility.  I can't think of a single for loop\n> > that isn't better written as a range based for loop or while loop. For\n> > instance\n> >\n> > standard range based loop\n> > for (my $i = 0; $i < 10; $i++) {}\n> > for my $i (0 .. 9) {}\n>\n> How about:\n>\n> for ( my $i = 0; $i < 10; $i += 3 ) {}\n>\n> foreach my $i ( ? .. ? ) {}\n\nfor my $i (0 .. 3) {\n   $i *= 3;\n}\n\nfor my $i (map { $_ * 3 } 0 .. 3) {\n        print \"$i\\n\";\n}\n\nThe bigger question is why is the end condition 10?  Did you intend to\ninclude it the list?  Are you making an off by one error?  This is why\nthe C-style for loop is bad.\n\nA better phrasing would be:\n\nmy @a = (0 .. 10);\nfor (my $i = 0; $i < @a; $i += 3) { func($a[$i])}\n\nThis is much harder to move away from the C-style for loop.  I also\ncan't think of the last time I needed to do it.\n\nHmm, the naive  implementation is not bad, it communicates the intent\na little better in my mind, but I don't like it.\n\nmy @a = (0 .. 10);\nmy $i = 0;\nfor my $elem (@a) {\n        next if $i++ % 3;\n        func($elem);\n}\n\nI think this solution communicates the intent best.\n\nmy @a = (0 .. 10);\nmy $i = 0;\nfor my $elem (grep {not $i++ % 3} @a) {\n        func($elem);\n}\n\nIn Perl 6 we will have better options.\n\nI don't like this one, it seems too kludgey\n\nfor @a -> $elem, undef, undef { func($elem) }\n\nThis one is only a little better than the Perl 5 variant\n\nfor each(@a ; 0 .. *) -> $elem, $i {\n    next if $i % 3;\n    func($elem)\n}\n\n\nOf course, there is the C-style for loop in disguise\n\nloop ($i = 0; $i < @a; $i += 3) { func($a[$i]) }\n\n\nThis looks the C-style for loop in disguise\n\nfor 0 .. $#a : by(3) -> $i { func($a[$i]) }\n\nBut with a little tweak I think it is the best of all\n\nfor @a[0 .. $#a : by(3)] -> $elem { func($elem) }\n\n>\n> > often $i winds up being used as an index which just makes me cringe.\n> >\n> > The infinite loop\n> > for (;;) {}\n> > while (1) {}\n> >\n> > The reason C programmers give for using for (;;) is that it generates\n> > less overhead on their platform, but, at least with my tests*,\n> > while(1) is more efficient in Perl.\n>\n> I ran your benchmark on my computer and for(;;) and while(1) ran at about the\n> same speed.\n\nWhich still proves the point, for(;;) is no better than while (1) for\ninfinite loops.  In my opinion while is better since I will eventually\nrealize that this should not be an infinite loop.\n\nmy $continue = 1;\n$SIG{__TERM__} = sub { $continue = 0 };\nwhile ($continue} {\n}\n\n* http://perldoc.perl.org/perlsyn.html\n* http://dev.perl.org/perl6/doc/design/syn/S04.html\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}