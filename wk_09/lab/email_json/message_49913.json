{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23537 - in branches: SAMBA_3_0/source/smbd\n\tSAMBA_3_0_26/source/smbd", "body": "Author: vlendec\nDate: 2007-06-18 09:25:31 +0000 (Mon, 18 Jun 2007)\nNew Revision: 23537\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23537\n\nLog:\nRevert the inbuf/outbuf part of r23528: This caused the Solaris CC make test\nto break. The Solaris CC put the static char InBuffer[TOTAL_BUFFER_SIZE] on an\nodd address, the malloc'ed one is always aligned. The problem showed up in\npull_ucs2, ucs2_align uses the address of InBuffer as an indication whether to\nbump up the src of the string by one. Unfortunately in the trans calls the\ndata portion is malloced and thus has different alignment guarantees than a\nstatic variable. This one is bigger....\n\nVolker\n\n\nModified:\n   branches/SAMBA_3_0/source/smbd/process.c\n   branches/SAMBA_3_0_26/source/smbd/process.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/smbd/process.c\n===================================================================\n--- branches/SAMBA_3_0/source/smbd/process.c\t2007-06-17 23:13:32 UTC (rev 23536)\n+++ branches/SAMBA_3_0/source/smbd/process.c\t2007-06-18 09:25:31 UTC (rev 23537)\n@@ -25,11 +25,10 @@\n extern struct auth_context *negprot_global_auth_context;\n extern int smb_echo_count;\n \n-#define TOTAL_BUFFER_SIZE (BUFFER_SIZE+LARGE_WRITEX_HDR_SIZE+SAFETY_MARGIN)\n+static char *InBuffer = NULL;\n+static char *OutBuffer = NULL;\n+static char *current_inbuf = NULL;\n \n-static char InBuffer[TOTAL_BUFFER_SIZE];\n-static char OutBuffer[TOTAL_BUFFER_SIZE];\n-\n /* \n  * Size of data we can send to client. Set\n  *  by the client for all protocols above CORE.\n@@ -209,11 +208,11 @@\n \n \tDEBUG(10,(\"push_deferred_open_smb_message: pushing message len %u mid %u \"\n \t\t  \"timeout time [%u.%06u]\\n\",\n-\t\t  (unsigned int) smb_len(InBuffer)+4, (unsigned int)mid,\n+\t\t  (unsigned int) smb_len(current_inbuf)+4, (unsigned int)mid,\n \t\t  (unsigned int)end_time.tv_sec,\n \t\t  (unsigned int)end_time.tv_usec));\n \n-\treturn push_queued_message(InBuffer, smb_len(InBuffer)+4,\n+\treturn push_queued_message(current_inbuf, smb_len(current_inbuf)+4,\n \t\t\t\t   request_time, end_time,\n \t\t\t\t   private_data, priv_len);\n }\n@@ -1008,6 +1007,7 @@\n \t\t\treturn(ERROR_DOS(ERRSRV,ERRaccess));\n \t\t}\n \n+\t\tcurrent_inbuf = inbuf; /* In case we need to defer this message in open... */\n \t\toutsize = smb_messages[type].fn(conn, inbuf,outbuf,size,bufsize);\n \t}\n \n@@ -1441,8 +1441,49 @@\n \treturn OutBuffer;\n }\n \n+const int total_buffer_size = (BUFFER_SIZE + LARGE_WRITEX_HDR_SIZE + SAFETY_MARGIN);\n \n /****************************************************************************\n+ Allocate a new InBuffer. Returns the new and old ones.\n+****************************************************************************/\n+\n+static char *NewInBuffer(char **old_inbuf)\n+{\n+\tchar *new_inbuf = (char *)SMB_MALLOC(total_buffer_size);\n+\tif (!new_inbuf) {\n+\t\treturn NULL;\n+\t}\n+\tif (old_inbuf) {\n+\t\t*old_inbuf = InBuffer;\n+\t}\n+\tInBuffer = new_inbuf;\n+#if defined(DEVELOPER)\n+\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE, InBuffer, total_buffer_size);\n+#endif\n+\treturn InBuffer;\n+}\n+\n+/****************************************************************************\n+ Allocate a new OutBuffer. Returns the new and old ones.\n+****************************************************************************/\n+\n+static char *NewOutBuffer(char **old_outbuf)\n+{\n+\tchar *new_outbuf = (char *)SMB_MALLOC(total_buffer_size);\n+\tif (!new_outbuf) {\n+\t\treturn NULL;\n+\t}\n+\tif (old_outbuf) {\n+\t\t*old_outbuf = OutBuffer;\n+\t}\n+\tOutBuffer = new_outbuf;\n+#if defined(DEVELOPER)\n+\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE, OutBuffer, total_buffer_size);\n+#endif\n+\treturn OutBuffer;\n+}\n+\n+/****************************************************************************\n  Process commands from the client\n ****************************************************************************/\n \n@@ -1451,6 +1492,11 @@\n \ttime_t last_timeout_processing_time = time(NULL);\n \tunsigned int num_smbs = 0;\n \n+\t/* Allocate the primary Inbut/Output buffers. */\n+\n+\tif ((NewInBuffer(NULL) == NULL) || (NewOutBuffer(NULL) == NULL)) \n+\t\treturn;\n+\n \tmax_recv = MIN(lp_maxxmit(),BUFFER_SIZE);\n \n \twhile (True) {\n@@ -1474,8 +1520,7 @@\n \t\trun_events(smbd_event_context(), 0, NULL, NULL);\n \n #if defined(DEVELOPER)\n-\t\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE,\n-\t\t\t       InBuffer, TOTAL_BUFFER_SIZE);\n+\t\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE, InBuffer, total_buffer_size);\n #endif\n \n \t\twhile (!receive_message_or_smb(InBuffer,BUFFER_SIZE+LARGE_WRITEX_HDR_SIZE,select_timeout)) {\n@@ -1496,8 +1541,7 @@\n \t\t */ \n \t\tnum_echos = smb_echo_count;\n \n-\t\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE,\n-\t\t\t       OutBuffer, TOTAL_BUFFER_SIZE);\n+\t\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE, OutBuffer, total_buffer_size);\n \n \t\tprocess_smb(InBuffer, OutBuffer);\n \n\nModified: branches/SAMBA_3_0_26/source/smbd/process.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/smbd/process.c\t2007-06-17 23:13:32 UTC (rev 23536)\n+++ branches/SAMBA_3_0_26/source/smbd/process.c\t2007-06-18 09:25:31 UTC (rev 23537)\n@@ -26,11 +26,10 @@\n extern struct auth_context *negprot_global_auth_context;\n extern int smb_echo_count;\n \n-#define TOTAL_BUFFER_SIZE (BUFFER_SIZE+LARGE_WRITEX_HDR_SIZE+SAFETY_MARGIN)\n+static char *InBuffer = NULL;\n+static char *OutBuffer = NULL;\n+static char *current_inbuf = NULL;\n \n-static char InBuffer[TOTAL_BUFFER_SIZE];\n-static char OutBuffer[TOTAL_BUFFER_SIZE];\n-\n /* \n  * Size of data we can send to client. Set\n  *  by the client for all protocols above CORE.\n@@ -210,11 +209,11 @@\n \n \tDEBUG(10,(\"push_deferred_open_smb_message: pushing message len %u mid %u \"\n \t\t  \"timeout time [%u.%06u]\\n\",\n-\t\t  (unsigned int) smb_len(InBuffer)+4, (unsigned int)mid,\n+\t\t  (unsigned int) smb_len(current_inbuf)+4, (unsigned int)mid,\n \t\t  (unsigned int)end_time.tv_sec,\n \t\t  (unsigned int)end_time.tv_usec));\n \n-\treturn push_queued_message(InBuffer, smb_len(InBuffer)+4,\n+\treturn push_queued_message(current_inbuf, smb_len(current_inbuf)+4,\n \t\t\t\t   request_time, end_time,\n \t\t\t\t   private_data, priv_len);\n }\n@@ -1000,6 +999,7 @@\n \t\t\treturn(ERROR_DOS(ERRSRV,ERRaccess));\n \t\t}\n \n+\t\tcurrent_inbuf = inbuf; /* In case we need to defer this message in open... */\n \t\toutsize = smb_messages[type].fn(conn, inbuf,outbuf,size,bufsize);\n \t}\n \n@@ -1484,8 +1484,49 @@\n \treturn OutBuffer;\n }\n \n+const int total_buffer_size = (BUFFER_SIZE + LARGE_WRITEX_HDR_SIZE + SAFETY_MARGIN);\n \n /****************************************************************************\n+ Allocate a new InBuffer. Returns the new and old ones.\n+****************************************************************************/\n+\n+static char *NewInBuffer(char **old_inbuf)\n+{\n+\tchar *new_inbuf = (char *)SMB_MALLOC(total_buffer_size);\n+\tif (!new_inbuf) {\n+\t\treturn NULL;\n+\t}\n+\tif (old_inbuf) {\n+\t\t*old_inbuf = InBuffer;\n+\t}\n+\tInBuffer = new_inbuf;\n+#if defined(DEVELOPER)\n+\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE, InBuffer, total_buffer_size);\n+#endif\n+\treturn InBuffer;\n+}\n+\n+/****************************************************************************\n+ Allocate a new OutBuffer. Returns the new and old ones.\n+****************************************************************************/\n+\n+static char *NewOutBuffer(char **old_outbuf)\n+{\n+\tchar *new_outbuf = (char *)SMB_MALLOC(total_buffer_size);\n+\tif (!new_outbuf) {\n+\t\treturn NULL;\n+\t}\n+\tif (old_outbuf) {\n+\t\t*old_outbuf = OutBuffer;\n+\t}\n+\tOutBuffer = new_outbuf;\n+#if defined(DEVELOPER)\n+\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE, OutBuffer, total_buffer_size);\n+#endif\n+\treturn OutBuffer;\n+}\n+\n+/****************************************************************************\n  Process commands from the client\n ****************************************************************************/\n \n@@ -1494,6 +1535,11 @@\n \ttime_t last_timeout_processing_time = time(NULL);\n \tunsigned int num_smbs = 0;\n \n+\t/* Allocate the primary Inbut/Output buffers. */\n+\n+\tif ((NewInBuffer(NULL) == NULL) || (NewOutBuffer(NULL) == NULL)) \n+\t\treturn;\n+\n \tmax_recv = MIN(lp_maxxmit(),BUFFER_SIZE);\n \n \twhile (True) {\n@@ -1520,8 +1566,7 @@\n \t\trun_events(smbd_event_context(), 0, NULL, NULL);\n \n #if defined(DEVELOPER)\n-\t\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE,\n-\t\t\t       InBuffer, TOTAL_BUFFER_SIZE);\n+\t\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE, InBuffer, total_buffer_size);\n #endif\n \n \t\twhile (!receive_message_or_smb(InBuffer,BUFFER_SIZE+LARGE_WRITEX_HDR_SIZE,select_timeout)) {\n@@ -1541,8 +1586,7 @@\n \t\t */ \n \t\tnum_echos = smb_echo_count;\n \n-\t\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE,\n-\t\t\t       OutBuffer, TOTAL_BUFFER_SIZE);\n+\t\tclobber_region(SAFE_STRING_FUNCTION_NAME, SAFE_STRING_LINE, OutBuffer, total_buffer_size);\n \n \t\tprocess_smb(InBuffer, OutBuffer);\n \n\n"}