{"category": "ham", "to_address": "Darren Duncan <darren@DarrenDuncan.net>", "from_address": "Austin Hastings <Austin_Hastings@Yahoo.com>", "subject": "Re: protecting internals from mutable arguments", "body": "Darren Duncan wrote:\n>\n> Larry had some ideas for dealing with the problem, but this is a \n> matter that should be more widely discussed, particularly among \n> implementers and such.\n>\n> A general thought is that a parameter could be marked so that any \n> argument passed through it is effectively snapshot (which is a no-op \n> if the type is already immutable, or it is likely lazy/COW if it is \n> mutable) so further changes to the external version do indeed not \n> affect our internal copy.\n\n\nIs the class underlying the type immutable? Could I change the \nmutability of the type after the fact? (Really?)\n\n>\n> Such as this could solve the problem in the general case.\n>\n> (However, I should mention in postscript that there may be a \n> complicating factor which concerns immutable objects which are also \n> lazy to an extent, eg that may internally cache derived values, such \n> as their .WHICH, when the derived is first asked for rather than at \n> construction time, though this doesn't affect their actual value, \n> which stays immutable.  We wouldn't want to lose that ability.)\n>\n> Um, yes, so thank you all who assist in solving this problem.\n>\n\nSome sugar like \"is frozen\" on parameters?\n\nAlternatively, \"$new = snapshot $old\" is interesting since it could be \nexplicitly optimized for performance.\n\nBut your earlier question is a good one. How much can you depend on the \n(im)mutability info the compiler has? What about runtime?\n\nOn the other hand, how much of this is really needed? In other words, to \nwhat extent are people passing objects that they WANT to be volatile, \nversus the extent to which they are passing objects where volatility \nwould be fatal? Should \"is frozen\" be the default behavior, with \nauto-cow part of the entry code unless overridden? Or is volatility a \nmore useful norm, so that requiring a statement inside the block is the \nright \"awareness\" for something so weird?\n\n\n=Austin\n\n"}