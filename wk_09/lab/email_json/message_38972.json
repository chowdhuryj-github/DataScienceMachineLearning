{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: zero width lookahead match", "body": "Sharan Basappa wrote:\n>\n> Hi All,\n> \n> I have some background working with scanners built from Flex. And I have\n> used lookahead capability of flex many a times. But I dont understand the\n> meaning of ZERO in zero lookahead match rule i.e. (?=pattern)\n> \n> For example, to capture overlapping 3 digit patterns from string $str =\n> 123456\n> I use the regex @store = $str =~ m/(?=(\\d\\d\\d))/g;\n> So here the regex engine actually looks ahead by chars digits.\n\nAs far as lookahead expressions are concerned, Perl functions identically to\nFlex. It is called zero-width lookahead because it matches a zero-width\n/position/ in the string instead of a sequence of characters. If I write\n\n'123456' =~ /\\d\\d\\d(...)/\n\nthen '456' will be captured as the first three characters were consumed by the\npreceding pattern. However if I write\n\n'123456' =~ /(?=\\d\\d\\d)(...)/\n\nthen '123' will be captured instead because the lookahead pattern has zero width.\n\n> The other question I have is - how does regex engine decide that it has to\n> move further its scanner by 1 character everytime since I get output 123 \n> 234\n> 345 456\n> when I run this script ?\n\nThe engine moves as far through your target string as it needs to to find a new\nmatch. If I write\n\n'1B3D5F' =~ /(?=(.\\d.))/g;\n\nthen the engine will find a match at only every second character, and if I use\na much simpler zero-width match, just\n\n'ABCDEF' =~ //g\n\nthen the regex will match seven times - at the beginning and end and between\nevery pair of characters - so the more complex zero-width match you have written\nwill match at all of the those places as long as there are three digits following.\n\nHTH,\n\nRob\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}