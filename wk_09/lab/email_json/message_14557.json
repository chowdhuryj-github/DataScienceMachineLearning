{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11993: Some more changes to the python build,\n\tadd bzrignore. in file:///home/jelmer/bzr.samba/python/", "body": "At file:///home/jelmer/bzr.samba/python/\n\n------------------------------------------------------------\nrevno: 11993\nrevision-id: jelmer@samba.org-20070423170515-xp817fo3ft73qhe8\nparent: jelmer@samba.org-20070423154116-7kh99mw6jnnk16e9\ncommitter: Jelmer Vernooij \nbranch nick: python\ntimestamp: Mon 2007-04-23 19:05:15 +0200\nmessage:\n  Some more changes to the python build, add bzrignore.\nadded:\n  source/lib/python/pyconfig.h   pyconfig.h-20070423170404-kdpuudzcur4d2s4j-1\nmodified:\n  .bzrignore                     svn-v2:17811@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-.bzrignore\n  source/lib/python/config.m4    configure.in-20070423105804-3mrp9flhlt8pjj8v-11\n=== added file 'source/lib/python/pyconfig.h'\n--- a/source/lib/python/pyconfig.h\t1970-01-01 00:00:00 +0000\n+++ b/source/lib/python/pyconfig.h\t2007-04-23 17:05:15 +0000\n@@ -0,0 +1,1 @@\n+#include \"config.h\"\n\n=== modified file '.bzrignore'\n--- a/.bzrignore\t2007-03-13 21:00:27 +0000\n+++ b/.bzrignore\t2007-04-23 17:05:15 +0000\n@@ -171,3 +171,8 @@\n source/bin/modules/*\n source/tests\n source/torture/unix/proto.h\n+source/lib/python/Modules/config.c\n+source/lib/python/Modules/Setup.local\n+source/lib/python/Modules/Setup.local\n+source/lib/python/Modules/Setup\n+source/lib/python/Modules/Setup.config\n\n=== modified file 'source/lib/python/config.m4'\n--- a/source/lib/python/config.m4\t2007-04-23 15:41:16 +0000\n+++ b/source/lib/python/config.m4\t2007-04-23 17:05:15 +0000\n@@ -178,122 +178,6 @@\n CONFIGURE_MACOSX_DEPLOYMENT_TARGET=\n EXPORT_MACOSX_DEPLOYMENT_TARGET='#'\n \n-# checks for alternative programs\n-\n-# compiler flags are generated in two sets, BASECFLAGS and OPT.  OPT is just\n-# for debug/optimization stuff.  BASECFLAGS is for flags that are required\n-# just to get things to compile and link.  Users are free to override OPT\n-# when running configure or make.  The build should not break if they do.\n-# BASECFLAGS should generally not be messed with, however.\n-\n-# XXX shouldn't some/most/all of this code be merged with the stuff later\n-# on that fiddles with OPT and BASECFLAGS?\n-AC_MSG_CHECKING(for --without-gcc)\n-AC_ARG_WITH(gcc,\n-            AC_HELP_STRING(--without-gcc,never use gcc),\n-[\n-\tcase $withval in\n-\tno)\tCC=cc\n-\t\twithout_gcc=yes;;\n-\tyes)\tCC=gcc\n-\t\twithout_gcc=no;;\n-\t*)\tCC=$withval\n-\t\twithout_gcc=$withval;;\n-\tesac], [\n-\tcase $ac_sys_system in\n-\tAIX*)   CC=cc_r\n-\t\twithout_gcc=;;\n-\tBeOS*)\n-\t\tcase $BE_HOST_CPU in\n-\t\tppc)\n-\t\t\tCC=mwcc\n-\t\t\twithout_gcc=yes\n-\t\t\tBASECFLAGS=\"$BASECFLAGS -export pragma\"\n-\t\t\tOPT=\"$OPT -O\"\n-\t\t\tLDFLAGS=\"$LDFLAGS -nodup\"\n-\t\t\t;;\n-\t\tx86)\n-\t\t\tCC=gcc\n-\t\t\twithout_gcc=no\n-\t\t\tOPT=\"$OPT -O\"\n-\t\t\t;;\n-\t\t*)\n-\t\t\tAC_MSG_ERROR([Unknown BeOS platform \"$BE_HOST_CPU\"])\n-\t\t\t;;\n-\t\tesac\n-\t\tAR=\"\\$(srcdir)/lib/python/Modules/ar_beos\"\n-\t\tRANLIB=:\n-\t\t;;\n-    Monterey*)\n-        RANLIB=:\n-        without_gcc=;;\n-\t*)\twithout_gcc=no;;\n-\tesac])\n-AC_MSG_RESULT($without_gcc)\n-\n-# If the user switches compilers, we can't believe the cache\n-if test ! -z \"$ac_cv_prog_CC\" -a ! -z \"$CC\" -a \"$CC\" != \"$ac_cv_prog_CC\"\n-then\n-  AC_MSG_ERROR([cached CC is different -- throw away $cache_file\n-(it is also a good idea to do 'make clean' before compiling)])\n-fi\n-\n-AC_PROG_CC\n-\n-AC_SUBST(CXX)\n-AC_SUBST(MAINCC)\n-AC_MSG_CHECKING(for --with-cxx-main=)\n-AC_ARG_WITH(cxx_main,\n-            AC_HELP_STRING([--with-cxx-main=],\n-                           [compile main() and link python executable with C++ compiler]),\n-[\n-\t\n-\tcase $withval in\n-\tno)\twith_cxx_main=no\n-\t\tMAINCC='$(CC)';;\n-\tyes)\twith_cxx_main=yes\n-\t\tMAINCC='$(CXX)';;\n-\t*)\twith_cxx_main=yes\n-\t\tMAINCC=$withval\n-\t\tif test -z \"$CXX\"\n-\t\tthen\n-\t\t\tCXX=$withval\n-\t\tfi;;\n-\tesac], [\n-\twith_cxx_main=no\n-\tMAINCC='$(CC)'\n-])\n-AC_MSG_RESULT($with_cxx_main)\n-\n-preset_cxx=\"$CXX\"\n-if test -z \"$CXX\"\n-then\n-        case \"$CC\" in\n-        gcc)    AC_PATH_PROG(CXX, [g++], [g++], [notfound]) ;;\n-        cc)     AC_PATH_PROG(CXX, [c++], [c++], [notfound]) ;;\n-        esac\n-\tif test \"$CXX\" = \"notfound\"\n-\tthen\n-\t\tCXX=\"\"\n-\tfi\n-fi\n-if test -z \"$CXX\"\n-then\n-\tAC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++ cl, notfound)\n-\tif test \"$CXX\" = \"notfound\"\n-\tthen\n-\t\tCXX=\"\"\n-\tfi\n-fi\n-if test \"$preset_cxx\" != \"$CXX\"\n-then\n-        AC_MSG_WARN([\n-\n-  By default, distutils will build C++ extension modules with \"$CXX\".\n-  If this is not intended, then set CXX on the configure command line.\n-  ])\n-fi\n-\n # Check for unsupported systems\n case $ac_sys_system/$ac_sys_release in\n Linux*/1*)\n@@ -325,14 +209,6 @@\n esac\n \n \n-AC_SUBST(LIBRARY)\n-AC_MSG_CHECKING(LIBRARY)\n-if test -z \"$LIBRARY\"\n-then\n-\tLIBRARY='libpython$(VERSION).a'\n-fi\n-AC_MSG_RESULT($LIBRARY)\n-\n # LDLIBRARY is the name of the library to link against (as opposed to the\n # name of the library into which to insert object files). BLDLIBRARY is also\n # the library to link against, usually. On Mac OS X frameworks, BLDLIBRARY\n@@ -359,50 +235,8 @@\n LDLIBRARYDIR=''\n RUNSHARED=''\n \n-# LINKCC is the command that links the python executable -- default is $(CC).\n-# If CXX is set, and if it is needed to link a main function that was\n-# compiled with CXX, LINKCC is CXX instead. Always using CXX is undesirable:\n-# python might then depend on the C++ runtime\n-# This is altered for AIX in order to build the export list before \n-# linking.\n-AC_SUBST(LINKCC)\n-AC_MSG_CHECKING(LINKCC)\n-if test -z \"$LINKCC\"\n-then\n-\tLINKCC='$(PURIFY) $(MAINCC)'\n-\tcase $ac_sys_system in\n-\tAIX*)\n-\t   exp_extra=\"\\\"\\\"\"\n-\t   if test $ac_sys_release -ge 5 -o \\\n-\t\t   $ac_sys_release -eq 4 -a `uname -r` -ge 2 ; then\n-\t       exp_extra=\".\"\n-\t   fi\n-\t   LINKCC=\"\\$(srcdir)/lib/python/Modules/makexp_aix lib/python/Modules/python.exp $exp_extra \\$(LIBRARY); $LINKCC\";;\n-\tMonterey64*)\n-\t   LINKCC=\"$LINKCC -L/usr/lib/ia64l64\";;\n-\tesac\n-fi\n-AC_MSG_RESULT($LINKCC)\n-\n-enable_shared=\"yes\"\n-\n AC_MSG_CHECKING(LDLIBRARY)\n \n-# MacOSX framework builds need more magic. LDLIBRARY is the dynamic\n-# library that we build, but we do not want to link against it (we\n-# will find it with a -framework option). For this reason there is an\n-# extra variable BLDLIBRARY against which Python and the extension\n-# modules are linked, BLDLIBRARY. This is normally the same as\n-# LDLIBRARY, but empty for MacOSX framework builds.\n-if test \"$enable_framework\"\n-then\n-  LDLIBRARY='$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'\n-  RUNSHARED=DYLD_FRAMEWORK_PATH=\"`pwd`:$DYLD_FRAMEWORK_PATH\"\n-  BLDLIBRARY=''\n-else\n-  BLDLIBRARY='$(LDLIBRARY)'\n-fi  \n-\n # Other platforms follow\n if test $enable_shared = \"yes\"; then\n   AC_DEFINE(Py_ENABLE_SHARED, 1, [Defined if Python is built as a shared library.])\n@@ -469,15 +303,6 @@\n AC_SUBST(AR)\n AC_CHECK_PROGS(AR, ar aal, ar)\n \n-AC_SUBST(SVNVERSION)\n-AC_CHECK_PROG(SVNVERSION, svnversion, found, not-found)\n-if test $SVNVERSION = found\n-then\n-\tSVNVERSION=\"svnversion \\$(srcdir)\"\n-else\n-\tSVNVERSION=\"echo exported\"\n-fi\n-\n case $MACHDEP in\n bsdos*|hp*|HP*)\n \t# install -d does not work on BSDI or HP-UX\n\n"}