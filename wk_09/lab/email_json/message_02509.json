{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jerry@samba.org", "subject": "svn commit: samba r22173 - in branches: SAMBA_3_0/source/nsswitch\n\tSAMBA_3_0_25/source/nsswitch", "body": "Author: jerry\nDate: 2007-04-11 12:32:58 +0000 (Wed, 11 Apr 2007)\nNew Revision: 22173\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22173\n\nLog:\nBUG 4491, 4501: Additional fixes for protecting against \ncrashes in allocate_id().  \n\nBUG 4501: Fix segv in idmap_ad caused by resetting the\nentry iterator when parsing search results.\n\n\nModified:\n   branches/SAMBA_3_0/source/nsswitch/idmap.c\n   branches/SAMBA_3_0/source/nsswitch/idmap_ad.c\n   branches/SAMBA_3_0_25/source/nsswitch/idmap.c\n   branches/SAMBA_3_0_25/source/nsswitch/idmap_ad.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/nsswitch/idmap.c\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/idmap.c\t2007-04-11 12:32:07 UTC (rev 22172)\n+++ branches/SAMBA_3_0/source/nsswitch/idmap.c\t2007-04-11 12:32:58 UTC (rev 22173)\n@@ -578,32 +578,32 @@\n \n \tif ( alloc_backend ) {\n \n-\talloc_methods = get_alloc_methods(alloc_backends, alloc_backend);\n-\tif ( ! alloc_methods) {\n-\t\tret = smb_probe_module(\"idmap\", alloc_backend);\n-\t\tif (NT_STATUS_IS_OK(ret)) {\n-\t\t\talloc_methods = get_alloc_methods(alloc_backends, alloc_backend);\n+\t\talloc_methods = get_alloc_methods(alloc_backends, alloc_backend);\n+\t\tif ( ! alloc_methods) {\n+\t\t\tret = smb_probe_module(\"idmap\", alloc_backend);\n+\t\t\tif (NT_STATUS_IS_OK(ret)) {\n+\t\t\t\talloc_methods = get_alloc_methods(alloc_backends, alloc_backend);\n+\t\t\t}\n \t\t}\n-\t}\n-\tif ( alloc_methods) {\n-\t\tret = alloc_methods->init(compat_params);\n-\t\tif ( ! NT_STATUS_IS_OK(ret)) {\n-\t\t\tDEBUG(0, (\"idmap_init: Initialization failed for alloc \"\n-\t\t\t\t  \"backend %s\\n\", alloc_backend));\n-\t\t\tret = NT_STATUS_UNSUCCESSFUL;\n-\t\t\tgoto done;\n+\t\tif ( alloc_methods) {\n+\t\t\tret = alloc_methods->init(compat_params);\n+\t\t\tif ( ! NT_STATUS_IS_OK(ret)) {\n+\t\t\t\tDEBUG(0, (\"idmap_init: Initialization failed for alloc \"\n+\t\t\t\t\t  \"backend %s\\n\", alloc_backend));\n+\t\t\t\tret = NT_STATUS_UNSUCCESSFUL;\n+\t\t\t\tgoto done;\n \t\t}\n-\t} else {\n-\t\tDEBUG(2, (\"idmap_init: Unable to get methods for alloc backend %s\\n\", \n-\t\t\t  alloc_backend));\n-\t\t/* certain compat backends are just readonly */\n-\t\tif ( compat )\n-\t\t\tret = NT_STATUS_OK;\n-\t\telse\n-\t\t\tret = NT_STATUS_UNSUCCESSFUL;\n+\t\t} else {\n+\t\t\tDEBUG(2, (\"idmap_init: Unable to get methods for alloc backend %s\\n\", \n+\t\t\t\t  alloc_backend));\n+\t\t\t/* certain compat backends are just readonly */\n+\t\t\tif ( compat )\n+\t\t\t\tret = NT_STATUS_OK;\n+\t\t\telse\n+\t\t\t\tret = NT_STATUS_UNSUCCESSFUL;\n+\t\t}\n \t}\n-\t}\n-\n+\t\n \t/* cleanpu temporary strings */\n \tTALLOC_FREE( compat_backend );\n \t\n@@ -633,6 +633,9 @@\n \t\treturn ret;\n \t}\n \n+\tif ( !alloc_methods )\n+\t\treturn NT_STATUS_NOT_SUPPORTED;\t\n+\n \tid->type = ID_TYPE_UID;\n \treturn alloc_methods->allocate_id(id);\n }\n@@ -645,6 +648,9 @@\n \t\treturn ret;\n \t}\n \n+\tif ( !alloc_methods )\n+\t\treturn NT_STATUS_NOT_SUPPORTED;\t\n+\n \tid->type = ID_TYPE_GID;\n \treturn alloc_methods->allocate_id(id);\n }\n@@ -657,6 +663,9 @@\n \t\treturn ret;\n \t}\n \n+\tif ( !alloc_methods )\n+\t\treturn NT_STATUS_NOT_SUPPORTED;\t\n+\n \tid->type = ID_TYPE_UID;\n \treturn alloc_methods->set_id_hwm(id);\n }\n@@ -669,6 +678,9 @@\n \t\treturn ret;\n \t}\n \n+\tif ( !alloc_methods )\n+\t\treturn NT_STATUS_NOT_SUPPORTED;\t\n+\n \tid->type = ID_TYPE_GID;\n \treturn alloc_methods->set_id_hwm(id);\n }\n@@ -1321,16 +1333,18 @@\n \t\treturn;\n \t}\n \n-\tallid.type = ID_TYPE_UID;\n-\tallid.id = 0;\n-\talloc_methods->get_id_hwm(&allid);\n-\tfprintf(dump, \"USER HWM %lu\\n\", (unsigned long)allid.id);\n-\n-\tallid.type = ID_TYPE_GID;\n-\tallid.id = 0;\n-\talloc_methods->get_id_hwm(&allid);\n-\tfprintf(dump, \"GROUP HWM %lu\\n\", (unsigned long)allid.id);\n-\n+\tif ( alloc_methods ) {\t\t\n+\t\tallid.type = ID_TYPE_UID;\n+\t\tallid.id = 0;\n+\t\talloc_methods->get_id_hwm(&allid);\n+\t\tfprintf(dump, \"USER HWM %lu\\n\", (unsigned long)allid.id);\n+\t\t\n+\t\tallid.type = ID_TYPE_GID;\n+\t\tallid.id = 0;\n+\t\talloc_methods->get_id_hwm(&allid);\n+\t\tfprintf(dump, \"GROUP HWM %lu\\n\", (unsigned long)allid.id);\n+\t}\n+\t\n \tmaps = talloc(idmap_ctx, struct id_map);\n \tnum_maps = 0;\n \n\nModified: branches/SAMBA_3_0/source/nsswitch/idmap_ad.c\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/idmap_ad.c\t2007-04-11 12:32:07 UTC (rev 22172)\n+++ branches/SAMBA_3_0/source/nsswitch/idmap_ad.c\t2007-04-11 12:32:58 UTC (rev 22173)\n@@ -166,7 +166,6 @@\n \tchar *config_option;\n \tconst char *range = NULL;\n \tconst char *schema_mode = NULL;\t\n-\tADS_STRUCT *ads;\n \n \tif ( (ctx = talloc_zero(dom, struct idmap_ad_context)) == NULL ) {\n \t\tDEBUG(0, (\"Out of memory!\\n\"));\n@@ -261,6 +260,7 @@\n \t\t\t\tNULL, /* gidnumber */\n \t\t\t\tNULL };\n \tLDAPMessage *res = NULL;\n+\tLDAPMessage *entry = NULL;\n \tchar *filter = NULL;\n \tint idx = 0;\n \tint bidx = 0;\n@@ -339,7 +339,7 @@\n \t}\n \tfilter = talloc_asprintf_append(filter, \")\");\n \tCHECK_ALLOC_DONE(filter);\n-\tDEBUG(10, (\"Filter: [%s]\\n\", filter));\n+\n \trc = ads_search_retry(ads, &res, filter, attrs);\n \tif (!ADS_ERR_OK(rc)) {\n \t\tDEBUG(1, (\"ERROR: ads search returned: %s\\n\", ads_errstr(rc)));\n@@ -351,8 +351,8 @@\n \t\tDEBUG(10, (\"No IDs found\\n\"));\n \t}\n \n-\tfor (i = 0; i < count; i++) {\n-\t\tLDAPMessage *entry = NULL;\n+\tentry = res;\n+\tfor (i = 0; (i < count) && entry; i++) {\n \t\tDOM_SID sid;\n \t\tenum id_type type;\n \t\tstruct id_map *map;\n@@ -360,13 +360,14 @@\n \t\tuint32_t atype;\n \n \t\tif (i == 0) { /* first entry */\n-\t\t\tentry = ads_first_entry(ads, res);\n+\t\t\tentry = ads_first_entry(ads, entry);\n \t\t} else { /* following ones */\n \t\t\tentry = ads_next_entry(ads, entry);\n \t\t}\n-\t\tif ( ! entry) {\n+\n+\t\tif ( !entry ) {\n \t\t\tDEBUG(2, (\"ERROR: Unable to fetch ldap entries from results\\n\"));\n-\t\t\tcontinue;\n+\t\t\tbreak;\n \t\t}\n \n \t\t/* first check if the SID is present */\n@@ -467,6 +468,7 @@\n \t\t\t\tNULL, /* attr_gidnumber */\n \t\t\t\tNULL };\n \tLDAPMessage *res = NULL;\n+\tLDAPMessage *entry = NULL;\n \tchar *filter = NULL;\n \tint idx = 0;\n \tint bidx = 0;\n@@ -524,8 +526,8 @@\n \t\tDEBUG(10, (\"No IDs found\\n\"));\n \t}\n \n-\tfor (i = 0; i < count; i++) {\n-\t\tLDAPMessage *entry = NULL;\n+\tentry = res;\t\n+\tfor (i = 0; (i < count) && entry; i++) {\n \t\tDOM_SID sid;\n \t\tenum id_type type;\n \t\tstruct id_map *map;\n@@ -533,13 +535,14 @@\n \t\tuint32_t atype;\n \n \t\tif (i == 0) { /* first entry */\n-\t\t\tentry = ads_first_entry(ads, res);\n+\t\t\tentry = ads_first_entry(ads, entry);\n \t\t} else { /* following ones */\n \t\t\tentry = ads_next_entry(ads, entry);\n \t\t}\n-\t\tif ( ! entry) {\n+\n+\t\tif ( !entry ) {\n \t\t\tDEBUG(2, (\"ERROR: Unable to fetch ldap entries from results\\n\"));\n-\t\t\tcontinue;\n+\t\t\tbreak;\n \t\t}\n \n \t\t/* first check if the SID is present */\n\nModified: branches/SAMBA_3_0_25/source/nsswitch/idmap.c\n===================================================================\n--- branches/SAMBA_3_0_25/source/nsswitch/idmap.c\t2007-04-11 12:32:07 UTC (rev 22172)\n+++ branches/SAMBA_3_0_25/source/nsswitch/idmap.c\t2007-04-11 12:32:58 UTC (rev 22173)\n@@ -578,32 +578,32 @@\n \n \tif ( alloc_backend ) {\n \n-\talloc_methods = get_alloc_methods(alloc_backends, alloc_backend);\n-\tif ( ! alloc_methods) {\n-\t\tret = smb_probe_module(\"idmap\", alloc_backend);\n-\t\tif (NT_STATUS_IS_OK(ret)) {\n-\t\t\talloc_methods = get_alloc_methods(alloc_backends, alloc_backend);\n+\t\talloc_methods = get_alloc_methods(alloc_backends, alloc_backend);\n+\t\tif ( ! alloc_methods) {\n+\t\t\tret = smb_probe_module(\"idmap\", alloc_backend);\n+\t\t\tif (NT_STATUS_IS_OK(ret)) {\n+\t\t\t\talloc_methods = get_alloc_methods(alloc_backends, alloc_backend);\n+\t\t\t}\n \t\t}\n-\t}\n-\tif ( alloc_methods) {\n-\t\tret = alloc_methods->init(compat_params);\n-\t\tif ( ! NT_STATUS_IS_OK(ret)) {\n-\t\t\tDEBUG(0, (\"idmap_init: Initialization failed for alloc \"\n-\t\t\t\t  \"backend %s\\n\", alloc_backend));\n-\t\t\tret = NT_STATUS_UNSUCCESSFUL;\n-\t\t\tgoto done;\n+\t\tif ( alloc_methods) {\n+\t\t\tret = alloc_methods->init(compat_params);\n+\t\t\tif ( ! NT_STATUS_IS_OK(ret)) {\n+\t\t\t\tDEBUG(0, (\"idmap_init: Initialization failed for alloc \"\n+\t\t\t\t\t  \"backend %s\\n\", alloc_backend));\n+\t\t\t\tret = NT_STATUS_UNSUCCESSFUL;\n+\t\t\t\tgoto done;\n \t\t}\n-\t} else {\n-\t\tDEBUG(2, (\"idmap_init: Unable to get methods for alloc backend %s\\n\", \n-\t\t\t  alloc_backend));\n-\t\t/* certain compat backends are just readonly */\n-\t\tif ( compat )\n-\t\t\tret = NT_STATUS_OK;\n-\t\telse\n-\t\t\tret = NT_STATUS_UNSUCCESSFUL;\n+\t\t} else {\n+\t\t\tDEBUG(2, (\"idmap_init: Unable to get methods for alloc backend %s\\n\", \n+\t\t\t\t  alloc_backend));\n+\t\t\t/* certain compat backends are just readonly */\n+\t\t\tif ( compat )\n+\t\t\t\tret = NT_STATUS_OK;\n+\t\t\telse\n+\t\t\t\tret = NT_STATUS_UNSUCCESSFUL;\n+\t\t}\n \t}\n-\t}\n-\n+\t\n \t/* cleanpu temporary strings */\n \tTALLOC_FREE( compat_backend );\n \t\n@@ -633,6 +633,9 @@\n \t\treturn ret;\n \t}\n \n+\tif ( !alloc_methods )\n+\t\treturn NT_STATUS_NOT_SUPPORTED;\t\n+\n \tid->type = ID_TYPE_UID;\n \treturn alloc_methods->allocate_id(id);\n }\n@@ -645,6 +648,9 @@\n \t\treturn ret;\n \t}\n \n+\tif ( !alloc_methods )\n+\t\treturn NT_STATUS_NOT_SUPPORTED;\t\n+\n \tid->type = ID_TYPE_GID;\n \treturn alloc_methods->allocate_id(id);\n }\n@@ -657,6 +663,9 @@\n \t\treturn ret;\n \t}\n \n+\tif ( !alloc_methods )\n+\t\treturn NT_STATUS_NOT_SUPPORTED;\t\n+\n \tid->type = ID_TYPE_UID;\n \treturn alloc_methods->set_id_hwm(id);\n }\n@@ -669,6 +678,9 @@\n \t\treturn ret;\n \t}\n \n+\tif ( !alloc_methods )\n+\t\treturn NT_STATUS_NOT_SUPPORTED;\t\n+\n \tid->type = ID_TYPE_GID;\n \treturn alloc_methods->set_id_hwm(id);\n }\n@@ -1321,16 +1333,18 @@\n \t\treturn;\n \t}\n \n-\tallid.type = ID_TYPE_UID;\n-\tallid.id = 0;\n-\talloc_methods->get_id_hwm(&allid);\n-\tfprintf(dump, \"USER HWM %lu\\n\", (unsigned long)allid.id);\n-\n-\tallid.type = ID_TYPE_GID;\n-\tallid.id = 0;\n-\talloc_methods->get_id_hwm(&allid);\n-\tfprintf(dump, \"GROUP HWM %lu\\n\", (unsigned long)allid.id);\n-\n+\tif ( alloc_methods ) {\t\t\n+\t\tallid.type = ID_TYPE_UID;\n+\t\tallid.id = 0;\n+\t\talloc_methods->get_id_hwm(&allid);\n+\t\tfprintf(dump, \"USER HWM %lu\\n\", (unsigned long)allid.id);\n+\t\t\n+\t\tallid.type = ID_TYPE_GID;\n+\t\tallid.id = 0;\n+\t\talloc_methods->get_id_hwm(&allid);\n+\t\tfprintf(dump, \"GROUP HWM %lu\\n\", (unsigned long)allid.id);\n+\t}\n+\t\n \tmaps = talloc(idmap_ctx, struct id_map);\n \tnum_maps = 0;\n \n\nModified: branches/SAMBA_3_0_25/source/nsswitch/idmap_ad.c\n===================================================================\n--- branches/SAMBA_3_0_25/source/nsswitch/idmap_ad.c\t2007-04-11 12:32:07 UTC (rev 22172)\n+++ branches/SAMBA_3_0_25/source/nsswitch/idmap_ad.c\t2007-04-11 12:32:58 UTC (rev 22173)\n@@ -166,7 +166,6 @@\n \tchar *config_option;\n \tconst char *range = NULL;\n \tconst char *schema_mode = NULL;\t\n-\tADS_STRUCT *ads;\n \n \tif ( (ctx = talloc_zero(dom, struct idmap_ad_context)) == NULL ) {\n \t\tDEBUG(0, (\"Out of memory!\\n\"));\n@@ -261,6 +260,7 @@\n \t\t\t\tNULL, /* gidnumber */\n \t\t\t\tNULL };\n \tLDAPMessage *res = NULL;\n+\tLDAPMessage *entry = NULL;\n \tchar *filter = NULL;\n \tint idx = 0;\n \tint bidx = 0;\n@@ -339,7 +339,7 @@\n \t}\n \tfilter = talloc_asprintf_append(filter, \")\");\n \tCHECK_ALLOC_DONE(filter);\n-\tDEBUG(10, (\"Filter: [%s]\\n\", filter));\n+\n \trc = ads_search_retry(ads, &res, filter, attrs);\n \tif (!ADS_ERR_OK(rc)) {\n \t\tDEBUG(1, (\"ERROR: ads search returned: %s\\n\", ads_errstr(rc)));\n@@ -351,8 +351,8 @@\n \t\tDEBUG(10, (\"No IDs found\\n\"));\n \t}\n \n-\tfor (i = 0; i < count; i++) {\n-\t\tLDAPMessage *entry = NULL;\n+\tentry = res;\n+\tfor (i = 0; (i < count) && entry; i++) {\n \t\tDOM_SID sid;\n \t\tenum id_type type;\n \t\tstruct id_map *map;\n@@ -360,13 +360,14 @@\n \t\tuint32_t atype;\n \n \t\tif (i == 0) { /* first entry */\n-\t\t\tentry = ads_first_entry(ads, res);\n+\t\t\tentry = ads_first_entry(ads, entry);\n \t\t} else { /* following ones */\n \t\t\tentry = ads_next_entry(ads, entry);\n \t\t}\n-\t\tif ( ! entry) {\n+\n+\t\tif ( !entry ) {\n \t\t\tDEBUG(2, (\"ERROR: Unable to fetch ldap entries from results\\n\"));\n-\t\t\tcontinue;\n+\t\t\tbreak;\n \t\t}\n \n \t\t/* first check if the SID is present */\n@@ -467,6 +468,7 @@\n \t\t\t\tNULL, /* attr_gidnumber */\n \t\t\t\tNULL };\n \tLDAPMessage *res = NULL;\n+\tLDAPMessage *entry = NULL;\n \tchar *filter = NULL;\n \tint idx = 0;\n \tint bidx = 0;\n@@ -524,8 +526,8 @@\n \t\tDEBUG(10, (\"No IDs found\\n\"));\n \t}\n \n-\tfor (i = 0; i < count; i++) {\n-\t\tLDAPMessage *entry = NULL;\n+\tentry = res;\t\n+\tfor (i = 0; (i < count) && entry; i++) {\n \t\tDOM_SID sid;\n \t\tenum id_type type;\n \t\tstruct id_map *map;\n@@ -533,13 +535,14 @@\n \t\tuint32_t atype;\n \n \t\tif (i == 0) { /* first entry */\n-\t\t\tentry = ads_first_entry(ads, res);\n+\t\t\tentry = ads_first_entry(ads, entry);\n \t\t} else { /* following ones */\n \t\t\tentry = ads_next_entry(ads, entry);\n \t\t}\n-\t\tif ( ! entry) {\n+\n+\t\tif ( !entry ) {\n \t\t\tDEBUG(2, (\"ERROR: Unable to fetch ldap entries from results\\n\"));\n-\t\t\tcontinue;\n+\t\t\tbreak;\n \t\t}\n \n \t\t/* first check if the SID is present */\n\n"}