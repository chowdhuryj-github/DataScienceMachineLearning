{"category": "ham", "to_address": "Simon McVittie <simon.mcvittie@collabora.co.uk>, sugar@lists.laptop.org", "from_address": "Morgan Collett <morgan.collett@collabora.co.uk>", "subject": "Re: [sugar] key IDs", "body": "Simon McVittie wrote:\n> Impersonating another child would require a preimage attack, as I understand it\n> (i.e. the ability to construct a key with a desired hash). It seems\n> reasonable that we don't defend against preimage attacks.\n\nI agree. I don't think anyone can, at this stage...\n\n>> For the unique identifier stuff, could we at some future point do a\n>> 'keyid2/' (or some other prefix) meaning that this is an identifier in a\n>> different space?\n> \n> OK, here's a proposal:\n> \n> * The generated JIDs have a prefix ending with a dot, which is the algorithm\n>   by which they were generated.\n> \n> * No prefix means hex(SHA-1(Base64(key material))) as we currently do.\n>   This is deprecated and support will be removed before we ship.\n\n:)\n\n> * We define a prefix to switch to now, perhaps \"sha1.\" meaning\n>   hex(SHA1(key material)). We could consider switching from hex to Base32\n>   (which would give us JIDs half as long for the same hash length), or to a\n>   stronger hash algorithm, straight away. The Base32 pad character would have\n>   to be changed from \"=\" to \"_\" to be valid in both JIDs and object-paths, but\n>   that's easy. Base64 is unsuitable since the user part of a JID is\n>   case-insensitive.\n> \n> * Everything else containing a dot is reserved for future expansion.\n\nSounds good.\n\n> * The object ID inside PS is one of xmpp/some.jid@example.com (as\n>   currently, used for \"foreign\" and unidentifiable buddies),\n>   keyid/hexhexhexhex (for an unprefixed key, deprecated), or\n>   keyid/prefix/whateverwhatever (for a key with that prefix, e.g.\n>   keyid/sha1/hexhexhexhex).\n> \n> * When coalescing contacts into buddy objects we assume the buddy will\n>   rarely be visible on more than one server at the same time with different\n>   key-hash algorithms, so continue to treat the key-hash as a unique ID.\n>   The failure mode if this assumption fails is that there might be two\n>   Buddy objects in the mesh representing the same person, but the PS as it\n>   exists at the moment will never cause this (it only ever connects to\n>   one server at a time), so I don't think we need to care.\n> \n> * When we discover a buddy's full key, we hash it repeatedly, and add\n>   their Buddy object to the dict PresenceService._buddies once per known\n>   hash/encoding algorithm. Note that on Salut (link-local) we expect to either\n>   have someone's full key, or discover that they don't have a key, before we\n>   can interact with them at all.\n> \n> * The server component that does the key-based authentication (which\n>   we haven't written yet) always has to be upgraded earlier than the XOs are,\n>   so it will let new XOs register with new hash/encoding algorithms.\n\nHmm. I wonder about the scenario where an OLPC person visits a school in\n Ogbomoso, toting their newest hardware with a dev build which is newer\nthan the school server build...\n\nOnce it's out there, it has to work resiliently, and degrade gracefully.\n\nIt will be up the the people on the ground to upgrade, as and when they\nchoose to. Despite some sort of internets, they may very well not bother\nto touch a working installation... (I keep encountering people running\nold versions of Ubuntu for no good reason :) So this scenario may also\nbe triggered by a school swapping out a faulty XO for a new one which\ncomes preloaded with a newer build... It has to still Just Work.\n\nHypothetical at this stage but we may want to put in a fall-back on the\nXO when we do implement the next algorithm.\n\n> * After the XO registers on the server, instead of storing a boolean\n>   \"registered\", it stores the JID it used. In future, it'll always log\n>   in with that JID.\n> \n> * Should there be a process by which XOs whose JIDs use a weak hash try to\n>   upgrade to a better hash, by creating a new account? If so, we can avoid\n>   the \"two Buddies\" issue by making sure we log out of the old account\n>   before attempting to create the new one; if creation fails we can log\n>   back in as the old account.\n\nSounds good.\n\n> * When looking up a buddy by complete public key, we try all\n>   non-obsolete hash/encoding algorithms (so there's value in keeping the\n>   number supported as small as possible).\n\nI'm sure the number will be very small :)\n\nRegards\nMorgan\n_______________________________________________\nSugar mailing list\nSugar@lists.laptop.org\nhttp://lists.laptop.org/listinfo/sugar\n\n"}