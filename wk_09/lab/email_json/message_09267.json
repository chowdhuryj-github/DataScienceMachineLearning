{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "\"Alek Storm\" <alek.storm@gmail.com>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "Okay, I think we completely misunderstood each other.  Honestly, most of what I said was a reply to Allison's proposal.\n\nOn 4/18/07, chromatic  wrote:\n> On Wednesday 18 April 2007 13:34, Alek Storm wrote:\n> \n> > Vtable methods defined in C are visible from C.\n> \n> Of course, otherwise nothing would be able to call them.\n\nIt was kind of a \"duh\" statement, but I was making the point that vtable methods in PIR should be visible by default.\n\n> > Therefore, it makes \n> > sense that vtable methods defined in PIR are visible from PIR, at\n> > least by default.\n> \n> That makes no sense to me.  Are you saying that vtable methods defined in a \n> specific language should be visible to that language by default?\n\nI'm not entirely sure what you mean - I didn't mention languages.  I meant that vtable methods are simply normal methods in a class, which can be easily hidden with the :anon flag.  This is exactly the way it works now - I didn't propose we change anything besides making :vtable imply :method.\n\n> If that's true, then users have to *know* the implementation details of\n> vtable methods.  Is it in C code or is it in PIR code?\n\nI have no idea why you're saying this.  Why does making vtable methods visible expose their implementation details?  I haven't said anything remotely like this.\n\n> That's precisely what vtable methods protect against!  That's why they're in\n> vtables.  That's why they're *not* visible as methods to PIR code.\n\nI don't really see where you're coming from here.  Vtable methods are callable directly from C, so there's obviously no problem there.  Vtable methods in PIR are just overriding their C implementations, so it makes sense that they're callable directly as well.  Also, they are easily hidden with the :anon flag.  None of this is any different than what is already implemented.\n\n> > Making :vtable imply :anon might be unintuitive to \n> > users.  Besides that, there's still the problem of :method meaning two\n> > different things with that implementation.  Basically, in a non-vtable\n> > sub, there is the :anon flag to detach it from the namespace, but in a\n> > vtable sub, it's detached by default, and the :method flag attaches it\n> > to the namespace.  Reversal bad.  Continuity good.\n> \n> I can't honestly think of a case where you want :vtable AND :method on a \n> vtable method, with the caveat that right now you *must* do that \n> because :vtable doesn't cause Parrot to include the invocant in the proper \n> register on calls.\n\nI was talking about Allison's recommendation.  If you read that, what I said will make sense.\n\nSorry for the miscommunication :)\n\n-- \nAlek Storm\n\n"}