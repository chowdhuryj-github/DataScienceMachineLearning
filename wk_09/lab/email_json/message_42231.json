{"category": "ham", "to_address": "tridge@samba.org", "from_address": "James Peach <jpeach@samba.org>", "subject": "Re: getting rid of mkproto.sh from Samba3", "body": "On Jun 3, 2007, at 7:51 PM, tridge@samba.org wrote:\n\n> James,\n>\n>>>> mkproto.sh promotes lazing programming, leads to bad interfaces\n>>>> and to monolithic code.\n>>\n>> This is the basic reason why I don't like mkproto.sh. I'd also add  \n>> that\n>> \t- it makes it impossible to do incremental builds\n>> \t- it makes it harder to find existing interfaces, raising the\n>> barrier to contributions\n>> \t- it makes it harder to document existing interfaces\n>> \t- leads to false sharing, forcing trivial tools to link most of lib/\n>\n> This is not a result of mkproto. In Samba4 we do automatic prototype\n> generation for many of our subsystems but not for all, yet it doesn't\n> suffer from any of the above problems:\n>\n> - we do incremental builds, as each subsystem gets its own\n>    proto.h. So for example, the libcli/raw library gets\n>    libcli/raw/raw_proto.h. Only subsystems that need that library\n>    include that header\n>\n> - it is not hard to find existing interfaces, as we separate the\n>   headers for each interface. The generated headers are short, and\n>   are located in the same directory as the library code that are for\n>\n> - I think it makes it easier to document interfaces as the interfaces\n>   to the library are conveniently located next to the code\n>\n> - it doesn't lead to false sharing, as we separate the headers\n>\n> - the samba4 code is not monolithic\n>\n> - the samba4 code doesn't have bad interfaces.\n>\n> The problems you are seeing are due to my original design of mkproto\n> which do it all as one big proto.h. Jelmer re-designed our mkproto to\n> split up the generated headers, and that got rid of all of the\n> problems you mentioned. Jelmer also did a much faster and cleaner\n> mkproto in perl.\n>\n> We control which subsystems get automatic prototype generation using\n> options like this:\n>\n> [SUBSYSTEM::LIBCLI_RAW]\n>  PRIVATE_PROTO_HEADER = raw/raw_proto.h\n>  PRIVATE_DEPENDENCIES = LIBCLI_COMPOSITE\n>  PUBLIC_DEPENDENCIES = samba-socket LIBPACKET gensec LIBCRYPTO\n>  LDFLAGS = $(SUBSYSTEM_LIBCLI_SMB_COMPOSITE_OUTPUT)\n>  OBJ_FILES = raw/rawfile.o \\ (etc etc)\n>\n> If you have a read through the generated prototypes, I think you'll\n> find them clean, and easy to read.\n>\n> So you can use prototype generation without the problems you\n> mention. It just takes a bit more work upfront to get it right.\n\nIn general my view is that code written by humans should also have a  \ndeclaration written by humans. I've never found adding prototypes to  \nbe a burden, so I have difficulty understanding the point of view that  \nmaintaining header files is such an imposition.\n\nYes, the autogenerated headers in Samba4 are done much better than in  \nSamba3, but the cost is additional complexity in the build system. My  \nview is that the gain is trivial.\n\nAnd you still can't read the headers without getting past configure  \n(ie. having a working toolchain installed).\n\n--\nJames Peach | jpeach@samba.org\n\n"}