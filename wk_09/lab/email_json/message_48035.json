{"category": "ham", "to_address": "\"Tobin, Jared\" <TobinJR@DFO-MPO.GC.CA>", "from_address": "Duncan Murdoch <murdoch@stats.uwo.ca>", "subject": "Re: [R] Using subset() in a user-defined function", "body": "On 6/14/2007 10:57 AM, Tobin, Jared wrote:\n> Thanks for the quick response, Duncan.\n> \n> The given code doesn't seem to work, and possibly due to this reason I\n> found in the online help for missing() (if I understand it correctly):\n> \n> \"Currently missing() can only be used in the immediate body of the\n> function that defines the argument, not in the body of a nested function\n> or a local call. This may change in the future.\"\n> \n> So as I understand it, missing() cannot refer to the arguments of\n> function1 if it is used in an argument of subset()?  It seems to remain\n> a promising function for this situation regardless, but I'm not sure how\n> I could implement it into the subset() arguments offhand.\n\nRight, I had forgotten that subset uses nonstandard evaluation.  You \ncould evaluate add some variables to hold it, e.g.\n\nmysubset <- function(arg1=\"\", arg2=\"\", arg3=\"\") {\n   miss1 <- missing(arg1)\n   miss2 <- missing(arg2)\n   miss3 <- missing(arg3)\n\n   subset(master.frame, (miss1 | a == arg1) &\n                      (miss2 | b == arg2) &\n                      (miss3 | c == arg3))\n}\n\nThis time I did test it as I should have last time, so I can tell you \nthat if all args are missing you'll get the full master.frame.\n\nDuncan Murdoch\n> \n> --\n> \n> jared tobin, student research assistant\n> dept. of fisheries and oceans\n> tobinjr@dfo-mpo.gc.ca\n> \n> -----Original Message-----\n> From: Duncan Murdoch [mailto:murdoch@stats.uwo.ca] \n> Sent: Thursday, June 14, 2007 11:28 AM\n> To: Tobin, Jared\n> Cc: r-help@stat.math.ethz.ch\n> Subject: Re: [R] Using subset() in a user-defined function\n> \n> On 6/14/2007 9:38 AM, Tobin, Jared wrote:\n>> Hello,\n>> \n>> I'm having a problem with using subset() inside a function I'm\n> writing.\n>> Ignoring everything else in the function, the problem can be \n>> illustrated by (where master.frame is the data frame I'm using):\n>> \n>> \n>> function1 <- function(arg1=\"\", arg2=\"\", arg3=\"\"){\n>> \n>> \ttemp.frame <- subset(master.frame, a == arg1 & b == arg2 & c ==\n>> arg3)\n>> \n>> }\n>> \n>> \n>> This works fine if the user specifies all arguments, but if any one or\n> \n>> more of the arguments isn't specified, say arg1 for example, the \n>> subset is empty because subset() goes looking for values of a == \"\" in\n> \n>> master.frame, and there are none.  I want it to work such that if an \n>> argument is not specified, it is not included in what subset() goes \n>> looking for.  So if I were to input:\n>> \n>> function1(arg2=5, arg3=6)\n>> \n>> then in function1, the subset command will look like\n>> \n>> \ttemp.frame <- subset(master.frame, b == 5 & c == 6)\n>> \n>> \n>> Any suggestions would be much appreciated.\n> \n> Code it like this:\n> \n> subset(master.frame, (missing(arg1) | a == arg1) &\n>                       (missing(arg2) | b == arg2) &\n>                       (missing(arg3) | c == arg3))\n> \n> I haven't tried this, and I forget what happens in subset() if you pass\n> it a subset of the wrong length, so it might fail if all args are\n> missing, but otherwise I think it should work.  It does depend on\n> defaults for the args existing and not causing errors in the equality\n> tests (it's not using shortcut evaluation).\n> \n> Duncan Murdoch\n> \n> ______________________________________________\n> R-help@stat.math.ethz.ch mailing list\n> https://stat.ethz.ch/mailman/listinfo/r-help\n> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html\n> and provide commented, minimal, self-contained, reproducible code.\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}