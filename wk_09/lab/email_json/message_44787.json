{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "gd@samba.org", "subject": "svn commit: samba r23385 - in\n\tbranches/SAMBA_4_0/source/torture/rpc: .", "body": "Author: gd\nDate: 2007-06-08 10:53:47 +0000 (Fri, 08 Jun 2007)\nNew Revision: 23385\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23385\n\nLog:\nAdding netr_DsRGetForestTrustInformation() test to query transitive forest\ntrusts as well as our primary domain.\n\nGuenther\n\nModified:\n   branches/SAMBA_4_0/source/torture/rpc/netlogon.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/torture/rpc/netlogon.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/rpc/netlogon.c\t2007-06-08 10:49:46 UTC (rev 23384)\n+++ branches/SAMBA_4_0/source/torture/rpc/netlogon.c\t2007-06-08 10:53:47 UTC (rev 23385)\n@@ -1141,7 +1141,36 @@\n \treturn ret;\n }\n \n+static BOOL test_netr_DsRGetForestTrustInformation(struct dcerpc_pipe *p, TALLOC_CTX *mem_ctx, const char *trusted_domain_name) \n+{\n+\tNTSTATUS status;\n+\tstruct netr_DsRGetForestTrustInformation r;\n+\tBOOL ret = True;\n+\tstruct lsa_ForestTrustInformation info, *info_ptr;\n \n+\tif (lp_parm_bool(-1, \"torture\", \"samba4\", False)) {\n+\t\tprintf(\"skipping DsRGetForestTrustInformation test against Samba4\\n\");\n+\t\treturn True;\n+\t}\n+\n+\tinfo_ptr = &info\n+\n+\tr.in.server_name = talloc_asprintf(mem_ctx, \"\\\\\\\\%s\", dcerpc_server_name(p));\n+\tr.in.trusted_domain_name = trusted_domain_name;\n+\tr.in.flags = 0;\n+\tr.out.forest_trust_info = &info_ptr;\n+\n+\tprintf(\"Testing netr_DsRGetForestTrustInformation\\n\");\n+\n+\tstatus = dcerpc_netr_DsRGetForestTrustInformation(p, mem_ctx, &r);\n+\tif (!NT_STATUS_IS_OK(status) || !W_ERROR_IS_OK(r.out.result)) {\n+\t\tprintf(\"netr_DsRGetForestTrustInformation - %s/%s\\n\", \n+\t\t       nt_errstr(status), win_errstr(r.out.result));\n+\t\tret = False;\n+\t}\n+\treturn ret;\n+}\n+\n /*\n   try a netlogon netr_DsrEnumerateDomainTrusts\n */\n@@ -1149,6 +1178,7 @@\n {\n \tNTSTATUS status;\n \tstruct netr_DsrEnumerateDomainTrusts r;\n+\tint i;\n \n \tr.in.server_name = talloc_asprintf(mem_ctx, \"\\\\\\\\%s\", dcerpc_server_name(p));\n \tr.in.trust_flags = 0x3f;\n@@ -1162,6 +1192,28 @@\n \t\treturn False;\n \t}\n \n+\t/* when trusted_domain_name is NULL, netr_DsRGetForestTrustInformation\n+\t * will show non-forest trusts and all UPN suffixes of the own forest\n+\t * as LSA_FOREST_TRUST_TOP_LEVEL_NAME types */\n+\n+\tif (r.out.count) {\n+\t\tif (!test_netr_DsRGetForestTrustInformation(p, mem_ctx, NULL)) {\n+\t\t\treturn False;\n+\t\t}\n+\t}\n+\n+\tfor (i=0; i<r.out.count; i++) {\n+\n+\t\t/* get info for transitive forest trusts */\n+\n+\t\tif (r.out.trusts[i].trust_attributes & NETR_TRUST_ATTRIBUTE_FOREST_TRANSITIVE) {\n+\t\t\tif (!test_netr_DsRGetForestTrustInformation(p, mem_ctx, \n+\t\t\t\t\t\t\t\t    r.out.trusts[i].dns_name)) {\n+\t\t\t\treturn False;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \treturn True;\n }\n \n\n"}