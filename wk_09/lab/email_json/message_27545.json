{"category": "ham", "to_address": "<r-help@stat.math.ethz.ch>", "from_address": "\"sun\" <flyhyena@yahoo.com.cn>", "subject": "[R] EM covergence problem", "body": "Hi, R users\n\n  I am trying to use EM algorithmto estimate a latent class model of discrete choice. The basic model is a logit model which has two variables X=(X1,X2) and the utility is defined as v = Beta*X. There are 3 classes of individuals each has its own Beta values, so Beta is a 3*2 matrix. For each individual, (there are 1000), he make a choice between two randomly generated choice alternatives and has to choose one. The proportion of classes is set to (0.2,0.5,0.3). based on this seting, the proportion parameters alpha always end up with one of them goes to 0 in EM estimation. I checked the code and can not find what's the problem. Maybe this is a bit off topic in R help, but I code it in R and hence in hope that some one here can figure it out. \n\nPlus, I have a normal mixture model with success EM result. \n\nThanks in advance.\n\nFollowing is the code:\n\n#=========================\n\nX = array(,dim=c(1000,2))#first alternative\nb= c(2.3,0.7,0.3,0.7,0.1,0.8)\nalpha = c(0.3,0.5,0.2)#proportion\n\nX[,1] = runif(1000,min=5,max=20)\nX[,2] = runif(1000,min=5,max=20)\n##bi = 0.3\nY = array(,dim=c(1000,2))#second alternative\n\nY[,1] = runif(1000,min=5,max=20)\nY[,2] = runif(1000,min=5,max=20)\n\nV11 = X[1:300,]%*%b[1:2] \nV12 = Y[1:300,]%*%b[1:2] \nV21 = X[301:800,]%*%b[3:4]\nV22 = Y[301:800,]%*%b[3:4]\nV31 = X[801:1000,]%*%b[5:6]\nV32 = Y[801:1000,]%*%b[5:6]\n\nV1 = rbind(V11,V21,V31)+rnorm(1000)\nV2 = rbind(V12,V22,V32)+rnorm(1000)\n\noo = exp(V1)+exp(V2)\n\nP1 = exp(V1)/oo\nP2 = exp(V2)/oo\nD = ifelse(V1>V2,0,1)\n\n#second part of Q function\nQ2 = function(Beta,H){\n probs = logProbInd(Beta)\n li = sum(H*probs)\n return(li)\n}\n\n\nlogProbInd=function(Beta){#X, Y, D values take as is from environment\n dim(Beta) = c(2,3)\n Beta = t(Beta)\n probs = matrix(,nrow = 1000, ncol = 3)\n for(i in 1:3){\n  v1 = X%*%Beta[(i-1)*2+1:2]\n  v2 = Y%*%Beta[(i-1)*2+1:2]\n  p1 = exp(v1)/(exp(v1)+exp(v2))\n  p2 = exp(v2)/(exp(v1)+exp(v2))\n  probs[,i] = ifelse (D==0,log(p1),log(p2))\n  \n }\n \n return (probs)\n}\n\n#H [individuals][class]\nE_step = function(alpha,Beta){#calc posterior of H\n \n tmpH = matrix(,nrow = 1000,ncol =3)\n lprobs = logProbInd(Beta)\n for(i in 1:3){#classes\n  tmpH[,i] = alpha[i]*exp(lprobs[,i])\n }\n H = tmpH /apply(tmpH,1,sum)\n return( H)\n}\n\nM_step = function(H,Beta){\n #first part use direct estimation\n aita = apply(H,2,sum)/1000\n \n opt.c = optim(Beta,Q2,H=H,method=\"BFGS\",control = list(fnscale = -1))\n \n lik = opt.c$value\n return(c(aita,opt.c$par,lik))\n}\n\n\n#EM loops\nalf = c(0.33,0.33,0.33)\nBt = seq(0.1,0.6,by=0.1)\n\nsc = rep(-8000,5)\ni=1\n\nwhile(T){\n H= E_step(alpha=alf,Beta=Bt)\n theta = M_step(H=H,Beta=Bt)\n print(theta)\n alf = theta[1:3]\n Bt = theta[4:9]\n \n #check convergence\n sc[(i%%5) +1] = theta[10]\n i=i+1\n #if((theta[10] - mean(sc) ) < 0.0005) break\n}\n\n\n\t[[alternative HTML version deleted]]\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}