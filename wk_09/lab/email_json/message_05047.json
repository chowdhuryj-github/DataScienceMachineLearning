{"category": "ham", "to_address": "Jonathan Lang <dataweaver@gmail.com>", "from_address": "Geoffrey Broadwell <geoff@broadwell.org>", "subject": "Re: Should a dirhandle be a filehandle-like iterator?", "body": "On Fri, 2007-04-13 at 19:00 -0700, Jonathan Lang wrote:\n> Please.  I've always found the \"opendir ... readdir ... closedir\" set\n> to be clunky.\n> \n> Also: why distinguish between \"open\" and \"opendir\"?  If the string is\n> the name of a file, 'open' means \"open the file\"; if it is the name of\n> a directory, 'open' means \"open the directory\".  If it's the name of a\n> pipe, it opens the pipe.  And so on.\n\nAs long as you still have some way to reach the low-level opens --\nthough it's an odd thing to do (except perhaps in a disk integrity\nchecker), there's no fundamental reason why you shouldn't be able to\nactually look at the bytes that happen to represent a directory\nstructure on disk.\n\nAlso, for security or correctness reasons you may want to make sure that\nyou don't clobber things you don't mean to -- so non-dwimmy open\nvariants are a good idea to keep around.\n\nThis could be as simple as 'open(:!dwim)' I guess, or whatever the\nnegated boolean adverb syntax is these days ....\n\n\n-'f\n\n\n"}