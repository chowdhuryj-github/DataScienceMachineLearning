{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "Josh Wilmes <josh@hitchhiker.org>", "subject": "Re: new FAQs ", "body": "At 19:05 on 05/23/2007 PDT, chromatic  wrote:\n\n> > It sounds like you are saying that languages are free to implement\n> > their own semantics using their own code, and that they can choose not\n> > to interoperate with predefined Parrot types or types from other\n> > languages when that would negatively impact their goals, such as\n> > performance. While that rings true, it seems that Parrot is not\n> > providing that ability -- languages can already implement whatever\n> > they want without Parrot.  And if languages are free to ignore\n> > predefined and foreign types, when what benefit will they actually get\n> > from Parrot?\n> \n>  - better compiler tools than lex and yacc.\n\nIs it necessary (or even fair) to tie compiler components to parrot?\n> \n> Snarkily, it's better than the JVM because it actually supports features of \n> dynamic languages natively without forcing all dynamic languages built on it \n> to invent everything besides \"look up named method at runtime\".\n\nApparently this is an improvement over \"invent the whole VM\"? ;-)\n\nI've been following parrot to some degree since day one, and at this point \nI am very much unconvinced that it has any real value.\n\nI have always been more interested in perl 6 than parrot, and i don't \nreally believe that parrot is essential, or even the best solution to get \nperl 6 going. \n\nI will follow this thread with some interest though.. perhaps my mind will be \nchanged.\n\n(Not that my opinion matters a whole lot.. At this point I really\nhave written perl 6 off too- it doesn't seem likely to reach maturity in \ntime to regain much relevance for perl in the corporate world.. But that's\nreally a separate rant and it's not really parrot's fault, unless you\nbelieve that parrot coders could be working on projects more directly\nrelated to perl 6 instead.)\n\n--Josh\n\n\n"}