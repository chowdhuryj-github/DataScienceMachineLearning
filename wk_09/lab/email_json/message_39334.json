{"category": "ham", "to_address": "bugs-bitbucket@netlabs.develooper.com", "from_address": "James Keenan (via RT) <parrotbug-followup@parrotcode.org>", "subject": "[perl #43085] [PATCH] Parrot::OpsFile::read_ops():  Can we refactor the setting of VERSION ", "body": "# New Ticket Created by  James Keenan \n# Please include the string:  [perl #43085]\n# in the subject line of all future correspondence about this issue. \n# \n\n\nParrot::OpsFile (lib/Parrot/OpsFile.pm) has, AFAICT, no unit tests  \ndedicated to it.  Since it is called at a number of points inside  \nParrot::Ops2c::Utils and Parrot::Ops2pm::Utils (which are in turn  \ncalled by tools/build/ops2c.pl and tools/build/ops2pm.pl, both of  \nwhich are invoked by make), it ends up being well tested by the test  \nsuites I have written for those two packages (t/tools/ops2cutils/*.t  \nand t/tools/ops2pmutils/*.t).\n\nBut there is more untested code in this package than I am comfortable  \nwith.  You can see statement coverage at http://thenceforward.net/ \nparrot/coverage/configure-build/lib-Parrot-OpsFile-pm.html and click  \non links for branch and condition coverage.\n\nParrot::OpsFile::read_ops() reads an .ops file line-by-line and  \nparses it.  Here's some code beginning at line 253.  (I've eliminated  \nsome whitespace and cuddled some braces to save space.)\n\n             if (m/^\\s*VERSION\\s*=\\s*\"(\\d+\\.\\d+\\.\\d+)\"\\s*;\\s*$/) {\n                 if ( exists $self->{VERSION} ) {\n                     #die \"VERSION MULTIPLY DEFINED!\";\n                 }\n                 $self->version($1);\n                 $_ = '';\n             }\n             elsif (m/^\\s*VERSION\\s*=\\s*PARROT_VERSION\\s*;\\s*$/) {\n                 if ( exists $self->{VERSION} ) {\n                     #die \"VERSION MULTIPLY DEFINED!\";\n                 }\n                 $self->version( $PConfig{VERSION} );\n                 $_ = '';\n             }\n\nI interpret this as:  If you come to a line where a 3-part version  \nnumber is assigned to VERSION, capture and use that version number  \n(unless for some odd reason the VERSION attribute has already been  \nset).  Else, if you come to a line that reads 'VERSION =  \nPARROT_VERSION', capture and use that version number.  Else, ...  \nwell, there's no 'else' stanza here, which is problematic from a  \ntesting and coverage point of view.\n\nThe coverage analysis cited above, however, indicates that the 'if'  \nstanza is never reached during testing, i.e., there is no instance of  \nsomething like 'VERSION = 0.4.11;'.  The coverage analysis also  \nsuggests that the implicit 'else' branch is never reached, either.   \nIn other words, during testing *only* the 'elsif' branch is reached.\n\nThis is not surprising, because if you call 'ack VERSION src/ops/ \n*.ops', you will find 17 instances of 'VERSION = PARROT_VERSION' --  \nexactly corresponding to the 17 .ops files in that directory.\n\n\tsrc/ops/bit.ops:5:VERSION = PARROT_VERSION;\n\tsrc/ops/cmp.ops:5:VERSION = PARROT_VERSION;\n\tsrc/ops/core.ops:9:VERSION = PARROT_VERSION;\n\tsrc/ops/debug.ops:5:VERSION = PARROT_VERSION;\n\tsrc/ops/experimental.ops:7:VERSION = PARROT_VERSION;\n\tsrc/ops/io.ops:5:VERSION = PARROT_VERSION;\n\tsrc/ops/math.ops:8:VERSION = PARROT_VERSION;\n\tsrc/ops/object.ops:11:VERSION = PARROT_VERSION;\n\tsrc/ops/obscure.ops:7:VERSION = PARROT_VERSION;\n\tsrc/ops/pic.ops:11:VERSION = PARROT_VERSION;\n\tsrc/ops/pmc.ops:10:VERSION = PARROT_VERSION;\n\tsrc/ops/set.ops:5:VERSION = PARROT_VERSION;\n\tsrc/ops/stack.ops:5:VERSION = PARROT_VERSION;\n\tsrc/ops/stm.ops:21:VERSION = PARROT_VERSION;\n\tsrc/ops/string.ops:5:VERSION = PARROT_VERSION;\n\tsrc/ops/sys.ops:5:VERSION = PARROT_VERSION;\n\tsrc/ops/var.ops:5:VERSION = PARROT_VERSION;\n\nIn other words, no src/ops/.ops file currently sets VERSION in any  \nway other than by assignment from PARROT_VERSION.\n\nI therefore ask:  Why should we not stipulate that 'VERSION =  \nPARROT_VERSION' is the *sole* way to set VERSION in an .ops file?  In  \nthat case, (a) we could eliminate the aforementioned 'if' stanza in  \nParrot::OpsFile::read_ops() and (b) we could probably get away with  \nhard-coding 'VERSION = PARROT_VERSION' in exactly one location and  \ndispense with coding it in each of the .ops files.\n\nIs there any reason why we should continue to maintain the unused  \noption of coding a src/ops/.ops file with a specific 3-part version  \nnumber?  (I'll submit an actual patch if people agree with this.)\n\nThank you very much.\nJim Keenan\n\n"}