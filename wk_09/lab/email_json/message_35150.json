{"category": "ham", "to_address": "p6l <perl6-language@perl.org>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "[S02] Sigils", "body": ">From S02:\n\n--\n\nPerl 6 includes a system of B to mark the fundamental\nstructural type of a variable:\n\n    $   scalar (object)\n    @   ordered array\n    %   unordered hash (associative array)\n    &   code/rule/token/regex\n    ::  package/module/class/role/subset/enum/type/grammar\n    @@  multislice view of @\n\nC<$x> may be bound to any object, including any object that can be\nbound to any other sigil.\n\nC<@x> may be ... bound to any object that does the C role\n\nC<%x> may be bound to any object that does the C role\n\nC<&x> may be bound to any object that does the C role\n\nC<::x> may be bound to any object that does the C role\n\n--\n\nIIRC, could the above section about C<$x> be considered equivalent to\nsaying that C<$x> may be bound to any object that does the C\nrole?\n\nAlso, a possible change in terminology:\n\n  s/C/C<< sigil:<@> >>/\n  s/C/C<< sigil:<%> >>/\n  s/C/C<< sigil:<&> >>/\n  s/C/C<< sigil:<::> >>/\n  s/C/C<< sigil:<$> >>/ if every object does the Object role\n\nThis would free up more role names for programmer use.  It would also\nimply that one could create a new sigil by defining a role named\n'sigil:<...>', with the behavior of the sigil being established by the\ndefinition of the role.  Or does this make it too easy to create new\nsigils?\n\n-- \nJonathan \"Dataweaver\" Lang\n\n"}