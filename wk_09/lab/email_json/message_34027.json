{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "allison@cvs.develooper.com", "subject": "[svn:parrot-pdd] r18616 - trunk/docs/pdds/draft", "body": "Author: allison\nDate: Mon May 21 19:22:33 2007\nNew Revision: 18616\n\nModified:\n   trunk/docs/pdds/draft/pdd17_pmc.pod\n\nLog:\n[pdd]: Adding comments to PMC PDD on subclassing low-level PMCs from high-level classes.\n\n\nModified: trunk/docs/pdds/draft/pdd17_pmc.pod\n==============================================================================\n--- trunk/docs/pdds/draft/pdd17_pmc.pod\t(original)\n+++ trunk/docs/pdds/draft/pdd17_pmc.pod\tMon May 21 19:22:33 2007\n@@ -83,14 +83,11 @@\n         struct PMC_EXT *pmc_ext;\n     };\n \n-where C is a pointer to an C structure:\n+where C is a pointer to a C structure:\n \n     typedef struct pobj_t {\n         UnionVal u;\n         Parrot_UInt flags;\n- #if ! DISABLE_GC_DEBUG\n-        UINTVAL _pobj_version;\n- #endif\n     } pobj_t;\n \n and where:\n@@ -109,8 +106,8 @@\n         struct parrot_string_t * _string_val;\n     } UnionVal;\n \n-C holds data associated with the PMC. This can be in the form of an  integer\n-value, a floating-point value, a string value, or a pointer  to other data.\n+C holds data associated with the PMC. This can be in the form of an integer\n+value, a floating-point value, a string value, or a pointer to other data.\n C may be empty, since the PMC structure also provides a more general data\n pointer, but is useful for PMCs which hold only a single piece of data (e.g.\n C).\n@@ -119,12 +116,9 @@\n F, and are generally only used within the Parrot \n internals.\n \n-C<_pobj_version> is only used for debugging Parrot's garbage collector. It is\n-documented elsewhere (well, it will be once we get around to doing that...).\n-\n C holds a pointer to the B associated with the PMC. This points\n to a set of functions, with interfaces described in\n-F that implement the basic behaviour of the PMC\n+L that implement the basic behaviour of the PMC\n (i.e. how it behaves under addition, subtraction, cloning etc.)\n \n C (if present) holds a pointer to any additional data associated  with\n@@ -136,8 +130,8 @@\n  #if PMC_DATA_IN_EXT\n         DPOINTER *data;\n  #endif\n-        PMC *_metadata;\n-        struct _Sync *_synchronize;\n+        PMC *_metadata;             # [Note: replaced by roles]\n+        struct _Sync *_synchronize; # [Note: may be deprecated, see STM]\n         PMC *_next_for_GC;\n     };\n \n@@ -1005,6 +999,10 @@\n \n =item add_attribute\n \n+=item get_attr\n+\n+=item set_attr\n+\n =item add_parent\n \n =item add_role\n@@ -1026,6 +1024,20 @@\n {{ Address the problem of high-level objects inheriting from low-level PMCs,\n and any structural changes to low-level PMCs that might require. }}\n \n+If a low-level PMC expects to be overridden by high-level classes (which means\n+all the core low-level PMC types), it must respect a standard interface. It\n+must implement the C and C vtable entries for any core\n+attributes it expects to be accessible to subclasses.\n+\n+Subclassing a low-level class from a high-level class makes an entry in the\n+high-level class's list of parents. This entry is a proxy class object for the\n+low-level PMC class that provides access to the low-level PMC's vtable\n+(including the implementations of get_attr and set_attr), and defines the\n+storage that the low-level object will need within the high-level object (this\n+could be as simple as a single PMC attribute that is an instance of the\n+low-level class).\n+\n+\n =head2 Core PMCs\n \n Parrot has a number of core PMC types that all programs can guarantee will be\n\n"}