{"category": "ham", "to_address": "Paul Cochrane <paultcochrane@gmail.com>", "from_address": "Ron Blaschke <ron@rblasch.org>", "subject": "Re: [perl #41569] t/distro/file_metadata.t fails on win32", "body": "Paul Cochrane wrote:\n> On 11/06/07, Ron Blaschke  wrote:\n>> jerry gay wrote:\n>> > On 6/11/07, Paul Cochrane  wrote:\n>> >> On 09/03/07, chromatic  wrote:\n>> >> > On Friday 09 March 2007 05:00, Ron Blaschke wrote:\n>> >> >\n>> >> > > Attached patch replaces the backslashes with slashes on Windows.\n>> >> >\n>> >> > Would using File::Spec be less fragile?\n>> >>\n>> >> I've attached a patch which uses File::Spec instead of replacing one\n>> >> set of slashes with another.  Comments welcome!  :-)\n>> >>\n>> > good idea.\n>> >\n>> > instead of breaking up the path and reconstructing it separately\n>> > (since the individual components of the path aren't used anywhere\n>> > else,) how about using 'canonpath' to clean up the path in one step.\n>> > something like:\n>> >\n>> >                if ( $result =~ m{(.*) - (.*)} ) {\n>> >                    my $file = canonpath $1;\n>> >                    my $attribute = $2;\n>> >\n>> >                    # and add to the results hash\n>> >                    $results{$file} = $attribute;\n>> >                }\n>>\n>> I may be missing something here, but I think the problem was that the\n>> file name sets in MANIFEST and those reported by svn must match up, but\n>> didn't because of the file separator.  MANIFEST uses forward slashes,\n>> File::Spec those of the current platform, which probably brings you back\n>> to square one.\n> \n> But if we convert what MANIFEST provides (i.e. Unix directory\n> separators) into whatever the current platform needs (i.e. what\n> canonpath() does) then it should agree with whatever svn spits out.\n> Or am I missing something?\n\nNo, that's exactly what I think needs to be done.  In the patch\ncanonpath is used with the result of the svn execution only.  That's not\nenough.  @manifest_files would need to be changed too, otherwise it\ncontains the file names with forward slashes from MANIFEST.  There's\nalso a regex $lf_files_regexp that seems to filter files, and the part\nthat uses it would need to be aware of the changed separator, too.\n\n> Essentially my patch is just a less fragile version of the patch you\n> submitted to get this test to work on Windows.  (at least, I don't\n> think I'm changing the functionality that much).\n\nI simple changed the backward slashes to forward slashes, thus forward\nslashes everywhere.  But canonpath does on Win32:\n\n$ perl -MFile::Spec::Functions=canonpath\n    -e \"print canonpath 'some\\file.t'\"\nsome\\file.t\n\n$ perl -MFile::Spec::Functions=canonpath\n    -e \"print canonpath 'some/file.t'\"\nsome\\file.t\n\n\nHere are the test results with the patch applied on Win32:\n\n$ prove t\\distro\\file_metadata.t\n...\n#  svn ps svn:eol-style 'LF' examples/shootout/takfp.pir.output;\n#  svn ps svn:eol-style 'LF' t/compilers/pge/p5regex/re_tests;\n#  svn ps svn:eol-style 'LF' t/library/perlhist.txt;\n#  svn ps svn:eol-style 'LF' t/op/sprintf_tests;\n# '\n#     expected: ''\n# Looks like you failed 4 tests of 4.\nt\\distro\\file_metadata....dubious\n        Test returned status 4 (wstat 1024, 0x400)\nDIED. FAILED tests 1-4\n        Failed 4/4 tests, 0.00% okay\nFailed Test              Stat Wstat Total Fail  Failed  List of Failed\n-------------------------------------------------------------------------------\nt\\distro\\file_metadata.t    4  1024     4    4 100.00%  1-4\nFailed 1/1 test scripts, 0.00% okay. 4/4 subtests failed, 0.00% okay.\n\nRon\n\n"}