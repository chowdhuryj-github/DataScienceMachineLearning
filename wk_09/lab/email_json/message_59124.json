{"category": "ham", "to_address": "Perl6 Internals <perl6-internals@perl.org>", "from_address": "Ron Blaschke <ron@rblasch.org>", "subject": "Optimized Build Failures on Win32", "body": "Parrot fails with an optimized build on Win32, Visual C++.  Here are a\nfew random observations, not sure if they are pointing to the problem or\nare merely side effects.\n\nIt seems like the failures only affect JIT execution.  I'm only seeing\nthis with some shootout tests during C, as those are setting\nit.  Always using the JIT execution (C) makes a whole\nlot of other tests fail too.\n\n$ nmake test\n...\nFailed Test                       Stat Wstat Total Fail  Failed  List of\nFailed\n-------------------------------------------------------------------------------\nt/compilers/imcc/imcpasm/optc.t     40 10240    43   40  93.02%  1-7 11-43\nt/compilers/imcc/reg/alloc.t         6  1536    11    6  54.55%  1-2 4-7\nt/compilers/imcc/reg/spill.t         6  1536     9    6  66.67%  3 5-9\nt/compilers/imcc/syn/bsr.t           2   512    12    2  16.67%  8-9\nt/compilers/imcc/syn/const.t         6  1536    34    6  17.65%  1-3 6-7 31\nt/compilers/imcc/syn/file.t          5  1280    13    5  38.46%  4 6 8-9 13\nt/compilers/imcc/syn/labels.t        1   256     6    1  16.67%  6\n... \n (1 subtest UNEXPECTEDLY SUCCEEDED), 21 tests and 601 subtests skipped.\nFailed 112/307 test scripts, 63.52% okay. 1001/6979 subtests failed,\n85.66% okay.\n\nA short program that shows one failure is this.\n\n.sub main :main\n    .local pmc stdout\n    stdout = getstdout\n    print \"before say\\n\"\n    stdout.say(\"Hello World!\")\n    print \"after say\\n\"\n.end\n\n$ parrot test.pir\nbefore say\nHello World!\nafter say\n\n$ parrot -j test.pir\nbefore say\nHello World!\n\nParrot segfaults shortly after executing Parrot_callmethodcc_p_sc in\nthis example, which is F C, that is the C method call.\n\nNow, callmethodcc translates into F and compiling\njust this source file without optimization (I know, compiling with\ndifferent flags is a thing one should avoid) makes the problem go away,\nor at least hide really well.\n\n$ parrot -j test.pir\nbefore say\nHello World!\nafter say\n\n$ nmake test\n...\nFailed Test              Stat Wstat Total Fail  Failed  List of Failed\n-------------------------------------------------------------------------------\nt/distro/file_metadata.t    3   768     4    3  75.00%  1-3\nt/doc/pod.t                 1   256     1    1 100.00%  1\n (1 subtest UNEXPECTEDLY SUCCEEDED), 21 tests and 601 subtests skipped.\nFailed 2/307 test scripts, 99.35% okay. 4/6979 subtests failed, 99.94% okay.\n\n\nSomething similar can be seen with MinGW.  Parrot compiled with C<-Os>.\n\n$ runtests t\\examples\\shootout.t\n...\nTest Summary Report\n-------------------\nt\\examples\\shootout.t (Wstat: 2048 Tests: 20 Failed: 8)\n  Failed tests:  3, 6-10, 17-18\n  Tests skipped: 13\n  Non-zero exit status: 8\nFiles=1, Tests=20, 19 wallclock secs ( 0.00 cusr +  0.00 csys =  0.00 CPU)\n\nF without C<-Os>.\n\n$ runtests t\\examples\\shootout.t\n...\nt\\examples\\shootout......ok\nAll tests successful.\n\nTest Summary Report\n-------------------\nt\\examples\\shootout.t (Wstat: 0 Tests: 20 Failed: 0)\n  Tests skipped: 13\nFiles=1, Tests=20, 16 wallclock secs ( 0.00 cusr +  0.00 csys =  0.00 CPU)\n\n\nRon\n\n"}