{"category": "ham", "to_address": "Beginners Perl <beginners@perl.org>", "from_address": "Mike Lesser <exceptions@earthlink.net>", "subject": "Fwd: Paths, Spaces, Getopt::Long", "body": "\n\nBegin forwarded message:\n\nFrom: Mike Lesser \nDate: June 3, 2007 3:48:56 PM EDT\nTo: \"Chas Owens\" \nSubject: Re: Paths, Spaces, Getopt::Long\n\nOn Jun 3, 2007, at 1:59 PM, Chas Owens wrote:\n\n> On 6/3/07, Mike Lesser  wrote:\n> snip\n>> I have to assume that paths can be converted easily for use in shells\n>> and such, without resorting to RegEx. Any ideas?\n> snip\n>\n> Aside from the multi argument version of system that Tom has already\n> mentioned, the bigger question is \"Why are you running code outside of\n> Perl?\"  Often people think they need to say things like\n>\n\nThe script needs to use tidy to strip garbage from an html file prior  \nto reading it. It's a file automatically generated by another company  \nand it's filled with junk, hence no chance to fix it at the source.\n\nThe HTML::Tidy module would be fine but it doesn't pass testing on my  \nbox, and won't work with a forced install. I took a look and found  \nthat that seems to be a recurring problem on OS X 10.4. I haven't yet  \nlooked thru the code to determine the source of the problem as it  \nseemed that running either Shell or system () was an interesting  \nthing to learn. I might have been wrong there!\n\nI've had success running hard coded paths and stuff, but now see that  \nthere's this space problem, which I didn't realize since Perl was  \nhandling paths nicely all by itself!\n\n\n> system \"rm -rf $path\";\n> system \"mkdir $path\";\n> system \"chmod 666 $path\";\n>\n> when they could just as easily say\n>\n> use File::Path;\n> use File::chmod;\n>\n> rmtree $path;\n> mkpath $path;\n> chmod 0666, $path;\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}