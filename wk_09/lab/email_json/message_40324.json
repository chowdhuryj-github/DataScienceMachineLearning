{"category": "ham", "to_address": "\"Paul Lalli\" <mritty@gmail.com>", "from_address": "\"Sharan Basappa\" <sharan.basappa@gmail.com>", "subject": "Re: /s, /g and /m modifiers", "body": "Simply great .. thanks\n\nOn 6/1/07, Paul Lalli  wrote:\n> On Jun 1, 4:54 am, sharan.basa...@gmail.com (Sharan Basappa) wrote:\n> > I have a script as follows  :\n> >\n> > $str = \"once upon a time\n> >         once upon a time\";\n> > @store = $str =~ m/(once)/g;\n> > print @store ;\n> >\n> > This outputs \"onceonce\"\n> > How come regex is searching beyond newline. I thought the search will\n> > stop after first once.\n>\n> What led you to believe that?  There is nothing in that regex that\n> says \"stop after the first newline\"\n>\n> > When I replace /g with /m, the output I get is \"once\", but I thought /m will\n> > tell regex at multiple lines for match.\n>\n> That is the mnemonic device, yes, but what it actually does is allow\n> the ^ token to match after a newline and the $ character to match\n> before a newline, rather than just the beginning and end of string.\n> So effectively, ^ and $ match the beggining/ending of lines, rather\n> than strings.\n>\n> Your regexp does not involve ^ or $, so /m is completely irrelevent.\n>\n> If you remove the /g modifier, your pattern matches only once.\n> Regardless of any other modifiers, if you want to search for more than\n> one occurrence of the pattern, you need the /g modifier.\n>\n> > Also when I replace /g with /s, I still get output \"once\"\n>\n> Again, without the /g modifier, the pattern matches only once.  /s is\n> also irrelevant.  While the mnemonic for this one is \"single line\",\n> what it actually does is allow the . wildcard to match any character\n> including the newline.  Normally it matches any character except the\n> newline.  Again, you have no . in your pattern, so /s is irrelevant.\n>\n> > Can someone demystify this for me ?\n> > Is my assumption that regex will stop after encountering first newline is\n> > applicable only when dot* type of regex is used ?\n>\n> Ah.  Now I understand your confusion.  It is not the regexp that stops\n> matching.  It is the . wildcard.  The . does not match a newline\n> character, unless you provide the /s modifier.  Therefore, the string\n> \"onex\\ntwox\" will match /o(.*)x/ by setting $1 to 'on'.  This is what\n> you've interpreted by \"stopping after the first newline\".  The regexp\n> engine didn't stop.  It's just that the . ran out of sequential\n> characters that it could match.  If you add the /s modifier, then $1\n> will become \"nex\\ntwo\", because now the . wildcard will match the\n> newline.\n>\n> For more info:\n> perldoc perlretut\n> perldoc perlre\n> perldoc perlreref\n>\n> Hope this helps,\n> Paul Lalli\n>\n>\n> --\n> To unsubscribe, e-mail: beginners-unsubscribe@perl.org\n> For additional commands, e-mail: beginners-help@perl.org\n> http://learn.perl.org/\n>\n>\n>\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}