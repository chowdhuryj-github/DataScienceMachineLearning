{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: Summary of today's digging into t/compiler/pge/06-grammar.t", "body": "On Thursday 21 June 2007 22:19:42 Andy Lester wrote:\n\n> pmichaud and I figured today that the segfaulting in 06-grammar.t is\n> caused by optimization, with the --optimize flag.\n>\n> However, it's not all the fault of --optimize.  I've been working on\n> valgrind, and there's some invalid memory accessing going on.\n> There's a dump following. The key is in the call to test.'plan'(1).\n> If that line is removed, valgrind runs clean.  If it's in there, then\n> you get the dump as shown.  Note that this parrot is built WITHOUT --\n> optimize, and we still get the valgrind failures.\n>\n> I hope this provides some clues.\n\nI'm not sure that it does, but then again I'm not exactly sure what this \nvalgrind run implies.\n\nI use the shell alias:\n\nvalgrind --suppressions=~/dev/parrot/tools/dev/parrot.supp --num-callers=500 \\\n    --leak-check=full --leak-resolution=high --show-reachable=yes \\\n    parrot --leak-test\n\nI find the diagnosis somewhat suspicious, as the call to plan() works like \nmost of the rest of Test::More and Test::Builder, but for kicks what happens \nif you trigger GC runs with and without that line?\n\n\t.local pmc interp\n\tinterp = getinterp\n\tinterp.'run_gc'()\n\n-- c\n\n"}