{"category": "ham", "to_address": "\"Mike Lesser\" <exceptions@earthlink.net>", "from_address": "yitzle <yitzle@users.sourceforge.net>", "subject": "Re: testing return values", "body": "Now, why can't you do this?\n\n> while( $tree_element = read_tree( $argument ) ){\n>    do_something( $tree_element );\n> }\n\nI would certainly use it. In C this is called operation overflow or something...\n\n\nOn 4/22/07, Mike Lesser  wrote:\n> Hiya. I'm looking for the correct Perl style for testing and storing\n> a return value in a control statement. The solution in any other\n> language is pretty obvious, but I get the distinct impression that\n> there's a 'right' way in Perl...\n>\n> Let's say I want to test a scalar returned from a subroutine, and\n> also keep a copy for my own use:\n>\n>   $scalar = sub( $argument );\n>\n>   if( $scalar ){\n>   }\n>\n> Naturally that's no big deal. Now let's say I have a tree I want to\n> traverse, or some similar open-ended thing to evaluate, and want to\n> run it until a condition is reached..\n>\n>   while( read_tree( $argument ){\n>   }\n>\n> Again no biggie. The problem is if I want to keep the result.\n> Obviously I can't do this:\n>\n> while( $tree_element = read_tree( $argument ) ){\n>     do_something( $tree_element );\n> }\n>\n> I can come up with a brute-force solution of course, but there's\n> probably a better, Perlish way that I'm not aware of. In addition, I\n> don't expect a return value from some module to be consistently\n> undefined or zero; it could change under some circumstances. This\n> makes me think that the problem has been dealt with long ago, and\n> just doesn't stick out in the llama/alpaca/whatever books.\n>\n> Hopefully I explained this correctly!\n>\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}