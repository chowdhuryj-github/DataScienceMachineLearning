{"category": "ham", "to_address": "mark@overmeer.net, perl6-language@perl.org", "from_address": "Jonathan Scott Duff <duff@pobox.com>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "On Sat, Jun 16, 2007 at 12:33:58PM +0200, Mark Overmeer wrote:\n> * Smylers (Smylers@stripey.com) [070616 09:09]:\n> > > * Damian Conway (damian@conway.org) [070615 00:17]:\n> > > > * Pod 6 is both a structural and a semantic scheme; you can specify\n> > > >   both the structure of a document, and the meaning of its various\n> > > >   components\n> > > \n> > > Yes, and that is one of the things which worries me most *You can*.\n> > > It's full freedom,\n> > \n> > You're concerned that an aspect of Perl 6 might have too much freedom?\n> > Isn't Perl all about giving users freedom to choose their own way of\n> > doing something?\n> \n> Why treat documentation as a second-class citizen all the time?  Why\n> have a standard syntax for regexes, and not for docs?  Aren't you glad\n> that at last we get a standard for OO programming and named parameters?\n> The boundary between freedom and anacharchy is faint.\n\nThe docs *do* have a standard syntax.  I think you've been arguing for\na more *specific* standard syntax and semantics.\n\nYou mention OOP.  For Perl 5 we have a standard, if very general,\nsyntax and \"open\" semantics that have allowed people to implement OOP\nin a variety of ways.  This was all well and good for a while until we\nrealized that there should be some more reasonable defaults (in both\nsyntax and semantics) for common operations in OOP.\n\nI think it's the same thing with POD6. It's \"open\" enough that many\ndocumentation systems can be built from it (man pages, books, magazines,\nwikis, etc.) For some of those documentation systems we'll have nice\nconventions and other conventions will grow as needed. If we find that\nconvention isn't enough in specific areas, we'll start to grow\nrequirements for those cases. Requirements will be enforced by the\ntools we use, not by the documentation specification (that way we can\nuse the same source document for multiple purposes with different\nrequirements).\n\nAlso, I don't think that documentation is being treated as\nsecond-class at all.  It's being treated as first-class but different.\nTo form a poor analogy, imagine threads woven together to make a\ntapestry.  The blue threads are just as important as the red threads,\nbut they each may have different purposes in the overall design.\n\nmy two cents,\n\n-Scott\n-- \nJonathan Scott Duff \n"}