{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "idra@samba.org", "subject": "svn commit: samba r23524 - in branches: SAMBA_3_0/source/client\n\tSAMBA_3_0_25/source/client SAMBA_3_0_26/source/client", "body": "Author: idra\nDate: 2007-06-16 18:54:13 +0000 (Sat, 16 Jun 2007)\nNew Revision: 23524\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23524\n\nLog:\n\nFix bug 2319.\nGot report this is all ok form a tester. Close a loong\nstanding bug preventing people to freely use any character\nin their password when printing via cups were involved.\n\n\nModified:\n   branches/SAMBA_3_0/source/client/smbspool.c\n   branches/SAMBA_3_0_25/source/client/smbspool.c\n   branches/SAMBA_3_0_26/source/client/smbspool.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/client/smbspool.c\n===================================================================\n--- branches/SAMBA_3_0/source/client/smbspool.c\t2007-06-16 18:19:42 UTC (rev 23523)\n+++ branches/SAMBA_3_0/source/client/smbspool.c\t2007-06-16 18:54:13 UTC (rev 23524)\n@@ -47,6 +47,7 @@\n static struct cli_state *smb_complete_connection(const char *, const char *,int , const char *, const char *, const char *, const char *, int);\n static struct cli_state\t*smb_connect(const char *, const char *, int, const char *, const char *, const char *, const char *);\n static int\t\tsmb_print(struct cli_state *, char *, FILE *);\n+static char *\t\turi_unescape_alloc(const char *);\n \n \n /*\n@@ -62,8 +63,9 @@\n   int \t\tport;\t\t/* Port number */\n   char\t\turi[1024],\t/* URI */\n \t\t*sep,\t\t/* Pointer to separator */\n+\t\t*tmp, *tmp2,\t/* Temp pointers to do escaping */\n \t\t*password;\t/* Password */\n-  const char\t*username,\t/* Username */\n+  char\t\t*username,\t/* Username */\n \t\t*server,\t/* Server name */\n \t\t*printer;\t/* Printer name */\n   const char\t*workgroup;\t/* Workgroup */\n@@ -152,19 +154,24 @@\n \n   if ((sep = strrchr_m(uri, '@')) != NULL)\n   {\n-    username = uri + 6;\n+    tmp = uri + 6;\n     *sep++ = '\\0';\n \n+    /* username is in tmp */\n+\n     server = sep;\n \n    /*\n     * Extract password as needed...\n     */\n \n-    if ((password = strchr_m(username, ':')) != NULL)\n-      *password++ = '\\0';\n-    else\n+    if ((tmp2 = strchr_m(tmp, ':')) != NULL) {\n+      *tmp2++ = '\\0';\n+      password = uri_unescape_alloc(tmp2);\n+    } else {\n       password = null_str;\n+    }\n+    username = uri_unescape_alloc(tmp);\n   }\n   else\n   {\n@@ -173,16 +180,18 @@\n     server   = uri + 6;\n   }\n \n-  if ((sep = strchr_m(server, '/')) == NULL)\n+  tmp = server;\n+\n+  if ((sep = strchr_m(tmp, '/')) == NULL)\n   {\n     fputs(\"ERROR: Bad URI - need printer name!\\n\", stderr);\n     return (1);\n   }\n \n   *sep++ = '\\0';\n-  printer = sep;\n+  tmp2 = sep;\n \n-  if ((sep = strchr_m(printer, '/')) != NULL)\n+  if ((sep = strchr_m(tmp2, '/')) != NULL)\n   {\n    /*\n     * Convert to smb://[username:password@]workgroup/server/printer...\n@@ -190,12 +199,15 @@\n \n     *sep++ = '\\0';\n \n-    workgroup = server;\n-    server    = printer;\n-    printer   = sep;\n+    workgroup = uri_unescape_alloc(tmp);\n+    server    = uri_unescape_alloc(tmp2);\n+    printer   = uri_unescape_alloc(sep);\n   }\n-  else\n+  else {\n     workgroup = NULL;\n+    server = uri_unescape_alloc(tmp);\n+    printer = uri_unescape_alloc(tmp2);\n+  }\n   \n   if ((sep = strrchr_m(server, ':')) != NULL)\n   {\n@@ -203,7 +215,7 @@\n \n     port=atoi(sep);\n   }\n-  else\n+  else \n   \tport=0;\n \t\n  \n@@ -588,3 +600,38 @@\n   else\n     return (0);\n }\n+\n+static char *uri_unescape_alloc(const char *uritok)\n+{\n+\tchar *t, *ret;\n+\tconst char *p;\n+\tlong int val;\n+\tchar eval[3];\n+\n+\tret = (char *)SMB_MALLOC(strlen(uritok)+1);\n+\n+\tif (!ret) return NULL;\n+\n+\teval[2] = '\\0';\n+\n+\tfor (p = uritok, t = ret; *p; p++, t++) {\n+\t\tif (*p == '%') { /* unescape hex */\n+\t\t\tp++;\n+\t\t\teval[0] = *p;\n+\t\t\tp++;\n+\t\t\teval[1] = *p;\n+\t\t\tval = strtol(eval, NULL, 16);\n+\t\t\tif ((val == LONG_MIN || val == LONG_MAX) && errno == ERANGE) {\n+\t\t\t\tSAFE_FREE(ret);\n+\t\t\t\treturn NULL;\n+\t\t\t}\n+\t\t\t*t = (char)val;\n+\t\t} else {\n+\t\t\t*t = *p;\n+\t\t}\n+\t}\n+\n+\t*t = '\\0'; /*terminate*/\n+\n+\treturn ret;\n+}\n\nModified: branches/SAMBA_3_0_25/source/client/smbspool.c\n===================================================================\n--- branches/SAMBA_3_0_25/source/client/smbspool.c\t2007-06-16 18:19:42 UTC (rev 23523)\n+++ branches/SAMBA_3_0_25/source/client/smbspool.c\t2007-06-16 18:54:13 UTC (rev 23524)\n@@ -47,6 +47,7 @@\n static struct cli_state *smb_complete_connection(const char *, const char *,int , const char *, const char *, const char *, const char *, int);\n static struct cli_state\t*smb_connect(const char *, const char *, int, const char *, const char *, const char *, const char *);\n static int\t\tsmb_print(struct cli_state *, char *, FILE *);\n+static char *\t\turi_unescape_alloc(const char *);\n \n \n /*\n@@ -62,8 +63,9 @@\n   int \t\tport;\t\t/* Port number */\n   char\t\turi[1024],\t/* URI */\n \t\t*sep,\t\t/* Pointer to separator */\n+\t\t*tmp, *tmp2,\t/* Temp pointers to do escaping */\n \t\t*password;\t/* Password */\n-  const char\t*username,\t/* Username */\n+  char\t\t*username,\t/* Username */\n \t\t*server,\t/* Server name */\n \t\t*printer;\t/* Printer name */\n   const char\t*workgroup;\t/* Workgroup */\n@@ -152,19 +154,24 @@\n \n   if ((sep = strrchr_m(uri, '@')) != NULL)\n   {\n-    username = uri + 6;\n+    tmp = uri + 6;\n     *sep++ = '\\0';\n \n+    /* username is in tmp */\n+\n     server = sep;\n \n    /*\n     * Extract password as needed...\n     */\n \n-    if ((password = strchr_m(username, ':')) != NULL)\n-      *password++ = '\\0';\n-    else\n+    if ((tmp2 = strchr_m(tmp, ':')) != NULL) {\n+      *tmp2++ = '\\0';\n+      password = uri_unescape_alloc(tmp2);\n+    } else {\n       password = null_str;\n+    }\n+    username = uri_unescape_alloc(tmp);\n   }\n   else\n   {\n@@ -173,16 +180,18 @@\n     server   = uri + 6;\n   }\n \n-  if ((sep = strchr_m(server, '/')) == NULL)\n+  tmp = server;\n+\n+  if ((sep = strchr_m(tmp, '/')) == NULL)\n   {\n     fputs(\"ERROR: Bad URI - need printer name!\\n\", stderr);\n     return (1);\n   }\n \n   *sep++ = '\\0';\n-  printer = sep;\n+  tmp2 = sep;\n \n-  if ((sep = strchr_m(printer, '/')) != NULL)\n+  if ((sep = strchr_m(tmp2, '/')) != NULL)\n   {\n    /*\n     * Convert to smb://[username:password@]workgroup/server/printer...\n@@ -190,12 +199,15 @@\n \n     *sep++ = '\\0';\n \n-    workgroup = server;\n-    server    = printer;\n-    printer   = sep;\n+    workgroup = uri_unescape_alloc(tmp);\n+    server    = uri_unescape_alloc(tmp2);\n+    printer   = uri_unescape_alloc(sep);\n   }\n-  else\n+  else {\n     workgroup = NULL;\n+    server = uri_unescape_alloc(tmp);\n+    printer = uri_unescape_alloc(tmp2);\n+  }\n   \n   if ((sep = strrchr_m(server, ':')) != NULL)\n   {\n@@ -203,7 +215,7 @@\n \n     port=atoi(sep);\n   }\n-  else\n+  else \n   \tport=0;\n \t\n  \n@@ -588,3 +600,38 @@\n   else\n     return (0);\n }\n+\n+static char *uri_unescape_alloc(const char *uritok)\n+{\n+\tchar *t, *ret;\n+\tconst char *p;\n+\tlong int val;\n+\tchar eval[3];\n+\n+\tret = (char *)SMB_MALLOC(strlen(uritok)+1);\n+\n+\tif (!ret) return NULL;\n+\n+\teval[2] = '\\0';\n+\n+\tfor (p = uritok, t = ret; *p; p++, t++) {\n+\t\tif (*p == '%') { /* unescape hex */\n+\t\t\tp++;\n+\t\t\teval[0] = *p;\n+\t\t\tp++;\n+\t\t\teval[1] = *p;\n+\t\t\tval = strtol(eval, NULL, 16);\n+\t\t\tif ((val == LONG_MIN || val == LONG_MAX) && errno == ERANGE) {\n+\t\t\t\tSAFE_FREE(ret);\n+\t\t\t\treturn NULL;\n+\t\t\t}\n+\t\t\t*t = (char)val;\n+\t\t} else {\n+\t\t\t*t = *p;\n+\t\t}\n+\t}\n+\n+\t*t = '\\0'; /*terminate*/\n+\n+\treturn ret;\n+}\n\nModified: branches/SAMBA_3_0_26/source/client/smbspool.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/client/smbspool.c\t2007-06-16 18:19:42 UTC (rev 23523)\n+++ branches/SAMBA_3_0_26/source/client/smbspool.c\t2007-06-16 18:54:13 UTC (rev 23524)\n@@ -47,6 +47,7 @@\n static struct cli_state *smb_complete_connection(const char *, const char *,int , const char *, const char *, const char *, const char *, int);\n static struct cli_state\t*smb_connect(const char *, const char *, int, const char *, const char *, const char *, const char *);\n static int\t\tsmb_print(struct cli_state *, char *, FILE *);\n+static char *\t\turi_unescape_alloc(const char *);\n \n \n /*\n@@ -62,8 +63,9 @@\n   int \t\tport;\t\t/* Port number */\n   char\t\turi[1024],\t/* URI */\n \t\t*sep,\t\t/* Pointer to separator */\n+\t\t*tmp, *tmp2,\t/* Temp pointers to do escaping */\n \t\t*password;\t/* Password */\n-  const char\t*username,\t/* Username */\n+  char\t\t*username,\t/* Username */\n \t\t*server,\t/* Server name */\n \t\t*printer;\t/* Printer name */\n   const char\t*workgroup;\t/* Workgroup */\n@@ -152,19 +154,24 @@\n \n   if ((sep = strrchr_m(uri, '@')) != NULL)\n   {\n-    username = uri + 6;\n+    tmp = uri + 6;\n     *sep++ = '\\0';\n \n+    /* username is in tmp */\n+\n     server = sep;\n \n    /*\n     * Extract password as needed...\n     */\n \n-    if ((password = strchr_m(username, ':')) != NULL)\n-      *password++ = '\\0';\n-    else\n+    if ((tmp2 = strchr_m(tmp, ':')) != NULL) {\n+      *tmp2++ = '\\0';\n+      password = uri_unescape_alloc(tmp2);\n+    } else {\n       password = null_str;\n+    }\n+    username = uri_unescape_alloc(tmp);\n   }\n   else\n   {\n@@ -173,16 +180,18 @@\n     server   = uri + 6;\n   }\n \n-  if ((sep = strchr_m(server, '/')) == NULL)\n+  tmp = server;\n+\n+  if ((sep = strchr_m(tmp, '/')) == NULL)\n   {\n     fputs(\"ERROR: Bad URI - need printer name!\\n\", stderr);\n     return (1);\n   }\n \n   *sep++ = '\\0';\n-  printer = sep;\n+  tmp2 = sep;\n \n-  if ((sep = strchr_m(printer, '/')) != NULL)\n+  if ((sep = strchr_m(tmp2, '/')) != NULL)\n   {\n    /*\n     * Convert to smb://[username:password@]workgroup/server/printer...\n@@ -190,12 +199,15 @@\n \n     *sep++ = '\\0';\n \n-    workgroup = server;\n-    server    = printer;\n-    printer   = sep;\n+    workgroup = uri_unescape_alloc(tmp);\n+    server    = uri_unescape_alloc(tmp2);\n+    printer   = uri_unescape_alloc(sep);\n   }\n-  else\n+  else {\n     workgroup = NULL;\n+    server = uri_unescape_alloc(tmp);\n+    printer = uri_unescape_alloc(tmp2);\n+  }\n   \n   if ((sep = strrchr_m(server, ':')) != NULL)\n   {\n@@ -203,7 +215,7 @@\n \n     port=atoi(sep);\n   }\n-  else\n+  else \n   \tport=0;\n \t\n  \n@@ -588,3 +600,38 @@\n   else\n     return (0);\n }\n+\n+static char *uri_unescape_alloc(const char *uritok)\n+{\n+\tchar *t, *ret;\n+\tconst char *p;\n+\tlong int val;\n+\tchar eval[3];\n+\n+\tret = (char *)SMB_MALLOC(strlen(uritok)+1);\n+\n+\tif (!ret) return NULL;\n+\n+\teval[2] = '\\0';\n+\n+\tfor (p = uritok, t = ret; *p; p++, t++) {\n+\t\tif (*p == '%') { /* unescape hex */\n+\t\t\tp++;\n+\t\t\teval[0] = *p;\n+\t\t\tp++;\n+\t\t\teval[1] = *p;\n+\t\t\tval = strtol(eval, NULL, 16);\n+\t\t\tif ((val == LONG_MIN || val == LONG_MAX) && errno == ERANGE) {\n+\t\t\t\tSAFE_FREE(ret);\n+\t\t\t\treturn NULL;\n+\t\t\t}\n+\t\t\t*t = (char)val;\n+\t\t} else {\n+\t\t\t*t = *p;\n+\t\t}\n+\t}\n+\n+\t*t = '\\0'; /*terminate*/\n+\n+\treturn ret;\n+}\n\n"}