{"category": "ham", "to_address": "<beginners@perl.org>", "from_address": "\"Bob McConnell\" <rvm@CBORD.com>", "subject": "Inter-thread communications", "body": "This is an offshoot of the thread \"Having trouble porting an application\nto MS-Windows\". This time I am looking at using fork() to separate input\nand output handling. But I am not sure how some of the IPC handling\nworks in the Win32 environment.\n\nI am trying to emulate the behavior of an existing POS system currently\ninstalled at a client location without having to install and set up a\ncopy of that system. I want to create two threads, one to read data from\na serial port and one to write data to that same serial port. The data\nin both cases is a framed packet with checksum and ACK/NAK responses.\nThis will have the affect of enabling full-duplex operations on the\nserial port, where my previous version was, in effect, two-way\nalternating half duplex. The framing is done with ASCII characters, like\nso:\n\n  headercontentchecksum\n\n1. The read thread must input the packet, validate the checksum and send\nACK/NAK out the port, via the write thread. The content is then stored\nor sent on. It must also forward any ACK or NAK received to the transmit\nthread. There is no chance of an ACK or NAK embedded in the packet, so\nescapes are not necessary.\n\n2. The write thread must frame the packet, insert the checksum, and\ntransmit it. Then it must wait up to three seconds for an ACK or NAK. If\nit receives the ACK, it waits for another message. If it gets a NAK, or\ntimes out, it transmits the packet again, up to three times. After three\ntries, an error is recorded and it looks for another message. It also\nmust insert the ACK/NAK from the receive thread into the transmit data\nstream, although that can be held until after the current packet has\nbeen sent.\n\nI have two questions about this. First, is there a standard Perl IPC\ninterface between threads? I am not familiar with pipes in this context,\nalthough I have used mailboxes and single word messages in various\nmulti-processing environments, including POSIX threads.\n\nSecond, is there a way to set this up so the transmit thread timeout can\nbe easily implemented as a side effect of waiting for the ACK/NAK to\narrive on that interface? I was thinking of using a semaphore, but they\ndon't appear to be implemented on Win32.\n\nFor this emulation, the outgoing messages are read from a text file and\nthe incoming messages are stored in another text file. Timing of\noutgoing messages is controlled when that file is read. I am hoping this\ncan provide a workaround for the alarm failure I ran into on the single\nthreaded version as well as being a better emulation of the actual\nsystem.\n\nThank you,\n\nBob McConnell\nPrincipal Communications Programmer\nThe CBORD Group, Inc.\n61 Brown Road\nIthaca NY, 14850\nPhone 607 257-2410\nFAX 607 257-1902\nEmail rvm@cbord.com\nWeb www.cbord.com\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n\n"}