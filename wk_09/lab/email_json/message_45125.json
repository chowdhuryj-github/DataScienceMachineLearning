{"category": "ham", "to_address": "\"Zack Weinberg\" <zackw@panix.com>", "from_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "subject": "Re: [R] still trying to wrap xyplot - ignore previous", "body": "On 6/8/07, Zack Weinberg  wrote:\n> As you may not be surprised to hear, no sooner did I post the previous\n> message than I realized I had a really dumb mistake.  I've now gotten\n> a bit farther but am still stuck.  New code:\n>\n> graph <- function (x, data, groups, xlab) {\n>   pg <- function(x, y, group.number, ...) fnord\n>   body(pg) <- substitute({\n>     panel.xyplot(x, y, ..., group.number=group.number)\n>     panel.text(2, unique(y[x==2]),\n>                levels(G)[group.number],\n>                pos=4, cex=0.5)\n>   }, list(G=eval(substitute(groups), data, parent.frame())))\n>\n>   print(xyplot(x, data=data, groups=substitute(groups),\n>                type='l',\n>                ylab=list(cex=1.1, label='Mean RT (ms)'),\n>                xlab=list(cex=1.1, label=xlab),\n>                scales=list(\n>                  x=list(alternating=c(1,1), tck=c(1,0)),\n>                  y=list(alternating=c(1,0))\n>                  ),\n>                panel=panel.superpose,\n>                panel.groups=pg\n>               ))\n> }\n>\n> Questions:\n> 1) The \"groups=substitute(groups)\" bit (in the call to xyplot) still\n> doesn't work.  As far as I can tell, xyplot wants the *symbol* which\n> is the name of the factor (in the data frame) to group by.\n> The above seems to wind up passing it the symbol \"groups\", which\n> causes the prepanel function to barf.  I have not been able to find\n> any way to evaluate one layer of \"groups\" to get me the symbol passed\n> in, rather than the value of that symbol.  Am I right?  How do I give\n> it what it wants?\n>\n> 2) Why do I have to do that stupid dance with replacing the body of\n> pg?  The documentation leads me to believe this is a lexically scoped\n> language, shouldn't it be able to pick G out of the enclosing frame?\n\nThis is all a consequence of non-standard evaluation, which can be a\nreal pain sometimes. I don't have a solution that is \"intuitive\", but\nI don't think there is one. This is what I would do (and there are\nexamples of this in lattice, e.g. see lattice:::dotplot.formula):\n\n\ngraph <- function (x, data, groups, xlab) {\n\n    ## set up g and pg (lexical scope does work here)\n    g <- eval(substitute(groups), data, parent.frame())\n    pg <- function(x, y, group.number, ...) {\n        panel.xyplot(x, y, ..., group.number=group.number)\n        panel.text(2, unique(y[x==2]),\n                   levels(g)[group.number],\n                   pos=4, cex=0.5)\n    }\n\n    ## modify and evaluate call without\n    ## actually evaluating 'groups'\n    ccall <- match.call()\n    ccall[[1]] <- quote(xyplot)\n    fixed.args <-\n        list(type='l',\n             ylab=list(cex=1.1, label='Mean RT (ms)'),\n             xlab=list(cex=1.1, label=xlab),\n             scales=list(\n             x=list(alternating=c(1,1), tck=c(1,0)),\n             y=list(alternating=c(1,0))\n             ),\n             panel=\"panel.superpose\",\n             panel.groups = pg)\n    ccall[names(fixed.args)] <- fixed.args\n    eval.parent(ccall)\n}\n\nsm <- data.frame(x = 1:10, y = rnorm(10), a = gl(3, 1, 10))\ngraph(y ~ x, sm, a, \"foo\")\n\nThis is a different approach from the one you were trying, but I think\nit makes more sense once you get used to it. Note that there are some\nsubtle things going on here. The 'g' used by pg() is available only\nbecause the relevant environment is stored and is accessible through\nthe \"trellis\" object:\n\n> foo <- graph(y ~ x, sm, a, \"foo\")\n> ls(environment(foo$panel.args.common$panel.groups))\n[1] \"ccall\"      \"data\"       \"fixed.args\" \"g\"          \"groups\"\n[6] \"pg\"         \"x\"          \"xlab\"\n\nHope this helps,\n\n-Deepayan\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}