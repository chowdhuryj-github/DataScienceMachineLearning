{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "allison@cvs.develooper.com", "subject": "[svn:parrot-pdd] r18475 - trunk/docs/pdds", "body": "Author: allison\nDate: Tue May  8 20:51:55 2007\nNew Revision: 18475\n\nModified:\n   trunk/docs/pdds/pdd15_objects.pod\n\nLog:\n[pdd]: Adding a description of :vtable and :method to Objects PDD. Thanks to Will Coleda for the suggestion.\n\n\nModified: trunk/docs/pdds/pdd15_objects.pod\n==============================================================================\n--- trunk/docs/pdds/pdd15_objects.pod\t(original)\n+++ trunk/docs/pdds/pdd15_objects.pod\tTue May  8 20:51:55 2007\n@@ -1021,7 +1021,38 @@\n \n =back\n \n-=head2 Vtable Overloading\n+=head2 PIR Class Definitions\n+\n+PIR provides some syntactic sugar for declaring classes.\n+\n+=over 4\n+\n+=item :method\n+\n+  .sub custom_method :method\n+    # ...\n+  .end\n+\n+Flags the code entity as a method.\n+\n+=item :vtable\n+\n+  .sub get_integer :vtable\n+    # ...\n+  .end\n+\n+Flags the code entity as a vtable override.\n+\n+=back\n+\n+:method and :vtable can be combined to indicate that a particular code entity\n+is callable both as a method and as a vtable override.\n+\n+If the class object has not yet been created at the point when the PIR subs are\n+compiled, the methods and vtable overrides are temporarily stored in the\n+associated namespace.\n+\n+=head2 Vtable Overriding\n \n Classes may override the vtable functions, allowing objects of a class to\n behave like a primitive PMC. To use these properly at a low-level\n\n"}