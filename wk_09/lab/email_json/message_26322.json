{"category": "ham", "to_address": "\"Jeff Pang\" <pangj@earthlink.net>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: forking problem with dbd::mysql", "body": "On 5/9/07, Jeff Pang  wrote:\nsnip\n> Yes but I think is this maybe a bug in DBI class?For example,open a file handle and\n> after forking child close that handle,this would not affect parent's handle.\nsnip\n\nIt definitely violates the principle of least surprise, but it is also\na very hard problem.  File handles are much simpler* in comparison.\nThe handle is auto-disconnecting so that you don't accidentally exit\nyour script leaving the database connection open.  Imagine a script\nthat connects to the database, runs a short query, and then ends.  Now\nimagine that script running several times a second.  Each time it runs\nit leaks a connection that is not reclaimed by the server until it\ntimes out (if it times out).  The proper way to handle this (in my\nopinion, which might be terribly flawed since I haven't thought about\nit very hard yet) is to have some sort of flag that can be set on the\ndatabase handle to tell the DBI to destroy it without closing the\nconnection.  This flag could be set in the child and everybody would\nbe happy.  I am looking in the docs now to see if such a flag exists.\nIf it doesn't then I am going to bug the maintainers of both the DBI\nand DBD::mysql to add it.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}