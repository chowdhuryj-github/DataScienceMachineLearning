{"category": "ham", "to_address": "Steve Peters <steve@fisharerojo.org>", "from_address": "Nicholas Clark <nick@ccl4.org>", "subject": "Re: Limiting Exported Symbols on GCC", "body": "On Thu, Apr 12, 2007 at 09:13:14AM -0500, Steve Peters wrote:\n> On Thu, Apr 12, 2007 at 01:37:24PM +0200, Ron Blaschke wrote:\n> > While poking the GCC documentation I found that there's a feature \n> > available to limit the exported symbols (with GCC >= 3.3).  Maybe worth \n> > considering?\n> > It's probably a design decision.  If there's an option to limit the \n> > exported symbols or make all available, which one should be taken?\n> > \n> > http://gcc.gnu.org/wiki/Visibility\n> > http://gcc.gnu.org/onlinedocs/gcc-3.3.6/gcc/Function-Attributes.html#Function-Attributes\n> > \n> > This can be done by adding C<-fvisibility=hidden> to CFLAGS and setting \n> > PARROT_API to C<__attribute__ ((visibility(\"default\")))>.\n> > \n> > \n> \n> I think that we need to tread very carefully with adding additional \n> gcc-isms to Parrot, lest we break compatibility with additional compilers\n> even further.  If Parrot will run everywhere, we need to think about \n> working more towards ANSI and POSIX compliance.\n\nOn the other hand, we've managed very well in Perl 5 with the flag data in\nembed.fnc and generating the annotated headers programmatically.\n\nI think it would have been nice to have had something like this some years\nago (er, maybe 10) to prevent the magpies from turning any and every function\nin the Perl 5 core into part of the supported API.\n\nParticularly given that on some platforms (such as Win32) API functions need\nto be exported explicitly, resulting in modules written on *nix platforms\nnot working on Win32. \n\n(and actually, I'm tempted to add it even now to Perl 5 to enforce what\nremains of our sanity)\n\nNicholas Clark\n\n"}