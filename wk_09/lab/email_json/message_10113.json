{"category": "ham", "to_address": "James Peach <jpeach@samba.org>", "from_address": "\"Gerald (Jerry) Carter\" <jerry@samba.org>", "subject": "Re: Broken idmap interface design", "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nJames Peach wrote:\n\n> There's two cases for mapping from SIDs to UGIDs.\n> \n> First case is where full SIDs are explicitly stored \n> in the directory or have a static partitioning (like\n> Unix Users and Unix Groups). In this case, you don't\n> need to be told what kind of ID the caller is looking\n> for, because the SID is globally unique, and must only \n> map to one ID.\n\nThat is the idmap_ad case where it is easy for the idmap\nbacked to determine the SID type.\n\n> Second case is where the SID is dynamically \n> generated from other information in the directory. In\n> this case, knowing the type of ID in advance helps\n> a lot and can prevent you generating bogus SIDs.\n> \n> I take it that it is this second case that is problematic?\n\nIt is the fact that the *default* winbind setup (using\ntdb, rid, or ldap) requires that the idmap child call\nback into the winbindd parent to get the SID type so\nit knows what to do.  This is a layering violation.\n\nThe caller asks the idmap backend to give it an id\nbut the backend the asks the caller to tell it\nwhat type of SID it is.  If this is needed, then the type\nsimply must be specified as a parameter or else we\nwill be tracking deadlocks in every idmap backend\nimplementation we have.\n\nThe problem was that the design was built for a specific\ncase and not the general case and is therefore not sufficient.\n\n>> Right now I'm going to do several things in order to get\n>> the code to a release point.\n>>\n>> (a) Remove WINBINDD_SIDS_TO_XIDS from winbindd_nss.h to\n>>    prevent us from having to support the broken call in\n>>    future releases.  The existing idmap_methods API will\n>>    not change but will become solely an internal interface\n>>    used by winbindd.\n>>\n>> (b) Overload the id_map.xid.type to be specified by the caller\n>>    and not filled by the idmap backend.\n> \n> So existing idmap modules will need to be changed?\n\nThat's debatable.  Right now, I'm considering the cache that\nwould require no change the the idmap interface, just how it\nis used.\n\nAn example mapping on SID to uid would be as so.  The\ncaller fills in these values:\n\n\tsid_copy( id.sid, sid_to_translate );\n\tid.xid.type = ID_TYPE_UID;\n\nThen the backend only fills in the id.xid.id field if the SID\ndoes in fact resolve to a uid.\n\nIn most cases I've considered for the caller already knows\nthe SID type so this is no additional burden.\n\nThis would be the bare minimum fix for 3.0.25.  3.0.26 would\nchange the idmap API but as there are no external consusmers\nother than winbindd, this should be easy enough.\n\n\n\n\ncheers, jerry\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.3 (GNU/Linux)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org\n\niD8DBQFGJ6z3IR7qMdg1EfYRAnDRAJ97e6yw2P8fVn2hZeBI/NfKBZDhSgCdFBvG\nhBevuH5gRTkSHR2Vw33ERBE=\n=Qoho\n-----END PGP SIGNATURE-----\n\n"}