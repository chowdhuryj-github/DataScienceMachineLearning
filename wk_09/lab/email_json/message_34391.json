{"category": "ham", "to_address": "\"Vladimir Eremeev\" <wl2776@gmail.com>", "from_address": "\"Gabor Grothendieck\" <ggrothendieck@gmail.com>", "subject": "Re: [R] Please, remind a function name", "body": "You could use the class dispatching mechanism:\n\n\nmymodel <- function(a, b, method = \"S\") {\n\t.Class <- method\n\tNextMethod(\"mymodel\")\n}\n\nmymodel.S <- function(a, b, method = \"S\") cat(\"S:\", a, b, method, \"\\n\")\nmymodel.HK <- function(a, b, method = \"S\") cat(\"HK:\", a, b, method, \"\\n\")\n\nmymodel(1:3, 1:4)\nmymodel(1:3, 1:4, \"S\")\nmymodel(1:3, 1:4, \"HK\")\n\n\n\nOn 5/22/07, Vladimir Eremeev  wrote:\n>\n> Sorry, I'm stuck. :)\n>\n> I am writing a function, which would fit either one linear model or another\n> one, depending on its argument model.type.\n> And I don't want to use several if's, because R allows doing it with much\n> more beauty.\n>\n> That is I am looking for prettier alternative to the following\n>\n> AB2C<-function(a,b,model.type=\"S\") { # or HK, and return NULL if this\n> argument has any other value\n> [ do some stuff]\n>\n>  if(model.type==\"S\") model<-lm( [s.model formula] )\n>  else if (model.type == \"HK\") model<-lm([hk.model formula])\n>  else model<-NULL\n>\n>  return(model)\n> }\n>\n> I was looking at \"switch\", but didn't come to solution. Sorry <:)\n>\n> --\n> View this message in context: http://www.nabble.com/Please%2C-remind-a-function-name-tf3797444.html#a10741597\n> Sent from the R help mailing list archive at Nabble.com.\n>\n> ______________________________________________\n> R-help@stat.math.ethz.ch mailing list\n> https://stat.ethz.ch/mailman/listinfo/r-help\n> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html\n> and provide commented, minimal, self-contained, reproducible code.\n>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}