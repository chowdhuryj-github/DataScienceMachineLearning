{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "Mark Difford <mark_difford@yahoo.co.uk>", "subject": "Re: [R] Controlling text and strip arrangement in xyplot", "body": "\nHi Deepayan,\n\nI, and probably quite a few others, will find this very useful until you\nfind the time to wrap up a proper implementation.\n\nMany thanks,\n\nBestR,\nMark.\n\n\nDeepayan Sarkar wrote:\n> \n> On 6/19/07, Juan Pablo Lewinger  wrote:\n>> I've searched the archives and read the xyplot help but can't figure\n>> out the 2 lattice questions below?\n>>\n>> Consider:\n>>\n>> library(lattice)\n>> DF <- data.frame(x=rnorm(20), y=rnorm(20), g1=rep(letters[1:2], 10),\n>>                   g2=rep(LETTERS[1:2], each=10),\n>> g3=rep(rep(letters[3:4],each=5),2))\n>>\n>> xyplot(y ~ x | g1 + g2, groups=g3, data=DF)\n>>\n>> 1) Is there a way to get one strip per row and column of panels as\n>> below instead of the default?\n>>\n>>\n>>         _|__a__|__b__|\n>>          |\n>>        B\n>>          |\n>>         --\n>>          |\n>>        A\n>>          |\n> \n> This has been discussed on the list before (if I remember correctly), and\n> I\n> have been meaning to add something to the latticeExtra package.  An\n> implementation would look something like this (beware of line wrapping):\n> \n> \n> useOuterStrips <-\n>     function(x,\n>              strip = strip.default,\n>              strip.left = strip.custom(horizontal = FALSE))\n> {\n>     dimx <- dim(x)\n>     stopifnot(inherits(x, \"trellis\"))\n>     stopifnot(length(dimx) == 2)\n>     opar <- if (is.null(x$par.settings)) list() else x$par.settings\n>     par.settings <-\n>         modifyList(opar,\n>                    list(layout.heights =\n>                         list(strip = c(rep(0, dimx[2]-1), 1)),\n>                         layout.widths =\n> \t\t\tlist(strip.left = c(1, rep(0, dimx[1]-1)))))\n>     update(x,\n>            par.settings = par.settings,\n>            strip = function(which.given, which.panel, ...) {\n>                if (which.given == 1)\n>                    strip(which.given = 1,\n>                          which.panel = which.panel[1],\n>                          ...)\n>            },\n>            strip.left = function(which.given, which.panel, ...) {\n>                if (which.given == 2)\n>                    strip.left(which.given = 1,\n>                               which.panel = which.panel[2],\n>                               ...)\n>            },\n>            par.strip.text = list(lines = 0.5),\n>            layout = dimx)\n> }\n> \n> \n> The function acts on a \"trellis\" object and returns an updated one, so\n> for your example, it would work like:\n> \n> useOuterStrips(xyplot(y ~ x | g1 + g2, groups=g3, data=DF))\n> \n> \n>> 2) How do I control the text of the strips so that for instance\n>> instead of \"a\" and \"b\" it reads\"g1=alpha\", \"g1=beta\" where \"alpha\"\n>> and \"beta\" stand for the corresponding greek symbols? (my difficulty\n>> here is not with the plotmath symbols but with controlling the text\n>> of the strips directly from the call to xyplot and not by renaming\n>> the levels of g1)\n> \n> Generally speaking, you need to write your own strip function.  The\n> default (strip.default) has some useful arguments that modify its\n> behaviour, and in particular 'factor.levels' might do what you\n> want.  If you are going to do this in conjunction with (1), life will\n> actually be simpler and you can get away with using strip.custom():\n> \n> \n> useOuterStrips(xyplot(y ~ x | g1 + g2, groups=g3, data=DF),\n>                strip =\n>                strip.custom(factor.levels =\n>                             expression(g[1]==alpha, g[1]==beta)),\n>                strip.left =\n>                strip.custom(horizontal = FALSE,\n>                             factor.levels =\n>                             expression(g[2]==gamma, g[2]==delta)))\n> \n> \n> Otherwise, you will really have to write a proper strip function that\n> calls strip.default() with different values of 'factor.levels'\n> depending on the value of 'which.given'.\n> \n> Note also the 'strip.names' and 'sep' argument of strip.default(),\n> which might be more in line with what you want to do.\n> \n> -Deepayan\n> \n> ______________________________________________\n> R-help@stat.math.ethz.ch mailing list\n> https://stat.ethz.ch/mailman/listinfo/r-help\n> PLEASE do read the posting guide\n> http://www.R-project.org/posting-guide.html\n> and provide commented, minimal, self-contained, reproducible code.\n> \n> \n\n-- \nView this message in context: http://www.nabble.com/Controlling-text-and-strip-arrangement-in-xyplot-tf3944756.html#a11201335\nSent from the R help mailing list archive at Nabble.com.\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}