{"category": "ham", "to_address": "\"Patrick R. Michaud\" <pmichaud@pobox.com>", "from_address": "Jonathan Worthington <jonathan@jnthn.net>", "subject": "Re: pdd15 - How do I add a class method?", "body": "Hi,\n\nPatrick R. Michaud wrote:\n> My first question is \"How do I add a class method?\" -- i.e.,\n> a method that operates on a class instance as opposed\n> to an object instance of that class.  Ideally the answer\n> would contain explanations/examples for defining such\n> methods in PIR and also as PMC methods.\n>   \nI had to deal with this when working on the .Net translator, though I \nreally fudged it. Basically, I just didn't have them as methods, but \nrather subs. That meant they didn't expect an invocant. And I translated \nthe callmethod .Net op to do the Right Thing. Or something along those \nlines. The disadvantage is that they won't dispatch as methods on the \ninstance of the object in Parrot-land (which is at least C# \nbehavior...you can't call static methods using obj.meth, only \nclass.meth, ignoring C# 3.0's extension methods). But that isn't Perl 6 \nbehavior, as I understand it.\n\nHow about writing the method without the :method modifier, but also \naddmethod'ing it to the class? Then it will be found by find_method, but \nwon't think the first parameter is an invocant. Something here doesn't \nfeel quite right to me, though I'm tired and can't put my finger on what.\n\nJonathan\n\n"}