{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jpeach@samba.org", "subject": "svn commit: samba r22507 - in branches/SAMBA_3_0/source: . nsswitch", "body": "Author: jpeach\nDate: 2007-04-24 18:19:13 +0000 (Tue, 24 Apr 2007)\nNew Revision: 22507\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22507\n\nLog:\nWrap the method of obtaining sockets to listen on.\n\nAdded:\n   branches/SAMBA_3_0/source/nsswitch/winbindd_sockinit.c\nModified:\n   branches/SAMBA_3_0/source/Makefile.in\n   branches/SAMBA_3_0/source/nsswitch/winbindd.c\n   branches/SAMBA_3_0/source/nsswitch/winbindd_util.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0/source/Makefile.in\t2007-04-24 18:02:23 UTC (rev 22506)\n+++ branches/SAMBA_3_0/source/Makefile.in\t2007-04-24 18:19:13 UTC (rev 22507)\n@@ -811,6 +811,7 @@\n \n WINBINDD_OBJ1 = \\\n \t\tnsswitch/winbindd.o       \\\n+\t\tnsswitch/winbindd_sockinit.o \\\n \t\tnsswitch/winbindd_user.o  \\\n \t\tnsswitch/winbindd_group.o \\\n \t\tnsswitch/winbindd_util.o  \\\n\nModified: branches/SAMBA_3_0/source/nsswitch/winbindd.c\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/winbindd.c\t2007-04-24 18:02:23 UTC (rev 22506)\n+++ branches/SAMBA_3_0/source/nsswitch/winbindd.c\t2007-04-24 18:19:13 UTC (rev 22507)\n@@ -26,7 +26,6 @@\n \n #include \"includes.h\"\n #include \"winbindd.h\"\n-#include \"smb_launchd.h\"\n \n #undef DBGC_CLASS\n #define DBGC_CLASS DBGC_WINBIND\n@@ -34,7 +33,6 @@\n BOOL opt_nocache = False;\n \n extern BOOL override_logfile;\n-static BOOL unlink_winbindd_socket = True;\n \n struct event_context *winbind_event_context(void)\n {\n@@ -121,15 +119,8 @@\n \n static void terminate(void)\n {\n-\tpstring path;\n \n-\t/* Remove socket file */\n-\tif (unlink_winbindd_socket) {\n-\t\tpstr_sprintf(path, \"%s/%s\",\n-\t\t\t WINBINDD_SOCKET_DIR, WINBINDD_SOCKET_NAME);\n-\t\tunlink(path);\n-\t}\n-\n+\twinbindd_release_sockets();\n \tidmap_close();\n \t\n \ttrustdom_cache_shutdown();\n@@ -719,43 +710,6 @@\n \treturn False;\n }\n \n-static BOOL winbindd_init_sockets(int *public_sock, int *priv_sock,\n-\t\t\t\tint *idle_timeout_sec)\n-{\n-\tstruct smb_launch_info linfo;\n-\n-\tif (smb_launchd_checkin_names(&linfo, \"WinbindPublicPipe\",\n-\t\t    \"WinbindPrivilegedPipe\", NULL)) {\n-\t\tif (linfo.num_sockets != 2) {\n-\t\t\tDEBUG(0, (\"invalid launchd configuration, \"\n-\t\t\t\t\"expected 2 sockets but got %d\\n\",\n-\t\t\t\tlinfo.num_sockets));\n-\t\t\treturn False;\n-\t\t}\n-\n-\t\t*public_sock = linfo.socket_list[0];\n-\t\t*priv_sock = linfo.socket_list[1];\n-\t\t*idle_timeout_sec = linfo.idle_timeout_secs;\n-\n-\t\tunlink_winbindd_socket = False;\n-\n-\t\tsmb_launchd_checkout(&linfo);\n-\t\treturn True;\n-\t} else {\n-\t\t*public_sock = open_winbindd_socket();\n-\t\t*priv_sock = open_winbindd_priv_socket();\n-\t\t*idle_timeout_sec = -1;\n-\n-\t\tif (*public_sock == -1 || *priv_sock == -1) {\n-\t\t\tDEBUG(0, (\"failed to open winbindd pipes: %s\\n\",\n-\t\t\t    errno ? strerror(errno) : \"unknown error\"));\n-\t\t\treturn False;\n-\t\t}\n-\n-\t\treturn True;\n-\t}\n-}\n-\n /* Process incoming clients on listen_sock.  We use a tricky non-blocking,\n    non-forking, non-threaded model which allows us to handle many\n    simultaneous connections while remaining impervious to many denial of\n\nAdded: branches/SAMBA_3_0/source/nsswitch/winbindd_sockinit.c\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/winbindd_sockinit.c\t2007-04-24 18:02:23 UTC (rev 22506)\n+++ branches/SAMBA_3_0/source/nsswitch/winbindd_sockinit.c\t2007-04-24 18:19:13 UTC (rev 22507)\n@@ -0,0 +1,127 @@\n+/* \n+   Unix SMB/CIFS implementation.\n+   Copyright (C) Tim Potter 2000-2001\n+   Copyright (C) 2001 by Martin Pool \n+   Copyright (C) James Peach 2007\n+   \n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+   \n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+*/\n+\n+#include \"includes.h\"\n+#include \"winbindd.h\"\n+#include \"smb_launchd.h\"\n+\n+#undef DBGC_CLASS\n+#define DBGC_CLASS DBGC_WINBIND\n+\n+/* Open the winbindd socket */\n+\n+static int _winbindd_socket = -1;\n+static int _winbindd_priv_socket = -1;\n+static BOOL unlink_winbindd_socket = True;\n+\n+static int open_winbindd_socket(void)\n+{\n+\tif (_winbindd_socket == -1) {\n+\t\t_winbindd_socket = create_pipe_sock(\n+\t\t\tWINBINDD_SOCKET_DIR, WINBINDD_SOCKET_NAME, 0755);\n+\t\tDEBUG(10, (\"open_winbindd_socket: opened socket fd %d\\n\",\n+\t\t\t   _winbindd_socket));\n+\t}\n+\n+\treturn _winbindd_socket;\n+}\n+\n+static int open_winbindd_priv_socket(void)\n+{\n+\tif (_winbindd_priv_socket == -1) {\n+\t\t_winbindd_priv_socket = create_pipe_sock(\n+\t\t\tget_winbind_priv_pipe_dir(), WINBINDD_SOCKET_NAME, 0750);\n+\t\tDEBUG(10, (\"open_winbindd_priv_socket: opened socket fd %d\\n\",\n+\t\t\t   _winbindd_priv_socket));\n+\t}\n+\n+\treturn _winbindd_priv_socket;\n+}\n+\n+/* Close the winbindd socket */\n+\n+static void close_winbindd_socket(void)\n+{\n+\tif (_winbindd_socket != -1) {\n+\t\tDEBUG(10, (\"close_winbindd_socket: closing socket fd %d\\n\",\n+\t\t\t   _winbindd_socket));\n+\t\tclose(_winbindd_socket);\n+\t\t_winbindd_socket = -1;\n+\t}\n+\tif (_winbindd_priv_socket != -1) {\n+\t\tDEBUG(10, (\"close_winbindd_socket: closing socket fd %d\\n\",\n+\t\t\t   _winbindd_priv_socket));\n+\t\tclose(_winbindd_priv_socket);\n+\t\t_winbindd_priv_socket = -1;\n+\t}\n+}\n+\n+BOOL winbindd_init_sockets(int *public_sock, int *priv_sock,\n+\t\t\t\tint *idle_timeout_sec)\n+{\n+\tstruct smb_launch_info linfo;\n+\n+\tif (smb_launchd_checkin_names(&linfo, \"WinbindPublicPipe\",\n+\t\t    \"WinbindPrivilegedPipe\", NULL)) {\n+\t\tif (linfo.num_sockets != 2) {\n+\t\t\tDEBUG(0, (\"invalid launchd configuration, \"\n+\t\t\t\t\"expected 2 sockets but got %d\\n\",\n+\t\t\t\tlinfo.num_sockets));\n+\t\t\treturn False;\n+\t\t}\n+\n+\t\t*public_sock = _winbindd_socket = linfo.socket_list[0];\n+\t\t*priv_sock = _winbindd_priv_socket = linfo.socket_list[1];\n+\t\t*idle_timeout_sec = linfo.idle_timeout_secs;\n+\n+\t\tunlink_winbindd_socket = False;\n+\n+\t\tsmb_launchd_checkout(&linfo);\n+\t\treturn True;\n+\t} else {\n+\t\t*public_sock = open_winbindd_socket();\n+\t\t*priv_sock = open_winbindd_priv_socket();\n+\t\t*idle_timeout_sec = -1;\n+\n+\t\tif (*public_sock == -1 || *priv_sock == -1) {\n+\t\t\tDEBUG(0, (\"failed to open winbindd pipes: %s\\n\",\n+\t\t\t    errno ? strerror(errno) : \"unknown error\"));\n+\t\t\treturn False;\n+\t\t}\n+\n+\t\treturn True;\n+\t}\n+}\n+\n+void winbindd_release_sockets(void)\n+{\n+\tpstring path;\n+\n+\tclose_winbindd_socket();\n+\n+\t/* Remove socket file */\n+\tif (unlink_winbindd_socket) {\n+\t\tpstr_sprintf(path, \"%s/%s\",\n+\t\t\t WINBINDD_SOCKET_DIR, WINBINDD_SOCKET_NAME);\n+\t\tunlink(path);\n+\t}\n+}\n+\n\nModified: branches/SAMBA_3_0/source/nsswitch/winbindd_util.c\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/winbindd_util.c\t2007-04-24 18:02:23 UTC (rev 22506)\n+++ branches/SAMBA_3_0/source/nsswitch/winbindd_util.c\t2007-04-24 18:19:13 UTC (rev 22507)\n@@ -36,15 +36,6 @@\n  * Winbind daemon for NT domain authentication nss module.\n  **/\n \n-\n-/**\n- * Used to clobber name fields that have an undefined value.\n- *\n- * Correct code should never look at a field that has this value.\n- **/\n-\n-static const fstring name_deadbeef = \"\";\n-\n /* The list of trusted domains.  Note that the list can be deleted and\n    recreated using the init_domain_list() function so pointers to\n    individual winbindd_domain structures cannot be made.  Keep a copy of\n@@ -915,53 +906,6 @@\n \treturn lock_path(WINBINDD_PRIV_SOCKET_SUBDIR);\n }\n \n-/* Open the winbindd socket */\n-\n-static int _winbindd_socket = -1;\n-static int _winbindd_priv_socket = -1;\n-\n-int open_winbindd_socket(void)\n-{\n-\tif (_winbindd_socket == -1) {\n-\t\t_winbindd_socket = create_pipe_sock(\n-\t\t\tWINBINDD_SOCKET_DIR, WINBINDD_SOCKET_NAME, 0755);\n-\t\tDEBUG(10, (\"open_winbindd_socket: opened socket fd %d\\n\",\n-\t\t\t   _winbindd_socket));\n-\t}\n-\n-\treturn _winbindd_socket;\n-}\n-\n-int open_winbindd_priv_socket(void)\n-{\n-\tif (_winbindd_priv_socket == -1) {\n-\t\t_winbindd_priv_socket = create_pipe_sock(\n-\t\t\tget_winbind_priv_pipe_dir(), WINBINDD_SOCKET_NAME, 0750);\n-\t\tDEBUG(10, (\"open_winbindd_priv_socket: opened socket fd %d\\n\",\n-\t\t\t   _winbindd_priv_socket));\n-\t}\n-\n-\treturn _winbindd_priv_socket;\n-}\n-\n-/* Close the winbindd socket */\n-\n-void close_winbindd_socket(void)\n-{\n-\tif (_winbindd_socket != -1) {\n-\t\tDEBUG(10, (\"close_winbindd_socket: closing socket fd %d\\n\",\n-\t\t\t   _winbindd_socket));\n-\t\tclose(_winbindd_socket);\n-\t\t_winbindd_socket = -1;\n-\t}\n-\tif (_winbindd_priv_socket != -1) {\n-\t\tDEBUG(10, (\"close_winbindd_socket: closing socket fd %d\\n\",\n-\t\t\t   _winbindd_priv_socket));\n-\t\tclose(_winbindd_priv_socket);\n-\t\t_winbindd_priv_socket = -1;\n-\t}\n-}\n-\n /*\n  * Client list accessor functions\n  */\n\n"}