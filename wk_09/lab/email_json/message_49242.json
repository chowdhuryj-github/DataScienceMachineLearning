{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23526 - in branches/SAMBA_3_0_26/source/smbd: .", "body": "Author: vlendec\nDate: 2007-06-16 19:58:17 +0000 (Sat, 16 Jun 2007)\nNew Revision: 23526\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23526\n\nLog:\nMerge 23522/23523 from 3_0:\n\nSave us a kilobyte stack space in a hot code path: I can't see a reason\nwhy check_path_syntax should not be able to run in-line. The destination\npointer either walks side by side with the source pointer or is\ndecremented. So as far as I can see s>=d is true throughout the whole\nroutine.\n\n\nModified:\n   branches/SAMBA_3_0_26/source/smbd/msdfs.c\n   branches/SAMBA_3_0_26/source/smbd/reply.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0_26/source/smbd/msdfs.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/smbd/msdfs.c\t2007-06-16 18:59:02 UTC (rev 23525)\n+++ branches/SAMBA_3_0_26/source/smbd/msdfs.c\t2007-06-16 19:58:17 UTC (rev 23526)\n@@ -144,14 +144,16 @@\n \n \t*ppath_contains_wcard = False;\n \n+\tpstrcpy(pdp->reqpath, p);\n+\n \t/* Rest is reqpath. */\n \tif (pdp->posix_path) {\n-\t\tstatus = check_path_syntax_posix(pdp->reqpath, p);\n+\t\tstatus = check_path_syntax_posix(pdp->reqpath);\n \t} else {\n \t\tif (allow_wcards) {\n-\t\t\tstatus = check_path_syntax_wcard(pdp->reqpath, p, ppath_contains_wcard);\n+\t\t\tstatus = check_path_syntax_wcard(pdp->reqpath, ppath_contains_wcard);\n \t\t} else {\n-\t\t\tstatus = check_path_syntax(pdp->reqpath, p);\n+\t\t\tstatus = check_path_syntax(pdp->reqpath);\n \t\t}\n \t}\n \n\nModified: branches/SAMBA_3_0_26/source/smbd/reply.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/smbd/reply.c\t2007-06-16 18:59:02 UTC (rev 23525)\n+++ branches/SAMBA_3_0_26/source/smbd/reply.c\t2007-06-16 19:58:17 UTC (rev 23526)\n@@ -47,13 +47,12 @@\n /* Custom version for processing POSIX paths. */\n #define IS_PATH_SEP(c,posix_only) ((c) == '/' || (!(posix_only) && (c) == '\\\\'))\n \n-NTSTATUS check_path_syntax_internal(pstring destname,\n-\t\t\t\t    const pstring srcname,\n-\t\t\t\t    BOOL posix_path,\n-\t\t\t\t    BOOL *p_last_component_contains_wcard)\n+static NTSTATUS check_path_syntax_internal(char *path,\n+\t\t\t\t\t   BOOL posix_path,\n+\t\t\t\t\t   BOOL *p_last_component_contains_wcard)\n {\n-\tchar *d = destname;\n-\tconst char *s = srcname;\n+\tchar *d = path;\n+\tconst char *s = path;\n \tNTSTATUS ret = NT_STATUS_OK;\n \tBOOL start_of_name_component = True;\n \n@@ -68,7 +67,7 @@\n \t\t\twhile (IS_PATH_SEP(*s,posix_path)) {\n \t\t\t\ts++;\n \t\t\t}\n-\t\t\tif ((d != destname) && (*s != '\\0')) {\n+\t\t\tif ((d != path) && (*s != '\\0')) {\n \t\t\t\t/* We only care about non-leading or trailing '/' or '\\\\' */\n \t\t\t\t*d++ = '/';\n \t\t\t}\n@@ -88,13 +87,13 @@\n \t\t\t\t */\n \n \t\t\t\t/* If  we just added a '/' - delete it */\n-\t\t\t\tif ((d > destname) && (*(d-1) == '/')) {\n+\t\t\t\tif ((d > path) && (*(d-1) == '/')) {\n \t\t\t\t\t*(d-1) = '\\0';\n \t\t\t\t\td--;\n \t\t\t\t}\n \n \t\t\t\t/* Are we at the start ? Can't go back further if so. */\n-\t\t\t\tif (d <= destname) {\n+\t\t\t\tif (d <= path) {\n \t\t\t\t\tret = NT_STATUS_OBJECT_PATH_SYNTAX_BAD;\n \t\t\t\t\tbreak;\n \t\t\t\t}\n@@ -102,7 +101,7 @@\n \t\t\t\t/* We know this is safe as '/' cannot be part of a mb sequence. */\n \t\t\t\t/* NOTE - if this assumption is invalid we are not in good shape... */\n \t\t\t\t/* Decrement d first as d points to the *next* char to write into. */\n-\t\t\t\tfor (d--; d > destname; d--) {\n+\t\t\t\tfor (d--; d > path; d--) {\n \t\t\t\t\tif (*d == '/')\n \t\t\t\t\t\tbreak;\n \t\t\t\t}\n@@ -176,10 +175,10 @@\n  No wildcards allowed.\n ****************************************************************************/\n \n-NTSTATUS check_path_syntax(pstring destname, const pstring srcname)\n+NTSTATUS check_path_syntax(char *path)\n {\n \tBOOL ignore;\n-\treturn check_path_syntax_internal(destname, srcname, False, &ignore);\n+\treturn check_path_syntax_internal(path, False, &ignore);\n }\n \n /****************************************************************************\n@@ -188,9 +187,9 @@\n  a wildcard.\n ****************************************************************************/\n \n-NTSTATUS check_path_syntax_wcard(pstring destname, const pstring srcname, BOOL *p_contains_wcard)\n+NTSTATUS check_path_syntax_wcard(char *path, BOOL *p_contains_wcard)\n {\n-\treturn check_path_syntax_internal(destname, srcname, False, p_contains_wcard);\n+\treturn check_path_syntax_internal(path, False, p_contains_wcard);\n }\n \n /****************************************************************************\n@@ -199,10 +198,10 @@\n  set (a safe assumption).\n ****************************************************************************/\n \n-NTSTATUS check_path_syntax_posix(pstring destname, const pstring srcname)\n+NTSTATUS check_path_syntax_posix(char *path)\n {\n \tBOOL ignore;\n-\treturn check_path_syntax_internal(destname, srcname, True, &ignore);\n+\treturn check_path_syntax_internal(path, True, &ignore);\n }\n \n /****************************************************************************\n@@ -212,17 +211,15 @@\n size_t srvstr_get_path_wcard(char *inbuf, char *dest, const char *src, size_t dest_len, size_t src_len, int flags,\n \t\t\t\tNTSTATUS *err, BOOL *contains_wcard)\n {\n-\tpstring tmppath;\n-\tchar *tmppath_ptr = tmppath;\n \tsize_t ret;\n #ifdef DEVELOPER\n \tSMB_ASSERT(dest_len == sizeof(pstring));\n #endif\n \n \tif (src_len == 0) {\n-\t\tret = srvstr_pull_buf( inbuf, tmppath_ptr, src, dest_len, flags);\n+\t\tret = srvstr_pull_buf( inbuf, dest, src, dest_len, flags);\n \t} else {\n-\t\tret = srvstr_pull( inbuf, tmppath_ptr, src, dest_len, src_len, flags);\n+\t\tret = srvstr_pull( inbuf, dest, src, dest_len, src_len, flags);\n \t}\n \n \t*contains_wcard = False;\n@@ -232,15 +229,14 @@\n \t\t * For a DFS path the function parse_dfs_path()\n \t\t * will do the path processing, just make a copy.\n \t\t */\n-\t\tpstrcpy(dest, tmppath);\n \t\t*err = NT_STATUS_OK;\n \t\treturn ret;\n \t}\n \n \tif (lp_posix_pathnames()) {\n-\t\t*err = check_path_syntax_posix(dest, tmppath);\n+\t\t*err = check_path_syntax_posix(dest);\n \t} else {\n-\t\t*err = check_path_syntax_wcard(dest, tmppath, contains_wcard);\n+\t\t*err = check_path_syntax_wcard(dest, contains_wcard);\n \t}\n \n \treturn ret;\n@@ -252,17 +248,15 @@\n \n size_t srvstr_get_path(char *inbuf, char *dest, const char *src, size_t dest_len, size_t src_len, int flags, NTSTATUS *err)\n {\n-\tpstring tmppath;\n-\tchar *tmppath_ptr = tmppath;\n \tsize_t ret;\n #ifdef DEVELOPER\n \tSMB_ASSERT(dest_len == sizeof(pstring));\n #endif\n \n \tif (src_len == 0) {\n-\t\tret = srvstr_pull_buf( inbuf, tmppath_ptr, src, dest_len, flags);\n+\t\tret = srvstr_pull_buf( inbuf, dest, src, dest_len, flags);\n \t} else {\n-\t\tret = srvstr_pull( inbuf, tmppath_ptr, src, dest_len, src_len, flags);\n+\t\tret = srvstr_pull( inbuf, dest, src, dest_len, src_len, flags);\n \t}\n \n \tif (SVAL(inbuf,smb_flg2) & FLAGS2_DFS_PATHNAMES) {\n@@ -270,15 +264,14 @@\n \t\t * For a DFS path the function parse_dfs_path()\n \t\t * will do the path processing, just make a copy.\n \t\t */\n-\t\tpstrcpy(dest, tmppath);\n \t\t*err = NT_STATUS_OK;\n \t\treturn ret;\n \t}\n \n \tif (lp_posix_pathnames()) {\n-\t\t*err = check_path_syntax_posix(dest, tmppath);\n+\t\t*err = check_path_syntax_posix(dest);\n \t} else {\n-\t\t*err = check_path_syntax(dest, tmppath);\n+\t\t*err = check_path_syntax(dest);\n \t}\n \n \treturn ret;\n\n"}