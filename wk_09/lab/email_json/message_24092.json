{"category": "ham", "to_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "from_address": "\"hadley wickham\" <h.wickham@gmail.com>", "subject": "Re: [R] levelplot and unequal cell sizes", "body": "On 4/26/07, Deepayan Sarkar  wrote:\n> On 4/25/07, Waichler, Scott R  wrote:\n> > Hadley and Deepayan,\n> >\n> > Thank you for responding.  Here is a simple example of what I'm talking\n> > about.  It is a grid that is 5 cells wide by 2 cells tall.  The width of\n> > the cells in the x-direction is variable; the cells at either end have\n> > width = 4 units, and the three cells in the middle have width = 2 units.\n> > My objective is to have the color contour boundaries fall on the cell\n> > boundaries instead of equidistant between cell nodes.  In the plot, I\n> > want the cyan/blue and orange/gray boundaries to be located at the red\n> > cell boundary lines.  Also, the colored regions should extend to the\n> > ends of the domain (x = 0, 14).\n> >\n> >\n> > library(lattice)\n> >\n> > x.node <- rep(c(2, 5, 7, 9, 12), 2)\n> > y.node <- c(rep(0.5, 5), rep(1.5, 5))\n> > z <- rep(1:5, 2)\n> > contour.levels <- seq(0.5, 5.5, by=1)\n> > x.cell.boundary <- c(0, 4, 6, 8, 10, 14)\n> > contour.colors <- c(\"cyan\", \"blue\", \"green\", \"orange\", \"gray\")\n> >\n> > print(\n> >   levelplot(z ~ x.node * y.node,\n> >      panel = function(z,...) {\n> >         panel.levelplot(z,...)\n> >         panel.abline(v = x.cell.boundary, col=\"red\")\n> >      },\n> >      xlim = range(x.cell.boundary),\n> >      at=contour.levels,\n> >      colorkey = list(space=\"top\", width=1, height=0.9,\n> >                      at=1:5,\n> >                      col=contour.colors,\n> >                      labels=list(labels=z, at=z)\n> >                     ),\n> >      col.regions=contour.colors,\n> >      region = T,\n> >      contour = F\n> >   )\n> > )\n>\n> You are right, panel.levelplot is indeed assuming that the boundaries\n> are between consecutive midpoints. There is no built in way around\n> that; there simply isn't enough information available to the panel\n> function.\n>\n> The cleanest solution, in principle, is to write your own panel\n> function that ends up calling panel.polygon or grid.polygon.\n> panel.levelplot is a good starting point (the only tricky part is\n> getting the colors right, almost everything else you can get rid of).\n> Maybe Hadley will have a simpler solution.\n\nSorry, it's taken me so long to get back to you on this, but I've been\ntravelling and internet access has been spotty.\n\nYou can do something very similar with ggtile, which already has the\nwidth and height arguments build in (but defaults to similar behaviour\nto lattice).   If you don't mind, I'll include this example in the\nnext version of ggplot so others can see how to use it.\n\nHadley\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}