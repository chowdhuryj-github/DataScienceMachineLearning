{"category": "ham", "to_address": "ron@rblasch.org", "from_address": "\"jerry gay\" <jerry.gay@gmail.com>", "subject": "Re: [Proposed PATCH] Change libparrot Names and Locations", "body": "On 4/12/07, Ron Blaschke  wrote:\n> >> -        # If we are building shared, need to include dynamic\n> >> libparrot.lib, otherwise\n> >> +\n> >> +        # If we are building shared, need to include dynamic\n> >> parrot.lib, otherwise\n> >>          # the static libparrot.lib.\n> > this code section and this comment in particular interests me. it\n> > shows me that the name of the dynamic lib is different than the static\n> > lib. this reminds me of some time ago when static/dynamic builds of\n> > parrot were overhauled, allowing either type to be built. i always\n> > wondered if we could build *both*. do you think this patch gets us\n> > closer to building both static and dynamic parrot in the same build?\n>\n> The patch doesn't change that.  Previously, the static library was built\n> at F, the import library at F (no\n> blib/lib here!).  Now it's F and\n> F, respectively.\n>\n> 11.04.2007  20:58        19.226.530 libparrot.lib\n> 11.04.2007  19:43         2.685.438 parrot.lib\n>\n> Both libraries get built during make, but I'm not sure if libparrot is\n> usable.  Are we talking about a statically linked parrot.exe?  I can\n> look into this if you like.\n>\nyes, static linking of parrot.exe. debugging is much easier with\nstatic parrot, embedding easier with dynamic parrot. it'd be nice to\nhave the best of both worlds--i won't get into debugging embedded\nparrot, that's *supposed* to be difficult ;-)\n\n~jerry\n\n"}