{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 12007: Some more work on python bindings. in\n\tfile:///home/jelmer/bzr.samba/python/", "body": "At file:///home/jelmer/bzr.samba/python/\n\n------------------------------------------------------------\nrevno: 12007\nrevision-id: jelmer@samba.org-20070427213420-357blszvnfm0ynou\nparent: jelmer@samba.org-20070426105008-heuatyry9ce2tccm\ncommitter: Jelmer Vernooij \nbranch nick: python\ntimestamp: Fri 2007-04-27 23:34:20 +0200\nmessage:\n  Some more work on python bindings.\nadded:\n  source/scripting/python/credentials.py credentials.py-20070427191210-euo61ov2u851ndr7-1\n  source/scripting/python/tests/ tests-20070427191204-rfs15exymc1wf5rw-1\n  source/scripting/python/tests/param.py param.py-20070427191204-rfs15exymc1wf5rw-2\nrenamed:\n  source/scripting/python/param.c => source/scripting/python/parammodule.c param.c-20070425124147-y6pej29g7xqsb3n6-1\nmodified:\n  .bzrignore                     svn-v2:17811@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-.bzrignore\n  source/build/m4/public.m4      svn-v2:7274@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fbuild%2fm4%2fpublic.m4\n  source/build/smb_build/config_mk.pm svn-v2:3690@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fbuild%2fsmb_build%2fconfig_mk.pm\n  source/build/smb_build/input.pm svn-v2:3690@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fbuild%2fsmb_build%2finput.pm\n  source/lib/ldb/config.mk       svn-v2:665@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fldb%2fconfig.mk\n  source/lib/python/config.m4    configure.in-20070423105804-3mrp9flhlt8pjj8v-11\n  source/lib/python/config.mk    makefile.pre.in-20070423105804-3mrp9flhlt8pjj8v-5\n  source/lib/python/setup.py*    setup.py-20070423105804-3mrp9flhlt8pjj8v-14\n  source/lib/tdb/config.mk       svn-v2:728@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2ftdb%2fconfig.mk\n  source/libcli/config.mk        svn-v2:1436@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flibcli%2fconfig.mk\n  source/scripting/python/config.mk config.mk-20070425124132-wptmykwi2tvyqm26-1\n  source/scripting/python/provision.py provision.py-20070424120955-t8vt1hp427dqjp2u-1\n  source/scripting/python/upgrade.py upgrade.py-20070424123152-541ykovl4lb6s03k-1\n  source/scripting/swig/config.mk svn-v2:14906@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fscripting%2fswig%2fconfig.mk\n  source/setup/provision         svn-v2:8319@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fsetup%2fprovision\n  source/scripting/python/parammodule.c param.c-20070425124147-y6pej29g7xqsb3n6-1\n=== added file 'source/scripting/python/credentials.py'\n--- a/source/scripting/python/credentials.py\t1970-01-01 00:00:00 +0000\n+++ b/source/scripting/python/credentials.py\t2007-04-27 21:34:20 +0000\n@@ -0,0 +1,3 @@\n+credentials = \"\"\n+def system_session():\n+    pass\n\n=== added directory 'source/scripting/python/tests'\n=== added file 'source/scripting/python/tests/param.py'\n--- a/source/scripting/python/tests/param.py\t1970-01-01 00:00:00 +0000\n+++ b/source/scripting/python/tests/param.py\t2007-04-27 21:34:20 +0000\n@@ -0,0 +1,42 @@\n+#!/usr/bin/python\n+# Some simple tests for the Python bindings for param.\n+# Note that this tests just the interface of the Python bindings, \n+# not the param code itself.\n+#\n+# Copyright (C) 2007 Jelmer Vernooij \n+# Published under the GNU LGPL\n+from param import ParamFile, global_params\n+from unittest import TestCase\n+\n+class SimpleParamTest(TestCase):\n+    def setUp(self):\n+        super(SimpleParamTest, self).setUp()\n+        self.param = ParamFile(\"bla\")\n+\n+    def test_get_string(self):\n+        self.param.globals[\"bla\"] = \"some long text\"\n+        self.assertEquals(\"some long text\", self.param.globals[\"bla\"])\n+\n+    def test_get_list(self):\n+        self.param.globals[\"some variable\"] = \"value;list\"\n+        self.assertEquals([\"value\", \"list\"], \n+                self.param.globals.get_list(\"some variable\"))\n+\n+    def test_get_integer(self):\n+        self.param.globals[\"some integer\"] = \"42\"\n+        self.assertEquals(42, self.param.globals.get_int(\"some integer\"))\n+\n+    def test_set_integer(self):\n+        self.param.globals[\"bla int\"] = 42\n+        self.assertEquals(42, self.param.globals.get_int(\"bla int\"))\n+\n+    def set_parameter(self):\n+        self.param.set(\"bla\", \"foobar\")\n+        self.assertEquals(\"foobar\", self.param.get_string(\"bla\"))\n+\n+    def get_share(self):\n+        self.param.shares[\"nonexisting\"][\"read only\"] = True\n+\n+class DefaultConfTest(TestCase):\n+    def test_default_config(self):\n+        self.assertTrue(len(self.param.globals[\"netbios name\"]) > 1)\n\n=== renamed file 'source/scripting/python/param.c' => 'source/scripting/python/parammodule.c'\n--- a/source/scripting/python/param.c\t2007-04-25 12:42:41 +0000\n+++ b/source/scripting/python/parammodule.c\t2007-04-27 21:34:20 +0000\n@@ -25,6 +25,21 @@\n #include \"Python.h\"\n #include \"param/param.h\"\n \n+PyTypeObject noddy_NoddyType;\n+\n+typedef struct {\n+\t    PyObject_HEAD\n+} noddy_NoddyObject;\n+\n+static PyObject *loadparm_object(void)\n+{\n+\tPyObject *self = PyObject_New();\t\n+\n+\t/* FIXME */\n+\n+\treturn self;\n+}\n+\n static PyObject *param_load(PyObject *self, PyObject *args)\n {\n \tchar *filename;\n@@ -35,11 +50,16 @@\n \n \tparam = PyObject_New();\n \n-\t\n+\t/* FIXME: Add members:\n+\t *   globals\n+\t *   shares\n+\t */\n+\n+\treturn param;\n }\n \n static PyMethodDef methods[] = {\n-\t{ \"load\", (PyCFunction)param_load, METH_VARARGS, NULL},\n+\t{ \"ParamFile\", (PyCFunction)param_load, METH_VARARGS, NULL},\n \t{ NULL, NULL }\n };\n \n@@ -51,6 +71,6 @@\n \tif (mod == NULL)\n \t\treturn;\n \n-\tPyModule_AddObject\n-\n+\t/* FIXME: Check error code */\n+\tPyModule_AddObject(mod, \"default_config\", loadparm_object());\n }\n\n=== modified file '.bzrignore'\n--- a/.bzrignore\t2007-04-25 12:42:41 +0000\n+++ b/.bzrignore\t2007-04-27 21:34:20 +0000\n@@ -179,3 +179,4 @@\n lib/ldb/swig/ldb.py\n source/lib/ldb/swig/ldb.py\n source/lib/tdb/swig/tdb.py\n+source/lib/tdb/swig/tdb_wrap.c\n\n=== modified file 'source/build/m4/public.m4'\n--- a/source/build/m4/public.m4\t2007-04-24 10:52:53 +0000\n+++ b/source/build/m4/public.m4\t2007-04-27 21:34:20 +0000\n@@ -24,7 +24,7 @@\n # Start Subsystem $1\n @<:@SUBSYSTEM::$1@:>@\n OBJ_FILES = $2\n-PRIVATE_DEPENDENCIES = $3\n+PUBLIC_DEPENDENCIES = $3\n CFLAGS = $4\n ENABLE = YES\n # End Subsystem $1\n\n=== modified file 'source/build/smb_build/config_mk.pm'\n--- a/source/build/smb_build/config_mk.pm\t2007-04-24 15:41:33 +0000\n+++ b/source/build/smb_build/config_mk.pm\t2007-04-27 21:34:20 +0000\n@@ -19,10 +19,11 @@\n \t\t\"CPPFLAGS\"\t\t=> \"list\",\n \t\t\"LDFLAGS\"\t\t=> \"list\",\n \t\t},\n-\t\"SWIG\" => {\n+\t\"PYTHON\" => {\n \t\tSWIG_FILE => \"string\",\n \t\t\"PRIVATE_DEPENDENCIES\"\t=> \"list\",\n \t\t\"PUBLIC_DEPENDENCIES\"\t=> \"list\",\n+\t\t\"OBJ_FILES\" => \"list\",\n \t\t\"ENABLE\"\t\t=> \"bool\",\n \t},\n \t\"SUBSYSTEM\" => {\n\n=== modified file 'source/build/smb_build/input.pm'\n--- a/source/build/smb_build/input.pm\t2007-04-25 10:52:04 +0000\n+++ b/source/build/smb_build/input.pm\t2007-04-27 21:34:20 +0000\n@@ -133,22 +133,28 @@\n \tadd_libreplace($lib);\n }\n \n-sub check_swig($$)\n+sub check_python($$)\n {\n-\tmy ($INPUT, $swig) = @_;\n-\n-\treturn if ($swig->{ENABLE} ne \"YES\");\n-\t\n-\tmy $dirname = dirname($swig->{SWIG_FILE});\n-\tmy $basename = basename($swig->{SWIG_FILE}, \".i\");\n-\n-\t$swig->{OUTPUT_TYPE} = [\"SHARED_LIBRARY\"];\n-\t$swig->{LIBRARY_REALNAME} = \"$dirname/_$basename.\\$(SHLIBEXT)\";\n-\t$swig->{OBJ_FILES} = [\"$dirname/$basename\\_wrap\\.o\"];\n-\t$swig->{INSTALLDIR} = \"PYTHONDIR\";\n-\tpush (@{$swig->{PUBLIC_DEPENDENCIES}}, \"LIBPYTHON\");\n-\n-\tcheck_library($INPUT, $swig, [\"SHARED_LIBRARY\"]);\n+\tmy ($INPUT, $python) = @_;\n+\n+\treturn if ($python->{ENABLE} ne \"YES\");\n+\n+\t$python->{OUTPUT_TYPE} = [\"SHARED_LIBRARY\"];\n+\t$python->{INSTALLDIR} = \"PYTHONDIR\";\n+\tpush (@{$python->{PUBLIC_DEPENDENCIES}}, \"LIBPYTHON\");\n+\tif (defined($python->{SWIG_FILE})) {\n+\t\tmy $dirname = dirname($python->{SWIG_FILE});\n+\t\tmy $basename = basename($python->{SWIG_FILE}, \".i\");\n+\n+\t\t$python->{OBJ_FILES} = [\"$dirname/$basename\\_wrap.o\"];\n+\t\t$python->{LIBRARY_REALNAME} = \"$dirname/_$basename.\\$(SHLIBEXT)\";\n+\t} else {\n+\t\tmy $basename = $python->{NAME};\n+\t\t$basename =~ s/^python_//g;\n+\t\t$python->{LIBRARY_REALNAME} = \"$basename.\\$(SHLIBEXT)\";\n+\t}\n+\n+\tcheck_library($INPUT, $python, [\"SHARED_LIBRARY\"]);\n }\n \n sub check_binary($$)\n@@ -259,8 +265,8 @@\n \t\t\tcheck_library($INPUT, $part, $lib_ot);\n \t\t} elsif ($part->{TYPE} eq \"BINARY\") {\n \t\t\tcheck_binary($INPUT, $part);\n-\t\t} elsif ($part->{TYPE} eq \"SWIG\") {\n-\t\t\tcheck_swig($INPUT, $part);\n+\t\t} elsif ($part->{TYPE} eq \"PYTHON\") {\n+\t\t\tcheck_python($INPUT, $part);\n \t\t} elsif ($part->{TYPE} eq \"EXT_LIB\") {\n \t\t} else {\n \t\t\tdie(\"Unknown type $part->{TYPE}\");\n\n=== modified file 'source/lib/ldb/config.mk'\n--- a/source/lib/ldb/config.mk\t2007-04-24 15:41:33 +0000\n+++ b/source/lib/ldb/config.mk\t2007-04-27 21:34:20 +0000\n@@ -304,7 +304,7 @@\n \n #######################\n # Start LIBRARY swig_ldb\n-[SWIG::swig_ldb]\n+[PYTHON::python_ldb]\n PUBLIC_DEPENDENCIES = ldb DYNCONFIG LIBPYTHON \n PRIVATE_DEPENDENCIES = gensec\n SWIG_FILE = swig/ldb.i\n\n=== modified file 'source/lib/python/config.m4'\n--- a/source/lib/python/config.m4\t2007-04-25 10:52:04 +0000\n+++ b/source/lib/python/config.m4\t2007-04-27 21:34:20 +0000\n@@ -1518,7 +1518,6 @@\n \tcp $srcdir/lib/python/Modules/Setup.dist lib/python/Modules/Setup\n fi\n \n-AC_DEFINE_UNQUOTED(PLATFORM, $MACHDEP, [Platforms])\n SMB_SUBSYSTEM(LIBPYTHON, [], [INTERNAL_PYTHON], [-Ilib/python/Include -Ilib/python])\n SMB_ENABLE(python, YES)\n SMB_ENABLE(pgen, YES)\n\n=== modified file 'source/lib/python/config.mk'\n--- a/source/lib/python/config.mk\t2007-04-24 10:52:53 +0000\n+++ b/source/lib/python/config.mk\t2007-04-27 21:34:20 +0000\n@@ -35,7 +35,7 @@\n # XXX Note that a build now requires Python exist before the build starts\n ASDLGEN=\t$(srcdir)/lib/python/Parser/asdl_c.py\n \n-[LIBRARY::INTERNAL_PYTHON]\n+[SUBSYSTEM::INTERNAL_PYTHON]\n LDFLAGS = -lm -lutil\n CFLAGS = -DPy_BUILD_CORE -Ilib/python/Include -Ilib/python -DPYTHONPATH=\":plat-linux2\" -DVERSION=\"2.6\" -DPLATFORM=\"linux2\"\n OBJ_FILES =\t\\\n@@ -149,7 +149,7 @@\n # Build the interpreter\n [BINARY::python]\n ENABLE = NO\n-PRIVATE_DEPENDENCIES = INTERNAL_PYTHON\n+PRIVATE_DEPENDENCIES = LIBPYTHON python_param\n CFLAGS = -DPy_BUILD_CORE -Ilib/python/Include -Ilib/python\n OBJ_FILES = \\\n \t\t\tModules/python.o\n\n=== modified file 'source/lib/python/setup.py' (properties changed)\n=== modified file 'source/lib/tdb/config.mk'\n--- a/source/lib/tdb/config.mk\t2007-04-24 15:41:33 +0000\n+++ b/source/lib/tdb/config.mk\t2007-04-27 21:34:20 +0000\n@@ -60,7 +60,7 @@\n \n #######################\n # Start LIBRARY swig_tdb\n-[SWIG::swig_tdb]\n+[PYTHON::swig_tdb]\n SWIG_FILE = swig/tdb.i\n PUBLIC_DEPENDENCIES = LIBTDB DYNCONFIG\n # End LIBRARY swig_tdb\n\n=== modified file 'source/libcli/config.mk'\n--- a/source/libcli/config.mk\t2007-04-24 15:41:33 +0000\n+++ b/source/libcli/config.mk\t2007-04-27 21:34:20 +0000\n@@ -56,7 +56,7 @@\n PUBLIC_DEPENDENCIES = LIBNDR NDR_NBT LIBCLI_COMPOSITE LIBEVENTS \\\n \tNDR_SECURITY samba-socket LIBSAMBA-UTIL\n \n-[SWIG::swig_libcli_nbt]\n+[PYTHON::swig_libcli_nbt]\n SWIG_FILE = swig/libcli_nbt.i\n PUBLIC_DEPENDENCIES = LIBCLI_NBT DYNCONFIG LIBSAMBA-CONFIG\n \n\n=== modified file 'source/scripting/python/config.mk'\n--- a/source/scripting/python/config.mk\t2007-04-25 12:42:41 +0000\n+++ b/source/scripting/python/config.mk\t2007-04-27 21:34:20 +0000\n@@ -1,4 +1,4 @@\n-[SUBSYSTEM::python_param]\n-PUBLIC_DEPENDENCIES = LIBPYTHON LIBSAMBA-CONFIG\n+[PYTHON::python_param]\n+PRIVATE_DEPENDENCIES = LIBSAMBA-CONFIG\n OBJ_FILES = \\\n-\t\t\tparam.o\n+\t\t\tparammodule.o\n\n=== modified file 'source/scripting/python/provision.py'\n--- a/source/scripting/python/provision.py\t2007-04-26 10:50:08 +0000\n+++ b/source/scripting/python/provision.py\t2007-04-27 21:34:20 +0000\n@@ -5,21 +5,22 @@\n #    Released under the GNU GPL v2 or later\n #\n \n+import os\n+import pwd\n+import grp\n from uuid import uuid4\n+from socket import gethostname\n+from param import default_config\n \n #\n #  return True if the current install seems to be OK\n #\n def install_ok(session_info, credentials):\n-    lp = loadparm_init()\n-    ldb = ldb_init()\n-    ldb.session_info = session_info\n-    ldb.credentials = credentials\n-    if lp.get(\"realm\") == \"\":\n+    if default_config.get(\"realm\") == \"\":\n         return False\n-    ldb.connect(lp.get(\"sam database\"))\n-    res = ldb.search(\"(cn=Administrator)\")\n-    if len(res) != 1:\n+    ldb = Ldb(lp.get(\"sam database\"), session_info=session_info, \n+            credentials=credentials)\n+    if len(ldb.search(\"(cn=Administrator)\")) != 1:\n         return False\n     return True\n \n@@ -28,9 +29,11 @@\n #\n def findnss(nssfn, *names):\n     for name in names:\n-        if nssfn(name) is not None:\n-            return name\n-    print \"Unable to find user/group for %s\\n\" % arguments[1]\n+        try:\n+            return nssfn(name)\n+        except KeyError:\n+            pass\n+    raise Exception(\"Unable to find user/group for %s\" % arguments[1])\n \n #\n # add a foreign security principle\n@@ -91,15 +94,15 @@\n #  return first part of hostname\n #\n def hostname():\n-    return sys.hostname().split(\".\")[0]\n+    return gethostname().split(\".\")[0]\n \n # the ldb is in bad shape, possibly due to being built from an\n #   incompatible previous version of the code, so delete it\n #   completely \n def ldb_delete(ldb):\n-    println(\"Deleting %s\\n\" % ldb.filename)\n+    print \"Deleting %s\\n\" % ldb.filename\n     lp = loadparm_init()\n-    sys.unlink(sprintf(\"%s/%s\", lp.get(\"private dir\"), ldb.filename))\n+    os.unlink(\"%s/%s\" % (lp.get(\"private dir\"), ldb.filename))\n     ldb.transaction_cancel()\n     ldb.close()\n     ldb.connect(ldb.filename)\n@@ -122,13 +125,12 @@\n     attrs = [\"dn\"]\n     basedn = \"\"\n     try:\n-        res = ldb.search(\"(&(|(objectclass=*)(dn=*))(!(dn=@BASEINFO)))\", basedn, ldb.SCOPE_SUBTREE, attrs)\n+        for msg in ldb.search(\"(&(|(objectclass=*)(dn=*))(!(dn=@BASEINFO)))\", \\\n+                basedn, ldb.SCOPE_SUBTREE, attrs):\n+            ldb.delete(msg.dn)\n     except LdbError:\n         ldb_delete(ldb)\n \n-    for msg in res:\n-        ldb.delete(msg.dn)\n-\n     try:\n         res = ldb.search(\"(&(|(objectclass=*)(dn=*))(!(dn=@BASEINFO)))\", basedn, ldb.SCOPE_SUBTREE, attrs)\n     except LdbError:\n@@ -147,7 +149,7 @@\n \n     res = ldb.search(\"(objectClass=*)\", \"\", ldb.SCOPE_BASE, rootDSE_attrs)\n     assert len(res) == 1\n-    if (typeof(res[0].namingContexts) == \"undefined\"):\n+    if res[0].namingContexts is None:\n         return\n     for basedn in res[0].namingContexts:\n         anything = \"(|(objectclass=*)(dn=*))\"\n@@ -182,17 +184,13 @@\n                 info.message(\"Failed to delete all records under \" + basedn + \", \" + len(res3) + \" records remaining\\n\")\n \n def open_ldb(info, dbname, erase):\n-    ldb = ldb_init()\n-    ldb.session_info = info.session_info\n-    ldb.credentials = info.credentials\n-    ldb.filename = dbname\n-\n     try:\n-        ldb.connect(dbname)\n+        ldb = Ldb(dbname, session_info=info.session_info, \n+                credentials=info.credentials)\n     except LdbError:\n-        lp = loadparm_init()\n-        sys.unlink(sprintf(\"%s/%s\", lp.get(\"private dir\"), dbname))\n-        ldb.connect(dbname)\n+        os.unlink(\"%s/%s\" % (default_config.get(\"private dir\"), dbname))\n+        ldb = Ldb(dbname, session_info=info.session_info, \n+                credentials=info.credentials)\n \n     ldb.transaction_start()\n \n@@ -207,7 +205,7 @@\n     lp = loadparm_init()\n     src = lp.get(\"setup directory\") + \"/\" + ldif\n \n-    data = sys.file_load(src)\n+    data = open(src, 'r').read()\n     data = substitute_var(data, info.subobj)\n \n     try:\n@@ -223,7 +221,7 @@\n     lp = loadparm_init()\n     src = lp.get(\"setup directory\") + \"/\" + ldif\n \n-    data = sys.file_load(src)\n+    data = open(src, 'r').read()\n     data = substitute_var(data, info.subobj)\n \n     try:\n@@ -248,7 +246,7 @@\n \n     src = lp.get(\"setup directory\") + \"/\" + ldif\n \n-    data = sys.file_load(src)\n+    data = open(src, 'r').read()\n     data = substitute_var(data, info.subobj)\n \n     try:\n@@ -266,9 +264,9 @@\n     f = fname\n     src = lp.get(\"setup directory\") + \"/\" + template\n \n-    sys.unlink(f)\n+    os.unlink(f)\n \n-    data = sys.file_load(src)\n+    data = open(src, 'r').read()\n     data = substitute_var(data, subobj)\n \n     open(f, 'w').write(data)\n@@ -352,7 +350,6 @@\n \n def provision_become_dc(subobj, message, paths, session_info):\n     lp = loadparm_init()\n-    sys = sys_init()\n     info = Object()\n \n     provision_fix_subobj(subobj, message, paths)\n@@ -396,18 +393,17 @@\n #\n def provision(subobj, message, blank, paths, session_info, credentials, ldapbackend):\n     lp = loadparm_init()\n-    sys = sys_init()\n     info = Object()\n \n     provision_fix_subobj(subobj, message, paths)\n \n     if subobj.DOMAINGUID is not None:\n-        subobj.DOMAINGUID_MOD = sprintf(\"replace: objectGUID\\nobjectGUID: %s\\n-\", subobj.DOMAINGUID)\n+        subobj.DOMAINGUID_MOD = \"replace: objectGUID\\nobjectGUID: %s\\n-\" % subobj.DOMAINGUID\n     else:\n         subobj.DOMAINGUID_MOD = \"\"\n \n     if subobj.HOSTGUID is not None:\n-        subobj.HOSTGUID_ADD = sprintf(\"objectGUID: %s\", subobj.HOSTGUID)\n+        subobj.HOSTGUID_ADD = \"objectGUID: %s\" % subobj.HOSTGUID\n     else:\n         subobj.HOSTGUID_ADD = \"\"\n \n@@ -417,13 +413,13 @@\n     info.session_info = session_info\n \n     # only install a new smb.conf if there isn't one there already\n-    st = sys.stat(paths.smbconf)\n+    st = os.stat(paths.smbconf)\n     if st is None:\n         message(\"Setting up smb.conf\\n\")\n         setup_file(\"provision.smb.conf\", info.message, paths.smbconf, subobj)\n         lp.reload()\n     # only install a new shares config db if there is none\n-    st = sys.stat(paths.shareconf)\n+    st = os.stat(paths.shareconf)\n     if st is None:\n         message(\"Setting up share.ldb\\n\")\n         setup_ldb(\"share.ldif\", info, paths.shareconf)\n@@ -565,12 +561,8 @@\n # Write out a DNS zone file, from the info in the current database\n def provision_dns(subobj, message, paths, session_info, credentials):\n     message(\"Setting up DNS zone: \" + subobj.DNSDOMAIN + \" \\n\")\n-    ldb = ldb_init()\n-    ldb.session_info = session_info\n-    ldb.credentials = credentials\n-\n     # connect to the sam\n-    ldb.connect(paths.samdb)\n+    ldb = Ldb(paths.samdb, session_info=session_info, credentials=credentials)\n \n     # These values may have changed, due to an incoming SamSync,\n     # or may not have been specified, so fetch them from the database\n@@ -643,19 +635,17 @@\n     subobj.NTTIME       = sys.nttime()\n     subobj.LDAPTIME     = ldaptime\n     subobj.DATESTRING   = datestring\n-    subobj.ROOT         = findnss(nss.getpwnam, \"root\")\n-    subobj.NOBODY       = findnss(nss.getpwnam, \"nobody\")\n-    subobj.NOGROUP      = findnss(nss.getgrnam, \"nogroup\", \"nobody\")\n-    subobj.WHEEL        = findnss(nss.getgrnam, \"wheel\", \"root\", \"staff\", \"adm\")\n-    subobj.BACKUP       = findnss(nss.getgrnam, \"backup\", \"wheel\", \"root\", \"staff\")\n-    subobj.USERS        = findnss(nss.getgrnam, \"users\", \"guest\", \"other\", \"unknown\", \"usr\")\n+    subobj.ROOT         = findnss(pwd.getpwnam, \"root\")[4]\n+    subobj.NOBODY       = findnss(pwd.getpwnam, \"nobody\")[4]\n+    subobj.NOGROUP      = findnss(grp.getgrnam, \"nogroup\", \"nobody\")[2]\n+    subobj.WHEEL        = findnss(grp.getgrnam, \"wheel\", \"root\", \"staff\", \"adm\")[2]\n+    subobj.BACKUP       = findnss(grp.getgrnam, \"backup\", \"wheel\", \"root\", \"staff\")[2]\n+    subobj.USERS        = findnss(grp.getgrnam, \"users\", \"guest\", \"other\", \"unknown\", \"usr\")[2]\n \n     subobj.DNSDOMAIN    = strlower(subobj.REALM)\n-    subobj.DNSNAME      = sprintf(\"%s.%s\", \n-                      strlower(subobj.HOSTNAME), \n-                      subobj.DNSDOMAIN)\n+    subobj.DNSNAME      = \"%s.%s\" % (subobj.HOSTNAME.lower(), subobj.DNSDOMAIN)\n     rdn_list = split(\".\", subobj.DNSDOMAIN)\n-    subobj.DOMAINDN     = \"DC=\" + join(\",DC=\", rdn_list)\n+    subobj.DOMAINDN     = \"DC=\" + \",DC=\".join(rdn_list)\n     subobj.DOMAINDN_LDB = \"users.ldb\"\n     subobj.ROOTDN       = subobj.DOMAINDN\n     subobj.CONFIGDN     = \"CN=Configuration,\" + subobj.ROOTDN\n@@ -726,14 +716,10 @@\n #\n def newuser(username, unixname, password, message, session_info, credentials):\n     lp = loadparm_init()\n-    samdb = lp.get(\"sam database\")\n-    ldb = ldb_init()\n     random_init(local)\n-    ldb.session_info = session_info\n-    ldb.credentials = credentials\n-\n     # connect to the sam \n-    ldb.connect(samdb)\n+    samdb = Ldb(lp.get(\"sam database\"), session_info=session_info, \n+            credentials=credentials)\n \n     ldb.transaction_start()\n \n@@ -759,8 +745,7 @@\n unixName: %s\n sambaPassword: %s\n objectClass: user\n-\"\"\" % (user_dn, username, dom_users,\n-               unixname, password)\n+\"\"\" % (user_dn, username, dom_users, unixname, password)\n     #\n     #  add the user to the users group as well\n     #\n\n=== modified file 'source/scripting/python/upgrade.py'\n--- a/source/scripting/python/upgrade.py\t2007-04-26 10:50:08 +0000\n+++ b/source/scripting/python/upgrade.py\t2007-04-27 21:34:20 +0000\n@@ -4,7 +4,10 @@\n #\tReleased under the GNU GPL v2 or later\n #\n \n+from provision import findnss\n import provision\n+import grp\n+import pwd\n from uuid import uuid4\n from param import default_configuration\n \n@@ -26,14 +29,14 @@\n \n def upgrade_registry(regdb,prefix,ldb):\n     assert regdb is not None:\n-\tprefix_up = strupper(prefix)\n+\tprefix_up = prefix.upper()\n \tldif = []\n \n     for rk in regdb.keys:\n \t\tpts = rk.name.split(\"/\")\n \n \t\t# Only handle selected hive\n-        if strupper(pts[0]) != prefix_up:\n+        if pts[0].upper() != prefix_up:\n \t\t\tcontinue\n \n \t\tkeydn = regkey_to_dn(rk.name)\n@@ -84,11 +87,9 @@\n \t\tacc.nt_username = acc.username\n \n     if acc.fullname is None:\n-\t\tvar pw = nss.getpwnam(acc.fullname)\n-\t\tacc.fullname = pw.pw_gecos\n+\t\tacc.fullname = pwd.getpwnam(acc.fullname)[4]\n \n-\tpts = split(',', acc.fullname)\n-\tacc.fullname = pts[0]\n+\tacc.fullname = acc.fullname.split(\",\")[0]\n \n     if acc.fullname is None:\n \t\tacc.fullname = acc.username\n@@ -96,8 +97,7 @@\n \tassert acc.fullname is not None\n \tassert acc.nt_username is not None\n \n-\tldif = \n-\"\"\"dn: cn=%s,%s\n+\tldif = \"\"\"dn: cn=%s,%s\n objectClass: top\n objectClass: user\n lastLogon: %d\n@@ -134,29 +134,26 @@\n \n \treturn ldif\n \n-def upgrade_sam_group(grp,domaindn):\n-\tnss = nss_init()\n-\n-\tif grp.sid_name_use == 5: # Well-known group\n+def upgrade_sam_group(group,domaindn):\n+\tif group.sid_name_use == 5: # Well-known group\n \t\treturn None\n \n-    if grp.nt_name in (\"Domain Guests\", \"Domain Users\", \"Domain Admins\"):\n+    if group.nt_name in (\"Domain Guests\", \"Domain Users\", \"Domain Admins\"):\n \t\treturn None\n \t\n-    if grp.gid == -1:\n-\t\tgr = nss.getgrnam(grp.nt_name)\n+    if group.gid == -1:\n+\t\tgr = grp.getgrnam(grp.nt_name)\n     else:\n-\t\tgr = nss.getgrgid(grp.gid)\n+\t\tgr = grp.getgrgid(grp.gid)\n \n     if gr is None:\n-\t\tgrp.unixname = \"UNKNOWN\"\n+\t\tgroup.unixname = \"UNKNOWN\"\n     else:\n-\t\tgrp.unixname = gr.gr_name\n+\t\tgroup.unixname = gr.gr_name\n \n-\tassert grp.unixname is not None\n+\tassert group.unixname is not None\n \t\n-\tldif = \n-\"\"\"dn: cn=%s,%s\n+\tldif = \"\"\"dn: cn=%s,%s\n objectClass: top\n objectClass: group\n description: %s\n@@ -164,8 +161,8 @@\n objectSid: %s\n unixName: %s\n samba3SidNameUse: %d\n-\"\"\" % (grp.nt_name, domaindn, \n-grp.comment, grp.nt_name, grp.sid, grp.unixname, grp.sid_name_use)\n+\"\"\" % (group.nt_name, domaindn, \n+group.comment, group.nt_name, group.sid, group.unixname, group.sid_name_use)\n \n \treturn ldif\n \n@@ -247,7 +244,6 @@\n \n def upgrade_provision(samba3):\n \tsubobj = Object()\n-\tnss = nss_init()\n \tlp = loadparm_init()\n \n \tdomainname = samba3.configuration.get(\"workgroup\")\n@@ -278,7 +274,7 @@\n \t\tsubobj.DOMAINGUID   = domsec.guid\n \t\tsubobj.DOMAINSID    = domsec.sid\n     else:\n-\t\tprintln(\"Can't find domain secrets for '\" + domainname + \"'; using random SID and GUID\")\n+\t\tprint \"Can't find domain secrets for '%s'; using random SID and GUID\\n\" % domainname\n \t\tsubobj.DOMAINGUID = uuid4()\n \t\tsubobj.DOMAINSID = randsid()\n \t\n@@ -295,18 +291,16 @@\n \tsubobj.NTTIME       = nttime()\n \tsubobj.LDAPTIME     = ldaptime()\n \tsubobj.DATESTRING   = datestring()\n-\tsubobj.ROOT         = findnss(nss.getpwnam, \"root\")\n-\tsubobj.NOBODY       = findnss(nss.getpwnam, \"nobody\")\n-\tsubobj.NOGROUP      = findnss(nss.getgrnam, \"nogroup\", \"nobody\")\n-\tsubobj.WHEEL        = findnss(nss.getgrnam, \"wheel\", \"root\")\n-\tsubobj.USERS        = findnss(nss.getgrnam, \"users\", \"guest\", \"other\")\n-\tsubobj.DNSDOMAIN    = strlower(subobj.REALM)\n-\tsubobj.DNSNAME      = sprintf(\"%s.%s\", \n-\t\t\t\t      strlower(subobj.HOSTNAME), \n-\t\t\t\t      subobj.DNSDOMAIN)\n-\tsubobj.BASEDN       = \"DC=\" + join(\",DC=\", split(\".\", subobj.REALM))\n-\trdn_list = split(\".\", subobj.DNSDOMAIN)\n-\tsubobj.DOMAINDN     = \"DC=\" + join(\",DC=\", rdn_list)\n+\tsubobj.ROOT         = findnss(pwd.getpwnam, \"root\")[4]\n+\tsubobj.NOBODY       = findnss(pwd.getpwnam, \"nobody\")[4]\n+\tsubobj.NOGROUP      = findnss(grp.getgrnam, \"nogroup\", \"nobody\")[2]\n+\tsubobj.WHEEL        = findnss(grp.getgrnam, \"wheel\", \"root\")[2]\n+\tsubobj.USERS        = findnss(grp.getgrnam, \"users\", \"guest\", \"other\")[2]\n+\tsubobj.DNSDOMAIN    = subobj.REALM.lower()\n+\tsubobj.DNSNAME      = \"%s.%s\" % (subobj.HOSTNAME.lower(), subobj.DNSDOMAIN)\n+\tsubobj.BASEDN       = \"DC=\" + \",DC=\".join(subobj.REALM.split(\".\"))\n+\trdn_list = subobj.DNSDOMAIN.split(\".\")\n+\tsubobj.DOMAINDN     = \"DC=\" + \",DC=\".join(rdn_list)\n \tsubobj.DOMAINDN_LDB = \"users.ldb\"\n \tsubobj.ROOTDN       = subobj.DOMAINDN\n \n@@ -323,7 +317,7 @@\n \t\t\t\t\t\"rdn_name\",\n \t\t\t\t\t\"show_deleted\",\n \t\t\t\t\t\"partition\"]\n-\tsubobj.MODULES_LIST = \",\"join(modules_list)\n+\tsubobj.MODULES_LIST = \",\".join(modules_list)\n \n \treturn subobj\n \n@@ -460,10 +454,7 @@\n def upgrade(subobj, samba3, message, paths, session_info, credentials):\n \tret = 0\n \tlp = loadparm_init()\n-\tsamdb = ldb_init()\n-\tsamdb.session_info = session_info\n-\tsamdb.credentials = credentials\n-\tsamdb.connect(paths.samdb)\n+\tsamdb = Ldb(paths.samdb, session_info=session_info, credentials=credentials)\n \n \tmessage(\"Writing configuration\\n\")\n \tnewconf = upgrade_smbconf(samba3.configuration,True)\n@@ -472,19 +463,15 @@\n \tmessage(\"Importing account policies\\n\")\n \tldif = upgrade_sam_policy(samba3,subobj.BASEDN)\n \tsamdb.modify(ldif)\n-\tregdb = ldb_init()\n-\tregdb.connect(paths.hklm)\n+\tregdb = Ldb(paths.hklm)\n \n-\tok = regdb.modify(\"\n+\tregdb.modify(\"\n dn: value=RefusePasswordChange,key=Parameters,key=Netlogon,key=Services,key=CurrentControlSet,key=System,HIVE=NONE\n replace: type\n type: 4\n replace: data\n data: %d\n \" % samba3.policy.refuse_machine_password_change)\n-    if not ok:\n-\t\tmessage(\"registry load failed: \" + regdb.errstring() + \"\\n\")\n-\t\tassert(ok)\n \n \tmessage(\"Importing users\\n\")\n     for account in samba3.samaccounts:\n@@ -514,8 +501,7 @@\n \tmessage(\"Importing registry data\\n\")\n     for hive in [\"hkcr\",\"hkcu\",\"hklm\",\"hkpd\",\"hku\",\"hkpt\"]:\n \t\tmessage(\"... \" + hive + \"\\n\")\n-\t\tregdb = ldb_init()\n-\t\tregdb.connect(paths[hive])\n+\t\tregdb = Ldb(paths[hive])\n \t\tldif = upgrade_registry(samba3.registry, hive, regdb)\n \t\tfor (var j in ldif) {\n \t\t\tvar msg = \"... ... \" + j\n@@ -528,8 +514,7 @@\n \t\t\tmessage(msg + \"\\n\")\n \n \tmessage(\"Importing WINS data\\n\")\n-\twinsdb = ldb_init()\n-\twinsdb.connect(paths.winsdb)\n+\twinsdb = Ldb(paths.winsdb)\n \tldb_erase(winsdb)\n \n \tldif = upgrade_wins(samba3)\n@@ -558,7 +543,7 @@\n @LIST: samldb,operational,objectguid,rdn_name,samba3sam\n \"\"\")\n \n-\t\tok = samdb.add(\"\"\"\n+\t\tsamdb.add(\"\"\"\n dn: @MAP=samba3sam\n @MAP_URL: %s\"\"\", ldapurl))\n \n@@ -566,10 +551,8 @@\n \n def upgrade_verify(subobj, samba3,paths,message):\n \tmessage(\"Verifying account policies\\n\")\n-\tsamldb = ldb_init()\n-\tne = 0\n \n-\tok = samldb.connect(paths.samdb)\n+\tsamldb = Ldb(paths.samdb)\n \n     for account in samba3.samaccounts:\n \t\tmsg = samldb.search(\"(&(sAMAccountName=\" + account.nt_username + \")(objectclass=user))\")\n\n=== modified file 'source/scripting/swig/config.mk'\n--- a/source/scripting/swig/config.mk\t2007-04-24 15:41:33 +0000\n+++ b/source/scripting/swig/config.mk\t2007-04-27 21:34:20 +0000\n@@ -1,6 +1,6 @@\n #######################\n # Start LIBRARY swig_dcerpc\n-[SWIG::swig_dcerpc]\n+[PYTHON::swig_dcerpc]\n SWIG_FILE = dcerpc.i\n PUBLIC_DEPENDENCIES = LIBCLI_SMB NDR_MISC LIBSAMBA-UTIL LIBSAMBA-CONFIG dcerpc_samr RPC_NDR_LSA DYNCONFIG\n # End LIBRARY swig_dcerpc\n@@ -12,7 +12,7 @@\n \n .SUFFIXES: _wrap.c .i\n \n-.i_wrap.c:\n+.i._wrap.c:\n \tswig -I$(srcdir)/scripting/swig -python $<\n \n SWIG_INCLUDES = librpc/gen_ndr/samr.i librpc/gen_ndr/lsa.i librpc/gen_ndr/spoolss.i\n\n=== modified file 'source/setup/provision'\n--- a/source/setup/provision\t2007-04-26 10:50:08 +0000\n+++ b/source/setup/provision\t2007-04-27 21:34:20 +0000\n@@ -100,9 +100,9 @@\n #}\n \n if opts.aci is not None:\n-\tprint \"set ACI: %s\\n\" % subobj[\"ACI\"])\n+\tprint \"set ACI: %s\\n\" % subobj[\"ACI\"]\n \n-print \"set DOMAIN SID: %s\\n\" % subobj[\"DOMAINSID\"])\n+print \"set DOMAIN SID: %s\\n\" % subobj[\"DOMAINSID\"]\n \n if opts.ldap_backend:\n \tif not opts.ldap_module:\n\n"}