{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic@cvs.develooper.com", "subject": "[svn:parrot-pdd] r18383 - in trunk: docs docs/pdds/draft ext/Parrot-Embed ext/Parrot-Embed/lib/Parrot include/parrot lib/Parrot lib/Parrot/Pmc2c src src/pmc t/src", "body": "Author: chromatic\nDate: Tue May  1 17:00:16 2007\nNew Revision: 18383\n\nModified:\n   trunk/docs/pdds/draft/pdd11_extending.pod\n\nChanges in other areas also in this revision:\nModified:\n   trunk/docs/extend.pod\n   trunk/ext/Parrot-Embed/lib/Parrot/Embed.xs\n   trunk/ext/Parrot-Embed/typemap\n   trunk/include/parrot/dynext.h\n   trunk/include/parrot/extend.h\n   trunk/include/parrot/interpreter.h\n   trunk/lib/Parrot/Pmc2c/UtilFunctions.pm\n   trunk/lib/Parrot/Vtable.pm\n   trunk/src/extend.c\n   trunk/src/pmc/namespace.pmc\n   trunk/t/src/extend.t\n\nLog:\nSanitize external interface, mostly by changing Parrot_STRING to Parrot_String (Mattia Barbon, RT #24817).\n\nModified: trunk/docs/pdds/draft/pdd11_extending.pod\n==============================================================================\n--- trunk/docs/pdds/draft/pdd11_extending.pod\t(original)\n+++ trunk/docs/pdds/draft/pdd11_extending.pod\tTue May  1 17:00:16 2007\n@@ -50,11 +50,11 @@\n \n =item C\n \n-Returns a Parrot_STRING that represents the string value of the PMC.\n+Returns a Parrot_String that represents the string value of the PMC.\n \n =item C\n \n-Keyed version of C. Returns a Parrot_STRING \n+Keyed version of C. Returns a Parrot_String\n representing the string value of whatever is stored at the element of the  PMC\n indexed by C.\n \n@@ -125,14 +125,14 @@\n Returns the PMC stored at the element of the passed-in PMC that is  indexed by\n C.\n \n-=item C\n+=item C\n \n-Assign the passed-in Parrot_STRING to the passed-in PMC.\n+Assign the passed-in Parrot_String to the passed-in PMC.\n \n-=item C\n+=item C\n \n-Keyed version of C. Assigns C to the PMC stored \n+Keyed version of C. Assigns C to the PMC stored\n at element  of the passed-in PMC.\n \n =item C\n@@ -141,7 +141,7 @@\n \n =item C\n \n-Keyed version of C. Assigns C to the PMC stored \n+Keyed version of C. Assigns C to the PMC stored\n at element  of the passed-in PMC.\n \n =item C\n \n-Keyed version of C. Assigns C to the PMC stored \n+Keyed version of C. Assigns C to the PMC stored\n at element  of the passed-in PMC.\n \n =item C\n \n Assign the passed-in Parrot number to the passed-in PMC.\n \n-=item C\n \n-Keyed version of C. Assigns C to the PMC stored \n+Keyed version of C. Assigns C to the PMC stored\n at element  of the passed-in PMC.\n \n =item C\n \n-Convert the passed-in null-terminated C string to a Parrot_STRING and assign it\n+Convert the passed-in null-terminated C string to a Parrot_String and assign it\n to the passed-in PMC.\n \n-=item C\n \n-Keyed version of C. Converts C to a \n-Parrot_STRING and assigns it to the PMC stored at element  of the \n+Keyed version of C. Converts C to a\n+Parrot_String and assigns it to the PMC stored at element  of the\n passed-in PMC.\n \n-=item C\n \n-Convert the passed-in null-terminated C string to a Parrot_STRING of length\n+Convert the passed-in null-terminated C string to a Parrot_String of length\n C and assign it to the passed-in PMC. If C is longer than\n C, then only the first C characters will be converted. If\n-C is shorter than C, then the extra characters in the \n-Parrot_STRING should be assumed to contain garbage.\n+C is shorter than C, then the extra characters in the\n+Parrot_String should be assumed to contain garbage.\n \n-=item C\n \n Keyed version of C. Converts the first C\n-characters of C to a Parrot_STRING and assigns the resulting string to\n+characters of C to a Parrot_String and assigns the resulting string to\n the PMC stored at element  of the passed-in PMC.\n \n =back\n \n =head2 Creation and destruction\n \n-Functions used to create and destroy PMCs, Parrot_STRINGs, etc.\n+Functions used to create and destroy PMCs, Parrot_Strings, etc.\n \n =over 4\n \n =item C\n \n-Creates and returns a new PMC. C is an integer identifier that \n-specifies the type of PMC required. The C corresponding to a \n+Creates and returns a new PMC. C is an integer identifier that\n+specifies the type of PMC required. The C corresponding to a\n particular PMC class name can be found using C.\n \n =item C\n@@ -220,8 +220,8 @@\n \n Returns the special C PMC.\n \n-=item C\n \n Create a new Parrot string from a passed-in buffer. If the C,\n@@ -280,8 +280,8 @@\n up Parrot's registers in line with the Parrot calling conventions; see\n L for more details.\n \n-=item C\n+=item C\n \n Calls a Parrot method named C with C PMC parameters. NB. This\n is not yet implemented and may change.\n@@ -338,12 +338,12 @@\n \n =head2 CURRENT\n \n-    Maintainer: \n+    Maintainer:\n     Class: Internals\n     PDD Number: 11\n     Version: 1.0\n     Status: Developing\n-    Last Modified: February 20, 2004 \n+    Last Modified: February 20, 2004\n     PDD Format: 1\n     Language: English\n \n\n"}