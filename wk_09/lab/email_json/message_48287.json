{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "adschai@optonline.net", "subject": "[R] Question with nlm", "body": "Hi,\n\nI would really appreciate if I could get some help here. I'm using nlm to minimize my negative log likelihood function. What I did is as follows:\n\nMy log likelihood function (it returns negative log likelihood) with 'gradient' attribute defined inside as follows:\n\n# ==========Method definition======================\nlogLikFunc3 <- function(sigma, object, totalTime) {\n    y <- as.matrix(object@data$output[1:totalTime,1]);\n    x <- as.matrix(object@data$input[1:totalTime,]);\n    # compute necessary matrices\n    M <- as.matrix(object@model$M);\n    P <- diag(sigma*sigma);\n    A <- AMatrix(totalTime, M, object@data$input[1:totalTime,]);\n    Q <- IMatrix(totalTime)+A %*% outerM(IMatrix(totalTime-1),P) %*% t(A);\n    invQ <- solve(Q,IMatrix(dim(Q)[1]));\n    xM <- matrix(rep(0, dim(M)[2]*totalTime), ncol=dim(M)[2], nrow=totalTime);\n    for (i in 1:totalTime) {\n       xM[i,] <- x[i,] %*% powerM(M, -totalTime+i);\n    }\n    tmp <- solve((t(xM) %*% invQ %*% xM), IMatrix(dim(xM)[2]));\n    Bt <- (tmp %*% t(xM)) %*% (invQ %*% y);\n    N <- IMatrix(totalTime)-(xM %*% tmp %*% t(xM) %*% invQ);\n    \n    sigma2 <- (1/totalTime) * t(y- xM %*% Bt)%*% invQ %*% (y- xM %*% Bt);\n    # log likelihood function\n    loglik <- -0.5*log(abs(det(diag(rep(sigma2,totalTime)))))-0.5*log(abs(det(Q)))-\n       (0.5/sigma2)* (t(y- (xM%*% Bt)) %*% invQ %*% (y-(xM %*% Bt)));\n\n    sgm <- sigma;\n    # gradients eq. (4.16)\n    gr <- function(sgm) {\n       gradVecs <- c();\n       # sgm <- c(sigma1, sigma2);\n       sgm <- sgm*sgm;\n       for (i in 1:length(sgm)) {\n          Eij <- matrix(rep(0, length(sgm)^2), nrow=length(sgm), ncol=length(sgm));\n          Eij[i,i] <- 1.0;\n          # trace term\n          term1 <- -sum(diag((invQ %*% A) %*% outerM(IMatrix(totalTime-1),Eij) %*% t(A)));\n          # very long term\n          term2 <- (1/totalTime)*solve((t(y) %*% t(N) %*% invQ %*% y), IMatrix(dim(y)[2]));\n          term3 <- (t(y) %*% t(N) %*% invQ %*% A) %*% outerM(IMatrix(totalTime-1),Eij) %*% (t(A) %*% invQ %*% N %*% y);\n          gradVecs <- -1*c(gradVecs, term1+ (term2 %*% term3));\n       } # end for\n       print(paste(\"Gradient has length:\", length(gradVecs)));\n       return(gradVecs);\n    }\n    res <- -loglik;\n    attr(res, \"gradient\") <-  gradVecs;\n    return(res);\n}\n#=========end method definition=====================================\n\nThen when I call the nlm on this function, i.e.\n\nnlm(f=logLikFunc3, p=as.numeric(c(1,1)), object=this, totalTime=200, print.level=2)\n\nIt complains that my analytic gradient returns vector length different from number of my unknowns. In this case, I tried print the length of gradient vector that I returned (as you could see in the code). It has the same length as my input parameter vectors. Did I do anything wrong here?\n\nAlso, I would like to be able to put some constraints on this optimization as well. I tried constrOptim with:\n\nui <- diag(c(1,1));\nci <- matrix(rep(0,2), ncol=1, nrow=2);\n\nusing the same parameters passed to nlm above. constrOptim gives me an error that initial value is in infeasible region which I don't quite understand. As my constraints simply says that the two parameters must be greater than zero. My assigned initial values are both 1. So it should be ok. Any help would be really appreciated. Thank you.\n\n- adschai\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}