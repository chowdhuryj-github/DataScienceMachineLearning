{"category": "ham", "to_address": "\"Marco Pesenti Gritti\" <mpg@redhat.com>", "from_address": "\"edward baafi\" <edwardbaafi@gmail.com>", "subject": "Re: [sugar] [pyxpcom] PyXPCOM viability and OLPC", "body": "On 5/9/07, Marco Pesenti Gritti  wrote:\n> Nothing particular no. I'm pretty sure you will get the same issue if\n> you try to build trunk.\n>\n\nOk.. given the time constraints and the fact that you're aiming for\nembedding and aren't going to use xul widgets, why don't you use one\nof the 1.8 branches and do a pyxpcom build?  As far as I know, the\nonly thing 1.9 (Trunk) gets you in terms of python is python/dom which\nwould be useful if you wanted to use xul widgets and script the UI in\npython... Even if you wanted to try the xul widgets idea (with the tie\nin to sugar), I think I remember a patch to build the 1.8 branches\nwith python/dom (I might be wrong)..\n\nOn 5/9/07, Steve Lee  wrote:\n\n> Standalone is interesting. Can pyxpcom readily exist outside a Mozilla\n> build? If so what does that mean? Just the XPCOM framework and no\n> Mozilla components?\n\nyes.  you get the components necessary to launch xpcom services and\nnot much else..\n\n> Would it be possible to add XUL widgets and XPCOM services to another\n> python project via pyXPCOM. more or less treating it as a framework\n> like wxWidgets?\n\nI personally don't know anyone who's used it like this but I guess\nit's possible in theory (but you still have to build all the necessary\ncomponents).. For me, xulrunner handles all the magic necessary to\nbootstrap my applications so I have no idea how you'd approach this...\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}