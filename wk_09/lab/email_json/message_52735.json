{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "\"Damian Conway\" <damian@conway.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Mark Overmeer wrote:\n\n> Then, when you want to add some docs to the method, to help the\n> correct use, add it, for instance like:\n>\n>   method isValidPostalCode(str $postalcode) returns bool {...}\n>      ` Check wether the postal code confirms to the standards\n>      `$postalcode: a string with blanks trimmed.\n>      `return: the string is not cleaned-up.\n>\n> or maybe (exact syntax open to discussion)\n>\n>   method isValidPostalCode(str $postalcode) returns bool {...}\n>   #=  Check wether the postal code confirms to the standards\n>   #=$postalcode\n>   #=  a string with blanks trimmed.\n>   #=return\n>   #=  the string is not cleaned-up.\n\nWould the following syntax suffice?\n\n    method isValidPostalCode(str $postalcode) returns bool {...}\n    =PURPOSE  Check weather the postal code confirms to the standards\n    =ARG $postalcode\n        a string with blanks trimmed.\n    =RETURN\n        the string is not cleaned-up.\n\nBecause you can already do precisely that in the current design of Pod 6.\n\nAnd having done it, the current Pod::Parser will extract all of that\ninformation (including the source code), preserving the sequential and\nhierarchical relationships, and present you with an internal object\nrepresentation that your documentation tool can then analyze and\nconvert to whatever content and layout you prefer (including\nnon-semantic Pod that you can then feed into any of a dozen\nback-ends).\n\nDamian\n\n"}