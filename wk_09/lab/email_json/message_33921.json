{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: [perl #37303] [PATCH] Relaxing parrot dependency on parrot_config", "body": "On Saturday 01 October 2005 02:26:21 Nick Glencross wrote:\n\n> > I've been wanting to relax the dependency that parrot's core has on\n> > parrot_config.\n\n> I'm not sure that the patch made it into RT. Here it is again, with a\n> small tweak to a Makefile dependency.\n\n> src/config.c will need to be 'svn add'ed when applying the patch, and\n> Configure rerun to recreate the top-level Makefile.\n\nThanks!  I'll check in this patch in a little bit.  Meanwhile I want to \ncomment on a few small nits that I'll clean up before I apply it.\n\n+\n+    print << \"EOF\";\n+const char* parrot_config_ptr   = 0;\n\nPer coding standards, the pointer star needs to go on the variable name.\n\n+        printf \"0x%02x\", ord($_);\n+        ++$i;\n+        print ', ', if ($i < scalar(@c));\n+        print \"\\n    \" unless $i % 8;\n\nThe scalar() here is unnecessary.  No big deal.\n\nIndex: src/config.c\n===================================================================\n--- src/config.c        (revision 0)\n+++ src/config.c        (revision 0)\n@@ -0,0 +1,63 @@\n+/*\n+  Copyright: 2005 The Perl Foundation.  All Rights Reserved.\n+  $Id$\n\nI'll change the date to 2007.\n\n+static const char  *parrot_config_private_ptr  = NULL;\n+static unsigned int parrot_config_private_size = 0;\n\nEventually it might be better to move these variables into the parent \ninterpreter.  For now, I don't think anyone's embedding multiple Parrots into \na single program.\n\n+parrot_get_config_string(Interp* interpreter)\n+{\n+    if (!parrot_config_private_ptr)\n+        return NULL;\n+\n+    return string_from_const_cstring(interpreter,\n+                                     parrot_config_private_ptr,\n+                                     parrot_config_private_size);\n+}\n\nI don't remember what the memory allocation characteristics are of \nstring_from_const_cstring(), so these functions may need comments \nsaying \"It's your responsibility to free this string.\"\n\nIndex: src/pmc_freeze.c\n===================================================================\n--- src/pmc_freeze.c    (revision 9273)\n+++ src/pmc_freeze.c    (working copy)\n@@ -712,7 +712,7 @@\n     else {\n         if (string_length(interpreter, s) < PACKFILE_HEADER_BYTES) {\n             real_exception(interpreter, NULL, E_IOError,\n-                    \"bad string too thaw\");\n+                    \"bad string to thaw\");\n         }\n         mem_sys_memcopy(pf->header, s->strstart, PACKFILE_HEADER_BYTES);\n         PackFile_assign_transforms(pf);\n\nThis looks like part of a separate patch.\n\n===================================================================\n--- imcc/main.c (revision 9273)\n+++ imcc/main.c (working copy)\n@@ -459,6 +459,8 @@\n     char *sourcefile;\n     char *output;\n \n+    parrot_set_config_string(parrot_config_ptr,parrot_config_size);\n+\n     Interp *interp = Parrot_new(NULL);\n\nThe new line should come after the variable declarations, per my understanding \nof C89.  This is difficult to remember.  Stupid C89.\n\nGood patch!\n\n-- c\n\n"}