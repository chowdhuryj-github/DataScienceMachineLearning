{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "\"John W. Krahn\" <krahnj@telus.net>", "subject": "Re: improving my code: array of references", "body": "Pierre Mariani wrote:\n> Matthew and Rob, thank you for your replies.\n> \n>> - It's unclear whether you have a fixed set of variables to process.\n>> Is the list always the same?\n> \n> Yes, the list is always the same.\n> \n>> - Why are you using references? Are you sure you need to?\n>> \n>> - modify_variable() doesn't appear to modify anything, otherwise why\n>> are you assigning its return value to the scalar passed as a parameter?\n>> It seems to be just a function.\n> \n> Modify_variable modifies its input variable.\n> \n> Please correct me if I am wrong.\n> My understanding is that:\n> 1) if I do:\n> \tmy @array = ($a, $b, $c);\n> \tfor (@array) { $_ = modify_variable($_)}\n> I am going to modify $array[0], $array[1] and $array[2], and NOT $a, $b,\n> $c.\n\nYes because the contents of $a, $b and $c are copied to @array so there is no\nway that modifying the contents of @array will affect the contents of $a, $b\nand $c.\n\n\n> 2) if I do:\n> \tfor ($a, $b, $c) {$_ = modify_variable($_)}\n> I am going to modify $a, $b, $c, which is good, but if $a, $b, $c are\n> big I am going to be passing around lots of data.\n\nYes and in your example 1 above you are passing around lots of data twice.  If\nyou don't want to pass around a lot of data then use references and change the\nmodify_variable() sub to work with references.\n\n\n\nJohn\n-- \nPerl isn't a toolbox, but a small machine shop where you can special-order\ncertain sorts of tools at low cost and in short order.       -- Larry Wall\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}