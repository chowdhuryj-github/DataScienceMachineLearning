{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 111: this is a demonstration of an idea for handling locks in\n\tctdb. in http://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 111\nrevision-id: tridge@samba.org-20070416060137-6d90f720fec05ba5\nparent: tridge@samba.org-20070416041310-3f6200073a57aeff\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Mon 2007-04-16 16:01:37 +1000\nmessage:\n  this is a demonstration of an idea for handling locks in ctdb.\n  \n  The problem we have is this:\n  \n    - we want the client smbd processes to be able to 'shortcut' access\n      to the ltdb, by directly accessing the ltdb, and if the header of\n      the record shows we are the dmaster then process immediately, with\n      no overhead of talking across the unix domain socket\n  \n    - a client doing a shortcut will use tdb_chainlock() to lock the\n      record while processing\n  \n    - we want the main ctdb daemon to be able to set locks on the\n      record, and when those locks collide with a 'shortcut' fcntl lock,\n      we want the ctdb daemon to keep processing other operations\n  \n    - we don't want to have to send a message from a smbd client to the\n      ctdbd each time it releases a lock\n  \n  The solution is shown in this example. Note that the expensive fork()\n  and blocking lock is only paid in case of contention, so in the median\n  case I think this is zero cost.\nadded:\n  tests/lockwait.c               lockwait.c-20070416055753-3ztnb4cxqgamfudx-1\nmodified:\n  Makefile.in                    makefile.in-20061117234101-o3qt14umlg9en8z0-1\n  common/util.c                  util.c-20061117234101-o3qt14umlg9en8z0-20\n  config.mk                      config.mk-20070416041303-xql6zaaq90w8kovl-1\n  include/includes.h             includes.h-20061117234101-o3qt14umlg9en8z0-17\n\nDiff too large for email (315, the limit is 200).\n\n"}