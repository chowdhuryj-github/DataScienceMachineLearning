{"category": "ham", "to_address": "beginners@perl.org, perl-beginners@moderators.isc.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: pr warn die question", "body": "On Jun 1, 10:48 am, funkyt...@gmail.com (Ben Edwards) wrote:\n> I have a perl script that uses FTP.  If the ftp server can not be\n> conected to I want to write to a log file and exit with a return code\n> of 1.\n>\n> Something like\n>\n>     my $ftp = Net::FTP->new( $remote_host ) or {\n>       print LOGFILE \"failed to connect to $remote_host\\n\"\n>       return(1);\n>     };\n>\n> But this does not work.  So how do I do 2 statements for an or?\n\nBefore I give you the answer, allow me to strongly suggest you abandon\nthis algorithm, as it leads to bulky confusing code.  My preferred way\nof seeing this would be:\n\nmy $ftp = Net::FTP->new($remote_host);\nif (! $ftp ) {\n   print LOGFILE \"failed to connect to $remote_host\\n\";\n   return 1;\n}\n\nEven more preferred would be to throw an exception, and let the\ncalling code deal with it:\n\nmy $ftp = Net::FTP->new($remote_host) or\n   die \"failed to connect to $remote_host\\n\";\n\nThen in whatever code calls this command:\n\neval { connect_to_ftp() };\nif ($@) {\n   print LOGFILE $@;\n   exit -1;\n}\n\n\nHowever, to answer your actual question:  you need a do{} block.\n\nmy $ftp = Net::FTP->new( $remote_host ) or do {\n    print LOGFILE \"failed to connect to $remote_host\\n\"\n    return(1);\n};\n\nNote that someone else may suggest you do the following:\nmy $ftp = Net::FTP->new( $remote_host ) or\n    print LOGFILE \"failed to connect to $remote_host\\n\" and\n    return(1);\n\nI strongly recommend you do NOT do that.  That will only execute the\nreturn() statement if the print() is successful.  And especially since\nyou're printing to a non-STDOUT filehandle, that's not at all a\ncertainty.\n\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}