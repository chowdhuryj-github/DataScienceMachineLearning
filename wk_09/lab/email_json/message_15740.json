{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 12008: Fix the TYPE command. in\n\tfile:///home/jelmer/bzr.samba/SAMBA_4_0/", "body": "At file:///home/jelmer/bzr.samba/SAMBA_4_0/\n\n------------------------------------------------------------\nrevno: 12008\nrevision-id: jelmer@samba.org-20070425171016-dzm4koduxz0s2jba\nparent: svn-v2:22519@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0\ncommitter: Jelmer Vernooij \nbranch nick: SAMBA_4_0\ntimestamp: Wed 2007-04-25 19:10:16 +0200\nmessage:\n  Fix the TYPE command.\nmodified:\n  source/pidl/lib/Parse/Pidl/Wireshark/Conformance.pm svn-v2:16824@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fpidl%2flib%2fParse%2fPidl%2fWireshark%2fConformance.pm\n  source/pidl/lib/Parse/Pidl/Wireshark/NDR.pm svn-v2:16824@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fpidl%2flib%2fParse%2fPidl%2fWireshark%2fNDR.pm\n  source/pidl/tests/wireshark-conf.pl svn-v2:21253@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fpidl%2ftests%2fwireshark%2dconf.pl\n=== modified file 'source/pidl/lib/Parse/Pidl/Wireshark/Conformance.pm'\n--- a/source/pidl/lib/Parse/Pidl/Wireshark/Conformance.pm\t2007-02-27 12:46:19 +0000\n+++ b/source/pidl/lib/Parse/Pidl/Wireshark/Conformance.pm\t2007-04-25 17:10:16 +0000\n@@ -124,6 +124,12 @@\n \t\twarning($pos, \"invalid BASE_TYPE `$base_type'\");\n \t}\n \n+\t$dissectorname =~ s/^\\\"(.*)\\\"$/$1/g;\n+\n+\tif (not ($dissectorname =~ /;$/)) {\n+\t\twarning($pos, \"missing semicolon\");\n+\t}\n+\n \t$data->{types}->{$name} = {\n \t\tNAME => $name,\n \t\tPOS => $pos,\n\n=== modified file 'source/pidl/lib/Parse/Pidl/Wireshark/NDR.pm'\n--- a/source/pidl/lib/Parse/Pidl/Wireshark/NDR.pm\t2007-04-22 13:57:07 +0000\n+++ b/source/pidl/lib/Parse/Pidl/Wireshark/NDR.pm\t2007-04-25 17:10:16 +0000\n@@ -834,6 +834,8 @@\n {\n \tmy ($self, $type,$call,$ft,$base,$mask,$vals,$length) = @_;\n \n+\treturn if (defined($self->{conformance}->{types}->{$type}));\n+\n \t$self->{conformance}->{types}->{$type} = {\n \t\tNAME => $type,\n \t\tDISSECTOR_NAME => $call,\n\n=== modified file 'source/pidl/tests/wireshark-conf.pl'\n--- a/source/pidl/tests/wireshark-conf.pl\t2007-02-27 13:41:56 +0000\n+++ b/source/pidl/tests/wireshark-conf.pl\t2007-04-25 17:10:16 +0000\n@@ -5,7 +5,7 @@\n use strict;\n use warnings;\n \n-use Test::More tests => 45;\n+use Test::More tests => 47;\n use FindBin qw($RealBin);\n use lib \"$RealBin\";\n use Util;\n@@ -61,11 +61,11 @@\n test_warnings(\"nofile:1: Unknown command `CODE'\\n\",\n \tsub { parse_conf(\"CODE END\\n\"); } );\n \n-is_deeply(parse_conf(\"TYPE winreg_String dissect_myminregstring FT_STRING BASE_DEC 0 0 2\\n\"), { types => { winreg_String => { \n+is_deeply(parse_conf(\"TYPE winreg_String dissect_myminregstring(); FT_STRING BASE_DEC 0 0 2\\n\"), { types => { winreg_String => { \n \t\t\t\tNAME => \"winreg_String\",\n \t\t\t\tPOS => { FILE => \"nofile\", LINE => 1 },\n \t\t\t\tUSED => 0,\n-\t\t\t\tDISSECTOR_NAME => \"dissect_myminregstring\",\n+\t\t\t\tDISSECTOR_NAME => \"dissect_myminregstring();\",\n \t\t\t\tFT_TYPE => \"FT_STRING\",\n \t\t\t\tBASE_TYPE => \"BASE_DEC\",\n \t\t\t\tMASK => 0,\n@@ -87,13 +87,13 @@\n \tsub { parse_conf(\"TYPE mytype dissector\\n\"); });\n \n test_warnings(\"nofile:1: dissector name does not contain `dissect'\\n\",\n-\tsub { parse_conf(\"TYPE winreg_String myminregstring FT_STRING BASE_DEC 0 0 2\\n\"); });\n+\tsub { parse_conf(\"TYPE winreg_String myminregstring; FT_STRING BASE_DEC 0 0 2\\n\"); });\n \n test_warnings(\"nofile:1: invalid FT_TYPE `BLA'\\n\",\n-\tsub { parse_conf(\"TYPE winreg_String dissect_myminregstring BLA BASE_DEC 0 0 2\\n\"); });\n+\tsub { parse_conf(\"TYPE winreg_String dissect_myminregstring; BLA BASE_DEC 0 0 2\\n\"); });\n \n test_warnings(\"nofile:1: invalid BASE_TYPE `BLOE'\\n\",\n-\tsub { parse_conf(\"TYPE winreg_String dissect_myminregstring FT_UINT32 BLOE 0 0 2\\n\"); });\n+\tsub { parse_conf(\"TYPE winreg_String dissect_myminregstring; FT_UINT32 BLOE 0 0 2\\n\"); });\n \n is_deeply(parse_conf(\"TFS hf_bla \\\"True string\\\" \\\"False String\\\"\\n\"),\n \t\t{ tfs => { hf_bla => {\n@@ -163,3 +163,38 @@\n \n test_errors(\"nofile:1: incomplete HF_FIELD command\\n\",\n \tsub { parse_conf(\"HF_FIELD hf_idx\\n\"); });\n+\n+is_deeply(parse_conf(\"TYPE winreg_String dissect_myminregstring(); FT_STRING BASE_DEC 0 0 0 2\\n\"), {\n+\t\ttypes => {\n+\t\t\twinreg_String => {\n+\t\t\t\tNAME => \"winreg_String\",\n+\t\t\t\tPOS => { FILE => \"nofile\", LINE => 1 },\n+\t\t\t\tUSED => 0,\n+\t\t\t\tDISSECTOR_NAME => \"dissect_myminregstring();\",\n+\t\t\t\tFT_TYPE => \"FT_STRING\",\n+\t\t\t\tBASE_TYPE => \"BASE_DEC\",\n+\t\t\t\tMASK => 0,\n+\t\t\t\tVALSSTRING => 0,\n+\t\t\t\tALIGNMENT => 0\n+\t\t\t}\n+\t\t}\n+\t}\n+);\n+\n+\n+is_deeply(parse_conf(\"TYPE winreg_String \\\"offset = dissect_myminregstring(\\@HF\\@);\\\" FT_STRING BASE_DEC 0 0 0 2\\n\"), {\n+\t\ttypes => {\n+\t\t\twinreg_String => {\n+\t\t\t\tNAME => \"winreg_String\",\n+\t\t\t\tPOS => { FILE => \"nofile\", LINE => 1 },\n+\t\t\t\tUSED => 0,\n+\t\t\t\tDISSECTOR_NAME => \"offset = dissect_myminregstring(\\@HF\\@);\",\n+\t\t\t\tFT_TYPE => \"FT_STRING\",\n+\t\t\t\tBASE_TYPE => \"BASE_DEC\",\n+\t\t\t\tMASK => 0,\n+\t\t\t\tVALSSTRING => 0,\n+\t\t\t\tALIGNMENT => 0\n+\t\t\t}\n+\t\t}\n+\t}\n+);\n\n"}