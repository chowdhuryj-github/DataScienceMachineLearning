{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "Stephen Tucker <brown_emu@yahoo.com>", "subject": "[R] passing (or obtaining) index or element name of list to FUN in\n\tlapply()", "body": "Hello everyone,\n\nI wonder if there is a way to pass the index or name of a list to a\nuser-specified function in lapply(). For instance, my desired effect is\nsomething like the output of \n\n> L <- list(jack=4098,sape=4139)\n> lapply(seq(along=L),function(i,x) if(i==1) \"jack\" else \"sape\",x=L)\n[[1]]\n[1] \"jack\"\n\n[[2]]\n[1] \"sape\"\n\n> lapply(seq(along=L),function(i,x) if(names(x)[i]==\"jack\") 1 else 2,x=L)\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\nBut by passing L as the first argument of lapply(). I thought there was a\ntangentially-related post on this mailing list in the past but I don't recall\nthat it was ever addressed directly (and I can't seem to find it now). The\nexamples above are perfectly good alternatives especially if I wrap each of\nthe lines in \"names<-\"() to return lists with appropriate names assigned, but\nit feels like I am essentially writing a FOR-LOOP - though I was surprised to\nfind that speed-wise, it doesn't seem to make much of a difference (unless I\nhave not selected a rigorous test):\n\n> N <- 10000\n> y <- runif(N)\n## looping through elements of y\n> system.time(lapply(y,\n+                    function(x) {\n+                      set.seed(222)\n+                      mean(rnorm(1e4,x,1))\n+                    }))\n[1] 21.00  0.17 21.29    NA    NA\n## looping through indices\n> system.time(lapply(1:N,\n+                    function(x,y) {\n+                      set.seed(222)\n+                      mean(rnorm(1e4,y[x],1))\n+                      },y=y))\n[1] 21.09  0.14 21.26    NA    NA\n\nIn Python, there are methods for Lists and Dictionaries called enumerate(),\nand iteritems(), respectively. Example applications:\n\n## a list\nL = ['a','b','c']\n[x for x in enumerate(L)]\n## returns index of list along with the list element\n[(0, 'a'), (1, 'b'), (2, 'c')]\n\n## a dictionary\nD = {'jack': 4098, 'sape': 4139}\n[x for x in D.iteritems()]\n## returns element key (name) along with element contents\n[('sape', 4139), ('jack', 4098)]\n\nAnd this is something of the effect I was looking for...\n\nThanks to all,\n\nStephen\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}