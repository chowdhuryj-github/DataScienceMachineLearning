{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: creating hash from scalar variable", "body": "Matthew J. Avitable wrote:\n>\n> Given the original string ...\n>> my $test =\n>>   'NAS-IP-Address = 192.168.42.1\n>>   .......\n>>   Acct-Unique-Session-Id = \"87d380e1881d226c\"\n>>   Timestamp = 1177282824';\n>>\n> \n> You could also invoke perl 5.8's ability to treat an in-memory string as \n> a file:\n> \n> ## get a filehandle on $test\n> open(my $fh, '<', \\$test) or die \"Unable to open scalar ref for reading: $!\";\n> \n> while (my $line = <$fh>) {\n\nHmm. I don't feel this is an improvement over just\n\n  foreach (split /\\n/, $line) {\n    :\n  }\n\nor even\n\n  while ($test =~ /(.*\\n?)/g) {\n    my $line = $1;\n    :\n  }\n\nto avoid duplicating the whole string at once.\n\n>    ## split on '=' with a max of two resulting fields, clear spaces adjacent to '='.\n>    ## clear newlines as well.\n>    chomp ( my ($k, $v) = split(/\\s*=\\s*/, $line, 2) );\n\nWhy chomp here? You're chomping $k, which /can't/ end in a record, as well as $v.\nJust\n\n  chomp $line;\n  my ($k, $v) = split /\\s*=\\s*/, $line, 2;\n\nis more appropriate.\n\n> \n>    ## clear out the quotes in the value\n>    $v =~ s/\"//og;\n\nWhy use the /o modifier when there are no variables being interpolated into\nthe regex?\n\nEven better (in terms of speed) would be\n\n  $v =~ tr/\"//d;\n\nalthough I admit I tend to use s/// exclusively myself.\n\nAlso why remove the quotes when the OP didn't say he wanted to, and may actually\nneed them?\n\n>    ## do something with your key and value:\n>    print \"Key is $k,  Value is: $v\\n\";\n> \n> }\n> \n> close $fh;\n> \n> \n> Reading a file line by line is a fairly recognizable pattern to perl \n> programmers of all levels, so it may assist future maintainers.\n\n...unless it stops working, when opening a string on a filehandle is a\nfairly /unrecognisable/ pattern, and the maintainer may be stumped!\n\nCheers,\n\nRob\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}