{"category": "ham", "to_address": "\"=?UTF-8?Q?Arne_Schr=C3=B6der?=\" <arne.schroder@emg.umu.se>", "from_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "subject": "Re: [R] stacked histograms", "body": "On 4/13/07, Deepayan Sarkar  wrote:\n\n[...]\n\n> Write your own panel function, it shouldn't be too hard.\n\nAnd since this comes up every once in a while, here's a possible implementation:\n\n\nlibrary(lattice)\n\nhist.constructor <-\n    function(x, breaks,\n             include.lowest = TRUE,\n             right = TRUE, ...)\n{\n    if (is.numeric(breaks) && length(breaks) > 1)\n        hist(as.numeric(x), breaks = breaks, plot = FALSE,\n             include.lowest = include.lowest,\n             right = right)\n    else\n        hist(as.numeric(x), breaks = breaks, plot = FALSE)\n}\n\n\n\npanel.grouped.histogram <-\n    function(x,\n             groups = stop(\"groups must be specified\"), subscripts,\n             breaks, equal.widths = TRUE, type = \"density\",\n             nint = round(log2(length(x)) + 1),\n             alpha = plot.polygon$alpha,\n             col = plot.polygon$col,\n             border = plot.polygon$border,\n             lty = plot.polygon$lty,\n             lwd = plot.polygon$lwd, ...)\n{\n    plot.polygon <- trellis.par.get(\"superpose.polygon\")\n    if (length(x) < 1) return()\n    if (is.null(breaks)) {\n        breaks <- if (is.factor(x))\n            seq_len(1 + nlevels(x)) - 0.5\n        else if (equal.widths)\n            do.breaks(range(x, finite = TRUE), nint)\n        else quantile(x, 0:nint/nint, na.rm = TRUE)\n    }\n    h <- hist.constructor(x, breaks = breaks, ...)\n    y <-\n        switch(type,\n               count = h$counts,\n               percent = 100 * h$counts/length(x),\n               density = h$intensities)\n    breaks <- h$breaks\n    stopifnot((nb <- length(breaks)) > 1)\n\n    ## support for groups\n    vals <-\n        if (is.factor(groups)) levels(groups)\n        else sort(unique(groups))\n    nvals <- length(vals)\n    subg <- groups[subscripts]\n    ok <- !is.na(subg)\n\n    alpha <- rep(alpha, nvals)\n    col <- rep(col, nvals)\n    border <- rep(border, nvals)\n    lty <- rep(lty, nvals)\n    lwd <- rep(lwd, nvals)\n\n    props.group <-\n        sapply(vals,\n               function(v) {\n                   id <- subg == v\n                   hv <- hist.constructor(x[id], breaks = breaks, ...)\n                   if (type == \"density\") hv$intensities\n                   else hv$counts\n               })\n    props.group <- prop.table(props.group, margin = 1)\n    y.group <-\n        sapply(seq_along(y),\n               function(i) y[i] * c(0, cumsum(props.group[i, ])))\n    for (i in seq_len(nvals))\n    {\n        panel.rect(x = breaks[-nb],\n                   y = y.group[i, ],\n                   height = y.group[i + 1, ] - y.group[i, ],\n                   width = diff(breaks),\n                   col = col[i], alpha = alpha[i],\n                   border = border[i], lty = lty[i],\n                   lwd = lwd[i],\n                   just = c(\"left\", \"bottom\"))\n    }\n}\n\n\nhistogram(~height, singer)\n\nhistogram(~height, singer, groups = voice.part,\n          panel = panel.grouped.histogram,\n          auto.key =\n          list(space = \"right\", reverse.rows = TRUE,\n               points = FALSE, rectangles = TRUE))\n\n\n-Deepayan\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}