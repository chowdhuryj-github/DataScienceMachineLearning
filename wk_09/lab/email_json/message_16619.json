{"category": "ham", "to_address": "\"Kevin Tew\" <tewk@tewk.com>, \"Jonathan Worthington\" <jnthn@jnthn.net>", "from_address": "\"jerry gay\" <jerry.gay@gmail.com>", "subject": "[perl #42693] [BUG] method overload in pir subclass of pmc pccmethod leaves object undefined", "body": "could one of you take a look at this for me? i've started digging into\nthe pmc2c code, but it'll be a long while before i grok it. since you\ntwo have an understanding of that code already, perhaps something will\njump out at you.\n\n~jerry\n\n---------- Forwarded message ----------\nFrom: jerry gay \nDate: Apr 23, 2007 12:26 PM\nSubject: [BUG] method overload in pir subclass of pmc pccmethod leaves\nobject undefined\nTo: parrotbug \n\n\nwhile creating a subclass of Exporter to test inter-language exports,\ni stumbled across a bug that i can't seem to fix.\n\ni've created a subclass of Exporter called MyExporter. MyExporter has\nan overridden 'add_global' method, which adds a '&' sigil to each\nglobal specified by the user and calls the method in the superclass.\n\ni've also created a high-level language that uses the '&' sigil on\nsubs, and i import and aim to call the hll sub. however, the code\nnever finishes 'add_method', as it segfaults inside the supermethod\nwith an undefined 'exp' object. that is, from src/pmc/exporter.pmc,\nline 260:\n\n        Parrot_Exporter *exp = PARROT_EXPORTER(SELF);\n\nafter this line, 'exp' is NULL, but 'SELF' (or after macro expansion\n'pmc') is not. this is not the case when 'add_method' has not been\noverridden. here's the pir code that exposes the bug:\n\n.sub 'main' :main\n    .local pmc exp, ns\n\n    exp = new 'MyExporter'\n\n    ns = get_root_namespace ['foo']\n    exp.'source'( ns )\n\n    exp.'add_global'('bar')\n\nsay \"NEVER REACHES HERE\"\n\n    exp.'import'()\n\n    '&bar'() ## THIS WILL SUCCEED!\n     'bar'() ## THIS WILL FAIL!\n             ## THAT'S NOT WHAT I WANT!!!\n.end\n\n\n## create a subclass of Exporter that overrides 'add_global'\n## it adds a '&' sigil to each requested global\n.namespace ['MyExporter']\n.sub 'onload' :load :init :anon\n    .local pmc class\n    class = subclass 'Exporter', 'MyExporter'\n    .return ()\n.end\n\n\n.sub 'add_global' :method\n    .param string glb      :optional\n    .param int    has_glb  :opt_flag\n\n    .local pmc args, super\n    args = new .Hash\n    super = new .Super, self\n\n    unless has_glb goto no_global\n    glb = concat '&', glb\n    .return super.'add_global'( glb )\n  no_global:\n    .return super.'add_global'()\n.end\n\n\n# create a high-level language that uses '&' sigil for sub names\n.HLL 'foo', ''\n.sub '&bar'\n    say 'hello, world!'\n.end\n\n\nnote that switching from a tail method call to a regular method call\nhas no effect.\n\nalso note that my code also exposes a problem with the current\nExporter implementation: the imported sub name does not match the\nrequested name. i have yet to address this as the current bug is\nblocking progress.\n\n~jerry\n\n"}