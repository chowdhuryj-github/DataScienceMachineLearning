{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Bob Rogers <rogers-perl6@rgrjr.dyndns.org>", "subject": "[perl #43462] [PATCH] some clearups, illegal memory accessing ", "body": "   From: Bram Geron (via RT) \n   Date: Sun, 01 Jul 2007 03:53:50 -0700\n\n   # New Ticket Created by  Bram Geron \n   # Please include the string:  [perl #43462]\n   # in the subject line of all future correspondence about this issue. \n   # \n\n   . . .\n\n   Secondly, I discovered that when you're using -D80, Parrot_free_context\n   prints out the name of the 'sub' that the context was made for. I think\n   we can't rely on the sub being there, as this example will show:\n\n   - Create closure A over main.\n   - Invoke closure A, creating context B.\n     - Create closure C over closure A, storing a ref to context B (but not\n       to closure A). Store it in a global var maybe.\n   - Exit closure A. There is one less reference to context B.\n   - Empty the global var holding closure C.\n   - Free closure C. Now context B can be freed too:\n     [free  ctx 0x12345678 of sub '']\n\n   I got a segfault for it, but my test case is too large to attach and I\n   think it will be hard to get the size down. It isn't very legible anyway.\n\nI think you will have to send me your test case, or at least a more\ndetailed recipe.  I do not see how the above sequence of events can lead\nto a dangling reference to a deleted sub -- unless there is also a GC\nbug, in which case I am unlikely to be able to reproduce the problem\nfrom just a description.\n\n   If this is really a GC problem, then you may be able to get your test\ncase smaller by inserting \"sweep 1\" shortly before the point that it\nfails.  HTH,\n\n\t\t\t\t\t-- Bob\n\n"}