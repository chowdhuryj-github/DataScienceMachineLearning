{"category": "ham", "to_address": "\"beginners perl\" <beginners@perl.org>", "from_address": "\"Jenda Krynicky\" <Jenda@Krynicky.cz>", "subject": "Re: Nested loop", "body": "From: \"Chas Owens\" \n> On 4/18/07, yitzle  wrote:\n> > I got an array of hashes so I am using a foreach (@arr) loop to access\n> > the hashes.\n> > How do I go about looping through the hash's keys/values? I was\n> > thinking of another foreach, but then the $_ gets a bit screwed up...\n> >\n> > Do I need to do this ?\n> > foreach(@arr) {\n> >   %hash = %{$_};\n> >   foreach (keys %hash) {\n> >     print \"$_ => $hash{$_}\\n\";\n> >   }\n> > }\n> \n> foreach is dead, long live for.\n\nWilliam is dead, long live Bill?\n\nforeach and for are two names for the same thing and just as you can \ncall someone both William and Bill you can use foreach and for \ninterchangeably.\n\nforeach(my $i = 0; $i < $whatever; $i++)\nfor(my $i = 0; $i < $whatever; $i++)\n\nfor my $x (@array)\nforeach my $x (@array)\n\nfor (@array)\nforeach (@array)\n\nNo difference to the computer. Use whichever reads best!\n\nI would myself use \"for\" for the C-style loops and if I use the loop \nas a way to create an alias \n\n  for ($data->{$key}[1]{whatever}{booo}) {\n    s/.../.../g;\n    s/.../.../g;\n    if (/.../) {\n      $_ = \"$3-$2-$1\"\n    }\n  }\n\nor\n\n  for my $text ($data->{$key}[1]{whatever}{booo}) {\n    $text =~ s/.../.../g;\n    $text = foolify($text, $sumfin);\n  }\n\nand \"foreach\" is I need to loop through a collection (array, list, \nkeys or values of a hash, ...). Though I don't think I'm 100% \nconsistent in this.\n\nJenda\n===== Jenda@Krynicky.cz === http://Jenda.Krynicky.cz =====\nWhen it comes to wine, women and song, wizards are allowed \nto get drunk and croon as much as they like.\n\t-- Terry Pratchett in Sourcery\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}