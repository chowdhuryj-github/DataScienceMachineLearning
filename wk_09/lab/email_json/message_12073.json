{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jerry@samba.org", "subject": "svn commit: samba r22430 - in branches: SAMBA_3_0/source/nsswitch\n\tSAMBA_3_0_25/source/nsswitch", "body": "Author: jerry\nDate: 2007-04-21 21:29:31 +0000 (Sat, 21 Apr 2007)\nNew Revision: 22430\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22430\n\nLog:\nAdd SID validate to sid2uid() and sid2gid() public entry points in winbindd\nModified:\n   branches/SAMBA_3_0/source/nsswitch/winbindd_sid.c\n   branches/SAMBA_3_0_25/source/nsswitch/winbindd_sid.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/nsswitch/winbindd_sid.c\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/winbindd_sid.c\t2007-04-21 21:27:59 UTC (rev 22429)\n+++ branches/SAMBA_3_0/source/nsswitch/winbindd_sid.c\t2007-04-21 21:29:31 UTC (rev 22430)\n@@ -183,6 +183,40 @@\n \trequest_ok(state);\n }\n \n+static void sid2uid_lookupsid_recv( void *private_data, BOOL success, \n+\t\t\t\t    const char *domain_name, \n+\t\t\t\t    const char *name, \n+\t\t\t\t    enum lsa_SidType type)\n+{\n+\tstruct winbindd_cli_state *state =\n+\t\ttalloc_get_type_abort(private_data, struct winbindd_cli_state);\n+\tDOM_SID sid;\n+\n+\tif (!success) {\n+\t\tDEBUG(5, (\"sid2uid_lookupsid_recv Could not convert get sid type for %s\\n\",\n+\t\t\t  state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\n+\t}\n+\n+\tif ( (type!=SID_NAME_USER) || (type!=SID_NAME_COMPUTER) ) {\n+\t\tDEBUG(5,(\"sid2uid_lookupsid_recv: Sid %s is not a user or a computer.\\n\", \n+\t\t\t state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\t\t\n+\t}\n+\n+\tif (!string_to_sid(&sid, state->request.data.sid)) {\n+\t\tDEBUG(1, (\"sid2uid_lookupsid_recv: Could not get convert sid %s from string\\n\",\n+\t\t\t  state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\n+\t}\n+\t\n+\t/* always use the async interface (may block) */\n+\twinbindd_sid2uid_async(state->mem_ctx, &sid, sid2uid_recv, state);\n+}\n+\n void winbindd_sid_to_uid(struct winbindd_cli_state *state)\n {\n \tDOM_SID sid;\n@@ -200,8 +234,11 @@\n \t\treturn;\n \t}\n \n-\t/* always use the async interface (may block) */\n-\twinbindd_sid2uid_async(state->mem_ctx, &sid, sid2uid_recv, state);\n+\t/* Validate the SID as a user.  Hopefully this will hit cache.\n+\t   Needed to prevent DoS by exhausting the uid allocation\n+\t   range from random SIDs. */\n+\n+\twinbindd_lookupsid_async( state->mem_ctx, &sid, sid2uid_lookupsid_recv, state );\n }\n \n /* Convert a sid to a gid.  We assume we only have one rid attached to the\n@@ -223,6 +260,43 @@\n \trequest_ok(state);\n }\n \n+static void sid2gid_lookupsid_recv( void *private_data, BOOL success, \n+\t\t\t\t    const char *domain_name, \n+\t\t\t\t    const char *name, \n+\t\t\t\t    enum lsa_SidType type)\n+{\n+\tstruct winbindd_cli_state *state =\n+\t\ttalloc_get_type_abort(private_data, struct winbindd_cli_state);\n+\tDOM_SID sid;\n+\n+\tif (!success) {\n+\t\tDEBUG(5, (\"sid2gid_lookupsid_recv: Could not convert get sid type for %s\\n\",\n+\t\t\t  state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\n+\t}\n+\n+\tif ( (type!=SID_NAME_DOM_GRP) || \n+\t     (type!=SID_NAME_ALIAS) ||\n+\t     (type!=SID_NAME_WKN_GRP) ) \n+\t{\n+\t\tDEBUG(5,(\"sid2gid_lookupsid_recv: Sid %s is not a group.\\n\", \n+\t\t\t state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\t\t\n+\t}\n+\n+\tif (!string_to_sid(&sid, state->request.data.sid)) {\n+\t\tDEBUG(1, (\"sid2gid_lookupsid_recv: Could not get convert sid %s from string\\n\",\n+\t\t\t  state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\n+\t}\n+\t\n+\t/* always use the async interface (may block) */\n+\twinbindd_sid2gid_async(state->mem_ctx, &sid, sid2gid_recv, state);\n+}\n+\n void winbindd_sid_to_gid(struct winbindd_cli_state *state)\n {\n \tDOM_SID sid;\n@@ -240,8 +314,11 @@\n \t\treturn;\n \t}\n \n-\t/* always use the async interface (may block) */\n-\twinbindd_sid2gid_async(state->mem_ctx, &sid, sid2gid_recv, state);\n+\t/* Validate the SID as a group.  Hopefully this will hit cache.\n+\t   Needed to prevent DoS by exhausting the uid allocation\n+\t   range from random SIDs. */\n+\n+\twinbindd_lookupsid_async( state->mem_ctx, &sid, sid2gid_lookupsid_recv, state );\t\n }\n \n static void sids2xids_recv(void *private_data, BOOL success, void *data, int len)\n\nModified: branches/SAMBA_3_0_25/source/nsswitch/winbindd_sid.c\n===================================================================\n--- branches/SAMBA_3_0_25/source/nsswitch/winbindd_sid.c\t2007-04-21 21:27:59 UTC (rev 22429)\n+++ branches/SAMBA_3_0_25/source/nsswitch/winbindd_sid.c\t2007-04-21 21:29:31 UTC (rev 22430)\n@@ -183,6 +183,40 @@\n \trequest_ok(state);\n }\n \n+static void sid2uid_lookupsid_recv( void *private_data, BOOL success, \n+\t\t\t\t    const char *domain_name, \n+\t\t\t\t    const char *name, \n+\t\t\t\t    enum lsa_SidType type)\n+{\n+\tstruct winbindd_cli_state *state =\n+\t\ttalloc_get_type_abort(private_data, struct winbindd_cli_state);\n+\tDOM_SID sid;\n+\n+\tif (!success) {\n+\t\tDEBUG(5, (\"sid2uid_lookupsid_recv Could not convert get sid type for %s\\n\",\n+\t\t\t  state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\n+\t}\n+\n+\tif ( (type!=SID_NAME_USER) || (type!=SID_NAME_COMPUTER) ) {\n+\t\tDEBUG(5,(\"sid2uid_lookupsid_recv: Sid %s is not a user or a computer.\\n\", \n+\t\t\t state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\t\t\n+\t}\n+\n+\tif (!string_to_sid(&sid, state->request.data.sid)) {\n+\t\tDEBUG(1, (\"sid2uid_lookupsid_recv: Could not get convert sid %s from string\\n\",\n+\t\t\t  state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\n+\t}\n+\t\n+\t/* always use the async interface (may block) */\n+\twinbindd_sid2uid_async(state->mem_ctx, &sid, sid2uid_recv, state);\n+}\n+\n void winbindd_sid_to_uid(struct winbindd_cli_state *state)\n {\n \tDOM_SID sid;\n@@ -200,8 +234,11 @@\n \t\treturn;\n \t}\n \n-\t/* always use the async interface (may block) */\n-\twinbindd_sid2uid_async(state->mem_ctx, &sid, sid2uid_recv, state);\n+\t/* Validate the SID as a user.  Hopefully this will hit cache.\n+\t   Needed to prevent DoS by exhausting the uid allocation\n+\t   range from random SIDs. */\n+\n+\twinbindd_lookupsid_async( state->mem_ctx, &sid, sid2uid_lookupsid_recv, state );\n }\n \n /* Convert a sid to a gid.  We assume we only have one rid attached to the\n@@ -223,6 +260,43 @@\n \trequest_ok(state);\n }\n \n+static void sid2gid_lookupsid_recv( void *private_data, BOOL success, \n+\t\t\t\t    const char *domain_name, \n+\t\t\t\t    const char *name, \n+\t\t\t\t    enum lsa_SidType type)\n+{\n+\tstruct winbindd_cli_state *state =\n+\t\ttalloc_get_type_abort(private_data, struct winbindd_cli_state);\n+\tDOM_SID sid;\n+\n+\tif (!success) {\n+\t\tDEBUG(5, (\"sid2gid_lookupsid_recv: Could not convert get sid type for %s\\n\",\n+\t\t\t  state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\n+\t}\n+\n+\tif ( (type!=SID_NAME_DOM_GRP) || \n+\t     (type!=SID_NAME_ALIAS) ||\n+\t     (type!=SID_NAME_WKN_GRP) ) \n+\t{\n+\t\tDEBUG(5,(\"sid2gid_lookupsid_recv: Sid %s is not a group.\\n\", \n+\t\t\t state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\t\t\n+\t}\n+\n+\tif (!string_to_sid(&sid, state->request.data.sid)) {\n+\t\tDEBUG(1, (\"sid2gid_lookupsid_recv: Could not get convert sid %s from string\\n\",\n+\t\t\t  state->request.data.sid));\n+\t\trequest_error(state);\n+\t\treturn;\n+\t}\n+\t\n+\t/* always use the async interface (may block) */\n+\twinbindd_sid2gid_async(state->mem_ctx, &sid, sid2gid_recv, state);\n+}\n+\n void winbindd_sid_to_gid(struct winbindd_cli_state *state)\n {\n \tDOM_SID sid;\n@@ -240,8 +314,11 @@\n \t\treturn;\n \t}\n \n-\t/* always use the async interface (may block) */\n-\twinbindd_sid2gid_async(state->mem_ctx, &sid, sid2gid_recv, state);\n+\t/* Validate the SID as a group.  Hopefully this will hit cache.\n+\t   Needed to prevent DoS by exhausting the uid allocation\n+\t   range from random SIDs. */\n+\n+\twinbindd_lookupsid_async( state->mem_ctx, &sid, sid2gid_lookupsid_recv, state );\t\n }\n \n static void sids2xids_recv(void *private_data, BOOL success, void *data, int len)\n\n"}