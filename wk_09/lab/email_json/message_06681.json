{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "\"John W. Krahn\" <krahnj@telus.net>", "subject": "Re: Problem using $1 in substitution command", "body": "Andreas Karlsson wrote:\n> Hi guys,\n\nHello,\n\n> I'm doing a script to search through a lot of files and doing some replacements.\n> It is a lot of different replacements that has to be done so I list them in a .txt\n> instruction file in two columns representing the strings to be matched and replaced\n> and the new text.\n> A problem arise when doing some more complex substitution, wanting to keep certain\n> parts of a string while replacing others. To be specific in this case I want to\n> remove the '' surrounding a string. The string between '' will change.\n> \n> The problem comes from that I want to use the \\1 (or $1) variable but since the\n> substitution command looks like \n> $line=~ s/$subst_from/$subst_to/ig;\n> \n> and the $1 is incorporated into the $subst_to variable it is being populated when\n> the replecement string is assinged to $subst_to. \n> How can I keep the substitution command as general as I have it, always taking the\n> same to variables but still making use of the $1,...,$9 feature of Perl?\n> I post you a test-program which shows my problem. \n> List.\\1 being printed after 'Result:' is the problem.\n> \n> It's developed in an cygwin-environment and executes using the command \n> perl PerlSubstituteProblem.pl\n> \n> The printouts looks like this when I run it:\n> \n> Script started.\n> subst_to: List.\\1\n> '' should be removed in List.'123_KeepThis_123'\n> $1_1: 123_KeepThis_123\n> $1_2: 123_KeepThis_123\n> Result:\n> '' should be removed in List.\\1\n> Same thing but non-general s//:\n> '' should be removed in List.123_KeepThis_123\n> Changed in 1 places\n> \n> \n> ________Program_______________\n> #!/usr/local/bin/perl\n> use strict;\n> use strict 'refs';\n> $|=1; #Flush ON\n> print \"Script started.\\n\";\n> \n> my($nr_of_changes,$line,$line_copy, $subst_from,$subst_to)=0;\n> \n> \n> $subst_from=\"List\\\\.'(\\\\w*)'\";\n> $subst_to=\"List.\\\\1\";\n> print \"subst_to: $subst_to \\n\";\n> \n> $line=\"'' should be removed in List.'123_KeepThis_123' \\n\";\n> print \"$line\";\n> \n> if($line =~/$subst_from/i)\n> {\t\n> \t$line_copy=$line;\t\n> \tprint \"\\$1_1: $1 \\n\";\n> \t$nr_of_changes++;\n> \t$line=~ s/$subst_from/$subst_to/ig;\n> \tprint \"\\$1_2: $1 \\n\";\n> \tprint \"Result: \\n\";\n> \tprint \"$line\";\n> \n> \tprint \"Same thing but non-general s//: \\n\";\n> \t$line_copy=~ s/$subst_from/List.\\1/ig;\n> \tprint \"$line_copy\";\n> \n> }\n> \n> print\"Changed in $nr_of_changes places\\n\";\n> \n> exit(0);\n\n\n\n$ perl -le'\nmy $subst_from = qr/(?<=List\\.)\\047(\\w*)\\047/;\nmy $subst_to   = q/$1/;\n\nmy $line = qq/\\047\\047 should be removed in List.\\047123_KeepThis_123\\047 \\n/;\n\nprint for $subst_from, $subst_to, $line;\n\nmy $nr_of_changes = $line =~ s/$subst_from/$subst_to/eeig;\n\nprint for $nr_of_changes, $line;\n'\n(?-xism:(?<=List\\.)\\047(\\w*)\\047)\n$1\n'' should be removed in List.'123_KeepThis_123'\n\n1\n'' should be removed in List.123_KeepThis_123\n\n\n\n\nJohn\n-- \nPerl isn't a toolbox, but a small machine shop where you can special-order\ncertain sorts of tools at low cost and in short order.       -- Larry Wall\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}