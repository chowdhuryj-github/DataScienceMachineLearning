{"category": "ham", "to_address": "\"Andrej Kastrin\" <andrej.kastrin@siol.net>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Equal keys in hash", "body": "On 6/2/07, Andrej Kastrin  wrote:\n> Deal all,\n>\n> if the key already exists in the hash, then its value is overwritten.\n> So, if I have the following structure of the input file\n>\n> A foo\n> A faa\n> A hoo\n> B foo\n> B aaa\n> C bbb\n>\n> what is the procedure of choice to store all key-value pairs into the\n> hash and print it out?\n>\n> Thanks in advance for any suggestion.\n>\n> Best, Andrej\n\nIt sounds like you are looking for what is called a HoA (hash of\narrays).  it is  a complex data structure built on top of a hash using\narray references.  All of that sounds more complicated than it is.\nWhat follows is the relevant section of perldoc perldsc.  You will\nprobably want to read the whole doc since it contains lots of good\ninfo.  If you have any questions, please ask again.\n\nHASHES OF ARRAYS\n       Declaration of a HASH OF ARRAYS\n\n        %HoA = (\n               flintstones        => [ \"fred\", \"barney\" ],\n               jetsons            => [ \"george\", \"jane\", \"elroy\" ],\n               simpsons           => [ \"homer\", \"marge\", \"bart\" ],\n             );\n\n       Generation of a HASH OF ARRAYS\n\n        # reading from file\n        # flintstones: fred barney wilma dino\n        while ( <> ) {\n            next unless s/^(.*?):\\s*//;\n            $HoA{$1} = [ split ];\n        }\n\n        # reading from file; more temps\n        # flintstones: fred barney wilma dino\n        while ( $line = <> ) {\n            ($who, $rest) = split /:\\s*/, $line, 2;\n            @fields = split ' ', $rest;\n            $HoA{$who} = [ @fields ];\n        }\n\n        # calling a function that returns a list\n        for $group ( \"simpsons\", \"jetsons\", \"flintstones\" ) {\n            $HoA{$group} = [ get_family($group) ];\n        }\n\n        # likewise, but using temps\n        for $group ( \"simpsons\", \"jetsons\", \"flintstones\" ) {\n            @members = get_family($group);\n            $HoA{$group} = [ @members ];\n        }\n\n        # append new members to an existing family\n        push @{ $HoA{\"flintstones\"} }, \"wilma\", \"betty\";\n\n       Access and Printing of a HASH OF ARRAYS\n\n\n        # one element\n        $HoA{flintstones}[0] = \"Fred\";\n\n        # another element\n        $HoA{simpsons}[1] =~ s/(\\w)/\\u$1/;\n\n        # print the whole thing\n        foreach $family ( keys %HoA ) {\n            print \"$family: @{ $HoA{$family} }\\n\"\n        }\n\n        # print the whole thing with indices\n        foreach $family ( keys %HoA ) {\n            print \"family: \";\n            foreach $i ( 0 .. $#{ $HoA{$family} } ) {\n                print \" $i = $HoA{$family}[$i]\";\n            }\n            print \"\\n\";\n        }\n\n        # print the whole thing sorted by number of members\n        foreach $family ( sort { @{$HoA{$b}} <=> @{$HoA{$a}} } keys %HoA ) {\n            print \"$family: @{ $HoA{$family} }\\n\"\n        }\n\n        # print the whole thing sorted by number of members and name\n        foreach $family ( sort {\n                                   @{$HoA{$b}} <=> @{$HoA{$a}}\n                                               ||\n                                           $a cmp $b\n                   } keys %HoA )\n        {\n            print \"$family: \", join(\", \", sort @{ $HoA{$family} }), \"\\n\";\n        }\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}