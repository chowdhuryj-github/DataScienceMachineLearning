{"category": "ham", "to_address": "Nigel Peck <nigel@miswebdesign.com>", "from_address": "Robert Boone <robert@rlb3.com>", "subject": "Re: New to OO Perl", "body": "You may want to seperate your initialization from instantiation.\n\nsub new {\n\t\n\tmy ( $class, $data ) = @_;\n\t\n\tmy $self = bless {}, $class;\n         $self->init();\n\n        return $self;\n\t\n}\n\nsub init {\n     my ($self) = @_;\n     $self->{image_magick_object} = Image::Magick::new();\n\n     my $error = $data->{image_magick_object}->Read( $data->{path} );\n     croak $error if $error;\n}\n\nFuture subclasses won't need a new sub and supply there own init sub:\n\nsub init {\n     my ($self) = @_;\n     $self->SUPER::init()\n\n     $self->{'more_data'} = [];\n}\n\n\n\n\nOn May 2, 2007, at 5:27 PM, Nigel Peck wrote:\n\n>\n> Hi all,\n>\n> I'm new to writing Object Oriented Perl and am hoping for some advice?\n>\n> I found the need to use Image::Magick tonight and in order to reuse  \n> the code in future I put it in a package of subs.\n>\n> I then thought it seemed like a good opportunity to try writing an  \n> OO module so I did.\n>\n> However I'm not sure that I couldn't do it better by making use of  \n> inheritance although I'm not sure how to do it and also looking for  \n> any other suggestions.\n>\n> A cut down version of my code goes like this...\n>\n> =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n> #!/usr/bin/perl\n>\n> use strict;\n> use warnings;\n>\n> use Carp;\n>\n> my $error;\n> my $obj_image;\n>\n> my $obj_image = MIS::Common::Image_magick->new( { path => '/home/ \n> nigel/scripts/taylor1.jpg' } );\n> \t\n> $obj_image->resize ( { geometry => '360' } );\n> $obj_image->crop ( { geometry => '360x480' } );\n> \t\n> $obj_image->output ( { path => '/home/nigel/scripts/taylor/ \n> thumbnail.jpg' } );\n>\n> ######################################################################\n>\n> package MIS::Common::Image_magick;\n>\n> use Image::Magick;\n>\n> sub new {\n> \t\n> \tmy ( $class, $data ) = @_;\n> \t\n> \t$data->{image_magick_object} = Image::Magick::new();\n> \t\n> \tmy $error = $data->{image_magick_object}->Read( $data->{path} );\n> \tcroak $error if $error;\n> \t\n> \treturn bless $data, $class;\n> \t\n> }\n>\n> sub output {\n> \t\n> \tmy ( $self, $args ) = @_;\n> \t\n> \tmy $error = $self->{image_magick_object}->Write( $args->{path} );\n> \tcroak $error if $error;\n> \t\n> }\n>\n> sub resize {\n> \t\n> \tmy ( $self, $args ) = @_;\n> \t\n> \t$error = $self->{image_magick_object}->Resize( geometry => $args-> \n> {geometry} );\n> \tcroak $error if $error;\n> \t\n> }\n>\n> sub crop {\n> \t\n> \tmy ( $self, $args ) = @_;\n> \t\n> \t$error = $self->{image_magick_object}->Crop( geometry => $args-> \n> {geometry} );\n> \tcroak $error if $error;\n> \t\n> }\n> =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n>\n> What could I do better?\n>\n> TIA.\n>\n> Cheers,\n> Nigel\n>\n>\n> -- \n> To unsubscribe, e-mail: beginners-unsubscribe@perl.org\n> For additional commands, e-mail: beginners-help@perl.org\n> http://learn.perl.org/\n>\n>\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}