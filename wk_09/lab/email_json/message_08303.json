{"category": "ham", "to_address": "<wildscop@yahoo.com>, <r-help@stat.math.ethz.ch>", "from_address": "\"Steven McKinney\" <smckinney@bccrc.ca>", "subject": "Re: [R] Extracting approximate Wald test (Chisq)\n\tfromcoxph(..frailty)", "body": "\nHi Mohammed,\n\nHere's one way to get the information you need.\n\nFirst I examined the output of your coxph() call:\n\n > library(survival)\n > kfitm1<-coxph(formula = Surv(time, status) ~ age +\n + sex +disease + frailty(id, dist = \"gauss\"),\n + data = kidney)\n > class(kfitm1)\n [1] \"coxph.penal\" \"coxph\"      \n > attributes(kfitm1)\n $names\n  [1] \"coefficients\"      \"var\"               \"var2\"             \n  [4] \"loglik\"            \"iter\"              \"linear.predictors\"\n  [7] \"residuals\"         \"means\"             \"method\"           \n [10] \"frail\"             \"fvar\"              \"df\"               \n [13] \"df2\"               \"penalty\"           \"pterms\"           \n [16] \"assign2\"           \"history\"           \"coxlist1\"         \n [19] \"printfun\"          \"n\"                 \"terms\"            \n [22] \"assign\"            \"wald.test\"         \"y\"                \n [25] \"formula\"           \"call\"             \n\n $class\n [1] \"coxph.penal\" \"coxph\"      \n\nSo the returned object is actually of class coxph.penal,\nnot coxph.  Thus you'll want to look into the functions\n\n\nsurvival:::summary.coxph.penal\nsurvival:::print.coxph.penal\n\nI checked the wald piece of the returned object,\nthat's not what you needed.\n\n > kfitm1$wald.test\n [1] 14.96798\n \n\nI see that what you want is in the \"temp\"\nmatrix composed in the\nsurvival:::summary.coxph.penal\nfunction.\n\nMake your own copy of the function\n\nmy.summary.coxph.penal <- survival:::summary.coxph.penal\n\nEdit the function and return the temp matrix\n(see modified my.summary.coxph.penal function below,\nI added a return list including the temp matrix.)\n\n\n\n> kfitm1.my.summary <- my.summary.coxph.penal(kfitm1)\nCall:\ncoxph(formula = Surv(time, status) ~ age + sex + disease + frailty(id, \n    dist = \"gauss\"), data = kidney)\n\n  n= 76 \n                          coef     se(coef) se2    Chisq DF   p      \nage                        0.00489 0.0150   0.0106  0.11  1.0 0.74000\nsex                       -1.69703 0.4609   0.3617 13.56  1.0 0.00023\ndiseaseGN                  0.17980 0.5447   0.3927  0.11  1.0 0.74000\ndiseaseAN                  0.39283 0.5447   0.3982  0.52  1.0 0.47000\ndiseasePKD                -1.13630 0.8250   0.6173  1.90  1.0 0.17000\nfrailty(id, dist = \"gauss                          17.89 12.1 0.12000\n\n           exp(coef) exp(-coef) lower .95 upper .95\nage            1.005      0.995    0.9759     1.035\nsex            0.183      5.458    0.0742     0.452\ndiseaseGN      1.197      0.835    0.4116     3.481\ndiseaseAN      1.481      0.675    0.5093     4.308\ndiseasePKD     0.321      3.115    0.0637     1.617\n\nIterations: 6 outer, 30 Newton-Raphson\n     Variance of random effect= 0.493 \nDegrees of freedom for terms=  0.5  0.6  1.7 12.1 \nRsquare= 0.465   (max possible= 0.993 )\nLikelihood ratio test= 47.5  on 14.9 df,   p=2.82e-05\nWald test            = 15.0  on 14.9 df,   p=0.446\n> attributes(kfitm1.my.summary)\n$names\n[1] \"temp\" \"tmp\" \n\n> kfitm1.my.summary$temp\n                          coef       se(coef) se2      Chisq   DF     p        \nage                       \" 0.00489\" \"0.0150\" \"0.0106\" \" 0.11\" \" 1.0\" \"0.74000\"\nsex                       \"-1.69703\" \"0.4609\" \"0.3617\" \"13.56\" \" 1.0\" \"0.00023\"\ndiseaseGN                 \" 0.17980\" \"0.5447\" \"0.3927\" \" 0.11\" \" 1.0\" \"0.74000\"\ndiseaseAN                 \" 0.39283\" \"0.5447\" \"0.3982\" \" 0.52\" \" 1.0\" \"0.47000\"\ndiseasePKD                \"-1.13630\" \"0.8250\" \"0.6173\" \" 1.90\" \" 1.0\" \"0.17000\"\nfrailty(id, dist = \"gauss \"\"         \"\"       \"\"       \"17.89\" \"12.1\" \"0.12000\"\n> class(kfitm1.my.summary$temp)\n[1] \"matrix\"\n> kfitm1.my.summary$temp[grep(\"frailty\", dimnames(kfitm1.my.summary$temp)[[1]]), \"Chisq\"]\n[1] \"17.89\"\n>\n\nSo you can get the information you need from the returned\ntemp matrix as above. \nThere are many other ways to do this, but the above\nideas can get you going.  \n\nHope this helps\n\n\n\n\nmy.summary.coxph.penal <- \nfunction (object, conf.int = 0.95, scale = 1, terms = FALSE, \n    maxlabel = 25, digits = max(options()$digits - 4, 3), ...) \n{\n    if (!is.null(object$call)) {\n        cat(\"Call:\\n\")\n        dput(object$call)\n        cat(\"\\n\")\n    }\n    if (!is.null(object$fail)) {\n        cat(\" Coxreg failed.\", object$fail, \"\\n\")\n        return()\n    }\n    savedig <- options(digits = digits)\n    on.exit(options(savedig))\n    omit <- object$na.action\n    if (length(omit)) \n        cat(\"  n=\", object$n, \" (\", naprint(omit), \")\\n\", sep = \"\")\n    else cat(\"  n=\", object$n, \"\\n\")\n    coef <- object$coef\n    if (length(coef) == 0 && length(object$frail) == 0) \n        stop(\"Penalized summary function can't be used for a null model\")\n    if (length(coef) > 0) {\n        nacoef <- !(is.na(coef))\n        coef2 <- coef[nacoef]\n        if (is.null(coef) | is.null(object$var)) \n            stop(\"Input is not valid\")\n        se <- sqrt(diag(object$var))\n    }\n    pterms <- object$pterms\n    nterms <- length(pterms)\n    npenal <- sum(pterms > 0)\n    print.map <- rep(0, nterms)\n    if (!is.null(object$printfun)) {\n        temp <- unlist(lapply(object$printfun, is.null))\n        print.map[pterms > 0] <- (1:npenal) * (!temp)\n    }\n    print1 <- NULL\n    pname1 <- NULL\n    if (is.null(object$assign2)) \n        alist <- object$assign[-1]\n    else alist <- object$assign2\n    print2 <- NULL\n    for (i in 1:nterms) {\n        kk <- alist[[i]]\n        if (print.map[i] > 0) {\n            j <- print.map[i]\n            if (pterms[i] == 2) \n                temp <- (object$printfun[[j]])(object$frail, \n                  object$fvar, , object$df[i], object$history[[j]])\n            else temp <- (object$printfun[[j]])(coef[kk], object$var[kk, \n                kk], object$var2[kk, kk], object$df[i], object$history[[j]])\n            print1 <- rbind(print1, temp$coef)\n            if (is.matrix(temp$coef)) {\n                xx <- dimnames(temp$coef)[[1]]\n                if (is.null(xx)) \n                  xx <- rep(names(pterms)[i], nrow(temp$coef))\n                else xx <- paste(names(pterms)[i], xx, sep = \", \")\n                pname1 <- c(pname1, xx)\n            }\n            else pname1 <- c(pname1, names(pterms)[i])\n            print2 <- c(print2, temp$history)\n        }\n        else if (terms && length(kk) > 1) {\n            pname1 <- c(pname1, names(pterms)[i])\n            temp <- coxph.wtest(object$var[kk, kk], coef[kk])$test\n            print1 <- rbind(print1, c(NA, NA, NA, temp, object$df[i], \n                1 - pchisq(temp, 1)))\n        }\n        else {\n            pname1 <- c(pname1, names(coef)[kk])\n            tempe <- (diag(object$var))[kk]\n            temp <- coef[kk]^2/tempe\n            print1 <- rbind(print1, cbind(coef[kk], sqrt(tempe), \n                sqrt((diag(object$var2))[kk]), temp, 1, 1 - pchisq(temp, \n                  1)))\n        }\n    }\n    temp <- cbind(format(print1[, 1]), format(print1[, 2]), format(print1[, \n        3]), format(round(print1[, 4], 2)), format(round(print1[, \n        5], 2)), format(signif(print1[, 6], 2)))\n    temp <- ifelse(is.na(print1), \"\", temp)\n    dimnames(temp) <- list(substring(pname1, 1, maxlabel), c(\"coef\", \n        \"se(coef)\", \"se2\", \"Chisq\", \"DF\", \"p\"))\n    prmatrix(temp, quote = FALSE)\n    if (conf.int & length(coef) > 0) {\n        z <- qnorm((1 + conf.int)/2, 0, 1)\n        coef <- coef * scale\n        se <- se * scale\n        tmp <- cbind(exp(coef), exp(-coef), exp(coef - z * se), \n            exp(coef + z * se))\n        dimnames(tmp) <- list(substring(names(coef), 1, maxlabel), \n            c(\"exp(coef)\", \"exp(-coef)\", paste(\"lower .\", round(100 * \n                conf.int, 2), sep = \"\"), paste(\"upper .\", round(100 * \n                conf.int, 2), sep = \"\")))\n        cat(\"\\n\")\n        prmatrix(tmp)\n    }\n    logtest <- -2 * (object$loglik[1] - object$loglik[2])\n    sctest <- object$score\n    cat(\"\\nIterations:\", object$iter[1], \"outer,\", object$iter[2], \n        \"Newton-Raphson\\n\")\n    if (length(print2)) {\n        for (i in 1:length(print2)) cat(\"    \", print2[i], \"\\n\")\n    }\n    if (is.null(object$df)) \n        df <- sum(!is.na(coef))\n    else df <- round(sum(object$df), 2)\n    cat(\"Degrees of freedom for terms=\", format(round(object$df, \n        1)), \"\\n\")\n    cat(\"Rsquare=\", format(round(1 - exp(-logtest/object$n), \n        3)), \"  (max possible=\", format(round(1 - exp(2 * object$loglik[1]/object$n), \n        3)), \")\\n\")\n    cat(\"Likelihood ratio test= \", format(round(logtest, 2)), \n        \"  on \", df, \" df,\", \"   p=\", format(1 - pchisq(logtest, \n            df)), \"\\n\", sep = \"\")\n    if (!is.null(object$wald.test)) \n        cat(\"Wald test            = \", format(round(object$wald.test, \n            2)), \"  on \", df, \" df,   p=\", format(1 - pchisq(object$wald.test, \n            df)), sep = \"\")\n    if (!is.null(object$score)) \n        cat(\"\\nScore (logrank) test = \", format(round(sctest, \n            2)), \"  on \", df, \" df,\", \"   p=\", format(1 - pchisq(sctest, \n            df)), sep = \"\")\n    if (is.null(object$rscore)) \n        cat(\"\\n\")\n    else cat(\",   Robust = \", format(round(object$rscore, 2)), \n        \"  p=\", format(1 - pchisq(object$rscore, df)), \"\\n\", \n        sep = \"\")\n    invisible(return(list(temp = temp, tmp = tmp)))\n}\n\n\n\n\nSteven McKinney\n\nStatistician\nMolecular Oncology and Breast Cancer Program\nBritish Columbia Cancer Research Centre\n\nemail: smckinney@bccrc.ca\n\ntel: 604-675-8000 x7561\n\nBCCRC\nMolecular Oncology\n675 West 10th Ave, Floor 4\nVancouver B.C. \nV5Z 1L3\nCanada\n\n\n\n\n-----Original Message-----\nFrom: r-help-bounces@stat.math.ethz.ch on behalf of Mohammad Ehsanul Karim\nSent: Tue 4/17/2007 2:55 PM\nTo: r-help@stat.math.ethz.ch\nSubject: Re: [R] Extracting approximate Wald test (Chisq) fromcoxph(..frailty)\n \nDear list,\n\nI need to extract the approximate Wald test (Chisq) so\nthat I can put it in a loop. str seemed like a great\nidea, but I cannot seem to find the approximate Wald\ntest for frailty (in the example data below: 17.89 and\nits p-value 0.12000) there. I cannot seem to find it\nin capture.output either as numeric form. Do I need to\nmodify some given values? If yes, please give me a\nclue for the example:\n\nlibrary(survival)\nkfitm1<-coxph(formula = Surv(time, status) ~ age +\nsex +disease + frailty(id, dist = \"gauss\"), \ndata = kidney)\nstr(kfitm1)\ncapture.output( print(kfitm1) )\n\n\nMohammad Ehsanul Karim (R - 2.3.1 on windows)\nwildscop at yahoo dot com\nInstitute of Statistical Research and Training\nUniversity of Dhaka\n\n\n________________________________\nOn Tue, 17 Apr 2007, Mohammad Ehsanul Karim wrote:\nYou _can_ use  \ttmp <- capture.output( print(  ) ) and then further process tmp. A _better_\nsolution for most purposes is to look at the object\nproduced by coxph() and figure out how to calculate\nthe Wald statistic from that \nobject. See  \t?coxph.object and  \t?str\nAnother tactic is to look at how print.coxph() does\nits work and use the code in it to produce just the\noutput you desire. Look at page(\nsurvival:::print.coxph, \"print\" )\n\nAssign the output of coxph to some object, and use the\n$ extractor function to obtain what you need. ie:\nrtfm <- coxph(formula = Surv(time, status) ~ age + sex\n+  disease + frailty(id, dist = \"gauss\"), data =\nkidney) \nAge <- coef(rtfm)[\"age\"]\nOR\nSex <- rtfm$coef[\"sex\"]\n\nMohammad Ehsanul Karim wrote:\n> Dear List,\n> How do I extract the approximate Wald test for the\n> frailty (in the following example 17.89 value)?\n> What about the P-values, other Chisq, DF, se(coef)\nand > se2? How can they be extracted?\n######################################################>\nkfitm1\n> Call:\n> coxph(formula = Surv(time, status) ~ age + sex +\n> disease + frailty(id, dist = \"gauss\"), data =\nkidney)\n> \n>                           coef     se(coef)\n> age                        0.00489 0.0150  \n> sex                       -1.69703 0.4609  \n> diseaseGN                  0.17980 0.5447  \n> diseaseAN                  0.39283 0.5447  \n> diseasePKD                -1.13630 0.8250  \n> frailty(id, dist = \"gauss                  \n>                           se2    Chisq DF  \n> age                       0.0106  0.11  1.0\n> sex                       0.3617 13.56  1.0\n> diseaseGN                 0.3927  0.11  1.0\n> diseaseAN                 0.3982  0.52  1.0\n> diseasePKD                0.6173  1.90  1.0\n> frailty(id, dist = \"gauss        17.89 12.1\n>                           p      \n> age                       0.74000\n> sex                       0.00023\n> diseaseGN                 0.74000\n> diseaseAN                 0.47000\n> diseasePKD                0.17000\n> frailty(id, dist = \"gauss 0.12000\n> \n> Iterations: 6 outer, 30 Newton-Raphson\n>      Variance of random effect= 0.493 \n> Degrees of freedom for terms=  0.5  0.6  1.7 12.1 \n> Likelihood ratio test=47.5  on 14.9 df, p=2.82e-05 \nn=\n> 76\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}