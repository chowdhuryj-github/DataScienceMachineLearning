{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14372 - doc/trunk/design/syn", "body": "Author: larry\nDate: Fri Apr 13 10:02:01 2007\nNew Revision: 14372\n\nModified:\n   doc/trunk/design/syn/S03.pod\n\nLog:\nClarification of simplified return values of filetests for brian.d.foy++.\n\n\nModified: doc/trunk/design/syn/S03.pod\n==============================================================================\n--- doc/trunk/design/syn/S03.pod\t(original)\n+++ doc/trunk/design/syn/S03.pod\tFri Apr 13 10:02:01 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 8 Mar 2004\n-  Last Modified: 16 Mar 2007\n+  Last Modified: 13 Apr 2007\n   Number: 3\n-  Version: 110\n+  Version: 111\n \n =head1 Overview\n \n@@ -1477,30 +1477,36 @@\n \n =item *\n \n-The filetest operators are gone.  We now use a Pair as either a\n+The filetest operators are gone.  We now use a C as either a\n pattern or a method name to get the same effect:\n \n     if $filename ~~ :e { say \"exists\" }\n     if $filename.:e { say \"exists\" }\n \n-Both of these forms actually translate to\n-\n-    if $filename.STATUS(:e) { say \"exists\" }\n-\n-which is a generic mechanism that dispatches to the object's\n-class to find the definition of C.  (It just happens that C\n-(filenames) and C (filehandles) default to the expected filetest\n-semantics, but C<$regex.:i> might tell you whether the regex is case\n-insensitive, for instance.)\n+The 1st form actually translates to the latter form, so the object's\n+class decides how to dispatch pair methods.  It just happens that\n+C (filenames), C (filehandles), and C (stat buffers)\n+default to the expected filetest semantics, but C<$regex.:i> might\n+tell you whether the regex is case insensitive, for instance.\n \n Using the pattern form, multiple tests may be combined via junctions:\n \n     given $handle {\n-        when all :r :w :x {...}\n+        when :r & :w & :x {...}\n         when :!w | :!x    {...}\n         when *            {...}\n     }\n \n+When adverbial pairs are stacked into one term, it is assumed they are\n+ANDed together, so\n+\n+    when :r :w :x\n+\n+is equivalent to either of:\n+\n+    when :r & :w & :x\n+    when all(:r,:w,:x)\n+\n The advantage of the method form is that it can be used in places that\n require tighter precedence than C<~~> provides:\n \n@@ -1510,13 +1516,23 @@\n \n     sort { .:M }, @files\n \n-But that demonstrates the other advantage of the method form.\n+But that demonstrates the other advantage of the method form, which is\n+that it allows the \"unary dot\" syntax to test the current topic.\n+\n+Unlike in earlier versions of Perl 6, these filetests do not return\n+stat buffers, but simple scalars of type C, C, or C.\n \n-In general, the user need not worry about caching the stat buffer.\n-The stat buffer will automatically be reused if the same object has\n-recently been queried, where \"recently\" is defined as less than a\n-second or so.  If this is a concern, an explicit stat() or lstat()\n-on that file will automatically reset the stat buffer for that file.\n+In general, the user need not worry about caching the stat buffer\n+when a filename is queried.  The stat buffer will automatically be\n+reused if the same object has recently been queried, where \"recently\"\n+is defined as less than a second or so.  If this is a concern, an\n+explicit stat() or lstat() may be used to return an explicit stat\n+buffer object that will not be subject to timeout, and may be tested\n+repeatedly just as a filename or handle can.  A C object has\n+a C<.file> method that can be queried for its filename (if known);\n+the C<.io> method returns the handle (if known).  If the C\n+object doesn't know its filename but does know its IO handle, then\n+C<.file> attempts to return C<.io.file>.\n \n Note that C<:s> still returns the filesize, but C<:!s> is true\n only if the file is of size 0.\n\n"}