{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23441 - in\n\tbranches/SAMBA_3_0_26/source/registry: .", "body": "Author: obnox\nDate: 2007-06-12 15:55:00 +0000 (Tue, 12 Jun 2007)\nNew Revision: 23441\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23441\n\nLog:\nMerge r20037 from 3_0:\n\n\"Reduce code size slightly by shuffling stuff around.\"\n\nMichael\n\n\nModified:\n   branches/SAMBA_3_0_26/source/registry/reg_api.c\n   branches/SAMBA_3_0_26/source/registry/reg_frontend.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0_26/source/registry/reg_api.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/registry/reg_api.c\t2007-06-12 15:36:02 UTC (rev 23440)\n+++ branches/SAMBA_3_0_26/source/registry/reg_api.c\t2007-06-12 15:55:00 UTC (rev 23441)\n@@ -62,81 +62,67 @@\n \t\t    const struct nt_user_token *token,\n \t\t    struct registry_key **pkey)\n {\n-\tstruct registry_key *key;\n-\tWERROR err;\n-\n+\tSMB_ASSERT(hive != NULL);\n \tSMB_ASSERT(hive[0] != '\\0');\n \tSMB_ASSERT(strchr(hive, '\\\\') == NULL);\n \n-\tif (!(key = TALLOC_ZERO_P(mem_ctx, struct registry_key))) {\n-\t\treturn WERR_NOMEM;\n-\t}\n-\n-\tif (!(key->token = dup_nt_token(key, token))) {\n-\t\tTALLOC_FREE(key);\n-\t\treturn WERR_NOMEM;\n-\t}\n-\n-\terr = regkey_open_internal(key, &key->key, hive, token,\n-\t\t\t\t   desired_access);\n-\n-\tif (!W_ERROR_IS_OK(err)) {\n-\t\tTALLOC_FREE(key);\n-\t\treturn err;\n-\t}\n-\n-\t*pkey = key;\n-\treturn WERR_OK;\n-\n+\treturn regkey_open_onelevel(mem_ctx, NULL, hive, token, desired_access,\n+\t\t\t\t    pkey);\n }\n \n WERROR reg_openkey(TALLOC_CTX *mem_ctx, struct registry_key *parent,\n \t\t   const char *name, uint32 desired_access,\n \t\t   struct registry_key **pkey)\n {\n-\tstruct registry_key *key;\n+\tstruct registry_key *direct_parent = parent;\n \tWERROR err;\n-\tchar *path;\n+\tchar *p, *path, *to_free;\n+\tsize_t len;\n \n-\tif (!(key = TALLOC_ZERO_P(mem_ctx, struct registry_key))) {\n+\tif (!(path = SMB_STRDUP(name))) {\n \t\treturn WERR_NOMEM;\n \t}\n+\tto_free = path;\n \n-\tif (!(key->token = dup_nt_token(key, parent->token))) {\n-\t\tTALLOC_FREE(key);\n-\t\treturn WERR_NOMEM;\n-\t}\n+\tlen = strlen(path);\n \n-\tif (name[0] == '\\0') {\n-\t\t/*\n-\t\t * Make a copy of the parent\n-\t\t */ \n-\t\tpath = talloc_strdup(key, parent->key->name);\n+\tif ((len > 0) && (path[len-1] == '\\\\')) {\n+\t\tpath[len-1] = '\\0';\n \t}\n-\telse {\n-\t\t/*\n-\t\t * Normal subpath open\n-\t\t */\n-\t\tpath = talloc_asprintf(key, \"%s\\\\%s\", parent->key->name,\n-\t\t\t\t       name);\n-\t}\n \n-\tif (!path) {\n-\t\tTALLOC_FREE(key);\n-\t\treturn WERR_NOMEM;\n-\t}\n+\twhile ((p = strchr(path, '\\\\')) != NULL) {\n+\t\tchar *name_component;\n+\t\tstruct registry_key *tmp;\n \n-\terr = regkey_open_internal(key, &key->key, path, parent->token,\n-\t\t\t\t   desired_access);\n-\tTALLOC_FREE(path);\n+\t\tif (!(name_component = SMB_STRNDUP(path, (p - path)))) {\n+\t\t\terr = WERR_NOMEM;\n+\t\t\tgoto error;\n+\t\t}\n \n-\tif (!W_ERROR_IS_OK(err)) {\n-\t\tTALLOC_FREE(key);\n-\t\treturn err;\n+\t\terr = regkey_open_onelevel(mem_ctx, direct_parent,\n+\t\t\t\t\t   name_component, parent->token,\n+\t\t\t\t\t   SEC_RIGHTS_ENUM_SUBKEYS, &tmp);\n+\t\tSAFE_FREE(name_component);\n+\n+\t\tif (!W_ERROR_IS_OK(err)) {\n+\t\t\tgoto error;\n+\t\t}\n+\t\tif (direct_parent != parent) {\n+\t\t\tTALLOC_FREE(direct_parent);\n+\t\t}\n+\n+\t\tdirect_parent = tmp;\n+\t\tpath = p+1;\n \t}\n \n-\t*pkey = key;\n-\treturn WERR_OK;\n+\terr = regkey_open_onelevel(mem_ctx, direct_parent, path, parent->token,\n+\t\t\t\t   desired_access, pkey);\n+ error:\n+\tif (direct_parent != parent) {\n+\t\tTALLOC_FREE(direct_parent);\n+\t}\n+\tSAFE_FREE(to_free);\n+\treturn err;\n }\n \n WERROR reg_enumkey(TALLOC_CTX *mem_ctx, struct registry_key *key,\n\nModified: branches/SAMBA_3_0_26/source/registry/reg_frontend.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/registry/reg_frontend.c\t2007-06-12 15:36:02 UTC (rev 23440)\n+++ branches/SAMBA_3_0_26/source/registry/reg_frontend.c\t2007-06-12 15:55:00 UTC (rev 23441)\n@@ -412,29 +412,33 @@\n \treturn regdb_close();\n }\n \n-WERROR regkey_open_onelevel( TALLOC_CTX *mem_ctx, REGISTRY_KEY *parent,\n-\t\t\t     REGISTRY_KEY **regkey, const char *name,\n-                             const struct nt_user_token *token,\n-\t\t\t     uint32 access_desired )\n+WERROR regkey_open_onelevel( TALLOC_CTX *mem_ctx, struct registry_key *parent,\n+\t\t\t     const char *name,\n+\t\t\t     const struct nt_user_token *token,\n+\t\t\t     uint32 access_desired,\n+\t\t\t     struct registry_key **pregkey)\n {\n \tWERROR     \tresult = WERR_OK;\n-\tREGISTRY_KEY    *key;\n+\tstruct registry_key *regkey;\n+\tREGISTRY_KEY *key;\n \tREGSUBKEY_CTR\t*subkeys = NULL;\n \n \tDEBUG(7,(\"regkey_open_onelevel: name = [%s]\\n\", name));\n \n-\tif ((parent != NULL) &&\n-\t    ((parent->access_granted & SEC_RIGHTS_ENUM_SUBKEYS) == 0)) {\n-\t\treturn WERR_ACCESS_DENIED;\n+\tSMB_ASSERT(strchr(name, '\\\\') == NULL);\n+\n+\tif (!(regkey = TALLOC_ZERO_P(mem_ctx, struct registry_key)) ||\n+\t    !(regkey->token = dup_nt_token(regkey, token)) ||\n+\t    !(regkey->key = TALLOC_ZERO_P(regkey, REGISTRY_KEY))) {\n+\t\tresult = WERR_NOMEM;\n+\t\tgoto done;\n \t}\n \n-\tif ( !(key = TALLOC_ZERO_P(mem_ctx, REGISTRY_KEY)) ) {\n-\t\treturn WERR_NOMEM;\n+\tif ( !(W_ERROR_IS_OK(result = regdb_open())) ) {\n+\t\tgoto done;\n \t}\n \n-\tif ( !(W_ERROR_IS_OK(result = regdb_open()) ) )\n-\t\treturn result;\n-\n+\tkey = regkey->key;\n \ttalloc_set_destructor(key, regkey_destructor);\n \t\t\n \t/* initialization */\n@@ -449,14 +453,14 @@\n \t\t\tresult = WERR_BADFILE;\n \t\t\tgoto done;\n \t\t}\n-\t\tkey->name = talloc_strdup(key, parent->name);\n+\t\tkey->name = talloc_strdup(key, parent->key->name);\n \t}\n \telse {\n \t\t/*\n-\t\t * Normal open, concat parent and new keynames\n+\t\t * Normal subkey open\n \t\t */\n \t\tkey->name = talloc_asprintf(key, \"%s%s%s\",\n-\t\t\t\t\t    parent ? parent->name : \"\",\n+\t\t\t\t\t    parent ? parent->key->name : \"\",\n \t\t\t\t\t    parent ? \"\\\\\": \"\",\n \t\t\t\t\t    name);\n \t}\n@@ -501,12 +505,12 @@\n \t\tgoto done;\n \t}\n \n-\t*regkey = key;\n+\t*pregkey = regkey;\n \tresult = WERR_OK;\n \t\n done:\n \tif ( !W_ERROR_IS_OK(result) ) {\n-\t\tTALLOC_FREE(key);\n+\t\tTALLOC_FREE(regkey);\n \t}\n \n \treturn result;\n@@ -517,53 +521,17 @@\n                              const struct nt_user_token *token,\n \t\t\t     uint32 access_desired )\n {\n-\tTALLOC_CTX *mem_ctx;\n-\tconst char *p;\n-\tREGISTRY_KEY *parent = NULL;\n+\tstruct registry_key *key;\n \tWERROR err;\n-\tsize_t len;\n \n-\tif (!(mem_ctx = talloc_new(ctx))) {\n-\t\treturn WERR_NOMEM;\n+\terr = reg_open_path(NULL, path, access_desired, token, &key);\n+\tif (!W_ERROR_IS_OK(err)) {\n+\t\treturn err;\n \t}\n \n-\tlen = strlen(path);\n-\tif ((len > 0) && (path[len-1] == '\\\\')) {\n-\t\tif (!(path = talloc_strndup(mem_ctx, path, len-1))) {\n-\t\t\tTALLOC_FREE(mem_ctx);\n-\t\t\treturn WERR_NOMEM;\n-\t\t}\n-\t}\n-\n-\twhile ((p = strchr(path, '\\\\')) != NULL) {\n-\t\tchar *name_component;\n-\t\tREGISTRY_KEY *intermediate;\n-\n-\t\tif (!(name_component = talloc_strndup(\n-\t\t\t      mem_ctx, path, (p - path)))) {\n-\t\t\tTALLOC_FREE(mem_ctx);\n-\t\t\treturn WERR_NOMEM;\n-\t\t}\n-\n-\t\terr = regkey_open_onelevel(mem_ctx, parent, &intermediate,\n-\t\t\t\t\t   name_component, token,\n-\t\t\t\t\t   SEC_RIGHTS_ENUM_SUBKEYS);\n-\t\tTALLOC_FREE(name_component);\n-\n-\t\tif (!W_ERROR_IS_OK(err)) {\n-\t\t\tTALLOC_FREE(mem_ctx);\n-\t\t\treturn WERR_NOMEM;\n-\t\t}\n-\n-\t\tTALLOC_FREE(parent);\n-\t\tparent = intermediate;\n-\t\tpath = p+1;\n-\t}\n-\n-\terr = regkey_open_onelevel(ctx, parent, regkey, path, token,\n-\t\t\t\t   access_desired);\n-\tTALLOC_FREE(mem_ctx);\n-\treturn err;\n+\t*regkey = talloc_move(ctx, &key->key);\n+\tTALLOC_FREE(key);\n+\treturn WERR_OK;\n }\n \n WERROR regkey_get_secdesc(TALLOC_CTX *mem_ctx, REGISTRY_KEY *key,\n\n"}