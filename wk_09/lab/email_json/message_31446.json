{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 313: removed the CTDB_CTRL_FLAG_NOREQUEUE flag in\n\thttp://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 313\nrevision-id: tridge@samba.org-20070517041038-4t1bimu6vhoywhao\nparent: tridge@samba.org-20070517024650-i4at8m57g4gzoasu\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Thu 2007-05-17 14:10:38 +1000\nmessage:\n  removed the CTDB_CTRL_FLAG_NOREQUEUE flag\nmodified:\n  common/ctdb_client.c           ctdb_client.c-20070411010216-3kd8v37k61steeya-1\n  common/ctdb_control.c          ctdb_control.c-20070426122724-j6gkpiofhbwdin63-1\n  include/ctdb_private.h         ctdb_private.h-20061117234101-o3qt14umlg9en8z0-13\n=== modified file 'common/ctdb_client.c'\n--- a/common/ctdb_client.c\t2007-05-17 02:07:29 +0000\n+++ b/common/ctdb_client.c\t2007-05-17 04:10:38 +0000\n@@ -705,13 +705,6 @@\n \t\tctdb_socket_connect(ctdb);\n \t}\n \n-\t/* if the caller specified a timeout it makes no sense for the\n-\t   daemon to requeue the packet if the destination is unavailable\n-\t */\n-\tif (timeout) {\n-\t\tflags |= CTDB_CTRL_FLAG_NOREQUEUE;\n-\t}\n-\n \tstate = talloc_zero(ctdb, struct ctdb_client_control_state);\n \tCTDB_NO_MEMORY(ctdb, state);\n \n\n=== modified file 'common/ctdb_control.c'\n--- a/common/ctdb_control.c\t2007-05-17 00:45:31 +0000\n+++ b/common/ctdb_control.c\t2007-05-17 04:10:38 +0000\n@@ -32,6 +32,7 @@\n \tuint32_t reqid;\n \tctdb_control_callback_fn_t callback;\n \tvoid *private_data;\n+\tunsigned flags;\n };\n \n /*\n@@ -362,19 +363,15 @@\n \t\t       struct timeval t, void *private_data)\n {\n \tstruct ctdb_control_state *state = talloc_get_type(private_data, struct ctdb_control_state);\n-\tstruct ctdb_req_control *c = (struct ctdb_req_control *)state->private_data;\n \tTALLOC_CTX *tmp_ctx = talloc_new(ev);\n \n \tstate->ctdb->status.timeouts.control++;\n \n \ttalloc_steal(tmp_ctx, state);\n \n-\t/* Dont retry the control if the caller asked for NOREQUEUE */\n-\tif (!(c->flags & CTDB_CTRL_FLAG_NOREQUEUE)) {\n-\t\tstate->callback(state->ctdb, -1, tdb_null,\n-\t\t\t\t\"ctdb_control timed out\", \n-\t\t\t\tstate->private_data);\n-\t}\n+\tstate->callback(state->ctdb, -1, tdb_null,\n+\t\t\t\"ctdb_control timed out\", \n+\t\t\tstate->private_data);\n \ttalloc_free(tmp_ctx);\n }\n \n@@ -407,6 +404,7 @@\n \tstate->callback = callback;\n \tstate->private_data = private_data;\n \tstate->ctdb = ctdb;\n+\tstate->flags = flags;\n \n \ttalloc_set_destructor(state, ctdb_control_destructor);\n \n\n=== modified file 'include/ctdb_private.h'\n--- a/include/ctdb_private.h\t2007-05-17 00:45:31 +0000\n+++ b/include/ctdb_private.h\t2007-05-17 04:10:38 +0000\n@@ -295,8 +295,8 @@\n    re-issue the call */\n #define CTDB_CALL_TIMEOUT 2\n \n-/* timeout for ctdb control calls */\n-#define CTDB_CONTROL_TIMEOUT 10\n+/* maximum timeout for ctdb control calls */\n+#define CTDB_CONTROL_TIMEOUT 60\n \n /* timeout for ctdb traverse calls. When this is reached we cut short\n    the traverse */\n@@ -520,7 +520,6 @@\n \tuint64_t srvid;\n \tuint32_t client_id;\n #define CTDB_CTRL_FLAG_NOREPLY   1\n-#define CTDB_CTRL_FLAG_NOREQUEUE 2\n \tuint32_t flags;\n \tuint32_t datalen;\n \tuint8_t data[1];\n\n"}