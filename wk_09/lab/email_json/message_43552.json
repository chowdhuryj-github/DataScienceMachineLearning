{"category": "ham", "to_address": "\"Gerald (Jerry) Carter\" <jerry@samba.org>", "from_address": "tridge@samba.org", "subject": "Re: getting rid of mkproto.sh from Samba3", "body": "Jerry,\n\n > Autogenerated headers are like sharp knives.  They can be\n > use and have their place in some areas.\n\nerr, I think not generating as much as you can is like running with a\nsharp knife (or the proverbial scissors).  The examples I gave are not\njust philosphical, I gave real examples of where it has saved our\nbacon. \n\nCan you point to any large C project which doesn't automate this stuff\nand doesn't have the sort of errors I mentioned? \n\n > But they can cause\n > a lot of damage if used in correctly.  proto.h has caused\n > a lot of damage in Samba IMO.  It's has led us to the\n > libbigballofmud.so in the Makefile.  In fact, I would argue,\n > like James, that it has promoted code duplication and not\n > code reuse.\n\nyes, we have a libbigballofmud, and that's bad, but I hardly see how\nyou can pin the blame on auto-generating prototypes. As we've\ndemonstrated in Samba4, you can generate and still have nicely\nseparated headers and separated libraries, so blaming it on\nauto-generating headers makes no sense.\n\nThe way Samba3 does it now is bad, sure, but it makes no more sense to\nblame the idea of generating headers than to blame C.\n\n > The turnover of the developer base on in open source means\n > that I value maintainable code above convenient or clever\n > code.  proto.h is convenient and clever, but not maintainable.\n\nwhich is why we've put so much effort into making Samba4 very clean\nand have really good, maintainable interfaces.\n\n > And if autogenerated headers are so great, why are tdb.h\n > and ldb.h checked into the source tree?\n\nbecause ldb and tdb are both incorporated directly (as source trees)\ninto other projects, and I don't want to dictate my coding approach on\nthose other projects. Those projects may not even be able to run perl,\nor may not be unix based.\n\n > Your points about static functions just don't hold any\n > convincing truth for me.  In fact, autogenerating headers\n > makes such functions more likely to be placed in the header\n > as the programmers has to consciously think about what\n > is placed in the public and private headers.\n\nHow? The generator doesn't look at static functions, and findstatic.pl\nensures you make all functions that can be static be static.\n\n > You might argue that an tool to autogenerate the headers\n > could be smart enough to know what to do.  My point is that\n > once you reach that point, you have to embed so much\n > information in the tool or source code that you should just\n > be writing the header yourself.\n\noh come on! Jelmer has already done it (look for is_public in\nmkproto.pl), and do you seriously compare the half dozen lines of perl\nwritten once in mkproto.pl versus every programmer having to get this\nright for every function for the rest of the life of the project? Even\nworse, when they don't get it right, no tool to tell them they have\nscrewed up?\n\n > So in summary, your points are not technical,  only philosphical.\n\nnope. If we do it manually we will screw up, just like every other C\nproject has screwed it up. Maybe there is a perfect team of\nprogrammers somewhere in the world, but we are not it. It's not\nphilosphy to realise that we are fallible.\n\nCheers, Tridge\n\n"}