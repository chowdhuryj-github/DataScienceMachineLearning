{"category": "ham", "to_address": "Damian Conway <damian@conway.org>", "from_address": "Mark Overmeer <mark@overmeer.net>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "* Damian Conway (damian@conway.org) [070615 00:17]:\n> Larry and Thom have each ably explained the rhyme and reason of the choices\n> that we made for Pod 6. Here I will merely summarize those reasons, and \n> answer a specific question.\n> \n> * Pod and Perl (or any other ambient source code) are to be syntactically\n>  separated, even when there are semantic interconnections\n\nWhy?  Who says that?\n\n> * Perl 6 will be able to access ambient Pod via $=POD (and other\n>  $=WHATEVER variables)\n\nCannot find anything about that in S26\n\n> * \n> *\n> * That does not, however, mean that source code and explicit mark-up are\n>  (or should be) either equivalent or syntactically commingled\n\nOf course: both serve a different purpose.  That's why I would like to\navoid replicating code information in the docs which I have to write: I do\nnot want to write the attribute names again, and so on.  [my impression is\nthat I use this argument exactly in the opposite direction as you intent]\n\nThe code tells how to do it, the docs describe how to use it, the comments\nexplain how it works.  And on some places these tasks overlap.  Then, you\nhave the choice either to write the same thing twice, or (define a\nsyntax to) share.\n\n> *\n> * This will be possible in Perl 6, since both the Pod and Perl 6 parsers\n>  will be accessible from Perl 6.\n\nAnd we can access internet as well.  But that doesn't say much, does it?\n\n> *\n> * Pod 6 is both a structural and a semantic scheme; you can specify both the\n>  structure of a document, and the meaning of its various components\n\nYes, and that is one of the things which worries me most *You can*.\nIt's full freedom, like XML, and without a convention everyone may\nthink-up there own way of documenting the same kinds of code elements.\nEver tried to merge two aged databases with personnel information?\nIt's the same horror.\n\nOf course, programmers get all the freedom of the world (the already had)\nbut we need POD6 only to document Perl6.  That is a limited task.  Some\npeople use POD to write books, but is that a reason to give everyone these\nfeatures?  What is the purpose to people this power (and the challenge\nto use it) when there is such a limited set of things to document?\n\n> * Such tools would (usually) convert the information extracted from\n>  [source + semantic-Pod] into purely structural Pod, which could then\n>  be fed to any suitable pod-to-whatever converter\n\nThe whole point of the debate, is that IMO the focus (and only real\nchallenge) is this task: combine information about the Perl program\nand the documentation about those elements in an as good as feasible\nway.  All the rest is just syntax.  On the moment, I am not convinced\nthat this task sufficiently facilitated.  Many features in POD6 will\ncomplicate this task too much.\n\n> * In other words, the tool-chain envisaged is something like:\n> \n>                 perl6doc              pod2whatever\n>\n>     source\n>       +                     purely\n> structural Pod  ------->  structural  -----------> plaintext\n>       +                      Pod      \\----------> HTML\n>  semantic Pod                          \\---------> XML\n>                                         \\--------> roff\n>                                          \\-------> MPEG\n>                                           \\etc.\n\n    ^^^^^^^^^^^^ can/will be different *per module*\n\nA structure which is very well known, for instance from LaTex,\nlooks like this:\n\n                  perl6doc              pod2whatever\n \n      source                 doc\n        +         ------->  tree --------------> plaintext\n   structural Pod            ^      \\----------> HTML\n                             |       \\---------> XML \n                       semantic       \\--------> roff\n                      definition       \\-------> MPEG\n                                                 |\n                                 style sheets ---'\n\nIn this structure, the responsibility of how things get interpreted\nis not for the programmer, so consistent over all modules.  We can\nmake search.cpan.org and manual-pages with a consistent structure.\n\nThe actual formatting is only at the back-end, which knows what\nthe back-end is capable of.  So search.cpan.org can design a\nnice CSS.  Websites have really improved since CSS: finally all\nthe pages within a website look the same.\n\nAnd what I would like to see is that doc-tree and Perl6 AST are one.\nProducing docs then can be done via standard introspection.\n\n> * Which means that Pod 6 needs to be a suitable pure-structural-mark-up\n>   target language with an extensible semantic overlayer\n> * Which is precisely what it has already been designed to be\n\nWith your structure, yes.\n\n> * To summarize the summary:\n>    - Use Perl for what Perl is good for (specification)\n>    - Use Pod for what Pod is good for (commentary)\n     - Use expressions where expressions are good for (calculation)\n     - Use regexes where regexes are good for (matching)\n       ...\n\ni.e. it is not a valid argument: expressions and regexes\nare integrated.\n\n>    - Then generate unified documentation by extracting information from\n>      wherever its available (source or mark-up), according to what the\n>      reader asks for\n\nThe semantics differ per module, so the reader cannot (for instance)\nuse her own style sheet: the superset of definitions is not known.\n\n>    - The issue is not having sufficiently powerful Pod syntax;\n>      the issue is having sufficiently powerful documentation-generating \n>      *tools*\n\nIMO it is: the issue is to have sufficiently integrety in code and markup\nto be able to create documentation-generating tools which produce enough\nquality.  And at the same time give the programmer the mimimal burden on\nwriting documentation, to increase the chance that it is present and good.\n[this last sentence is my only design criterium]\n\n> To answer Mark's specific question:\n> \n>  > class Mail::Message {\n>  >     `base class for message types\n>  >\n>  >     .has $msgid;\n>  >     `The (internet wide) unique string which identifies this\n>  >     `message object.  May be undef as long as the message is\n>  >     `begin composed.\n>  >\n>  >     .has $content_type = 'text/plain';\n>  > }\n>  >\n>  > Damian, can you show how you would document the same code in POD6\n>  > syntax to get a comparible short man-page?\n> \n> Like so:\n> \n>    class Mail::Message {\n>    =PURPOSE  Base class for message types\n> \n>        has $msgid;\n>    =for PURPOSE\n>        The (internet wide) unique string which identifies this\n>        message object.  May be undef as long as the message is\n>        begin composed.\n> \n>        has $content_type = 'text/plain';\n>    }\n\nThis is just a syntax transformation, where I can live with.  No\nproblem.  But it is not the whole story.  \"PURPOSE\" is not in S26.\nSo: you need at least a few lines more in above counter-example\nto make this work.\n  - the semantic pod\n  - in the purely structural pod\n  - in pod2whatever\nmore?\n\nIn my \"vision\", the example is complete.  Everything else is determined\nby the processing tools and style sheets.\n\n> PS: I agree that there needs to be a mechanism for abstracting names\n>    within Pod and for extracting those names from ambient code. I will\n>    propose such a mechanism and the syntax for it in a subsequent email\n>    (probably early next week).\n\nI am looking forward to it.\n\nDo not understand me wrong: for the choosen approach to produce\ndocumentation, you did an excellent job with the specification.  It\nis well written, well documented, and even implemented.\nBut I do not see how this approach contributes to the homogeneous set\nof manual-pages for Perl modules that the end-user prefers.  And I feel\nthat its freedom makes my life as programmer any easier.\n\n[ Damian, we didn't change our opinions a thing since the last debate\n  on this subject, last year, haven't we.  Probably just another\n  holy war ]\n-- \nRegards,\n               MarkOv\n\n------------------------------------------------------------------------\n       Mark Overmeer MSc                                MARKOV Solutions\n       Mark@Overmeer.net                          solutions@overmeer.net\nhttp://Mark.Overmeer.net                   http://solutions.overmeer.net\n\n"}