{"category": "ham", "to_address": "Lars Marowsky-Bree <lmb@suse.de>", "from_address": "tridge@samba.org", "subject": "Re: [Linux-ha-dev] CTDB and clustered Samba", "body": "Lars,\n\n > CTDB is built on top of a cluster filesystem layer.\n\nnot quite - CTDB relies on one being there, but doesn't actually use\nit much itself. CTDB opens exactly 1 file on the cluster fs, that file\nnever has any data in it, and CTDB holds exactly 1 byte of lock on\nthat file on one of the nodes. That's it. That file is the key to CTDB\nensuring that it has the same view of the topology of the cluster as\nthe filesystem does.\n\nThe services that use CTDB (such as Samba and NFS) open heaps of files\non the cluster fs of course :)\n\nThe data that CTDB holds is actually held in memory on each node\n(using mmap to local database files). That makes access very\nfast. This memory is shared directly with applications (via tdb) which\nmeans a Samba process can access a database record as local memory\nwith zero context switches in the (very likely!) event that the record\nhappens to reside on the local node at the time it needs it.\n\nThis all means that Samba on a CTDB cluster runs just as fast as\nnon-clustered Samba for most operations. That's very hard to achieve\nwith the normal approach to clustering.\n\n > Any cluster filesystem layer (be it GFS2 on openAIS or OCFS2\n > w/Linux HA, both moving towards openAIS) already has a reliable\n > messaging and locking layer beneath it, and almost always, a\n > fail-over, DLM, election etc solution too.\n\nyes, and they all are slow and provide the wrong sorts of guarantees\nfor what CTDB is doing. I spent years waiting for one of those systems\nto get to the point that Samba could use it. I wrote tests showing\nwhat the problems were, and then walked up to all the cluster fs\nvendors at conferences and showed them my tests. They all performed\nterribly.\n\nThen I realised _why_ they all are so bad. When you write some data to\na cluster fs, or a cluster database, and the node you wrote to dies\nimmediately after it replies, then the developers of that cluster fs\nwant to guarantee that the data you wrote is not lost. That's what\nthey mean by a reliable clustering system. \n\nHow do they provide this guarantee? They either have to ensure the\ndata is committed to stable shared storage (pieces of metal or very\nslow shared nv-ram) or they need to replicate the data to all nodes\nbefore they reply. That is the only way to provide that guarantee.\n\nThe thing is, Samba on CTDB does not need that guarantee. Samba needs\nto guarantee that user data is not lost. Samba is quite happy to lose\ncertain well defined pieces of the meta-data associated with its\nconnections. Knowing exactly what you can safely lose is the key to\nCTDB. It turns out that the data that CTDB can lose is the data that\nis most frequently updated and written, so by designing a system where\nwe can lose that data, we remove the biggest bottleneck.\n\n > At first glance, it appears you're reimplementing those infrastructure\n > services then on top of the clustered fs again.\n\nno, CTDB is built on top of a stream network transport (TCP or\nInfiniband currently). \n\n > Would it not be more efficient to directly use the same services the fs\n > is also using ...?\n\nyou are welcome to try. I spent years trying to get these services to\nget good enough for Samba to use. The problems that cluster\nfilesystems try to solve and the problems that Samba+CTDB try to solve\nare different enough that trying to build one on the other doesn't\nwork.\n\n > More specifically, because this is what we're currently working on\n > moving the Linux HA project (the clustered resource manager parts at\n > least) towards - have you investigated whether openAIS can meet your\n > requirements as well?\n\nI haven't run my tests against openAIS, no. I'd be very surprised if\nits a good fit though. \n\nBasically the perfect transport for CTDB is TCP or a similar stream\ntransport, and luckily enough that's pretty widely available, so I'm\nhappy to use it :-)\n\nI guess you could write a CTDB backend that uses openAIS messaging\n(the backends are pluggable in CTDB). If someone tries that then I'd\nbe interested in hearing how it goes. I'll be quite surprised if it\ndoes any better than what we do now, and I actually expect it will do\nworse, as it means two layers of event driven programming rather than\none, and extra layers of marshalling, extra layers of error handling\netc.\n\nCheers, Tridge\n\n"}