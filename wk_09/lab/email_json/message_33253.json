{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23022 - in branches: SAMBA_3_0/source/lib\n\tSAMBA_3_0_26/source/lib", "body": "Author: vlendec\nDate: 2007-05-20 17:00:18 +0000 (Sun, 20 May 2007)\nNew Revision: 23022\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23022\n\nLog:\nReformatting\n\nModified:\n   branches/SAMBA_3_0/source/lib/messages.c\n   branches/SAMBA_3_0_26/source/lib/messages.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/lib/messages.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/messages.c\t2007-05-20 10:21:14 UTC (rev 23021)\n+++ branches/SAMBA_3_0/source/lib/messages.c\t2007-05-20 17:00:18 UTC (rev 23022)\n@@ -285,19 +285,22 @@\n \n \tif (duplicates_allowed) {\n \n-\t\t/* If duplicates are allowed we can just append the message and return. */\n+\t\t/* If duplicates are allowed we can just append the message\n+\t\t * and return. */\n \n \t\t/* lock the record for the destination */\n \t\tif (timeout) {\n-\t\t\tif (tdb_chainlock_with_timeout(tdb, kbuf, timeout) == -1) {\n-\t\t\t\tDEBUG(0,(\"message_send_pid_internal: failed to get \"\n-\t\t\t\t\t \"chainlock with timeout %ul.\\n\", timeout));\n+\t\t\tif (tdb_chainlock_with_timeout(tdb, kbuf,\n+\t\t\t\t\t\t       timeout) == -1) {\n+\t\t\t\tDEBUG(0,(\"message_send_pid_internal: failed \"\n+\t\t\t\t\t \"to get chainlock with timeout \"\n+\t\t\t\t\t \"%ul.\\n\", timeout));\n \t\t\t\treturn NT_STATUS_IO_TIMEOUT;\n \t\t\t}\n \t\t} else {\n \t\t\tif (tdb_chainlock(tdb, kbuf) == -1) {\n-\t\t\t\tDEBUG(0,(\"message_send_pid_internal: failed to get \"\n-\t\t\t\t\t \"chainlock.\\n\"));\n+\t\t\t\tDEBUG(0,(\"message_send_pid_internal: failed \"\n+\t\t\t\t\t \"to get chainlock.\\n\"));\n \t\t\t\treturn NT_STATUS_LOCK_NOT_GRANTED;\n \t\t\t}\n \t\t}\t\n@@ -312,8 +315,8 @@\n \t/* lock the record for the destination */\n \tif (timeout) {\n \t\tif (tdb_chainlock_with_timeout(tdb, kbuf, timeout) == -1) {\n-\t\t\tDEBUG(0,(\"message_send_pid_internal: failed to get chainlock \"\n-\t\t\t\t \"with timeout %ul.\\n\", timeout));\n+\t\t\tDEBUG(0,(\"message_send_pid_internal: failed to get \"\n+\t\t\t\t \"chainlock with timeout %ul.\\n\", timeout));\n \t\t\treturn NT_STATUS_IO_TIMEOUT;\n \t\t}\n \t} else {\n@@ -341,16 +344,18 @@\n \n \tfor(ptr = old_dbuf.dptr; ptr < old_dbuf.dptr + old_dbuf.dsize; ) {\n \t\t/*\n-\t\t * First check if the message header matches, then, if it's a non-zero\n-\t\t * sized message, check if the data matches. If so it's a duplicate and\n-\t\t * we can discard it. JRA.\n+\t\t * First check if the message header matches, then, if it's a\n+\t\t * non-zero sized message, check if the data matches. If so\n+\t\t * it's a duplicate and we can discard it. JRA.\n \t\t */\n \n \t\tif (!memcmp(ptr, &rec, sizeof(rec))) {\n-\t\t\tif (!len || (len && !memcmp( ptr + sizeof(rec), buf, len))) {\n+\t\t\tif (!len\n+\t\t\t    || (len\n+\t\t\t\t&& !memcmp( ptr + sizeof(rec), buf, len))) {\n \t\t\t\ttdb_chainunlock(tdb, kbuf);\n-\t\t\t\tDEBUG(10,(\"message_send_pid_internal: discarding \"\n-\t\t\t\t\t  \"duplicate message.\\n\"));\n+\t\t\t\tDEBUG(10,(\"message_send_pid_internal: \"\n+\t\t\t\t\t  \"discarding duplicate message.\\n\"));\n \t\t\t\tSAFE_FREE(dbuf.dptr);\n \t\t\t\tSAFE_FREE(old_dbuf.dptr);\n \t\t\t\treturn NT_STATUS_OK;\n@@ -474,7 +479,8 @@\n \tret_buf += sizeof(rec);\n \n \tif (rec.msg_version != MESSAGE_VERSION) {\n-\t\tDEBUG(0,(\"message version %d received (expected %d)\\n\", rec.msg_version, MESSAGE_VERSION));\n+\t\tDEBUG(0,(\"message version %d received (expected %d)\\n\",\n+\t\t\t rec.msg_version, MESSAGE_VERSION));\n \t\treturn False;\n \t}\n \n@@ -510,14 +516,17 @@\n \tif (!received_signal)\n \t\treturn;\n \n-\tDEBUG(10,(\"message_dispatch: received_signal = %d\\n\", received_signal));\n+\tDEBUG(10, (\"message_dispatch: received_signal = %d\\n\",\n+\t\t   received_signal));\n \n \treceived_signal = 0;\n \n \tif (!retrieve_all_messages(&msgs_buf, &total_len))\n \t\treturn;\n \n-\tfor (buf = msgs_buf; message_recv(msgs_buf, total_len, &msg_type, &src, &buf, &len); buf += len) {\n+\tfor (buf = msgs_buf;\n+\t     message_recv(msgs_buf, total_len, &msg_type, &src, &buf, &len);\n+\t     buf += len) {\n \t\tstruct dispatch_fns *dfn;\n \n \t\tDEBUG(10,(\"message_dispatch: received msg_type=%d \"\n@@ -527,7 +536,8 @@\n \t\tn_handled = 0;\n \t\tfor (dfn = dispatch_fns; dfn; dfn = dfn->next) {\n \t\t\tif (dfn->msg_type == msg_type) {\n-\t\t\t\tDEBUG(10,(\"message_dispatch: processing message of type %d.\\n\", msg_type));\n+\t\t\t\tDEBUG(10,(\"message_dispatch: processing \"\n+\t\t\t\t\t  \"message of type %d.\\n\", msg_type));\n \t\t\t\tdfn->fn(msg_type, src,\n \t\t\t\t\tlen ? (void *)buf : NULL, len,\n \t\t\t\t\tdfn->private_data);\n@@ -536,8 +546,8 @@\n \t\t\t}\n \t\t}\n \t\tif (!n_handled) {\n-\t\t\tDEBUG(5,(\"message_dispatch: warning: no handler registed for \"\n-\t\t\t\t \"msg_type %d in pid %u\\n\",\n+\t\t\tDEBUG(5,(\"message_dispatch: warning: no handler \"\n+\t\t\t\t \"registed for msg_type %d in pid %u\\n\",\n \t\t\t\t msg_type, (unsigned int)sys_getpid()));\n \t\t}\n \t}\n@@ -566,22 +576,19 @@\n \t\t}\n \t}\n \n-\tdfn = SMB_MALLOC_P(struct dispatch_fns);\n+\tif (!(dfn = SMB_MALLOC_P(struct dispatch_fns))) {\n+\t\tDEBUG(0,(\"message_register: Not enough memory. malloc \"\n+\t\t\t \"failed!\\n\"));\n+\t\treturn;\n+\t}\n \n-\tif (dfn != NULL) {\n+\tZERO_STRUCTPN(dfn);\n \n-\t\tZERO_STRUCTPN(dfn);\n+\tdfn->msg_type = msg_type;\n+\tdfn->fn = fn;\n+\tdfn->private_data = private_data;\n \n-\t\tdfn->msg_type = msg_type;\n-\t\tdfn->fn = fn;\n-\t\tdfn->private_data = private_data;\n-\n-\t\tDLIST_ADD(dispatch_fns, dfn);\n-\t}\n-\telse {\n-\t\n-\t\tDEBUG(0,(\"message_register: Not enough memory. malloc failed!\\n\"));\n-\t}\n+\tDLIST_ADD(dispatch_fns, dfn);\n }\n \n /****************************************************************************\n@@ -615,7 +622,8 @@\n  Send one of the messages for the broadcast.\n ****************************************************************************/\n \n-static int traverse_fn(TDB_CONTEXT *the_tdb, TDB_DATA kbuf, TDB_DATA dbuf, void *state)\n+static int traverse_fn(TDB_CONTEXT *the_tdb, TDB_DATA kbuf, TDB_DATA dbuf,\n+\t\t       void *state)\n {\n \tstruct connections_data crec;\n \tstruct msg_all *msg_all = (struct msg_all *)state;\n@@ -643,10 +651,12 @@\n \n \tif (NT_STATUS_EQUAL(status, NT_STATUS_INVALID_HANDLE)) {\n \t\t\n-\t\t/* If the pid was not found delete the entry from connections.tdb */\n+\t\t/* If the pid was not found delete the entry from\n+\t\t * connections.tdb */\n \n-\t\tDEBUG(2,(\"pid %s doesn't exist - deleting connections %d [%s]\\n\",\n-\t\t\t procid_str_static(&crec.pid), crec.cnum, crec.servicename));\n+\t\tDEBUG(2,(\"pid %s doesn't exist - deleting connections \"\n+\t\t\t \"%d [%s]\\n\", procid_str_static(&crec.pid), crec.cnum,\n+\t\t\t crec.servicename));\n \t\ttdb_delete(the_tdb, kbuf);\n \t}\n \tmsg_all->n_sent++;\n\nModified: branches/SAMBA_3_0_26/source/lib/messages.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/messages.c\t2007-05-20 10:21:14 UTC (rev 23021)\n+++ branches/SAMBA_3_0_26/source/lib/messages.c\t2007-05-20 17:00:18 UTC (rev 23022)\n@@ -285,19 +285,22 @@\n \n \tif (duplicates_allowed) {\n \n-\t\t/* If duplicates are allowed we can just append the message and return. */\n+\t\t/* If duplicates are allowed we can just append the message\n+\t\t * and return. */\n \n \t\t/* lock the record for the destination */\n \t\tif (timeout) {\n-\t\t\tif (tdb_chainlock_with_timeout(tdb, kbuf, timeout) == -1) {\n-\t\t\t\tDEBUG(0,(\"message_send_pid_internal: failed to get \"\n-\t\t\t\t\t \"chainlock with timeout %ul.\\n\", timeout));\n+\t\t\tif (tdb_chainlock_with_timeout(tdb, kbuf,\n+\t\t\t\t\t\t       timeout) == -1) {\n+\t\t\t\tDEBUG(0,(\"message_send_pid_internal: failed \"\n+\t\t\t\t\t \"to get chainlock with timeout \"\n+\t\t\t\t\t \"%ul.\\n\", timeout));\n \t\t\t\treturn NT_STATUS_IO_TIMEOUT;\n \t\t\t}\n \t\t} else {\n \t\t\tif (tdb_chainlock(tdb, kbuf) == -1) {\n-\t\t\t\tDEBUG(0,(\"message_send_pid_internal: failed to get \"\n-\t\t\t\t\t \"chainlock.\\n\"));\n+\t\t\t\tDEBUG(0,(\"message_send_pid_internal: failed \"\n+\t\t\t\t\t \"to get chainlock.\\n\"));\n \t\t\t\treturn NT_STATUS_LOCK_NOT_GRANTED;\n \t\t\t}\n \t\t}\t\n@@ -312,8 +315,8 @@\n \t/* lock the record for the destination */\n \tif (timeout) {\n \t\tif (tdb_chainlock_with_timeout(tdb, kbuf, timeout) == -1) {\n-\t\t\tDEBUG(0,(\"message_send_pid_internal: failed to get chainlock \"\n-\t\t\t\t \"with timeout %ul.\\n\", timeout));\n+\t\t\tDEBUG(0,(\"message_send_pid_internal: failed to get \"\n+\t\t\t\t \"chainlock with timeout %ul.\\n\", timeout));\n \t\t\treturn NT_STATUS_IO_TIMEOUT;\n \t\t}\n \t} else {\n@@ -341,16 +344,18 @@\n \n \tfor(ptr = old_dbuf.dptr; ptr < old_dbuf.dptr + old_dbuf.dsize; ) {\n \t\t/*\n-\t\t * First check if the message header matches, then, if it's a non-zero\n-\t\t * sized message, check if the data matches. If so it's a duplicate and\n-\t\t * we can discard it. JRA.\n+\t\t * First check if the message header matches, then, if it's a\n+\t\t * non-zero sized message, check if the data matches. If so\n+\t\t * it's a duplicate and we can discard it. JRA.\n \t\t */\n \n \t\tif (!memcmp(ptr, &rec, sizeof(rec))) {\n-\t\t\tif (!len || (len && !memcmp( ptr + sizeof(rec), buf, len))) {\n+\t\t\tif (!len\n+\t\t\t    || (len\n+\t\t\t\t&& !memcmp( ptr + sizeof(rec), buf, len))) {\n \t\t\t\ttdb_chainunlock(tdb, kbuf);\n-\t\t\t\tDEBUG(10,(\"message_send_pid_internal: discarding \"\n-\t\t\t\t\t  \"duplicate message.\\n\"));\n+\t\t\t\tDEBUG(10,(\"message_send_pid_internal: \"\n+\t\t\t\t\t  \"discarding duplicate message.\\n\"));\n \t\t\t\tSAFE_FREE(dbuf.dptr);\n \t\t\t\tSAFE_FREE(old_dbuf.dptr);\n \t\t\t\treturn NT_STATUS_OK;\n@@ -474,7 +479,8 @@\n \tret_buf += sizeof(rec);\n \n \tif (rec.msg_version != MESSAGE_VERSION) {\n-\t\tDEBUG(0,(\"message version %d received (expected %d)\\n\", rec.msg_version, MESSAGE_VERSION));\n+\t\tDEBUG(0,(\"message version %d received (expected %d)\\n\",\n+\t\t\t rec.msg_version, MESSAGE_VERSION));\n \t\treturn False;\n \t}\n \n@@ -510,14 +516,17 @@\n \tif (!received_signal)\n \t\treturn;\n \n-\tDEBUG(10,(\"message_dispatch: received_signal = %d\\n\", received_signal));\n+\tDEBUG(10, (\"message_dispatch: received_signal = %d\\n\",\n+\t\t   received_signal));\n \n \treceived_signal = 0;\n \n \tif (!retrieve_all_messages(&msgs_buf, &total_len))\n \t\treturn;\n \n-\tfor (buf = msgs_buf; message_recv(msgs_buf, total_len, &msg_type, &src, &buf, &len); buf += len) {\n+\tfor (buf = msgs_buf;\n+\t     message_recv(msgs_buf, total_len, &msg_type, &src, &buf, &len);\n+\t     buf += len) {\n \t\tstruct dispatch_fns *dfn;\n \n \t\tDEBUG(10,(\"message_dispatch: received msg_type=%d \"\n@@ -527,7 +536,8 @@\n \t\tn_handled = 0;\n \t\tfor (dfn = dispatch_fns; dfn; dfn = dfn->next) {\n \t\t\tif (dfn->msg_type == msg_type) {\n-\t\t\t\tDEBUG(10,(\"message_dispatch: processing message of type %d.\\n\", msg_type));\n+\t\t\t\tDEBUG(10,(\"message_dispatch: processing \"\n+\t\t\t\t\t  \"message of type %d.\\n\", msg_type));\n \t\t\t\tdfn->fn(msg_type, src,\n \t\t\t\t\tlen ? (void *)buf : NULL, len,\n \t\t\t\t\tdfn->private_data);\n@@ -536,8 +546,8 @@\n \t\t\t}\n \t\t}\n \t\tif (!n_handled) {\n-\t\t\tDEBUG(5,(\"message_dispatch: warning: no handler registed for \"\n-\t\t\t\t \"msg_type %d in pid %u\\n\",\n+\t\t\tDEBUG(5,(\"message_dispatch: warning: no handler \"\n+\t\t\t\t \"registed for msg_type %d in pid %u\\n\",\n \t\t\t\t msg_type, (unsigned int)sys_getpid()));\n \t\t}\n \t}\n@@ -566,22 +576,19 @@\n \t\t}\n \t}\n \n-\tdfn = SMB_MALLOC_P(struct dispatch_fns);\n+\tif (!(dfn = SMB_MALLOC_P(struct dispatch_fns))) {\n+\t\tDEBUG(0,(\"message_register: Not enough memory. malloc \"\n+\t\t\t \"failed!\\n\"));\n+\t\treturn;\n+\t}\n \n-\tif (dfn != NULL) {\n+\tZERO_STRUCTPN(dfn);\n \n-\t\tZERO_STRUCTPN(dfn);\n+\tdfn->msg_type = msg_type;\n+\tdfn->fn = fn;\n+\tdfn->private_data = private_data;\n \n-\t\tdfn->msg_type = msg_type;\n-\t\tdfn->fn = fn;\n-\t\tdfn->private_data = private_data;\n-\n-\t\tDLIST_ADD(dispatch_fns, dfn);\n-\t}\n-\telse {\n-\t\n-\t\tDEBUG(0,(\"message_register: Not enough memory. malloc failed!\\n\"));\n-\t}\n+\tDLIST_ADD(dispatch_fns, dfn);\n }\n \n /****************************************************************************\n@@ -615,7 +622,8 @@\n  Send one of the messages for the broadcast.\n ****************************************************************************/\n \n-static int traverse_fn(TDB_CONTEXT *the_tdb, TDB_DATA kbuf, TDB_DATA dbuf, void *state)\n+static int traverse_fn(TDB_CONTEXT *the_tdb, TDB_DATA kbuf, TDB_DATA dbuf,\n+\t\t       void *state)\n {\n \tstruct connections_data crec;\n \tstruct msg_all *msg_all = (struct msg_all *)state;\n@@ -643,10 +651,12 @@\n \n \tif (NT_STATUS_EQUAL(status, NT_STATUS_INVALID_HANDLE)) {\n \t\t\n-\t\t/* If the pid was not found delete the entry from connections.tdb */\n+\t\t/* If the pid was not found delete the entry from\n+\t\t * connections.tdb */\n \n-\t\tDEBUG(2,(\"pid %s doesn't exist - deleting connections %d [%s]\\n\",\n-\t\t\t procid_str_static(&crec.pid), crec.cnum, crec.servicename));\n+\t\tDEBUG(2,(\"pid %s doesn't exist - deleting connections \"\n+\t\t\t \"%d [%s]\\n\", procid_str_static(&crec.pid), crec.cnum,\n+\t\t\t crec.servicename));\n \t\ttdb_delete(the_tdb, kbuf);\n \t}\n \tmsg_all->n_sent++;\n\n"}