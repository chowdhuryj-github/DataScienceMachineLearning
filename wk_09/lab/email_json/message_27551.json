{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "gd@samba.org", "subject": "svn commit: samba r22797 - in branches: SAMBA_3_0/source/include\n\tSAMBA_3_0/source/libads SAMBA_3_0/source/libgpo\n\tSAMBA_3_0_26/source/include SAMBA_3_0_26/source/libads\n\tSAMBA_3_0_26/source/libgpo", "body": "Author: gd\nDate: 2007-05-11 12:52:48 +0000 (Fri, 11 May 2007)\nNew Revision: 22797\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22797\n\nLog:\nWe are only interested in the DACL of the security descriptor, so search with\nthe SD_FLAGS control.\n\nGuenther\n\nModified:\n   branches/SAMBA_3_0/source/include/ads.h\n   branches/SAMBA_3_0/source/include/ads_protos.h\n   branches/SAMBA_3_0/source/libads/ldap.c\n   branches/SAMBA_3_0/source/libads/ldap_utils.c\n   branches/SAMBA_3_0/source/libgpo/gpo_ldap.c\n   branches/SAMBA_3_0_26/source/include/ads.h\n   branches/SAMBA_3_0_26/source/include/ads_protos.h\n   branches/SAMBA_3_0_26/source/libads/ldap.c\n   branches/SAMBA_3_0_26/source/libads/ldap_utils.c\n   branches/SAMBA_3_0_26/source/libgpo/gpo_ldap.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/include/ads.h\n===================================================================\n--- branches/SAMBA_3_0/source/include/ads.h\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0/source/include/ads.h\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -121,6 +121,7 @@\n #define ADS_PERMIT_MODIFY_OID \t\"1.2.840.113556.1.4.1413\"\n #define ADS_ASQ_OID\t\t\"1.2.840.113556.1.4.1504\"\n #define ADS_EXTENDED_DN_OID\t\"1.2.840.113556.1.4.529\"\n+#define ADS_SD_FLAGS_OID       \"1.2.840.113556.1.4.801\"\n \n /* ldap attribute oids (Services for Unix) */\n #define ADS_ATTR_SFU_UIDNUMBER_OID \t\"1.2.840.113556.1.6.18.1.310\"\n\nModified: branches/SAMBA_3_0/source/include/ads_protos.h\n===================================================================\n--- branches/SAMBA_3_0/source/include/ads_protos.h\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0/source/include/ads_protos.h\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -102,3 +102,13 @@\n \t\t\t LDAPMessage *res,\n \t\t\t const char *gpo_dn,\n \t\t\t struct GROUP_POLICY_OBJECT *gpo);\n+ADS_STATUS ads_search_retry_dn_sd_flags(ADS_STRUCT *ads, LDAPMessage **res, \n+\t\t\t\t\t uint32 sd_flags,\n+\t\t\t\t\t const char *dn, \n+\t\t\t\t\t const char **attrs);\n+ADS_STATUS ads_do_search_all_sd_flags(ADS_STRUCT *ads, const char *bind_path,\n+\t\t\t\t       int scope, const char *expr,\n+\t\t\t\t       const char **attrs, uint32 sd_flags, \n+\t\t\t\t       LDAPMessage **res);\n+\n+\n\nModified: branches/SAMBA_3_0/source/libads/ldap.c\n===================================================================\n--- branches/SAMBA_3_0/source/libads/ldap.c\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0/source/libads/ldap.c\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -570,11 +570,11 @@\n {\n \tint rc, i, version;\n \tchar *utf8_expr, *utf8_path, **search_attrs;\n-\tLDAPControl PagedResults, NoReferrals, ExtendedDn, *controls[4], **rcontrols;\n+\tLDAPControl PagedResults, NoReferrals, ExternalCtrl, *controls[4], **rcontrols;\n \tBerElement *cookie_be = NULL;\n \tstruct berval *cookie_bv= NULL;\n-\tBerElement *extdn_be = NULL;\n-\tstruct berval *extdn_bv= NULL;\n+\tBerElement *ext_be = NULL;\n+\tstruct berval *ext_bv= NULL;\n \n \tTALLOC_CTX *ctx;\n \tads_control *external_control = (ads_control *) args;\n@@ -604,7 +604,6 @@\n \t\t}\n \t}\n \t\t\n-\t\t\n \t/* Paged results only available on ldap v3 or later */\n \tldap_get_option(ads->ld, LDAP_OPT_PROTOCOL_VERSION, &version);\n \tif (version < LDAP_VERSION3) {\n@@ -631,40 +630,42 @@\n \tNoReferrals.ldctl_value.bv_len = 0;\n \tNoReferrals.ldctl_value.bv_val = CONST_DISCARD(char *, \"\");\n \n-\tif (external_control && strequal(external_control->control, ADS_EXTENDED_DN_OID)) {\n+\tif (external_control && \n+\t    (strequal(external_control->control, ADS_EXTENDED_DN_OID) || \n+\t     strequal(external_control->control, ADS_SD_FLAGS_OID))) {\n \n-\t\tExtendedDn.ldctl_oid = CONST_DISCARD(char *, external_control->control);\n-\t\tExtendedDn.ldctl_iscritical = (char) external_control->critical;\n+\t\tExternalCtrl.ldctl_oid = CONST_DISCARD(char *, external_control->control);\n+\t\tExternalCtrl.ldctl_iscritical = (char) external_control->critical;\n \n \t\t/* win2k does not accept a ldctl_value beeing passed in */\n \n \t\tif (external_control->val != 0) {\n \n-\t\t\tif ((extdn_be = ber_alloc_t(LBER_USE_DER)) == NULL ) {\n+\t\t\tif ((ext_be = ber_alloc_t(LBER_USE_DER)) == NULL ) {\n \t\t\t\trc = LDAP_NO_MEMORY;\n \t\t\t\tgoto done;\n \t\t\t}\n \n-\t\t\tif ((ber_printf(extdn_be, \"{i}\", (ber_int_t) external_control->val)) == -1) {\n+\t\t\tif ((ber_printf(ext_be, \"{i}\", (ber_int_t) external_control->val)) == -1) {\n \t\t\t\trc = LDAP_NO_MEMORY;\n \t\t\t\tgoto done;\n \t\t\t}\n-\t\t\tif ((ber_flatten(extdn_be, &extdn_bv)) == -1) {\n+\t\t\tif ((ber_flatten(ext_be, &extdn_bv)) == -1) {\n \t\t\t\trc = LDAP_NO_MEMORY;\n \t\t\t\tgoto done;\n \t\t\t}\n \n-\t\t\tExtendedDn.ldctl_value.bv_len = extdn_bv->bv_len;\n-\t\t\tExtendedDn.ldctl_value.bv_val = extdn_bv->bv_val;\n+\t\t\tExternalCtrl.ldctl_value.bv_len = ext_bv->bv_len;\n+\t\t\tExternalCtrl.ldctl_value.bv_val = ext_bv->bv_val;\n \n \t\t} else {\n-\t\t\tExtendedDn.ldctl_value.bv_len = 0;\n-\t\t\tExtendedDn.ldctl_value.bv_val = NULL;\n+\t\t\tExternalCtrl.ldctl_value.bv_len = 0;\n+\t\t\tExternalCtrl.ldctl_value.bv_val = NULL;\n \t\t}\n \n \t\tcontrols[0] = &NoReferrals\n \t\tcontrols[1] = &PagedResults\n-\t\tcontrols[2] = &ExtendedDn\n+\t\tcontrols[2] = &ExternalCtrl\n \t\tcontrols[3] = NULL;\n \n \t} else {\n@@ -725,12 +726,12 @@\n done:\n \ttalloc_destroy(ctx);\n \n-\tif (extdn_be) {\n-\t\tber_free(extdn_be, 1);\n+\tif (ext_be) {\n+\t\tber_free(ext_be, 1);\n \t}\n \n-\tif (extdn_bv) {\n-\t\tber_bvfree(extdn_bv);\n+\tif (ext_bv) {\n+\t\tber_bvfree(ext_bv);\n \t}\n  \n \t/* if/when we decide to utf8-encode attrs, take out this next line */\n@@ -810,6 +811,21 @@\n \treturn ads_do_search_all_args(ads, bind_path, scope, expr, attrs, NULL, res);\n }\n \n+ ADS_STATUS ads_do_search_all_sd_flags(ADS_STRUCT *ads, const char *bind_path,\n+\t\t\t\t       int scope, const char *expr,\n+\t\t\t\t       const char **attrs, uint32 sd_flags, \n+\t\t\t\t       LDAPMessage **res)\n+{\n+\tads_control args;\n+\n+\targs.control = ADS_SD_FLAGS_OID;\n+\targs.val = sd_flags;\n+\targs.critical = True;\n+\n+\treturn ads_do_search_all_args(ads, bind_path, scope, expr, attrs, &args, res);\n+}\n+\n+\n /**\n  * Run a function on all results for a search.  Uses ads_do_paged_search() and\n  *  runs the function as each page is returned, using ads_process_results()\n\nModified: branches/SAMBA_3_0/source/libads/ldap_utils.c\n===================================================================\n--- branches/SAMBA_3_0/source/libads/ldap_utils.c\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0/source/libads/ldap_utils.c\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -4,6 +4,7 @@\n    Some Helpful wrappers on LDAP \n \n    Copyright (C) Andrew Tridgell 2001\n+   Copyright (C) Guenther Deschner 2006,2007\n    \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -187,6 +188,21 @@\n \n }\n \n+ ADS_STATUS ads_search_retry_dn_sd_flags(ADS_STRUCT *ads, LDAPMessage **res, \n+\t\t\t\t\t uint32 sd_flags,\n+\t\t\t\t\t const char *dn, \n+\t\t\t\t\t const char **attrs)\n+{\n+\tads_control args;\n+\n+\targs.control = ADS_SD_FLAGS_OID;\n+\targs.val = sd_flags;\n+\targs.critical = True;\n+\n+\treturn ads_do_search_retry_args(ads, dn, LDAP_SCOPE_BASE,\n+\t\t\t\t\t\"(objectclass=*)\", attrs, &args, res);\n+}\n+\n  ADS_STATUS ads_search_retry_sid(ADS_STRUCT *ads, LDAPMessage **res, \n \t\t\t\t const DOM_SID *sid,\n \t\t\t\t const char **attrs)\n\nModified: branches/SAMBA_3_0/source/libgpo/gpo_ldap.c\n===================================================================\n--- branches/SAMBA_3_0/source/libgpo/gpo_ldap.c\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0/source/libgpo/gpo_ldap.c\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -459,6 +459,7 @@\n \t\t\t\t\"gPCFunctionalityVersion\", \"gPCMachineExtensionNames\", \n \t\t\t\t\"gPCUserExtensionNames\", \"gPCWQLFilter\", \"name\", \n \t\t\t\t\"versionNumber\", \"ntSecurityDescriptor\", NULL};\n+\tuint32 sd_flags = DACL_SECURITY_INFORMATION;\n \n \tZERO_STRUCTP(gpo);\n \n@@ -472,7 +473,9 @@\n \t\t\tgpo_dn = gpo_dn + strlen(\"LDAP://\");\n \t\t}\n \n-\t\tstatus = ads_search_dn(ads, &res, gpo_dn, attrs);\n+\t\tstatus = ads_search_retry_dn_sd_flags(ads, &res, \n+\t\t\t\t\t\t      sd_flags,\n+\t\t\t\t\t\t      gpo_dn, attrs);\n \t\t\n \t} else if (display_name || guid_name) {\n \n@@ -482,9 +485,9 @@\n \t\t\t\t\t display_name ? display_name : guid_name);\n \t\tADS_ERROR_HAVE_NO_MEMORY(filter);\n \n-\t\tstatus = ads_do_search_all(ads, ads->config.bind_path,\n-\t\t\t\t\t   LDAP_SCOPE_SUBTREE, filter, \n-\t\t\t\t\t   attrs, &res);\n+\t\tstatus = ads_do_search_all_sd_flags(ads, ads->config.bind_path,\n+\t\t\t\t\t\t    LDAP_SCOPE_SUBTREE, filter, \n+\t\t\t\t\t\t    attrs, sd_flags, &res);\n \t}\n \n \tif (!ADS_ERR_OK(status)) {\n\nModified: branches/SAMBA_3_0_26/source/include/ads.h\n===================================================================\n--- branches/SAMBA_3_0_26/source/include/ads.h\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0_26/source/include/ads.h\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -121,6 +121,7 @@\n #define ADS_PERMIT_MODIFY_OID \t\"1.2.840.113556.1.4.1413\"\n #define ADS_ASQ_OID\t\t\"1.2.840.113556.1.4.1504\"\n #define ADS_EXTENDED_DN_OID\t\"1.2.840.113556.1.4.529\"\n+#define ADS_SD_FLAGS_OID       \"1.2.840.113556.1.4.801\"\n \n /* ldap attribute oids (Services for Unix) */\n #define ADS_ATTR_SFU_UIDNUMBER_OID \t\"1.2.840.113556.1.6.18.1.310\"\n\nModified: branches/SAMBA_3_0_26/source/include/ads_protos.h\n===================================================================\n--- branches/SAMBA_3_0_26/source/include/ads_protos.h\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0_26/source/include/ads_protos.h\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -93,3 +93,13 @@\n \t\t\t LDAPMessage *res,\n \t\t\t const char *gpo_dn,\n \t\t\t struct GROUP_POLICY_OBJECT *gpo);\n+ADS_STATUS ads_search_retry_dn_sd_flags(ADS_STRUCT *ads, LDAPMessage **res, \n+\t\t\t\t\t uint32 sd_flags,\n+\t\t\t\t\t const char *dn, \n+\t\t\t\t\t const char **attrs);\n+ADS_STATUS ads_do_search_all_sd_flags(ADS_STRUCT *ads, const char *bind_path,\n+\t\t\t\t       int scope, const char *expr,\n+\t\t\t\t       const char **attrs, uint32 sd_flags, \n+\t\t\t\t       LDAPMessage **res);\n+\n+\n\nModified: branches/SAMBA_3_0_26/source/libads/ldap.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libads/ldap.c\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0_26/source/libads/ldap.c\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -570,11 +570,11 @@\n {\n \tint rc, i, version;\n \tchar *utf8_expr, *utf8_path, **search_attrs;\n-\tLDAPControl PagedResults, NoReferrals, ExtendedDn, *controls[4], **rcontrols;\n+\tLDAPControl PagedResults, NoReferrals, ExternalCtrl, *controls[4], **rcontrols;\n \tBerElement *cookie_be = NULL;\n \tstruct berval *cookie_bv= NULL;\n-\tBerElement *extdn_be = NULL;\n-\tstruct berval *extdn_bv= NULL;\n+\tBerElement *ext_be = NULL;\n+\tstruct berval *ext_bv= NULL;\n \n \tTALLOC_CTX *ctx;\n \tads_control *external_control = (ads_control *) args;\n@@ -604,7 +604,6 @@\n \t\t}\n \t}\n \t\t\n-\t\t\n \t/* Paged results only available on ldap v3 or later */\n \tldap_get_option(ads->ld, LDAP_OPT_PROTOCOL_VERSION, &version);\n \tif (version < LDAP_VERSION3) {\n@@ -631,40 +630,42 @@\n \tNoReferrals.ldctl_value.bv_len = 0;\n \tNoReferrals.ldctl_value.bv_val = CONST_DISCARD(char *, \"\");\n \n-\tif (external_control && strequal(external_control->control, ADS_EXTENDED_DN_OID)) {\n+\tif (external_control && \n+\t    (strequal(external_control->control, ADS_EXTENDED_DN_OID) || \n+\t     strequal(external_control->control, ADS_SD_FLAGS_OID))) {\n \n-\t\tExtendedDn.ldctl_oid = CONST_DISCARD(char *, external_control->control);\n-\t\tExtendedDn.ldctl_iscritical = (char) external_control->critical;\n+\t\tExternalCtrl.ldctl_oid = CONST_DISCARD(char *, external_control->control);\n+\t\tExternalCtrl.ldctl_iscritical = (char) external_control->critical;\n \n \t\t/* win2k does not accept a ldctl_value beeing passed in */\n \n \t\tif (external_control->val != 0) {\n \n-\t\t\tif ((extdn_be = ber_alloc_t(LBER_USE_DER)) == NULL ) {\n+\t\t\tif ((ext_be = ber_alloc_t(LBER_USE_DER)) == NULL ) {\n \t\t\t\trc = LDAP_NO_MEMORY;\n \t\t\t\tgoto done;\n \t\t\t}\n \n-\t\t\tif ((ber_printf(extdn_be, \"{i}\", (ber_int_t) external_control->val)) == -1) {\n+\t\t\tif ((ber_printf(ext_be, \"{i}\", (ber_int_t) external_control->val)) == -1) {\n \t\t\t\trc = LDAP_NO_MEMORY;\n \t\t\t\tgoto done;\n \t\t\t}\n-\t\t\tif ((ber_flatten(extdn_be, &extdn_bv)) == -1) {\n+\t\t\tif ((ber_flatten(ext_be, &extdn_bv)) == -1) {\n \t\t\t\trc = LDAP_NO_MEMORY;\n \t\t\t\tgoto done;\n \t\t\t}\n \n-\t\t\tExtendedDn.ldctl_value.bv_len = extdn_bv->bv_len;\n-\t\t\tExtendedDn.ldctl_value.bv_val = extdn_bv->bv_val;\n+\t\t\tExternalCtrl.ldctl_value.bv_len = ext_bv->bv_len;\n+\t\t\tExternalCtrl.ldctl_value.bv_val = ext_bv->bv_val;\n \n \t\t} else {\n-\t\t\tExtendedDn.ldctl_value.bv_len = 0;\n-\t\t\tExtendedDn.ldctl_value.bv_val = NULL;\n+\t\t\tExternalCtrl.ldctl_value.bv_len = 0;\n+\t\t\tExternalCtrl.ldctl_value.bv_val = NULL;\n \t\t}\n \n \t\tcontrols[0] = &NoReferrals\n \t\tcontrols[1] = &PagedResults\n-\t\tcontrols[2] = &ExtendedDn\n+\t\tcontrols[2] = &ExternalCtrl\n \t\tcontrols[3] = NULL;\n \n \t} else {\n@@ -725,12 +726,12 @@\n done:\n \ttalloc_destroy(ctx);\n \n-\tif (extdn_be) {\n-\t\tber_free(extdn_be, 1);\n+\tif (ext_be) {\n+\t\tber_free(ext_be, 1);\n \t}\n \n-\tif (extdn_bv) {\n-\t\tber_bvfree(extdn_bv);\n+\tif (ext_bv) {\n+\t\tber_bvfree(ext_bv);\n \t}\n  \n \t/* if/when we decide to utf8-encode attrs, take out this next line */\n@@ -810,6 +811,21 @@\n \treturn ads_do_search_all_args(ads, bind_path, scope, expr, attrs, NULL, res);\n }\n \n+ ADS_STATUS ads_do_search_all_sd_flags(ADS_STRUCT *ads, const char *bind_path,\n+\t\t\t\t       int scope, const char *expr,\n+\t\t\t\t       const char **attrs, uint32 sd_flags, \n+\t\t\t\t       LDAPMessage **res)\n+{\n+\tads_control args;\n+\n+\targs.control = ADS_SD_FLAGS_OID;\n+\targs.val = sd_flags;\n+\targs.critical = True;\n+\n+\treturn ads_do_search_all_args(ads, bind_path, scope, expr, attrs, &args, res);\n+}\n+\n+\n /**\n  * Run a function on all results for a search.  Uses ads_do_paged_search() and\n  *  runs the function as each page is returned, using ads_process_results()\n\nModified: branches/SAMBA_3_0_26/source/libads/ldap_utils.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libads/ldap_utils.c\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0_26/source/libads/ldap_utils.c\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -4,6 +4,7 @@\n    Some Helpful wrappers on LDAP \n \n    Copyright (C) Andrew Tridgell 2001\n+   Copyright (C) Guenther Deschner 2006,2007\n    \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -163,6 +164,21 @@\n \t\t\t\t\t\"(objectclass=*)\", attrs, &args, res);\n }\n \n+ ADS_STATUS ads_search_retry_dn_sd_flags(ADS_STRUCT *ads, LDAPMessage **res, \n+\t\t\t\t\t uint32 sd_flags,\n+\t\t\t\t\t const char *dn, \n+\t\t\t\t\t const char **attrs)\n+{\n+\tads_control args;\n+\n+\targs.control = ADS_SD_FLAGS_OID;\n+\targs.val = sd_flags;\n+\targs.critical = True;\n+\n+\treturn ads_do_search_retry_args(ads, dn, LDAP_SCOPE_BASE,\n+\t\t\t\t\t\"(objectclass=*)\", attrs, &args, res);\n+}\n+\n  ADS_STATUS ads_search_retry_sid(ADS_STRUCT *ads, LDAPMessage **res, \n \t\t\t\t const DOM_SID *sid,\n \t\t\t\t const char **attrs)\n\nModified: branches/SAMBA_3_0_26/source/libgpo/gpo_ldap.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libgpo/gpo_ldap.c\t2007-05-11 12:41:11 UTC (rev 22796)\n+++ branches/SAMBA_3_0_26/source/libgpo/gpo_ldap.c\t2007-05-11 12:52:48 UTC (rev 22797)\n@@ -459,6 +459,7 @@\n \t\t\t\t\"gPCFunctionalityVersion\", \"gPCMachineExtensionNames\", \n \t\t\t\t\"gPCUserExtensionNames\", \"gPCWQLFilter\", \"name\", \n \t\t\t\t\"versionNumber\", \"ntSecurityDescriptor\", NULL};\n+\tuint32 sd_flags = DACL_SECURITY_INFORMATION;\n \n \tZERO_STRUCTP(gpo);\n \n@@ -472,7 +473,9 @@\n \t\t\tgpo_dn = gpo_dn + strlen(\"LDAP://\");\n \t\t}\n \n-\t\tstatus = ads_search_dn(ads, &res, gpo_dn, attrs);\n+\t\tstatus = ads_search_retry_dn_sd_flags(ads, &res, \n+\t\t\t\t\t\t      sd_flags,\n+\t\t\t\t\t\t      gpo_dn, attrs);\n \t\t\n \t} else if (display_name || guid_name) {\n \n@@ -482,9 +485,9 @@\n \t\t\t\t\t display_name ? display_name : guid_name);\n \t\tADS_ERROR_HAVE_NO_MEMORY(filter);\n \n-\t\tstatus = ads_do_search_all(ads, ads->config.bind_path,\n-\t\t\t\t\t   LDAP_SCOPE_SUBTREE, filter, \n-\t\t\t\t\t   attrs, &res);\n+\t\tstatus = ads_do_search_all_sd_flags(ads, ads->config.bind_path,\n+\t\t\t\t\t\t    LDAP_SCOPE_SUBTREE, filter, \n+\t\t\t\t\t\t    attrs, sd_flags, &res);\n \t}\n \n \tif (!ADS_ERR_OK(status)) {\n\n"}