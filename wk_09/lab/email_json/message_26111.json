{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 12124: Get rid of a couple more references to global_params. in\n\tfile:///home/jelmer/bzr.samba/SAMBA_4_0/", "body": "At file:///home/jelmer/bzr.samba/SAMBA_4_0/\n\n------------------------------------------------------------\nrevno: 12124\nrevision-id: jelmer@samba.org-20070509104652-bkzgo0ludqq6ycj2\nparent: jelmer@samba.org-20070509011150-9opq848pjvql0065\ncommitter: Jelmer Vernooij \nbranch nick: SAMBA_4_0\ntimestamp: Wed 2007-05-09 12:46:52 +0200\nmessage:\n  Get rid of a couple more references to global_params.\nmodified:\n  source/param/loadparm.c        svn-v2:2@0c0555d6-39d7-0310-84fc-f1cc0bd64818-trunk-source%2fparam%2floadparm.c\n=== modified file 'source/param/loadparm.c'\n--- a/source/param/loadparm.c\t2007-05-09 01:11:50 +0000\n+++ b/source/param/loadparm.c\t2007-05-09 10:46:52 +0000\n@@ -10,6 +10,7 @@\n    Copyright (C) Stefan (metze) Metzmacher 2002\n    Copyright (C) Jim McDonough (jmcd@us.ibm.com)  2003.\n    Copyright (C) James Myers 2003 \n+   Copyright (C) Jelmer Vernooij 2007 \n    \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -64,13 +65,11 @@\n #include \"lib/util/dlinklist.h\"\n #include \"param/loadparm.h\"\n \n-static BOOL bLoaded = false;\n-\n #define standard_sub_basic(str,len)\n \n /* some helpful bits */\n-#define LP_SNUM_OK(i) (((i) >= 0) && ((i) < global_params.iNumServices) && global_params.ServicePtrs[(i)]->valid)\n-#define VALID(i) global_params.ServicePtrs[i]->valid\n+#define LP_SNUM_OK(ctx, i) (((i) >= 0) && ((i) < (ctx)->iNumServices) && (ctx)->ServicePtrs[(i)]->valid)\n+#define VALID(ctx, i) ctx->ServicePtrs[i]->valid\n \n static BOOL do_parameter_var(struct loadparm_context *, \n \t\t\t\t\t\t\t const char *pszParmName, const char *fmt, ...);\n@@ -103,7 +102,6 @@\n \tchar *szPidDir;\n \tchar *szSetupDir;\n \tchar *szServerString;\n-\tchar *szAutoServices;\n \tchar *szPasswdChat;\n \tchar *szConfigFile;\n \tchar *szShareBackend;\n@@ -255,15 +253,15 @@\n \tTrue,\t\t\t/* bAvailable */\n \tTrue,\t\t\t/* bBrowseable */\n \tTrue,\t\t\t/* bRead_only */\n-\tFalse,\t\t\t/* bPrint_ok */\n-\tFalse,\t\t\t/* bMap_system */\n-\tFalse,\t\t\t/* bMap_hidden */\n+\tfalse,\t\t\t/* bPrint_ok */\n+\tfalse,\t\t\t/* bMap_system */\n+\tfalse,\t\t\t/* bMap_hidden */\n \tTrue,\t\t\t/* bMap_archive */\n \tTrue,\t\t\t/* bStrictLocking */\n \tNULL,\t\t\t/* copymap */\n-\tFalse,\t\t\t/* bMSDfsRoot */\n-\tFalse,\t\t\t/* bStrictSync */\n-\tFalse,\t\t\t/* bCIFileSystem */\n+\tfalse,\t\t\t/* bMSDfsRoot */\n+\tfalse,\t\t\t/* bStrictSync */\n+\tfalse,\t\t\t/* bCIFileSystem */\n \tNULL,\t\t\t/* Parametric options */\n \n \t\"\"\t\t\t/* dummy */\n@@ -276,11 +274,20 @@\n struct loadparm_context {\n \tint iNumServices;\n \tservice **ServicePtrs;\n+\t\n+\t/* Files used by this loadparm context */\n+\tstruct file_lists {\n+\t\tstruct file_lists *next;\n+\t\tchar *name;\n+\t\tchar *subfname;\n+\t\ttime_t modtime;\n+\t} *file_lists;\n };\n \n struct loadparm_context global_params = {\n \t.iNumServices = 0,\n \t.ServicePtrs = NULL,\n+\t.file_lists = NULL,\n };\n \n #define NUMPARAMETERS (sizeof(parm_table) / sizeof(struct parm_struct))\n@@ -539,8 +546,6 @@\n \t\n \t{\"config file\", P_STRING, P_GLOBAL, GLOBALS_OFFSET(szConfigFile), NULL, NULL, FLAG_HIDE},\n \t{\"share backend\", P_STRING, P_GLOBAL, GLOBALS_OFFSET(szShareBackend), NULL, NULL, FLAG_ADVANCED | FLAG_DEVELOPER},\n-\t{\"preload\", P_STRING, P_GLOBAL, GLOBALS_OFFSET(szAutoServices), NULL, NULL, FLAG_ADVANCED | FLAG_DEVELOPER},\n-\t{\"auto services\", P_STRING, P_GLOBAL, GLOBALS_OFFSET(szAutoServices), NULL, NULL, FLAG_ADVANCED | FLAG_DEVELOPER},\n \t{\"lock dir\", P_STRING, P_GLOBAL, GLOBALS_OFFSET(szLockDir), NULL, NULL, FLAG_HIDE}, \n \t{\"lock directory\", P_STRING, P_GLOBAL, GLOBALS_OFFSET(szLockDir), NULL, NULL, FLAG_ADVANCED | FLAG_DEVELOPER},\n \t{\"modules dir\", P_STRING, P_GLOBAL, GLOBALS_OFFSET(szModulesDir), NULL, NULL, FLAG_ADVANCED | FLAG_DEVELOPER},\n@@ -815,19 +820,19 @@\n  int fn_name(void) {return(*(int *)(ptr));}\n \n #define FN_LOCAL_STRING(fn_name,val) \\\n- const char *fn_name(int i) {return(lp_string((LP_SNUM_OK(i) && global_params.ServicePtrs[(i)]->val) ? global_params.ServicePtrs[(i)]->val : sDefault.val));}\n+ const char *fn_name(int i) {return(lp_string((LP_SNUM_OK(&global_params, i) && global_params.ServicePtrs[(i)]->val) ? global_params.ServicePtrs[(i)]->val : sDefault.val));}\n #define FN_LOCAL_CONST_STRING(fn_name,val) \\\n- const char *fn_name(int i) {return (const char *)((LP_SNUM_OK(i) && global_params.ServicePtrs[(i)]->val) ? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n+ const char *fn_name(int i) {return (const char *)((LP_SNUM_OK(&global_params, i) && global_params.ServicePtrs[(i)]->val) ? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n #define FN_LOCAL_LIST(fn_name,val) \\\n- const char **fn_name(int i) {return(const char **)(LP_SNUM_OK(i)? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n+ const char **fn_name(int i) {return(const char **)(LP_SNUM_OK(&global_params, i)? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n #define FN_LOCAL_BOOL(fn_name,val) \\\n- BOOL fn_name(int i) {return(LP_SNUM_OK(i)? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n+ BOOL fn_name(int i) {return(LP_SNUM_OK(&global_params, i)? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n #if 0 /* unused */\n #define FN_LOCAL_CHAR(fn_name,val) \\\n  char fn_name(int i) {return(LP_SNUM_OK(i)? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n #endif\n #define FN_LOCAL_INTEGER(fn_name,val) \\\n- int fn_name(int i) {return(LP_SNUM_OK(i)? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n+ int fn_name(int i) {return(LP_SNUM_OK(&global_params, i)? global_params.ServicePtrs[(i)]->val : sDefault.val);}\n \n _PUBLIC_ FN_GLOBAL_INTEGER(lp_server_role, &Globals.server_role)\n _PUBLIC_ FN_GLOBAL_LIST(lp_smb_ports, &Globals.smb_ports)\n@@ -867,7 +872,6 @@\n _PUBLIC_ FN_GLOBAL_LIST(lp_dcerpc_endpoint_servers, &Globals.dcerpc_ep_servers)\n _PUBLIC_ FN_GLOBAL_LIST(lp_server_services, &Globals.server_services)\n _PUBLIC_ FN_GLOBAL_STRING(lp_ntptr_providor, &Globals.ntptr_providor)\n-_PUBLIC_ FN_GLOBAL_STRING(lp_auto_services, &Globals.szAutoServices)\n _PUBLIC_ FN_GLOBAL_STRING(lp_passwd_chat, &Globals.szPasswdChat)\n _PUBLIC_ FN_GLOBAL_LIST(lp_passwordserver, &Globals.szPasswordServers)\n _PUBLIC_ FN_GLOBAL_LIST(lp_name_resolve_order, &Globals.szNameResolveOrder)\n@@ -1454,7 +1458,7 @@\n \tint iService;\n \n \tfor (iService = ctx->iNumServices - 1; iService >= 0; iService--)\n-\t\tif (VALID(iService) &&\n+\t\tif (VALID(ctx, iService) &&\n \t\t    strwicmp(ctx->ServicePtrs[iService]->szService, pszServiceName) == 0) {\n \t\t\tif (pserviceDest != NULL)\n \t\t\t\tcopy_service(pserviceDest, ctx->ServicePtrs[iService], NULL);\n@@ -1588,21 +1592,15 @@\n \treturn (bRetval);\n }\n \n-static struct file_lists {\n-\tstruct file_lists *next;\n-\tchar *name;\n-\tchar *subfname;\n-\ttime_t modtime;\n-} *file_lists = NULL;\n-\n /*******************************************************************\n  Keep a linked list of all config files so we know when one has changed \n  it's date and needs to be reloaded.\n ********************************************************************/\n \n-static void add_to_file_list(const char *fname, const char *subfname)\n+static void add_to_file_list(struct loadparm_context *ctx,\n+\t\t\t\t\t\t\t const char *fname, const char *subfname)\n {\n-\tstruct file_lists *f = file_lists;\n+\tstruct file_lists *f = ctx->file_lists;\n \n \twhile (f) {\n \t\tif (f->name && !strcmp(f->name, fname))\n@@ -1614,7 +1612,7 @@\n \t\tf = malloc_p(struct file_lists);\n \t\tif (!f)\n \t\t\treturn;\n-\t\tf->next = file_lists;\n+\t\tf->next = ctx->file_lists;\n \t\tf->name = strdup(fname);\n \t\tif (!f->name) {\n \t\t\tSAFE_FREE(f);\n@@ -1625,7 +1623,7 @@\n \t\t\tSAFE_FREE(f);\n \t\t\treturn;\n \t\t}\n-\t\tfile_lists = f;\n+\t\tctx->file_lists = f;\n \t\tf->modtime = file_modtime(subfname);\n \t} else {\n \t\ttime_t t = file_modtime(subfname);\n@@ -1638,12 +1636,12 @@\n  Check if a config file has changed date.\n ********************************************************************/\n \n-BOOL lp_file_list_changed(void)\n+BOOL lp_file_list_changed(struct loadparm_context *ctx)\n {\n-\tstruct file_lists *f = file_lists;\n+\tstruct file_lists *f;\n \tDEBUG(6, (\"lp_file_list_changed()\\n\"));\n \n-\twhile (f) {\n+\tfor (f = ctx->file_lists; f; f = f->next) {\n \t\tpstring n2;\n \t\ttime_t mod_time;\n \n@@ -1662,11 +1660,10 @@\n \t\t\tf->modtime = mod_time;\n \t\t\tSAFE_FREE(f->subfname);\n \t\t\tf->subfname = strdup(n2);\n-\t\t\treturn (True);\n+\t\t\treturn true;\n \t\t}\n-\t\tf = f->next;\n \t}\n-\treturn (False);\n+\treturn false;\n }\n \n /***************************************************************************\n@@ -1681,7 +1678,7 @@\n \n \tstandard_sub_basic(fname,sizeof(fname));\n \n-\tadd_to_file_list(pszParmValue, fname);\n+\tadd_to_file_list(ctx, pszParmValue, fname);\n \n \tstring_set(ptr, fname);\n \n@@ -1727,14 +1724,14 @@\n \t}\n \n \tfree_service(&serviceTemp);\n-\treturn (bRetval);\n+\treturn bRetval;\n }\n \n /***************************************************************************\n  Initialise a copymap.\n ***************************************************************************/\n \n-static void init_copymap(service * pservice)\n+static void init_copymap(service *pservice)\n {\n \tint i;\n \tSAFE_FREE(pservice->copymap);\n@@ -1748,18 +1745,6 @@\n \t\t\tpservice->copymap[i] = true;\n }\n \n-#if 0 /* not used anywhere */\n-/***************************************************************************\n- Return the local pointer to a parameter given the service number and the \n- pointer into the default structure.\n-***************************************************************************/\n-\n-void *lp_local_ptr(int snum, void *ptr)\n-{\n-\treturn (void *)(((char *)ServicePtrs[snum]) + PTR_DIFF(ptr, &sDefault));\n-}\n-#endif\n-\n /***************************************************************************\n  Process a parametric option\n ***************************************************************************/\n@@ -2219,7 +2204,7 @@\n static BOOL is_default(int i)\n {\n \tif (!defaults_saved)\n-\t\treturn False;\n+\t\treturn false;\n \tswitch (parm_table[i].type) {\n \t\tcase P_LIST:\n \t\t\treturn str_list_equal((const char **)parm_table[i].def.lvalue, \n@@ -2239,7 +2224,7 @@\n \t\tcase P_SEP:\n \t\t\tbreak;\n \t}\n-\treturn False;\n+\treturn false;\n }\n \n /***************************************************************************\n@@ -2327,7 +2312,7 @@\n \t\n \tparm = lp_parm_struct(parm_name);\n \tif (!parm) {\n-\t\treturn False;\n+\t\treturn false;\n \t}\n \t\n \tif (isGlobal)\n@@ -2408,25 +2393,7 @@\n \n BOOL lp_snum_ok(struct loadparm_context *ctx, int iService)\n {\n-\treturn (LP_SNUM_OK(iService) && ctx->ServicePtrs[iService]->bAvailable);\n-}\n-\n-/***************************************************************************\n- Auto-load some home services.\n-***************************************************************************/\n-\n-static void lp_add_auto_services(const char *str)\n-{\n-\treturn;\n-}\n-\n-/***************************************************************************\n- Have we loaded a services file yet?\n-***************************************************************************/\n-\n-BOOL lp_loaded(void)\n-{\n-\treturn (bLoaded);\n+\treturn (LP_SNUM_OK(ctx, iService) && ctx->ServicePtrs[iService]->bAvailable);\n }\n \n /***************************************************************************\n@@ -2439,7 +2406,7 @@\n {\n \tint i;\n \tfor (i = 0; i < global_params.iNumServices; i++) {\n-\t\tif (!VALID(i))\n+\t\tif (!VALID(ctx, i))\n \t\t\tcontinue;\n \n \t\tif (!snumused || !snumused(smb, i)) {\n@@ -2455,7 +2422,7 @@\n \n void lp_killservice(struct loadparm_context *ctx, int iServiceIn)\n {\n-\tif (VALID(iServiceIn)) {\n+\tif (VALID(ctx, iServiceIn)) {\n \t\tctx->ServicePtrs[iServiceIn]->valid = false;\n \t\tfree_service(ctx->ServicePtrs[iServiceIn]);\n \t}\n@@ -2495,7 +2462,7 @@\n \tstandard_sub_basic(n2,sizeof(n2));\n \tDEBUG(2, (\"lp_load: refreshing parameters from %s\\n\", n2));\n \t\n-\tadd_to_file_list(lp_configfile(), n2);\n+\tadd_to_file_list(ctx, lp_configfile(), n2);\n \n \t/* We get sections first, so have to start 'behind' to make up */\n \tiServiceIndex = -1;\n@@ -2507,13 +2474,9 @@\n \t\tif (iServiceIndex >= 0)\n \t\t\tbRetval = service_ok(ctx, iServiceIndex);\n \n-\tlp_add_auto_services(lp_auto_services());\n-\n \tlp_add_hidden(ctx, \"IPC$\", \"IPC\");\n \tlp_add_hidden(ctx, \"ADMIN$\", \"DISK\");\n \n-\tbLoaded = true;\n-\n \tif (!Globals.szWINSservers && Globals.bWINSsupport) {\n \t\tlp_do_parameter(ctx, -1, \"wins server\", \"127.0.0.1\");\n \t}\n@@ -2568,7 +2531,7 @@\n void lp_dump_one(struct loadparm_context *ctx, \n \t\t\t\t FILE * f, BOOL show_defaults, int snum)\n {\n-\tif (VALID(snum)) {\n+\tif (VALID(ctx, snum)) {\n \t\tif (ctx->ServicePtrs[snum]->szService[0] == '\\0')\n \t\t\treturn;\n \t\tdump_a_service(ctx->ServicePtrs[snum], f);\n@@ -2589,7 +2552,7 @@\n  \n  \n \tfor (iService = ctx->iNumServices - 1; iService >= 0; iService--) {\n-\t\tif (VALID(iService) && ctx->ServicePtrs[iService]->szService) {\n+\t\tif (VALID(ctx, iService) && ctx->ServicePtrs[iService]->szService) {\n \t\t\t/*\n \t\t\t * The substitution here is used to support %U is\n \t\t\t * service names\n@@ -2688,7 +2651,7 @@\n \n int lp_maxprintjobs(struct loadparm_context *ctx, int snum)\n {\n-\tint maxjobs = LP_SNUM_OK(snum) ? ctx->ServicePtrs[snum]->iMaxPrintJobs : sDefault.iMaxPrintJobs;\n+\tint maxjobs = LP_SNUM_OK(ctx, snum) ? ctx->ServicePtrs[snum]->iMaxPrintJobs : sDefault.iMaxPrintJobs;\n \tif (maxjobs <= 0 || maxjobs >= PRINT_MAX_JOBID)\n \t\tmaxjobs = PRINT_MAX_JOBID - 1;\n \n\n"}