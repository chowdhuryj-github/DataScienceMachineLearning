{"category": "ham", "to_address": "tridge@samba.org", "from_address": "Jeremy Allison <jra@samba.org>", "subject": "Re: svn commit: samba r22202 - in\n\tbranches/SAMBA_3_0/source/nsswitch: .", "body": "On Fri, Apr 13, 2007 at 02:36:51PM +1000, tridge@samba.org wrote:\n> \n> That wasn't my question. I don't doubt that it is possible to get a\n> corrupt tdb file. What I am asking is if you have seen a corrupt tdb\n> file that causes a 'wild pointer', and presumably a crash in the tdb\n> code that is reading the file.\n> \n> The patch you applied implied that you thought we might get a file\n> like that, and that disabling MMAP would avoid the segv. I shouldn't\n> matter if you have the contents of /dev/random in a tdb file, it\n> should not segv, no matter if using mmap or not (there is an exception\n> to this, where the file is truncated out from under a running program\n> accessing tdb via mmap - that is arguably a kernel bug, and is not\n> relevant to the situation you are trying to fix).\n> \n> So if you do have a tdb file that when read using mmap causes a crash,\n> please give me a copy. It implies that we have a real bug.\n\nAh, *now* I see - sorry. I didn't get it. No, I don't have a file\nlike that - I haven't seen a wild pointer crash in the tdb code\nitself for a long long time :-). I'm thinking of the somewhat\nless robust code that is processing the tdb output data :-).\n\nAlthough some rather woolley thinking on my part did rather\nconfuse the two :-).\n\nI will test this code with the contents of /dev/random\nthough (prepended with a valid tdb header of course :-).\n\nJeremy.\n\n"}