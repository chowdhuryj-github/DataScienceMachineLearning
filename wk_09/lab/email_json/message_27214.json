{"category": "ham", "to_address": "Joshua Isom <jrisom@gmail.com>", "from_address": "Nicholas Clark <nick@ccl4.org>", "subject": "Re: [svn:parrot] r18381 - trunk/include/parrot", "body": "On Thu, May 10, 2007 at 03:33:41AM -0500, Joshua Isom wrote:\n> \n> On May 9, 2007, at 4:01 PM, Nicholas Clark wrote:\n\n> >So, !s->strlen does scan as quickly and easily.\n> >\n> \n> To some, but it isn't as easy to just literally read.  \"Not s's strlen\" \n> is a lot different than \"STRING_IS_EMTPY\".  Since the code will be read \n> often, and often by people not familiar with parrot's internals, it \n> makes sense to make it easily readable.  It takes me a second to read \n> !s->strlen, but half a second to read STRING_IS_EMTPY.\n\nWhilst I agree with the .5s vs 1s, I'm still not convinced that I agree\n[and we may have to agree to disagree]\n\nIt comes down to the level of understanding of the internals. If every\nconstruction is hidden behind macros that explain its function, then\nI think it will help the beginners (as you say) and the knowledgeable\n(who know what STRING_IS_EMPTY() expands to).\n\nBut when I read STRING_IS_EMPTY() I stop and wonder \"right, how?\" and\nstop to look up what it expands to. Which one does need to do, if one\nis chasing down a bug. (Because with a bug, things *aren't* working as\nat least one of the designer or implementor intended, which means\nassumptions need to be checked. Maybe I'm odd)\n\nSo, personally, I find it easier with a comment on the struct by that\nmember, saying that an empty string has zero length.\n\nMmm, looking at it right now:\n\nstruct parrot_string_t {\n    pobj_t obj;\n    UINTVAL bufused;\n    char *strstart;\n    UINTVAL strlen;\n    /*    parrot_string_representation_t representation;*/\n    struct _encoding *encoding;\n    struct _charset *charset;\n    UINTVAL hashval; /* cached hash value computation; not yet used */\n};\n\n\nIt makes me wonder what's the difference between bufused and strlen.\n\n> >s == NULL is also more tersely written as !s, which, I feel, is also \n> >clearer\n> >to regular C programmers.\n> \n> Eh, if we have one, may as well have the other, although this one seems \n> simple enough.\n\nSTRING_IS_NULL() might not mean !s\n!s can only mean !s\n\n\nThat's why I don't like it.\n\n> >Clearly 5 years isn't a rapid learning curve.\n>\n> And one of the major reasons I don't want to even look at the perl5 \n> source to find the code I'm wanting.  Plus the documentation of the \n> code isn't great last I saw(like where's the definition of what SvPVNL \n> is?).  Parrot does have a couple flaws for finding struct definitions, \n\nman perlapi. Or it's not documented.\nBut probably last you looked it wasn't documented - there has been work in\nthis area.\n\nNicholas Clark\n\n"}