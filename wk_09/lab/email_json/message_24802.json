{"category": "ham", "to_address": "\"OtherRecipients of perl Ticket #41908\": ;", "from_address": "\"Paul Cochrane via RT\" <parrotbug-followup@parrotcode.org>", "subject": "[perl #41908] [PATCH] 5 feature enhancement of src/library.c (extension guessing), and solutions for the install target problems ", "body": "On Mon Apr 30 12:22:21 2007, mdiep wrote:\n> On Wed Mar 21 03:44:10 2007, codermattie wrote:\n> > Hello,\n> >\n> > now that 0.4.10 has released I would like to merge rt# 41908 which\n> > introduces extension guessing.\n> > The current implementation does not affect the behavior of existing\n> > code. No new test-suite\n> > regressions are introduced.\n> >\n> > the .load_byte_code op will now accept \"foo\" trying\n> > \".pbc\",\".pasm\",\".pir\" in order. compatibility\n> > with existing code is preserved by trying \"foo\" as-is first so\n> > \"foo.pir\" will still be preferred\n> > over a compiled version in the search paths.\n> >\n> > I have considered that this functionality may need to be presented\n> in\n> > a perl5'ish way. If it\n> > is possible for the argument to .load_bytecode to be unquoted then\n> >\n> > .load_bytecode \"foo.pir\" # provide the current behavior.\n> > .load_bytecode foo       # provide the extension guessing similar to\n> > perl5 use.\n> >\n> > As mentioned in the proposals in the RT ticket,\n> > PARROT_LOAD_PREFER=compile|source could\n> > be used to control whether source or compiled objects are preferred\n> in\n> > loading. This\n> > allows the development cycle to retain it's scripting interactivity\n> > with a single\n> > environment variable set, and efficient default (installed) behavior\n> > of preferring a\n> > compiled object. Note that the latter is how perl5 currently\n> behaves.\n> >\n> > Future:\n> >\n> > It may make since for byte-code and shared object loading to be\n> > unified in a new\n> > interface. An opcode such as .load_module could intelligently load\n> > shared objects, byte-code, and source. This could be the path to\n> > implementing the\n> > API cleanup proposed at the end of rt #41908 , where locating the\n> > file, and\n> > detecting the type of file is cleanly separated; getting dynext.c\n> out\n> > of library.c's\n> > internals.\n> >\n> > This does not necessarily have to replace the existing functions.\n> \n> I'd like to get this ticket (#41908) resolved. The patch was applied,\n> so everything is good\n> there, but your reply here has left me wondering. If there is more to\n> be done, could you open\n> another ticket?\n> \n> It's better to split off new requests/bugs into new tickets rather\n> than keep them in the patch\n> ticket because it cuts down the amount of reading that needs to be\n> done when sorting\n> through tickets. The patch itself doesn't seem that relevant that it\n> couldn't be a separate\n> ticket.\n\nThe discussion of the solution to the install target problem has been \nsplit out into a separate ticket:  RT#42901\n\nClosing the current ticket.\n\n"}