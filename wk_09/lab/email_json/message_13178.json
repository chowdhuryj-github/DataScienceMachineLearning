{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "gd@samba.org", "subject": "svn commit: samba r22479 - in branches/SAMBA_3_0/source: . include\n\tlibads libsmb utils", "body": "Author: gd\nDate: 2007-04-23 08:40:54 +0000 (Mon, 23 Apr 2007)\nNew Revision: 22479\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22479\n\nLog:\nAdd \"net ads keytab list\".\n\nGuenther\n\nModified:\n   branches/SAMBA_3_0/source/configure.in\n   branches/SAMBA_3_0/source/include/includes.h\n   branches/SAMBA_3_0/source/libads/kerberos_keytab.c\n   branches/SAMBA_3_0/source/libsmb/clikrb5.c\n   branches/SAMBA_3_0/source/utils/net_ads.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/configure.in\n===================================================================\n--- branches/SAMBA_3_0/source/configure.in\t2007-04-23 07:33:15 UTC (rev 22478)\n+++ branches/SAMBA_3_0/source/configure.in\t2007-04-23 08:40:54 UTC (rev 22479)\n@@ -3640,6 +3640,7 @@\n   AC_CHECK_FUNC_EXT(initialize_krb5_error_table, $KRB5_LIBS)\n   AC_CHECK_FUNC_EXT(krb5_get_init_creds_opt_alloc, $KRB5_LIBS)\n   AC_CHECK_FUNC_EXT(krb5_get_init_creds_opt_free, $KRB5_LIBS)\n+  AC_CHECK_FUNC_EXT(krb5_enctype_to_string, $KRB5_LIBS)\n \n   LIBS=\"$KRB5_LIBS $LIBS\"\n \n@@ -4016,7 +4017,44 @@\n               [whether krb5_mk_error takes 3 arguments MIT or 9 Heimdal])\n   fi\n \n+  if test x\"$ac_cv_func_ext_krb5_enctype_to_string\" = x\"yes\"; then\n+    AC_CACHE_CHECK([for krb5_error_code krb5_enctype_to_string(krb5_context context, krb5_enctype enctype, char **str)],\n+        smb_krb5_enctype_to_string_takes_krb5_context_arg,[\n+\tAC_TRY_RUN_STRICT([\n+\t\t#include \n+\t\tint main(void) {\n+\t\tkrb5_context context;\n+\t\tchar *str = NULL;\n+\t\tkrb5_enctype_to_string(context, 1, &str);\n+\t\tif (str) free (str);\n+\t\t}\n+\t\t],[$Werror_FLAGS],[$CPPFLAGS],[$LDFLAGS],\n+\t\tsmb_krb5_enctype_to_string_takes_krb5_context_arg=yes,\n+\t\tsmb_krb5_enctype_to_string_takes_krb5_context_arg=no)])\n \n+    if test x\"$smb_krb5_enctype_to_string_takes_krb5_context_arg\" = x\"yes\"; then\n+      AC_DEFINE(HAVE_KRB5_ENCTYPE_TO_STRING_WITH_KRB5_CONTEXT_ARG,1,\n+                [whether krb5_enctype_to_string takes krb5_context argument])\n+    fi\n+\n+    AC_CACHE_CHECK([for krb5_error_code krb5_enctype_to_string(krb5_enctype enctype, char *str, size_t len)],\n+        smb_krb5_enctype_to_string_takes_size_t_arg,[\n+\tAC_TRY_RUN_STRICT([\n+\t\t#include \n+\t\tint main(void) {\n+\t\tchar buf[256];\n+\t\tkrb5_enctype_to_string(1, buf, 256);\n+\t\t}\n+\t\t],[$Werror_FLAGS],[$CPPFLAGS],[$LDFLAGS],\n+\t\tsmb_krb5_enctype_to_string_takes_size_t_arg=yes,\n+\t\tsmb_krb5_enctype_to_string_takes_size_t_arg=no)])\n+\n+    if test x\"$smb_krb5_enctype_to_string_takes_size_t_arg\" = x\"yes\"; then\n+      AC_DEFINE(HAVE_KRB5_ENCTYPE_TO_STRING_WITH_SIZE_T_ARG,1,\n+                [whether krb5_enctype_to_string takes size_t argument])\n+    fi\n+  fi\n+\n   #\n   #\n   # Now the decisions whether we can support krb5\n@@ -5954,7 +5992,15 @@\n     AC_DEFINE(HAVE_PEERCRED,1,[Whether we can use SO_PEERCRED to get socket credentials])\n fi\n \n+AC_CHECK_FUNCS(getpeereid sendmsg)\n+AC_CHECK_HEADERS(sys/ucred.h)\n \n+AC_CHECK_MEMBERS([struct msghdr.msg_accrightslen],,,\n+\t\t[#include ])\n+AC_CHECK_MEMBERS([struct msghdr.msg_control],,,\n+\t\t[#include ])\n+\n+\n #################################################\n # Check to see if we should use the included popt\n \n\nModified: branches/SAMBA_3_0/source/include/includes.h\n===================================================================\n--- branches/SAMBA_3_0/source/include/includes.h\t2007-04-23 07:33:15 UTC (rev 22478)\n+++ branches/SAMBA_3_0/source/include/includes.h\t2007-04-23 08:40:54 UTC (rev 22479)\n@@ -1194,6 +1194,10 @@\n \t\t\t\t\tkrb5_error_code error_code,\n \t\t\t\t\tconst krb5_principal server,\n \t\t\t\t\tkrb5_data *reply);\n+krb5_enctype smb_get_enctype_from_kt_entry(const krb5_keytab_entry *kt_entry);\n+krb5_error_code smb_krb5_enctype_to_string(krb5_context context, \n+ \t\t\t\t\t    krb5_enctype enctype, \n+\t\t\t\t\t    char **etype_s);\n \n #endif /* HAVE_KRB5 */\n \n\nModified: branches/SAMBA_3_0/source/libads/kerberos_keytab.c\n===================================================================\n--- branches/SAMBA_3_0/source/libads/kerberos_keytab.c\t2007-04-23 07:33:15 UTC (rev 22478)\n+++ branches/SAMBA_3_0/source/libads/kerberos_keytab.c\t2007-04-23 08:40:54 UTC (rev 22479)\n@@ -691,4 +691,116 @@\n \t}\n \treturn ret;\n }\n+\n+/**********************************************************************\n+ List system keytab.\n+***********************************************************************/\n+\n+int ads_keytab_list(void)\n+{\n+\tkrb5_error_code ret = 0;\n+\tkrb5_context context = NULL;\n+\tkrb5_keytab keytab = NULL;\n+\tkrb5_kt_cursor cursor;\n+\tkrb5_keytab_entry kt_entry;\n+\tchar keytab_name[MAX_KEYTAB_NAME_LEN];\n+\n+\tZERO_STRUCT(kt_entry);\n+\tZERO_STRUCT(cursor);\n+\n+\tinitialize_krb5_error_table();\n+\tret = krb5_init_context(&context);\n+\tif (ret) {\n+\t\tDEBUG(1,(\"ads_keytab_list: could not krb5_init_context: %s\\n\",error_message(ret)));\n+\t\treturn ret;\n+\t}\n+#if 0 /* HAVE_WRFILE_KEYTAB */\n+\tkeytab_name[0] = 'W';\n+\tkeytab_name[1] = 'R';\n+\tret = krb5_kt_default_name(context, (char *) &keytab_name[2], MAX_KEYTAB_NAME_LEN - 4);\n+#else\n+\tret = krb5_kt_default_name(context, (char *) &keytab_name[0], MAX_KEYTAB_NAME_LEN - 2);\n+#endif\n+\tif (ret) {\n+\t\tDEBUG(1,(\"ads_keytab_list: krb5_kt_default failed (%s)\\n\", error_message(ret)));\n+\t\tgoto out;\n+\t}\n+\tDEBUG(3,(\"ads_keytab_list: Using default keytab: %s\\n\", (char *) &keytab_name));\n+\tret = krb5_kt_resolve(context, (char *) &keytab_name, &keytab);\n+\tif (ret) {\n+\t\tDEBUG(1,(\"ads_keytab_list: krb5_kt_resolve failed (%s)\\n\", error_message(ret)));\n+\t\tgoto out;\n+\t}\n+\n+\tret = krb5_kt_start_seq_get(context, keytab, &cursor);\n+\tif (ret) {\n+\t\tgoto out;\n+\t}\n+\n+\tprintf(\"Vno  Type        Principal\\n\");\n+\n+\twhile (krb5_kt_next_entry(context, keytab, &kt_entry, &cursor) == 0) {\n+\t\n+\t\tchar *princ_s = NULL;\n+\t\tchar *etype_s = NULL;\n+\t\tkrb5_enctype enctype = 0;\n+\n+\t\tret = smb_krb5_unparse_name(context, kt_entry.principal, &princ_s);\n+\t\tif (ret) {\n+\t\t\tgoto out;\n+\t\t}\n+\n+\t\tenctype = smb_get_enctype_from_kt_entry(&kt_entry);\n+\n+\t\tret = smb_krb5_enctype_to_string(context, enctype, &etype_s);\n+\t\tif (ret) {\n+\t\t\tSAFE_FREE(princ_s);\n+\t\t\tgoto out;\n+\t\t}\n+\n+\t\tprintf(\"%3d  %s\\t\\t %s\\n\", kt_entry.vno, etype_s, princ_s);\n+\n+\t\tSAFE_FREE(princ_s);\n+\t\tSAFE_FREE(etype_s);\n+\n+\t\tret = smb_krb5_kt_free_entry(context, &kt_entry);\n+\t\tif (ret) {\n+\t\t\tgoto out;\n+\t\t}\n+\t}\n+\n+\tret = krb5_kt_end_seq_get(context, keytab, &cursor);\n+\tif (ret) {\n+\t\tgoto out;\n+\t}\n+\n+\t/* Ensure we don't double free. */\n+\tZERO_STRUCT(kt_entry);\n+\tZERO_STRUCT(cursor);\n+out:\n+\n+\t{\n+\t\tkrb5_keytab_entry zero_kt_entry;\n+\t\tZERO_STRUCT(zero_kt_entry);\n+\t\tif (memcmp(&zero_kt_entry, &kt_entry, sizeof(krb5_keytab_entry))) {\n+\t\t\tsmb_krb5_kt_free_entry(context, &kt_entry);\n+\t\t}\n+\t}\n+\t{\n+\t\tkrb5_kt_cursor zero_csr;\n+\t\tZERO_STRUCT(zero_csr);\n+\t\tif ((memcmp(&cursor, &zero_csr, sizeof(krb5_kt_cursor)) != 0) && keytab) {\n+\t\t\tkrb5_kt_end_seq_get(context, keytab, &cursor);\t\n+\t\t}\n+\t}\n+\n+\tif (keytab) {\n+\t\tkrb5_kt_close(context, keytab);\n+\t}\n+\tif (context) {\n+\t\tkrb5_free_context(context);\n+\t}\n+\treturn ret;\n+}\n+\n #endif /* HAVE_KRB5 */\n\nModified: branches/SAMBA_3_0/source/libsmb/clikrb5.c\n===================================================================\n--- branches/SAMBA_3_0/source/libsmb/clikrb5.c\t2007-04-23 07:33:15 UTC (rev 22478)\n+++ branches/SAMBA_3_0/source/libsmb/clikrb5.c\t2007-04-23 08:40:54 UTC (rev 22479)\n@@ -28,11 +28,11 @@\n \n #ifdef HAVE_KRB5\n \n-#ifdef HAVE_KRB5_KEYBLOCK_KEYVALUE\n-#define KRB5_KEY_TYPE(k)\t((k)->keytype)\n+#ifdef HAVE_KRB5_KEYBLOCK_KEYVALUE /* Heimdal */\n+#define KRB5_KEY_TYPE(k)\t((k)->keytype) \n #define KRB5_KEY_LENGTH(k)\t((k)->keyvalue.length)\n #define KRB5_KEY_DATA(k)\t((k)->keyvalue.data)\n-#else\n+#else /* MIT */\n #define\tKRB5_KEY_TYPE(k)\t((k)->enctype)\n #define KRB5_KEY_LENGTH(k)\t((k)->length)\n #define KRB5_KEY_DATA(k)\t((k)->contents)\n@@ -1216,7 +1216,7 @@\n \t\tkrb5_free_creds(context, creds);\n \t}\n #else\n-#error No suitable krb5 ticket renew function available\n+#error NO_SUITABKE_KRB5_TICKET_RENEW_FUNCTION_AVAILABLE\n #endif\n \n \n@@ -1428,12 +1428,12 @@\n #ifdef HAVE_KRB5_GET_INIT_CREDS_OPT_FREE\n \n #ifdef KRB5_CREDS_OPT_FREE_REQUIRES_CONTEXT\n-\t/* Modern MIT version */\n+\t/* Modern MIT or Heimdal version */\n \tkrb5_get_init_creds_opt_free(context, opt);\n #else\n \t/* Heimdal version */\n \tkrb5_get_init_creds_opt_free(opt);\n-#endif\n+#endif /* KRB5_CREDS_OPT_FREE_REQUIRES_CONTEXT */\n \n #else /* HAVE_KRB5_GET_INIT_CREDS_OPT_FREE */\n \t/* Historical MIT version */\n@@ -1442,6 +1442,41 @@\n #endif /* HAVE_KRB5_GET_INIT_CREDS_OPT_FREE */\n }\n \n+ krb5_enctype smb_get_enctype_from_kt_entry(const krb5_keytab_entry *kt_entry)\n+{\n+#ifdef HAVE_KRB5_KEYTAB_ENTRY_KEY\t\t/* MIT */\n+\treturn kt_entry->key.enctype;\n+#elif defined(HAVE_KRB5_KEYTAB_ENTRY_KEYBLOCK)\t/* Heimdal */\n+\treturn kt_entry->keyblock.keytype;\n+#else\n+#error UNKNOWN_KRB5_KEYTAB_ENTRY_KEYBLOCK_FORMAT\n+#endif\n+}\n+\n+\n+/* caller needs to free etype_s */\n+ krb5_error_code smb_krb5_enctype_to_string(krb5_context context, \n+ \t\t\t\t\t    krb5_enctype enctype, \n+\t\t\t\t\t    char **etype_s)\n+{\n+#ifdef HAVE_KRB5_ENCTYPE_TO_STRING_WITH_KRB5_CONTEXT_ARG\n+\treturn krb5_enctype_to_string(context, enctype, etype_s); /* Heimdal */\n+#elif defined(HAVE_KRB5_ENCTYPE_TO_STRING_WITH_SIZE_T_ARG)\n+\tchar buf[256];\n+\tkrb5_error_code ret = krb5_enctype_to_string(enctype, buf, 256); /* MIT */\n+\tif (ret) {\n+\t\treturn ret;\n+\t}\n+\t*etype_s = SMB_STRDUP(buf);\n+\tif (!*etype_s) {\n+\t\treturn ENOMEM;\n+\t}\n+\treturn ret;\n+#else\n+#error UNKNOWN_KRB5_ENCTYPE_TO_STRING_FUNCTION\n+#endif\n+}\n+\n  krb5_error_code smb_krb5_mk_error(krb5_context context,\n \t\t\t\tkrb5_error_code error_code,\n \t\t\t\tconst krb5_principal server,\n\nModified: branches/SAMBA_3_0/source/utils/net_ads.c\n===================================================================\n--- branches/SAMBA_3_0/source/utils/net_ads.c\t2007-04-23 07:33:15 UTC (rev 22478)\n+++ branches/SAMBA_3_0/source/utils/net_ads.c\t2007-04-23 08:40:54 UTC (rev 22479)\n@@ -2397,10 +2397,11 @@\n \td_printf(\n \t\t\"net ads keytab \\n\"\\\n \" can be either:\\n\"\\\n+\"  ADD       Adds new service principal\\n\"\\\n \"  CREATE    Creates a fresh keytab\\n\"\\\n-\"  ADD       Adds new service principal\\n\"\\\n \"  FLUSH     Flushes out all keytab entries\\n\"\\\n \"  HELP      Prints this help message\\n\"\\\n+\"  LIST      List the keytab\\n\"\\\n \"The ADD command will take arguments, the other commands\\n\"\\\n \"will not take any arguments.   The arguments given to ADD\\n\"\\\n \"should be a list of principals to add.  For example, \\n\"\\\n@@ -2455,6 +2456,12 @@\n \treturn ret;\n }\n \n+static int net_ads_keytab_list(int argc, const char **argv)\n+{\n+\treturn ads_keytab_list();\n+}\n+\n+\n int net_ads_keytab(int argc, const char **argv)\n {\n \tstruct functable func[] = {\n@@ -2462,6 +2469,7 @@\n \t\t{\"ADD\", net_ads_keytab_add},\n \t\t{\"FLUSH\", net_ads_keytab_flush},\n \t\t{\"HELP\", net_ads_keytab_usage},\n+\t\t{\"LIST\", net_ads_keytab_list},\n \t\t{NULL, NULL}\n \t};\n \n\n"}