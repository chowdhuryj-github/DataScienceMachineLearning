{"category": "ham", "to_address": "jim holtman <jholtman@gmail.com>, r-help@stat.math.ethz.ch", "from_address": "Jason Q McClintic <jqmcclintic@stthomas.edu>", "subject": "Re: [R] A question about logical controls and function arguements", "body": "Sir,\n\nI freely admit my ignorance as to the subtleties of specifying arguments.\n\nLet me make sure I understand your suggestion: create a variable filter\nwhich takes 1 or 0 (filter or not) and another called, say,\nfilter.location which is the ordered triplet.\n\nIt does add to the number of options, but would seem to simplify the\nunderlying code. It appears I may have attempted to code above my skill\nlevel.\n\nThanks for the assistance,\n\nJason Q McClintic\n--\nJason Q McClintic\njqmcclintic@stthomas.edu\nmccl0219@tc.umn.edu\n\njim holtman wrote:\n> You are trying to use 'filter' in two ways.  Your code is testing for a\n> single value (\"FALSE\"), and that is all that \"==\" can do (single value),\n> but you are pass in a vector (c(0,0,1)) which has three values, on the\n> first of which can be tested by the \"==\".\n>  \n> So you might want to consider having another parameter which says\n> whether or not to use \"filter\".\n> \n>  \n>> On 6/15/07, *Jason Q McClintic* > > wrote:\n>> \n>>     Dear R-help subscribers,\n>> \n>>     I'm trying to write a function to generate data simulating the image\n>>     created by a point radiation source in a plane on a screen where there\n>>     is filter with a single circular aperture in it between the source and\n>>     the screen.\n>> \n>>     Following some guides (including Intro to R and some I found online)\n>>     and\n>>     examples I have specified the function (full code below question) with\n>>     several arguments with the form:\n>> \n>>     option=c(\"option1\",\"option2\")\n>> \n>>     For instance, I want filter to either be \"FALSE\" to tell the function\n>>     there is no filter or an ordered triplet describing the location and\n>>     radius of the area radiation is not blocked by the filter. There are\n>>     several others along similar lines.\n>> \n>>     When I source the function into R, it parses fine, but when attempting\n>>     to run it with\n>> \n>>     data.spect<-spect.data(source.p=\"r\",filter=c(0,0,1),file.out=\"FALSE\")\n>> \n>>     the following warning is returned:\n>> \n>>     Warning messages:\n>>     1: the condition has length > 1 and only the first element will be used\n.>     in: if (filter == \"FALSE\") {\n.>     2: the condition has length > 1 and only the first element will\nbe used\n>>     in: if (filter == \"FALSE\") {\n.>\n>>     The code this is referencing is about 1/3 from the bottom of the\n>>     function.\n>> \n>>     I'm not sure how to correct this. I tried ifelse in one case and it\n>>     doesn't work at all. Searching the archives for \"function arguments\"\n>>     didn't yield anything about the kind of arguments that are causing the\n>>     trouble.\n>>     I also want to get the matrix of generated data out, and have tried\n>>     data.spect$final.sample (following an example I found online), but it\n>>     returns null. I also attempted to use data.spect$initial.sample , but\n>>     this returned null as well.\n>> \n>>     I'm still very new to writing my own functions, and any and all help\n>>     would be appreciated.\n>> \n>>     There are notes about what different options are supposed to do at the\n.>     end of the appended code.\n>> \n>>     Thanks in advance,\n>> \n>>     Jason Q McClintic\n>>     --\n>>     Jason Q McClintic\n>>     jqmcclintic@stthomas.edu \n>>     mccl0219@tc.umn.edu \n>> \n>>     spect.data<-function(num.points=50,fixed=FALSE,source.p=c(\"r\",\"c(0,0)\"),\n>>       source.mean=0,source.sd=1,filter=c(\"FALSE\",\"c(0,0,1)\"),\n>>       heights=c(0.5,0.5),\n>>       file.out=c (\"FALSE\",\"/home/jqmcclintic/Desktop/spect.data\")){\n>>            ##Determine Start Point\n>>            if (source.p==\"r\")\n>>     {source<-c(rnorm(1,source.mean,source.sd \n>>     ),rnorm(1,source.mean,source.sd ))}\n>>     else {source<-source.p}\n>>            cat(\"The location of the source is: \",source,\"\\n\")\n>>            ##Generate the data\n>>            remainder<- num.points\n>>            initial.sample<-c(1,1)\n>>            ##finds intersection points with the screen\n>>                    intersect.screen.at\n>>     <-function(x,h){\n>>                            t<-h[1]/(2*cos(x))\n>>                            x.intercept<-t*sin(x[,2])*cos(x[,1])\n>>                            y.intercept<-t*sin(x[,2])*sin(x[,1])\n>>                    }\n>>            ##finds intersection points with the collecting plate\n>>                    intersect.plate.at\n>>     <-function(x,h){\n>>                            t<-h[2]/(2*cos(x))\n>>                            x.intercept<-t*sin(x[,2])*cos(x[,1])\n>>                            y.intercept <-t*sin(x[,2])*sin(x[,1])\n.>                    }\n>>            ##determines if the intersection point is inside or outside\n>>     the hole in\n>>     the screen. x is the matrix of intersection points and s is the location\n>>     and radius of the hole in the screen. 1 for yes, 0 for no.\n>>                    passes.through<-function(x,s){\n>>                            distance<-sqrt(((x[,1]-s[1])^2)+((x[,2]-s[2])^2))\n>>                            through<-ifelse(distance>                    }\n>>            ##Build the sample\n>>            while (remainder>0){\n>>                    ##Generate n random vectors uniformly distributed over S2\n>>                    theta<-runif(remainder,0,6.2831853)\n>>                    phi<-runif(remainder,0, 1.5707963)\n>>                    theta.phi<-cbind(theta,phi)\n>>                    initial.sample<-rbind(initial.sample,theta.phi)\n>>                    ##Call intersect.screen.at \n>>                   \n>>     intersects.screen<-intersect.screen.at(initial.sample,heights)\n>>                    ##Call intersect.plate.at \n>>                    intersects.plate<-if(filter==\"FALSE\")\n>>     {intersect.screen.at(initial.sample,heights)} else {\n>>                            intersect.plate.at(initial.sample,heights)\n>>                    }\n>>                    ##Does it intersect inside or outside the hole?\n>> \n>>     intersect.hole\n>>     <-if(filter==\"FALSE\"){array(1,dim=length(initial.sample))}\n>>     else{passes.through(intersects.screen,filter)}\n>>                    ##Remove points that do not pass throught the hole.\n>>     By design, if\n>>     there is no filter, all pass through the hole.\n>>                    initial.sample<-cbind(initial.sample,intersect.hole)\n>>                   \n>>     initial.sample<-subset(initial.sample,initial.sample[,3]==1)\n>>                    ##Reset remainder\n>>                    remainder<-if(fixed==\"FALSE\") {0} else {\n>>                            num.points-length(initial.sample)\n>>                    }\n>>            }\n>>            write(initial.sample)\n>>            ##remove the top row of the initial sample since it is\n>>     non-random.\n>>            final.sample <-initial.sample[-1,]\n>>            ##print the final sample to a csv file for archival purposes\n>>           \n>>     if(file.out!=\"FALSE\"){write.csv(final.sample,file=file.out);cat(\"The\n>>     location of the data is:\", file.out,\"\\n\")} else{cat(\"No csv file\n>>     requested\",\"\\n\")}\n>>     }\n>> \n>>     ______________________________________________\n>>     R-help@stat.math.ethz.ch  mailing list\n>>     https://stat.ethz.ch/mailman/listinfo/r-help\n>>     PLEASE do read the posting guide\n>>     http://www.R-project.org/posting-guide.html\n>>     \n>>     and provide commented, minimal, self-contained, reproducible code.\n>> \n>> \n>> \n>> \n>> -- \n>> Jim Holtman\n>> Cincinnati, OH\n>> +1 513 646 9390\n>> \n>> What is the problem you are trying to solve?\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}