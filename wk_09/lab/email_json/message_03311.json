{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "brian d foy <brian.d.foy@gmail.com>", "subject": "Does =$*ARGS work?", "body": "Randal and I are starting work on \"Learning Perl 6\", and now\nthat I've completed a lot of other things, I can actually start\npaying attention to Perl 6. Here's the first of my stupid, \"where\nhave you been for the past 2 years you moron\" questions. :)\n\nI'm working on the chapter on I/O (Chapter 5 in the current Llama), \nspecifically reading from the command lines files.\n\nUnder the section \"The for Statement\" in S04, it says that the diamond\noperator\n\n   while( <> ) { ... } \n   \nbecomes in Perl 6\n\n   for =$*ARGS { ... }\n   \nIn the Pugs I have (6.2.13 (r15868) on Intel darwin), =$*ARGS only\nreads the lines from the first file in @ARGS. I don't see this idiom\nused anywhere else in the tests or examples, either.\n\nThe $*ARGS variable shows up in this file, which looks like it's still \nmaintained:\n\n   http://svn.pugscode.org/pugs/docs/AES/S28draft.pod\n\nbut that points to another variable list that it says is more\ncomplete, although it does not list $*ARGS:\n\n   http://svn.pugscode.org/pugs/docs/Perl6/Overview/Variable.pod\n\nIs this something that's not yet implemented or just broken? Am I\nmissing some documentation about parts that aren't implemented yet?\n\nI wrote a test to put into t/builtin/io (once I remember my password),\nbut since I haven't committed anything to pugs before, I want to ensure\nit's not me being stupid. :)\n\nAlso, along with that, is there any counterpart to Perl 5's $ARGV? I\nwanted to record the files =$*ARGS went through, but I didn't see a way\nto discover that.\n\n"}