{"category": "ham", "to_address": "\"Steve Bertrand\" <iaccounts@ibctech.ca>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: $1 $2 var confusion", "body": "On 5/12/07, Steve Bertrand  wrote:\n\n> my $email = 'steveb@domain.com';\n> $email =~ /(.*)@(.*)/;\n> if ($2 !~ /domain\\.com/) {\n>         print \"var 2 is bad\\n\";\n> }\n> print \"$1\\n\";\n\nAt this point, what is $1? It's the value from the last successful\npattern match. But was that the test against $email, or the one\nagainst $2? If the latter succeeded in matching (which it should,\ngiven this data) the pattern doesn't have a $1, so it's undef.\n\n> my $email = 'steveb@wrong.com';\n> $email =~ /(.*)@(.*)/;\n> if ($2 !~ /domain\\.com/) {\n>         print \"var 2 is bad\\n\";\n> }\n> print \"$1\\n\";\n\nThis time, the second match failed, so $1 is left over from the first match.\n\nThe solution is generally to copy the match variables to ordinary\nvariables before doing further pattern matches, and to take care to\nuse match variables only after the match has succeeded.\n\nBut are you really trying to do something like validate an email\naddress? They're more complex than you may realize. (For example,\nthere may be more than one '@' sign in an e-mail address.) Maybe\nthere's a module on CPAN that could help you with whatever you're\ndoing.\n\nCheers!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}