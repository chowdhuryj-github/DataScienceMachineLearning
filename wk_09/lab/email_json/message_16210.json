{"category": "ham", "to_address": "\"OtherRecipients of perl Ticket #42300\": ;", "from_address": "\"Matt Diephouse via RT\" <parrotbug-followup@parrotcode.org>", "subject": "[perl #42300] [PATCH] t/pmc/sub.t: test for creation of lex by clone op ", "body": "First, the test (rearranged to include only the relevant parts):\n\n+.sub main :main\n+    .local string ok, not_ok\n+    ok = \"ok\"\n+    not_ok = \"not ok\"\n+    \n+    # if 'not ok' is printed, it means that the lexical environment\n+    # for the first closure in each pair, (where \"out\" = \"ok\")\n+    # was overwritten by the lexical environment created for the\n+    # second closure (where \"out\" = \"not ok\")\n+    \n+    $P10 = makebar_clone(ok)\n+    $P20 = makebar_clone(not_ok)\n+    $P10()\n+.end\n+\n+.sub makebar_clone\n+    .param pmc out\n+    .lex 'out', out\n+    .const .Sub s = 'bar'\n+    $P0 = clone s\n+    .return($P0)\n+.end\n+\n+.sub bar :outer(makebar_clone)\n+    $P0 = find_lex 'out'\n+    say $P0\n+.end\n\n(This prints \"not ok\". The test in the patch expects \"ok\".)\n\nYou're arguing that the different copies of \"bar\" that are returned from makebar_clone \nshould have different lexical environments. I'm pretty sure that this is not the case. Without \nusing \"newclosure\", there's no closure so the lexical environments are the same.\n\nWhat the :outer does in this case is rearrange the lexical stack so that \"makebar_clone\" \nappears in the lexical stack for \"bar\". So we're using the lexical environment from the last \ntime that \"makebar_clone\" was called. It's bizarre that this even works because without the \nclosure, I'd think that the lexical environment would have destroyed.\n\nI'm not sure how intentional this is. The PDD isn't clear (to me) about what :outer means in \nthe absence of \"newclosure\". I'd definitely be interested in seeing why this would be a useful \nfeature. More detail in the PDD would be nice.\n\nThanks for the interesting patch.\n\n--\nMatt Diephouse\n\n\n"}