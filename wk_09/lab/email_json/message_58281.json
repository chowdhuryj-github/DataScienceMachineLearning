{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "pancake <pancake@youterm.com>", "subject": "parrot as a vm for real processors", "body": "yesterday i was thinking about a way for interpretting assembly code of ARM\n(and maybe other architectures) while defining a grammar for its assembly.\n\nThis way it will be possible to embed parrot on a debugger and let't interact\nbetween the code and the debugger implementing in this way a pseudo-assembly-\nlanguage for multiple architectures.\n\nThe only thing that will be needed is the hardware interaction that can be\nextended with libraries and so, but atm i'm just interested on interpretting\na sequence of opcodes and emulate them. Registers can be directly mapped into\nparrot registers and atm i'm only thinking on supporting text-based assembly,\nbinary one can be added later.\n\nHere my questions: \n\nI think it would be rather simple to do it, but i don't have the skills yet\nfor doing it. What's the 'easiest' language to start working on as a template?\n\nIt is possible to define a binary grammar or i should write a parser for it\nin pure parrot and passing this code to a function that interprets a one\nline of assembly code.\n\nShould be better to implement everything in parrot instead of using a grammar?\n\nPD: I was trying to implement some hooks on the exception layer, but I saw\nthat the interface it's not yet defined and I'll wait for it to continue this\nwork.\n\nThanks!\n\n  --pancake\n\n"}