{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jelmer@samba.org", "subject": "svn commit: samba r22520 - in branches/SAMBA_4_0: .\n\tsource/pidl/lib/Parse/Pidl/Wireshark source/pidl/tests", "body": "Author: jelmer\nDate: 2007-04-25 16:10:54 +0000 (Wed, 25 Apr 2007)\nNew Revision: 22520\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22520\n\nLog:\nFix the TYPE command.\nModified:\n   branches/SAMBA_4_0/\n   branches/SAMBA_4_0/source/pidl/lib/Parse/Pidl/Wireshark/Conformance.pm\n   branches/SAMBA_4_0/source/pidl/lib/Parse/Pidl/Wireshark/NDR.pm\n   branches/SAMBA_4_0/source/pidl/tests/wireshark-conf.pl\n\n\nChangeset:\n\nProperty changes on: branches/SAMBA_4_0\n___________________________________________________________________\nName: bzr:merge\n...skipped...\n\nModified: branches/SAMBA_4_0/source/pidl/lib/Parse/Pidl/Wireshark/Conformance.pm\n===================================================================\n--- branches/SAMBA_4_0/source/pidl/lib/Parse/Pidl/Wireshark/Conformance.pm\t2007-04-25 15:24:01 UTC (rev 22519)\n+++ branches/SAMBA_4_0/source/pidl/lib/Parse/Pidl/Wireshark/Conformance.pm\t2007-04-25 16:10:54 UTC (rev 22520)\n@@ -124,6 +124,12 @@\n \t\twarning($pos, \"invalid BASE_TYPE `$base_type'\");\n \t}\n \n+\t$dissectorname =~ s/^\\\"(.*)\\\"$/$1/g;\n+\n+\tif (not ($dissectorname =~ /;$/)) {\n+\t\twarning($pos, \"missing semicolon\");\n+\t}\n+\n \t$data->{types}->{$name} = {\n \t\tNAME => $name,\n \t\tPOS => $pos,\n\nModified: branches/SAMBA_4_0/source/pidl/lib/Parse/Pidl/Wireshark/NDR.pm\n===================================================================\n--- branches/SAMBA_4_0/source/pidl/lib/Parse/Pidl/Wireshark/NDR.pm\t2007-04-25 15:24:01 UTC (rev 22519)\n+++ branches/SAMBA_4_0/source/pidl/lib/Parse/Pidl/Wireshark/NDR.pm\t2007-04-25 16:10:54 UTC (rev 22520)\n@@ -834,6 +834,8 @@\n {\n \tmy ($self, $type,$call,$ft,$base,$mask,$vals,$length) = @_;\n \n+\treturn if (defined($self->{conformance}->{types}->{$type}));\n+\n \t$self->{conformance}->{types}->{$type} = {\n \t\tNAME => $type,\n \t\tDISSECTOR_NAME => $call,\n\nModified: branches/SAMBA_4_0/source/pidl/tests/wireshark-conf.pl\n===================================================================\n--- branches/SAMBA_4_0/source/pidl/tests/wireshark-conf.pl\t2007-04-25 15:24:01 UTC (rev 22519)\n+++ branches/SAMBA_4_0/source/pidl/tests/wireshark-conf.pl\t2007-04-25 16:10:54 UTC (rev 22520)\n@@ -5,7 +5,7 @@\n use strict;\n use warnings;\n \n-use Test::More tests => 45;\n+use Test::More tests => 47;\n use FindBin qw($RealBin);\n use lib \"$RealBin\";\n use Util;\n@@ -61,11 +61,11 @@\n test_warnings(\"nofile:1: Unknown command `CODE'\\n\",\n \tsub { parse_conf(\"CODE END\\n\"); } );\n \n-is_deeply(parse_conf(\"TYPE winreg_String dissect_myminregstring FT_STRING BASE_DEC 0 0 2\\n\"), { types => { winreg_String => { \n+is_deeply(parse_conf(\"TYPE winreg_String dissect_myminregstring(); FT_STRING BASE_DEC 0 0 2\\n\"), { types => { winreg_String => { \n \t\t\t\tNAME => \"winreg_String\",\n \t\t\t\tPOS => { FILE => \"nofile\", LINE => 1 },\n \t\t\t\tUSED => 0,\n-\t\t\t\tDISSECTOR_NAME => \"dissect_myminregstring\",\n+\t\t\t\tDISSECTOR_NAME => \"dissect_myminregstring();\",\n \t\t\t\tFT_TYPE => \"FT_STRING\",\n \t\t\t\tBASE_TYPE => \"BASE_DEC\",\n \t\t\t\tMASK => 0,\n@@ -87,13 +87,13 @@\n \tsub { parse_conf(\"TYPE mytype dissector\\n\"); });\n \n test_warnings(\"nofile:1: dissector name does not contain `dissect'\\n\",\n-\tsub { parse_conf(\"TYPE winreg_String myminregstring FT_STRING BASE_DEC 0 0 2\\n\"); });\n+\tsub { parse_conf(\"TYPE winreg_String myminregstring; FT_STRING BASE_DEC 0 0 2\\n\"); });\n \n test_warnings(\"nofile:1: invalid FT_TYPE `BLA'\\n\",\n-\tsub { parse_conf(\"TYPE winreg_String dissect_myminregstring BLA BASE_DEC 0 0 2\\n\"); });\n+\tsub { parse_conf(\"TYPE winreg_String dissect_myminregstring; BLA BASE_DEC 0 0 2\\n\"); });\n \n test_warnings(\"nofile:1: invalid BASE_TYPE `BLOE'\\n\",\n-\tsub { parse_conf(\"TYPE winreg_String dissect_myminregstring FT_UINT32 BLOE 0 0 2\\n\"); });\n+\tsub { parse_conf(\"TYPE winreg_String dissect_myminregstring; FT_UINT32 BLOE 0 0 2\\n\"); });\n \n is_deeply(parse_conf(\"TFS hf_bla \\\"True string\\\" \\\"False String\\\"\\n\"),\n \t\t{ tfs => { hf_bla => {\n@@ -163,3 +163,38 @@\n \n test_errors(\"nofile:1: incomplete HF_FIELD command\\n\",\n \tsub { parse_conf(\"HF_FIELD hf_idx\\n\"); });\n+\n+is_deeply(parse_conf(\"TYPE winreg_String dissect_myminregstring(); FT_STRING BASE_DEC 0 0 0 2\\n\"), {\n+\t\ttypes => {\n+\t\t\twinreg_String => {\n+\t\t\t\tNAME => \"winreg_String\",\n+\t\t\t\tPOS => { FILE => \"nofile\", LINE => 1 },\n+\t\t\t\tUSED => 0,\n+\t\t\t\tDISSECTOR_NAME => \"dissect_myminregstring();\",\n+\t\t\t\tFT_TYPE => \"FT_STRING\",\n+\t\t\t\tBASE_TYPE => \"BASE_DEC\",\n+\t\t\t\tMASK => 0,\n+\t\t\t\tVALSSTRING => 0,\n+\t\t\t\tALIGNMENT => 0\n+\t\t\t}\n+\t\t}\n+\t}\n+);\n+\n+\n+is_deeply(parse_conf(\"TYPE winreg_String \\\"offset = dissect_myminregstring(\\@HF\\@);\\\" FT_STRING BASE_DEC 0 0 0 2\\n\"), {\n+\t\ttypes => {\n+\t\t\twinreg_String => {\n+\t\t\t\tNAME => \"winreg_String\",\n+\t\t\t\tPOS => { FILE => \"nofile\", LINE => 1 },\n+\t\t\t\tUSED => 0,\n+\t\t\t\tDISSECTOR_NAME => \"offset = dissect_myminregstring(\\@HF\\@);\",\n+\t\t\t\tFT_TYPE => \"FT_STRING\",\n+\t\t\t\tBASE_TYPE => \"BASE_DEC\",\n+\t\t\t\tMASK => 0,\n+\t\t\t\tVALSSTRING => 0,\n+\t\t\t\tALIGNMENT => 0\n+\t\t\t}\n+\t\t}\n+\t}\n+);\n\n"}