{"category": "ham", "to_address": "\"Alek Storm\" <alek.storm@gmail.com>", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "On Wednesday 18 April 2007 13:34, Alek Storm wrote:\n\n> Vtable methods defined in C are visible from C.\n\nOf course, otherwise nothing would be able to call them.\n\n> Therefore, it makes \n> sense that vtable methods defined in PIR are visible from PIR, at\n> least by default.\n\nThat makes no sense to me.  Are you saying that vtable methods defined in a \nspecific language should be visible to that language by default?\n\nIf that's true, then users have to *know* the implementation details of vtable \nmethods.  Is it in C code or is it in PIR code?\n\nThat's precisely what vtable methods protect against!  That's why they're in \nvtables.  That's why they're *not* visible as methods to PIR code.\n\n> Making :vtable imply :anon might be unintuitive to \n> users.  Besides that, there's still the problem of :method meaning two\n> different things with that implementation.  Basically, in a non-vtable\n> sub, there is the :anon flag to detach it from the namespace, but in a\n> vtable sub, it's detached by default, and the :method flag attaches it\n> to the namespace.  Reversal bad.  Continuity good.\n\nI can't honestly think of a case where you want :vtable AND :method on a \nvtable method, with the caveat that right now you *must* do that \nbecause :vtable doesn't cause Parrot to include the invocant in the proper \nregister on calls.\n\nFixing that makes these problems all go away.\n\n-- c\n\n"}