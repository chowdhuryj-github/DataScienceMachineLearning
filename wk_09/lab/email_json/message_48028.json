{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23501 - in branches: SAMBA_3_0/source/smbd\n\tSAMBA_3_0_26/source/smbd", "body": "Author: vlendec\nDate: 2007-06-14 15:50:47 +0000 (Thu, 14 Jun 2007)\nNew Revision: 23501\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23501\n\nLog:\nMove notify_rename before rename_internals_fsp and call it from there.\n\nModified:\n   branches/SAMBA_3_0/source/smbd/reply.c\n   branches/SAMBA_3_0_26/source/smbd/reply.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/smbd/reply.c\n===================================================================\n--- branches/SAMBA_3_0/source/smbd/reply.c\t2007-06-14 14:45:37 UTC (rev 23500)\n+++ branches/SAMBA_3_0/source/smbd/reply.c\t2007-06-14 15:50:47 UTC (rev 23501)\n@@ -4230,6 +4230,48 @@\n \treturn ((memcmp(psrc, pdst, slen) == 0) && pdst[slen] == '/');\n }\n \n+/*\n+ * Do the notify calls from a rename\n+ */\n+\n+static void notify_rename(connection_struct *conn, BOOL is_dir,\n+\t\t\t  const char *oldpath, const char *newpath)\n+{\n+\tchar *olddir, *newdir;\n+\tconst char *oldname, *newname;\n+\tuint32 mask;\n+\n+\tmask = is_dir ? FILE_NOTIFY_CHANGE_DIR_NAME\n+\t\t: FILE_NOTIFY_CHANGE_FILE_NAME;\n+\n+\tif (!parent_dirname_talloc(NULL, oldpath, &olddir, &oldname)\n+\t    || !parent_dirname_talloc(NULL, newpath, &newdir, &newname)) {\n+\t\tTALLOC_FREE(olddir);\n+\t\treturn;\n+\t}\n+\n+\tif (strcmp(olddir, newdir) == 0) {\n+\t\tnotify_fname(conn, NOTIFY_ACTION_OLD_NAME, mask, oldpath);\n+\t\tnotify_fname(conn, NOTIFY_ACTION_NEW_NAME, mask, newpath);\n+\t}\n+\telse {\n+\t\tnotify_fname(conn, NOTIFY_ACTION_REMOVED, mask, oldpath);\n+\t\tnotify_fname(conn, NOTIFY_ACTION_ADDED, mask, newpath);\n+\t}\n+\tTALLOC_FREE(olddir);\n+\tTALLOC_FREE(newdir);\n+\n+\t/* this is a strange one. w2k3 gives an additional event for\n+\t   CHANGE_ATTRIBUTES and CHANGE_CREATION on the new file when renaming\n+\t   files, but not directories */\n+\tif (!is_dir) {\n+\t\tnotify_fname(conn, NOTIFY_ACTION_MODIFIED,\n+\t\t\t     FILE_NOTIFY_CHANGE_ATTRIBUTES\n+\t\t\t     |FILE_NOTIFY_CHANGE_CREATION,\n+\t\t\t     newpath);\n+\t}\n+}\n+\n /****************************************************************************\n  Rename an open file - given an fsp.\n ****************************************************************************/\n@@ -4366,6 +4408,8 @@\n \n \t\trename_open_files(conn, lck, newname);\n \n+\t\tnotify_rename(conn, fsp->is_directory, fsp->fsp_name, newname);\n+\n \t\t/*\n \t\t * A rename acts as a new file create w.r.t. allowing an initial delete\n \t\t * on close, probably because in Windows there is a new handle to the\n@@ -4404,48 +4448,6 @@\n \treturn status;\n }\n \n-/*\n- * Do the notify calls from a rename\n- */\n-\n-static void notify_rename(connection_struct *conn, BOOL is_dir,\n-\t\t\t  const char *oldpath, const char *newpath)\n-{\n-\tchar *olddir, *newdir;\n-\tconst char *oldname, *newname;\n-\tuint32 mask;\n-\n-\tmask = is_dir ? FILE_NOTIFY_CHANGE_DIR_NAME\n-\t\t: FILE_NOTIFY_CHANGE_FILE_NAME;\n-\n-\tif (!parent_dirname_talloc(NULL, oldpath, &olddir, &oldname)\n-\t    || !parent_dirname_talloc(NULL, newpath, &newdir, &newname)) {\n-\t\tTALLOC_FREE(olddir);\n-\t\treturn;\n-\t}\n-\n-\tif (strcmp(olddir, newdir) == 0) {\n-\t\tnotify_fname(conn, NOTIFY_ACTION_OLD_NAME, mask, oldpath);\n-\t\tnotify_fname(conn, NOTIFY_ACTION_NEW_NAME, mask, newpath);\n-\t}\n-\telse {\n-\t\tnotify_fname(conn, NOTIFY_ACTION_REMOVED, mask, oldpath);\n-\t\tnotify_fname(conn, NOTIFY_ACTION_ADDED, mask, newpath);\n-\t}\n-\tTALLOC_FREE(olddir);\n-\tTALLOC_FREE(newdir);\n-\n-\t/* this is a strange one. w2k3 gives an additional event for\n-\t   CHANGE_ATTRIBUTES and CHANGE_CREATION on the new file when renaming\n-\t   files, but not directories */\n-\tif (!is_dir) {\n-\t\tnotify_fname(conn, NOTIFY_ACTION_MODIFIED,\n-\t\t\t     FILE_NOTIFY_CHANGE_ATTRIBUTES\n-\t\t\t     |FILE_NOTIFY_CHANGE_CREATION,\n-\t\t\t     newpath);\n-\t}\n-}\n-\n /****************************************************************************\n  The guts of the rename command, split out so it may be called by the NT SMB\n  code. \n\nModified: branches/SAMBA_3_0_26/source/smbd/reply.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/smbd/reply.c\t2007-06-14 14:45:37 UTC (rev 23500)\n+++ branches/SAMBA_3_0_26/source/smbd/reply.c\t2007-06-14 15:50:47 UTC (rev 23501)\n@@ -4228,6 +4228,48 @@\n \treturn ((memcmp(psrc, pdst, slen) == 0) && pdst[slen] == '/');\n }\n \n+/*\n+ * Do the notify calls from a rename\n+ */\n+\n+static void notify_rename(connection_struct *conn, BOOL is_dir,\n+\t\t\t  const char *oldpath, const char *newpath)\n+{\n+\tchar *olddir, *newdir;\n+\tconst char *oldname, *newname;\n+\tuint32 mask;\n+\n+\tmask = is_dir ? FILE_NOTIFY_CHANGE_DIR_NAME\n+\t\t: FILE_NOTIFY_CHANGE_FILE_NAME;\n+\n+\tif (!parent_dirname_talloc(NULL, oldpath, &olddir, &oldname)\n+\t    || !parent_dirname_talloc(NULL, newpath, &newdir, &newname)) {\n+\t\tTALLOC_FREE(olddir);\n+\t\treturn;\n+\t}\n+\n+\tif (strcmp(olddir, newdir) == 0) {\n+\t\tnotify_fname(conn, NOTIFY_ACTION_OLD_NAME, mask, oldpath);\n+\t\tnotify_fname(conn, NOTIFY_ACTION_NEW_NAME, mask, newpath);\n+\t}\n+\telse {\n+\t\tnotify_fname(conn, NOTIFY_ACTION_REMOVED, mask, oldpath);\n+\t\tnotify_fname(conn, NOTIFY_ACTION_ADDED, mask, newpath);\n+\t}\n+\tTALLOC_FREE(olddir);\n+\tTALLOC_FREE(newdir);\n+\n+\t/* this is a strange one. w2k3 gives an additional event for\n+\t   CHANGE_ATTRIBUTES and CHANGE_CREATION on the new file when renaming\n+\t   files, but not directories */\n+\tif (!is_dir) {\n+\t\tnotify_fname(conn, NOTIFY_ACTION_MODIFIED,\n+\t\t\t     FILE_NOTIFY_CHANGE_ATTRIBUTES\n+\t\t\t     |FILE_NOTIFY_CHANGE_CREATION,\n+\t\t\t     newpath);\n+\t}\n+}\n+\n /****************************************************************************\n  Rename an open file - given an fsp.\n ****************************************************************************/\n@@ -4364,6 +4406,8 @@\n \n \t\trename_open_files(conn, lck, newname);\n \n+\t\tnotify_rename(conn, fsp->is_directory, fsp->fsp_name, newname);\n+\n \t\t/*\n \t\t * A rename acts as a new file create w.r.t. allowing an initial delete\n \t\t * on close, probably because in Windows there is a new handle to the\n@@ -4402,48 +4446,6 @@\n \treturn status;\n }\n \n-/*\n- * Do the notify calls from a rename\n- */\n-\n-static void notify_rename(connection_struct *conn, BOOL is_dir,\n-\t\t\t  const char *oldpath, const char *newpath)\n-{\n-\tchar *olddir, *newdir;\n-\tconst char *oldname, *newname;\n-\tuint32 mask;\n-\n-\tmask = is_dir ? FILE_NOTIFY_CHANGE_DIR_NAME\n-\t\t: FILE_NOTIFY_CHANGE_FILE_NAME;\n-\n-\tif (!parent_dirname_talloc(NULL, oldpath, &olddir, &oldname)\n-\t    || !parent_dirname_talloc(NULL, newpath, &newdir, &newname)) {\n-\t\tTALLOC_FREE(olddir);\n-\t\treturn;\n-\t}\n-\n-\tif (strcmp(olddir, newdir) == 0) {\n-\t\tnotify_fname(conn, NOTIFY_ACTION_OLD_NAME, mask, oldpath);\n-\t\tnotify_fname(conn, NOTIFY_ACTION_NEW_NAME, mask, newpath);\n-\t}\n-\telse {\n-\t\tnotify_fname(conn, NOTIFY_ACTION_REMOVED, mask, oldpath);\n-\t\tnotify_fname(conn, NOTIFY_ACTION_ADDED, mask, newpath);\n-\t}\n-\tTALLOC_FREE(olddir);\n-\tTALLOC_FREE(newdir);\n-\n-\t/* this is a strange one. w2k3 gives an additional event for\n-\t   CHANGE_ATTRIBUTES and CHANGE_CREATION on the new file when renaming\n-\t   files, but not directories */\n-\tif (!is_dir) {\n-\t\tnotify_fname(conn, NOTIFY_ACTION_MODIFIED,\n-\t\t\t     FILE_NOTIFY_CHANGE_ATTRIBUTES\n-\t\t\t     |FILE_NOTIFY_CHANGE_CREATION,\n-\t\t\t     newpath);\n-\t}\n-}\n-\n /****************************************************************************\n  The guts of the rename command, split out so it may be called by the NT SMB\n  code. \n\n"}