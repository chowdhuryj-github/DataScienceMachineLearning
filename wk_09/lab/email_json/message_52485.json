{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "David Green <david.green@telus.net>", "subject": "Re: documentation standards (was \"[svn:perl6-synopsis] r14421 -\n doc/trunk/design/syn\")", "body": "On 6/21/07, Smylers wrote:\n>Mark Overmeer writes:\n>  > The boundary between freedom and anacharchy is faint.\n>Indeed.  And I'd much rather we err on the side of anarchy.\n\nI'd much rather we didn't err at all!  Just because something isn't \n\"perfect\" doesn't mean it's an error, or that it's not worth trying.\n\n>[...] and inadvertently prevent somebody in the future from doing \n>something really clever that none of us have yet thought of.\n\nHow does having some standards prevent anybody from doing anything? \nNobody's proposing Perl Documentation Police who will come and \nkneecap you if you try to do something new and better.\n\n>  > And those have a good example in standard UNIX manual-pages.  So:\n>>  there is a definitions for them, which most people have seen.\n>I am sceptical of your claim that most Cpan authors have seen any \n>official definitions of sections in Unix manual pages.\n\nHe only said they'd seen good examples.  Which, really, are a kind of \nstandard.  Even if all we did was to write down those standards \nsomewhere so that people weren't required to absorb them by osmosis, \nthat would be a good thing.\n\n>I agree.  And programming languages develop in hard-to-predict ways, \n>which is why Larry is putting lots of flexibility for things to be \n>redefined into Perl 6, so it can grow and adapt in line with future \n>developments.  It would be good if Pod can keep up.\n\nGreat, so let's have lots of rules and standards for documentation -- \nwe'll just make sure they include formal ways to accommodate future \ngrowth.  Perl 6 is full of rules (it's software! all it is is a big \nlist of rules!), but it's still wonderfully flexible.  I want lots of \ndoc-rules, but absolutely do I want them to be flexible too.\n\n>I just don't believe that _anybody_ can come up with rules that \n>won't be bettered at some point in the future.\n\nMaybe; that doesn't mean we can't start off with some \"really good\" \nrules today.  Besides, insofar as that's true today, it will be just \nas true in the future, so we'd be perpetually waiting for tomorrow's \nBetter Rules instead of actually doing something with today's Pretty \nGood Rules.\n\n>I've encountered Javadoc, and I really dislike it[*0].  The fact \n>that a standard exists does not make it a good one.\n\nNope.  But we're living in Javadoc's future, so let's learn from its \nlimitations and make P6doc better.\n\n>[...]\n>       Exceptions: none\n>       Side Effects: none\n>\n>Lots of structure and consistency, but in practical terms no \n>additional information compared to my informal doc -- and the \n>verbosity and repetition actually make it harder to spot the \n>information you want.\n\nWell, clutter like \"Blah: none\" seems to me to be more the fault of \nthe doc-formatter for not hiding lines like that.  But even though I \nnaturally tend to the lazy side myself, you have to admit there is \n*some* info gained by requiring the \"Blah: none\" -- namely that there \nreally is no blah (as opposed to, \"There might be, but I forgot to \nsay so.\").\n\nThat makes me think of a practical example, though:  Say you want to \nfind all the functions in your code that do have side-effects.  Being \nable to search for code that has an explicit \"side-effects\" tag with \na standard value of \"none\" (or undef or whatever) would be really \nuseful.\n\nActually, can't P6 tell whether code has side-effects or not?  Which \nis still a case for having structured docs; Perl could parse your \ncode and automatically insert a properly-formatted line to say so, \ncompetently situated in the right place inside the rest of the \ndocumentation you had to write manually.  (And your local \"style \nsheet\" could determine whether you see that line only when there are \nside-effects, or only when there aren't, or never, or....)\n\nThe point isn't to have *only one* way to document your code; it's to \nhave *at least one*, that is, at least one way to build the FAD \n(Fancy Advanced Documentation) tools of the future.  I envision \nthings like \"perldoc Test::BigHugeModule --sub=is\" (sure beats \nsearching the page with ctrl-F \"is\"; and a pretty modest wish, I \nthink).  Or perhaps I'm in the debugger, looking at the value of $foo \nand wondering why it ==666 and whether that's a bad thing -- I could \nhit a key and display the docs for that arg.  Or I type \"bar(\" and my \ntext editor helpfully notices that I'm using the bar() function, asks \nPerl for the specs, and pops up a handy summary of each parameter; it \ncould even see that bar() takes exactly one argument, of type \nMammal::African, and that I have exactly one such variable in scope, \n$aardvark, and be ready to auto-complete it for me.\n\nActually, that last bit about detecting types in a signature or \nvariable is already possible, because Perl has formal rules for \nspecifying such things in your code; I'd like the same advantages \nconferred on the documentation as well.\nIf you have a file with the text of the Magna Carta, a computer is \nnot going to understand it.  You can add a bit of structure, like \nheadings and numbered lists, but we're a long way from software that \ncan interpret mediaeval politics.  We do, however, have computers \nthat can interpret [and even compile =)] Perl... it has subs and \nclasses and lexicals and globals (and comments, and POD!).  What a \nshame it would be if all that structure and information that is \nalready available could not be put to good use by documentation tools.\n\n\nAnyway, in case I'm sounding too polarised I should acknowledge that \nI do agree with your underlying points about not overly restricting \nthings.  I want rules *and* flexibility, and I believe we can have \nboth, just as Perl itself is very structured (more so than P5), but \nis at the same time extremely flexible (also more so than P5!).  I do \nagree that docs should have as much freedom as code; I want them to \nhave as much structure too.\n\n\n-David\n\n"}