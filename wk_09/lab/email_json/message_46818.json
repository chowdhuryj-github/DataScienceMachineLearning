{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14418 - doc/trunk/design/syn", "body": "Author: larry\nDate: Tue Jun 12 11:33:55 2007\nNew Revision: 14418\n\nModified:\n   doc/trunk/design/syn/S02.pod\n   doc/trunk/design/syn/S03.pod\n\nLog:\nLine-initial #{ is no longer a line-end comment, but starts a \"block comment\",\n    guaranteed to catch at compile time the accidental use of \"#{...} foo();\".\n    (Old behavior would silently not execute foo().)\nAlso some more random filling-out of S3.  Work in progress.\n\n\nModified: doc/trunk/design/syn/S02.pod\n==============================================================================\n--- doc/trunk/design/syn/S02.pod\t(original)\n+++ doc/trunk/design/syn/S02.pod\tTue Jun 12 11:33:55 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 10 Aug 2004\n-  Last Modified: 8 Jun 2007\n+  Last Modified: 12 Jun 2007\n   Number: 2\n-  Version: 110\n+  Version: 111\n \n This document summarizes Apocalypse 2, which covers small-scale\n lexical items and typological issues.  (These Synopses also contain\n@@ -97,19 +97,14 @@\n \n =item *\n \n-Single-line comments work as in Perl\u00a05, starting with a C<#> character\n-and ending at the subsequent newline.  They count as whitespace\n-equivalent to newline for purposes of separation.  Unlike in Perl\u00a05,\n-C<#> may not be used as the delimiter in quoting constructs.\n-\n-=item *\n-\n-Multiline comments are provided by extending the syntax of POD\n-to nest C<=begin comment>/C<=end comment> correctly without the need\n-for C<=cut>.  The format name does not have to be C -- any\n-unrecognized format name will do to make it a comment.  (However,\n-bare C<=begin> and C<=end> probably aren't good enough, because all\n-comments in them will show up in the formatted output.)\n+POD sections may be used reliably as multiline comments in Perl 6.\n+Unlike in Perl 5, POD syntax now requires that C<=begin comment>\n+and C<=end comment> delimit a POD block correctly without the need\n+for C<=cut>.  (In fact, C<=cut> is now gone.)  The format name does\n+not have to be C -- any unrecognized format name will do\n+to make it a comment.  (However, bare C<=begin> and C<=end> probably\n+aren't good enough, because all comments in them will show up in the\n+formatted output.)\n \n We have single paragraph comments with C<=for comment> as well.\n That lets C<=for> keep its meaning as the equivalent of a C<=begin>\n@@ -121,6 +116,19 @@\n \n =item *\n \n+Except when quoted, a C<#> character always introduces a comment in\n+Perl 6.  There are three forms of comment based on C<#>.  Embedded\n+comments and block comments require the C<#> to be followed by one\n+or more opening bracketing character.\n+\n+All other uses of C<#> are interpreted as single-line comments that\n+work just as in Perl\u00a05, starting with a C<#> character and\n+ending at the subsequent newline.  They count as whitespace equivalent\n+to newline for purposes of separation.  Unlike in Perl\u00a05, C<#>\n+may not be used as the delimiter in quoting constructs.\n+\n+=item *\n+\n Embedded comments are supported as a variant on quoting syntax, introduced\n by C<#> plus any user-selected bracket characters (as defined in\n L above):\n@@ -139,12 +147,47 @@\n (There may be the I of space for some double-wide\n characters, however, such as the corner quotes above.)\n \n+An embedded comment is not allowed as the first thing on the line since it\n+would instead be parsed as a block comment, as described next.\n+\n =item *\n \n-As a special case to facilitate commenting out sections of code with\n-C, C<#> on the beginning of line is always considered a line-end\n-comment rather than an embedded comment, even if followed by a bracketing\n-character.\n+Unlike embedded comments, which are character-oriented, block comments\n+are line-oriented.  To facilitate the common practice of commenting out\n+sections of code by prefixing each line with C<#>, if the initial C<#>\n+on the line is immediately followed by one or more opening brackets,\n+it is treated as a line-oriented form of bracket quoting, and may\n+be terminated I by a line matching the corresponding close\n+bracket, which (unlike embedded comments) must also be prefixed with\n+an initial C<#>.  For example, a opening line matching\n+\n+    /^^ '#{' \\s /\n+\n+it may be terminated I by a line matching\n+\n+    /^^ '#}' \\s /\n+\n+The entire final line counts as part of the comment.  It does\n+not matter whether the intervening lines start with C<#> or not.\n+Block comments may be nested within other block comments (with\n+the same or differing brackets) but will ignore any other comment\n+mechanism including POD, so this mechanism may be used to hide POD\n+even from the pod parser, along with any associated code.  The parser\n+must report mismatched openers or closers to prevent, for example,\n+unwitting use of bare C<}> as a closer for an opening C<#{>.\n+\n+In addition to supporting the practice of commenting out code with\n+line comments, an additional motivation for this is to promote human\n+recognition of the end of the comment when the opener could be quite\n+far away, without requiring that all intervening lines use C comments.\n+Also, using the ordinary embedded comment mechanism tends to be fragile\n+in the face of strings containing bracket characters, and the probability\n+of such bracket skew increases with the length of the commented code.\n+\n+The POD parser must also recognize these comments in order to ignore\n+them.  For instance, it could treat C<#[[> and C<#]]> as a shorthand for\n+C<=begin comment_2square> and C<=end comment_2square>.  (The C<2> indicates\n+degree of repetition, as described below.)\n \n =item *\n \n\nModified: doc/trunk/design/syn/S03.pod\n==============================================================================\n--- doc/trunk/design/syn/S03.pod\t(original)\n+++ doc/trunk/design/syn/S03.pod\tTue Jun 12 11:33:55 2007\n@@ -605,7 +605,7 @@\n \n =item *\n \n-infix:, string replication\n+infix:, string/buffer replication\n \n     $string x $count\n \n@@ -647,34 +647,34 @@\n \n infix:{'+<'}, numeric shift left\n \n-    +<\n+    $integer +< $bits\n \n =item *\n \n infix:{'+>'}, numeric shift right\n \n-    +>\n+    $integer +> $bits\n \n By default, signed types do sign extension, while unsigned types do not, but\n this may be enabled or disabled with a C<:signed> or C<:!signed> adverb.\n \n =item *\n \n-infix:<~&>, string bitwise and\n+infix:<~&>, buffer bitwise and\n \n-    ~&\n+    $x ~& $y\n \n =item *\n \n infix:{'~<'}, buffer bitwise shift left\n \n-    ~<\n+    $buf ~< $bits\n \n =item *\n \n infix:{'~>'}, buffer bitwise shift right\n \n-    ~>\n+    $buf ~> $bits\n \n Sign extension is not done by default but may be enabled with a C<:signed>\n adverb.\n@@ -683,7 +683,7 @@\n \n infix:, boolean bitwise and\n \n-    ?&\n+    $x ?& $y\n \n =back\n \n@@ -699,55 +699,55 @@\n \n infix:<+>, numeric addition\n \n-    +\n+    $x + $y\n \n =item *\n \n infix:<->, numeric subtraction\n \n-    -\n+    $x - $y\n \n =item *\n \n-infix:<~>, string concatenation\n+infix:<~>, string/buffer concatenation\n \n-    ~\n+    $x ~ $y\n \n =item *\n \n infix:<+|>, numeric bitwise inclusive or\n \n-    +|\n+    $x +| $y\n \n =item *\n \n infix:<+^> numeric bitwise exclusive or\n \n-    +^\n+    $x +^ $y\n \n =item *\n \n-infix:<~|>, string bitwise inclusive or\n+infix:<~|>, buffer bitwise inclusive or\n \n-    ~|\n+    $x ~| $y\n \n =item *\n \n-infix:<~^> string bitwise exclusive or\n+infix:<~^> buffer bitwise exclusive or\n \n-    ~^\n+    $x ~^ $y\n \n =item *\n \n infix:, boolean bitwise inclusive or\n \n-    ?|\n+    $x ?| $y\n \n =item *\n \n infix: boolean bitwise exclusive or\n \n-    ?^\n+    $x ?^ $y\n \n =back\n \n@@ -759,7 +759,7 @@\n \n infix:<&>, all() operator\n \n-    &\n+    $x & $y\n \n =back\n \n@@ -771,13 +771,13 @@\n \n infix:<|>, any() operator\n \n-    |\n+    $x | $y\n \n =item *\n \n infix:<^>, one() operator\n \n-    ^\n+    $x ^ $y\n \n =back\n \n@@ -804,13 +804,13 @@\n \n infix:\n \n-    but\n+    $value but Mixin\n \n =item *\n \n infix:\n \n-    does\n+    $object does Mixin\n \n =item *\n \n@@ -891,7 +891,7 @@\n \n Smart match\n \n-    ~~\n+    $obj ~~ $pattern\n \n Perl 5's C<=~> becomes the \"smart match\" operator C<~~>, with an\n extended set of semantics.  See L for details.\n@@ -958,7 +958,7 @@\n \n infix:<&&>, short-circuit and\n \n-    &&\n+    $condition && $whentrue\n \n Returns the left argument if the left argument is false, otherwise\n evaluates and returns the right argument.  In list context forces\n@@ -975,7 +975,7 @@\n \n infix:<||>, short-circuiting inclusive-or\n \n-    ||\n+    $condition || $whenfalse\n \n Returns the left argument if it's true, otherwise evaluates and returns\n the right argument.  It is specifically allowed to use a list or array\n@@ -990,7 +990,7 @@\n \n infix:<^^>, exclusive-or\n \n-    ^^\n+    $x ^^ $y\n \n Returns the true argument if there is one (and only one).  Returns\n C if both arguments are false or both arguments are true.\n@@ -1001,7 +1001,7 @@\n \n infix:, defined-or\n \n-    //\n+    $value // $default\n \n Returns the left argument if it's defined, otherwise evaluates and\n returns the right argument.  In list context forces a false return\n@@ -1026,7 +1026,7 @@\n \n =item *\n \n-?? !!\n+Conditional operator\n \n     say \"My answer is: \", $maybe ?? \"yes\" !! \"no\";\n \n@@ -1092,7 +1092,7 @@\n \n infix:<:=>, run-time binding\n \n-    :=\n+    $signature := $capture\n \n A new form of assignment is present in Perl\u00a06, called I, used in\n place of typeglob assignment.  It is performed with the C<:=> operator.\n@@ -1127,7 +1127,7 @@\n \n infix:<::=>, compile-time binding\n \n-    ::=\n+    $signature ::= $capture\n \n This does the same as C<:=> except it does it at compile time.  (This implies\n that the expression on the right is also evaluated at compile time; it does\n@@ -1250,9 +1250,9 @@\n \n Cross hyperoperators\n \n-    X~X\n-    X*X\n-    XeqvX\n+    @files X~X '.' X~X @extensions\n+    1..10 X*X 1..10\n+    @x XeqvX @y\n     etc.\n \n See L.\n@@ -1437,7 +1437,7 @@\n \n infix:, short-circuit and\n \n-    and\n+    $condition and $whentrue\n \n Returns the left argument if the left argument is false, otherwise\n evaluates and returns the right argument.  In list context forces\n@@ -1454,7 +1454,7 @@\n \n infix:, short-circuit inclusive or\n \n-    or\n+    $condition or $whenfalse\n \n Returns the left argument if it's true, otherwise evaluates and\n returns the right argument.  In list context forces a false return\n@@ -1464,7 +1464,7 @@\n \n infix:, exclusive or\n \n-    xor\n+    $x xor $y\n \n Returns the true argument if there is one (and only one).  Returns\n C if both arguments are false or both arguments are true.\n@@ -1475,7 +1475,7 @@\n \n infix:, short-circuit defined-or\n \n-    err\n+    $value err $default\n \n Returns the left argument if it's defined, otherwise evaluates and\n returns the right argument.  In list context forces a false return\n\n"}