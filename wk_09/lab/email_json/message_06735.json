{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 114: added a tdb_chainlock_nonblock() call to tdb in\n\thttp://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 114\nrevision-id: tridge@samba.org-20070416130336-89ba103e570a8324\nparent: tridge@samba.org-20070416125258-ea015571e2818a42\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Mon 2007-04-16 23:03:36 +1000\nmessage:\n  added a tdb_chainlock_nonblock() call to tdb\nmodified:\n  lib/tdb/common/lock.c          lock.c-20070220022425-m1wibgjq7n5hahs6-7\n  lib/tdb/include/tdb.h          tdb.h-20070125040949-7t3f5zdl1q4z9hyv-101\n=== modified file 'lib/tdb/common/lock.c'\n--- a/lib/tdb/common/lock.c\t2007-04-16 12:52:58 +0000\n+++ b/lib/tdb/common/lock.c\t2007-04-16 13:03:36 +0000\n@@ -105,7 +105,7 @@\n \n \n /* lock a list in the database. list -1 is the alloc list */\n-int tdb_lock(struct tdb_context *tdb, int list, int ltype)\n+static int _tdb_lock(struct tdb_context *tdb, int list, int ltype, int op)\n {\n \tstruct tdb_lock_type *new_lck;\n \tint i;\n@@ -158,10 +158,8 @@\n \n \t/* Since fcntl locks don't nest, we do a lock for the first one,\n \t   and simply bump the count for future ones */\n-\tif (tdb->methods->tdb_brlock(tdb,FREELIST_TOP+4*list,ltype,F_SETLKW,\n+\tif (tdb->methods->tdb_brlock(tdb,FREELIST_TOP+4*list,ltype, op,\n \t\t\t\t     0, 1)) {\n-\t\tTDB_LOG((tdb, TDB_DEBUG_ERROR, \"tdb_lock failed on list %d \"\n-\t\t\t \"ltype=%d (%s)\\n\",  list, ltype, strerror(errno)));\n \t\treturn -1;\n \t}\n \n@@ -175,6 +173,25 @@\n \treturn 0;\n }\n \n+/* lock a list in the database. list -1 is the alloc list */\n+int tdb_lock(struct tdb_context *tdb, int list, int ltype)\n+{\n+\tint ret;\n+\tret = _tdb_lock(tdb, list, ltype, F_SETLKW);\n+\tif (ret) {\n+\t\tTDB_LOG((tdb, TDB_DEBUG_ERROR, \"tdb_lock failed on list %d \"\n+\t\t\t \"ltype=%d (%s)\\n\",  list, ltype, strerror(errno)));\n+\t}\n+\treturn ret;\n+}\n+\n+/* lock a list in the database. list -1 is the alloc list. non-blocking lock */\n+int tdb_lock_nonblock(struct tdb_context *tdb, int list, int ltype)\n+{\n+\treturn _tdb_lock(tdb, list, ltype, F_SETLK);\n+}\n+\n+\n /* unlock the database: returns void because it's too late for errors. */\n \t/* changed to return int it may be interesting to know there\n \t   has been an error  --simo */\n@@ -351,6 +368,14 @@\n \treturn tdb_lock(tdb, BUCKET(tdb->hash_fn(&key)), F_WRLCK);\n }\n \n+/* lock/unlock one hash chain, non-blocking. This is meant to be used\n+   to reduce contention - it cannot guarantee how many records will be\n+   locked */\n+int tdb_chainlock_nonblock(struct tdb_context *tdb, TDB_DATA key)\n+{\n+\treturn tdb_lock_nonblock(tdb, BUCKET(tdb->hash_fn(&key)), F_WRLCK);\n+}\n+\n int tdb_chainunlock(struct tdb_context *tdb, TDB_DATA key)\n {\n \treturn tdb_unlock(tdb, BUCKET(tdb->hash_fn(&key)), F_WRLCK);\n\n=== modified file 'lib/tdb/include/tdb.h'\n--- a/lib/tdb/include/tdb.h\t2007-04-16 12:52:58 +0000\n+++ b/lib/tdb/include/tdb.h\t2007-04-16 13:03:36 +0000\n@@ -134,6 +134,7 @@\n \n /* Low level locking functions: use with care */\n int tdb_chainlock(struct tdb_context *tdb, TDB_DATA key);\n+int tdb_chainlock_nonblock(struct tdb_context *tdb, TDB_DATA key);\n int tdb_chainunlock(struct tdb_context *tdb, TDB_DATA key);\n int tdb_chainlock_read(struct tdb_context *tdb, TDB_DATA key);\n int tdb_chainunlock_read(struct tdb_context *tdb, TDB_DATA key);\n\n"}