{"category": "ham", "to_address": "Steve Peters <steve@fisharerojo.org>", "from_address": "Andy Lester <andy@petdance.com>", "subject": "Re: SET_NULL", "body": "\nOn Jun 1, 2007, at 8:20 PM, Steve Peters wrote:\n\n> I can't see any need for such a macro other than for the minor  \n> obfuscation\n> that it allows.  For most of the Parrot code, I haven't SET_NULL()  \n> used, and\n> I haven't used it myself.  I'm a bit curious how much it is  \n> actually used.\n\nI know why we have it now.  It's there as a shortcut to save us from  \nhaving to set pointers to NULL if for some reason NULL is not all zero.\n\nIt's usually used like this:\n\nmemset( foo, 0, sizeof(*foo));\nSET_NULL(foo->pointer);\n\nIf we're on a platform where NULL is all zeroes, then SET_NULL()  \nevaluates to nothing, and we don't expend the extra instructions to  \nset foo->pointer to NULL, because it already is null.  But good golly  \nhow expensive must we think foo->pointer = NULL must be to have to  \noptimize it away.\n\nPLUS, it's an error if we misuse it as in this case in src/ \ninter_create.c:\n\n     if (Parrot_exec_run)\n         interp = &interpre\n     else\n         interp = mem_allocate_zeroed_typed(Interp);\n\n     SET_NULL(interp->lo_var_ptr);\n\nIf we are not using the zeroed memory branch, then we are not setting  \ninterp->lo_var_ptr like we think we are.  SET_NULL is relaly  \nSET_NULL_OR_SO_YOU_THINK_HA_HA_HA.\n\nNow I'm DEFINITELY rmeoving it.\n\nxoxo,\nAndy\n\n--\nAndy Lester => andy@petdance.com => www.petdance.com => AIM:petdance\n\n\n\n\n"}