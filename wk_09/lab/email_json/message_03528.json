{"category": "ham", "to_address": "jerry gay <jerry.gay@gmail.com>", "from_address": "Ron Blaschke <mailing-lists@rblasch.org>", "subject": "Re: [Proposed PATCH] Change libparrot Names and Locations", "body": "jerry gay wrote:\n> On 4/12/07, Ron Blaschke  wrote:\n>> Attached is a proposed patch to change the libparrot names and locations\n>> for Windows.  I have tested the changes for \"core\" Parrot on Win32\n>> Visual C++, Cygwin GCC, MinGW GCC and Ubuntu GCC.\n> \n>>\n> this looks fabulous. thank you for providing your strategy, and the\n> detailed references. however, there are some minor problems.\n\nThanks!  Any thoughts are greatly appreciated.\n\n>> Index: tools/build/ln_rel_sf.pl\n>> ===================================================================\n>> +\n>> +sub usage {\n>> +    my ($arg) = @_;\n>> +    print \"Missing argument: $arg\\n\";\n>> +    print \"usage: ln_rel_sf  \\n\";\n>> +    print \"    target  existing destination of link\\n\";\n>> +    print \"    source  link source to be created\\n\";\n>> +\n>> +    exit 1;\n>> +}\n>> +\n>> +my ($target, $source) = @ARGV;\n>> +\n>> +if (!defined $target) {\n>> +    usage('target');\n>> +}\n>> +\n>> +if (!defined $source) {\n>> +    usage('source');\n>> +}\n>> +\n>> +\n> the above logic misses the case where there are too many arguments.\n> i notice you haven't provided tests, either--that's not a reason for\n> rejection, just a note that we need to enter a CAGE ticket to write\n> some after applying this.\n\nTrue, I should really improve this.\n\n>> -        # If we are building shared, need to include dynamic \n>> libparrot.lib, otherwise\n>> +\n>> +        # If we are building shared, need to include dynamic \n>> parrot.lib, otherwise\n>>          # the static libparrot.lib.\n> this code section and this comment in particular interests me. it\n> shows me that the name of the dynamic lib is different than the static\n> lib. this reminds me of some time ago when static/dynamic builds of\n> parrot were overhauled, allowing either type to be built. i always\n> wondered if we could build *both*. do you think this patch gets us\n> closer to building both static and dynamic parrot in the same build?\n\nThe patch doesn't change that.  Previously, the static library was built \nat F, the import library at F (no \nblib/lib here!).  Now it's F and \nF, respectively.\n\n11.04.2007  20:58        19.226.530 libparrot.lib\n11.04.2007  19:43         2.685.438 parrot.lib\n\nBoth libraries get built during make, but I'm not sure if libparrot is \nusable.  Are we talking about a statically linked parrot.exe?  I can \nlook into this if you like.\n\nRon\n\n"}