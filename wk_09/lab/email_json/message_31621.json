{"category": "ham", "to_address": "mwkimpel@gmail.com", "from_address": "Barry Rowlingson <b.rowlingson@lancaster.ac.uk>", "subject": "Re: [R] help with executing instruction every i-th run of loop", "body": "Mark W Kimpel wrote:\n> I am running a very long loop and would like to save intermediate \n> results in case of a system or program crash. Here is the skeleton of \n> what my code would be:\n> \n> for (i in 1:zillion)\n\nI'm a bit worried about this line:\n\n  > 1:zillion\n  > Error: cannot allocate vector of size 4 zillion bytes\n\n  hmm, lets try on a machine with a few more zillion bytes of RAM:\n\n  > 1:zillion\n  Error: result would be too long a vector\n\n> Is there an even better way to address my need?\n\n  Looping over vectors like this involves the uneccesary creation of a \nlong vector. For anything up to a million its probably okay, but once \nyou start getting into the zillions...\n\n  You can do it with less storage by just having a while loop:\n\n  > while (i != 100 ){print(i);i=i+1}\n\n  Many modern computer languages have \"iterators\" for looping, which \nabstract all the looping functionality into an object. I started writing \nsomething for R a few years ago but never got round to finishing it. It \nlet you do this:\n\n  myLoop <- loop(N=10,step=1,start=1)\n  while(iterate(myLoop)){\n   doSomething()\n  }\n\n  The 'myLoop' object here is the iterator that controls the looping. \nYou can use it to get the iteration number and then use the  i %% 1000 \ntest everyone else has told you about by now...\n\n  Anyway, if anyone has a spare R programmer kicking around and would \nlike all my looper code, just ask...\n\nBarry\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}