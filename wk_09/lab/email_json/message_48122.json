{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "On Thu, Jun 14, 2007 at 09:20:51AM -0600, Thom Boyer wrote:\n: Compare that with the simplicity that $larry & $damian are promoting.\n\nYes, and the simplicity we're promoting here is mostly *syntactic*\nsimplicity.  It's obvious that at a semantic level, there has to be a\ncertain amount of incest between the two spheres (if indeed there are\nonly two).  From the Perl 6 perspective, information flows easily from\nthe documentation to the program via the %=FOO pod twigil, because\nthe Perl 6 parser is required to embed a pod parser specifically to\nguarantee that such values will be introspectable.\n\nGetting information to flow the other direction is more problematic\nbecause documentation is essentially passive data and must be\ninterpreted by something external (often several different somethings).\nHowever, for a given language that uses pod for documentation,\nthere can certainly be some conventions for making references to\nnearby declarations without having to repeat the entire declaration.\nSuch references could be either by name or by position.  Positional\nnotation forces you to intersperse things you might not want to.\nWhat programmer really wants to see their function signature splattered\nout over many lines, or wants the beginning of the declaration off\nthe screen before you get to the function body?  Also, positional\nnotation doesn't deal well with factoring out identical names from\nrelated entities that just want to share a chunk of documenation.\n\nSo I think a named reference is a good compromise, where the name in\nthe documentation (in some easily recognized syntactic form) refers\nto the next declaration (or set of declarations) of that same name.\nHopefully the pod either knows implicitly or has been told explicitly\nhow to parse out such declarations for insertion into the document.\n(And a positional notation could just be a degenerate case of not\nspecifying the name (or using a name of * maybe), so it finds the\nnext declaration of any name.  Maybe even some kind of wildcarding\nworks for hybrid situations.)\n\nThe syntax for such named forward references is open for bikeshedding.\n(I've intentionally not given any examples in this message to avoid\nprejudicing the matter.)\n\nLarry\n\n"}