{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: Is Perl 6 too late?", "body": "On Mon, May 14, 2007 at 10:48:34PM -0700, Garrett Cooper wrote:\n: No one mentioned that if it wasn't for sigils, many strings would be \n: increased, length-wise, to do operator concatentation. If it wasn't for \n: that then simple string insertions couldn't be used.\n\nWell, except you can interpolate in Perl 6 with bare closures, so\n\n    say \"answer = {foo}\"\n\nwouldn't be so bad.\n\n: The only thing I hate about Perl with required formatting is the silly \n: braces. If it's one line and separated by visible whitespace, why is the \n: only option available to me the\n: \n: \tstatement_1 if(statement_2);\n: \n: or\n: \n: \tstatement_1 unless(statement_2);\n: \n: syntax? Seems less readable than:\n: \n: \tif(statement_2)\n: \t\tstatement_1\n: \n: or\n: \n: \tunless(statement_2)\n: \t\tstatement_1\n\nThat has been a not-infrequent complaint about Perl from people coming\nfrom a C-ish background.  However, what we discovered with the Perl 6\ndesign was that it was not, in fact, the braces that were silly, but\nthe parentheses.  The braces consistently represent a closure in Perl 6,\neven in control constructs, which are not special-cased as in C and Perl 5.\nBut by taking that approach we can get rid of the parens that are doing\nonly syntactic work without carrying any semantic weight.  So Perl 6 ends\nup with the one-liner:\n\n    if statement_2 { statement_1 }\n\nand that's no more characters than your parentesized version.\n\nNow you might think that the curlies are still useless there, but the\nfact that it's a closure means you can capture the value of the control\ncondition if you like.  This would be rare with an if, but with other\ncontrol flow structures it's quite common.  In particular this very\ncommon construct:\n\n    for 1..100 -> $i { say $i }\n\nSince -> is just a built-in way of writing an anonymous sub with\narguments, there's no need to invent special syntax for loop variables!\n\nAnd when you say\n\n    for 1..100 { say $_ }\n\nyou're still logically calling an anonymous sub with a single parameter\ncalled $_.  I freely admit that the use of braces in C and Perl 5 is\nsilly, but the braces in Perl 6 are about as far from silly as you\ncan get.\n\n: The only legitimacy for the first set of formats would be if in fact you \n: were reading off the logic statement in a left-to-right language. But \n: then again many languages don't follow that convention (Japanese, \n: Korean, etc etc for instance).\n\nOddly, the statement modifier is borrowed directly from English.\n\n: The same opinion goes for all loops, except the\n: \n: \tdo { statement } ( { while, until } );\n: \n: variety.\n\nThat particular construct comprises several additional cans of worms.  :)\n\nLarry\n\n"}