{"category": "ham", "to_address": "Allison Randal <allison@perl.org>", "from_address": "Mark Glines <mark@glines.org>", "subject": "Re: Removing #pragma", "body": "On Tue, 12 Jun 2007 11:39:35 -0700\nAllison Randal  wrote:\n\n> jerry gay wrote:\n> > On 6/12/07, Andy Lester  wrote:\n> >>\n> >> I'm very uncomfortable with removing #pragma once from our header\n> >> files.  It is perfectly valid C89 code, and I think bowing to a\n> >> broken compiler is unhealthy precedent.\n> >>\n> > to add some context, in r18884 andy committed a patch (after my\n> > suggestion) to put C<#pragma once> in every c header file, after\n> > reading that it should speed up compilation with msvc. i consulted\n> > my copy of k&r, which states that unrecognized pragmas should be\n> > ignored, so it should have no ill effects on other platforms.\n> \n> Do we have any proof that it does speed up compilation with msvc? \n> Littering our code with \"optimizations\" for odd compilers is also an \n> unhealthy precedent.\n\nNote that some versions of gcc also support it, for instance, later\ncompilers in the 3.4.x series support it.  (At least, I see it in their\nchangelog, not sure exactly which release they added it in.)\n\nI just came up with an artificial benchmark and found that gcc-3.4.6\nruns slightly faster with #pragma once protecting a header that includes\nlots of other headers. (a chain of 200 other headers, in my test.)  By\n\"slightly\", I mean \"compare a 0.86 second average to a 0.92 second\naverage, for 10 runs each\".\n\nFor a more realistic benchmark, parrot r18883 compiles in 3m29.363s,\nparrot r18884 compiles in 3m29.190s.  So, for gcc-3.4.6 at least, I\nthink the difference might be lost in the noise.\n\nOn the other hand, will #pragma once allow us to get rid of all of\nthose ugly header guard macros?  If so, I would argue to keep it for\nmaintenance reasons, regardless of any performance benefits.\n\nMark\n\n"}