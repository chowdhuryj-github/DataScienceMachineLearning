{"category": "ham", "to_address": "\"Simon Urbanek\" <Simon.Urbanek@r-project.org>", "from_address": "\"Ramon Diaz-Uriarte\" <rdiaz02@gmail.com>", "subject": "Re: [R] Rserve and R to R communication", "body": "On 4/9/07, Simon Urbanek  wrote:\n>\n> On Apr 7, 2007, at 10:56 AM, Ramon Diaz-Uriarte wrote:\n>\n> > Dear All,\n> >\n> > The \"clients.txt\" file of the latest Rserve package, by Simon\n> > Urbanek, says, regarding its R client,\n> >\n> > \"(...) a simple R client, i.e. it allows you to connect to Rserve\n> > from R itself. It is very simple and limited,  because Rserve was\n> > not primarily meant for R-to-R communication (there are better ways\n> > to do that), but it is useful for quick interactive connection to\n> > an Rserve farm.\"\n> >\n> > Which are those better ways to do it? I am thinking about using\n> > Rserve to have an R process send jobs to a bunch of Rserves in\n> > different machines. It is like what we could do with Rmpi (or pvm),\n> > but without the MPI layer. Therefore, presumably it'd be easier to\n> > deal with network problems, machine's failures, using checkpoints,\n> > etc. (i.e., to try to get better fault tolerance).\n> >\n> > It seems that Rserve would provide the basic infrastructure for\n> > doing that and saves me from reinventing the wheel of using\n> > sockets, etc, directly from R.\n> >\n> > However, Simon's comment about better ways of R-to-R communication\n> > made me wonder if this idea really makes sense. What is the catch?\n> > Have other people tried similar approaches?\n> >\n>\n> I was commenting on direct R-to-R communication using sockets +\n> 'serialize' in R or the 'snow' package for parallel processing. The\n> latter could be useful for what you have in mind, because it includes\n> a socket-based implementation which allows you to spawn multiple\n> children (across multiple machines) and collect their results. It\n> uses regular rsh or ssh to start the jobs, so if can use that, it\n> should work for you. 'snow' also has PVM and MPI implementations, the\n> PVM one is really easy to setup (on unix) and that was what I was\n> using for parallel computing in R on a cluster.\n>\n\nI think I now understand your comments. I've used snow and Rmpi quite\na bit. But the problem with Rmpi (or, rather, MPI) is the lack of\nfault tolerance: if a node goes down, the whole MPI universe breaks,\nand thus the complete set of slaves. Setting up some kind of\nfault-tolerant scheme with Rserve seemed possible/simpler (as it does\nnot depend on the MPI layer).\n\n(Yes, maybe I should check snowFT, but it uses PVM, and I recall a\nwhile back there was a reason why we decided to go with MPI instead of\nPVM).\n\n\n> Rserve is sort of comparable, but in addition it provides the\n> spawning infrastructure due to its client/server concept. What it\n> doesn't have is the convenience functions that snow provides like\n> clusterApply etc. Thinking of it, it would be actually possible to\n> add them, although I admit that the original goal of Rserve was not\n> parallel computing :). The idea was to have one Rserve server and\n> multiple clients\n\nAha. I should have seen that. I think I understand the differences better now.\n\n> whereas in 'snow' you sort of have one client and\n> multiple servers. You could spawn multiple Rserves on multiple\n> machines, but Rserve itself doesn't provide any load-balancing out of\n> the box, so you'd have to do that yourself.\n>\n\nYes, sure. I think that should be doable, though, if I decide to try\nto go down this route.\n\n\n> I don't know if that helps... :)\n>\n\nIt does help! Thanks a lot.\n\nBest,\n\nR.\n> Cheers,\n> Simon\n>\n>\n>\n>\n\n\n-- \nRamon Diaz-Uriarte\nStatistical Computing Team\nStructural Biology and Biocomputing Programme\nSpanish National Cancer Centre (CNIO)\nhttp://ligarto.org/rdiaz\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}