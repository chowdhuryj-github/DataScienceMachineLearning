{"category": "ham", "to_address": "perl6-internals@perl.org, Allison Randal <allison@perl.org>", "from_address": "James E Keenan <jkeen@verizon.net>", "subject": "Re: Odd failure in t/postconfigure/02-revision_no_DEVELOPING.t", "body": "Allison Randal wrote:\n> To answer the questions for 03-revision.t:\n> \n> \n> Could you take a step back and explain what you're testing? At first \n> glance, I don't see why we would test the revision number. Just to be \n> sure that Parrot::Revision got some value during the configure process?\n> \n\nI.  The testing tactic:\n\nAs I understand it, there are 4 possible cases for which it must be tested.\n\n1.  You've checked out trunk -- so file 'DEVELOPING' is present in the \ntop-level of your Parrot sandbox -- but you have not yet called 'perl \nConfigure.pl' -- so Parrot::Config has not yet been created.\n\n2.  Same as (1), except that you have run Configure.pl, so \nParrot::Config now exists.\n\n3.  You've checked out a release version of Parrot.  'DEVELOPING' is not \nsupposed to be included in release versions.  You have not yet \nconfigured, so Parrot::Config has not yet been created.\n\n4.  Same as (3):  release version; no 'DEVELOPING' file -- but you have \nrun Configure.pl and Parrot::Config now exists.\n\nAmong the following tests I was trying to test each of these 4 possible \ncases:\n\nt/configure/17-revision_no_DEVELOPING.t\nt/configure/18-revision.t\nt/postconfigure/02-revision_no_DEVELOPING.t\nt/postconfigure/03-revision.t\n\n(The order in which these tests is run corresponds to Cases 3-1-4-2 \nabove.  I selected that order to get Devel::Cover to consolidate results \nproperly.)\n\n\nII.  The testing strategy:\n\nParrot::Revision is a piece of code that falls into the category of \"I \nWouldn't Have Written It This Way Myself ... But Other People Rely on It \nSo I Must Not Break It If I Attempt to Refactor It.\"\n\nIt is supposed to make available \"parrot's current and configure time \nrevision.\"  These are only available as fully qualified variables:\n\n     print $Parrot::Revision::current;\n     print $Parrot::Revision::config;\n\n$current is (apparently) intended to hold the current revision number as \ndetermined by a complicated search of your SVN or SVK file systems.  If \nyou've checked out a release version of Parrot (rather than working from \nthe repository), then presumably whatever is in your SVN or SVK systems \nis irrelevant, so $current is immediately set to 0.  If you're a Parrot \ndeveloper, your SVN and SVK systems are searched and the revision number \nis placed in $current.  Ah, but what if that search is unsuccessful? \nThen $current is set to 0.\n\nThen, whatever value has been assigned to $current is assigned to \n$config.  So, if at this point, $current is '18411', then $config's \nvalue becomes '18411' as well.  More problematically, if $config's value \nat this point is '0', then $config gets assigned a value of '0' as well.\n\nThis is why I originally felt that, in certain of the cases described \nabove, it would be appropriate to test for the equality of $current and \n$config.  But I can tell that if (a) you're working from the repository \nbut (b) the search of your SVN or SVK systems is unsuccessful and (as we \nshall soon see) (c) you have not yet run Configure.PL, you can get a \nmeaningless value of '0' for $config at this point.\n\nBut wait!  There's more!\n\nAt this point, Parrot::Revision asks, \"Have you run Configure.pl?\"  If \nthe answer is \"Yes,\" it then looks up the value of $PConfig{revision} \n(which, under the hood, is \n$Parrot::Config::Generated::PConfig{revision}).  It then assigns this \nvalue to $Parrot::Revision::config, overwriting whatever was previously \nassigned thereto.  But if you have *not* yet configured, then you are \nstuck with whatever value of $config came as a result of the preceding \ncode, whether that value is meaningful or not.\n\nClear as mud, right?\n\nMy hunch is that while Parrot's *version* number (found in top-level \nfile 'VERSION' and reported by Parrot::BuildUtils::parrot_version()) is \nimportant for building Parrot, Parrot's repository *revision* numbers \nare less important.  But *how much* less important, I cannot yet say. \nFWIW, here are locations where these $current and $config are used \n(setting aside my 4 test files above).\n\nconfig/gen/revision.pm:30:    my $revision = $Parrot::Revision::current;\nt/distro/file_metadata.t:219:    unless ( $Parrot::Revision::current or \n`svk ls .` ) {\ntools/build/revision_c.pl:46:    return ${Parrot::Revision::current};\ntools/build/revision_c.pl:51:    return ${Parrot::Revision::config};\n\nkid51\n\n"}