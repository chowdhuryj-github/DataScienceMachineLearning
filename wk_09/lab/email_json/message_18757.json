{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "abartlet@samba.org", "subject": "svn commit: samba r22557 - in branches/SAMBA_4_0/source:\n\tdsdb/samdb/ldb_modules lib/ldb/common", "body": "Author: abartlet\nDate: 2007-04-28 15:18:25 +0000 (Sat, 28 Apr 2007)\nNew Revision: 22557\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22557\n\nLog:\nSimo has long bugged me that the paths in the sam.ldb partitions were\nnot relative to the location of the sam.ldb, but instead\nlp_private_dir().\n\nThis fixes that issue.\n\nAndrew Bartlett\n\nModified:\n   branches/SAMBA_4_0/source/dsdb/samdb/ldb_modules/partition.c\n   branches/SAMBA_4_0/source/lib/ldb/common/ldb.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/dsdb/samdb/ldb_modules/partition.c\n===================================================================\n--- branches/SAMBA_4_0/source/dsdb/samdb/ldb_modules/partition.c\t2007-04-28 15:17:03 UTC (rev 22556)\n+++ branches/SAMBA_4_0/source/dsdb/samdb/ldb_modules/partition.c\t2007-04-28 15:18:25 UTC (rev 22557)\n@@ -703,6 +703,33 @@\n \treturn ldb_dn_compare(partition1->dn, partition2->dn);\n }\n \n+static const char *relative_path(struct ldb_module *module, \n+\t\t\t\t TALLOC_CTX *mem_ctx, \n+\t\t\t\t const char *name) \n+{\n+\tconst char *base_url = ldb_get_opaque(module->ldb, \"ldb_url\");\n+\tchar *path, *p, *full_name;\n+\tif (name == NULL) {\n+\t\treturn NULL;\n+\t}\n+\tif (name[0] == 0 || name[0] == '/' || strstr(name, \":/\")) {\n+\t\treturn talloc_strdup(mem_ctx, name);\n+\t}\n+\tpath = talloc_strdup(mem_ctx, base_url);\n+\tif (path == NULL) {\n+\t\treturn NULL;\n+\t}\n+\tif ( (p = strrchr(path, '/')) != NULL) {\n+\t\tp[0] = '\\0';\n+\t} else {\n+\t\ttalloc_free(path);\n+\t\treturn NULL;\n+\t}\n+\tfull_name = talloc_asprintf(mem_ctx, \"%s/%s\", path, name);\n+\ttalloc_free(path);\n+\treturn full_name;\n+}\n+\n static int partition_init(struct ldb_module *module)\n {\n \tint ret, i;\n@@ -791,7 +818,9 @@\n \t\t\treturn LDB_ERR_CONSTRAINT_VIOLATION;\n \t\t}\n \n-\t\tdata->partitions[i]->backend = private_path(data->partitions[i], p);\n+\t\tdata->partitions[i]->backend = relative_path(module, \n+\t\t\t\t\t\t\t     data->partitions[i], \n+\t\t\t\t\t\t\t     p);\n \t\tret = ldb_connect_backend(module->ldb, data->partitions[i]->backend, NULL, &data->partitions[i]->module);\n \t\tif (ret != LDB_SUCCESS) {\n \t\t\ttalloc_free(mem_ctx);\n\nModified: branches/SAMBA_4_0/source/lib/ldb/common/ldb.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/ldb/common/ldb.c\t2007-04-28 15:17:03 UTC (rev 22556)\n+++ branches/SAMBA_4_0/source/lib/ldb/common/ldb.c\t2007-04-28 15:18:25 UTC (rev 22557)\n@@ -231,12 +231,22 @@\n int ldb_connect(struct ldb_context *ldb, const char *url, unsigned int flags, const char *options[])\n {\n \tint ret;\n-\n+\tconst char *url2;\n \t/* We seem to need to do this here, or else some utilities don't get ldb backends */\n \tldb_global_init();\n \n \tldb->flags = flags;\n \n+\turl2 = talloc_strdup(ldb, url);\n+\tif (!url2) {\n+\t\tldb_oom(ldb);\n+\t\treturn LDB_ERR_OPERATIONS_ERROR;\n+\t}\n+\tret = ldb_set_opaque(ldb, \"ldb_url\", talloc_strdup(ldb, url2));\n+\tif (ret != LDB_SUCCESS) {\n+\t\treturn ret;\n+\t}\n+\n \tret = ldb_connect_backend(ldb, url, options, &ldb->modules);\n \tif (ret != LDB_SUCCESS) {\n \t\treturn ret;\n\n"}