{"category": "ham", "to_address": "Andrew Bartlett <abartlet@samba.org>", "from_address": "derrell@samba.org", "subject": "Re: svn commit: samba r22731 - in branches/SAMBA_3_0/source: . tests", "body": "Andrew Bartlett  writes:\n\n> On Mon, 2007-05-07 at 13:37 -0400, derrell@samba.org wrote:\n>> By\n>> consistently testing for and using the warnings-are-errors flag, the problem\n>> is eliminated.  During a developer build, readahead() is found to _not_ exist\n>> so the compilation works fine.  During a production build, readahead() is\n>> found to exist and the compilation works fine since it doesn't use the\n>> warnings-are-errors flag.\n>\n> This sounds like a disaster!\n>\n> We shouldn't be gaining or loosing features just because we are in a\n> developer build.  That way leads to madness, particularly if a user or\n> developer encounters a problem, then rebuilds with --enable-developer to\n> trace it down.\n\nI'm open to suggestions.  Prior to this change, I couldn't do a developer\nbuild.  Configure determined that readahead() was available, and the compile\nfailed because readahead() didn't have an external declaration.  Although the\nproblem occurred on my system in regards to readahead(), it is actually a\ngeneric issue (it could be any function that is missing an external\ndeclaration) and I fixed it in what should be a generic fashion.\n\nMaybe the correct solution is to NOT use -Werror-implicit-function-declaration\nfor the compilation if --enable-developer is specified, but rather to have to\nspecifically request it, e.g. via something like\n--enable-error-implicit-function-declaration.  That way, when one wants to\nlook for missing declarations, one can enable that feature.  When not, the\ncurrent problem goes away.\n\nIMO, it's worthwhile for developer builds to error upon missing declaration so\nI prefer the existing implementation which enables it for all developer\nbuilds.  It should not, however, be enabled at the expense of not being able\nto do a compile with a developer build.\n\nSuggestions?\n\nCheers,\n\nDerrell\n\n"}