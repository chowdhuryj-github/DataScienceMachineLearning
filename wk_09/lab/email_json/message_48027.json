{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Juerd Waalboer <juerd@convolution.nl>", "subject": "Re: POD <-> Code entanglement", "body": "Thomas Wittek skribis 2007-06-14 17:18 (+0200):\n> So maybe directives like method, sub, attribute, class etc. might be a\n> better choice regarding semantics.\n\nYes, a better choice indeed. But I would still not be happy with it,\nbecause there would still be a lot of code duplication.\n\n    method foo (:$bar = 5) { ... }\n\nI don't want to have to mention *again* that the thing is a \"method\",\nand that it is called \"foo\", that it has a \"named argument\" identified\nas \"$bar\", which defaults to 5.\n\nThis is why I (long time ago) suggested \"is documented\". Like Mark, I do\nnot really care about the actual syntax much:\n\n    method foo is documented(\"Foos its argument interactively\")\n    (\n        :$bar = 5 is documented(\"Object to be fooed\"),\n        # I'm not sure about the precedence of \"is\".\n    ) {\n        ...\n    }\n\nThe backtick is rather cute and saves a lot of typing. It's like a\ncomment (#), but ends up as *external* documentation. That's nice.\n\n> Semantics are very useful in documentation, why throw them away?\n\nWhy not have both? With normal POD as suggested by Damian, you could\nstill generate it from something else. A few macros could help ignore\nthe inline documentation.\n-- \nkorajn salutojn,\n\n  juerd waalboer:  perl hacker   \n  convolution:     ict solutions and consultancy \n"}