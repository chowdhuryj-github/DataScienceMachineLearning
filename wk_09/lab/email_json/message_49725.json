{"category": "ham", "to_address": "\"GDR!\" <gdr@go2.pl>", "from_address": "Jonathan Worthington <jonathan@jnthn.net>", "subject": "Re: Parrot in hardware", "body": "Hi,\n\nGDR! wrote:\n>   I'm new here so I'll say hello - I'm GDR!.\n>   \nWelcome! :-)\n\n>   I was looking at the Parrot project recently and I'd like to\n> implement the VM in hardware. I'm not deeply into the project,\n> however,  so I'd like to ask you if the Parrot bytecode is now stable\n> enough to begin hardware developement - I wouldn't like to end up with a chip supporting some pre-historical version of VM.\n>   \nI'm sure there will be additions and probably the odd deprecation to the \nopcodes, and there are probably some that are spec'd and not implemented \nyet (e.g. for I/O stuff - I'm not sure without checking).\n\nThat said, I think changes to the bytecode format are going to be the \nleast of your problems. Have you seen how many ops there are, for \nstarters? :-) Also, many of the opcodes do pretty complex stuff, and \nmany of them depend on what a PMC does, and you'll probably find \nyourself needing to call back into software a LOT. You certainly can't \nget things like method dispatch done in hardware, as it's up to a \nparticular class system to choose how to implement it. Even things like \nindexing into arrays falls into that boat.\n\nI'm curious what you want to achieve through working on this. Since \nyou'd be calling back into software so much, and it's highly unlikely \nyou're going to make anything that executes compiled, optimized C faster \nthan the leading CPUs of today, I'd be highly skeptical of getting any \nkind of performance gains. Especially with JIT and all that jazz.\n\nIf this is for a degree project or something (just a guess), personally \nI'd not do this. I did a (well received) project in my own degree \ninvolving Parrot, and I know others have too, so I certainly encourage \npeople to do Parrot-related projects. I think it'd be very hard to make \na success of this one. Of course, I'm always open to being proved wrong.\n\nHardware-level instructions to allow high-performance execution of \ndynamic languages could be an interesting area to explore - I don't know \nwhat's been done there already - but I don't think that trying to \nimplement Parrot in hardware is the way to go if you want to look into \nthis...you might find Parrot and other dynamic language's interpreters \nfor hints as to what might be needed though.\n\nHope this helps,\n\nJonathan\n\n"}