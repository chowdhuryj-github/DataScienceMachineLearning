{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: interpolation of function reference in a here doc", "body": "Gabriel Striewe wrote:\n> \n> I wanted to interpolate a function reference in a here doc.\n> The following works fine:\n> \n> my $hello = sub {\n>                  return \"hello world!\";\n>                 };\n> \n> printf \"hello $s\\n\", &$hello();\n> \n> But when I use a heredoc instead, it doesn't work:\n> \n> print < hello &$hello()\n> END\n> \n> At least it does not properly dereference this function\n> reference.\n> \n> What do I do wrong?\n\nFirst of all, the ampersand subroutine designation is outdated and dangerous\nand it is far better to use the indirect notation for a subroutine call:\n\n$hello->()\n\nPerl will interpolate only simple variables or array or hash elements\nor slices. However we can cheat by putting the result of the call into\nan anonymous array and then dereferencing it:\n\nprint <()]}\nEND\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}