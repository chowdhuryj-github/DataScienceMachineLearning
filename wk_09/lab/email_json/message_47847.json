{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11188: Make ldb pass the current tests. in\n\tfile:///home/jelmer/bzr.samba-old/4.0-regwrite/", "body": "At file:///home/jelmer/bzr.samba-old/4.0-regwrite/\n\n------------------------------------------------------------\nrevno: 11188\nrevision-id: jelmer@samba.org-20070612202736-meu8bltye0rberi6\nparent: jelmer@samba.org-20070612200826-54acueedast7lnmr\ncommitter: Jelmer Vernooij \nbranch nick: 4.0-regwrite\ntimestamp: Tue 2007-06-12 22:27:36 +0200\nmessage:\n  Make ldb pass the current tests.\nmodified:\n  source/lib/registry/ldb.c      svn-v2:4132@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2freg_backend_ldb.c\n  source/lib/registry/tests/hive.c hive.c-20070612151642-hsxkm8j4r69ej3px-1\n=== modified file 'source/lib/registry/ldb.c'\n--- a/source/lib/registry/ldb.c\t2007-06-12 16:54:40 +0000\n+++ b/source/lib/registry/ldb.c\t2007-06-12 20:27:36 +0000\n@@ -25,6 +25,8 @@\n #include \"db_wrap.h\"\n #include \"librpc/gen_ndr/winreg.h\"\n \n+static struct hive_operations reg_backend_ldb;\n+\n struct ldb_key_data \n {\n \tstruct hive_key key;\n@@ -34,7 +36,8 @@\n \tint subkey_count, value_count;\n };\n \n-static void reg_ldb_unpack_value(TALLOC_CTX *mem_ctx, struct ldb_message *msg, const char **name, uint32_t *type, DATA_BLOB *data)\n+static void reg_ldb_unpack_value(TALLOC_CTX *mem_ctx, struct ldb_message *msg, const char **name, \n+\t\t\t\t\t\t\t\t uint32_t *type, DATA_BLOB *data)\n {\n \tconst struct ldb_val *val;\n \t*name = talloc_strdup(mem_ctx, ldb_msg_find_attr_as_string(msg, \"value\", NULL));\n@@ -45,7 +48,8 @@\n \t{\n \tcase REG_SZ:\n \tcase REG_EXPAND_SZ:\n-\t\tdata->length = convert_string_talloc(mem_ctx, CH_UTF8, CH_UTF16, val->data, val->length, (void **)&data->data);\n+\t\tdata->length = convert_string_talloc(mem_ctx, CH_UTF8, CH_UTF16, \n+\t\t\t\t\t\t\t\t\t\t\t val->data, val->length, (void **)&data->data);\n \t\tbreak;\n \n \tcase REG_DWORD: {\n@@ -73,7 +77,8 @@\n \tswitch (type) {\n \tcase REG_SZ:\n \tcase REG_EXPAND_SZ:\n-\t\tval.length = convert_string_talloc(mem_ctx, CH_UTF16, CH_UTF8, (void *)data.data, data.length, (void **)&val.data);\n+\t\tval.length = convert_string_talloc(mem_ctx, CH_UTF16, CH_UTF8, \n+\t\t\t\t\t\t\t\t\t\t   (void *)data.data, data.length, (void **)&val.data);\n \t\tldb_msg_add_value(msg, \"data\", &val, NULL);\n \t\tbreak;\n \n@@ -130,7 +135,7 @@\n \t\treturn NULL;\n \t}\n \n-\twhile(mypath) {\n+\twhile (mypath) {\n \t\tchar *keyname;\n \n \t\tbegin = strrchr(mypath, '\\\\');\n@@ -197,7 +202,8 @@\n \treturn WERR_OK;\n }\n \n-static WERROR ldb_get_value_by_id(TALLOC_CTX *mem_ctx, const struct hive_key *k, int idx, const char **name, uint32_t *data_type, DATA_BLOB *data)\n+static WERROR ldb_get_value_by_id(TALLOC_CTX *mem_ctx, const struct hive_key *k, int idx, \n+\t\t\t\t\t\t\t\t  const char **name, uint32_t *data_type, DATA_BLOB *data)\n {\n \tstruct ldb_key_data *kd = talloc_get_type(k, struct ldb_key_data);\n \tstruct ldb_context *c = kd->ldb;\n@@ -280,6 +286,7 @@\n \tldb_set_debug_stderr(wrap);\n \n \tkd = talloc_zero(parent_ctx, struct ldb_key_data);\n+\tkd->key.ops = \u00ae_backend_ldb;\n \tkd->ldb = wrap;\n \ttalloc_set_destructor (kd, reg_close_ldb_key);\n \tkd->dn = ldb_dn_new(kd, wrap, \"hive=NONE\");\n@@ -289,8 +296,8 @@\n \treturn WERR_OK;\n }\n \n-static WERROR ldb_add_key (TALLOC_CTX *mem_ctx, struct hive_key *parent, \n-\t\t\t\t\t\t   const char *name, uint32_t access_mask, \n+static WERROR ldb_add_key (TALLOC_CTX *mem_ctx, const struct hive_key *parent, \n+\t\t\t\t\t\t   const char *name, const char *classname,\n \t\t\t\t\t\t   struct security_descriptor *sd, \n \t\t\t\t\t\t   struct hive_key **newkey)\n {\n@@ -320,7 +327,7 @@\n \treturn WERR_OK;\n }\n \n-static WERROR ldb_del_key (struct hive_key *key, const char *child)\n+static WERROR ldb_del_key (const struct hive_key *key, const char *child)\n {\n \tint ret;\n \tstruct ldb_key_data *parentkd = talloc_get_type(key, struct ldb_key_data);\n@@ -333,7 +340,9 @@\n \n \ttalloc_free(childdn);\n \n-\tif (ret < 0) {\n+\tif (ret == LDB_ERR_NO_SUCH_OBJECT) {\n+\t\treturn WERR_NOT_FOUND;\n+\t} else if (ret < 0) {\n \t\tDEBUG(1, (\"ldb_del_key: %s\\n\", ldb_errstring(parentkd->ldb)));\n \t\treturn WERR_FOOBAR;\n \t}\n@@ -390,6 +399,29 @@\n \treturn WERR_OK;\n }\n \n+static WERROR ldb_get_key_info(TALLOC_CTX *mem_ctx, \n+\t\t\t\t\t\t\t   const struct hive_key *key,\n+\t\t\t\t\t\t\t   const char **classname, \n+\t\t\t\t\t\t\t   uint32_t *num_subkeys,\n+\t\t\t\t\t\t\t   uint32_t *num_values,\n+\t\t\t\t\t\t\t   NTTIME *last_change_time)\n+{\n+\t/* FIXME */\n+\tif (classname != NULL)\n+\t\t*classname = NULL;\n+\n+\tif (num_subkeys != NULL)\n+\t\t*num_subkeys = 0;\n+\n+\tif (num_values != NULL)\n+\t\t*num_values = 0;\n+\n+\tif (last_change_time != NULL)\n+\t\t*last_change_time = 0;\n+\n+\treturn WERR_OK;\n+}\n+\n static struct hive_operations reg_backend_ldb = {\n \t.name = \"ldb\",\n \t.add_key = ldb_add_key,\n@@ -399,4 +431,5 @@\n \t.enum_key = ldb_get_subkey_by_id,\n \t.set_value = ldb_set_value,\n \t.delete_value = ldb_del_value,\n+\t.get_key_info = ldb_get_key_info,\n };\n\n=== modified file 'source/lib/registry/tests/hive.c'\n--- a/source/lib/registry/tests/hive.c\t2007-06-12 20:08:26 +0000\n+++ b/source/lib/registry/tests/hive.c\t2007-06-12 20:27:36 +0000\n@@ -91,7 +91,6 @@\n \n static bool hive_setup_dir(struct torture_context *tctx, void **data)\n {\n-\n \tstruct hive_key *key;\n \tWERROR error;\n \n@@ -106,6 +105,23 @@\n \treturn true;\n }\n \n+static bool hive_setup_ldb(struct torture_context *tctx, void **data)\n+{\n+\tstruct hive_key *key;\n+\tWERROR error;\n+\n+\terror = reg_open_ldb_file(tctx, \"bla-ldb\", NULL, NULL, &key);\n+\tif (!W_ERROR_IS_OK(error)) {\n+\t\tfprintf(stderr, \"Unable to initialize ldb hive\\n\");\n+\t\treturn false;\n+\t}\n+\n+\t*data = key;\n+\n+\treturn true;\n+\n+}\n+\n static bool test_dir_refuses_null_location(struct torture_context *tctx)\n {\n \ttorture_assert_werr_equal(tctx, WERR_INVALID_PARAM, \n@@ -127,5 +143,9 @@\n \ttcase = torture_suite_add_tcase(suite, \"dir\");\n \ttorture_tcase_set_fixture(tcase, hive_setup_dir, NULL);\n \ttcase_add_tests(tcase);\n+\n+\ttcase = torture_suite_add_tcase(suite, \"ldb\");\n+\ttorture_tcase_set_fixture(tcase, hive_setup_ldb, NULL);\n+\ttcase_add_tests(tcase);\n \treturn suite;\n }\n\n"}