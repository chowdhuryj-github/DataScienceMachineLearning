{"category": "ham", "to_address": "Ben Edwards <funkytwig@gmail.com>", "from_address": "Jeff Pang <pangj@earthlink.net>", "subject": "Re: Passing multiple mixed arguments to subs", "body": "Jeff Pang \\u5199\\u9053:\n> Ben Edwards \\u5199\\u9053:\n>> I am passing a reference to a hash ($publisher) and a array with an\n>> unknown number of elements (@files).  So the call is\n>>\n>> delete_from_publishers( $publisher, @files )\n>>\n> \n> mnnn,don't pass an original array to a subroutine at anytime.\n> Instead just pass a reference to routines.like,\n> \n> delete_from_publishers($publisher,\\@files);\n> \n> then in the subroutine,\n> \n> my $hash_ref = shift;\n> my $array_ref = shift;\n> \n> This would make things more clear.\n> \n> \n\nAlso passing a reference to a routine is different in effect from \npassing an original structure.See below,\n\n# this would change the original array's values\n$ perl -Mstrict -le 'my @x=(1,2,3);\n > testx(\\@x);\n > print \"@x\";\n > sub testx { my $re = shift; $re->[0]=111 }'\n111 2 3\n\n# but this wouldn't change original array's values\n$  perl -Mstrict -le 'my @x=(1,2,3);\n > testx(@x);\n > print \"@x\";\n > sub testx { my @x = @_;$x[0] =111 }'\n1 2 3\n\n-- \nhttp://home.arcor.de/jeffpang/\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}