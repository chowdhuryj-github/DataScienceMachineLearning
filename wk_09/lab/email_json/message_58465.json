{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23662 - in branches: SAMBA_3_0/source\n\tSAMBA_3_0/source/lib SAMBA_3_0/source/torture\n\tSAMBA_3_0_26/source SAMBA_3_0_26/source/lib\n\tSAMBA_3_0_26/source/torture", "body": "Author: vlendec\nDate: 2007-06-29 17:51:31 +0000 (Fri, 29 Jun 2007)\nNew Revision: 23662\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23662\n\nLog:\nAccording to simo, check_dos_char is needed\nAdded:\n   branches/SAMBA_3_0/source/torture/t_doschar.c\n   branches/SAMBA_3_0_26/source/torture/t_doschar.c\nModified:\n   branches/SAMBA_3_0/source/Makefile.in\n   branches/SAMBA_3_0/source/lib/charcnv.c\n   branches/SAMBA_3_0/source/lib/util_unistr.c\n   branches/SAMBA_3_0_26/source/Makefile.in\n   branches/SAMBA_3_0_26/source/lib/charcnv.c\n   branches/SAMBA_3_0_26/source/lib/util_unistr.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0/source/Makefile.in\t2007-06-29 17:40:37 UTC (rev 23661)\n+++ branches/SAMBA_3_0/source/Makefile.in\t2007-06-29 17:51:31 UTC (rev 23662)\n@@ -1735,6 +1735,8 @@\n bin/t_stringoverflow@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_stringoverflow.o\n \t$(CC) $(FLAGS) -o $@ $(DYNEXP) torture/t_stringoverflow.o -L./bin -lbigballofmud\n \n+bin/t_doschar@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_doschar.o\n+\t$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_doschar.o -L ./bin -lbigballofmud\n bin/t_push_ucs2@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_push_ucs2.o\n \t$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_push_ucs2.o -L ./bin -lbigballofmud\n \n\nModified: branches/SAMBA_3_0/source/lib/charcnv.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/charcnv.c\t2007-06-29 17:40:37 UTC (rev 23661)\n+++ branches/SAMBA_3_0/source/lib/charcnv.c\t2007-06-29 17:51:31 UTC (rev 23662)\n@@ -179,6 +179,7 @@\n \t\t * codepage changes? */\n \t\t/* XXX: Is the did_reload test too strict? */\n \t\tconv_silent = True;\n+\t\tinit_doschar_table();\n \t\tinit_valid_table();\n \t\tconv_silent = False;\n \t}\n\nModified: branches/SAMBA_3_0/source/lib/util_unistr.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/util_unistr.c\t2007-06-29 17:40:37 UTC (rev 23661)\n+++ branches/SAMBA_3_0/source/lib/util_unistr.c\t2007-06-29 17:51:31 UTC (rev 23662)\n@@ -36,6 +36,14 @@\n static BOOL valid_table_use_unmap;\n \n /**\n+ * This table says which Unicode characters are valid dos\n+ * characters.\n+ *\n+ * Each value is just a single bit.\n+ **/\n+static uint8 doschar_table[8192]; /* 65536 characters / 8 bits/byte */\n+\n+/**\n  * Destroy global objects allocated by load_case_tables()\n  **/\n void gfree_case_tables(void)\n@@ -142,6 +150,21 @@\n #endif\n }\n \n+/*\n+  see if a ucs2 character can be mapped correctly to a dos character\n+  and mapped back to the same character in ucs2\n+*/\n+\n+int check_dos_char(smb_ucs2_t c)\n+{\n+\tlazy_initialize_conv();\n+\t\n+\t/* Find the right byte, and right bit within the byte; return\n+\t * 1 or 0 */\n+\treturn (doschar_table[(c & 0xffff) / 8] & (1 << (c & 7))) != 0;\n+}\n+\n+\n static int check_dos_char_slowly(smb_ucs2_t c)\n {\n \tchar buf[10];\n@@ -159,7 +182,34 @@\n \treturn (c == c2);\n }\n \n+\n /**\n+ * Fill out doschar table the hard way, by examining each character\n+ **/\n+\n+void init_doschar_table(void)\n+{\n+\tint i, j, byteval;\n+\n+\t/* For each byte of packed table */\n+\t\n+\tfor (i = 0; i <= 0xffff; i += 8) {\n+\t\tbyteval = 0;\n+\t\tfor (j = 0; j <= 7; j++) {\n+\t\t\tsmb_ucs2_t c;\n+\n+\t\t\tc = i + j;\n+\t\t\t\n+\t\t\tif (check_dos_char_slowly(c)) {\n+\t\t\t\tbyteval |= 1 << j;\n+\t\t\t}\n+\t\t}\n+\t\tdoschar_table[i/8] = byteval;\n+\t}\n+}\n+\n+\n+/**\n  * Load the valid character map table from valid.dat or\n  * create from the configured codepage.\n  *\n@@ -207,7 +257,7 @@\n \tfor (;i<0x10000;i++) {\n \t\tsmb_ucs2_t c;\n \t\tSSVAL(&c, 0, i);\n-\t\tvalid_table[i] = check_dos_char_slowly(c);\n+\t\tvalid_table[i] = check_dos_char(c);\n \t}\n }\n \n\nCopied: branches/SAMBA_3_0/source/torture/t_doschar.c (from rev 23659, branches/SAMBA_3_0/source/torture/t_doschar.c)\n\nModified: branches/SAMBA_3_0_26/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0_26/source/Makefile.in\t2007-06-29 17:40:37 UTC (rev 23661)\n+++ branches/SAMBA_3_0_26/source/Makefile.in\t2007-06-29 17:51:31 UTC (rev 23662)\n@@ -1725,6 +1725,8 @@\n bin/t_stringoverflow@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_stringoverflow.o\n \t$(CC) $(FLAGS) -o $@ $(DYNEXP) torture/t_stringoverflow.o -L./bin -lbigballofmud\n \n+bin/t_doschar@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_doschar.o\n+\t$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_doschar.o -L ./bin -lbigballofmud\n bin/t_push_ucs2@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_push_ucs2.o\n \t$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_push_ucs2.o -L ./bin -lbigballofmud\n \n\nModified: branches/SAMBA_3_0_26/source/lib/charcnv.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/charcnv.c\t2007-06-29 17:40:37 UTC (rev 23661)\n+++ branches/SAMBA_3_0_26/source/lib/charcnv.c\t2007-06-29 17:51:31 UTC (rev 23662)\n@@ -179,6 +179,7 @@\n \t\t * codepage changes? */\n \t\t/* XXX: Is the did_reload test too strict? */\n \t\tconv_silent = True;\n+\t\tinit_doschar_table();\n \t\tinit_valid_table();\n \t\tconv_silent = False;\n \t}\n\nModified: branches/SAMBA_3_0_26/source/lib/util_unistr.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/util_unistr.c\t2007-06-29 17:40:37 UTC (rev 23661)\n+++ branches/SAMBA_3_0_26/source/lib/util_unistr.c\t2007-06-29 17:51:31 UTC (rev 23662)\n@@ -36,6 +36,14 @@\n static BOOL valid_table_use_unmap;\n \n /**\n+ * This table says which Unicode characters are valid dos\n+ * characters.\n+ *\n+ * Each value is just a single bit.\n+ **/\n+static uint8 doschar_table[8192]; /* 65536 characters / 8 bits/byte */\n+\n+/**\n  * Destroy global objects allocated by load_case_tables()\n  **/\n void gfree_case_tables(void)\n@@ -142,6 +150,21 @@\n #endif\n }\n \n+/*\n+  see if a ucs2 character can be mapped correctly to a dos character\n+  and mapped back to the same character in ucs2\n+*/\n+\n+int check_dos_char(smb_ucs2_t c)\n+{\n+\tlazy_initialize_conv();\n+\t\n+\t/* Find the right byte, and right bit within the byte; return\n+\t * 1 or 0 */\n+\treturn (doschar_table[(c & 0xffff) / 8] & (1 << (c & 7))) != 0;\n+}\n+\n+\n static int check_dos_char_slowly(smb_ucs2_t c)\n {\n \tchar buf[10];\n@@ -159,7 +182,34 @@\n \treturn (c == c2);\n }\n \n+\n /**\n+ * Fill out doschar table the hard way, by examining each character\n+ **/\n+\n+void init_doschar_table(void)\n+{\n+\tint i, j, byteval;\n+\n+\t/* For each byte of packed table */\n+\t\n+\tfor (i = 0; i <= 0xffff; i += 8) {\n+\t\tbyteval = 0;\n+\t\tfor (j = 0; j <= 7; j++) {\n+\t\t\tsmb_ucs2_t c;\n+\n+\t\t\tc = i + j;\n+\t\t\t\n+\t\t\tif (check_dos_char_slowly(c)) {\n+\t\t\t\tbyteval |= 1 << j;\n+\t\t\t}\n+\t\t}\n+\t\tdoschar_table[i/8] = byteval;\n+\t}\n+}\n+\n+\n+/**\n  * Load the valid character map table from valid.dat or\n  * create from the configured codepage.\n  *\n@@ -207,7 +257,7 @@\n \tfor (;i<0x10000;i++) {\n \t\tsmb_ucs2_t c;\n \t\tSSVAL(&c, 0, i);\n-\t\tvalid_table[i] = check_dos_char_slowly(c);\n+\t\tvalid_table[i] = check_dos_char(c);\n \t}\n }\n \n\nCopied: branches/SAMBA_3_0_26/source/torture/t_doschar.c (from rev 23659, branches/SAMBA_3_0_26/source/torture/t_doschar.c)\n\n"}