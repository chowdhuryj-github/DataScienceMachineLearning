{"category": "ham", "to_address": "Dafydd Harries <dafydd.harries@collabora.co.uk>", "from_address": "Dan Williams <dcbw@redhat.com>", "subject": "[sugar] [PATCH] telepathy-python: search XDG directories for\n\t.manager files", "body": "diff -rN -u old-telepathy-python/telepathy/client/managerregistry.py new-telepathy-python/telepathy/client/managerregistry.py\n--- old-telepathy-python/telepathy/client/managerregistry.py\t2007-04-10 12:31:10.000000000 -0400\n+++ new-telepathy-python/telepathy/client/managerregistry.py\t2007-04-10 12:31:10.000000000 -0400\n@@ -18,59 +18,7 @@\n # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n \n \"\"\"\n-The registry of managers takes the form of any number of .manager files, which\n-are searched for in /usr/share/telepathy/services or in ~/.telepathy.\n-\n-The name of a manager is the filename minus the .manager suffix\n-For example a file named gabble.manager implies that:\n-  The name of the connmgr is 'gabble'\n-  The object path is /org/freedesktop/Telepathy/ConnectionManager/gabble\n-  The bus name is org.freedesktop.Telepathy.ConnectionManager.gabble\n-\n-The object path and bus names are formed by replacing $name with the connmgr\n-name in the following templates:\n-  Object path: /org/freedesktop/Telepathy/ConnectionManager/$name\n-  Bus name: org.freedesktop.Telepathy.ConnectionManager.$name\n-\n-.manager files should contain any number of proctol support declarators\n-of the form:\n-\n-[Protocol (name of supported protocol)]\n-param-(parameter name) = signature flags\n-default-(paramater name) = value\n-\n-Where:\n-'signature' is a single complete DBus type signature.\n-'flags' is a space-delimited list of flags; valid flags are 'required' and\n-'register'.\n-default-(paramater name) sets the default value for that parameter. e.g.\n-default-port=522 sets te default value of the 'port' parameter to 522.\n- \n-All connection managers should register as activatable dbus services. They\n-should also close themselves down after an idle time with no open connections.\n-\n-Clients should use the Protocol sections to query the user for necessary\n-information.\n-\n-Telepathy defines a common subset of paramter names to facilitate GUI design.\n-\n-s:server - a fully qualified domain name or numeric IPv4 or IPv6 address.\n-Using the fully-qualified domain name form is RECOMMENDED whenever possible.\n-If this paramter is specified and the user id for that service also specifies\n-a server, this parameter should override that in the user id.\n-\n-q:port - a TCP or UDP port number. If this paramter is specified and the user\n-id for that service also specifies a port, this parameter should override that\n-in the user id.\n-\n-s:password - A password associated with the user.\n-\n-s:proxy-server - a uri for a proxyserver to use for this connection\n-\n-b:require-encryption - require encryption for this connection. A connection\n-should fail if require-encryption is set and encryption is not possible.\n-\n-UIs should display any default values, but should *not* store them.\n+Loads .manager files according to http://telepathy.freedesktop.org/wiki/FileFormats\n \"\"\"\n \n import ConfigParser, os\n@@ -81,6 +29,16 @@\n \n _dbus_py_version = getattr(dbus, 'version', (0,0,0))\n \n+def _convert_pathlist(pathlist):\n+    dirlist = pathlist.split(\":\")\n+    # Reverse so least-important is first\n+    dirlist.reverse()\n+    dirs = []\n+    for path in dirlist:\n+        if len(path):\n+            path = os.path.abspath(os.path.expanduser(path))\n+            dirs.append(os.path.join(path, \"telepathy\", \"managers\"))\n+    return dirs\n \n class ManagerRegistry:\n     def __init__(self):\n@@ -116,11 +74,24 @@\n         set to the name of the erronous file.\n         \"\"\"\n \n-        all_paths = (\n-            '/usr/share/telepathy/managers/',\n-            '/usr/local/share/telepathy/managers/',\n-            os.path.expanduser('~/.telepathy'),\n-            )\n+        # Later items in the list are _more_ important\n+        all_paths = []\n+        if os.environ.has_key(\"XDG_DATA_DIRS\"):\n+            all_paths += _convert_pathlist(os.environ[\"XDG_DATA_DIRS\"])\n+        else:\n+            all_paths.append(os.path.join(\"usr\", \"share\", \"telepathy\", \\\n+                \"managers\"))\n+            all_paths.append(os.path.join(\"usr\", \"local\", \"share\", \\\n+                \"telepathy\", \"managers\"))\n+\n+        home = os.path.expanduser(\"~\")\n+        if os.environ.has_key(\"XDG_DATA_HOME\"):\n+            all_paths += _convert_pathlist(os.environ[\"XDG_DATA_HOME\"])\n+        else:\n+            all_paths.append(os.path.join(home, \".local\", \"share\", \\\n+                \"telepathy\", \"managers\"))\n+\n+        all_paths.append(os.path.join(home, \".telepathy\"))\n \n         for path in all_paths:\n             if os.path.exists(path):\n\n\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}