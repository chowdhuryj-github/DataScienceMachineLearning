{"category": "ham", "to_address": "Perl6 Internals <perl6-internals@perl.org>", "from_address": "Andy Spieherty <spiehera@lafayette.edu>", "subject": "[PATCH] Add a few clarifying comments about res_lea.c", "body": "This patch adds a few clarifications to comments.  And I'm afraid this is \nhow I'll have to leave it for now.\n\ndiff -r -u parrot-current/include/parrot/pobj.h parrot-andy/include/parrot/pobj.h\n--- parrot-current/include/parrot/pobj.h\t2007-05-13 19:15:14.000000000 -0400\n+++ parrot-andy/include/parrot/pobj.h\t2007-05-14 08:57:38.000000000 -0400\n@@ -75,14 +75,14 @@\n is also suitably aligned for any use.  If, for example, malloc() returns\n objects aligned on 8-byte boundaries, and obj->bufstart is also aligned\n on 8-byte boundaries, then there should be 4 bytes of padding.  It is\n-handled differently in the two files resources.c and res_lea.c.  (I have\n-not yet figured out how the 'possible padding' is handled in resources.c.\n---A.D.  2007-05-11.)\n+handled differently in the two files resources.c and res_lea.c.\n+In resources.c, the buffer is carved out of a larger memory pool.  In\n+res_lea.c, each buffer is individually allocated.\n \n                      src/gc/resources.c:       src/gc/res_lea.c:\n \n ptr from malloc ->  +------------------+      +------------------+\n-                    | possible padding |      | INTVAL ref_count |\n+                      [other blocks?]         | INTVAL ref_count |\n                     | INTVAL ref_count |      | possible padding |\n obj->bufstart   ->  +------------------+      +------------------+\n                     |     data         |      |      data        |\ndiff -r -u parrot-current/src/gc/res_lea.c parrot-andy/src/gc/res_lea.c\n--- parrot-current/src/gc/res_lea.c\t2007-05-12 19:15:12.000000000 -0400\n+++ parrot-andy/src/gc/res_lea.c\t2007-05-14 09:03:17.000000000 -0400\n@@ -15,6 +15,12 @@\n The \"lea\" in the file name refers to Spie Lea, who wrote malloc\n implementation found in F.\n \n+As of May 14, 2007, it doesn't work (and hasn't worked for some\n+time.)  The problem appears to be related to strings, but actually\n+could be somewhere else.  This allocator does not support any of\n+Parrot's Copy-on-Write schemes.  Nor does the string allocator\n+handle \"external\" strings.\n+\n =head2 Functions\n \n =over 4\n\n-- \n    Andy Spieherty\t\tspiehera@lafayette.edu\n\n"}