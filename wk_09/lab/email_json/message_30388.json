{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "\"Jameson C. Burt\" <jameson@coost.com>", "subject": "Re: qx() won't accept over (about) 128,000 characters", "body": "On Tue, May 15, 2007 at 09:36:12AM -0700, John W. Krahn wrote:\n> Jameson C. Burt wrote:\n> > Within Perl, I construct programs in other programming languages \n> > and submit the result to a Unix (Linux or IBM AIX) operating system\n> > with 2GB to 8GB memory.\n> > I submit such a program to the operating system using Perl's\n> >   qx()\n> > Unfortunately, giving qx() over 128,420 characters (about and can vary\n> > by a few characters) then returns nothing.\n> > Yet, giving qx() 128,000 characters gets properly executed by the\n> > operating system.\n> > \n> > Following is an example, \n> > expedited from my original test that actually had 1270 lines.\n> > Only with fewer lines (eg, replace 1370 by 1269) will this program output\n> >    \"Last line of large program!\"\n> > Here's the program that constructs \n> > and tries giving qx() over 128,000 characters of code:\n> >    #!/usr/bin/perl -w\n> >    $shorty = ' ' x 99   .   '#'   .   \"\\n\" ;  #100/101 characters\n> >    #Repeat 1370 lines of $shorty into @manylines:\n> >    # foreach $i (0..1269)  {$manylines[$i] = $shorty} ;  #Succeeds\n> >    foreach $i (0..1370)    {$manylines[$i] = $shorty} ;\n> >    $manylines[$#manylines + 1] =  'echo \"Last Line of large program!\"' ;\n> \n> You can simplify that to:\n> \n> my @manylines = ( ( ' ' x 99 . \"#\\n\" ) x 1371, 'echo \"Last Line of large\n> program!\"' );\n> \n> \n> >    print qx(@manylines) ;\n> >    # system(qq(@manylines)) ;   #Same problem.\n> \n> Your line of code is a comment (The # character starts a comment in shell)\n> which is why nothing is returned:\n> \n> $ perl -e'\n> my @manylines = ( ( \" \" x 99 . \"#\\n\" ) x 1371, q[echo \"Last Line of large\n> program!\"] );\n> print qx[@manylines];\n> ' | wc\n>       0       0       0\n> $ perl -e'\n> my @manylines = ( ( \" \" x 99 . \"\\n\" ) x 1371, q[echo \"Last Line of large\n> program!\"] );\n> print qx[@manylines];\n> ' | wc\n>       1       5      28\n> $ perl -e'\n> my @manylines = ( ( \" \" x 99 . \"\\n\" ) x 1371, q[echo \"Last Line of large\n> program!\"] );\n> print qx[@manylines];\n> '\n> Last Line of large program!\n> \n> \n> > However, appending the following lines to the above code\n> > will properly execute those 1370  lines.  \n> >    open(OUTFILE, \">/tmp/zz.out\") ;\n> >    print(OUTFILE  @manylines) ;\n> >    close(OUTFILE) ;\n> >    system(\"bash /tmp/zz.out\") ;\n> > While I can run this latter code, it both adds more code \n> > and adds a file to the operating system's filesystem.\n> > \n> > Can qx() accept large numbers of characters,\n> > perhaps using some simple technique?\n> \n> When it is saved as a file the shell (bash) ignores the comment lines.\n\nYour simplified code makes testing much easier -- thank you.\n\nI used \"#\" to increase the number of\ncharacters that qx() feeds into the Unix shell\n(my actual 1300 line SAS program program constructed by Perl \nand fed into Unix with qx() does not enhance the underlying\nlarge-number-of-characters problem).\nWith just blank lines (no \"#\"),  I suspect either Perl or the Unix shell drops those lines,\nso there is no large-number-of-characters problem.\n\nLet me drop each line's \"#\", but instead begin each line with \":\" \n(Unix ignores such lines) followed by 99 more characters of \"A\",\n\n$ perl -e'\nmy @manylines = ( ( \": \" . \"A\" x 99 . \"\\n\" ) x 1257, q[echo \"Last\nLine of large program!\"] );\nprint qx[@manylines];\n'  |wc\n      0       0       0\n\nyet using 1256 or fewer such lines,\n\n$ perl -e'\nmy @manylines = ( ( \": \" . \"A\" x 99 . \"\\n\" ) x 1256, q[echo \"Last\nLine of large program!\"] );\nprint qx[@manylines];\n'  |wc\n      2       5      28\n\nSo, after a certain number of characters (101*1257 = 126957 here),\nqx() executions give no response.\n\nLetting my imagination loose,\nI ponder that  qx()  could have a fixed buffer size, which cannot be exceeded;\nor Unix takes in a block of size 2^16 but not of size 2^17.\nBut I am probably only cluttering my mind with possibilities,\nwhen the problem is a simple looking  large-number-of-characters problem.\nAny ideas?\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}