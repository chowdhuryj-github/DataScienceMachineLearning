{"category": "ham", "to_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Ram disk filling up - File::COPY", "body": "On 6/7/07, Tom Phoenix  wrote:\n> On 6/7/07, Perl WANNABE  wrote:\n>\n> > I'm trying to copy a couple of DBM files from a disk to a RAM disk,\n> > one of the files is 500M the other quite small.\n>\n> Some DBM implementations, if the filesystem supports doing so, will\n> create files with \"holes\" in them; that is, the file may have\n> arbitrarily long gaps in which there's no data. You can even have a\n> file that seems larger than the disk it's stored upon.\n>\n> > Whether I use File::Copy or I roll my own copy by reading and writing the\n> > file the filesystem fills up... If I use system (cp from to) I don't have a\n> > problem.\n>\n> It sounds as if your cp knows how to handle the holes, but File::Copy\n> isn't so smart. It may be worth filing a bug report over this; even if\n> File::Copy isn't fixed, its documentation should mention this.\n>\n> Cheers!\n>\n> --Tom Phoenix\n> Stonehenge Perl Training\n\n#create a sparse file\nperl -e '\n    open my $f, \">\", \"sparse.txt\";\n    seek $f, 1024*1024 - 3, 0;\n    print $f \"foo\";\n    close $f\n'\n\n#copy it with File::Copy\nperl -MFile::Copy -e 'copy(\"sparse.txt\", \"sparse.fc\")'\n\n#copy it with cp\ncp sparse.txt sparse.cp\n\n#copy it with SparseCopy*\nsparsecopy.pl sparse.txt sparse.scp\n\n#look at the sizes\ndu -sh sparse.*\n8.0K    sparse.cp\n1.1M    sparse.fc\n8.0K    sparse.scp\n8.0K    sparse.txt\n\n#make sure they are all have the same contents\nmd5sum sparse.*\n8d7e9e80e3724b84decdfc7f9b772b41  sparse.cp\n8d7e9e80e3724b84decdfc7f9b772b41  sparse.fc\n8d7e9e80e3724b84decdfc7f9b772b41  sparse.scp\n8d7e9e80e3724b84decdfc7f9b772b41  sparse.txt\n\n#rejoice\n\n* Here is the program**\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nsparsecopy(@ARGV);\n\nsub sparsecopy {\n        my ($orig, $new) = @_;\n\n        open my $o, '<', $orig\n                or die \"could not open $orig: $!\";\n\n        open my $n, '>', $new\n                or die \"could not open $new: $!\";\n\n        select $o;\n\n        local $/ = \\4096;\n\n        while (defined (my $block = <$o>)) {\n                for my $chunk (split /(\\0+)/, $block) {\n                        if ($chunk =~ /\\0/) {\n                                seek $n, length($chunk), 1;\n                                next;\n                        }\n                        print $n $chunk;\n                }\n        }\n}\n\n** patents and trademark pending***\n*** yeah, right\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}