{"category": "ham", "to_address": "James Peach <jpeach@samba.org>", "from_address": "tridge@samba.org", "subject": "Re: getting rid of mkproto.sh from Samba3", "body": "James,\n\n > If I have a decent header file, I can see the full interface in a  \n > single screen, along with comments, macros and typedefs. I don't think  \n > the argument about the extra typing involved in changing headers by  \n > hand is very strong, since the code needs to be read and understood  \n > thousands more times than it needs to be written.\n\nIt is not the extra typing, it's the mistakes. Before we had auto\nprototypes in Samba the following mistakes were common:\n\n *) leaving a prototype in a header for a function that has been\n  removed. I don't know of any tool that will find/remove those.\n\n *) getting details in the prototype wrong, especially the varargs\n  functions with printf arguments. \n\n *) when the arguments to a function change, and the prototype isn't\n  updated. This is especially insidious when the new and old arguments\n  are type compatible, but change their meaning, so the old prototype\n  is completely misleading (ie. is still takes an int as the 3rd\n  argument, but now its a set of flags, not a counter)\n\n *) once you start breaking up your includes out of a single\n  includes.h, then you risk getting the prototype completely wrong if\n  the source file of the function doesn't include the prototype\n  header. The compiler won't complain.\n\n *) programmers add nice comments to the prototype header, which is in\n  a completely different file to the code. Those comments will degrade\n  over time as the code changes and the comment is not upgraded, so\n  those nice docs that you do this month will become completely wrong\n  by next year, and the person updating the function will not notice,\n  as the prototype is not on the same screen as the code they are\n  changing.\n\nThere is a very basic principle in programming that you should only\nhave a piece of information in one place in a program. If you have it\nin two places then the two can become inconsistent. Auto generating\nprototypes is an application of that principle.\n\nIf you want docs available when you haven't run make yet, then\ngenerate them using funnelweb or similar tools. \n\nIf you want to make finding functions easy, then break up the code\ninto modules, and use a module prefix for each module so all functions\nin that module have an obvious xxxx_ at the start of the name. That is\nthe root cause of the name_to_fqdn(), global_myname(),\nget_mydnsfullname() mess.\n\nYou should also be running findstatic.pl regularly to find unused\nfunctions and functions that can be made static in a C file. That\nmeans you won't have unused and redundent functions sitting around for\npeople to use. \n\nCheers, Tridge\n\n"}