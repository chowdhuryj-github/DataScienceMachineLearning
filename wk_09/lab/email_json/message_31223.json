{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14391 - doc/trunk/design/syn", "body": "Author: larry\nDate: Wed May 16 12:36:05 2007\nNew Revision: 14391\n\nModified:\n   doc/trunk/design/syn/S02.pod\n   doc/trunk/design/syn/S05.pod\n   doc/trunk/design/syn/S12.pod\n\nLog:\nNow allow \"returns\" as synonym for \"of\" (TheDamian++)\nReconcile S05's view of Array smartmatch with S03's view\n\n\nModified: doc/trunk/design/syn/S02.pod\n==============================================================================\n--- doc/trunk/design/syn/S02.pod\t(original)\n+++ doc/trunk/design/syn/S02.pod\tWed May 16 12:36:05 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 10 Aug 2004\n-  Last Modified: 27 Apr 2007\n+  Last Modified: 16 May 2007\n   Number: 2\n-  Version: 102\n+  Version: 103\n \n This document summarizes Apocalypse 2, which covers small-scale\n lexical items and typological issues.  (These Synopses also contain\n@@ -813,6 +813,7 @@\n container has an implementation type, including subroutines and modules.)\n The value type is stored as its C property, while the implementation\n type of the container is just the object type of the container itself.\n+The word C is allowed as an alias for C.\n \n The value type specifies what kinds of values may be stored in the\n variable. A value type is given as a prefix or with the C keyword:\n@@ -833,6 +834,7 @@\n is declared, it is assumed to be the same as the C type, if declared.\n \n     sub get_pet() of Animal {...}       # of type, obviously\n+    sub get_pet() returns Animal {...}  # of type\n     our Animal sub get_pet() {...}      # of type\n     sub get_pet() as Animal {...}       # as type\n \n@@ -906,10 +908,12 @@\n subroutine pays attention to C, and essentially coerces the return\n value to the indicated type, just as if you'd coerced each return expression.\n \n-You may also specify the C type as the C trait:\n+You may also specify the C type as the C trait (with C\n+allowed as a synonym):\n \n     my Hash of Array of Recipe sub get_book ($key) {...}\n     my sub get_book ($key) of Hash of Array of Recipe {...}\n+    my sub get_book ($key) returns Hash of Array of Recipe {...}\n \n =head2 Polymorphic types\n \n\nModified: doc/trunk/design/syn/S05.pod\n==============================================================================\n--- doc/trunk/design/syn/S05.pod\t(original)\n+++ doc/trunk/design/syn/S05.pod\tWed May 16 12:36:05 2007\n@@ -14,9 +14,9 @@\n    Maintainer: Patrick Michaud  and\n                Larry Wall \n    Date: 24 Jun 2002\n-   Last Modified: 27 Apr 2007\n+   Last Modified: 16 May 2007\n    Number: 5\n-   Version: 58\n+   Version: 59\n \n This document summarizes Apocalypse 5, which is about the new regex\n syntax.  We now try to call them I rather than \"regular\n@@ -3426,9 +3426,11 @@\n =item *\n \n Any non-compact array of mixed strings or objects can be matched\n-against a regex:\n+against a regex as long as you present them as an object with the C\n+interface, which does not preclude the object having other interfaces\n+such as C.  Normally you'd use C to generate such an object:\n \n-    @array ~~ / foo <,> bar * /;\n+    @array.cat ~~ / foo <,> bar * /;\n \n The special C<< <,> >> subrule matches the boundary between elements.\n The C<<  >> assertion matches any individual array element.\n@@ -3437,9 +3439,9 @@\n If the array elements are strings, they are concatenated virtually into\n a single logical string.  If the array elements are tokens or other\n such objects, the objects must provide appropriate methods for the\n-kinds of subrules to match against.  It is an assertion error to match\n+kinds of subrules to match against.  It is an assertion failure to match\n a string-matching assertion against an object that doesn't provide\n-a string view.  However, pure object lists can be parsed as long as\n+a stringified view.  However, pure object lists can be parsed as long as\n the match (including any subrules) restricts itself to assertions like:\n \n      <.isa(Dog)>\n@@ -3448,7 +3450,9 @@\n \n It is permissible to mix objects and strings in an array as long as they're\n in different elements.  You may not embed objects in strings, however.\n-Any object may, of course, pretend to be a string element if it likes.\n+Any object may, of course, pretend to be a string element if it likes,\n+and so a C object may be used as a substring with the same restrictions\n+as in the main string.\n \n Please be aware that the warnings on C<.from> and C<.to> returning\n opaque objects goes double for matching against an array, where a\n@@ -3456,13 +3460,21 @@\n (potentially) a position within a string of that array.  Do not\n expect to do math with such values.  Nor should you expect to be\n able to extract a substr that crosses element boundaries.\n+[Conjecture: Or should you?]\n \n =item *\n \n-To match against each element of an array, use a hyper operator:\n+To match against every element of an array, use a hyper operator:\n \n      @array\u00bb.match($regex);\n \n+=item *\n+\n+To match against any element of the array, it suffices to use ordinary\n+smartmatching:\n+\n+    @array ~~ $regex;\n+\n =back\n \n =for vim:set expandtab sw=4:\n\nModified: doc/trunk/design/syn/S12.pod\n==============================================================================\n--- doc/trunk/design/syn/S12.pod\t(original)\n+++ doc/trunk/design/syn/S12.pod\tWed May 16 12:36:05 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 27 Oct 2004\n-  Last Modified: 28 Apr 2007\n+  Last Modified: 14 May 2007\n   Number: 12\n-  Version: 49\n+  Version: 50\n \n =head1 Overview\n \n\n"}