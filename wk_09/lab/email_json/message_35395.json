{"category": "ham", "to_address": "sugar@laptop.org", "from_address": "Simon McVittie <simon.mcvittie@collabora.co.uk>", "subject": "[sugar] [PATCH] services/presence/server_plugin: implement\n\t_new_channel_cb asynchronously", "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n- ---\n services/presence/server_plugin.py |   56 +++++++++++++++++++++++++++---------\n 1 files changed, 42 insertions(+), 14 deletions(-)\n\ndiff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py\nindex 49280e3..2871df8 100644\n- --- a/services/presence/server_plugin.py\n+++ b/services/presence/server_plugin.py\n@@ -905,24 +905,52 @@ class ServerPlugin(gobject.GObject):\n         _logger.debug(\"Handle %s: current activity now %s\" % (handle, activity))\n         self._buddy_properties_changed_cb(handle, prop)\n \n- -    def _new_channel_cb(self, object_path, channel_type, handle_type, handle, suppress_handler):\n+    def _new_channel_cb(self, object_path, channel_type, handle_type, handle,\n+                        suppress_handler):\n         \"\"\"Handle creation of a new channel\n         \"\"\"\n- -        if handle_type == CONNECTION_HANDLE_TYPE_ROOM and channel_type == CHANNEL_TYPE_TEXT:\n- -            channel = Channel(self._conn._dbus_object._named_service, object_path)\n+        if (handle_type == CONNECTION_HANDLE_TYPE_ROOM and\n+            channel_type == CHANNEL_TYPE_TEXT):\n+            def ready(channel):\n \n- -            # hack\n- -            channel._valid_interfaces.add(CHANNEL_INTERFACE_GROUP)\n- -\n- -            current, local_pending, remote_pending = channel[CHANNEL_INTERFACE_GROUP].GetAllMembers()\n- -            \n- -            if local_pending:\n- -                for act_id, act_handle in self._activities.items():\n+                for act_id, act_handle in self._activities.iteritems():\n                     if handle == act_handle:\n- -                        self.emit(\"activity-invitation\", act_id)\n- -\n- -        elif handle_type == CONNECTION_HANDLE_TYPE_CONTACT and \\\n- -            channel_type in [CHANNEL_TYPE_TEXT, CHANNEL_TYPE_STREAMED_MEDIA]:\n+                        break\n+                    else:\n+                        return\n+\n+                def members_changed(message, added, removed, local_pending,\n+                                    remote_pending, actor, reason):\n+                    # FIXME: if contacts were added, who don't have this\n+                    # activity in their PEP node for whatever reason, then\n+                    # emit buddy-activities-changed for them (otherwise they\n+                    # could be in an activity while pretending they weren't,\n+                    # which would be crazy)\n+                    pass\n+\n+                def got_all_members(current, local_pending, remote_pending):\n+                    if local_pending:\n+                        for act_id, act_handle in self._activities.iteritems():\n+                            if handle == act_handle:\n+                                self.emit('activity-invitation', act_id)\n+                def got_all_members_err(e):\n+                    logger.debug('Unable to get channel members for %s:',\n+                                 object_path, exc_info=1)\n+\n+                # hook the MembersChanged signal so we get told when people\n+                # join/leave\n+                group = channel[CHANNEL_INTERFACE_GROUP]\n+                group.connect_to_signal('MembersChanged', members_changed)\n+                group.GetAllMembers(reply_handler=got_all_members,\n+                                    error_handler=got_all_members_err)\n+\n+            # we throw away the channel as soon as ready() finishes\n+            Channel(self._conn.service_name, object_path,\n+                    ready_handler=ready)\n+\n+        elif (handle_type == CONNECTION_HANDLE_TYPE_CONTACT and\n+              channel_type in (CHANNEL_TYPE_TEXT,\n+                               CHANNEL_TYPE_STREAMED_MEDIA)):\n             self.emit(\"private-invitation\", object_path)\n \n     def update_activity_properties(self, act_id):\n- -- \n1.5.2-rc3.GIT\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.6 (GNU/Linux)\nComment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net\n\niD8DBQFGVXq3WSc8zVUw7HYRAuSGAKC2exySPjDM1VQ+3g6/2LIsvCrPigCgvGWs\nnCJ3O+BD29et0Rb5vaiMRko=\n=kx/X\n-----END PGP SIGNATURE-----\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}