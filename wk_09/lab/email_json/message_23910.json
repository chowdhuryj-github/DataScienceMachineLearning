{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "pancake <pancake@youterm.com>", "subject": "svn version parrot segfault", "body": "I have found a way to segfault parrot. (I know that the following code is incorrect):\n\npancake@~/prg/parrot$ cat hello.pasm \nmain:\n        set I0, 3\n        set I1, 2\n        get_results \"(0)\", I0\n        set_args \"(0,0)\", P0, I1\nfakesub:\n        get_params \"(0,0)\", I0, I1\n        add I0, I0, I1\n        set_returns \"(0)\", I0\n        returncc\npancake@~/prg/parrot$ parrot hello.pasm \nSegmentation fault\n\nThe segfault can be avoided by changing:\n        set_args \"(0,0)\", P0, I1\n for\n        set_args \"(0,0)\", I0, I1\n\nIt only happens with 'P', not fot 'S' or 'I'. ://\n\n\nI have been able to use subroutines in .pir and it works,\nbut there is any subroutine example for pasm?\n\n-------------------------------------\n.sub main :main\n        set I0, 3\n        set I1, 2\n        get_results \"(0)\", I0\n        set_args \"(0,0)\", I0, I1\n        find_global P5, \"foo\"\n        invokecc P5\n        print I0\n        print \"\\n\"\n.end\n\n.sub foo\n        get_params \"(0,0)\", I0, I1\n        print I0\n        print \" + \"\n        print I1\n        print \" = \"\n        add I0, I0, I1\n        set_returns \"(0)\", I0\n        returncc\n.end\n----------------------------------------\n\nThanks\n\n  --pancake\n\n"}