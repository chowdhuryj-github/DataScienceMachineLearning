{"category": "ham", "to_address": "jiho <jo.irisson@gmail.com>", "from_address": "\"Gabor Grothendieck\" <ggrothendieck@gmail.com>", "subject": "Re: [R] lapply not reading arguments from the correct environment", "body": "On 5/18/07, jiho  wrote:\n> On 2007-May-18  , at 18:21 , Gabor Grothendieck wrote:\n> > In particular, we can use \"[\" directly instead of subset.  This is the\n> > same as your function except for the line marked ### :\n> >\n> > myfun2 <- function() {\n> >       foo = data.frame(1:10,10:1)\n> >       foos = list(foo)\n> >       fooCollumn=2\n> >       cFoo = lapply(foos, \"[\", fooCollumn) ###\n> >       return(cFoo)\n> > }\n> > myfun2() # test\n> >\n> > On 5/18/07, Prof Brian Ripley  wrote:\n> >> You need to study carefully what the semantics of 'subset' are.  The\n> >> function body of myfun is not in the evaluation environment.  (The\n> >> issue\n> >> is 'subset', not 'lapply': select is an *expression* and not a\n> >> value.)\n> >>\n> >> Hint: using subset() programmatically is almost always a mistake.\n> >> R's\n> >> subsetting function is '[': subset is a convenience wrapper.\n>\n> Thank you very much. Indeed it is much better this way. I got used to\n> subset for data.frames because [ does not work with negative named\n> arguments while select does. E.g.:\n>        x[,-c(\"name1\",\"name2\")]\n> does not work while\n>        subset(x,select=-c(\"name1\",\"name2\"))\n> works (it eliminates columns named name1 and name 2 from x). But I\n> guess in most cases an other syntax can achieve the same thing with\n> [, like:\n>        x[,-which(names(x)%in%c(\"name1\",\"name2\"))]\n> it's just a little less clear.\n\nwhich is not needed.  Using builtin CO2:\n\n      CO2[ ! names(CO2) %in% c(\"Type\", \"conc\" ]\n\nor\n\n      CO2[ setdiff(names(CO2), c(\"Type\", \"conc\")) ]\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}