{"category": "ham", "to_address": "<lewinger@usc.edu>, <r-help@stat.math.ethz.ch>", "from_address": "<Bill.Venables@csiro.au>", "subject": "Re: [R] Speeding up resampling of rows from a large matrix", "body": "Here is a possibility.  The only catch is that if a pair of rows is\nselected twice you will get the results in a block, not scattered at\nrandom throughout the columns of G.  I can't see that as a problem.\n\n### --- start code excerpt ---\nnSNPs <- 1000\nH <- matrix(sample(0:1, 120*nSNPs , replace=T), nrow=120)\n\n# G <- matrix(0, nrow=3, ncol=nSNPs)\n\n# Keep in mind that the real H is 120 x 65000\n\nij <- as.matrix(subset(expand.grid(i = 1:120, j = 1:120), i < j))\n\nnResamples <- 3000\nsel <- sample(1:nrow(ij), nResamples, rep = TRUE)\nrepf <- table(sel)                   # replication factors\nij <- ij[as.numeric(names(repf)), ]  # distinct choice made\n\nG <- matrix(0, nrow = 3, ncol = nrow(ij))  # for now\n\nfor(j in 1:ncol(G))\n  G[,j] <- rowSums(outer(0:2, colSums(H[ij[j, ], ]), \"==\"))\n\nG <- G[, rep(1:ncol(G), repf)]         # bulk up the result\n\n# _\n# _\n# _\n# _pair <- replicate(nResamples, sample(1:120, 2))\n# _\n# _gen <- function(x){g <- sum(x); c(g==0, g==1, g==2)}\n# _\n# _for (i in 1:nResamples){\n# _    G <- G + apply(H[pair[,i],], 2, gen)\n# _}\n### --- end of code excerpt ---\n\nI did a timing on my machine which is a middle-of-the range windows\nmonstrosity...\n\n> system.time({\n+ \n+ nSNPs <- 1000\n+ H <- matrix(sample(0:1, 120*nSNPs , replace=T), nrow=120)\n+ \n+ # G <- matrix(0, nrow=3, ncol=nSNPs)\n+ \n+ # Keep in mind that the real H is 120 x 65000\n+ \n+ ij <- as.matrix(subset(expand.grid(i = 1:120, j = 1:120), i < j))\n+ \n+ nResamples <- 3000\n+ sel <- sample(1:nrow(ij), nResamples, rep = TRUE)\n+ repf <- table(sel)                   # replication factors\n+ ij <- ij[as.numeric(names(repf)), ]  # distinct choice made\n+ \n+ G <- matrix(0, nrow = 3, ncol = nrow(ij))  # for now\n+ \n+ for(j in 1:ncol(G))\n+   G[,j] <- rowSums(outer(0:2, colSums(H[ij[j, ], ]), \"==\"))\n+ \n+ G <- G[, rep(1:ncol(G), repf)]         # bulk up the result\n+ \n+ # _\n+ # _\n+ # _\n+ # _pair <- replicate(nResamples, sample(1:120, 2))\n+ # _\n+ # _gen <- function(x){g <- sum(x); c(g==0, g==1, g==2)}\n+ # _\n+ # _for (i in 1:nResamples){\n+ # _    G <- G + apply(H[pair[,i],], 2, gen)\n+ # _}\n+ #\n_#----------------------------------------------------------------------\n---------\n+ # _\n+ })\n   user  system elapsed \n   0.97    0.00    0.99 \n\n\nLess than a second.  Somewhat of an improvement on the 80 minutes, I\nreckon.  This will increase, of course when you step the size of the H\nmatrix up from 1000 to 65000 columns\n\nBill Venables\nCSIRO Laboratories\nPO Box 120, Cleveland, 4163\nAUSTRALIA\nOffice Phone (email preferred): +61 7 3826 7251\nFax (if absolutely necessary):  +61 7 3826 7304\nMobile:                (I don't have one!)\nHome Phone:                     +61 7 3286 7700\nmailto:Bill.Venables@csiro.au\nhttp://www.cmis.csiro.au/bill.venables/ \n\n-----Original Message-----\nFrom: r-help-bounces@stat.math.ethz.ch\n[mailto:r-help-bounces@stat.math.ethz.ch] On Behalf Of Juan Pablo\nLewinger\nSent: Friday, 25 May 2007 4:04 PM\nTo: r-help@stat.math.ethz.ch\nSubject: [R] Speeding up resampling of rows from a large matrix\n\nI'm trying to:\n\nResample with replacement pairs of distinct rows from a 120 x 65,000 \nmatrix H of 0's and 1's. For each resampled pair sum the resulting 2 \nx 65,000 matrix by column:\n\n     0 1 0 1 ...\n+\n     0 0 1 1 ...\n    _______\n=  0 1 1 2 ...\n\nFor each column accumulate the number of 0's, 1's and 2's over the \nresamples to obtain a 3 x 65,000 matrix G.\n\nFor those interested in the background, H is a matrix of haplotypes, \neach pair of haplotypes forms a genotype, and each column corresponds \nto a SNP. I'm using resampling to compute the null distribution of \nthe maximum over correlated SNPs of a simple statistic.\n\n\nThe code:\n#-----------------------------------------------------------------------\n--------\nnSNPs <- 1000\nH <- matrix(sample(0:1, 120*nSNPs , replace=T), nrow=120)\nG <- matrix(0, nrow=3, ncol=nSNPs)\n# Keep in mind that the real H is 120 x 65000\n\nnResamples <- 3000\npair <- replicate(nResamples, sample(1:120, 2))\n\ngen <- function(x){g <- sum(x); c(g==0, g==1, g==2)}\n\nfor (i in 1:nResamples){\n    G <- G + apply(H[pair[,i],], 2, gen)\n}\n#-----------------------------------------------------------------------\n--------\nThe problem is that the loop takes about 80 mins to complete and I \nneed to repeat the whole thing 10,000 times, which would then take \nover a year and a half!\n\nIs there a way to speed this up so that the full 10,000 iterations \ntake a reasonable amount of time (say a week)?\n\nMy machine has an Intel Xeon 3.40GHz CPU with 1GB of RAM\n\n > sessionInfo()\nR version 2.5.0 (2007-04-23)\ni386-pc-mingw32\n\nI would greatly appreciate any help.\n\nJuan Pablo Lewinger\nDepartment of Preventive Medicine\nKeck School of Medicine\nUniversity of Southern California\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide\nhttp://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}