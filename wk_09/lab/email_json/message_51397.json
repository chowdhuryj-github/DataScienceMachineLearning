{"category": "ham", "to_address": "Rob Dixon <rob.dixon@350.com>", "from_address": "Mathew <theillien@yahoo.com>", "subject": "Re: Alternatives to highly nested hashes", "body": "Rob Dixon wrote:\n> Mathew Snyder wrote:\n>> It looks like an object is what I want.  Am I correct?  Suppose I need\n>> to work\n>> with a bit of data that actually has 11 attributes.  This would be an\n>> object of\n>> another type.  However, I need to manipulate pieces of it\n>> differently.  So I'm\n>> guessing I would create an object thusly:\n>>\n>> sub objectname {\n>>     my %hashOfAttribs {\n>>     attrib1 => undef,\n>>     attrib2 => undef,\n>>     attrib3 => undef\n>>     }\n>> }\n>>\n>> I would then create an instance of that object\n>>\n>> my $instance = new objectname();\n>>\n>> I'm not certain though, how to populate the elements.  would it\n>> actually be\n>> my $instance = new objectname(attrib1 => value, attrib2 => value,\n>> attrib3 =>\n>> value)?  Or would I create the instance as above and then populate it\n>> by some\n>> other means?  For instance\n>> $instance->hashOfAttribs {\n>>     attrib1 => value,\n>>     attrib2 => value,\n>>     attrib3 => value\n>> };\n>>\n>> Am I at least on the right track?\n> \n> Well, sort of. Objects are simply intelligent data structures -\n> structures with\n> code as well as data that know how to perform operations on themselves.\n> So you\n> still have to decide on your basic data structure first, and we still\n> need to\n> know more about what the data is that you're trying to represent before\n> we can\n> help!\n> \n> What you've written above is pretty much correct expect that Perl\n> classes (types\n> of objects) are packages not subroutines. But first lets be sure you\n> really need\n> to create objects.\n> \n> Rob\n> \n> \n> \n\nI'm building reports for our work ticket system.  The tickets are\nactually objects themselves.  After accessing an instance of a ticket\nobject one simply accesses the various attributes such as the ticket\nnumber ($ticket->id) or the subject of the ticket ($ticket->Subject).  I\nneed to do more than just access these attributes and print them out though.\n\nThere are several things that need to be done with the data though:\ndetermine which tickets have the highest priority, averaging the time\nspent on each ticket, the average time spent on each customer, etc.  In\norder to get the information I need I have to store the data in a hash\noutside of the actual ticket object.  Once all of the data has been\nprocessed I need to print out the information for each ticket for each\ncustomer and user.\n\nMy superiors want the printout for each of these reports to contain all\nkinds of information under several headers such as the ticket id, owner,\ncustomer, time spent on it, when it's due for completion, etc.  Needing\nup to (but not necessarily) 11 columns I would end up with a hash\ndropping 10 levels deep (n-1, right?).  Eventually, those levels would\ncontain only one item each in turn containing one item each.  All so I\ncan print out as many columns as requested\n\nAs well, I'll potentially be dealing with upwards of a hundred tickets\nat a time.\n\nThat's the absolute simplest way I can put it.  Let me know if it isn't\nenough to work with.\n\nMathew\nKeep up with my goings on at http://theillien.blogspot.com\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}