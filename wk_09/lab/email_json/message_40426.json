{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: Passing arguments to subroutine", "body": "Paul Lalli wrote:\n>\n> On May 31, 9:35 am, eish...@googlemail.com (Eish...@Googlemail.Com) wrote:\n>>\n>> On May 31, 9:27 am, almatir...@gmail.com (Alma) wrote:\n>>\n>>> # extract the file name\n>>> #       my @parts = split('\\/',$file_path);\n>> \n>> Your split statement seems to be wrong. split uses a regex to match so\n>> it should be:\n>>\n>> split /\\\\/, $file_path;\n> \n> There is nothing at all wrong with the OP's split.  Single quotes are\n> a perfectly legitamite delimiter for a regular expression.  And why\n> did you change the OP's from splitting on a front-slash to splitting\n> on a back-slash?\n\nHowever it was a little confusing to write\n\n  split '\\/', $file_path;\n\nwhen what was meant was\n\n  split '/', $file_path;\n\nThe former appears to split on the literal value '\\/' but, because the\nstring is reinterpolated into a regex, the effect is the same as just '/'.\nBizarrely, to actually split on '\\/' would require\n\n  split '\\\\\\/', $file_path;\n\nRob\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}