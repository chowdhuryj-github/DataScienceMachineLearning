{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"Dr.Ruud\" <rvtol+news@isolution.nl>", "subject": "(was: Regarding files)", "body": "\"Dharshana Eswaran\" schreef:\n\nYou really shouldn't quote text that is no longer relevant, such as\nsignatures and mailing list tails.\n\n> Ruud:\n>> Dharshana Eswaran:\n\n>>> i am trying to grep for a string in the file and once i get the\n>>> string, I need to read few lines which occurs before the string.\n>>\n>> The classic (state machine) approach is to start storing strings from\n>> the start marker, so \"typedef union\" here, and discard the stored\n>> lines when the search string doesn't pop-up.\n>\n> Can you please help me with a small piece of code for the same logic\n> which you mentioned?\n\n#!/usr/bin/perl\n  use strict;\n  use warnings;\n\n  my $phase = 0;\n  my $s;\n  while (<>) {\n      if    (0 == $phase) {\n          /^\\s*typedef union\\s*(?:\\{\\s*)?$/\n            and ++$phase and $s = $_;\n      }\n      elsif (1 == $phase) {\n          $s .= $_;\n          if (/^\\s*}\\s*(\\w+)\\s*;\\s*$/) {\n              'CHANNEL_INFO_T' eq $1\n                and ++$phase and last;\n              $s = '';\n              $phase--;\n          }\n      }\n      else { die \"ugly phase($phase)\"}\n  }\n  $phase == 2 and print $s;\n__END__\n\n(untested)\n\n\nBut a real parser would also catch variants such as\n\ntypedef union {\n    TYPE_T type;\n   MODE_T mode;\n}\nCHANNEL_INFO_T;\n\nSee also:\nhttp://search.cpan.org/search?query=balanced&mode=module\n\n-- \nAffijn, Ruud\n\n\"Gewoon is een tijger.\"\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}