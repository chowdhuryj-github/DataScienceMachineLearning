{"category": "ham", "to_address": "\"Ian Bicking\" <ianb@colorstudy.com>, sugar@laptop.org", "from_address": "\"Stephen Thorne\" <stephen.thorne@gmail.com>", "subject": "Re: [sugar] eBook software", "body": "On 4/16/07, Ian Bicking  wrote:\n> There's the library itself, which is what you get as the home page when\n> you open up the browser.  I believe this is all done just as static\n> HTML, and I believe the UI is just transitional, it's not intended as\n> the final implementation.  I'm not sure how that relates to\n> ebook-browser-reader.  Huh.\n\nebook browser reader looks like a spike implementation of a js based\nreader. I've emailed the author directly and I'll find out where that\nproject is at.\n\n> Anyway, there definitely will be HTML content that should have a good\n> reading experience, which implies something browser-based.  Though\n> there's been discussion of whether the browser activity in particular\n> should be the basis of that.  The line between browsing and reading\n> extended works seems fuzzy to me; creating a distinction by having two\n> activities would seem unfortunate.\n\nDefinately. Reading extended works in the web browser is also very\nhard to do. Long web pages are almost impossible to keep your place\nin. This is the motivation for something js based like the\nebook-browser-reader I think.\n\n> Something that I think would be excellent is if the browser had UI\n> specifically related to some of these link types:\n> http://www.w3.org/TR/html401/types.html#type-links -- these identify the\n> position of a page in a book-like structure fairly well, I think, and\n> having the browser actually pay attention to that should make it easier\n> to translating a book into HTML.\n>\n> I imagine better bookmarking of some sort would also be helpful --\n> ideally you'd be able to save your exact position so you can return to\n> it.  The journal would save that position (once the journal is\n> implemented), but regardless of that the browser has to be able to tell\n> the journal the position and then be able to return to it later.\n\nHaving investigated the memory footprint of the web browser on the\nbeta2 machines, it's currently quite heavy. My biggest fear with using\nit for ebook reading is that if it gets OOMKilled, then the page will\nbe lost, and that be a disaster.\n\nWhat I was thinking was possibly using the web browser and a local\nlight weight http server of some kind (SimpleHTTPServer or something)\nthat would serve ajaxy data to the web browser and integrate with\nthings like the journal. This way even if the Web activity with its\nMozEmbed component dies via OOM, the backend store can still be\nwritten (and the backend store can take SIGDANGER signals and cache\nthat data to disk).\n\nThat all said, the sophieproject looks very promising (and is BSD\nlicensed) so I'm currently wanting to investigate that.\n\n-- \nStephen Thorne\n\n\"Give me enough bandwidth and a place to sit and I will move the world.\"\n  --Jonathan Lange\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}