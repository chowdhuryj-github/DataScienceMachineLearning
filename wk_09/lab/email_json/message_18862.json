{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 219: removed unnecessary variable in\n\thttp://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 219\nrevision-id: tridge@samba.org-20070428165537-dq8tirclx8okd1ec\nparent: tridge@samba.org-20070428161833-g1jbj1dibtxk28ih\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Sat 2007-04-28 18:55:37 +0200\nmessage:\n  removed unnecessary variable\nmodified:\n  common/ctdb_call.c             ctdb_call.c-20061128065342-to93h6eejj5kon81-1\n  include/ctdb_private.h         ctdb_private.h-20061117234101-o3qt14umlg9en8z0-13\n=== modified file 'common/ctdb_call.c'\n--- a/common/ctdb_call.c\t2007-04-28 16:18:33 +0000\n+++ b/common/ctdb_call.c\t2007-04-28 16:55:37 +0000\n@@ -434,8 +434,8 @@\n \t/* if we are not the dmaster, then send a redirect to the\n \t   requesting node */\n \tif (header.dmaster != ctdb->vnn) {\n+\t\ttalloc_free(data.dptr);\n \t\tctdb_call_send_redirect(ctdb, call.key, c, &header);\n-\t\ttalloc_free(data.dptr);\n \t\tctdb_ltdb_unlock(ctdb_db, call.key);\n \t\treturn;\n \t}\n@@ -595,7 +595,7 @@\n */\n static int ctdb_call_destructor(struct ctdb_call_state *state)\n {\n-\tctdb_reqid_remove(state->node->ctdb, state->reqid);\n+\tctdb_reqid_remove(state->ctdb_db->ctdb, state->reqid);\n \treturn 0;\n }\n \n@@ -609,7 +609,7 @@\n \tstruct ctdb_call_state *state = talloc_get_type(private_data, struct ctdb_call_state);\n \tDEBUG(0,(__location__ \" call timeout for reqid %d\\n\", state->c->hdr.reqid));\n \tstate->state = CTDB_CALL_ERROR;\n-\tctdb_set_error(state->node->ctdb, \"ctdb_call %u timed out\",\n+\tctdb_set_error(state->ctdb_db->ctdb, \"ctdb_call %u timed out\",\n \t\t       state->c->hdr.reqid);\n \tif (state->async.fn) {\n \t\tstate->async.fn(state);\n@@ -650,7 +650,6 @@\n \ttalloc_steal(state, data->dptr);\n \n \tstate->state = CTDB_CALL_DONE;\n-\tstate->node = ctdb->nodes[ctdb->vnn];\n \tstate->call = *call;\n \tstate->ctdb_db = ctdb_db;\n \n@@ -711,7 +710,6 @@\n \tstate->call.call_data.dptr = &state->c->data[call->key.dsize];\n \tstate->call.key.dptr       = &state->c->data[0];\n \n-\tstate->node   = ctdb->nodes[header->dmaster];\n \tstate->state  = CTDB_CALL_WAIT;\n \tstate->header = *header;\n \tstate->ctdb_db = ctdb_db;\n@@ -734,16 +732,16 @@\n int ctdb_daemon_call_recv(struct ctdb_call_state *state, struct ctdb_call *call)\n {\n \twhile (state->state < CTDB_CALL_DONE) {\n-\t\tevent_loop_once(state->node->ctdb->ev);\n+\t\tevent_loop_once(state->ctdb_db->ctdb->ev);\n \t}\n \tif (state->state != CTDB_CALL_DONE) {\n-\t\tctdb_set_error(state->node->ctdb, \"%s\", state->errmsg);\n+\t\tctdb_set_error(state->ctdb_db->ctdb, \"%s\", state->errmsg);\n \t\ttalloc_free(state);\n \t\treturn -1;\n \t}\n \n \tif (state->call.reply_data.dsize) {\n-\t\tcall->reply_data.dptr = talloc_memdup(state->node->ctdb,\n+\t\tcall->reply_data.dptr = talloc_memdup(state->ctdb_db->ctdb,\n \t\t\t\t\t\t      state->call.reply_data.dptr,\n \t\t\t\t\t\t      state->call.reply_data.dsize);\n \t\tcall->reply_data.dsize = state->call.reply_data.dsize;\n\n=== modified file 'include/ctdb_private.h'\n--- a/include/ctdb_private.h\t2007-04-28 16:18:33 +0000\n+++ b/include/ctdb_private.h\t2007-04-28 16:55:37 +0000\n@@ -263,7 +263,6 @@\n \tuint32_t reqid;\n \tstruct ctdb_req_call *c;\n \tstruct ctdb_db_context *ctdb_db;\n-\tstruct ctdb_node *node;\n \tconst char *errmsg;\n \tstruct ctdb_call call;\n \tstruct ctdb_ltdb_header header;\n\n"}