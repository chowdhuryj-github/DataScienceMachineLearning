{"category": "ham", "to_address": "Joshua Isom <jrisom@gmail.com>", "from_address": "Klaas-Jan Stol <parrotcode@gmail.com>", "subject": "Re: Minor notes/suggestions on PDD15", "body": "Joshua Isom wrote:\n> On Apr 10, 2007, at 2:05 AM, Allison Randal wrote:\n>\n>> Klaas-Jan Stol wrote:\n>>> hi,\n>>> Some suggestions for PDD15:\n>>> 1.\n>>> reading PDD15, I noticed that some methods/ops are named using an \n>>> underscore to separate words, others don't, for instance:\n>>> * get_class (but also \"getclass\" is used in the examples)\n>>> * newclass\n>>> IMO, it'd be nice to be consistent, and stick to 1 style. (My \n>>> personal preference is to leave out the underscore)\n>>\n>> The get_ standard entered with namespaces, and was itself a \n>> modification of the find_ standard from the earlier opcodes for \n>> dealing with globals and lexicals. For methods, I'd say the \n>> underscores are standard. For opcoess, it's debatable whether \n>> underscores or no underscores is standard at this point. I made a \n>> note to review it when I get to the Opcodes PDD.\n>>\n>\n> I'm a little mixed on this.  Something like get_args probably \n> shouldn't be getargs or even getArgs, but if you look through ops.num, \n> it can be confusing to know what is what.  Although not for beginners, \n> scanning through ops.num can help figure out why your code doesn't \n> compile as expected.\n>\n>>> 2.\n>>> Another thing; operations such as find_method return a NULL PMC on \n>>> failure. It might be nice to have it configurable for the user so \n>>> s/he can choose whether an exception will be thrown, or a NULL PMC \n>>> is returned. (IIRC, this can already be done for some ops, it'd be \n>>> nice to set it for all ops that may return a NULL PMC).\n>>> (as a detail: in PIR this might be represented by a pragma, like: \n>>> \".pragma exceptions 1\")\n>>\n>> This is the same question we have for I/O, and really for large parts \n>> of Parrot. I've temporarily held off on this decision until the new \n>> exceptions PDD is implemented (widespread exceptions really aren't \n>> practical with the current exceptions implementation).\n>>\n>\n> Perhaps a namespace specific code can be used, and maybe applicable \n> for nested namespaces such that hll's can easily take advantage, so an \n> hll can say in it's root namespace \"I want exceptions\" and all \n> namespaces in that hll default to using exceptions.  A file specific \n> option would be bug prone with something like pbc_merge or whatever, \n> and making it namespace specific seems simple and clean, even if a \n> little too DWIM for parrot.\nYes, I can see the problem you mean. To add a note to the potential \nexception pragma, this could be translated to a single instruction that \nchanges the behaviour of parrot (either returning error codes/NULL \nobjects or throwing exceptions). If you think about it, it is just \nanother opcode being executed, changing the 'state of the world'. If for \ninstance in pbc file 1, you delete a global variable which is used in \npbc file 2, and you would merge those pbc files, it's also an error. \nHLLs, OTOH, can 'protect' the user more, just as HLLs do access control: \nsome (if not most) OO HLLs don't allow the user to access private \nmembers from other classes. In PIR, this is no problem, so the check is \ndone in the HLL compiler. Likewise, the syntax of the HLL can prevent \nthe user from doing stuff like that (if there were any way to set this \nexceptions behaviour from a HLL).\n\nmy 2c,\nkjs\n\n\n\n\n"}