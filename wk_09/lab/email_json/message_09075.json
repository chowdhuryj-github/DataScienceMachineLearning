{"category": "ham", "to_address": "yitzle <yitzle@users.sourceforge.net>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Array to Hash", "body": "On 4/18/07, yitzle  wrote:\n> Any tips on compacting this sub?\n>\n> sub readFile($) {\n>         my $fileName = shift;\n>         open FILE, \"<\", $fileName;\n>         while () {\n>                 my($name,$oldCount,$oldNum) = split /~/;\n>                 $dHash{$name}{'oldCount'} = $oldCount;\n>                 $dHash{$name}{'oldNum'} = $oldNum;\n>         }\n>         close FILE;\n> }\n\nDon't use prototypes.  They are broken and will give you a false sense\nof security.\n\nDon't use global variables (%dHash), they make your code harder to\nread and maintain.  Read up on decoupling.\n\nUse lexical file handles instead and you don't have to close it (they\nauto-close when they go out of scope).\n\nopen my $file, \"<\", $fileName or die \"Could not open $fileName: $!\";\nwhile (<$file>) {\n\nUse an anonymous hash ref in stead of assigning and use smaller names\nfor variables with limited scope.\n\nmy ($name,$cnt,$num) = split /~/;\n$dHash{$name} = { oldCount => $cnt, oldNum => $num };\n\nAlternatively, use a hash slice if you don't want to disturb other\nkeys that may exist at the level in %dHash\n\nmy ($name,$cnt,$num) = split /~/;\n@{$dHash{$name}}{qw(oldCount oldNum)} = ($cnt, $num);\n\n Here is my version:\nsub readFile {\n    croak \"readFile expects (filename, hashref)\" unless @_ == 2 and\nref $_[1] == 'HASH';\n    my ($file, $h) = @_;\n    open my $f, \"<\", $file or die \"could not open $f for reading: $!\";\n    while (<$f>) {\n        my ($name, $cnt, $num) = split /~/;\n        @{$h->{$name}}{qw(oldCount oldNum)} = ($cnt, $num);\n    }\n}\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}