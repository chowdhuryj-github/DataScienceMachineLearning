{"category": "ham", "to_address": "bugs-bitbucket@netlabs.develooper.com", "from_address": "\"Patrick R.Michaud (via RT)\" <parrotbug-followup@parrotcode.org>", "subject": "[perl #43269] [BUG] setline is tied to PIR source ", "body": "# New Ticket Created by  Patrick R. Michaud \n# Please include the string:  [perl #43269]\n# in the subject line of all future correspondence about this issue. \n# \n\n\nThe 'setline' opcode doesn't do what I expect it to do, which\nis to associate runtime errors with lines in HLL source.\n\nFor example, suppose I have a program \"foo.p6\" where\nlines 123 and 124 contain the statements\n\n    $a = 9876;\n    nsf($a + 1);\n\nA HLL compiler could then generate this as something like:\n\n    .sub anon\n        setfile \"foo.p6\"\n        setline 123\n        $P0 = new .Integer\n        assign $P0, 9876\n        set_global '$a', $P0\n\n        setline 124\n        $P0 = get_global '$a'\n        $P1 = clone $P0\n        add $P1, 1\n        'nsf'($P1)\n    .end\n\nIf the function 'nsf' doesn't exist, I expect get a runtime\nexception of some sort that says that the error occurred on\nline 124 of foo.p6.  Currently parrot reports back that\nthe error occurs in line 128, as in:\n\n    Null PMC access in invoke()\n    current instr.: 'anon' pc 27 (foo.p6:128)\n\nIt appears to me that setfile and setline are currently being\nconflated with the PIR directive C< #line \"file.ext\" nnn >.\nI think we need both capabilities -- one to relate PIR \ncompilation errors relative to a known location in PIR source\n(#line), and another to report runtime errors as a line number\nin HLL source (setfile+setline).\n\nRT #40806 has some related discussion for this.  I'm also\ncommitting the above code as a test (currently failing).\n\n----\n\nAnother possibility may be to simply deprecate setfile/setline \naltogether, and require other tools (e.g., PAST-pm) generate code\nthat sets global values somewhere for keeping track of the\nHLL source locations.\n\nPm\n\n"}