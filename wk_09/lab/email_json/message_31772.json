{"category": "ham", "to_address": "\"Mehmet Yavuz Selim Soyturk\" <mehmet.yavuz.selim@gmail.com>", "from_address": "\"jerry gay\" <jerry.gay@gmail.com>", "subject": "Re: [perl #42974] [BUG] Hungry Alligator Eats Integer; Developer Registers Complaint", "body": "On 5/17/07, Mehmet Yavuz Selim Soyturk  wrote:\n> On 5/17/07, Klaas-Jan Stol  wrote:\n> > Mmmm, is string_compare a wrapper for strcmp() ? Or is it a wrapper that\n> > reverses the result? (so return true if they're equal). In /that/ case,\n> > !string_compare() would be nicer. (my point being, if string_compare() is\n> > part of parrot source code, why not try and make it more sensible/readable).\n> > (I understand why the result values are the way they are for strcmp, but i\n> > never liked them)\n> >\n> > kjs\n>\n> I think that it's analogous to strcmp, but for the STRING* type. I\n> looked now at string_funcs.h, there is in fact a string_equal\n> function.\n>\nthere's a few locations where i think string compares can be cleaned\nup. this is one case, where the '== 0' syntax is a bit ugly. another\nis src/pmc/class.pmc (and others), where there's a bunch of\ncomparisons to a set of constant c strings, which look like:\n\n        else if (string_equal(interp, what, CONST_STRING(interp,\n\"namespace\")) == 0) {\n\nbut could probably be shortened to something like:\n\n        else if (string_equals_const_c_string(interp, what, \"namespace\")) {\n\nif something like C is implemented.\n\n\n> By the way, that wasn't the only issue. PCCRETURN expands to multiple\n> statements, so the curly braces are needed after the if test. Would it\n> not be better if PCCRETURN did it itself?\n>\ni'm working on a patch to modify the PCC docs to note that PCC*\nexpands to a statement list, so when used inside a selection statement\n(if, while, etc) PCC* requires a block. i'm also looking over the\ncurrent code to see if there are any other violations of this rule.\n\nhowever, your suggestion to have the PCC expansions automatically\nenclose themselves in blocks is interesting, and merits\ninvestigation--i'll take a look at that, too.\n~jerry\n\n"}