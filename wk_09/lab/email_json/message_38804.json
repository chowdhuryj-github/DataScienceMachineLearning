{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r23238 - in\n\tbranches/SAMBA_4_0/source/lib/tdb/common: .", "body": "Author: tridge\nDate: 2007-05-30 08:15:49 +0000 (Wed, 30 May 2007)\nNew Revision: 23238\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23238\n\nLog:\n\nmerged transaction lock changes from ctdb\n\nthis ensures that having the global lock also implies the transaction\nlock\n\nModified:\n   branches/SAMBA_4_0/source/lib/tdb/common/lock.c\n   branches/SAMBA_4_0/source/lib/tdb/common/tdb_private.h\n   branches/SAMBA_4_0/source/lib/tdb/common/transaction.c\n   branches/SAMBA_4_0/source/lib/tdb/common/traverse.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/tdb/common/lock.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/common/lock.c\t2007-05-30 08:14:59 UTC (rev 23237)\n+++ branches/SAMBA_4_0/source/lib/tdb/common/lock.c\t2007-05-30 08:15:49 UTC (rev 23238)\n@@ -285,8 +285,43 @@\n \treturn ret;\n }\n \n+/*\n+  get the transaction lock\n+ */\n+int tdb_transaction_lock(struct tdb_context *tdb, int ltype)\n+{\n+\tif (tdb->have_transaction_lock || tdb->global_lock.count) {\n+\t\treturn 0;\n+\t}\n+\tif (tdb->methods->tdb_brlock(tdb, TRANSACTION_LOCK, ltype, \n+\t\t\t\t     F_SETLKW, 0, 1) == -1) {\n+\t\tTDB_LOG((tdb, TDB_DEBUG_ERROR, \"tdb_transaction_lock: failed to get transaction lock\\n\"));\n+\t\ttdb->ecode = TDB_ERR_LOCK;\n+\t\treturn -1;\n+\t}\n+\ttdb->have_transaction_lock = 1;\n+\treturn 0;\n+}\n \n+/*\n+  release the transaction lock\n+ */\n+int tdb_transaction_unlock(struct tdb_context *tdb)\n+{\n+\tint ret;\n+\tif (!tdb->have_transaction_lock) {\n+\t\treturn 0;\n+\t}\n+\tret = tdb->methods->tdb_brlock(tdb, TRANSACTION_LOCK, F_UNLCK, F_SETLKW, 0, 1);\n+\tif (ret == 0) {\n+\t\ttdb->have_transaction_lock = 0;\n+\t}\n+\treturn ret;\n+}\n \n+\n+\n+\n /* lock/unlock entire database */\n static int _tdb_lockall(struct tdb_context *tdb, int ltype, int op)\n {\n\nModified: branches/SAMBA_4_0/source/lib/tdb/common/tdb_private.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/common/tdb_private.h\t2007-05-30 08:14:59 UTC (rev 23237)\n+++ branches/SAMBA_4_0/source/lib/tdb/common/tdb_private.h\t2007-05-30 08:15:49 UTC (rev 23238)\n@@ -170,6 +170,7 @@\n \tstruct tdb_transaction *transaction;\n \tint page_size;\n \tint max_dead_records;\n+\tbool have_transaction_lock;\n };\n \n \n@@ -181,6 +182,8 @@\n int tdb_lock(struct tdb_context *tdb, int list, int ltype);\n int tdb_unlock(struct tdb_context *tdb, int list, int ltype);\n int tdb_brlock(struct tdb_context *tdb, tdb_off_t offset, int rw_type, int lck_type, int probe, size_t len);\n+int tdb_transaction_lock(struct tdb_context *tdb, int ltype);\n+int tdb_transaction_unlock(struct tdb_context *tdb);\n int tdb_brlock_upgrade(struct tdb_context *tdb, tdb_off_t offset, size_t len);\n int tdb_write_lock_record(struct tdb_context *tdb, tdb_off_t off);\n int tdb_write_unlock_record(struct tdb_context *tdb, tdb_off_t off);\n\nModified: branches/SAMBA_4_0/source/lib/tdb/common/transaction.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/common/transaction.c\t2007-05-30 08:14:59 UTC (rev 23237)\n+++ branches/SAMBA_4_0/source/lib/tdb/common/transaction.c\t2007-05-30 08:15:49 UTC (rev 23238)\n@@ -423,9 +423,7 @@\n \t/* get the transaction write lock. This is a blocking lock. As\n \t   discussed with Volker, there are a number of ways we could\n \t   make this async, which we will probably do in the future */\n-\tif (tdb_brlock(tdb, TRANSACTION_LOCK, F_WRLCK, F_SETLKW, 0, 1) == -1) {\n-\t\tTDB_LOG((tdb, TDB_DEBUG_ERROR, \"tdb_transaction_start: failed to get transaction lock\\n\"));\n-\t\ttdb->ecode = TDB_ERR_LOCK;\n+\tif (tdb_transaction_lock(tdb, F_WRLCK) == -1) {\n \t\tSAFE_FREE(tdb->transaction);\n \t\treturn -1;\n \t}\n@@ -469,6 +467,7 @@\n \t\t\t      TDB_HASHTABLE_SIZE(tdb)) != 0) {\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_transaction_start: failed to prime hash table\\n\"));\n \t\ttdb->ecode = TDB_ERR_IO;\n+\t\ttdb->methods = tdb->transaction->io_methods;\n \t\tgoto fail;\n \t}\n \n@@ -476,7 +475,7 @@\n \t\n fail:\n \ttdb_brlock(tdb, FREELIST_TOP, F_UNLCK, F_SETLKW, 0, 0);\n-\ttdb_brlock(tdb, TRANSACTION_LOCK, F_UNLCK, F_SETLKW, 0, 1);\n+\ttdb_transaction_unlock(tdb);\n \tSAFE_FREE(tdb->transaction->hash_heads);\n \tSAFE_FREE(tdb->transaction);\n \treturn -1;\n@@ -531,7 +530,7 @@\n \ttdb->methods = tdb->transaction->io_methods;\n \n \ttdb_brlock(tdb, FREELIST_TOP, F_UNLCK, F_SETLKW, 0, 0);\n-\ttdb_brlock(tdb, TRANSACTION_LOCK, F_UNLCK, F_SETLKW, 0, 1);\n+\ttdb_transaction_unlock(tdb);\n \tSAFE_FREE(tdb->transaction->hash_heads);\n \tSAFE_FREE(tdb->transaction);\n \t\n\nModified: branches/SAMBA_4_0/source/lib/tdb/common/traverse.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/common/traverse.c\t2007-05-30 08:14:59 UTC (rev 23237)\n+++ branches/SAMBA_4_0/source/lib/tdb/common/traverse.c\t2007-05-30 08:15:49 UTC (rev 23238)\n@@ -205,12 +205,10 @@\n {\n \tstruct tdb_traverse_lock tl = { NULL, 0, 0, F_RDLCK };\n \tint ret;\n-\t\n+\n \t/* we need to get a read lock on the transaction lock here to\n \t   cope with the lock ordering semantics of solaris10 */\n-\tif (tdb->methods->tdb_brlock(tdb, TRANSACTION_LOCK, F_RDLCK, F_SETLKW, 0, 1) == -1) {\n-\t\tTDB_LOG((tdb, TDB_DEBUG_ERROR, \"tdb_traverse_read: failed to get transaction lock\\n\"));\n-\t\ttdb->ecode = TDB_ERR_LOCK;\n+\tif (tdb_transaction_lock(tdb, F_RDLCK)) {\n \t\treturn -1;\n \t}\n \n@@ -218,7 +216,7 @@\n \tret = tdb_traverse_internal(tdb, fn, private_data, &tl);\n \ttdb->traverse_read--;\n \n-\ttdb->methods->tdb_brlock(tdb, TRANSACTION_LOCK, F_UNLCK, F_SETLKW, 0, 1);\n+\ttdb_transaction_unlock(tdb);\n \n \treturn ret;\n }\n@@ -237,15 +235,13 @@\n \t\treturn tdb_traverse_read(tdb, fn, private_data);\n \t}\n \t\n-\tif (tdb->methods->tdb_brlock(tdb, TRANSACTION_LOCK, F_WRLCK, F_SETLKW, 0, 1) == -1) {\n-\t\tTDB_LOG((tdb, TDB_DEBUG_ERROR, \"tdb_traverse: failed to get transaction lock\\n\"));\n-\t\ttdb->ecode = TDB_ERR_LOCK;\n+\tif (tdb_transaction_lock(tdb, F_WRLCK)) {\n \t\treturn -1;\n \t}\n \n \tret = tdb_traverse_internal(tdb, fn, private_data, &tl);\n \n-\ttdb->methods->tdb_brlock(tdb, TRANSACTION_LOCK, F_UNLCK, F_SETLKW, 0, 1);\n+\ttdb_transaction_unlock(tdb);\n \n \treturn ret;\n }\n\n"}