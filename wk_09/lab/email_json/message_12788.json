{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: I Don't Understand The Context Allocation/Destruction Code", "body": "On Sunday 22 April 2007 14:08, Uri Guttman wrote:\n\n> >>>>> \"JP\" == Joerg Plate  writes:\n>   >>\n>   >> const int slot = (reg_alloc + 7) >> 3; reg_alloc = slot << 3;\n>   >>\n>   >> This is where I start not to understand.  Why reg_alloc + 7? Why\n>   >> shift left and right by 3?\n>\n>   JP> That's just a rounding up (if necessary) to a multiple of 8 (2<<3).\n>\n> and those sort of things should be macros as they are confusing\n> otherwise and annoying to change. and named something like\n> ROUND_UP_TO_BOUNDARY. as others have said it is a common idiom. and i\n> agree that there should be comments on WHY the rounding is used/needed.\n\nI figured it was a rounding, but I saw two magic numbers and didn't want to \nguess what it was.\n\nAny volunteers to macroize this?\n\nAlso, is anyone *sure* that this boundary is effective on both 32- and 64-bit \nplatforms?  I hate to make assumptions about alignment.\n\n-- c\n\n"}