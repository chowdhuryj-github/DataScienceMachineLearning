{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "\"Alek Storm\" <alek.storm@gmail.com>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "On 4/18/07, chromatic  wrote:\n> On Wednesday 18 April 2007 14:15, Alek Storm wrote:\n>\n> > > If that's true, then users have to *know* the implementation details of\n> > > vtable methods.  Is it in C code or is it in PIR code?\n> >\n> > I have no idea why you're saying this.  Why does making vtable methods\n> > visible expose their implementation details?\n>\n> Vtable methods written in C are not visible to PIR code.\n\nTrue, but there is an increasing number of PCCMETHODs being written\nthat are just wrappers around a vtable method.  Again, having the\nvtable override visible is *optional*.  Just like writing a PCCMETHOD\nwrapper is optional.\n\n> See the code example I posted.\n>\n> > I haven't said anything remotely like this.\n>\n> If vtable methods written in PIR are visible to PIR code, I can draw no\n> other conclusion.\n> If I want to use a PMC and call a vtable method directly from PIR, I can do\n> that if and only if that method is a method defined in PIR.  I cannot do\n> that if the method is a method defined in C.\n>\n> Thus for my code to work robustly, I have to know about the internals of the\n> method and hope that it does not change.\n\nI see what you were saying now - the user has to know whether a vtable\nmethod was written in PIR or C to call it directly.  There are two\nchoices involved here.  The first is the choice of the user, who, by\ncalling it directly, has chosen to code for that specific PMC.  Nobody\nis forcing the user to do this; they can just as easily use some form\nof indirection, just like before.  The second is that the author has\nthe choice of providing a visible vtable method to the user, or not.\nThis is just like writing a wrapper around the vtable method in C or\nPIR, only more convenient.  No semantics are changed.\n\n> Again, the only part of :method that :vtable needs to imply is the part that\n> sets the invocant in the proper register and makes 'self' available within\n> the body of the method.\n\nSo, that still means :method can mean two different things, depending\non whether :vtable is present or not.  That's still bad.\n\n-- \nAlek Storm\n\n"}