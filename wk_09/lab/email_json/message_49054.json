{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Damian Conway <damian@conway.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "brian wrote:\n\n > As you know, one of the biggest complaints about Perl is that you have\n > to have a lot of special rules knowledge to figure some things out.\n > Whether that is true doesn't really matter: people still complain about\n > it.\n >\n > In this case, it will actually be true.\n\nI don't think that's the case. I think the new approach to Pod has\nexactly the opposite effect: it *eliminates* the need for a lot of\nspecial rules and contextual understandings.\n\n\n > This impacts Learning Perl 6 rather early because it's a rule that\n > people need to know at the same time that we tell them that whitespace\n > is insignificant.\n\nI'm pretty sure \"Learning Perl 6\" won't say that. Mainly because it's\nnot true. Whitespace in Perl 6 isn't always insignificant, even in the\nsimplest examples. Indeed, whitespace is significantly less\ninsignificant in Perl 6 than it was in Perl 5.\n\n\n > That's not really true anymore because a newline followed by an =\n > followed by begin is this special case, **no matter how it shows up\n > in the program**. Now there's this extra footnote to explain this\n > situation, and at the level of basic syntax, we have to explain a\n > lot more.\n\nI don't think so.\n\nThere are two distinct models we're considering in this thread. The\nfirst model is that Pod is a layer entirely syntactically separate from\nPerl, and which is preprocessed out of existence before the compiler\never sees the source of a program. Call this the \"Separation model\".\n\nThe second model is that Pod is an integral syntactic feature of\nPerl: effectively a special kind of comment. Call this the\n\"Integration model\".\n\nThe rule you have to teach under the Separation model is:\n\n     \"Any line that starts with an = is Pod...and not part of your program.\"\n\nWhereas the rule you have to teach under the Integration model is:\n\n     \"Any line that starts with an = is Pod...and not part of your program\n          ...UNLESS it's part of an assignment or comparator or inside a string\n             in which case it's something else\n              ...UNLESS it's also inside a code block inside that string,\n                 in which case it's a Pod command again\n                     ...UNLESS it's part of a nested assignment or comparator\n                        or doubly nested inside the nested string\n                            ...UNLESS it's in a doubly nested code block\n                               inside that nested string\n                                   ...etc.\n                                       ...etc.\"\n\n\nSo, for example, consider the following lines:\n\n     $var\n\n     =comment  Is this Pod?qq{\n\n     =comment  Is this Pod?qq{\n\n     =comment  Is this Pod?qq{\n\n     }}}\n\nWhich of those are Pod and which are Perl?\n\nUnder the Separation model, they're all Pod;\nunder the Integration model, only one of them is.\n\n\n > So, if this is the case, how will a new Perl 6 user debug a program\n > failure when part of their program mysteriously disappears because\n > they just happened to have =begin at the beginning of a line?\n\nThe same way they debug it when part of their program mysteriously\ndisappears because they just happened to have # at the beginning of a\nline: by learning to distinguish between code and commentary.\n\nExcept, of course, the Pod mysteriously vanishing will be considerably\neasier to debug, because ALL lines starting with =begin vanish, whereas\nonly some lines beginning with # do.\n\n\n > Also, doesn't this then limit Pod to Perl 6 (which I thought was not\n > the goal)? I doubt other languages will want to deal with this\n > situation.\n\nAs Smylers so ably pointed out, enabling Pod to be parsed independently\nof the underlying language syntax actually makes it vastly easier to use\nPod with other languages. All you need to do is insert a Pod-stripping\npreprocessor (already written, as it happens) before the language's \ncompiler...as, indeed, the Perl6::Pod does for Perl 5.\n\n\nThe bottom line is that separated Pod conforms to a single simple rule,\nwhich makes it:\n\n     * easy to teach:               \"a = in column 1 is Pod\"\n     * not context-sensitive:       \"a = in column 1 is ALWAYS Pod\"\n     * easy for humans to identify: \"is there an = in the first column?\"\n     * easy for machines to parse:  \"is there an = in the first column?\"\n     * easy to use:                 \"put a = in column 1\"\n     * easy to avoid                \"keep the = out of column 1\"\n\nI truly think it works better that way :-)\n\nDamian\n\n"}