{"category": "ham", "to_address": "Thomas Wittek <mail@gedankenkonstrukt.de>", "from_address": "John Macdonald <john@perlwolf.com>", "subject": "Re: Is Perl 6 too late?", "body": "On Mon, May 14, 2007 at 02:36:10PM +0200, Thomas Wittek wrote:\n> Andy Armstrong schrieb:\n> >On 14 May 2007, at 12:31, Thomas Wittek wrote:\n> >>How did C, C#, Java, Ruby, Python, Lua, JavaScript, Visual Basic, etc. \n> >>know?\n> >>They didn't.\n> >>If there is a new release, you always have to check if your code still \n> >>runs.\n> >\n> >I think that may be the point I'm making.\n> \n> Your point is that you don't have one?\n> Do you believe, that new keywords are the only cause of breaking \n> backwards compatibility? I don't think so.\n> So you rely on testing your code anyway. Sigils won't save you from that.\n\nBack in the 90's I was with a company that had a 20K line\nperl program.  We would provide a copy of perl as part of the\nprogram suite, so that we could control which version was\nbeing used for our software and when it was upgraded while\nstill allowing the customer to have their own version of perl\nthat they could upgrade on their own schedule.  Before any perl\nupgrade was built into our suite, we would of course test it\nextensivily to ensure that all of the code was still compatible.\nUntil the perl4->perl5 change, there was never any problem -\nLarry is a wizard at adding totally new concepts and features\nin a way that just \"happens\" to include all of the old usage\nbits as a special case that falls magically out of the new,\nenhanced, more coherent whole.  But there is no way that this\nwould have been possible without the distinction between named\noperators and variables provided by sigils.  Removing the sigil\non a function call (it used to always be written \u2282(args...))\ndid, I think, lead to the difficulty in perl5 where it became\ndifficult to add new keyword operators to the language - because\nthey could conflict with subroutine names in existing code.\n\nNeedless to say, that level of dependable upgradability without\nrequiring code rewrites was considered to e a huge benefit of\nusing perl for our company.\n\n(For the record, we delayed converting from perl4 to perl5 for\nmany years, woried about the possibility of subtle problems\narising from the massive changes that had been made to the\nlanguage.  When I finally tried it out, there were only a few\nchanges that really affected us.  I had the code converted in\nabout two weeks, although we then ran it in parallel with the\nold code for about two months before accepting that nothing\ntricky had snuck in.)\n\n-- \n\n"}