{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Ron Blaschke <mailing-lists@rblasch.org>", "subject": "Re: Limiting Exported Symbols on GCC", "body": "Nicholas Clark wrote:\n> On Thu, Apr 12, 2007 at 04:56:15PM +0200, nahoo82@gmail.com wrote:\n>> On Thu, Apr 12, 2007 at 09:13:14AM -0500, Steve Peters wrote:\n>>> On Thu, Apr 12, 2007 at 01:37:24PM +0200, Ron Blaschke wrote:\n>>>> While poking the GCC documentation I found that there's a feature \n>>>> available to limit the exported symbols (with GCC >= 3.3).  Maybe worth \n>>>> considering?\n>>>> It's probably a design decision.  If there's an option to limit the \n>>>> exported symbols or make all available, which one should be taken?\n>>>>\n>>>> http://gcc.gnu.org/wiki/Visibility\n>>>> http://gcc.gnu.org/onlinedocs/gcc-3.3.6/gcc/Function-Attributes.html#Function-Attributes\n>>>>\n>>>> This can be done by adding C<-fvisibility=hidden> to CFLAGS and setting \n>>>> PARROT_API to C<__attribute__ ((visibility(\"default\")))>.\n> \n>>> I think that we need to tread very carefully with adding additional \n>>> gcc-isms to Parrot, lest we break compatibility with additional compilers\n>>> even further.  If Parrot will run everywhere, we need to think about \n>>> working more towards ANSI and POSIX compliance.\n>> I think that the same effect can be achieved using a linker script (although\n>> I don't know much about them), in wich case you are not depending on a \n>> compiler feature.\n> \n> I thought the same, but I've never seen clear documentation as to how to do it.\n\nJust to elaborate a bit further on what I did: There's a macro called \nPARROT_API (see F) which is used to tag all \nsymbols to be exported.  On Win32 it expands to C<__declspec(dllexport)> \nto export the symbol (see F), for others \nto nothing.  For my test I defined it as C<__attribute__ ((visibility \n(\"default\")))>.\n\nRon\n\n"}