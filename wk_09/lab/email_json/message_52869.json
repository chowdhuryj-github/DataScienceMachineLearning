{"category": "ham", "to_address": "tom@stonehenge.com", "from_address": "<tom@tacocat.net>", "subject": "Re: still working with utf8", "body": "\nOn 6/22/2007, \"Tom Phoenix\"  wrote:\n\n>\n>On 6/21/07, Tom Allison  wrote:\n>\n>> I guess my question is, for CJK languages, should I expect the notion\n>> of using a regex like \\w+ to pick up entire strings of text instead\n>> of discrete words like latin based languages?\n>\n>Once you've enabled what the perlunicode manpage calls \"Character\n>Semantics\", it says:\n>\n>    Character classes in regular expressions match characters instead\n>    of bytes and match against the character properties specified in\n>    the Unicode properties database.  \"\\w\" can be used to match a\n>    Japanese ideograph, for instance.\n>\n>    http://perldoc.perl.org/perlunicode.html\n>\n>Does that manpage get you any closer to a solution? Hope this helps!\n>\n\nI got a long ways with this.\n\nGiven a base64 encoded string I can decode it using MIME::Base64.  But it\nreturns octets (thought they all look the same).\nConvert the octets to string using encode_utf() from Encode and you can\nuse regex on it just fine.\n\nBut I was surprised to find that my first test case what a japanese\nstring of some 8-10 characters with no whitespace.  I suppose it could\nbe a single word, but I didn't think the CJK languages had more than\n2-4 characters (pictographs?) to a word.  But I have no real experiences.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n\n"}