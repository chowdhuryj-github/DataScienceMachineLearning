{"category": "ham", "to_address": "Joerg Plate <plate@patterner.de>", "from_address": "Uri Guttman <uri@stemsystems.com>", "subject": "Re: I Don't Understand The Context Allocation/Destruction Code", "body": ">>>>> \"JP\" == Joerg Plate  writes:\n\n  >> const int slot = (reg_alloc + 7) >> 3; reg_alloc = slot << 3;\n\n  >> This is where I start not to understand.  Why reg_alloc + 7? Why\n  >> shift left and right by 3?\n\n  JP> That's just a rounding up (if necessary) to a multiple of 8 (2<<3).\n\nand those sort of things should be macros as they are confusing\notherwise and annoying to change. and named something like\nROUND_UP_TO_BOUNDARY. as others have said it is a common idiom. and i\nagree that there should be comments on WHY the rounding is used/needed.\n\nuri, an expired c hacker recalling painful issues :)\n\n-- \nUri Guttman  ------  uri@stemsystems.com  -------- http://www.stemsystems.com\n--Perl Consulting, Stem Development, Systems Architecture, Design and Coding-\nSearch or Offer Perl Jobs  ----------------------------  http://jobs.perl.org\n\n"}