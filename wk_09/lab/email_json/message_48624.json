{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "brian d foy <brian.d.foy@gmail.com>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "In article\n<832f158a0706141722o5f68cf09l724d4f4520ee146@mail.gmail.com>, Damian\nConway  wrote:\n\n> No. It's Pod. *Any* line that begins with '=begin' always starts a Pod\n> block. Always.\n\nAs you know, one of the biggest complaints about Perl is that you have\nto have a lot of special rules knowledge to figure some things out.\nWhether that is true doesn't really matter: people still complain about\nit.\n\nIn this case, it will actually be true. That a Perl 6 compiler might\nactually decide that in the middle of a statement it isn't a statement\nanymore but is Pod will cause some grief, not only in the here doc\nexample you show, but in things such as:\n\n\n   my $x\n   =begin();\n\nThis impacts Learning Perl 6 rather early because it's a rule that\npeople need to know at the same time that we tell them that whitespace\nis insignificant. That's not really true anymore because a newline\nfollowed by an = followed by begin is this special case, **no matter\nhow it shows up in the program**. Now there's this extra footnote to\nexplain this situation, and at the level of basic syntax, we have to\nexplain a lot more.\n\nI realize that the motivation for this was to be able to scan a file\nand extract the pod without parsing the Perl, but when the consequences\naffect very basic language things, like where you put your whitespace\nand operators,  then you create more of a mess than you solve.\n\nSo, if this is the case, how will a new Perl 6 user debug a program\nfailure when part of their program mysteriously disappears because\nthey just happened to have =begin at the beginning of a line? And, is\nthe tradeoff in language complexity worth the extra trouble?\n\nAlso, doesn't this then limit Pod to Perl 6 (which I thought was not\nthe goal)? I doubt other languages will want to deal with this\nsituation.\n\n"}