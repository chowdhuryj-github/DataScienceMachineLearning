{"category": "ham", "to_address": "Jonathan Worthington <jonathan@jnthn.net>, p2 <parrot-porters@perl.org>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: find_method changes look wrong", "body": "Jonathan Worthington wrote:\n> Hi,\n> \n> Just looking at the Class and Object PMCs and a couple of things concern \n> me.\n> \n> 1) Inside the method finding code I see this has been added:\n> \n>         if (  ! PMC_IS_NULL(namespace)\n>            &&  VTABLE_exists_keyed_str(interp, namespace, name)) {\n>            PMC *ret = VTABLE_get_pmc_keyed_str(interp, namespace, name);\n>            PCCRETURN(PMC *ret);\n>        }\n> \n> Which is in contradiction with PDD15:\n> \n> \"Since the method list and vtable override list are stored in the class \n> PMC, method finding is a lookup on the class object and not a lookup in \n> the namespace.\"\n\nThere currently isn't any way to add vtable overrides to the class's \nlist of vtable overrides, so this is temporary (and actually, I thought \nyou put it in).\n\n> 2) find_method used to be implemented in the Object PMC. I see now that \n> there is a find_method PCCMETHOD in the Class PMC that the Object PMC \n> calls. This is bad, since all PCCMETHODs are eventually supposed to be \n> moved out to a role so we don't pollute the method \"namespace\" or a \n> Class with things that other languages don't want. That means that \n> Object should not rely on there being a find_method PCCMETHOD in the class.\n> \n> To me it feels wrong for it to be there anyway. Class methods are \n> distinct from object methods. The PCCMETHODs described in PDD15 are \n> methods of an instance of Class. The things that you add_method'd to a \n> class are methods of objects instantiated from the class.\n\nThe problem is that Object was poking directly into the internals of \nClass, which definitely breaks encapsulation between the two. Object \nneeds a standard interface in Class that it can query for methods. It \ndoesn't have to be find_method.\n\nAllison\n\n"}