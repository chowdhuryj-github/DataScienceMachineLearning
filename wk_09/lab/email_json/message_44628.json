{"category": "ham", "to_address": "samba-technical@lists.samba.org", "from_address": "James Peach <jpeach@samba.org>", "subject": "[PATCH 3/4] Support dynamic group membership on Darwin. ", "body": "Using setgroups(2) in Darwin opts out of the dynamic group resolution\nmechanism. Use the initgroups system call directly to make sure we  \nopt in. Make sure the order of credential operations is correct.\n---\nsource/smbd/sec_ctx.c |   51 +++++++++++++++++++++++++++++++++++++++++ \n+------\n1 files changed, 44 insertions(+), 7 deletions(-)\n\ndiff --git a/source/smbd/sec_ctx.c b/source/smbd/sec_ctx.c\nindex ca9a6f2..d7a229e 100644\n--- a/source/smbd/sec_ctx.c\n+++ b/source/smbd/sec_ctx.c\n@@ -20,6 +20,10 @@\n#include \"includes.h\"\n+#if defined(HAVE_DARWIN_INITGROUPS)\n+#include \n+#endif\n+\nextern struct current_user current_user;\nstruct sec_ctx {\n@@ -187,7 +191,7 @@ fail:\nstatic BOOL apply_unix_token(const UNIX_USER_TOKEN *ut)\n{\n-\tint max = groups_max();\n+\tint ngroups = 0;\n#ifdef FREEBSD\n\t/* Most (all?) BSD systems expect that the first element in the groups\n@@ -217,26 +221,59 @@ static BOOL apply_unix_token(const  \nUNIX_USER_TOKEN *ut)\n#endif /* FREEBSD */\n-\n\t/* Always truncate the groups list at the system maximum. On most\n\t * systems, setgroups(2) will fail with EINVAL otherwise.\n\t */\n-\tif (sys_setgroups((ut->ngroups > max) ? max : ut->ngroups,\n-\t\t\t    ut->groups) == -1) {\n+\tngroups = (ut->ngroups > groups_max()) ? groups_max() : ut->ngroups,\n+\n+\tif (!become_gid(ut->gid)) {\n+\t\treturn False;\n+\t}\n+\n+#if defined(HAVE_DARWIN_INITGROUPS)\n+\n+       /* The Darwin groups implementation is a little unusual. The  \nlist of\n+        * groups in the kernel credential is not exhaustive, but  \nmore like\n+        * a cache. The full group list is held in userspace and checked\n+        * dynamically.\n+\t*\n+        * This is an optional mechanism, and setgroups(2) opts out\n+        * of it. That is, if you call setgroups, then the list of  \ngroups you\n+        * set are the only groups that are ever checked. This is not  \nwhat we\n+        * want. We want to opt in to the dynamic resolution  \nmechanism, so we\n+        * need to specify the uid of the user whose group list  \n(cache) we are\n+        * setting.\n+        *\n+        * The Darwin rules are:\n+        *  1. Thou shalt setegid, initgroups and seteuid IN THAT ORDER\n+        *  2. Thou shalt not pass more that NGROUPS_MAX to initgroups\n+        *  3. Thou shalt leave the first entry in the groups list  \nwell alone\n+        */\n+\n+       if (syscall(SYS_initgroups, ngroups, ut->groups, ut->uid) ==  \n1) {\n+\t\tDEBUG(0, (\"WARNING: failed to set group list \"\n+\t\t\t\"(%d groups) for UID %ld: %s\\n\",\n+\t\t\tngroups, (long)ut->uid, strerror(errno)));\n+       }\n+\n+#else\n+\tif (sys_setgroups(ngroups, ut->groups) == -1) {\n\t\tif (errno != ENOSYS) {\n\t\t\tDEBUG(0, (\"WARNING: failed to set group list \"\n\t\t\t\t\"(%d groups) for UID %ld: %s\\n\",\n-\t\t\t\tut->ngroups, (long)ut->uid, strerror(errno)));\n+\t\t\t\tngroups, (long)ut->uid, strerror(errno)));\n\t\t}\n\t}\n-\t/* If setgroups fails, it's bad, but it might not be the end of\n+#endif /* defined(HAVE_DARWIN_INITGROUPS) */\n+\n+\t/* XXX If setgroups fails, it's bad, but it might not be the end of\n\t * the world. OTOH, we don't want to have a group list from\n\t * some other credential since that could grant access we might\n\t * not otherwise have.\n\t */\n-\tif (!become_id(ut->uid, ut->gid)) {\n+\tif (!become_uid(ut->uid)) {\n\t\treturn False;\n\t}\n--\n1.5.2.1\n\n\n--\nJames Peach | jpeach@samba.org\n\n\n"}