{"category": "ham", "to_address": "p2 <parrot-porters@perl.org>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: Last bits of PDD 15 implementation", "body": "Allison Randal wrote:\n> I'm about half-way through a quick classification of the failing PDD 15 \n> tests (in t/pdd15oo). A number of the failures are quick things anyone \n> could pick off, so I'll share the list:\n> \n> \n> \n> We're only failing 157 out of 764 tests, so we're getting quite close \n> being able to use the new object implementation as a drop-in replacement \n> for the old object implementation.\n\nI've finished a full review, and only added a few more items to the list \nof tasks. It's now down to 126 failing tests. I'm working on taking more \nout.\n\nA question for compiler and PIR tool writers before I change the \ncode/tests for one feature: the current design decision is that class \nobjects always return a 'typeof' Class, while objects instantiated from \nthe class return a 'typeof' the class name. So:\n\n   $P0 = newclass \"Foo\"\n   $S0 = typeof $P0 # returns \"Class\"\n\n   $P1 = new $P0\n   $S1 = typeof $P1 # returns \"Foo\"\n\nThis is different than the old object model, which would return \"Foo\" \nfor both the class object and the instantiated object.\n\nThe new way seems saner, but which is more useful? You can always figure \nout if you have a class or an object by calling 'isa' for Class or Object.\n\nAllison\n\n"}