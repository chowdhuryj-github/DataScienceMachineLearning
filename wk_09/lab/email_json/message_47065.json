{"category": "ham", "to_address": "bugs-bitbucket@netlabs.develooper.com", "from_address": "James Keenan (via RT) <parrotbug-followup@parrotcode.org>", "subject": "[perl #43192] [TODO] Parrot::Configure::Step:  Test remaining untested subroutines ", "body": "# New Ticket Created by  James Keenan \n# Please include the string:  [perl #43192]\n# in the subject line of all future correspondence about this issue. \n# \n\n\nAccording to its documentation, the purpose of  \nParrot::Configure::Step is to hold \"... utility functions for  \n[configuration] steps to use.\"\n\nThis package, in relation to others in the Parrot::Configure::* tree,  \nhas a relatively large amount of code not covered by tests in t/ \nconfigure/ or elsewhere.  (See http://thenceforward.net/parrot/ \ncoverage/configure-build/lib-Parrot-Configure-Step-pm.html.)   \nAdditional unit tests are needed to deal with 3 aspects of this package:\n\n1.  prompt():  As yet not covered by any unit tests.  Whoever works  \non this should see whether this subroutine is called anywhere in the  \nlib/ or config/ hierarchies.\n\n2.  Branches and conditions in various subroutines:  file_checksum();  \ngenfile(); run_command(); cc_build(); cc_run(); cc_run_capture();  \ncheck_progs(); slurp().  As with item (1), each subroutine should be  \nchecked for current instances of usage during configuration.\n\n3.  There has been talk in other RT threads cc_build() a \"meaningful  \nreturn value\" (cf. http://tinyurl.com/2e7glm).\n\nSo this is a 3-part task involving testing and possibly refactoring.\n\nkid51\n\n"}