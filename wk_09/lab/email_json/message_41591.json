{"category": "ham", "to_address": "\"Mike Lesser\" <exceptions@earthlink.net>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: Paths, Spaces, Getopt::Long", "body": "On 6/3/07, Mike Lesser  wrote:\n\n> I use the module Getopt::Long to read arguments, one of which is a\n> file path that may have spaces. The path string that is returned from\n> Getopt has spaces without escape chars.  The string seems to be fine\n> for Perl use, but not so great for other things, such as the Shell\n> module, which can't handle the spaces.\n\nSo, the problem isn't that Getopt::Long is giving you the correct file\nname, which happens to contain spaces. The problem is that you're\npassing a string containing shell metacharacters (spaces) to the\nshell. Yes?\n\nI fear that you're using the Shell module for more than it was\nintended to do, perhaps because you don't know about system().\n\nOne easy solution may be to give a list of arguments to system(). The\nfirst is the name of the program you're trying to run, the rest of the\nlist are the command-line arguments to give it. You don't need to\nescape anything, because the strings are passed as-is.\n\n  # use the system's chmod command on a list of filenames\n  system \"chmod\", \"u+w\", @filenames;\n\nHope this helps!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}