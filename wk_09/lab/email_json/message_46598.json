{"category": "ham", "to_address": "Northstardomus <northstardomus@gmail.com>", "from_address": "Tom Allison <tom@tacocat.net>", "subject": "Re: Database insertion, escape issue", "body": "\nOn Jun 11, 2007, at 7:52 PM, Northstardomus wrote:\n\n>\n> I have a Perl script where I try to strip some data from a web page\n> and insert it\n>\n> into a database.  I'm having a problem where, it seems like the method\n> of quoting\n>\n> the data for insertion don't seem to be working (as far as escaping\n> the text) and\n>\n> some of the text is ending up getting injected into the SQL command.\n>\n> In this example, I am capturing the paragraphs of text and inserting\n> each HTML\n>\n> paragraph into a new record.  What seems to be hanging up the\n> insertion is the \"or\n>\n> die\" portion of the text.  It will also bomb if the text has a word\n> like \"don't\".\n>\n> I thought the insertion mechanism I'm using would properly escape\n> these special\n\n\nThere are two methods of doing a \"safe\" insertion that I'm familiar  \nwith under the DBI module.\nI've never had a problem with either of these.  But I've had many  \nproblems when I don't use these.\n\nOption one:\n\nuse the prepare statement\n\nmy $sql = \"insert into table(name, address, state) values (?,?,?)\";\nmy $sth = $dbh->prepare($sql);\n\n...\n\n$sth->execute($name,$address, $state);\n\nThis will automatically do proper escaping of the strings you want to  \ninsert.\n\nOption Two:\n\nIf for some reason it's not practical or possible to use the prepare  \nstatement then you can use the DBI quote().  However, this is  \ngenerally rare.\n\nmy $sql = \"insert into table(name) values (\" . $dbh->quote($name) . \")\";\n$dbh->do($sql);\n\nBut option one is going to be your best bet.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}