{"category": "ham", "to_address": "\"OtherRecipients of perl Ticket #43105\": ;", "from_address": "\"Bernhard Schmalhofer via RT\" <parrotbug-followup@parrotcode.org>", "subject": "[perl #43105] [PATCH] function mmd.c::mmd_expand_y: newly allocated memory unitialized ", "body": "\n> > What happens when NULL is not a consective series of '\\0' chars?\n> \n> I think that it breaks.\n> \n> > Are there such platforms and are they releavant for parrot?\n> \n> I believe that this assumption is endemic in Perl 5, and it's never\n> hindered\n> Perl 5's portability. The C FAQ gives examples of platforms where NULL\n> is not\n> all bits zero - http://c-faq.com/null/machexamp.html - and I've never\n> encountered anyone using them.\n\nThis answers the question. So I propose to apply Mehmet's patch and\nadd to pdd07 something like:\n\n--- pdds/pdd07_codingstd.pod    (Revision 18803)\n+++ pdds/pdd07_codingstd.pod    (Arbeitskopie)\n@@ -62,6 +62,9 @@\n integral type (no smaller than typedef C in Parrot), then back\nto its\n original type, without loss.\n\n+Also C code may assume that there is a single NULL pointer representation\n+and that it consists of a number, usually 4 or 8, of '\\0' chars in memory.\n+\n C code that makes assumptions beyond these must depend on the configuration\n system, either to not compile an entire non-portable source where it\nwill not\n work, or to provide an appropriate #ifdef macro.\n\n\nRegards,\n  Bernhard\n-- \n/* Bernhard.Schmalhofer  at gmx.de */\n\n"}