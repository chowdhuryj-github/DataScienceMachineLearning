{"category": "ham", "to_address": "andrew@acooke.org", "from_address": "\"Will Coleda\" <will@coleda.com>", "subject": "Re: Intro / Parrot / Functional Lang Imp Q", "body": "andrew cooke writes: \n\n> \n> Hi, \n> \n> I am thinking about using Parrot as the VM for a small, experimental\n> functional language.  My priority is ease of getting things working.  I\n> was wondering if: \n> \n> - this is the right list for parrot (parrot-porters-subscribe bounced)?\n\nparrot-porters and perl6-internals are supposed to be synonymous - I have a \nticket into the postmaster to see if we can resolve this issue, sorry about \nthe confusion.\n\n> - whether there was a more suitable venue (more focussed on developing\n>   languages with parrot than on perl/parrot itself)?\n\nNot really. \n\n> - if anyone could recommend some good code (an already implemented\n>   language) to copy and hack?\n\nI would recommend you check out some of the languages in the languages/ \ndirectory: abc in particular was designed to be an intro to using parrot's \ncompiler tools, and is probably the easiest to grasp at the moment.\n\n> On the last point, all I really need is first class functions, basic\n> types, eager (partial) evaluation\n\n> pattern matching (where is that handled?)\n\nPattern matching is provided with one of the PGE compilers. See \nlanguages/tcl/runtime/builtin/regexp.pir for an example (there is probably \nbetter documentation, I just happened to know I was using it there in tcl.) \n\n> and a little mutability.  In other words, I don't care much\n> about first class continuations, exceptions, (static) types or\n> inheritance. \n> \n> Also, am I right in thinking that I can use whatever language I want for\n> generating the IR? \n\nSure. languages/BASIC used perl, as did tcl some time back. Most are \ngenerating PIR with PIR these days, though. (ISTR plumhead is generating PIR \nmultiple ways) \n\n> Are there any libraries/toolkits for various\n> languages?\n\nDon't think so. Is there one you'd like to see? \n\n> I hate to admit it, but I would prefer not Perl (sorry,\n> haven't used it for years...), although if that's hugely easier I guess I\n> go that route anyway.\n\nParrot itself is probably easier than perl at the moment. \n\n> Thanks,\n> Andrew\n\nHope this helps.\n\n"}