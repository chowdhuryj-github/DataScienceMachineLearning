{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: $1 $2 var confusion", "body": "John W. Krahn wrote:\n> Mumia W. wrote:\n>> That happens because the match variables ($1, $2, ...) are only changed\n>> when a regular expression matches; otherwise, they are left alone.\n>>\n>> In the first case, \"$2 !~ /domain\\.com/\" succeeds but does not capture\n>> anything, so the numbered match variables are unset.\n>>\n>> Your situation reinforces the rule that you should always test if the\n>> match succeeded before you attempt to use the match variables:\n>>\n>>     my $email = 'steveb@domain.com';\n>>     my @f = (undef, $email =~ /(.*)\\@(.*)/);\n> \n> Why did you put undef in there?  It serves no useful purpose other than making\n> the code harder to understand for beginners.\n> \n>       my @f = $email =~ /(.*)\\@(.*)/;\n\nPresumably so that $f[1] eq $1 and $f[2] eq $2?\n\nBut I agree: unnecessary and confusing.\n\nRob\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}