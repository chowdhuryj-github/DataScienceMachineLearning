{"category": "ham", "to_address": "parrot-porters@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: [svn:parrot] r19530 - in trunk/lib/Parrot: . Test", "body": "On Sunday 01 July 2007 15:35:57 paultcochrane@cvs.perl.org wrote:\n\n> [lib] Removed conditional declaration problems so that code conforms to\n> perl coding standards\n\nI'm not convinced this is right.\n\n(I've long thought that this policy was broken with regard to local \ndeclarations, which completely fails to exhibit the pseudo-static behavior \nthat my declarations do.  That pseudo-static behavior is precisely the reason \nthis policy exists!)\n\n> Modified: trunk/lib/Parrot/Test.pm\n> ===========================================================================\n>=== --- trunk/lib/Parrot/Test.pm\t(original)\n> +++ trunk/lib/Parrot/Test.pm\tSun Jul  1 15:35:56 2007\n> @@ -293,16 +293,21 @@\n>          $err = \"&STDOUT\";\n>      }\n>\n> -    local *OLDOUT if $out;\n> -    local *OLDERR if $err;\n> +    if ( $out ) {\n> +      local *OLDOUT;\n> +      # Save the old filehandles; we must not let them get closed.\n> +      open OLDOUT, '>&STDOUT' or die \"Can't save     stdout\";  ## no\n> critic InputOutput::ProhibitBarewordFileHandles +      open STDOUT, '>',\n> $out or die \"Can't redirect stdout to $out\"; +    }\n\nOutside of this block, *OLDOUT retains its previous value.  I'm not sure how \nyou get *STDOUT's original value back with this revision.\n\n> +    if ( $err ) {\n> +      local *OLDERR;\n> +      # Save the old filehandles; we must not let them get closed.\n> +      open OLDERR, '>&STDERR' or die \"Can't save     stderr\";  ## no\n> critic InputOutput::ProhibitBarewordFileHandles\n>\n> -    # Save the old filehandles; we must not let them get closed.\n> -    open OLDOUT, '>&STDOUT' or die \"Can't save     stdout\" if $out;  ## no\n> critic InputOutput::ProhibitBarewordFileHandles \n\nThat declaration's awfully ugly, but if it's impossible to make the policy \nactually check what it should be checking, I prefer it to the \nlocal-and-dup-in-a-block, unless someone can demonstrate that the blocks \ndon't do the wrong thing.\n\n-- c\n\n"}