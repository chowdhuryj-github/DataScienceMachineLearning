{"category": "ham", "to_address": "\"'Peter Dalgaard'\" <p.dalgaard@biostat.ku.dk>,\n   \"'hadley wickham'\" <h.wickham@gmail.com>", "from_address": "\"John Fox\" <jfox@mcmaster.ca>", "subject": "Re: [R] intersect more than two sets", "body": "Dear Peter, Hadley, et al.,\n\nJust to bring it back around, here's a recursive Fold():\n\n> a <- letters[1:4]\n> b <- letters[2:5]\n> c <- letters[3:6]\n> d <- letters[4:7]\n> e <- letters[5:8]\n\n> Fold <- function(f, x, y, ...){\n+     if (missing(...)) f(x, y)\n+     else f(x, Fold(f, y, ...))\n+ }\n\n> Fold(intersect, a, b)\n[1] \"b\" \"c\" \"d\"\n> Fold(intersect, a, b, c)\n[1] \"c\" \"d\"\n> Fold(intersect, a, b, c, d)\n[1] \"d\"\n> Fold(intersect, a, b, c, d, e)\ncharacter(0)\n> \n> do.call(Fold, list(intersect, a, b, c, d))\n[1] \"d\"\n\nRegards,\n John\n\n--------------------------------\nJohn Fox, Professor\nDepartment of Sociology\nMcMaster University\nHamilton, Ontario\nCanada L8S 4M4\n905-525-9140x23604\nhttp://socserv.mcmaster.ca/jfox \n-------------------------------- \n\n> -----Original Message-----\n> From: r-help-bounces@stat.math.ethz.ch \n> [mailto:r-help-bounces@stat.math.ethz.ch] On Behalf Of Peter Dalgaard\n> Sent: Tuesday, April 24, 2007 4:03 PM\n> To: hadley wickham\n> Cc: R Help; Weiwei Shi\n> Subject: Re: [R] intersect more than two sets\n> \n> hadley wickham wrote:\n> > On 4/24/07, Weiwei Shi  wrote:\n> >   \n> >> assume t2 is a list of size 11 and each element is a \n> vector of characters.\n> >>\n> >> the following codes can get what I wanted but I assume \n> there might be \n> >> a one-line code for that:\n> >>\n> >> t3 <- t2[[1]]\n> >> for ( i in 2:11){\n> >>         t3 <- intersect(t2[[i]], t3)\n> >> }\n> >>\n> >> or there is no such \"apply\"?\n> >>     \n> >\n> > The operation you want is called a fold \n> > \n> (http://en.wikipedia.org/wiki/Fold_%28higher-order_function%29), and \n> > if it was available in R, you'd be able to do:\n> >\n> > fold(t2, intersect)\n> >\n> > Unfortunately, it's not, but you could implement it as follows:\n> >\n> > fold <- function(x, fun) {\n> > \tif (length(x) == 1) return(fun(x))\n> > \t\n> > \taccumulator <- fun(x[[1]], x[[2]])\n> > \tif (length(x) == 2) return(accumulator)\n> >\n> > \tfor(i in 3:length(x)) {\n> > \t\taccumulator <- fun(accumulator, x[[i]])\n> > \t}\n> > \taccumulator\n> > }\n> >\n> > a <- list(c(1,3,5), c(1,3), c(1, 2, 5, 6)) fold(a, intersect)\n> >\n> >   \n> \n> It's come up before. Gabor G posted this rather more succinct version:\n> \n>  > Fold <- function(f, x, L) (for(e in L) x <- f(x, e))  > \n> Fold(intersect,a[[1]],a[-1]) [1] 1\n> \n> or maybe prettier:\n> \n>  > (E <- Fold(union, NULL, a))\n> [1] 1 3 5 2 6\n>  > Fold(intersect, E, a)\n> [1] 1\n> \n> \n> > Which is just a trivial generalisation of your code above\n> >\n> \n> ______________________________________________\n> R-help@stat.math.ethz.ch mailing list\n> https://stat.ethz.ch/mailman/listinfo/r-help\n> PLEASE do read the posting guide \n> http://www.R-project.org/posting-guide.html\n> and provide commented, minimal, self-contained, reproducible code.\n>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}