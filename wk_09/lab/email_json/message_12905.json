{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "\"Alek Storm\" <alek.storm@gmail.com>", "subject": "Re: [perl #42408] Re: [PATCH] refactor vtable overriding, delegate.c generation", "body": "On 4/22/07, chromatic  wrote:\n> It came in just before the release and it touched a lot of files, so I \n> (speaking only for myself) let it sit for a couple of days.  Unfortunately, \n> it also came in after Steve Peters's \"No C++ Keywords\" patch, so it didn't \n> apply cleanly.\n\nThanks.  I should've checked that.\n\n> That's as far as I've been able to trace however.  The tests do pass if I \n> revert the patch.  Any ideas?\n\nI think the patch exposed either a GC or SMOP bug.  Here's the smallest I could get the test case and still have it segfault without gdb's help:\n\n.sub _main :main\n  load_bytecode 'library/Test/More.pir'\n\n  # import test routines\n  .local pmc exports, curr_namespace, test_namespace\n  curr_namespace = get_namespace\n  test_namespace = get_namespace [ \"Test::More\" ]\n  exports = split \" \", \"plan ok is isa_ok\"\n  test_namespace.export_to(curr_namespace, exports)\n\n  plan( 9 )\n\n  $P0 = new 'SMOP_Attribute'\n  isa_ok ($P0, 'SMOP_Attribute')\n\n  $S1 = $P0.'name'()\n  is ($S1, 'TestClass1', 'test the SMOP_Attribute name method')\n\n  $P0 = new 'SMOP_Attribute'\n  $S0 = $P0.'type'(\"TestTypeClass1\")\n  is ($S0, 'TestTypeClass1', 'test the SMOP_Attribute name method')\n\n  $S1 = $P0.'type'()\n  is ($S1, 'TestTypeClass1', 'test the SMOP_Attribute name method')\n.end\n\nHowever, we can make it segfault earlier using gdb, because the problem only shows up when a DOD run is triggered.  We can test whether the memory has been corrupted yet from anywhere in Parrot by issuing this:\n\ncall (*interp->arena_base->pmc_pool->more_objects)(interp, interp->arena_base->pmc_pool)\n\nIf it runs and exits, no problem.  If it segfaults, problem.  I was able to track the cause down to smop_init() in src/pmc/smop_attribute.pmc.  Running the aforementioned command before the call to mem_sys_allocate_zeroed() exits cleanly, but running it afterwards causes a segfault, so mem_sys_allocate_zeroed() (and the calloc() inside it) corrupts something.  That's as far as I can get for now - looking at the code immediately preceding the segfault doesn't help any.\n\nThe exact same thing happens without the patch, but for some reason the test case above doesn't trigger a DOD run on an unpatched parrot, so it doesn't show up unless you use gdb.  At least it's Not My Fault(TM), but this one looks like a doozy to fix.  Someone more familiar with the garbage collector than I needs to sort this out.  Should we start a new ticket?\n\n-- \nAlek Storm\n\n"}