{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "\"Mehmet Yavuz Selim Soyturk\" <mehmet.yavuz.selim@gmail.com>", "subject": "Re: [perl #42919] [BUG] and [PATCH] overriding 'invoke' requires current object to be explicitly passed", "body": "On 5/15/07, Alek Storm  wrote:\n> On 5/14/07, Mehmet Yavuz Selim Soyturk \n> wrote:\n> > Should we not be able to use an object that implements 'invoke' as a\n> > method of another object? There is some strange behaviour when I try\n> > to.\n>\n> I see what you're saying, and it looks like you want a functor.  We can't do\n> exactly what you want in that syntax, because methods are loosely tied to\n> objects in Parrot.  Parrot sees 'Func' as a sub, so it wouldn't make any\n> sense to tell the sub it's called by itself.  Regardless of what\n> 'find_method' returns, the invocant is $P2 when you use PIR syntax.  Here's\n> how to get the effect you want:\n>\n> .sub main :main\n>   $P0 = newclass 'Func'\n>   $P1 = newclass 'Obj'\n>   $P2 = new 'Obj'\n>   $P3 = find_method $P2, 'some_method'\n>   $P3.$P3()\n> .end\n>\n> The patch has been reverted, though, so that won't work until it's fixed and\n> reapplied.\n\nWhat I really meant is $P2.$P3() . With Allison's patch both\n\n   (*)   $P2.'some_method'()\nand\n   (**)  $P3 = find_method $P2, 'some_method'\n         $P2.$P3()\n\ncaused the same strange behaviour. I applied your patch, and (**)\nworked as I expected. But (*) caused an error:\n\n    too many arguments passed (3) - 2 params expected\n\n\nI think that I found the problem. callmethodcc calls\nVTABLE_find_method, which invokes the find_method override, which is a\nPIR sub. That causes that interp->current_args gets overwritten.\n\nI have a patch which tries to solve that problem:\n\n--- src/ops/object.ops  (revision 18542)\n+++ src/ops/object.ops  (working copy)\n@@ -50,11 +50,20 @@\n   PMC *method_pmc, *object;\n   opcode_t *next;\n   STRING *meth;\n+  opcode_t *current_args;\n\n   object = $1;\n   meth = $2;\n   next = expr NEXT();\n+\n+  /* If VTABLE_find_method calls a find_method override (which\n+     is another PIR sub), interp->current_args gets overwritten.\n+     We have to remember it.\n+  */\n+  current_args = interp->current_args;\n   method_pmc = VTABLE_find_method(interp, object, meth);\n+  interp->current_args = current_args;\n+\n   if (!method_pmc) {\n     real_exception(interp, next, METH_NOT_FOUND,\n         \"Method '%Ss' not found\", meth);\n\n\nI only did it for the callmethodcc_p_sc opcode though, because I don't\nknow if it's the right solution. A possible problem: could\ncurrent_args get GC'd in the meantime?\n\n-- \nMehmet\n\n"}