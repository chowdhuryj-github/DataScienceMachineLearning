{"category": "ham", "to_address": "\"jim holtman\" <jholtman@gmail.com>", "from_address": "deepayan.sarkar@gmail.com", "subject": "Re: [R] Lookups in R", "body": "On 7/5/07, jim holtman  wrote:\n> You are getting two very different results in what you are comparing.\n>\n> > system.time(lapply(1:10^4, mean))\n>   user  system elapsed\n>   1.31    0.00    1.31\n> is returning a list with 10,000 values in it.  It is taking time to allocate\n> the space and such.\n>\n> > system.time(for(i in 1:10^4) mean(i))\n>   user  system elapsed\n>   0.33    0.00    0.32\n> is just returning a single value (mean(10^4)) and is not having to allocate\n> space and setup the structure for a list.  Typically you use 'lapply' not\n> only for 'looping', but more importantly returning the values associated\n> with the processing.\n\nThe point still holds:\n\n> system.time(lapply(1:10^4, mean))\n   user  system elapsed\n  3.748   2.404   6.161\n> system.time({ a = numeric(10^4); for (i in 1:10^4) a[i] = mean(i) })\n   user  system elapsed\n  0.716   0.004   0.720\n\nTo really get rid of the for loop, you need to move the loop to pure C\ncode, e.g.\n\n> system.time(rowMeans(matrix(1:10^4, ncol = 1)))\n   user  system elapsed\n  0.004   0.000   0.004\n\nSometimes you can do this using functions available in R, e.g. using\ntapply() in your original question and rowMeans() in this example.\nSometimes you cannot, and the only way to gain efficiency is to write\ncustom C code (we do not have enough information to decide which is\nthe case in your real example, since we don't know what it is).\n\n-Deepayan\n\n> On 7/5/07, Michael Frumin  wrote:\n> >\n> > the problem I have is that userid's are not just sequential from\n> > 1:n_users.  if they were, of course I'd have made a big matrix that was\n> > n_users x n_fields and that would be that.  but, I think what I cando is\n> > just use the hash to store the index into the result matrix, nothing\n> > more. then the rest of it will be easy.\n> >\n> > but please tell me more about eliminating loops.  In many cases in R I\n> > have used lapply and derivatives to avoid loops, but in this case they\n> > seem to give me extra overhead simply by the generation of their result\n> > lists:\n> >\n> > > system.time(lapply(1:10^4, mean))\n> >   user  system elapsed\n> >   1.31    0.00    1.31\n> > > system.time(for(i in 1:10^4) mean(i))\n> >   user  system elapsed\n> >   0.33    0.00    0.32\n> >\n> >\n> > thanks,\n> > mike\n> >\n> >\n> > > I don't think that's a fair comparison--- much of the overhead comes\n> > > from the use of data frames and the creation of the indexing vector. I\n> > > get\n> > >\n> > > > n_accts <- 10^3\n> > > > n_trans <- 10^4\n> > > > t <- list()\n> > > > t$amt <- runif(n_trans)\n> > > > t$acct <- as.character(round(runif(n_trans, 1, n_accts)))\n> > > > uhash <- new.env(hash=TRUE, parent=emptyenv(), size=n_accts)\n> > > > for (acct in as.character(1:n_accts)) uhash[[acct]] <- list(amt=0,\n> > n=0)\n> > > > system.time(for (i in seq_along(t$amt)) {\n> > > +     acct <- t$acct[i]\n> > > +     x <- uhash[[acct]]\n> > > +     uhash[[acct]] <- list(amt=x$amt + t$amt[i], n=x$n + 1)\n> > > + }, gcFirst = TRUE)\n> > >    user  system elapsed\n> > >   0.508   0.008   0.517\n> > > > udf <- matrix(0, nrow = n_accts, ncol = 2)\n> > > > rownames(udf) <- as.character(1:n_accts)\n> > > > colnames(udf) <- c(\"amt\", \"n\")\n> > > > system.time(for (i in seq_along(t$amt)) {\n> > > +     idx <- t$acct[i]\n> > > +     udf[idx, ] <- udf[idx, ] + c(t$amt[i], 1)\n> > > + }, gcFirst = TRUE)\n> > >    user  system elapsed\n> > >   1.872   0.008   1.883\n> > >\n> > > The loop is still going to be the problem for realistic examples.\n> > >\n> > > -Deepayan\n> >\n> > ______________________________________________\n> > R-help@stat.math.ethz.ch mailing list\n> > https://stat.ethz.ch/mailman/listinfo/r-help\n> > PLEASE do read the posting guide\n> > http://www.R-project.org/posting-guide.html\n> > and provide commented, minimal, self-contained, reproducible code.\n> >\n>\n>\n>\n> --\n> Jim Holtman\n> Cincinnati, OH\n> +1 513 646 9390\n>\n> What is the problem you are trying to solve?\n>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}