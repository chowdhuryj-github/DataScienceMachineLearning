{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Joshua Isom <jrisom@gmail.com>", "subject": "Re: [perl #42975] [BUG] t/tools/ops2pmutils/08-sort_ops.t experiencing test failure when warning was not emitted ", "body": "On May 16, 2007, at 7:21 PM, James Keenan (via RT) wrote:\n\n> # New Ticket Created by  James Keenan\n> # Please include the string:  [perl #42975]\n> # in the subject line of all future correspondence about this issue.\n> # \n>\n>\n> One of the tests in t/tools/ops2pmutils/08-sort_ops.t has begun to  \n> fail.\n>\n> [li11-226:parrot] 504 $ prove -v t/tools/ops2pmutils/08-sort_ops.t\n> t/tools/ops2pmutils/08-sort_ops....\n> OK:  Parrot top directory located\n> 1..91\n> ok 1 - use Parrot::Ops2pm::Utils;\n> ok 2 - use Parrot::IO::Capture::Mini;\n> ...\n> not ok 71 - Got expected warning about ops in neither ops.num or\n> ops.skip\n>\n> #     Failed test (t/tools/ops2pmutils/08-sort_ops.t at line 235)\n> #                   undef\n> #     doesn't match '(?-xism:not in ops\\.num nor ops\\.skip)'\n> ok 72 - changed back to starting directory after testing\n> ...\n>\n> Paradoxically, this may be a good thing -- or it may simply indicate\n> the limitations of my test.\n>\n> 1.  The test file itself has not been altered since r18040 (Apr 08\n> 2007).  This failure occurred at r18576 (May 16 2007).\n>\n> ----------------------------------------------------------------------- \n> -\n> r18040 | jkeenan | 2007-04-08 10:25:01 -0400 (Sun, 08 Apr 2007) | 8\n> lines\n>\n>\n> 2.  The module being tested, lib/Parrot/Ops2pm/Utils.pm, has not\n> changed since I originally committed it to trunk, excepting ptc's\n> perltidy cleanups.\n>\n> 3.  The code in Parrot::Ops2pm::Utils touched during the failing test\n> is this in sort_ops() (edited slightly for clarity):\n>\n> sub sort_ops {\n>      my $self = shift;\n>      for my $el ( @{ $self->{ops}->{OPS} } ) {\n>          if ( exists $self->{optable}->{ $el->full_name } ) {\n>              # assign something to $el->{CODE}\n>          }\n>          elsif ( exists $self->{skiptable}->{ $el->full_name } ) {\n>              # assign something to $el->{CODE}\n>          }\n>          elsif ( $el->{experimental} ) {\n>              my $n = $self->{optable}->{ $el->full_name } = ++$self->\n> {max_op_num};\n>              warn sprintf( \"%-25s %-10s experimental, not in ops.num\n> \\n\", $el->full_name, $n )\n>                  if -e \"DEVELOPING\";\n>              # assign something to $el->{CODE}\n>          }\n>          else {\n>              warn sprintf( \"%-25s %-10s SKIPPED: not in ops.num nor\n> ops.skip\\n\", $el->full_name, \"\" )\n>                  if -e \"DEVELOPING\";   ##### This is causing a test\n> to fail\n>              # assign something to $el->{CODE}\n>          }\n>      }\n>      @{ $self->{ops}->{OPS} } =\n>          sort { $a->{CODE} <=> $b->{CODE} } ( @{ $self->{ops}->\n> {OPS} } );\n> }\n>\n> 4.  This is the failing test:\n>\n>          my $msg;\n>          my $tie = tie *STDERR, \"Parrot::IO::Capture::Mini\"\n>              or croak \"Unable to tie\";\n>          ok( defined $tie, \"tie established for testing\" );\n>          ok( $self->sort_ops(), \"sort_ops returned successfully\" );\n>          $msg = $tie->READLINE;\n>          untie *STDERR;\n>          like(\n>              $msg,\n>              qr|not in ops\\.num nor ops\\.skip|,\n>              \"Got expected warning about ops in neither ops.num or\n> ops.skip\"\n>          );\n>\n> The test asserts, \"If 'DEVELOPING' exists [which it does], then any\n> ops which is found *neither* in src/ops/ops.num *nor* in src/ops/\n> ops.skip will cause a warning to be generated alerting the developer\n> to that situation.  That warning will be captured in $msg, which\n> should then match the pattern in the like() test.\n>\n> The fact that the like() test fails means that $msg, at the very\n> least, did *not* match the pattern in the qr|| function in the like()\n> test.  In point of fact, $msg is 'undef', which means that no warning\n> was thrown by any of the ops tested during this test.  Which in turn\n> means that all ops tested were mentioned *either* in src/ops/ops.num\n> or in src/ops/ops.skip.\n>\n> Does that mean we should break out the cigars and champagne?  No.\n> Why?  Because the test, as written, entails a little cheat for\n> practicality's sake.  Parrot::Ops2pm::Utils has to be passed a list\n> of ops:\n>\n>          my $self = Parrot::Ops2pm::Utils->new(\n>              {\n>                  argv    => [@opsfiles],\n>                  script  => \"tools/build/ops2pm.pl\",\n>                  nolines => undef,\n>                  renum   => undef,\n>              }\n>          );\n>\n> ... but I didn't provide the constructor with *every* ops (as happens\n> in 'make'), but only with a very limited selection of ops:\n>\n>      local @ARGV = qw(\n>          src/ops/core.ops\n>          src/ops/bit.ops\n>          src/ops/object.ops\n>      );\n>\n> Four months ago, this selection of ops was sufficient, i.e., there\n> was at least one ops somewhere in those files that was not found in\n> either ops.num or ops.skip, and so triggered the warning, which\n> caused the test to pass.\n>\n> My objective in writing the test was, in large part, simply to\n> 'cover' the code, i.e., to demonstrate that that 'else' block inside\n> Parrot::Ops2pm::Utils::sort_ops() could be reached by a Perl\n> program.  Only one instance was needed to generate that coverage.\n>\n> But, apparently due to improvements in the ops by other Parrot\n> hackers, those three ops files are no longer sufficient to reach the\n> 'else' block even once.  So no warning is generated and the code is\n> not 'covered' by the test suite in t/tools/ops2pmutils/*.t.\n\nScary, a fix breaking a hack.\n\n> 5.  So, can anyone suggest a file in src/ops/*.ops that *would*\n> contain an ops found *neither* in ops.num nor in ops.skip?  I would\n> then pass that file as an argument to this test; a warning would be\n> generated; and the test would once again pass.\n\nEvery time I build, I get a listing of ops not found, namely those in  \nexperimental.ops.  But some are listed as \"SKIPPED: not in ops.num nor  \nops.skip\" such as setstdout_p io.ops.  Try `rm  \ninclude/parrot/oplib/ops.h && make include/parrot/oplib/ops.h` to get a  \nlisting.\n\n> Thank you very much.\n> kid51\n>\n\n"}