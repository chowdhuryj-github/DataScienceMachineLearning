{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14406 - doc/trunk/design/syn", "body": "Author: larry\nDate: Tue May 29 12:03:39 2007\nNew Revision: 14406\n\nModified:\n   doc/trunk/design/syn/S12.pod\n\nLog:\nAllow closures as indirect methods as suggested by blazer++\n\n\nModified: doc/trunk/design/syn/S12.pod\n==============================================================================\n--- doc/trunk/design/syn/S12.pod\t(original)\n+++ doc/trunk/design/syn/S12.pod\tTue May 29 12:03:39 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 27 Oct 2004\n-  Last Modified: 21 May 2007\n+  Last Modified: 29 May 2007\n   Number: 12\n-  Version: 52\n+  Version: 53\n \n =head1 Overview\n \n@@ -222,6 +222,18 @@\n \n     $obj.$methodname(1,2,3)\n \n+The variable may contain either the name of a method or a closure\n+object.  In the latter case the closure is called with the object\n+as its first argument, so that a closure may be used to abstract a\n+\"navigational\" path through a data structure without specifying the\n+root of the path till later.\n+\n+    $locator = -> $root, $x, $y { $root.[$x]{$y}[3] }\n+    $obj.$locator(42,\"baz\")  # $obj[42][3]\n+\n+    $locator = { . }\n+    $obj.$locator            # $obj\n+\n The method name may also be quoted with either single or double quotes:\n \n     $obj.\"$methodname\"(1,2,3)   # same as previous\n\n"}