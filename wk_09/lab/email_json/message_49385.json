{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Re: Quirky comments", "body": "Larry Wall wrote:\n> I have a problem with both extremes, and I want to solve it with a dose\n> of postmodern apathy.  It may seem a bit insane, but I think that in\n>\n>     print qq:to/END/\n>\n>     =for whatever\n>\n>     END\n>\n> I would prefer that the =for is considered Pod by any standard Pod\n> parser, but is *not* considered Pod by the Perl 6 parser.  And I think\n> that's just fine.  If the programmer really wants to put Pod in a\n> string, they can just be responsible for stripping it out themselves.\n> And a standard Pod parser shouldn't be expected to parse full-up Perl.\n\nSummary: Perl treats quoted Pod as quoted text, and all other Pod as\ncomments; Pod treats all Pod as Pod.\n\nEffects:\n1. You trade the brutally surprising behavior of whole lines of string\nliteral content vanishing for the much more subtle surprising behavior\nof whole lines of string literal content being available via $=pod\nvariables (some might consider the latter to be a feature).\n2. Pod Sections behave just like block comments (aside from the pod\nvariables thing), which is very nice.\n3. There will be a few rare cases where the Perl programmer will need\nto cheat to keep something that looks like Pod from registering as\nPod; this will be easy enough to do when it's needed.\n\nOpinion: That's a significant trade up, and addresses my biggest concerns.\n\n--\n\nThe only other thing that I'll continue to lobby for is that the line\nstarting with a block comment's termination tag should _not_ be\nconsidered part of the comment, save for the termination tag itself.\nProgrammers are likely to be surprised when text that follows a\nclosing bracket is treated as being included within it.\n\n-- \nJonathan \"Dataweaver\" Lang\n\n"}