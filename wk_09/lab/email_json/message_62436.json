{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23714 - in\n\tbranches/SAMBA_3_0/examples/scripts/users_and_groups: .", "body": "Author: obnox\nDate: 2007-07-05 00:12:24 +0000 (Thu, 05 Jul 2007)\nNew Revision: 23714\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23714\n\nLog:\nbut now:\n\nThis script allows for adding lists of users (or other objects)\nto lists of groups (or aliases). Useful for creating large test\nscenarios.\n\nMichael\n\n\nAdded:\n   branches/SAMBA_3_0/examples/scripts/users_and_groups/adduserstogroups.pl\n\n\nChangeset:\nAdded: branches/SAMBA_3_0/examples/scripts/users_and_groups/adduserstogroups.pl\n===================================================================\n--- branches/SAMBA_3_0/examples/scripts/users_and_groups/adduserstogroups.pl\t2007-07-05 00:11:07 UTC (rev 23713)\n+++ branches/SAMBA_3_0/examples/scripts/users_and_groups/adduserstogroups.pl\t2007-07-05 00:12:24 UTC (rev 23714)\n@@ -0,0 +1,167 @@\n+#!/usr/bin/perl\n+\n+#\n+# adduserstogroups.pl\n+#\n+#    add single or continuously numbered domain users\n+#    to a given single group or list of groups\n+#\n+# Copyright (C) Michael Adam  2007\n+#\n+# This program is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 2 of the License, or (at your option)\n+# any later version.\n+#\n+# This program is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+# more details.\n+#\n+# You should have received a copy of the GNU General Public License along with\n+# this program; if not, write to the Free Software Foundation, Inc., 675\n+# Mass Ave, Cambridge, MA 02139, USA.\n+#\n+\n+#\n+# WARNING: This script is still rather crude.\n+#\n+\n+use strict;\n+use Getopt::Std;\n+\n+my $net_cmd\t= \"net\";\n+\n+# defaults:\n+\n+my $server;\n+my $num_members\t= 1;\n+my $startmem;\t\t\t# if empty, don't add numbers to member prefix\n+my $member_prefix;\t\t# name prefix for member\n+my $num_groups = 1;\n+my $startgroup;\t\t\t# if empty, don't add numbers to group prefix\n+my $group_prefix;\t\t# name prefix for group\n+my $path;\t\t\t# path to rpcclient command\n+my $net_path\t= $net_cmd;\n+my $creds;\n+\n+sub usage {\n+\tprint \"USAGE: $0 [-h] -S server -U user\\%pass \\\\\\n\"\n+\t\t. \"\\t-m member [-s startmem] [-n nummem] \\\\\\n\"\n+\t\t. \"\\t-g group [-G stargroup] [-N numgroups] \\\\\\n\"\n+\t\t. \"\\t[-P path]\\n\";\n+}\n+\n+# parse commandline:\n+\n+my %options = ();\n+getopts(\"U:S:m:s:n:g:G:N:P:h\", \\%options);\n+\n+if (exists($options{h})) {\n+\tusage();\n+\texit 0;\n+}\n+\n+if (exists($options{g})) {\n+\t$group_prefix = $options{g};\n+}\n+else {\n+\tprint \"ERROR: mandatory argument '-g' missing\\n\";\n+\tusage();\n+\texit 1;\n+}\n+\n+if (exists($options{U})) {\n+\t$creds = \"-U $options{U}\";\n+\tif ($creds !~ '%') {\n+\t\tprint \"ERROR: you need to specify credentials in the form -U user\\%pass\\n\";\n+\t\tusage();\n+\t\texit 1;\n+\t}\n+}\n+else {\n+\tprint \"ERROR: mandatory argument '-U' missing\\n\";\n+\tusage();\n+\texit 1;\n+}\n+\n+if (exists($options{S})) {\n+\t$server = $options{S};\n+}\n+else {\n+\tprint \"ERROR: madatory argument '-S' missing\\n\";\n+\tusage();\n+\texit 1;\n+}\n+\n+if (exists($options{s})) {\n+\t$startmem = $options{s};\n+}\n+\n+if (exists($options{n})) {\n+\t$num_members = $options{n};\n+}\n+\n+if (exists($options{m})) {\n+\t$member_prefix = $options{m};\n+}\n+else {\n+\tprint \"ERROR: mandatory argument '-m' missing\\n\";\n+\tusage();\n+\texit 1;\n+}\n+\n+if (exists($options{G})) {\n+\t$startgroup = $options{G};\n+}\n+\n+if (exists($options{N})) {\n+\t$num_groups = $options{N};\n+}\n+\n+if (exists($options{P})) {\n+\t$path = $options{p};\n+\t$net_path = \"$path/$net_cmd\";\n+}\n+\n+if (@ARGV) {\n+\tprint \"ERROR: junk on the command line ('\" . join(\" \", @ARGV) . \"')...\\n\";\n+\tusage();\n+\texit 1;\n+}\n+\n+# utility functions:\n+\n+sub do_add {\n+\tmy $member_name = shift;\n+\tmy $group_name = shift;\n+\tprint \"adding member $member_name to group $group_name\\n\";\n+\tsystem(\"$net_path rpc -I $server \".$creds.\" group addmem $group_name $member_name\");\n+}\n+\n+sub add_group_loop {\n+\tmy $member_name = shift;\n+\n+\tif (\"x$startgroup\" eq \"x\") {\n+\t\tdo_add($member_name, $group_prefix);\n+\t}\n+\telse {\n+\t\tfor (my $groupnum = 1; $groupnum <= $num_groups; ++$groupnum) {\n+\t\t\tdo_add($member_name, \n+\t\t\t       sprintf(\"%s%.05d\", $group_prefix, $startgroup + $groupnum - 1));\n+\t\t}\n+\t}\n+}\n+\n+\n+# main:\n+\n+if (\"x$startmem\" eq \"x\") {\n+\tadd_group_loop($member_prefix);\n+}\n+else {\n+\tfor (my $memnum = 1; $memnum <= $num_members; ++$memnum) {\n+\t\tadd_group_loop(sprintf(\"%s%.05d\", $member_prefix, $startmem + $memnum - 1));\n+\t}\n+}\n+\n\n\nProperty changes on: branches/SAMBA_3_0/examples/scripts/users_and_groups/adduserstogroups.pl\n___________________________________________________________________\nName: svn:executable\n   + *\n\n"}