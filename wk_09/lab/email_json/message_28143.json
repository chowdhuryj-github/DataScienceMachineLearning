{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "Joshua Isom <jrisom@gmail.com>", "subject": "Re: [perl #42929] [BUG] t/doc/pod_todo.t:  Massive failures from newly added test file", "body": "\nOn May 12, 2007, at 12:25 AM, chromatic wrote:\n\n> I agree.  It may be a decent test, but it's not a test to run by \n> default right\n> now.\n>\n> While I'm asking for a pony, I'd also like a way to disable the coding\n> standards tests for an official release tarball.\n>\n> -- c\n>\n\nThis will at least take care of the second part.  The end user probably \nwon't care less if pod has a little bit of an error.  Maybe using an \nenvironmental variable would help with some of the issues which tests \nto run and when.\n\nIndex: config/gen/makefiles/root.in\n===================================================================\n--- config/gen/makefiles/root.in        (revision 18511)\n+++ config/gen/makefiles/root.in        (working copy)\n@@ -1331,7 +1331,8 @@\n\n  # The --running-make-test argument is currently used by long-running \ntests\n  # to disable GC_DEBUG.\n-EXTRA_TEST_ARGS    = --gc-debug --running-make-test\n+#INVERSE_CONDITIONED_LINE(DEVEL):EXTRA_TEST_ARGS    = --gc-debug \n--running-make-test\n+#CONDITIONED_LINE(DEVEL):EXTRA_TEST_ARGS    = --developing --gc-debug \n--running-make-test\n  DISTRO_TEST_FILES = \\\n      t/distro/*.t\n  BENCHMARK_TEST_FILES = \\\nIndex: t/harness\n===================================================================\n--- t/harness   (revision 18511)\n+++ t/harness   (working copy)\n@@ -80,6 +80,11 @@\n\n  Emit a C file instead of displaying results.\n\n+=item C<--developing>\n+\n+Run extra tests the check coding standards and other parts of parrot \nnot\n+essential for a successful build.\n+\n  =back\n\n  =cut\n@@ -111,6 +116,9 @@\n  my $use_test_run = grep { $_ eq '--tr' } @ARGV;\n  @ARGV = grep { $_ ne '--tr' } @ARGV;\n\n+my $developing = grep { $_ eq '--developing' } @ARGV;\n+@ARGV = grep { $_ ne '--developing' } @ARGV;\n+\n  $use_test_run ||= $ENV{'PARROT_USE_TEST_RUN'};\n\n  # Suck the short options into the TEST_PROG_ARGS evar:\n@@ -153,34 +161,44 @@\n\n  # Pass in a list of tests to run on the command line, else run all the \ntests.\n  my @default_tests = map {glob \"t/$_/*.t\"} qw(\n-    configure postconfigure compilers/imcc/* op pmc native_pbc dynpmc \ndynoplibs\n+    postconfigure compilers/imcc/* op pmc native_pbc dynpmc dynoplibs\n      compilers/past compilers/pge compilers/pge/p5regex \ncompilers/pge/p6regex\n-    compilers/tge compilers/json library examples run src tools perl \ndoc stm\n+    compilers/tge compilers/json library examples run tools stm\n  );\n\n-# append the distribution checking tests to the default tests\n-my @distro_tests = map { \"t/distro/$_\" } qw(\n-    manifest.t\n-    file_metadata.t\n-);\n-push @default_tests, @distro_tests;\n+if ($developing) {\n+    my @developing_tests;\n+    @developing_tests = map {glob \"t/$_/*.t\" } qw(\n+        configure src perl doc\n+    );\n+    push @default_tests, @developing_tests;\n\n-# collect the coding standard tests (that we want to run) together and\n-# append them to the list of default tests\n-my @coding_std_tests = map { \"t/codingstd/$_\" } qw(\n-    c_code_coda.t\n-    c_header_guards.t\n-    c_indent.t\n-    c_struct.t\n-    cppcomments.t\n-    cuddled_else.t\n-    gmt_utc.t\n-    pir_code_coda.t\n-    tabs.t\n-    trailing_space.t\n-);\n-push @default_tests, @coding_std_tests;\n+    # append the distribution checking tests to the default tests\n+    my @distro_tests;\n+    @distro_tests = map { \"t/distro/$_\" } qw(\n+        manifest.t\n+        file_metadata.t\n+    );\n+    push @default_tests, @distro_tests;\n\n+    # collect the coding standard tests (that we want to run) together \nand\n+    # append them to the list of default tests\n+    my @coding_std_tests;\n+    @coding_std_tests = map { \"t/codingstd/$_\" } qw(\n+        c_code_coda.t\n+        c_header_guards.t\n+        c_indent.t\n+        c_struct.t\n+        cppcomments.t\n+        cuddled_else.t\n+        gmt_utc.t\n+        pir_code_coda.t\n+        tabs.t\n+        trailing_space.t\n+    );\n+    push @default_tests, @coding_std_tests;\n+}\n+\n  my @tests = @ARGV ? map { glob( $_ ) } @ARGV : @default_tests;\n\n  if ($use_test_run) {\n\n"}