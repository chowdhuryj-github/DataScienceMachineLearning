{"category": "ham", "to_address": "p6l <perl6-language@perl.org>", "from_address": "\"Charles Bailey\" <bailey.charles@gmail.com>", "subject": "Re: Generalizing ?? !!", "body": "[ Sorry to fall off the net for several days . . .]\n\nOn 6/13/07, Larry Wall  wrote:\n> On Wed, Jun 13, 2007 at 05:08:34PM -0400, Charles Bailey wrote:\n> : I'm concerned that the relevant precedent isn't just Perl5.  The ?: spelling\n> : of the ternary is pretty deeply embedded in programming languages -- I'm\n> : hard pressed to think of a widely used language in the past 10-15 years that\n> : spells it differently (though that may say more about my experience than the\n> : universe of \"widely used\" languages).\n>\n> It's really just the C-based languages.  Lots of popular languages don't\n> even give you a conditional operator, and seem to get by okay without it.\n\nGranted, but that's 8 of the top 10 languages on the current TIOBE list.\nLies, damned lies, and statistics . . .\n\n> That had to be one of the main design considerations for Perl 1, but now\n> we've got the \"design capital\" to fix some things.  The Perl 6 mandate\n> is not universal compatibility (which Perl 5 still represents in a\n> way), but the chance to fix everything that needs fixing.  And this\n> one of the things I think C got wrong.  Perl 6 is looking more for\n\nYou may well be right here -- you're certainly more qualified than I\nin language building -- but this line of reasoning leaves me with\nsomething of an uneasy feeling.  I'm not sure Perl6 has all that much\nof what I'll call \"practical design capital\", by which I mean ability\nto change practice by making new ideas common usage.  I'm\ndistinguishing that from what I'll call \"formal design capital\" -- the\nability to change practice by having good ideas to which people will\nlisten -- of which I think Perl6 has a good amount.\n\nI think this distinction can be important for several reasons, not the\nleast of which is that they may antagonize one another.  I'd argue\nthat Perl's FDC arises from its current widespread acceptance, showing\nthat many people think it currently implements \"good\" solutions to\nsome of the problems they need to solve, and from the respect given to\n~~@Larry, because they've implemented those solutions, discussed them\nintelligently, and are in general good people.  This sort of capital\nworks best for big ideas, whether by putting them out for discussion\n(read: persuasion), or by implementing them in a new language.\n\nOTOH, I'd argue that PDC is more of a transient phenomenon, and arises\nfrom the comfort users have with the language, whether it's that it\n\"feels natural\" overall, or that they recall being able to accomplish\nsome necessary task(s) easily or elegantly.  In some respects, it's\nthe net-equivalent of \"what have you done for me lately?\"  I think\nPerl 6 has less of a reserve here, partly because of its long\ngestation, partly because of its informal reputation as a small step\nup from APL in readability (cue the JAPH culture), and partly because\nof its reputation for being disorganized and unsecure.  (As an aside,\nlet me take pains to emphasize -- this being email -- that I am not\narguing that these claims are true, not that, to the extent they're\ntrue they're Perl's fault.  Nonetheless, they exist,  in the minds of\npotential users, and of the managers/vendors/spinners that specify\nwhat language choices are allowed.)  I also think that one wins or\nloses in this arena as often due to the little things -- whether\nsomething is easy and intuitive -- as to the big things -- whether\nsomething is possible and clean.\n\nWhy do I belabor the obvious so?  Because I think the discussion about\nthe ternary operator, like several others recently on these lists,\nmight be conflating the two, and might be missing an opportunity\nthereby.  In some cases, Perl6 will want to be the language on a\nhilltop, beckoning others to follow into the land of elegance and\northogonality.  But there's also something to be said for ingratiating\nand subverting.  That, in turn, implies that there will be cases where\nit's better to make a suboptimal choice in a small matter -- not\nsacrificing major principles, and not jumping through hoops inside the\nbox to save the user two keystrokes, but inculturating in order to\nbetter be able to make the really important points.\n\nWhether ?: is a better choice in this respect than ??!! is perhaps a\nmatter of taste, and I'm not going to argue that either is the\nPlatonic spelling of the ternary operator.  As best I can articulate\nit, I think I'm arguing for a more explicit balance of \"better\" with\n\"comfortable\" in making these choices.\n\nI don't mean by any of this to devalue the extensive community input\ninto the early stages of Perl6 design.  If anything, I may be\nundervaluing it, since it occurred during a time when RL required that\nI essentally drop out of the Perl community, and I missed much of the\ndetail.  I also don't mean to ignore the ongoing input via these\nlists, and I'm sure several other channels.  It's also true that at\nsome point, to get a working result, The Cabal has to make design\ndecisions whether or not The Masses have come to consensus.  That can\nbe hard for both sides, because any self-respecting Cabal has good\ncommunication internally, and exchange with the rest of the world can\nsometimes (actually|appear to) fall off.\n\n> semantic and pragmatic compatibility than syntactic compatibility.\n> We won't have to teach anyone the *idea* of a conditional operator,\n> just send them off to look for the green bikeshed.\n\nTo follow this metaphor, I think that outside the real disciples,\nPerl6 will get N bikesheds, for some small value of N, before a user\nwanders off to another locale where she doesn't need to consult the\nmap so often.\n\n> Certainly, all other things being equal (give or take), we'll go\n> for something familiar.  And I'll say we even put a thumb on the\n> scales in favor of what Perl 5 programmers expect, now and again.\n> But sometimes it's still right to break something, and reduce the\n> level of compatibility concern down to just making sure they get\n> a good error message if they fall into old habits.  In that case\n> it means making something different enough that the old one can be\n> recognized and dealt with.  At some point you put the new wine into\n> new wine skins and throw the old ones out.\n\nAbsolutely.  And Perl6 provides a singularity where it's possible to\nget a bunch of new wine skins into service.  But where the old\nwineskins still hold, er, wine, we might think twice about using the\nnewfangled double-stitched skins.\n\nIronically, specific error messages will probably cut both ways.  It's\nnice to be told what the likely error is, but some subset of readers\nwill respond, \"If you knew what I meant, just do it!\"\n\n> It's not really that common, compared to, say, assignment, which you'll note\n> we've pretty much left untouched, except for relaxing the requirement for\n> parens on the right side of list assignment.\n\nYep.  For that matter, if I had to pick one change in this area that'd\nhave maximum impact, I'd say a good assign-if-uninitialized idiom\nwould be way ahead of an if-then-else idiom.\n\n> : There's also the less important social problem that Perl6 has\n> : already spent a lot of goodwill in its long gestation.  I think it can be\n> : earned back by doing things well, because they've been thought through\n> : carefully, but the language will be viewed with some initial skepticism.\n>\n> I would like to think that \"doing things well\" is exactly the approach\n\nOf course.  Again, the medium may be garbling things here, or it may\njust be my lousy writing.  I'm certain that everyone in the discussion\nis trying to do things well, and that @Larry's version of well is\npretty good.  Hence Rule 1 works most of the time.  But it's nice to\nhave Rule 2 around, too.\n\n> we're taking.  We're not optimizing for the past, but for the future.\n> This might rehuffmanization of everything might influence more\n> generations of computer language than we can possibly imagine.\n\nIt could (I hope).  But I also want to be careful we're not building Esperanto.\n\n> Certainly.  The main problem is not so much that ? is ambiguous,\n> but that the : is.  It's somewhat ambiguous with labels\n> (though arguably those don't generally occur in the same context).\n> The killer is that it's formally ambiguous with the colon that is\n> used to indicate the list of an unparenthesized method call (in either\n> direct or indirect form).  That colon occurs where an infix is expected.\n> It's also ambiguous with adverbs, which can occur in that position\n> when modifying a preceding operator, as in 1..100:by(3).  The fact that\n> ?: tends to be used as one term in an expression means that things tend\n> to be written compactly without spacing, which amplifies that ambiguity.\n\nObTopic: I'm readily convinced that the special-casing needed to get\nthe : in ?: right wouldn't be worth it, on balance.\n\n> On the plus side, the fact that it's the : and not the ? that is most\n> problematic means that (unless the user adds their own infix:) it's\n> pretty easy to recognize the old usage and give a good error message at\n> compile time.  And I think that's all that's really necessary here.\n> It's the differences that silently produce an unexpected result\n> that we'll really need to worry about in terms of user satisfaction\n> and FAQ minimization.  That's also why there's no infix:<.>, so at\n\nConcur that it's the larger issue.  Respectfully dissent (if it's at\nall what you meant) that pointing out the error of using a borrowed\nidiom is as much as is needed.  It may be the best we can do, but I\nlike to think of it more as caving in to necessity than as meeting my\ngoal.\n\n> These are the everyday worries of a language designer.  Well, me anyway...\n\nI appreciate your taking the time to discuss this.  To the extent that\nmy comments weigh heavily, feel free to sprinkle smilies as needed, or\njust junk the whole thing.  Otherwise, thanks for letting me take my\nturn as Chicken Little.\n\n-- \nRegards,\nCharles Bailey\nLists: bailey _dot_ charles _at_ gmail _dot_ com\nOther: bailey _at_ newman _dot_ upenn _dot_ edu\n\n"}