{"category": "ham", "to_address": "Jelmer Vernooij <jelmer@samba.org>", "from_address": "\"Gerald (Jerry) Carter\" <jerry@samba.org>", "subject": "Comparision of Git & Bzr [was Re: Short HOWTO on using git for Samba\n development]", "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nJelmer Vernooij wrote:\n\n> Mercurial doesn't have anything as complete as bzr-svn yet. \n\nThat puts Mercurial out of the running for me.  I don't\nreally want to do the same diff/patch mirror script like\nI did for bzr to maintain branch history.\n\n> Bazaar and Mercurial are very different from Git in that\n> they use strings (revision ids / file ids)  to define the\n> identity of revisions and files (and their history). Git\n> defines a tree or files' identity by just a hash of\n> their contents (excluding their history).\n...\n> However, this model also has the disadvantage that \n> git isn't able to store  rename information. All it has is\n> a best guess as to which file was renamed to which\n> based on the contents of those files - and this can have\n> consequences for merges. Other disadvantages are\n> disambiguouty over the history of a tree and slow \n> (and non-ambiguous?) performance of annotation.\n\nI think I can live with this based on the reasoning at\nhttp://git.or.cz/gitwiki/GitFaq#head-f7dc61b87eab4db58fe90ce48cc1d47fd50e6bea\n\n  \"Why does git not track renames?\"\n\n  Git has to interoperate with a lot of different\n  workflows, for example some changes can come from\n  patches, where rename information may not be\n  available. Relying on explicit rename tracking\n  makes it impossible to merge two trees that have\n  done exactly the same thing, except one did it as\n  a patch (create/delete) and one did it using\n  some other heuristic.\n\nBut if anyone hasn't read Mark Shuttleworth's blog\non the different in design choice, you probably should:\n\n  http://www.markshuttleworth.com/archives/125\n\nAlthough I think Mark's estimation on performance\nbased on number of files is probably less important than\nthe number of commits.  It's the Samba history that\nseems to be bogging down Samba bzr trees across a network.\nI agree that local performance is generally acceptable.\n\nI'll have to play more with renames to fully convince\nmyself that I'm ok with git's approach.\n\n> I really think Bazaar has the best approach of the \n> various DVCS systems. They are also the (only?) one that\n> focussed on correctness of model first rather than speed\n> and that's really breaking them up at the moment.\n\nOther than tracking renames, what else do you mean by\n\"correctness\".  I haven't followed all the DSCM bake-offs\nand debates.\n\n> For the last half year I've used Bazaar for my Samba \n> code, but while  local performance has improved it's really,\n> really slow to push across the full history of Samba over the\n> wire all the time. Until lazy repositories/history horizons\n> (being able to push/pull a tree without its history) land,\n> I'll go back to Subversion for my Samba code.\n\nI truly like bzr as a project.  I do however, find the\nbranch checkouts in git much more intuitive and having\nall branches in < 100M is a huge deal for me.  I haven't\nplayed with bzr's smart server to compare it with the\ngit-daemon but the latter seems pretty snappy.\n\nBoth projects have the necessary branch, merge, and tag\nfeatures we need.  The lack of Win32 support in git is\nnot an issue for me.  Maybe someone else cares about that\nthough.\n\nThe things I like about git are:\n\n* git-svnimport and git-svn (for now)\n* fast-forwards and rebasing branches\n* speed\n* disk and RAM footprint\n\nQuestions about bzr are\n\n* Will svn2bzr.py actually work on the Samba sv repo now ?\n* What would the resulting size be?\n* What is the status of bzr repositories and cheap branching?\n\n> P.S. I'm a VCS n00b, please point out errors.\n\nMe too :-)\n\n\n\n\n\n\n\ncheers, jerry\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.6 (GNU/Linux)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org\n\niD8DBQFGgDK2IR7qMdg1EfYRArp/AKC7l9rVG1+Se0+Tb46K5LvB3JisNQCdFTM3\n1XieIhHmhwkXN95YlTVkb50=\n=0gGx\n-----END PGP SIGNATURE-----\n\n"}