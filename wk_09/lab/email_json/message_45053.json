{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14416 - doc/trunk/design/syn", "body": "Author: larry\nDate: Fri Jun  8 11:09:37 2007\nNew Revision: 14416\n\nModified:\n   doc/trunk/design/syn/S02.pod\n\nLog:\nAdded PROCESS as a superglobal namespace for easier apachefication of scripts.\n\n\nModified: doc/trunk/design/syn/S02.pod\n==============================================================================\n--- doc/trunk/design/syn/S02.pod\t(original)\n+++ doc/trunk/design/syn/S02.pod\tFri Jun  8 11:09:37 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 10 Aug 2004\n-  Last Modified: 2 Jun 2007\n+  Last Modified: 8 Jun 2007\n   Number: 2\n-  Version: 109\n+  Version: 110\n \n This document summarizes Apocalypse 2, which covers small-scale\n lexical items and typological issues.  (These Synopses also contain\n@@ -1460,6 +1460,7 @@\n     MY          # Lexical variables declared in the current scope\n     OUR         # Package variables declared in the current package\n     GLOBAL      # Builtin variables and functions\n+    PROCESS     # process-related globals\n     OUTER       # Lexical variables declared in the outer scope\n     CALLER      # Contextual variables in the immediate caller's scope\n     CONTEXT     # Contextual variables in any context's scope\n@@ -1674,6 +1675,28 @@\n \n =item *\n \n+For an ordinary Perl program running by itself, the C and\n+C namespaces are considered synonymous.  However, it certain\n+situations (such as shared hosting under a webserver), the actually\n+process may contain multiple virtual processes, each running its own\n+\"main\" code.  In this case, the C namespace holds variables\n+that properly belong to the individual virtual process, while the\n+C namespace holds variables that properly belong to the actual\n+process as a whole.  From the viewpoint of the C namespace\n+there is little difference, since process variables that normally\n+appear in C are automatically imported from C.\n+However, the process as a whole may place restrictions on the\n+mutability of process variables as seen by the individual subprocesses.\n+Also, individual subprocesses may not create new process variables.\n+If the process wishes to grant subprocesses the ability to communicate\n+via the C namespace, it must supply a writeable hash or some\n+such to all the subprocesses granted that privilege.\n+\n+When these namespaces are distinguished, the C<*> shortcut always refers\n+to C.  There is no twigil shortcut for C.\n+\n+=item *\n+\n Standard input is C<$*IN>, standard output is C<$*OUT>, and standard error\n is C<$*ERR>.  The magic command-line input handle is C<$*ARGS>.\n The arguments themselves come in C<@*ARGS>.  See also \"Declaring a MAIN\n\n"}