{"category": "ham", "to_address": "bugs-bitbucket@netlabs.develooper.com", "from_address": "Steve Peters (via RT) <parrotbug-followup@parrotcode.org>", "subject": "[perl #43033] [PATCH] Silence warning ", "body": "# New Ticket Created by  Steve Peters \n# Please include the string:  [perl #43033]\n# in the subject line of all future correspondence about this issue. \n# \n\n\nfree() assumes its passed a void *.  mem_sys_free() should take the same type\nof argument.  Assuming that what you are passing to free() will never be \nmodified is a bit risky and may prevent various memory debugging aids from\nworking correctly.\n\nSteve Peters\nsteve@fisharerojo.org\n\nIndex: src/gc/memory.c\n===================================================================\n--- src/gc/memory.c     (revision 18626)\n+++ src/gc/memory.c     (working copy)\n@@ -153,13 +153,13 @@\n */\n\n void\n-mem_sys_free(const void * const from)\n+mem_sys_free(void * from)\n {\n #ifdef DETAIL_MEMORY_DEBUG\n     fprintf(stderr, \"Freed %p\\n\", from);\n #endif\n     if (from)\n-        free((void *)from);\n+        free(from);\n }\n\n void\nIndex: include/parrot/memory.h\n===================================================================\n--- include/parrot/memory.h     (revision 18626)\n+++ include/parrot/memory.h     (working copy)\n@@ -19,7 +19,7 @@\n\n PARROT_API void *mem__sys_realloc(void *, size_t);\n #define mem_sys_realloc(x,y) (assert(x!=NULL), mem__sys_realloc(x,y))\n-PARROT_API void mem_sys_free(const void * const);\n+PARROT_API void mem_sys_free(void *);\n\n void *mem__internal_allocate(size_t, const char *, int);\n #define mem_internal_allocate(x) mem__internal_allocate(x, __FILE__, __LINE__)\n\n"}