{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "Vladimir Eremeev <wl2776@gmail.com>", "subject": "Re: [R] using lm() with variable formula", "body": "\nI was solving similar problem some time ago.\nHere is my script.\nI had a data frame, containing a response and several other variables, which\nwere assumed predictors.\nI was trying to choose the best linear approximation.\nThis approach now seems to me useless, please, don't blame me for that.\nHowever, the script might be useful to you.\n\n\nlibrary(forward)\n\n# dfr is a data.frame, that contains everything.\n# The response variable is named med5x\n# The following lines construct linear models for all possibe formulas\n# of the form \n# med5x~T+a+height\n# med5x~a+height+RH\n# T, a, RH, etc are the names of possible predictors\n\ninputs<-names(dfr)[c(10:30,1)]  # dfr was a very large data frame,\ncontaining lot of variables.\n# here we have chosen only a subset of them.\n\nfor(nc in 11:length(inputs)){ # the linear models were assumed to have at\nleast 11 terms\n# now we are generating character vectors containing formulas.\n\n  formulas<-paste(\"med5x\",sep=\"~\",\n                 \nfwd.combn(inputs,nc,fun=function(x){paste(x,collapse=\"+\")}))\n\n# and then, are trying to fit every\n\n  for(f in formulas){\n    lms<-lm(eval(parse(text=f)),data=dfr)\n\n   \ncat(file=\"linear_models.txt\",f,sum(residuals(lms)^2),\"\\n\",sep=\"\\t\",append=TRUE)\n  }\n}\n\n\nHmm, looking back, I see that this is rather inefficient script.\nFor example, the inner cycle can easily be replaced with the apply function.\n\n\nChris Elsaesser wrote:\n> \n> New to R; please excuse me if this is a dumb question.  I tried to RTFM;\n> didn't help.\n> \n> I want to do a series of regressions over the columns in a data.frame,\n> systematically varying the response variable and the the terms; and not\n> necessarily including all the non-response columns.  In my case, the\n> columns are time series. I don't know if that makes a difference; it\n> does mean I have to call lag() to offset non-response terms. I can not\n> assume a specific number of columns in the data.frame; might be 3, might\n> be 20. \n> \n> My central problem is that the formula given to lm() is different each\n> time.  For example, say a data.frame had columns with the following\n> headings:  height, weight, BP (blood pressure), and Cals (calorie intake\n> per time frame).  In that case, I'd need something like the following:\n> \n> \tlm(height ~ weight + BP + Cals)\n> \tlm(height ~ weight + BP)\n> \tlm(height ~ weight + Cals)\n> \tlm(height ~ BP + Cals)\n> \tlm(weight ~ height + BP)\n> \tlm(weight ~ height + Cals)\n> \tetc.\n> \n> In general, I'll have to read the header to get the argument labels.\n> \n> Do I have to write several functions, each taking a different number of\n> arguments?  I'd like to construct a string or list representing the\n> varialbes in the formula and apply lm(), so to say  [I'm mainly a Lisp\n> programmer where that part would be very simple. Anyone have a Lisp API\n> for R? :-}]\n> \n> \n\n-- \nView this message in context: http://www.nabble.com/using-lm%28%29-with-variable-formula-tf3772540.html#a10716815\nSent from the R help mailing list archive at Nabble.com.\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}