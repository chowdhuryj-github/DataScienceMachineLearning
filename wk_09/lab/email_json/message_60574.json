{"category": "ham", "to_address": "Volker Lendecke <Volker.Lendecke@SerNet.DE>", "from_address": "Jeremy Allison <jra@samba.org>", "subject": "Re: talloc_stack.c?", "body": "On Mon, Jul 02, 2007 at 09:15:10AM +0200, Volker Lendecke wrote:\n> \n> Sure. But with the talloc stack I want to make that more\n> fine grained. For example a routine to handle a single smb\n> request might have to do quite a bit of looping, and I want\n> to give that routine a chance to clean up memory earlier\n> than the main talloc loop would.\n\nI've now had a chance to read through Volkers' code and\nI must admit I like the idea - it does provide a standard\nway to attach a hierarchy of talloc contexts to a function\nwithout having to code everything up as a linked list.\n\nIf we ensuer all exits from the function delete that\ntalloc stack entry then we're guarenteed to free everything\nup before having to go back to the main loop.\n\nI could have used this in the ACL code rewrite I had\nto do recently, I ended up having to use the main loop\ntalloc context instead - which was too long lived for\nthe purpose.\n\nI'd vote +1 on this idiom.\n\nJeremy.\n\n"}