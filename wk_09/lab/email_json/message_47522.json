{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Damian Conway <damian@conway.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Jonathan Lang asked:\n\n> What's the rationale for keeping POD comments that are nested in block\n> comments visible to the POD parser?\n\nThe rationale is that Perl 6 and Pod 6 have been designed to be completely \nindependent and uncoupled. That way, you can look at a piece of Pod without \nworrying about any syntactic or semantic effects from the surrounding Perl \ncode...and look at a piece of Perl code without worrying about any syntactic \nor semantic effects from the surrounding Pod. We think that's highly valuable.\n\nThe separation of Perl and Pod also makes parsing each language considerably \neasier. As the two languages are now specified, the Perl parser doesn't have \nto worry about embedded Pod, since it can be removed in a preprocessor stage, \nor easily handled as part of the parser (since the Pod syntax is simple and \ndistinctive and morally equivalent to whitespace). Likewise the Pod parser \ndoesn't have to worry about Perl, since no Perl construct can affect the \nmeaning of embedded Pod. This second point is by far the more important, since \nit means that the (comparatively simple) Pod parser doesn't have to have a \nfull implementation of a (far more complex) Perl parser within it.\n\nThe separation also means that you can--potentially, at least--use Pod to \ndocument source in *any* language (i.e. not just Perl) provided that language \nallows for a preprocessor to strip the Pod from any source before compilation. \nAnd because Pod ignores \"ambient\" source code, the standard Pod parsing and \ntransformation tools will be able to be used, regardless of the interleaved \nlanguage.\n\n\n> It seems to me that the least surprising behavior would be for the POD\n> comment to be swallowed up by the block comment, on the basis that a\n> block comment ought to be equivalent to prefixing every line from its\n> start to end with a C<# >. Conversely, I'd expect a block comment\n> that's nested inside a POD comment to be passed to the POD parser as\n> ordinary POD text. In short, whichever kind of comment comes first\n> should dominate.\n\n\"Least surprise\" always depends on your underlying model of a phenomenon.\n\nMy underlying model is that documentation and the source it's documenting \nshould be entirely orthogonal. So, to me, it would be very surprising if a \nprogramming construct (block comments) interacted with documentation. Or vice \nversa.\n\nTo put it another way:\n\n     * At the Perl 6 level, all Pod is syntactically and semantically\n       invisible and therefore already equivalent to a comment.\n       So there's no need for Perl 6 comments to interact with Pod\n       (since commenting out a comment is a null operation, as far as\n       Perl is concerned).\n\n     * At the Pod 6 level, all Perl code is merely meaningless ambient\n       background noise and therefore already equivalent to whitespace.\n       So there's no need for Pod comments to interact with Perl 6 (since\n       commenting out whitespace is a null operation, as far as Pod is\n       concerned).\n\n\nFor all of the above reasons, I'm strongly convinced that the total separation \nof Church (i.e. documentation of belief) and State (i.e. specification of \naction) is as a good thing for programming languages as it is for nations. :-)\n\nDamian\n\n\n\n\n"}