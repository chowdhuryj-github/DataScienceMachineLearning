{"category": "ham", "to_address": "perl6-announce@perl.org, perl6-language@perl.org", "from_address": "Darren Duncan <darren@DarrenDuncan.net>", "subject": "ANNOUNCE - Muldis::DB v0.0.0 released, in p5+p6", "body": "All,\n\nI am pleased to announce the release of Muldis::DB version 0.0.0 for \nPerl 5 on CPAN.  You can see it now, with nicely HTMLized \ndocumentation, at:\n\n   http://search.cpan.org/dist/Muldis-DB/\n\nThis is the first formal release of Muldis::DB, which began \ndevelopment last year (under the temporary name of \"QDRDBMS\") as a \nrewrite of my previously released but never functional \"Rosetta\" \nproject.\n\nMuldis::DB is implemented as a library or open-ended framework for \nuse by larger frameworks or applications, and is a DBMS resource to \nthem.  This project comes in twin Perl 5 and Perl 6 versions which \nare feature identical; the former is for use in today's systems, and \nthe latter is for longer term use; if there is a case for doing so, \nsome parts may be moved to other languages later such as C.\n\nThe equivalent Perl 6 version of Muldis::DB to the CPAN release is \nbundled with the \"Pugs\" ( http://www.pugscode.org/ ) implementation \nof Perl 6, and its release to CPAN follows Pugs' schedule. \nMeanwhile, you can see it in the ext/Muldis-DB/ sub-directory of \nPugs' version control.\n\nWith both initial versions, Muldis::DB has zero external dependencies \nbut for Perl/Pugs itself and what is bundled with it; this should \nease installation.\n\nIf you want to read all the Muldis::DB documentation that exists now, \nI recommend doing so in this order:\n\n   1. http://search.cpan.org/src/DUNCAND/Muldis-DB-0.0.0/README\n   2. (opt) http://search.cpan.org/src/DUNCAND/Muldis-DB-0.0.0/Changes\n   3. http://search.cpan.org/dist/Muldis-DB/lib/Muldis/DB.pm\n   4. (opt) http://search.cpan.org/dist/Muldis-DB/lib/Muldis/DB/Copying.pod\n   5. http://search.cpan.org/dist/Muldis-DB/lib/Muldis/DB/AST.pm\n   6. http://search.cpan.org/dist/Muldis-DB/lib/Muldis/DB/Language.pod\n   7. (opt) http://search.cpan.org/dist/Muldis-DB/lib/Muldis/DB/Validator.pm\n   8. (opt) \nhttp://search.cpan.org/dist/Muldis-DB/lib/Muldis/DB/Engine/Example.pm\n   9. http://search.cpan.org/dist/Muldis-DB/lib/Muldis/DB/SeeAlso.pod\n   10. (opt) http://search.cpan.org/src/DUNCAND/Muldis-DB-0.0.0/TODO\n   11. (opt) anything else\n\nThe \"README\" file above includes the urls of the public version \ncontrol systems that host the development of Muldis::DB.  The Perl 5 \nversion is hosted in a public GIT repository hosted by Sam \"Mugwump\" \nVilain, for which I am thankful.  The Perl 6 version is hosted in the \nsame public Subversion repository as Pugs.\n\nMuldis::DB defines and implements a computationally complete \nprogramming language with integrated relational database \nfunctionality.  It is an open-ended framework with a separate \nprogrammatic API and pluggable implementing engines, one of which is \nbundled with the core so it works out of the box.  The framework is \nintentionally similar to the DBI framework in organization.\n\nMuldis::DB implements a D language (named \"Muldis D\") as defined by \nHugh Darwen and Chris Date, and presents a superior interface for \nworking with the relational model of data, contrasted with SQL. \nAnyone familiar with SQL or the relational model, or just programming \nin general, should find it easy to learn.\n\nOne general strength of Muldis D (truly relational) over SQL \n(quasi-relational) is that there is next to no object-relational \nimpedence mismatch since the true relational model can natively \nrepresent user-defined complex data type structures, constraints, and \noperators; there is no need for \"object-relational mappers\", except \nfor their role in tighter host language integration.\n\nAnother general strength of Muldis D is that any arbitrary business \nrules can be cleanly expressed as constraints on a database, so it is \neasier to trust a database to ensure its data state or transitions \nare always conformant to business rules, without hoisting such \nintegrity matters to the application, where it is a lot more \ndifficult to do it reliably.\n\nSince a D language can represent anything, a SQL database and/or SQL \nfeatures can also be emulated over one, which helps with legacy \nmigration; similarly, as much as is possible, existing SQL engines \ncan be used to implement Muldis DB over top of, in which case Muldis \nDB acts as a SQL generator to access pre-existing databases in new \napplications.\n\nConceptually speaking, Muldis::DB is either a replacement for DBI, or \na replacement for any SQL DBMS itself, depending on how you use it; \nout of the box it replaces both, but plug-in bridges can be made that \nbridge to either.\n\nTaking the Perl 6 development process as a model, Muldis D has an \nauthoritative human-readable design document (the Language.pod file), \nwhich is analagous to the Perl 6 Synopsis documents, and one or more \nseparate conforming implementations (the other files).  It is very \nfeasible that Muldis D could have multiple implementations, over any \nlanguages, besides the 2 (Perl 5 and Perl 6) that exist now.\n\nMore information is in the Muldis::DB documentation.\n\nI would probably like to say that Muldis::DB would be a panacea to \nall your database ills, but instead I see it more like Muldis::DB \nshould provide a more solid skeleton on which to build the solutions \nto all your database ills than are any other solutions.  I will \ncontribute to the solutions as best I can.\n\nSeveral public email-based forums for Muldis::DB now exist (with \npublic archives), all of which you can reach via \nhttp://mm.DarrenDuncan.net/mailman/listinfo (note that Mailman's \nmonthly password reminder email is turned off).  There are currently \n3, for 'announce', 'devel', 'users', modelled after the main lists \nfor DBI.\n\nI invite you to join one or more of these lists (if you haven't \nalready), to better facilitate discussion, support, and group \ndevelopment.\n\nAs of this version-zero release, Muldis-DB is officially in pre-alpha \ndevelopment status.  A lot of documentation and functionality is \npresent, but a lot isn't.  What is mostly done is the higher level \ndocumentation plus an alpha-quality but fundamentally stable public \nAPI implementation.  What is mostly undone is the reference engine \nimplementation, the test suite, and documentation of the API details. \nWhat is already present should be sufficient to begin study of \nMuldis-DB such that it can actually be put to use within the next few \nweeks or months as Muldis-DB is fleshed out.  Also, it should be \npossible now to start writing code that uses or extends it.\n\nTo conclude, I would be very greatful for any and all kinds of \nassistence with the Muldis::DB framework that you can provide, which \nincludes building or sponsoring features and extensions.\n\nProbably the very first kind of help that I could use the most is \nwith writing cookbook-type examples of using Muldis::DB and/or FAQ \ndocuments.  This both helps people learn how to use it in an \neffective manner, and also helps flesh out deficiencies in \nMuldis::DB.  Both the \"how do I define this kind of database\" variety \nand \"how do I express this SQL in Muldis D\" variety are helpful. \nThese examples would be released as a Muldis::DB::Cookbook \ndistribution.\n\nI also welcome general feedback, constructive criticism, suggestions, \ncorrections, and questions.\n\nNote that I prefer any responses to happen on-list, or that you sign \nup to and post to a muldis-db list (only list subscribers may post), \nso that that and any replies can be for the group's benefit, and to \nsave me from repeating the same answers ad nauseum.  Unless the \nresponse is not suitable for public discourse, in which case, sure, \ngo private email; ditto if you're not sure about appropriateness.\n\nThank you in advance.\n\n-- Darren Duncan\n\n"}