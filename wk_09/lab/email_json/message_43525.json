{"category": "ham", "to_address": "tridge@samba.org", "from_address": "\"Gerald (Jerry) Carter\" <jerry@samba.org>", "subject": "Re: getting rid of mkproto.sh from Samba3", "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\ntridge@samba.org wrote:\n\n> discussions like these are really good! We all have \n> things to learn about good coding practices. A lot of what\n> I have learnt has come from discussions like these\n> within various projects, so don't cut it short just\n> because we don't agree.\n\nI'm not tailing off because we disagree.  I just think this\nis more in the area of philosophical debates.  Everything\nhas a tradeoff.  For example, fully autogenerated code\nlike VB can turn lawyers into programmers (no offense\nto lawyers) and yet we would really scoff at the notion\nthat that VB is a good thing for large, maintainable\nprojects.\n\n[note to reader, you may skip to the last paragraph now\n and avoid the boring debate...]\n\nAutogenerated headers are like sharp knives.  They can be\nuse and have their place in some areas.  But they can cause\na lot of damage if used in correctly.  proto.h has caused\na lot of damage in Samba IMO.  It's has led us to the\nlibbigballofmud.so in the Makefile.  In fact, I would argue,\nlike James, that it has promoted code duplication and not\ncode reuse.\n\nThe turnover of the developer base on in open source means\nthat I value maintainable code above convenient or clever\ncode.  proto.h is convenient and clever, but not maintainable.\n\nA good example of code that is reused all the time is\ndlinklist.h.  not one even thinks of using any other\nlist implementation in Samba.  But a example of code\nthat everyone always searches for is the name resolution\nroutines.\n\nAnd if autogenerated headers are so great, why are tdb.h\nand ldb.h checked into the source tree?\n\nYour points about static functions just don't hold any\nconvincing truth for me.  In fact, autogenerating headers\nmakes such functions more likely to be placed in the header\nas the programmers has to consciously think about what\nis placed in the public and private headers.\n\nHere's another example.  Just because a function can\nbe used from a library even though its not declared in\nthe header does not mean that you should use it.  There\nmust be some reason why the author decided not to place\nit there.  For example, (ironic that I'm using the MIT\nkrb5 libs here since I don't hold them up as a model\nof great code), krb5_rc_close() is not exported in\nkrb5.h.  But if I grep the src/lib/krb5/ it's in there.\nThe function cannot be declared static because it is\nused in other files in src/lib/krb5/ but it is certainly\nnot public.  It's intended to be be called internally when\nan application closes the auth context.\n\nYou might argue that an tool to autogenerate the headers\ncould be smart enough to know what to do.  My point is that\nonce you reach that point, you have to embed so much\ninformation in the tool or source code that you should just\nbe writing the header yourself.\n\nSo in summary, your points are not technical,  only philosphical.\nWhich is why until I have a replacement system to propose,\nit is fruitless to try to get censuses on the philosophical point\nof generating proto.h.  Consensus will only be possible when\nreviewing specific patches.\n\n\n\n\n\n\ncheers, jerry\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.6 (GNU/Linux)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org\n\niD8DBQFGZqPTIR7qMdg1EfYRAndyAKDAh/AETmWs7Hj0juvLIo2k1SRUZQCgg9lJ\njIVCJo0PCUNpjKW4Tklm4Sg=\n=Mxfi\n-----END PGP SIGNATURE-----\n\n"}