{"category": "ham", "to_address": "Carl Worth <cworth@redhat.com>", "from_address": "Dan Williams <dcbw@redhat.com>", "subject": "Re: [sugar] Cairo tile engine,\n\tand accessing 565 buffers\tfrom\tcairo and C", "body": "On Mon, 2007-04-16 at 16:03 -0400, Dan Williams wrote:\n> On Mon, 2007-04-16 at 10:47 -0700, Carl Worth wrote:\n> > On Sun, 15 Apr 2007 01:30:55 -0400, Dan Williams wrote:\n> > > On Sat, 2007-04-14 at 17:10 -0700, Don Hopkins wrote:\n> > > > I've read on the mailing list that Cairo supports 565 (\"begrudgingly\", \n> > > > whatever that implies).\n> > > \n> > > It means that cairo supports 565 only as a compatibility option, but\n> > > will _not_ allow you to create new surfaces as 565.  Basically, if you\n> > > hand it a surface or pixel data that is in 565 format, it can use that\n> > > data.  But you cannot create 565 surfaces manually.  Cairo's native\n> > > format is 32 bit RGB with alpha.\n> > \n> > I don't know where these rumors got started, but there's a bunch of\n> > misinformation in the above. Apparently I've done a poor job of\n> > explaining things somewhere, so I'm hoping I can straighten some of it\n> > out now.\n> \n> Well, there's a slight omission on my part, but it's not really\n> misinformation.  I don't expect cairo to support all the bit depths and\n> image formats that exist.  But the problem is that Cairo just doesn't\n> have very good support for 16bpp right now _with_alpha_.\n\nDarn evolution, I hit Ctl+Return (Send) when I meant something else...\nOh well.\n\n> For starters, from cairo-deprecated.h:\n\n * Additionally, the support for the RGB16_565 format was never\n * completely implemented. So while this format value is currently\n * deprecated, it may eventually acquire complete support in the future.\n */\n#define CAIRO_FORMAT_RGB16_565 4\n\ncairo.h:\n\ntypedef enum _cairo_format {\n    CAIRO_FORMAT_ARGB32,\n    CAIRO_FORMAT_RGB24,\n    CAIRO_FORMAT_A8,\n    CAIRO_FORMAT_A1\n    /* The value of 4 is reserved by a deprecated enum value.\n     * The next format added must have an explicit value of 5.\n    CAIRO_FORMAT_RGB16_565 = 4,\n    */\n} cairo_format_t;\n\nThat doesn't really inspire confidence in the support of 565.\n\n> \n> So you can certainly get 16bpp 565 surfaces manually as a _side_ effect\n> of create_similar on a 16bpp Xlib window if X is running in 16bpp\n> mode.  \n> \n> But here's where the problems start...  Given a 16bpp 565 xlib surface:\n> \n>     source = cairo_surface_create_similar (target,\n> \t\t\tCAIRO_CONTENT_COLOR,\n> \t\t\twidth, height);\n> \n> gives you a 565 surface.\n> \n>     source = cairo_surface_create_similar (target,\n> \t\t\tCAIRO_CONTENT_COLOR_ALPHA,\n> \t\t\twidth, height);\n> \n> gives you a 32-bit ARGB surface.\n> \n> I can understand why; but in our case it's undesirable.  We'd rather\n> have 16bpp, but _some_ kind of alpha.  Like fontconfig property binding\n> with strong and weak.  The current code ensures that all the colors\n> possible in the target are possible in 'source', but we'd rather keep\n> the bit depth at 16bpp and get 1 or 4 bits of alpha rather than step up\n> to 32bpp.\n> \n> There are a few issues here.\n> \n> 1) Since we're running in 565 in X, obviously pixel smashing has to\n> happen if there's any alpha in the pixmaps we're sending to X.  And\n> that's what's killing us right now.\n> \n> 2) Even if cairo did hand back a 1555 or 4444 surface, we'd still have\n> to composite it and smash it down to 565.  And pixman doesn't have\n> MMX-accelerated code for that anyway.\n> \n> 3) Maybe we should be running in 1555 or 4444 mode instead of 565, so\n> that we could get some native alpha without having to smash pixels.  But\n> of course we don't have MMX acceleration in pixman for these formats\n> either.\n> \n> Ideally we could ask Cairo to create a surface of _any_ type we want,\n> either 1555, 4444, 0565, 8888, 0888, 0444, etc.  But cairo can't do that\n> AFAIK.  That's why I said \"grudgingly supports 565\" and \"it's native\n> format is really 32bpp\".  When I say \"manually create\" a surface, I mean\n> telling cairo _exactly_ what format of surface you want.\n\nIn the end, this is all pretty pointless since we'll be hopefully moving\nto 24-bit color when we switch to the LX.  Then we can get all the\nMMX-accelerated goodness and we won't have to deal with pixel smashing\nin pixman in either X or cairo.\n\nAnd that's why I don't really mind that much that cairo doesn't really\nwork as tightly as we'd like with 565, because we hopefully just won't\ncare any more after the move to the LX.  Again, I'm not trying to be a\ndick or spread lies, just trying to explain the limitations of working\nwith Cairo as we've got it now.  Nothing personal.\n\nDan\n\n> > Here are some facts about cairo and the support it has for X visuals\n> > of various depths and image formats of various depths.\n> > \n> > First, understand that cairo provides different backends that allow\n> > the user to explicitly create a surface with one backend or\n> > another. Cairo also provides a way to create what it calls a \"similar\"\n> > surface, where the application does not explicitly select the backend\n> > surface type, but just passes an existing surface and asks cairo to\n> > create a surface of the most suitable type.\n> > \n> > I think the two cairo backends of interest in the current discussion\n> > are the \"xlib\" and \"image\" backends. The xlib backend is used for\n> > drawing to an X11 Drawable (a Window or Pixmap). The image backend is\n> > used for drawing to a buffer of data in the application's memory\n> > space. I'll discuss the capabilities of each, and then the issues of\n> > using the \"create_similar\" interface.\n> > \n> > xlib\n> > ----\n> > For the xlib backend, if you have the X Render extension in your X\n> > server, then you can use cairo to draw to an X11 Drawable of any depth\n> > supported by the X server. You can do this by passing either an\n> > XRenderPictFormat or a Visual describing the desired depth to one of\n> > the following functions:\n> > \n> > \tcairo_xlib_surface_create_with_xrender_format\n> > \n> > \tcairo_xlib_surface_create\n> > \n> > So, on the OLPC, where you definitely have a server that supports the\n> > Render extension, you should have no problem using cairo to draw to an\n> > X11 Drawable with a 565 format.\n> > \n> > (Note: There are known bugs in cairo in drawing to an X server without\n> > the Render extension and targeting an xlib surface with a format that\n> > does not also exist as a supported format in the image backend. These\n> > bugs should not affect OLPC as the Render extension should be present\n> > in the X server. And, we are working to eliminate these bugs before\n> > cairo 1.6 is released.)\n> > \n> > image\n> > -----\n> > The image backend (cairo_image_surface_create) is used when the\n> > application wants to read/write to a buffer of data directly as well\n> > as drawing to it with cairo. If this isn't the case, this backend\n> > really should not be selected by the application.\n> > \n> > The image backend does currently support only a very limited set of\n> > formats, (ARGB32 and RGB24), both of which are 32-bits-per-pixel\n> > formats.\n> > \n> > It's conceptually possible to extend the list of formats supported by\n> > the image backend, but not very appealing until we have something\n> > besides humans to generate the combinatorial explosion of code needed\n> > to handle each format.\n> > \n> > In the meantime, if you are really concerned about the performance\n> > when targeting an xlib surface, then you should really be using xlib\n> > surfaces for your source data, not image surfaces.\n> > \n> > create_similar\n> > --------------\n> > In addition to the cairo__surface_create functions discussed\n> > above which involve the application explicitly selecting a backend to\n> > use, cairo provides one additional interface:\n> > \n> > \tcairo_surface_create_similar\n> > \n> > With this interface, the application is not selecting the backend to\n> > use, but instead cairo will select one for the application to best\n> > meet its needs. The user expresses these needs by passing both an\n> > existing surface and a description of the kind of \"content\" that the\n> > new surface will hold, (whether color only, alpha only, or both color\n> > and alpha). And cairo does the best it can to meet these needs.\n> > \n> > I haven't seen details of the code that is being worked with here, but\n> > I'm guessing that if 32-bit image surfaces are being generated in\n> > undesirable situations, it might be through this interface. I'm\n> > guessing that based on a statement such as:\n> > \n> > > > But the surfaces it's handing my C code are 32 bit (RGB or ARGB).\n> > \n> > That doesn't sound like somebody directly passed CAIRO_FORMAT_ARGB32\n> > or CAIRO_FORMAT_RGB24 to cairo_image_surface_create, (in which case\n> > the result wouldn't be surprising).\n> > \n> > So, let's imagine the user has an X11 Drawable with a 565 visual, and\n> > has done cairo_xlib_surface_create to create a surface named \"target\"\n> > from that. Then, let's imagine the user wants to create an\n> > intermediate surface that will be used as a source to draw to this\n> > target.\n> > \n> > If the user does not need to store any alpha content to the surface,\n> > then the user would call:\n> > \n> >     source = cairo_surface_create_similar (target,\n> > \t\t\t\t\t   CAIRO_CONTENT_COLOR,\n> > \t\t\t\t\t   width, height);\n> > \n> > And in this case, I fully expect cairo to return a new xlib surface\n> > based on a Drawable with a 565 visual. If you're seeing anything else\n> > in a situation like this, please let me know so that we can fix it\n> > right away.\n> > \n> > Now, if the user actually needs to store alpha and color to the source\n> > surface, the user would call:\n> > \n> >     source = cairo_surface_create_similar (target,\n> > \t\t\t\t\t   CAIRO_CONTENT_COLOR_ALPHA,\n> > \t\t\t\t\t   width, height);\n> > \n> > And what should happen in this case?\n> > \n> > From the problem reports, I'm guessing that this is the problematic\n> > code path, and that the result being returned here is an xlib surface\n> > with a 32-bit depth visual. If so, then drawing with this source to\n> > the original target will involve the X server doing 8888 -> 565\n> > conversion.\n> > \n> > What other option is there? Is there some other visual that the X\n> > server provides that can store color and alpha and would work more\n> > efficiently with a 565 target surface? If so, it should be a trivial\n> > matter to fix cairo_surface_create_similar to use that visual in the\n> > surface that it creates. Please let me know.\n> > \n> > > > How can I get ahold of the actual 16 bit 565 buffer that X can directly \n> > > > and efficiently draw on the screen?\n> > \n> > Now, this looks like a totally separate question. If you've got an X11\n> > Drawable with a 565 visual, then any 16-bit buffer that exists is\n> > accessible by the X server, and not by cairo, (which is client-side by\n> > definition).\n> > \n> > I don't know if the X server has any means to allow the client to get\n> > access to that buffer, (in general it might exist in video-card memory\n> > and not be readily accessible by the CPU anyway). Maybe some of the X\n> > experts hacking on the OLPC know some trick, (XShm or something?). But\n> > regardless, tricks like that would be outside the scope of cairo\n> > anyway.\n> > \n> > Meanwhile, I still don't completely understand what problem it is that\n> > you are trying to solve by imagining a cairo surface that allows both\n> > the application and the X server do have direct access to a common\n> > buffer. If you need direct-application access to modify the buffer,\n> > then wouldn't you be happy controlling its contents yourself? That is,\n> > do you really need cairo to be able to draw to that same buffer as\n> > well? If not, perhaps something outside the scope of cairo would suit\n> > you better anyway?\n> > \n> > I'd be glad to answer further questions on these topics, and help out\n> > wherever possible, (including augmenting cairo as needed). But I\n> > definitely would need some help understanding the problems better,\n> > (because so far I haven't understood anything that could be changed in\n> > cairo to help with any of the problems being described).\n> > \n> > Thanks,\n> > \n> > -Carl\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}