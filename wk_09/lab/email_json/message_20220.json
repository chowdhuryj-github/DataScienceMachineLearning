{"category": "ham", "to_address": "Rob Dixon <rob.dixon@350.com>", "from_address": "Goksie <myklass@gmail.com>", "subject": "Re: creating hash from scalar variable", "body": "Rob Dixon wrote:\n> Matthew J. Avitable wrote:\n>>\n>> Given the original string ...\n>>> my $test =\n>>>   'NAS-IP-Address = 192.168.42.1\n>>>   .......\n>>>   Acct-Unique-Session-Id = \"87d380e1881d226c\"\n>>>   Timestamp = 1177282824';\n>>>\n>>\n>> You could also invoke perl 5.8's ability to treat an in-memory string\n>> as a file:\n>>\n>> ## get a filehandle on $test\n>> open(my $fh, '<', \\$test) or die \"Unable to open scalar ref for\n>> reading: $!\";\n>>\n>> while (my $line = <$fh>) {\n>\n> Hmm. I don't feel this is an improvement over just\n>\n>  foreach (split /\\n/, $line) {\n>    :\n>  }\n>\n> or even\n>\n>  while ($test =~ /(.*\\n?)/g) {\n>    my $line = $1;\n>    :\n>  }\n>\n> to avoid duplicating the whole string at once.\n>\n>>    ## split on '=' with a max of two resulting fields, clear spaces\n>> adjacent to '='.\n>>    ## clear newlines as well.\n>>    chomp ( my ($k, $v) = split(/\\s*=\\s*/, $line, 2) );\n>\n> Why chomp here? You're chomping $k, which /can't/ end in a record, as\n> well as $v.\n> Just\n>\n>  chomp $line;\n>  my ($k, $v) = split /\\s*=\\s*/, $line, 2;\n>\n> is more appropriate.\n>\n>>\n>>    ## clear out the quotes in the value\n>>    $v =~ s/\"//og;\n>\n> Why use the /o modifier when there are no variables being interpolated\n> into\n> the regex?\n>\n> Even better (in terms of speed) would be\n>\n>  $v =~ tr/\"//d;\n>\n> although I admit I tend to use s/// exclusively myself.\n>\n> Also why remove the quotes when the OP didn't say he wanted to, and\n> may actually\n> need them?\n>\n>>    ## do something with your key and value:\n>>    print \"Key is $k,  Value is: $v\\n\";\n>>\n>> }\n>>\n>> close $fh;\n>>\n>>\n>> Reading a file line by line is a fairly recognizable pattern to perl\n>> programmers of all levels, so it may assist future maintainers.\n>\n> ...unless it stops working, when opening a string on a filehandle is a\n> fairly /unrecognisable/ pattern, and the maintainer may be stumped!\n>\n> Cheers,\n>\n> Rob\n>\ni have tried all,\n\nand I still stand by my confidence that perl community is still the most\nvibrant of all.\n\nThank you all,\n\nGoksie\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}