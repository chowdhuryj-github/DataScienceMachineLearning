{"category": "ham", "to_address": "Beginners List <beginners@perl.org>", "from_address": "\"Mumia W.\" <mumia.w.18.spam+nospam@earthlink.net>", "subject": "Re: $1 $2 var confusion", "body": "On 05/12/2007 09:21 AM, Steve Bertrand wrote:\n> I have two scenarios here, and in the first one, I am not seeing the \n> logic I would normally expect. I'll compact the code as to save everyone \n> from scrolling. I have strict and warnings enabled (as I always do). Can \n> someone tell me why in the first case $1 isn't initialized and in the \n> second case it is?\n> \n> \n> # First run(catch $1 and $2, check $2 for correctness (it is), print $1)\n> \n> my $email = 'steveb@domain.com';\n> $email =~ /(.*)@(.*)/;\n> if ($2 !~ /domain\\.com/) {\n>         print \"var 2 is bad\\n\";\n> }\n> print \"$1\\n\";\n> \n> /** prints 'uninitialized' for line 'print \"$1\\n\";**/\n> \n> \n> # Second run(same as above, but the if will fail:\n> \n> my $email = 'steveb@wrong.com';\n> $email =~ /(.*)@(.*)/;\n> if ($2 !~ /domain\\.com/) {\n>         print \"var 2 is bad\\n\";\n> }\n> print \"$1\\n\";\n> \n> /** prints\n> var 2 is bad\n> steveb\n> */\n> \n> Why does the $1 initialize and print only if the 'if' fails?\n> \n> TIA,\n> \n> Steve\n> \n\nThat happens because the match variables ($1, $2, ...) are only changed \nwhen a regular expression matches; otherwise, they are left alone.\n\nIn the first case, \"$2 !~ /domain\\.com/\" succeeds but does not capture \nanything, so the numbered match variables are unset.\n\nYour situation reinforces the rule that you should always test if the \nmatch succeeded before you attempt to use the match variables:\n\n     my $email = 'steveb@domain.com';\n     my @f = (undef, $email =~ /(.*)\\@(.*)/);\n\n     (@f > 1) && ($f[2] =~ /domain\\.com/ ?\n         print \"$f[1]\\n\" : print \"var 2 is bad\\n\" );\n\nThe test \"@f > 1\" is my way of testing if the match succeeded.\n\nHTH\n\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}