{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: [svn:parrot] r18381 - trunk/include/parrot", "body": "On Wednesday 09 May 2007 12:53:57 Nicholas Clark wrote:\n\n> On Tue, May 01, 2007 at 04:41:22PM -0700, particle@cvs.perl.org wrote:\n> > +\n> > +#define STRING_IS_NULL(s) ((s) == NULL)\n> > +#define STRING_IS_EMPTY(s) !(int)(s)->strlen\n\n> I'm really not convinced that the first macro brings any benefit.\n> I'm not totally sure that the second does either, given that both\n> operations are conceptually very simple.\n>\n> Code is read far more often than it is written, and I don't think that the\n> typing savings outweigh the learning curve of two more macros, and the\n> memory needed to keep two more in one's head.\n\nDoes !(int)(s)->strlen really scan as quickly and easily as STRING_IS_EMPTY?\n\n> Arguably one of the mistakes of Perl 5 was to use too many macros, which\n> unintentionally contributes to obfuscating the code.\n\nIt's not as if *these* are SvPVNL and SvPVZ, or was that SVpvNL or SvPv \nor....?\n\n> Is it likely that all future use of these two will be paired? If so, its it\n> a better idea to abolish them and replace with one macro\n> STRING_IS_NULL_OR_EMPTY() ?\n\nThat, I could understand.\n\n-- c\n\n"}