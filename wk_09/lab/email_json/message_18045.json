{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "\"Luke Palmer\" <lrpalmer@gmail.com>", "subject": "Re: [svn:perl6-synopsis] r14385 - doc/trunk/design/syn", "body": "On 4/27/07, Larry Wall  wrote:\n> : Are you sure you want to guarantee left-to-right starting\n> : position order?  If there are multiple processors available, and\n> : in a lazy context, it may be preferrable to not guarantee any\n> : order.  Then, if one processor that starts at a later position\n> : but which finds a match quickly while another processor starts\n> : earlier but needs to take a lot longer to find its first match,\n> : the lazy processing can start working on the first match found\n> : at the earliest possible time.\n>\n> No, I'm not sure, which is why I put in the conjectures.  :-)\n\nRight.  It's a tricky issue from an implementation standpoint.  A\nbacktracking NFA most naturally implements it in left-to-right\nstarting position order, whereas a DFA most naturally implements it in\nleft-to-right *ending* position order.\n\nHmm, do we have lazy sets?\n\nLuke\n\n"}