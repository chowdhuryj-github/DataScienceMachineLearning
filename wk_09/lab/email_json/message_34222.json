{"category": "ham", "to_address": "Tom Phoenix <tom@stonehenge.com>, beginners@perl.org", "from_address": "Martin Barth <barth@bitbone.de>", "subject": "Re: syscall getpwnam and changing authetication on system", "body": "Hi,\n\nafer trying a lot of stuff i figured out that following code line works:\n\n\nmy ($login,$pass,$uid,$gid) = (getpwnam($user),rand);\n\nwithout rand it's still the old user... can anyone explain why perl seems to cache this? (even without eval)\n\nTom Phoenix schrieb:\n> On 5/18/07, Martin Barth  wrote:\n\n> \n> I suspect that your perl has cached the result of compiling that\n> string, which is to say it's cached the old uid. If you need an eval\n> string to be repeatedly re-compiled at runtime (and you fail to notice\n> that this is a sign that your algorithm needs fixing) simply ensure\n> that it's a different string each time you eval it. Perhaps something\n> like this:\n> \n>  my $serial;\n>  my $evil_result = eval(\"getpwnam('christian')\" . \"\\n#\" . ++$serial);\n> \n> But this is no endorsement of the evil eval. You've found merely one\n> of its evil pitfalls. Avoid, avoid, avoid.\n> \n> Cheers!\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}