{"category": "ham", "to_address": "p6l <perl6-language@perl.org>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Re: Should a dirhandle be a filehandle-like iterator?", "body": "brian d foy wrote:\n> As I was playing around with dirhandles, I thought \"What if...\" (which\n> is actualy sorta fun to do in Pugs, where Perl 5 has everything\n> documented somewhere even if nobody has read it).\n>\n> My goal is modest: explain fewer things in the Llama. If dirhandles\n> were like filehandles, there's a couple of pages of explanation I don't\n> need to go through.\n>\n> Witness:\n>\n> I can iterate through the elements of a named array with =@array:\n>\n>    my @a = < 1 2 3 4 5 >;\n>    for =@a { .say }   # but not =< 1 2 3 4 5 > :(\n>\n> and I can read lines from a file:\n>\n>    for =$fh { .say }\n>\n> Should I be able to go through a directory handle that way too? A \"yes\"\n> answer would be very pleasing :)\n>\n>    my $dh = \"doc\".opendir;\n>    for =$dh { .say }    # doesn't work in pugs\n>\n> And, since we're using objects now, .closedir can really just be\n> .close, right?\n\nPlease.  I've always found the \"opendir ... readdir ... closedir\" set\nto be clunky.\n\nAlso: why distinguish between \"open\" and \"opendir\"?  If the string is\nthe name of a file, 'open' means \"open the file\"; if it is the name of\na directory, 'open' means \"open the directory\".  If it's the name of a\npipe, it opens the pipe.  And so on.\n\nNote that the above could be further shorthanded, as long as you don't\nneed the directory handle after the loop:\n\n    for =\"doc\".open { .say }\n\n--\nJonathan \"Dataweaver\" Lang\n\n"}