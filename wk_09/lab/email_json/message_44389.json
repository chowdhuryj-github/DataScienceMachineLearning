{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "Tom Hansen <tomh@uwm.edu>", "subject": "[R] Using Akima with nearly-gridded data", "body": "\nI am using the Akima interpolation package to generate an interpolated \ncolor contour plot.  It is working very well, except for one problem.  \nThe data that I have represents real-time readings from a thermistor \nstring vs. time, so the data points are often very nearly in a \nrectangular array, since the thermistors are read at regular time \nintervals and they are equally spaced physically.  However, readings are \nsometimes delayed or missed, so I cannot assume that it will be a \nregular grid.  Hence Akima.\n\nHowever, Akima simply will not work if the first three points are \ncollinear (which is easy to get around), and it often leaves blank \ntriangles in seemingly arbitrary places in the plot.  It seems that the \nalgorithm in Akima for building the triangles that it uses internally to \ndo the interpolation is having a very hard time dealing with nearly \nregularly-spaced data points.\n\nThe only way I have found to get Akima to work, is to slightly \"perturb\" \nthe data points by adding random seconds to the times (the temperatures \nare read every 5 minutes, so a few seconds aren't going to matter).  \nMore recently I have had some luck simply feeding the points into the \nalgorithm in a pseudo-randomized order.  But then, of course, the \noutcome is largely the luck of the draw and sometimes the plot still \nends up with a scattering of white triangles, or artifacts on the edges \nof the plot.\n\nDoes anyone have any suggestions as to how to make this work consistently?\n\n-- \nTom Hansen\nSenior Information Processing Consultant\nUWM Great Lakes WATER Institute\nwww.glwi.uwm.edu\ntomh@uwm.edu\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}