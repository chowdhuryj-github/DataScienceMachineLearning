{"category": "ham", "to_address": "Nikolay Ananiev <ananiev@thegdb.com>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: Is Parrot 1.0 too late?", "body": "Nikolay Ananiev wrote:\n> \n> So, is one of parrot's biggest strengths gone? Are we too late?\n> Why would the developers use Parrot instead of JVM/CLR/Mono? \n\nWe're certainly pleased that we kicked off a revolution in virtual \nmachines, and that others are beginning to catch on to the fact that \nthey'll have to support dynamic languages to compete. But, it would be a \nlittle silly to throw in the towel just when others are beginning to \nfollow your lead. (And I do mean beginning. They're making great \nstrides, but I still hear strange comments like \"We support all features \nof dynamic languages. Of course some features, like multiple \ninheritance, may be slow, but we don't encourage the use of those \nfeatures.\" from the JVM team.)\n\nThe plan to run Perl, Python, PHP, Ruby, etc. is not the only innovative \nfeature of Parrot. To list a few:\n\n- PGE provides parsing tools that are light years ahead of what's in \ncommon use today (what's commonly used today hasn't seen much in the way \nof technological advances in the past 20 years).\n\n- TGE is a powerful tool for manipulating trees of data, like the output \nof a parse, or an abstract syntax tree (think of it as XSLT on steroids).\n\n- Those parsing and transformation tools are valuable both for writing \ncompilers and for data processing tasks (handling database output, \nscreen scraping, combination and modification of Atom streams in an \nAJAXian way, etc.), giving a big boost in ease of use for both areas.\n\n- Parrot is a register-based virtual machine instead of stack-based like \n.NET, Mono, JVM. Register-based machines require fewer instructions to \ncomplete the same operations (no need to push and pop the stack), \neliminating some unnecessary overhead. JIT-ed code is also \nregister-based (since the actual machine under the virtual machine is \nregister-based), so the register-based bytecode makes that \ntransformation simpler.\n\n- Parrot moves beyond the fragile stack-based control flow common to \nvirtual machines today, to a continuation-based control flow. (I can \nrecommend a few good books and articles if you're curious.)\n\nWhile the other VMs are catching up to supporting the features of \ndynamic languages from 10-40 years ago, we plan to open the way for a \nwhole new breed of dynamic languages. Will others follow our example? I \n  won't complain if they do. \"Imitation is the sincerest form of flattery.\"\n\nAllison\n\n"}