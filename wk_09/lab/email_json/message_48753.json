{"category": "ham", "to_address": "Dirk Eddelbuettel <edd@debian.org>", "from_address": "Marc Schwartz <marc_schwartz@comcast.net>", "subject": "Re: [R] model.frame: how does one use it?", "body": "On Fri, 2007-06-15 at 10:47 -0500, Dirk Eddelbuettel wrote: \n> Philipp Benner reported a Debian bug report against r-cran-rpart aka rpart.\n> In short, the issue has to do with how rpart evaluates a formula and\n> supporting arguments, in particular 'weights'.  \n> \n> A simple contrived example is\n> \n> -----------------------------------------------------------------------------\n> library(rpart)\n> \n> ## using data from help(rpart), set up simple example\n> myformula <- formula(Kyphosis ~ Age + Number + Start)\n> mydata <- kyphosis\n> myweight <- abs(rnorm(nrow(mydata)))\n> \n> goodFunction <- function(mydata, myformula, myweight) {\n>   hyp <- rpart(myformula, data=mydata, weights=myweight, method=\"class\")\n>   prev <- hyp\n> }\n> goodFunction(mydata, myformula, myweight)\n> cat(\"Ok\\n\")\n> \n> ## now remove myweight and try to compute it inside a function\n> rm(myweight)\n> \n> badFunction <- function(mydata, myformula) {\n>   myweight <- abs(rnorm(nrow(mydata)))\n>   mf <- model.frame(myformula, mydata, myweight)\n>   print(head(df))\n>   hyp <- rpart(myformula,\n>                data=mf,\n>                weights=myweight,\n>                method=\"class\")\n>   prev <- hyp\n> }\n> badFunction(mydata, myformula)\n> cat(\"Done\\n\")\n> -----------------------------------------------------------------------------\n> \n> Here goodFunction works, but only because myweight (with useless random\n> weights, but that is not the point here) is found from the calling\n> environment. \n> \n> badFunction fails after we remove myweight from there:\n> \n> :~> cat /tmp/philipp.R | R --slave\n> Ok\n> Error in eval(expr, envir, enclos) : object \"myweight\" not found\n> Execution halted\n> :~>    \n> \n> As I was able to replicate it, I reported this to the package maintainer.  It\n> turns out that seemingly all is well as this is supposed to work this way,\n> and I got a friendly pointer to study model.frame and its help page.  \n> \n> Now I am stuck as I can't make sense of model.frame -- see badFunction\n> above. I would greatly appreciate any help in making rpart work with a local\n> argument weights so that I can tell Philipp that there is no bug.  :)\n> \n> Regards, Dirk\n\n\nDirk,\n\nAs you note, the issue is the non-standard evaluation of the arguments\nin model.frame()  The key section of the Details in ?model.frame is:\n\n\nAll the variables in formula, subset and in ... are looked for first in\ndata and then in the environment of formula (see the help for formula()\nfor further details) and collected into a data frame. Then the subset\nexpression is evaluated, and it is is used as a row index to the data\nframe. Then the na.action function is applied to the data frame (and may\nwell add attributes). The levels of any factors in the data frame are\nadjusted according to the drop.unused.levels and xlev arguments.\n\n\nNote that even with your goodFunction(), if 'myweight' is created within\nthe environment of the function and not in the global environment, it\nstill fails:\n\nlibrary(rpart)\nmyformula <- formula(Kyphosis ~ Age + Number + Start)\nmydata <- kyphosis\n\ngoodFunction <- function(mydata, myformula) {\n                         myweight <- abs(rnorm(nrow(mydata)))\n                         hyp <- rpart(myformula, data=mydata,\n                                      weights=myweight, method=\"class\")\n                         prev <- hyp\n                        }\n\n\n> goodFunction(mydata, myformula)\nError in eval(expr, envir, enclos) : object \"myweight\" not found\n\n\nHowever, now let's do this:\n\n\nlibrary(rpart)\nmyformula <- formula(Kyphosis ~ Age + Number + Start)\nmydata <- kyphosis\nmyweight <- abs(rnorm(nrow(mydata)))\n\ngoodFunction <- function(mydata, myformula) {\n                         hyp <- rpart(myformula, data=mydata,\n                                      weights=myweight, method=\"class\")\n                         prev <- hyp\n                        }\n\n> goodFunction(mydata, myformula)\n> \n\nIt works, because 'myweight' is found in the global environment, which\nis where the formula is created.\n\n\nNow, final example, try this:\n\n\nlibrary(rpart)\ngoodFunction <- function() {\n                         myformula <- formula(Kyphosis ~ Age + Number +\n                                              Start)\n                         mydata <- kyphosis\n                         myweight <- abs(rnorm(nrow(mydata)))\n\n                         hyp <- rpart(myformula, data=mydata,\n                                      weights=myweight, method=\"class\")\n                         prev <- hyp\n                        }\n\n> goodFunction()\n> \n\nIt works because the formula is created within the environment of the\nfunction and hence, 'myweight', which is created there as well, is\nfound.\n\nThere was a (non) bug filed on a related matter dealing with the\nevaluation of 'subset':\n\nhttp://bugs.r-project.org/cgi-bin/R/feature%26FAQ?id=3671\n\nand you might find this document on Non-Standard Evaluation helpful:\n\nhttp://developer.r-project.org/nonstandard-eval.pdf\n\nHTH,\n\nMarc\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}