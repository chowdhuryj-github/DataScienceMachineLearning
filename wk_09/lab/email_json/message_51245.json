{"category": "ham", "to_address": "Beginners List <beginners@perl.org>", "from_address": "\"Mumia W.\" <mumia.w.18.spam+nospam@earthlink.net>", "subject": "Re: Alternatives to highly nested hashes", "body": "On 06/20/2007 05:40 AM, Mathew Snyder wrote:\n> It looks like an object is what I want.  Am I correct?  \n\nAs always, it depends.\n\n> Suppose I need to work\n> with a bit of data that actually has 11 attributes.  This would be an object of\n> another type.  However, I need to manipulate pieces of it differently.  So I'm\n> guessing I would create an object thusly:\n> \n> sub objectname {\n>     my %hashOfAttribs {\n> \tattrib1 => undef,\n> \tattrib2 => undef,\n> \tattrib3 => undef\n>     }\n> }\n> \n\nNo.\n\n> I would then create an instance of that object\n> \n> my $instance = new objectname();\n> \n> I'm not certain though, how to populate the elements.  would it actually be\n> my $instance = new objectname(attrib1 => value, attrib2 => value, attrib3 =>\n> value)?  Or would I create the instance as above and then populate it by some\n> other means?  For instance\n> $instance->hashOfAttribs {\n>     attrib1 => value,\n>     attrib2 => value,\n>     attrib3 => value\n> };\n> \n> Am I at least on the right track?\n> \n\nNot really. First, it hasn't been conclusively established that you need \nobjects. You haven't described the data and what you want to do with it.\n\nSecond, objects are created using the methods described in \"perldoc \nperlboot,\" \"perldoc perltoot\" and \"perldoc perltooc.\"\n\nHowever, you can simplify things considerably by using Class::Struct, e.g.:\n\nuse Class::Struct ObjectName => [\n     attrib1 => '$',\n     attrib2 => '$',\n     attrib3 => '$',\n     children => '$',\n     ];\n\n  ...\n\nmy $instance = ObjectName->new(\n     attrib1 => '10',\n     attrib2 => [1, 20, 1943],\n     attrib3 => 'Hello',\n     children => []);\n\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}