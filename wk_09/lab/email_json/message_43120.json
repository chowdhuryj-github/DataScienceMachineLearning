{"category": "ham", "to_address": "Zvi Devir <zdevir@cs.technion.ac.il>", "from_address": "Don Hopkins <dhopkins@DonHopkins.com>", "subject": "Re: [sugar] eBook Reader user interface", "body": "\n\n\n\n\n\nprint \"Hello world!\"\n\nI have made a version of the Read activity that supports navigation and\ncontrol with the gamepad, and has a few new features and improvements. \nThe main problem is getting the two gamepads to send unique keycodes\nthat are not the numeric keypad arrow keys it currently sends (because\nthose are already bound to functions that don't do the appropriate\nthing). \nThe problem right now is that somebody needs to run the command \"chmod\na+rwx /dev/input/event1\" to give Python the permission to perform the\nioctl that remaps the keys. \nThe solution to that problem is to decide on a standard set of keycodes\nand have the operating system set them when it boots. \nI have tried several sets of keycodes, unsuccessfully. The higher\nkeycodes with numbers >512 never seem to make it to the X server. \nI tried using the keycodes for the higher numbered function keys\n(KEY_F13 [183] - KEY_F20 [190]), which made it to the X server, but all\nreport X keycodes 0. \nThere may be some magic that needs to be done in the /etc/X11/xorg.conf\nfile to admit those keycodes, or maybe some other arcane X server\nconfiguration. \nSo for now I am mapping to the letters \"esdx\" and \"ijkm\" to test out\nthe gamepad code until the OLPC has a fixed set of distinguishable\nkeypad keycodes. \nIt will be very nice to have a gamepad text input method like\ntriggerfinger or dasher, to input real text in book mode! \n\nThe next issue is rotation. I have made the activity respond to top\nlevel window resize events by running \"xrandr\" to figure out which\ndirection the screen is rotated. \nThen it remaps the behaviors it assigns to the gamepads according to\nthe screen rotation. \nI think screen rotation should be handled by the application, not the\noperating system, because in some cases the application might want to\nassociate commands with the LABELS of the gamepad keys instead of the\nDIRECTIONS of the keys, so it would not want to rotate their meaning. \nFor example, a tic-tac-toe game that wanted to use X for X and O for O\nwould not want to remap the keys on screen rotation! (Admittedly\ncontrived, but hey it's a popular game!) c(-;\nIt would be great if there were a way to find out the screen rotation\nvia dbus. Maybe there is but I just haven't figured it out yet. Could\nwe add that, if it's not yet supported, please? \n\nAlso, I wrote some stuff in the comments of the bug about the screen\nrotation button: it's waaaaay too easy to rotate the screen\naccidentally (not to mention turn the machine off accidentally,\nESPECIALLY when the screen is upside down and you reach for what you\nthink is the rotation button!!!)... \nI propose that both the screen rotation button and the power button\nsimply pop up big fat obvious dialogs that pop down and do nothing if\nyou press the button again, but require you to either press and hold\nthe button, or press another button (like the arrow keys) to actually\nrotate the screen or power the system down.\nThat will let users rotate the screen absolutely in one shot with the\narrow keys without going through all the intermediate rotations. \nRotating is extremely expensive because it laboriously repaints the\nentire screen, requiring the application to do all kinds of memory\nallocation of giant page sized double buffers. So it should be very\nhard to do it accidentally, while right now it's very hard not to do it\naccidentally. \nOf course the consequences of accidentally shutting the system down\nwith a mere press of the button are much worse, so the same thing goes\ntenfold for the power button! \nKids will naturally go straight for the buttons on the screen and press\nthem many times in a row, so that should not cause any harm, delay or\ndistress. \n\nSee: Rotating in reverse and/or better feedback for the rotate button\nhttp://dev.laptop.org/ticket/1049\n\nAlso: Rotate handheld keys with screen\nhttp://dev.laptop.org/ticket/1443\n\nI decided to use the directional arrows for scrolling withing the page\nselected, for when the entire page doesn't fit on the screen, or when\nyou're in continuous mode. \nThat is because it's possible to press the directional arrows\ndiagonally, sending two keycodes at once, which makes sense for\ndirectional scrolling commands but not for discrete commands. \nI used the other 4 button gamepad for discrete user interface\nnavigation commands. The left one and the right one move to the\nprevious and next selected button, in the same direction as they appear\non the screen.\nThe bottom one activates the selected button. The top one goes to the\nfirst button. These button mappings rotate with the screen\nappropriately. \n\nI added a couple buttons for \"first page\" and \"last page\", and I also\nadded another toolbar of \"View\" commands, including sizing: fit width,\nbest fit, zoom in, zoom out; rotating: rotate left, rotate right; and\ntoggle buttons for display mode: dual page, continuous. \nWhen you use the gamepad to navigate between user interface buttons, it\nwraps back and forth from end of one toolbar to the beginning of the\nother. \nGamepad navigation ignores the \"activity\" toolbar (for now). \nWhen you navigate with the gamepad, it warps the mouse cursor so it's\nin the upper right corner of the button.\nI was hoping that warping the mouse into the button would be enough to\ntrigger the tooltip, but apparently not. \nI have been looking into how to pop up and tear down the tooltip under\nprogram control without resorting to ugly hacks like faking events, but\nI can't figure out a way to do it short of hacking the C code. \nAny suggestions? The other approach is not to use GTK tooltips at all,\nand implement some nice Sugar tooltips that do the right thing, and\nallow us to add more features like internationalized text (if that's\nnot already supported -- I dunno) and icons and animation and nice\nstuff like that. \nThe tooltips in gamepad mode should be smart enough to pop up when you\nnavigate to a button, then go away after a few seconds or after you use\nthe button.\nIf you try to use a button that's \"not allowed\" (my alternative to\ngtk's broken \"not sensitive\" which unfortunately disallows tooltips and\nkeyboard navigation), a tooltip should pop up explaining why the\noperation is not allowed and what you can do to allow it. \nI have written all the code to set the tooltip to the most important\nexplanation when buttons are not allowed (i.e. the \"back page\" button\nsays \"you need to load a document first\" if no doc is loaded, or\n\"you're already at the first page\" if you do havea doc but you're on\nthe first page [duh]). \nIt's just that the tooltips don't display when I want them to, and\ncurrently there is no visual indication that the button is not allowed.\nI suppose the \"not allowed\" state should look just like the \"not\nsensitive\" state, except that they let you navigate to the button with\nthe gamepad and display tooltips. \n\nI made a mixin class for widgets that includes intrinsics for gamepad\nnavigation, as well as some other useful stuff (like tooltips, and\ndisabling them without breaking keyboard navigation and tooltips). \nIt also lets (no, requires!) you to associate an \"info\" dictionary with\neach widget, that tells the system useful stuff about the widget,\nincluding the icon, default tooltip, and whether or not it's accessible\nvia the game controller keypad. \nThe toolbars have a method that returns a list of their navigable\nwidgets, and the application concatenates the widget lists of all\ntoolbars, handles keyboard events, and manages to navigate between\nthem. \n(This gamepad navigation is in place of the standard GTK tab/arrow key\nnavigation, which I consider flawed and too hard-wired to fix, so I\njust programmed around it. For example, on top of the focus and tooltip\nproblems, when you arrow to a text field, you're stuck and can't arrow\nout!) \nI made the search text field as well as the find next / previous\nbuttons inaccessibly from the game controllers, because currently there\nis no way to input text when the keyboard is hidden. \nOnce we have a gamepad based text input method we can hook that up to\nthe search field and enable it for navigation. \n\nI put in placeholder \"programmer art\" with text labels for the buttons\nI added, which are ugly enough to remind everyone that we need real\nicons, but I'm not a good enough artist to come up with appropriate\nicons. \n\u00a0\nOne usability problem I noticed is with the toggle buttons: the \"mouse\nover\" highlighting obscures (overrides, conflates, is the same as) the\nhighlighting that tells you\nif the button is selected or not, so once you're pointing at the button\nyou have no idea about its current state, and no feedback after you\nclick it to change the state, that the state was actually changed\n(modulo the actual effect of the button toggle on the application of\ncourse). The \"mouse over\" highlighting should be orthogonal to and\ncomposeable with the \"checked\" highlighting. Moving over the toggle\nshould activate the \"mouse over\" highlighting but not change the\n\"checked\" highlighting. Pressing down and holding should keep the\n\"mouse over\" highlighting and toggle the \"selected\" highlighing to\nfeedback that it will enter that state iff you release while still in\nthe button. If you move out of the button while holding down the mouse,\nthe \"mouse over\" should de-highlight and the \"checked\" should go back\nto the previous state, to feedback that pressing down and moving out is\na no-op that cancels the toggle action, and nothing should change when\nyou release the button to toggle (but of course you should be able to\nslide back in to resume the \"mouse over\" and \"check toggled\" state,\nthen release to toggle it. \n\nI heard a rumor that somebody had decided on some unique keycodes for\nthe gamepad. Is that true? What are they? Once I know, I'll put them\ninto the reader and put up a copy for people to try out. (Right now it\nrequires opening a shell and running chmod as root to get it to work,\nwhich is kinda clumsy, but a great way to force kids to learn Linux,\nyou gotta admit.) \n\n\u00a0\u00a0\u00a0 -Don\n\n\nZvi Devir wrote:\n\nI have been collecting a few (more than a few) usability bugs and UI \nsuggestions, which will hopefully be compiled to a list next month.\n\nIn the meanwhile, I would like to share a couple of ideas regarding the \nmapping of the gamepad keys [which I hope won't state the obvious too much].\n\nCurrently, the UP/DOWN/LEFT/RIGHT keys have a fixed functionality \nregardless of the screen orientation. This isn't a correct logic, as the \nexpected functionality changes according to the current orientation. I \nguess the easiest way to implement this kind of behavior would be using \na smart key mapping mechanism in X.\nAnother thought -- the current input method treats those keys as \ndirection keys. However, a better input method may be emulating the \nfunctionality of the mouse (touch pad) using the gamepad keys. In tablet \nmode this can really improve the user experience.\n\nJust my $0.04.\n    Zvi\n\n\nDon Hopkins wrote:\n  \n\nGoal for improving the eBook reader user interface:\n\n  I've been doing some exploratory programming with GTK and Sugar,\n  trying to improve the user interface of the eBook reader, and make\n  it useable in book mode with the gamepad.\n\n  + Support the game keypads in eBook mode. \n\n    + Low level game keypad support\n\n      Need to remap low level keyboard scan codes to Linux keyboard codes. \n\n      The setolpckeys.c program remaps the keys and gamepad buttons.\n\n\tCurrently it maps both gamepads to the numeric keypad keys (KEY_KP8, etc),\n\twhich the X server and GDK translates to directional keys (GDK_Up, etc).\n\n\tI tried to map them to buttons (BTN_A, etc), but the X server seems \n\tto ignore keycodes in that range. \n\n\tThe xorg.conf file has a keycode mask that looked like it might help, \n\tbut I couldn't get it to work. \n\n\tNeed to have unique keycodes reported for each of the two gamepads, \n\twhich are not the same as any keyboard keys, without any predefined meanings\n\tlike arrow keys have. \n\n\tNeed to define special purpose keycodes just for the OLPC gamepad,\n\tinstead of trying to reuse existing but not appropriate keycodes. \n\n\tWhat is the process for defining new keycodes in <linux/input.h>?\n\n\tHere's my strawman proposal for some new keycodes. \n\n\t  Use keys (\"KEY_*\") instead of buttons (\"BTN_*\"), since they\n\t  seem to work better.\n\n\t  The 0x1b* range seems to be unused in <linux/input.h>, \n\t  and it's between other groups of keycodes, so I'll\n\t  propose using that range for the OLPC. \n\n\t  The UP/DOWN/LEFT/RIGHT keys correspond to the directional\n\t  keypad.\n\n\t  #define KEY_XO_GAMEPAD_UP      0x1b0\n\t  #define KEY_XO_GAMEPAD_DOWN    0x1b1\n\t  #define KEY_XO_GAMEPAD_LEFT    0x1b2\n\t  #define KEY_XO_GAMEPAD_RIGHT   0x1b3\n\n\t  The NORTH/SOUTH/EAST/WEST keys correspond to the other\n\t  buttons. Those names are agnostic to the button labels,\n\t  which may change from the current Playstation buttons\n\t  (X/O/Triangle/Square). Can anyone suggest better names for\n\t  the four buttons on the right?\n\n\t  #define KEY_XO_GAMEPAD_NORTH   0x1b4\n\t  #define KEY_XO_GAMEPAD_SOUTH   0x1b5\n\t  #define KEY_XO_GAMEPAD_EAST    0x1b6\n\t  #define KEY_XO_GAMEPAD_WEST    0x1b7\n\n\t  While we're at it, we could define keycodes for the other\n\t  OLPC buttons and switches on the screen. I think there are\n\t  some other sensor switches that could generate keycodes,\n\t  like opening the screen, rotating it around, and putting it\n\t  into book mode, so I will make some guesses at names for\n\t  them, just to get the discussion rolling. \n\n\t  #define KEY_XO_SCREEN_ROTATE   0x1b8\n\t  #define KEY_XO_SCREEN_POWER    0x1b9\n\t  #define KEY_XO_SCREEN_OPEN     0x1ba\n\t  #define KEY_XO_SCREEN_CLOSE    0x1bb\n\t  #define KEY_XO_SCREEN_IN       0x1bc\n\t  #define KEY_XO_SCREEN_OUT      0x1bd\n\n\t  Is there an exhaustive list of all buttons and switches and\n\t  events on the OLPC? Are any more planned? Which ones should\n\t  be assigned keycodes?\n\n      Rewrote setolpckeys.c code in Python (just uses ioctl, but needs to know keycodes).\n\tWriting utilities like that in Python instead of C makes it easier to \n\treconfigure the keys on the OLPC without a C compiler. \n\n    \n\n\n\n_______________________________________________\nDevel mailing list\nDevel@lists.laptop.org\nhttp://lists.laptop.org/listinfo/devel\n  \n\n\n\n\n"}