{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: [perl #42320] [BUG] Memory leak with String pmc", "body": "On Thursday 05 April 2007 16:56, Mehmet Yavuz Selim Soyturk wrote:\n\n> The next program causes a memory leak for me.\n>\n> .sub main :main\n> loop:\n>     $P0 = new .String\n>     goto loop\n> .end\n>\n>\n> Interestingly, no memory leak with:\n>\n> .sub main :main\n> loop:\n>         $S0 = \"foo\"\n>         $P0 = new .String\n>         goto loop\n> .end\n\nI can't explain that, but here's some suspicious code in \nParrot_allocate_string() in src/resources.c:\n\n    new_size = aligned_string_size(str, size);\n    mem      = (char *)mem_allocate(interp, new_size, pool);\n    mem     += sizeof (void*);\n\n    PObj_bufstart(str) =  str->strstart = mem;\n    PObj_buflen(str)   = new_size - sizeof (void*);\n\nIf I identify and read the related freeing code correctly (Parrot_dod_sweep() \nin src/gc/dod.c):\n\n                else if (PObj_sysmem_TEST(b) && PObj_bufstart(b)) {\n                    /* has sysmem allocated, e.g. string_pin */\n                    mem_sys_free(PObj_bufstart(b));\n                    PObj_bufstart(b) = NULL;\n                    PObj_buflen(b)   = 0;\n                }\n\n... then there's a leak the sizeof (void *).\n\nI don't guarantee that I've identified the appropriate code clearly though; \ndigging through this is tricky.\n\nDoes this sound familiar or interesting or fun to anyone else?\n\n-- c\n\n"}