{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23224 - in branches: SAMBA_3_0/source\n\tSAMBA_3_0/source/lib SAMBA_3_0/source/libsmb\n\tSAMBA_3_0_26/source SAMBA_3_0_26/source/lib\n\tSAMBA_3_0_26/source/libsmb", "body": "Author: vlendec\nDate: 2007-05-29 19:09:38 +0000 (Tue, 29 May 2007)\nNew Revision: 23224\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23224\n\nLog:\nMove map_nt_error_from_unix to lib/errmap_unix.c. This function is\nuseful even in binaries that don't link in libsmb\n\nAdded:\n   branches/SAMBA_3_0/source/lib/errmap_unix.c\n   branches/SAMBA_3_0_26/source/lib/errmap_unix.c\nModified:\n   branches/SAMBA_3_0/source/Makefile.in\n   branches/SAMBA_3_0/source/libsmb/errormap.c\n   branches/SAMBA_3_0_26/source/Makefile.in\n   branches/SAMBA_3_0_26/source/libsmb/errormap.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0/source/Makefile.in\t2007-05-29 18:41:16 UTC (rev 23223)\n+++ branches/SAMBA_3_0/source/Makefile.in\t2007-05-29 19:09:38 UTC (rev 23224)\n@@ -276,7 +276,7 @@\n \t  lib/util_unistr.o lib/util_file.o lib/data_blob.o \\\n \t  lib/util.o lib/util_sock.o lib/sock_exec.o lib/util_sec.o \\\n \t  lib/substitute.o lib/fsusage.o \\\n-\t  lib/ms_fnmatch.o lib/select.o \\\n+\t  lib/ms_fnmatch.o lib/select.o lib/errmap_unix.o \\\n \t  lib/tallocmsg.o lib/dmallocmsg.o libsmb/smb_signing.o \\\n \t  lib/md5.o lib/hmacmd5.o lib/arc4.o lib/iconv.o \\\n \t  nsswitch/wb_client.o $(WBCOMMON_OBJ) \\\n\nAdded: branches/SAMBA_3_0/source/lib/errmap_unix.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/errmap_unix.c\t2007-05-29 18:41:16 UTC (rev 23223)\n+++ branches/SAMBA_3_0/source/lib/errmap_unix.c\t2007-05-29 19:09:38 UTC (rev 23224)\n@@ -0,0 +1,92 @@\n+/* \n+ *  Unix SMB/CIFS implementation.\n+ *  map unix to NT errors, an excerpt of libsmb/errormap.c\n+ *  Copyright (C) Andrew Tridgell 2001\n+ *  Copyright (C) Andrew Bartlett 2001\n+ *  Copyright (C) Tim Potter 2000\n+ *  Copyright (C) Jeremy Allison 2007\n+ *  \n+ *  This program is free software; you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation; either version 2 of the License, or\n+ *  (at your option) any later version.\n+ *  \n+ *  This program is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *  \n+ *  You should have received a copy of the GNU General Public License\n+ *  along with this program; if not, write to the Free Software\n+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+ */\n+\n+#include \"includes.h\"\n+\n+/* Mapping from Unix, to NT error numbers */\n+\n+const struct unix_error_map unix_dos_nt_errmap[] = {\n+\t{ EPERM, ERRDOS, ERRnoaccess, NT_STATUS_ACCESS_DENIED },\n+\t{ EACCES, ERRDOS, ERRnoaccess, NT_STATUS_ACCESS_DENIED },\n+\t{ ENOENT, ERRDOS, ERRbadfile, NT_STATUS_OBJECT_NAME_NOT_FOUND },\n+\t{ ENOTDIR, ERRDOS, ERRbadpath,  NT_STATUS_NOT_A_DIRECTORY },\n+\t{ EIO, ERRHRD, ERRgeneral, NT_STATUS_IO_DEVICE_ERROR },\n+\t{ EBADF, ERRSRV, ERRsrverror, NT_STATUS_INVALID_HANDLE },\n+\t{ EINVAL, ERRSRV, ERRsrverror, NT_STATUS_INVALID_HANDLE },\n+\t{ EEXIST, ERRDOS, ERRfilexists, NT_STATUS_OBJECT_NAME_COLLISION},\n+\t{ ENFILE, ERRDOS, ERRnofids, NT_STATUS_TOO_MANY_OPENED_FILES },\n+\t{ EMFILE, ERRDOS, ERRnofids, NT_STATUS_TOO_MANY_OPENED_FILES },\n+\t{ ENOSPC, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL },\n+\t{ ENOMEM, ERRDOS, ERRnomem, NT_STATUS_NO_MEMORY },\n+\t{ EISDIR, ERRDOS, ERRnoaccess, NT_STATUS_FILE_IS_A_DIRECTORY},\n+\t{ EMLINK, ERRDOS, ERRgeneral, NT_STATUS_TOO_MANY_LINKS },\n+\t{ EINTR,  ERRHRD, ERRgeneral, NT_STATUS_RETRY },\n+#ifdef EDQUOT\n+\t{ EDQUOT, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL }, /* Windows apps need this, not NT_STATUS_QUOTA_EXCEEDED */\n+#endif\n+#ifdef ENOTEMPTY\n+\t{ ENOTEMPTY, ERRDOS, ERRnoaccess, NT_STATUS_DIRECTORY_NOT_EMPTY },\n+#endif\n+#ifdef EXDEV\n+\t{ EXDEV, ERRDOS, ERRdiffdevice, NT_STATUS_NOT_SAME_DEVICE },\n+#endif\n+#ifdef EROFS\n+\t{ EROFS, ERRHRD, ERRnowrite, NT_STATUS_ACCESS_DENIED },\n+#endif\n+#ifdef ENAMETOOLONG\n+\t{ ENAMETOOLONG, ERRDOS, 206, NT_STATUS_OBJECT_NAME_INVALID },\n+#endif\n+#ifdef EFBIG\n+\t{ EFBIG, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL },\n+#endif\n+#ifdef ENOBUFS\n+\t{ ENOBUFS, ERRDOS, ERRnomem, NT_STATUS_INSUFFICIENT_RESOURCES },\n+#endif\n+\t{ EAGAIN, ERRDOS, 111, NT_STATUS_NETWORK_BUSY },\n+#ifdef EWOULDBLOCK\n+\t{ EWOULDBLOCK, ERRDOS, 111, NT_STATUS_NETWORK_BUSY },\n+#endif\n+\t{ 0, 0, 0, NT_STATUS_OK }\n+};\n+\n+/*********************************************************************\n+ Map an NT error code from a Unix error code.\n+*********************************************************************/\n+\n+NTSTATUS map_nt_error_from_unix(int unix_error)\n+{\n+\tint i = 0;\n+\n+\tif (unix_error == 0)\n+\t\treturn NT_STATUS_OK;\n+\n+\t/* Look through list */\n+\twhile(unix_dos_nt_errmap[i].unix_error != 0) {\n+\t\tif (unix_dos_nt_errmap[i].unix_error == unix_error)\n+\t\t\treturn unix_dos_nt_errmap[i].nt_error;\n+\t\ti++;\n+\t}\n+\n+\t/* Default return */\n+\treturn NT_STATUS_ACCESS_DENIED;\n+}\n\nModified: branches/SAMBA_3_0/source/libsmb/errormap.c\n===================================================================\n--- branches/SAMBA_3_0/source/libsmb/errormap.c\t2007-05-29 18:41:16 UTC (rev 23223)\n+++ branches/SAMBA_3_0/source/libsmb/errormap.c\t2007-05-29 19:09:38 UTC (rev 23224)\n@@ -1505,69 +1505,6 @@\n \treturn W_ERROR(NT_STATUS_V(error) & 0xffff);\n }\n \n-/* Mapping between Unix, DOS and NT error numbers */\n-\n-const struct unix_error_map unix_dos_nt_errmap[] = {\n-\t{ EPERM, ERRDOS, ERRnoaccess, NT_STATUS_ACCESS_DENIED },\n-\t{ EACCES, ERRDOS, ERRnoaccess, NT_STATUS_ACCESS_DENIED },\n-\t{ ENOENT, ERRDOS, ERRbadfile, NT_STATUS_OBJECT_NAME_NOT_FOUND },\n-\t{ ENOTDIR, ERRDOS, ERRbadpath,  NT_STATUS_NOT_A_DIRECTORY },\n-\t{ EIO, ERRHRD, ERRgeneral, NT_STATUS_IO_DEVICE_ERROR },\n-\t{ EBADF, ERRSRV, ERRsrverror, NT_STATUS_INVALID_HANDLE },\n-\t{ EINVAL, ERRSRV, ERRsrverror, NT_STATUS_INVALID_HANDLE },\n-\t{ EEXIST, ERRDOS, ERRfilexists, NT_STATUS_OBJECT_NAME_COLLISION},\n-\t{ ENFILE, ERRDOS, ERRnofids, NT_STATUS_TOO_MANY_OPENED_FILES },\n-\t{ EMFILE, ERRDOS, ERRnofids, NT_STATUS_TOO_MANY_OPENED_FILES },\n-\t{ ENOSPC, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL },\n-\t{ ENOMEM, ERRDOS, ERRnomem, NT_STATUS_NO_MEMORY },\n-\t{ EISDIR, ERRDOS, ERRnoaccess, NT_STATUS_FILE_IS_A_DIRECTORY},\n-\t{ EMLINK, ERRDOS, ERRgeneral, NT_STATUS_TOO_MANY_LINKS },\n-#ifdef EDQUOT\n-\t{ EDQUOT, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL }, /* Windows apps need this, not NT_STATUS_QUOTA_EXCEEDED */\n-#endif\n-#ifdef ENOTEMPTY\n-\t{ ENOTEMPTY, ERRDOS, ERRnoaccess, NT_STATUS_DIRECTORY_NOT_EMPTY },\n-#endif\n-#ifdef EXDEV\n-\t{ EXDEV, ERRDOS, ERRdiffdevice, NT_STATUS_NOT_SAME_DEVICE },\n-#endif\n-#ifdef EROFS\n-\t{ EROFS, ERRHRD, ERRnowrite, NT_STATUS_ACCESS_DENIED },\n-#endif\n-#ifdef ENAMETOOLONG\n-\t{ ENAMETOOLONG, ERRDOS, 206, NT_STATUS_OBJECT_NAME_INVALID },\n-#endif\n-#ifdef EFBIG\n-\t{ EFBIG, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL },\n-#endif\n-#ifdef ENOBUFS\n-\t{ ENOBUFS, ERRDOS, ERRnomem, NT_STATUS_INSUFFICIENT_RESOURCES },\n-#endif\n-\t{ 0, 0, 0, NT_STATUS_OK }\n-};\n-\n-/*********************************************************************\n- Map an NT error code from a Unix error code.\n-*********************************************************************/\n-\n-NTSTATUS map_nt_error_from_unix(int unix_error)\n-{\n-\tint i = 0;\n-\n-\tif (unix_error == 0)\n-\t\treturn NT_STATUS_OK;\n-\n-\t/* Look through list */\n-\twhile(unix_dos_nt_errmap[i].unix_error != 0) {\n-\t\tif (unix_dos_nt_errmap[i].unix_error == unix_error)\n-\t\t\treturn unix_dos_nt_errmap[i].nt_error;\n-\t\ti++;\n-\t}\n-\n-\t/* Default return */\n-\treturn NT_STATUS_ACCESS_DENIED;\n-}\n-\n #if defined(HAVE_GSSAPI)\n /*******************************************************************************\n  Map between gssapi errors and NT status. I made these up :-(. JRA.\n\nModified: branches/SAMBA_3_0_26/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0_26/source/Makefile.in\t2007-05-29 18:41:16 UTC (rev 23223)\n+++ branches/SAMBA_3_0_26/source/Makefile.in\t2007-05-29 19:09:38 UTC (rev 23224)\n@@ -261,7 +261,7 @@\n \t  lib/util_unistr.o lib/util_file.o lib/data_blob.o \\\n \t  lib/util.o lib/util_sock.o lib/sock_exec.o lib/util_sec.o \\\n \t  lib/substitute.o lib/fsusage.o \\\n-\t  lib/ms_fnmatch.o lib/select.o \\\n+\t  lib/ms_fnmatch.o lib/select.o lib/errmap_unix.o \\\n \t  lib/tallocmsg.o lib/dmallocmsg.o libsmb/smb_signing.o \\\n \t  lib/md5.o lib/hmacmd5.o lib/arc4.o lib/iconv.o \\\n \t  nsswitch/wb_client.o $(WBCOMMON_OBJ) \\\n\nAdded: branches/SAMBA_3_0_26/source/lib/errmap_unix.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/errmap_unix.c\t2007-05-29 18:41:16 UTC (rev 23223)\n+++ branches/SAMBA_3_0_26/source/lib/errmap_unix.c\t2007-05-29 19:09:38 UTC (rev 23224)\n@@ -0,0 +1,92 @@\n+/* \n+ *  Unix SMB/CIFS implementation.\n+ *  map unix to NT errors, an excerpt of libsmb/errormap.c\n+ *  Copyright (C) Andrew Tridgell 2001\n+ *  Copyright (C) Andrew Bartlett 2001\n+ *  Copyright (C) Tim Potter 2000\n+ *  Copyright (C) Jeremy Allison 2007\n+ *  \n+ *  This program is free software; you can redistribute it and/or modify\n+ *  it under the terms of the GNU General Public License as published by\n+ *  the Free Software Foundation; either version 2 of the License, or\n+ *  (at your option) any later version.\n+ *  \n+ *  This program is distributed in the hope that it will be useful,\n+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ *  GNU General Public License for more details.\n+ *  \n+ *  You should have received a copy of the GNU General Public License\n+ *  along with this program; if not, write to the Free Software\n+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+ */\n+\n+#include \"includes.h\"\n+\n+/* Mapping from Unix, to NT error numbers */\n+\n+const struct unix_error_map unix_dos_nt_errmap[] = {\n+\t{ EPERM, ERRDOS, ERRnoaccess, NT_STATUS_ACCESS_DENIED },\n+\t{ EACCES, ERRDOS, ERRnoaccess, NT_STATUS_ACCESS_DENIED },\n+\t{ ENOENT, ERRDOS, ERRbadfile, NT_STATUS_OBJECT_NAME_NOT_FOUND },\n+\t{ ENOTDIR, ERRDOS, ERRbadpath,  NT_STATUS_NOT_A_DIRECTORY },\n+\t{ EIO, ERRHRD, ERRgeneral, NT_STATUS_IO_DEVICE_ERROR },\n+\t{ EBADF, ERRSRV, ERRsrverror, NT_STATUS_INVALID_HANDLE },\n+\t{ EINVAL, ERRSRV, ERRsrverror, NT_STATUS_INVALID_HANDLE },\n+\t{ EEXIST, ERRDOS, ERRfilexists, NT_STATUS_OBJECT_NAME_COLLISION},\n+\t{ ENFILE, ERRDOS, ERRnofids, NT_STATUS_TOO_MANY_OPENED_FILES },\n+\t{ EMFILE, ERRDOS, ERRnofids, NT_STATUS_TOO_MANY_OPENED_FILES },\n+\t{ ENOSPC, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL },\n+\t{ ENOMEM, ERRDOS, ERRnomem, NT_STATUS_NO_MEMORY },\n+\t{ EISDIR, ERRDOS, ERRnoaccess, NT_STATUS_FILE_IS_A_DIRECTORY},\n+\t{ EMLINK, ERRDOS, ERRgeneral, NT_STATUS_TOO_MANY_LINKS },\n+\t{ EINTR,  ERRHRD, ERRgeneral, NT_STATUS_RETRY },\n+#ifdef EDQUOT\n+\t{ EDQUOT, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL }, /* Windows apps need this, not NT_STATUS_QUOTA_EXCEEDED */\n+#endif\n+#ifdef ENOTEMPTY\n+\t{ ENOTEMPTY, ERRDOS, ERRnoaccess, NT_STATUS_DIRECTORY_NOT_EMPTY },\n+#endif\n+#ifdef EXDEV\n+\t{ EXDEV, ERRDOS, ERRdiffdevice, NT_STATUS_NOT_SAME_DEVICE },\n+#endif\n+#ifdef EROFS\n+\t{ EROFS, ERRHRD, ERRnowrite, NT_STATUS_ACCESS_DENIED },\n+#endif\n+#ifdef ENAMETOOLONG\n+\t{ ENAMETOOLONG, ERRDOS, 206, NT_STATUS_OBJECT_NAME_INVALID },\n+#endif\n+#ifdef EFBIG\n+\t{ EFBIG, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL },\n+#endif\n+#ifdef ENOBUFS\n+\t{ ENOBUFS, ERRDOS, ERRnomem, NT_STATUS_INSUFFICIENT_RESOURCES },\n+#endif\n+\t{ EAGAIN, ERRDOS, 111, NT_STATUS_NETWORK_BUSY },\n+#ifdef EWOULDBLOCK\n+\t{ EWOULDBLOCK, ERRDOS, 111, NT_STATUS_NETWORK_BUSY },\n+#endif\n+\t{ 0, 0, 0, NT_STATUS_OK }\n+};\n+\n+/*********************************************************************\n+ Map an NT error code from a Unix error code.\n+*********************************************************************/\n+\n+NTSTATUS map_nt_error_from_unix(int unix_error)\n+{\n+\tint i = 0;\n+\n+\tif (unix_error == 0)\n+\t\treturn NT_STATUS_OK;\n+\n+\t/* Look through list */\n+\twhile(unix_dos_nt_errmap[i].unix_error != 0) {\n+\t\tif (unix_dos_nt_errmap[i].unix_error == unix_error)\n+\t\t\treturn unix_dos_nt_errmap[i].nt_error;\n+\t\ti++;\n+\t}\n+\n+\t/* Default return */\n+\treturn NT_STATUS_ACCESS_DENIED;\n+}\n\nModified: branches/SAMBA_3_0_26/source/libsmb/errormap.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libsmb/errormap.c\t2007-05-29 18:41:16 UTC (rev 23223)\n+++ branches/SAMBA_3_0_26/source/libsmb/errormap.c\t2007-05-29 19:09:38 UTC (rev 23224)\n@@ -1503,66 +1503,3 @@\n \t/* a lame guess */\n \treturn W_ERROR(NT_STATUS_V(error) & 0xffff);\n }\n-\n-/* Mapping between Unix, DOS and NT error numbers */\n-\n-const struct unix_error_map unix_dos_nt_errmap[] = {\n-\t{ EPERM, ERRDOS, ERRnoaccess, NT_STATUS_ACCESS_DENIED },\n-\t{ EACCES, ERRDOS, ERRnoaccess, NT_STATUS_ACCESS_DENIED },\n-\t{ ENOENT, ERRDOS, ERRbadfile, NT_STATUS_OBJECT_NAME_NOT_FOUND },\n-\t{ ENOTDIR, ERRDOS, ERRbadpath,  NT_STATUS_NOT_A_DIRECTORY },\n-\t{ EIO, ERRHRD, ERRgeneral, NT_STATUS_IO_DEVICE_ERROR },\n-\t{ EBADF, ERRSRV, ERRsrverror, NT_STATUS_INVALID_HANDLE },\n-\t{ EINVAL, ERRSRV, ERRsrverror, NT_STATUS_INVALID_HANDLE },\n-\t{ EEXIST, ERRDOS, ERRfilexists, NT_STATUS_OBJECT_NAME_COLLISION},\n-\t{ ENFILE, ERRDOS, ERRnofids, NT_STATUS_TOO_MANY_OPENED_FILES },\n-\t{ EMFILE, ERRDOS, ERRnofids, NT_STATUS_TOO_MANY_OPENED_FILES },\n-\t{ ENOSPC, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL },\n-\t{ ENOMEM, ERRDOS, ERRnomem, NT_STATUS_NO_MEMORY },\n-\t{ EISDIR, ERRDOS, ERRnoaccess, NT_STATUS_FILE_IS_A_DIRECTORY},\n-\t{ EMLINK, ERRDOS, ERRgeneral, NT_STATUS_TOO_MANY_LINKS },\n-#ifdef EDQUOT\n-\t{ EDQUOT, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL }, /* Windows apps need this, not NT_STATUS_QUOTA_EXCEEDED */\n-#endif\n-#ifdef ENOTEMPTY\n-\t{ ENOTEMPTY, ERRDOS, ERRnoaccess, NT_STATUS_DIRECTORY_NOT_EMPTY },\n-#endif\n-#ifdef EXDEV\n-\t{ EXDEV, ERRDOS, ERRdiffdevice, NT_STATUS_NOT_SAME_DEVICE },\n-#endif\n-#ifdef EROFS\n-\t{ EROFS, ERRHRD, ERRnowrite, NT_STATUS_ACCESS_DENIED },\n-#endif\n-#ifdef ENAMETOOLONG\n-\t{ ENAMETOOLONG, ERRDOS, 206, NT_STATUS_OBJECT_NAME_INVALID },\n-#endif\n-#ifdef EFBIG\n-\t{ EFBIG, ERRHRD, ERRdiskfull, NT_STATUS_DISK_FULL },\n-#endif\n-#ifdef ENOBUFS\n-\t{ ENOBUFS, ERRDOS, ERRnomem, NT_STATUS_INSUFFICIENT_RESOURCES },\n-#endif\n-\t{ 0, 0, 0, NT_STATUS_OK }\n-};\n-\n-/*********************************************************************\n- Map an NT error code from a Unix error code.\n-*********************************************************************/\n-\n-NTSTATUS map_nt_error_from_unix(int unix_error)\n-{\n-\tint i = 0;\n-\n-\tif (unix_error == 0)\n-\t\treturn NT_STATUS_OK;\n-\n-\t/* Look through list */\n-\twhile(unix_dos_nt_errmap[i].unix_error != 0) {\n-\t\tif (unix_dos_nt_errmap[i].unix_error == unix_error)\n-\t\t\treturn unix_dos_nt_errmap[i].nt_error;\n-\t\ti++;\n-\t}\n-\n-\t/* Default return */\n-\treturn NT_STATUS_ACCESS_DENIED;\n-}\n\n"}