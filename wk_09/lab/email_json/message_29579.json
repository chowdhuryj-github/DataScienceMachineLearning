{"category": "ham", "to_address": "\"David Moreno Garza\" <damog@ciencias.unam.mx>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Thoughts on comments", "body": "On 5/14/07, David Moreno Garza  wrote:\n> Dr.Ruud wrote:\n> > The / is taken, but there are many other ways to do multiline comments.\n> > For one, see perldoc perlpod.\n>\n> You mean using =begin, =end? They are not exactly multiline *comments*.\n>\n> --\n> David Moreno Garza  | http://www.damog.net/\n>  \n>\n>\n> --\n> To unsubscribe, e-mail: beginners-unsubscribe@perl.org\n> For additional commands, e-mail: beginners-help@perl.org\n> http://learn.perl.org/\n>\n>\n>\n\nNot that I use them myself, but the \"proper\" (for various values of\nproper) way to use POD for multi-line comments is\n\n=for comment\n  Commented text\n=cut\n\nYes it sucks, yes it will be fixed* in Perl 6* (or possible earlier if\nthe trend of adopting Perl 6 features in Perl 5 releases continues).\nIt will be a quote-like operator, so you will be able to say\n\n #{\n   This is\n    a multi-line comment\n}\n\n #[\n    so is this\n    #[ and this one is nested ]\n]\n\n #{{{ multiple brackets must match on both sides }}}\n\n* for various definitions of fixed, there are some caveats, the\nbiggest being that a # as the first character on a line is always\nconsidered a single line comment even if the next character is a\nbracketing character.  Don't ask me why.\n\n* http://dev.perl.org/perl6/doc/design/syn/S02.html\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}