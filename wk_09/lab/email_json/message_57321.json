{"category": "ham", "to_address": "\"Amichai Teumim\" <amichai@teumim.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: don't understand working script", "body": "On 6/28/07, Amichai Teumim  wrote:\n> I have this script, If you run it you can see how it nicely idents the\n> directories. I don't understand everything in this script. Please see my\n> comments.\n>\n> #!/usr/bin/perl\n>\n> $startdir = \"/lib\";\n>\n> $level = 0;    #WHAT DOES THIS DO?\n\nIt assigns 0 to the scalar variable $level.\n\n>\n> list_dirs($startdir,$level); #WHAT DOES THIS DO?\n\nit calls the subroutine &list_dirs with the arguments $startdir and $level\n\n>\n> sub list_dirs(){\n\nThis is a misuse of prototypes.  it should be\n\nsub list_dirs {\n\nLuckily, if you want to call it that, the misuse has no effect on the\nprogram because the call to the subroutine occurs before the\ndefinition of the subroutine, thus causing the code to ignore the\nprototype.\n\n>   my $dir  = shift (@_);  #WHAT DOES THIS DO?\n>   my $lev = shift (@_);   #WHAT DOES THIS DO?\n\n\n@_ is an array.  In this context it holds the arguments passed to\nlist_dirs.  So the scalar $dir is being assigned the contents\n$startdir variable from above.  Likewise $lev is being assigned the\ncontents of $level.\n\n>\n>\n>   opendir(TOP,$dir);\n>   my @files = readdir(TOP);\n>   closedir(TOP);\n>\n>   shift(@files);\n>   shift(@files);\n>\n>   foreach $file (@files){\n>     if(-d \"$dir/$file\"){\n>         spaces($lev);   #WHAT DOES THIS DO?\n\ncalls the spaces subroutine with the argument $lev\n\n>         print \"$file\\n\";\n>         list_dirs(\"$dir/$file\",$lev+1); #WHAT DOES THIS DO?\n\nThe subroutine is calling itself.  This is called recursion.  It is a\nform of looping. You might want to read\nhttp://en.wikipedia.org/wiki/Recursion_(computer_science)\n\n>     }\n>   }\n>\n> }\n>\n> #WHAT DOES THIS WHOLE SECTION DO?\n>\n>\n> sub spaces(){\n> my($num) = shift(@_);\n> for($i=0;$i<$num;$i++){\n> print \" \";\n> }\n>\n> }\n\nIt is poorly written and poorly indented, but this subroutine prints\nout the number of spaces passed as an argument.  It also is misusing\nprototypes.\n\n>\n>\n> Thanks\n>\n> Amichai\n>\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}