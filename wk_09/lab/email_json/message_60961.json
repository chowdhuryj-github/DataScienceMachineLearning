{"category": "ham", "to_address": "\"Paul Johnson\" <paul@pjcj.net>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Conditional question", "body": "On 7/3/07, Paul Johnson  wrote:\nsnip\n> And, in this case, more accurate.  Unless you know something the rest of us\n> don't.\nsnip\n\nThe trinary operator (?:) returns the value of either the true or\nfalse portion depending on the conditional portion, so putting print\nin both the true and false portions is redundant.  Also 0 is one of\nthe 5ish false values* so !$var1 is the same thing** as $var1 == 0 and\n1 is one of the infinite true values***  so $var2 is equivalent to\n$var2 == 1 so long as you are testing for truth rather than the\nspecific value 1.\n\n#!/usr/bin/perl -l\n\nuse strict;\nuse warnings;\n\nmy $var1 = 0;\nmy $var2 = 1;\nprint \"should print hai:\", !$var1 && $var2 ? \"hai\" : \"bye\";\n\n$var1 = 1;\nprint \"should print bye:\", !$var1 && $var2 ? \"hai\" : \"bye\";\n\n$var2 = $var1 = 0;\nprint \"should print bye:\", !$var1 && $var2 ? \"hai\" : \"bye\";\n\n* The false values are empty list, empty string, undef, string\ncontaining only one zero, and any number -- but not string -- that is\nequivalent to 0\n** well, this is a little white lie because undef == 0 throws a\nwarning when the warnings pragma is in effect, but that is the only\ndifference.\n*** anything that is not false, i.e. all strings except the one\ncharacter string \"0\", any reference, and any numeric value other than\n0\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}