{"category": "ham", "to_address": "\"Neal A. Lucier\" <nlucier@math.purdue.edu>", "from_address": "Jeremy Allison <jra@samba.org>", "subject": "Re: symlink failure when listing a dircetory in samba 3.0.25", "body": "On Fri, May 11, 2007 at 02:33:48PM -0400, Neal A. Lucier wrote:\n> \n> I think that filtering is the wrong conclusion to the fact that\n> you are unable to guess the possible type and or status of the\n> target of a symlink.  My argument and subsequent example have to do\n> with just standard ugo UNIX permissions and might not apply in\n> Posix.1e, NTFS, NFSv4, or other ACL regimes.  I'm not a programmer\n> or an SMB/NTFS guru by any means.\n> \n> User 'nlucier' makes symlinks to files and directories in /root,\n> neither or which can be stated by the creator of the symlink or\n> anyone who stats the symlink; however, the symlink itself is\n> created with permiscous permissions and anyone can tell what\n> that it is a symlink and what its target is, and if they also\n> have abilites to stat the target then they can further determine\n> if the target is a directory or a file.\n> \n> In terms of icon choice in explorer.exe, it seems you need to\n> express three states; 1) symlink can stat target, target is dir\n> 2) symlink can stat target, target is file 3) symlink can't\n> stat target.  You could overload either the stat AND dir or\n> stat AND file icon to also symbolize no stat of target.\n> \n> Can't stat target example; \"dir\" is a directory symlink and \"file\"\n> is a file symlink (but since we can't stat who really knows?).\n> \n> % ln -s /root/file file\n> % ln -s /root/dir/ dir/\n> % ls -l file\n> lrwxrwxrwx   1 nlucier  cstaff        10 May 11 14:20 file -> /root/file\n> % ls -l dir\n> lrwxrwxrwx   1 nlucier  cstaff         9 May 11 14:20 dir -> /root/dir\n> \n> Can stat target example; ls intelligently recognizes and informs the\n> user if the target is a file or a directory.\n> \n> % ln -s /etc/passwd file\n> % ln -s /etc/init.d/ dir/\n> % ls -l file\n> lrwxrwxrwx   1 nlucier  cstaff        11 May 11 14:26 file -> /etc/passwd\n> % ls -l dir\n> lrwxrwxrwx   1 nlucier  cstaff        11 May 11 14:26 dir -> /etc/init.d/\n> \n> How this actually maps into how new Windows symlinks work I have no clue.\n> \n> But as a user (and an admin) I would like to be able to create and\n> see symlinks that point to nowhere on both *nix and samba/windows\n> shares and partitions.\n\nThen use the Linux CIFSFS client that understands symlinks and\nwill report them (and create them) in exactly the same way as\na local filesystem.\n\nIt's only a Windows client that can't see these things, as we\ncan't know what they map to. The codepath in question is only\ntaken when doing a Windows qfileinfo - on a UNIX qfileinfo\nwe correctly return a symlink.\n\nJeremy.\n\n"}