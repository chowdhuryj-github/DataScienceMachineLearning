{"category": "ham", "to_address": "Andy Spieherty <spiehera@lafayette.edu>", "from_address": "Jonathan Worthington <jonathan@jnthn.net>", "subject": "Re: [perl #42620] PGE 'Out of memory' panics.", "body": "Andy Spieherty wrote:\n> 2.  Garbage collection really slows the program down (I observed factors of 10 difference in speed with and without -G), and I have a vague unsupported suspicion that the slowdown grows faster than linearly with the allocated memory.\n>   \nI remember tracing through a load of this code for about an hour. I was \nnone the wiser afterwards, but I was trying to work out arenas and \nallocation stuff and so on.\n\nBasically, if you run the program without -G and then break it, it will \nusually break inside the GC routine. What I do remember is that it was \nlooping through some kinda memory pool, or arena, or whatever. However, \nthe thing it was looping through was *huge* (like, from 0 to a six \nfigure number) and I think it maybe was an n^2 algorithm, which \namplified the effect further.\n\nRecent mentions of a lack of memory pool compaction kinda resonates with \nwhat I analyzed; I always meant to return to look a bit more, but never \nhad time to dig deeper. I think re-discovering where it's spending so \nmuch time during GC would be a good start, though. And just randomly \nbreaking into the program did it for me, usually first time.\n\nJonathan\n\n"}