{"category": "ham", "to_address": "Carl Worth <cworth@redhat.com>", "from_address": "Dan Williams <dcbw@redhat.com>", "subject": "Re: [sugar] Cairo tile engine,\n\tand accessing 565 buffers from\tcairo and C", "body": "On Mon, 2007-04-16 at 21:25 -0700, Carl Worth wrote:\n> On Mon, 16 Apr 2007 16:59:18 -0700, Don Hopkins wrote:\n> > I want to draw RGB tiles (alpha is not necessary) on the screen as fast\n> > as possible, double buffering them in 16 bit X images,\n> \n> OK, so it sounds like all you need to use are 16-bit cairo xlib\n> surfaces, (created with cairo_surface_create_similar with\n> CAIRO_CONTENT_COLOR from an existing xlib surface).\n\nRight.  Make sure the whole critical path is 16-bit 565.\n\n> >                                      Is that a valid assumption, or is\n> > there a fast path for drawing a surface clipped through a rectangle?\n> \n> Drawing a single rectangle, (if pixel aligned---that is, just using\n> integer coordinates and an identity transformation), has lots of\n> fast-path treatment in cairo, so please take advantage of it. You can\n> do that with either:\n> \n> \tcairo_rectangle\n> \tcairo_clip\n> \n> to setup the clipping and then cairo_paint to do the painting, or\n> just:\n> \n> \tcairo_rectangle\n> \tcairo_fill\n> \n> to draw the part you want. Either way you should be hitting the same\n> path in cairo to ask the X server to do very efficient things.\n> \n> > Currently the tile surfaces are 24 bit RGB surfaces, that I create by\n> > calling create_similar on the 24 bit RGB tile set I read in from a png\n> > file.\n> \n> OK, so that's giving you image surfaces, and that's causing the slow\n> conversion when drawing to X. So the best would be to do that just\n> once, (get your data uploaded into an xlib surface, and then draw from\n> there).\n\nCorrect; about the only thing you can do here is use create_similar() on\nthe xlib _window_ surface, draw your 24bpp image surface to that, and\ncache the 565 xlib surface for all further drawing.  Note that you will\n_not_ get alpha because the surface is 565.\n\n> > xHow do I create an cairo xlib surface from Python? Is there a supported\n> > way to call cairo_xlib_surface_create from Python?\n> \n> Every cairo function should be callable from python, but I don't know\n> if there are python bindings for the xlib stuff you need, (like\n> XCreatePixmap to create the pixmap to pass to\n> cairo_xlib_surface_create). Fortunately, though you can just use the\n> GTK+ bindings.\n\nI looked at this last night.  The current python bindings don't have\nsupport for creating arbitrary Xlib surfaces.  I don't believe you can\ncall the equivalent of cairo_xlib_surface_create().  The only functions\nthat are bound for Xlib surfaces are get_depth(), get_height(), and\nget_width().  So before we can actually create arbitrary Xlib surfaces\nin whatever Xlib visual we want, we'd have to fix up the pycairo\nbindings to support that.\n\nI'm not even sure how to start passing in Xlib Display or Visual\nstructures given that there isn't any Xlib python binding to my\nknowledge.  Perhaps PyGTK would have some ideas on how to do this in\nit's X11 backend, but I think it only deals with xids and wraps most of\nXlib.\n\n> > Is there an easy way to get ahold of the cairo surface from a cairo\n> > context, or from a gdk drawable, from Python?\n> \n> For a cairo context you can call cairo_get_target, (probably\n> context.get_target in python), to get the surface it's targeting. So\n> that should give you the surface you need from which you can call\n> create_similar. And for the case of a gdk drawable you can call\n> gdk_cairo_create, and then cairo_get_target. (I do think it's a little\n> annoying that GTK+ doesn't have a direct way to create a cairo surface\n> from a GDK drawable, but the gdk_cairo_create;cairo_get_target\n> approach works fine---even if its not quite obvious).\n\nIt's pretty easy given a GTK widget.  Embed a GtkDrawingArea subclass in\nyour window, and then override the 'expose' method of the drawing area\nwidget.\n\nhttp://www.pygtk.org/articles/cairo-pygtk-widgets/cairo-pygtk-widgets.htm\n\nAgain, ensure that _any_ surfaces you use in your critical paths are\n565.  If anything is not 565, you'll be subject to Xlib having to smash\nan 888 pixmap down to 565, and that's not very fast, even with MMX.\n\nAlso, pycairo may need to be fixed before you can create arbitrary Xlib\nsurfaces of your desired depth, without using create_similar.  But in\nyour case, you can probably just use create_similar since you don't need\nanything except 565.\n\nDan\n\n> Anyway, I hope that all works out well for you. And I'm looking\n> forward to hearing what kinds of performance improvements you get from\n> using cairo xlib surfaces of the desired depth.\n> \n> -Carl\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}