{"category": "ham", "to_address": "\"Juan Pablo Lewinger\" <lewinger@usc.edu>", "from_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "subject": "Re: [R] Controlling text and strip arrangement in xyplot", "body": "On 6/19/07, Juan Pablo Lewinger  wrote:\n> I've searched the archives and read the xyplot help but can't figure\n> out the 2 lattice questions below?\n>\n> Consider:\n>\n> library(lattice)\n> DF <- data.frame(x=rnorm(20), y=rnorm(20), g1=rep(letters[1:2], 10),\n>                   g2=rep(LETTERS[1:2], each=10),\n> g3=rep(rep(letters[3:4],each=5),2))\n>\n> xyplot(y ~ x | g1 + g2, groups=g3, data=DF)\n>\n> 1) Is there a way to get one strip per row and column of panels as\n> below instead of the default?\n>\n>\n>         _|__a__|__b__|\n>          |\n>        B\n>          |\n>         --\n>          |\n>        A\n>          |\n\nThis has been discussed on the list before (if I remember correctly), and I\nhave been meaning to add something to the latticeExtra package.  An\nimplementation would look something like this (beware of line wrapping):\n\n\nuseOuterStrips <-\n    function(x,\n             strip = strip.default,\n             strip.left = strip.custom(horizontal = FALSE))\n{\n    dimx <- dim(x)\n    stopifnot(inherits(x, \"trellis\"))\n    stopifnot(length(dimx) == 2)\n    opar <- if (is.null(x$par.settings)) list() else x$par.settings\n    par.settings <-\n        modifyList(opar,\n                   list(layout.heights =\n                        list(strip = c(rep(0, dimx[2]-1), 1)),\n                        layout.widths =\n\t\t\tlist(strip.left = c(1, rep(0, dimx[1]-1)))))\n    update(x,\n           par.settings = par.settings,\n           strip = function(which.given, which.panel, ...) {\n               if (which.given == 1)\n                   strip(which.given = 1,\n                         which.panel = which.panel[1],\n                         ...)\n           },\n           strip.left = function(which.given, which.panel, ...) {\n               if (which.given == 2)\n                   strip.left(which.given = 1,\n                              which.panel = which.panel[2],\n                              ...)\n           },\n           par.strip.text = list(lines = 0.5),\n           layout = dimx)\n}\n\n\nThe function acts on a \"trellis\" object and returns an updated one, so\nfor your example, it would work like:\n\nuseOuterStrips(xyplot(y ~ x | g1 + g2, groups=g3, data=DF))\n\n\n> 2) How do I control the text of the strips so that for instance\n> instead of \"a\" and \"b\" it reads\"g1=alpha\", \"g1=beta\" where \"alpha\"\n> and \"beta\" stand for the corresponding greek symbols? (my difficulty\n> here is not with the plotmath symbols but with controlling the text\n> of the strips directly from the call to xyplot and not by renaming\n> the levels of g1)\n\nGenerally speaking, you need to write your own strip function.  The\ndefault (strip.default) has some useful arguments that modify its\nbehaviour, and in particular 'factor.levels' might do what you\nwant.  If you are going to do this in conjunction with (1), life will\nactually be simpler and you can get away with using strip.custom():\n\n\nuseOuterStrips(xyplot(y ~ x | g1 + g2, groups=g3, data=DF),\n               strip =\n               strip.custom(factor.levels =\n                            expression(g[1]==alpha, g[1]==beta)),\n               strip.left =\n               strip.custom(horizontal = FALSE,\n                            factor.levels =\n                            expression(g[2]==gamma, g[2]==delta)))\n\n\nOtherwise, you will really have to write a proper strip function that\ncalls strip.default() with different values of 'factor.levels'\ndepending on the value of 'which.given'.\n\nNote also the 'strip.names' and 'sep' argument of strip.default(),\nwhich might be more in line with what you want to do.\n\n-Deepayan\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}