{"category": "ham", "to_address": "\"Patrick R. Michaud via RT\" <parrotbug-followup@parrotcode.org>", "from_address": "Andy Spieherty <spiehera@lafayette.edu>", "subject": "Re: [perl #42620] PGE 'Out of memory' panics.", "body": "On Fri, 20 Apr 2007, Patrick R. Michaud via RT wrote:\n\n> On Fri, Apr 20, 2007 at 10:18:41AM -0400, Andy Spieherty wrote:\n> > On Thu, 19 Apr 2007, Patrick R. Michaud via RT wrote:\n> > > This does prompt the question of removing -G from the tests, \n> > > but the last time I looked into doing this (about a month ago) Parrot\n> > > still had intermittent GC errors that would cause random\n> > > failures in the tests.  \n> > \n> > [...]  With -G, I get to test 395 in p5regex/p5rx.t.  \n> > Without the -G, I memory usage still grows, and I only get to test 185 \n> > before getting the PANIC.  \n> \n> Is it still the \"out of memory\" panic?  \n\nYes.\n\n> Just to add a \"me too\", I've also noticed that running PGE-based\n> routines with GC enabled causes them to consume memory much faster\n> than with GC disabled, which seems totally counterintuitive.\n> \n> AFAIK, PGE isn't creating any global references (beyond its\n> static internal tables) that would cause objects to stick \n> around \"forever\".  It certainly isn't part of PGE's design\n> for that to happen.  So, maybe we need to do a bit of forensics \n> to find out where the memory consumption is occurring.\n\nI suspect it's more that PGE is probably one of the most complex parrot \napplications run as part of the normal test suite, so it stresses parrot \nin ways not tested by individual unit tests.\n\n-- \n    Andy Spieherty\t\tspiehera@lafayette.edu\n\n"}