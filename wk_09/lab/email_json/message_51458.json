{"category": "ham", "to_address": "Leopold Toetsch <lt@toetsch.at>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: memcpy", "body": "I wasn't entirely happy with either option, so I asked around a bit for \nother ideas. I like the macro approach below, it gives us both self \ndocumentation and better checking for the size of the two structs.\n\nAllison\n\n-------- Original Message --------\nFrom: Nick Forrette \nTo: Allison Randal \n\nThis can be a bit brittle -- you have to be careful when changing the\ntype of dst else you could end up with over or underflow.\nmemcpy(dst, src, sizeof(FOO));\n\nI do like memcpy because it serves as a red flag that a potentially\nmedium to large size hunk of memory will be copied here,\nmemcpy(dst, src, sizeof(*dst));\n\nThis gets you better type checking (if src and dst are different\nstruct types, the compiler will complain). Much harder to overflow dst\nor only partially copy src.\n*dst = *src;\n\n\nSomething like this can get you the best of the above, as long as\nyou're careful about size-effects (I'd have to double check to be\nsure, but I believe there are differences with pre-increment/decrement\nin a dereference/assignment v.s. two arguments to a function).\n\n#define copy_struct(dst, src) \\\n    (*(dst) = *(src))\n\ncopy_struct(dst, src);\n\n\nYou could use a more robust macro that does a run time check for size \neffects:\n\n// returns int so it can be used in a , expression\nint myAssert(int thisIsABool)\n{\n   assert(thisIsABool);\n   return 0;\n}\n\n#ifdef NDEBUG\n#define macro_assert(thisIsABool) 0\n#else\n#define macro_assert(thisIsABool) myAssert(thisIsABool)\n#endif\n\n#define copy_struct(dst, src) \\\n    (\\\n        macro_assert((dst) == (dst)), \\\n        macro_assert((src) == (src)), \\\n        (*(dst) = *(src)) \\\n    )\n\n\nGives you what I consider the best of all worlds. The compiler will\nflag copying between different struct types, it is more robust in the\nface of changed types for src or dst, in form that clearly spells out\nwhat you're trying to do, that at least gives you run time checking\nfor abuse of side effects in debug builds.\n\nNick\n\n"}