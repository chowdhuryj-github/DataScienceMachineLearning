{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23482 - in branches: SAMBA_3_0/source/smbd\n\tSAMBA_3_0_26/source/smbd", "body": "Author: vlendec\nDate: 2007-06-14 09:45:39 +0000 (Thu, 14 Jun 2007)\nNew Revision: 23482\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23482\n\nLog:\nSlightly simplify the rename code: Remove two local variables that are\nnot really needed.\n\nModified:\n   branches/SAMBA_3_0/source/smbd/reply.c\n   branches/SAMBA_3_0_26/source/smbd/reply.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/smbd/reply.c\n===================================================================\n--- branches/SAMBA_3_0/source/smbd/reply.c\t2007-06-14 06:05:27 UTC (rev 23481)\n+++ branches/SAMBA_3_0/source/smbd/reply.c\t2007-06-14 09:45:39 UTC (rev 23482)\n@@ -4168,13 +4168,15 @@\n  asynchronously.\n ****************************************************************************/\n \n-static void rename_open_files(connection_struct *conn, struct share_mode_lock *lck,\n-\t\t\t      struct file_id id, const char *newname)\n+static void rename_open_files(connection_struct *conn,\n+\t\t\t      struct share_mode_lock *lck,\n+\t\t\t      const char *newname)\n {\n \tfiles_struct *fsp;\n \tBOOL did_rename = False;\n \n-\tfor(fsp = file_find_di_first(id); fsp; fsp = file_find_di_next(fsp)) {\n+\tfor(fsp = file_find_di_first(lck->id); fsp;\n+\t    fsp = file_find_di_next(fsp)) {\n \t\t/* fsp_name is a relative path under the fsp. To change this for other\n \t\t   sharepaths we need to manipulate relative paths. */\n \t\t/* TODO - create the absolute path and manipulate the newname\n@@ -4191,7 +4193,7 @@\n \n \tif (!did_rename) {\n \t\tDEBUG(10,(\"rename_open_files: no open files on file_id %s for %s\\n\",\n-\t\t\t  file_id_static_string(&id), newname ));\n+\t\t\t  file_id_static_string(&lck->id), newname ));\n \t}\n \n \t/* Send messages to all smbd's (not ourself) that the name has changed. */\n@@ -4237,7 +4239,6 @@\n \tSMB_STRUCT_STAT sbuf;\n \tpstring newname_last_component;\n \tNTSTATUS status = NT_STATUS_OK;\n-\tBOOL dest_exists;\n \tstruct share_mode_lock *lck = NULL;\n \n \tZERO_STRUCT(sbuf);\n@@ -4306,9 +4307,7 @@\n \t\treturn NT_STATUS_OK;\n \t}\n \n-\tdest_exists = vfs_object_exist(conn,newname,NULL);\n-\n-\tif(!replace_if_exists && dest_exists) {\n+\tif(!replace_if_exists && vfs_object_exist(conn, newname, NULL)) {\n \t\tDEBUG(3,(\"rename_internals_fsp: dest exists doing rename %s -> %s\\n\",\n \t\t\tfsp->fsp_name,newname));\n \t\treturn NT_STATUS_OBJECT_NAME_COLLISION;\n@@ -4347,7 +4346,7 @@\n \t\tDEBUG(3,(\"rename_internals_fsp: succeeded doing rename on %s -> %s\\n\",\n \t\t\tfsp->fsp_name,newname));\n \n-\t\trename_open_files(conn, lck, fsp->file_id, newname);\n+\t\trename_open_files(conn, lck, newname);\n \n \t\t/*\n \t\t * A rename acts as a new file create w.r.t. allowing an initial delete\n@@ -4455,7 +4454,6 @@\n \tconst char *dname;\n \tlong offset = 0;\n \tpstring destname;\n-\tstruct file_id id;\n \n \t*directory = *mask = 0;\n \n@@ -4605,8 +4603,6 @@\n \t\t * don't do the rename, just return success.\n \t\t */\n \n-\t\tid = file_id_sbuf(&sbuf1);\n-\n \t\tif (strcsequal(directory, newname)) {\n \t\t\tDEBUG(3, (\"rename_internals: identical names in \"\n \t\t\t\t  \"rename %s - returning success\\n\",\n@@ -4624,12 +4620,13 @@\n \t\t\treturn NT_STATUS_SHARING_VIOLATION;\n \t\t}\n \n-\t\tlck = get_share_mode_lock(NULL, id, NULL, NULL);\n+\t\tlck = get_share_mode_lock(NULL, file_id_sbuf(&sbuf1),\n+\t\t\t\t\t  NULL, NULL);\n \n \t\tif(SMB_VFS_RENAME(conn,directory, newname) == 0) {\n \t\t\tDEBUG(3,(\"rename_internals: succeeded doing rename \"\n \t\t\t\t \"on %s -> %s\\n\", directory, newname));\n-\t\t\trename_open_files(conn, lck, id, newname);\n+\t\t\trename_open_files(conn, lck, newname);\n \t\t\tTALLOC_FREE(lck);\n \t\t\tnotify_rename(conn, S_ISDIR(sbuf1.st_mode),\n \t\t\t\t      directory, newname);\n@@ -4740,8 +4737,6 @@\n \t\t\treturn status;\n \t\t}\n \n-\t\tid = file_id_sbuf(&sbuf1);\n-\n \t\tif (strcsequal(fname,destname)) {\n \t\t\tDEBUG(3,(\"rename_internals: identical names \"\n \t\t\t\t \"in wildcard rename %s - success\\n\",\n@@ -4761,10 +4756,11 @@\n \t\t\treturn NT_STATUS_SHARING_VIOLATION;\n \t\t}\n \n-\t\tlck = get_share_mode_lock(NULL, id, NULL, NULL);\n+\t\tlck = get_share_mode_lock(NULL, file_id_sbuf(&sbuf1), NULL,\n+\t\t\t\t\t  NULL);\n \n \t\tif (!SMB_VFS_RENAME(conn,fname,destname)) {\n-\t\t\trename_open_files(conn, lck, id, newname);\n+\t\t\trename_open_files(conn, lck, newname);\n \t\t\tcount++;\n \t\t\tstatus = NT_STATUS_OK;\n \t\t}\n\nModified: branches/SAMBA_3_0_26/source/smbd/reply.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/smbd/reply.c\t2007-06-14 06:05:27 UTC (rev 23481)\n+++ branches/SAMBA_3_0_26/source/smbd/reply.c\t2007-06-14 09:45:39 UTC (rev 23482)\n@@ -4166,13 +4166,15 @@\n  asynchronously.\n ****************************************************************************/\n \n-static void rename_open_files(connection_struct *conn, struct share_mode_lock *lck,\n-\t\t\t      struct file_id id, const char *newname)\n+static void rename_open_files(connection_struct *conn,\n+\t\t\t      struct share_mode_lock *lck,\n+\t\t\t      const char *newname)\n {\n \tfiles_struct *fsp;\n \tBOOL did_rename = False;\n \n-\tfor(fsp = file_find_di_first(id); fsp; fsp = file_find_di_next(fsp)) {\n+\tfor(fsp = file_find_di_first(lck->id); fsp;\n+\t    fsp = file_find_di_next(fsp)) {\n \t\t/* fsp_name is a relative path under the fsp. To change this for other\n \t\t   sharepaths we need to manipulate relative paths. */\n \t\t/* TODO - create the absolute path and manipulate the newname\n@@ -4189,7 +4191,7 @@\n \n \tif (!did_rename) {\n \t\tDEBUG(10,(\"rename_open_files: no open files on file_id %s for %s\\n\",\n-\t\t\t  file_id_static_string(&id), newname ));\n+\t\t\t  file_id_static_string(&lck->id), newname ));\n \t}\n \n \t/* Send messages to all smbd's (not ourself) that the name has changed. */\n@@ -4235,7 +4237,6 @@\n \tSMB_STRUCT_STAT sbuf;\n \tpstring newname_last_component;\n \tNTSTATUS status = NT_STATUS_OK;\n-\tBOOL dest_exists;\n \tstruct share_mode_lock *lck = NULL;\n \n \tZERO_STRUCT(sbuf);\n@@ -4304,9 +4305,7 @@\n \t\treturn NT_STATUS_OK;\n \t}\n \n-\tdest_exists = vfs_object_exist(conn,newname,NULL);\n-\n-\tif(!replace_if_exists && dest_exists) {\n+\tif(!replace_if_exists && vfs_object_exist(conn, newname, NULL)) {\n \t\tDEBUG(3,(\"rename_internals_fsp: dest exists doing rename %s -> %s\\n\",\n \t\t\tfsp->fsp_name,newname));\n \t\treturn NT_STATUS_OBJECT_NAME_COLLISION;\n@@ -4345,7 +4344,7 @@\n \t\tDEBUG(3,(\"rename_internals_fsp: succeeded doing rename on %s -> %s\\n\",\n \t\t\tfsp->fsp_name,newname));\n \n-\t\trename_open_files(conn, lck, fsp->file_id, newname);\n+\t\trename_open_files(conn, lck, newname);\n \n \t\t/*\n \t\t * A rename acts as a new file create w.r.t. allowing an initial delete\n@@ -4453,7 +4452,6 @@\n \tconst char *dname;\n \tlong offset = 0;\n \tpstring destname;\n-\tstruct file_id id;\n \n \t*directory = *mask = 0;\n \n@@ -4603,8 +4601,6 @@\n \t\t * don't do the rename, just return success.\n \t\t */\n \n-\t\tid = file_id_sbuf(&sbuf1);\n-\n \t\tif (strcsequal(directory, newname)) {\n \t\t\tDEBUG(3, (\"rename_internals: identical names in \"\n \t\t\t\t  \"rename %s - returning success\\n\",\n@@ -4622,12 +4618,13 @@\n \t\t\treturn NT_STATUS_SHARING_VIOLATION;\n \t\t}\n \n-\t\tlck = get_share_mode_lock(NULL, id, NULL, NULL);\n+\t\tlck = get_share_mode_lock(NULL, file_id_sbuf(&sbuf1),\n+\t\t\t\t\t  NULL, NULL);\n \n \t\tif(SMB_VFS_RENAME(conn,directory, newname) == 0) {\n \t\t\tDEBUG(3,(\"rename_internals: succeeded doing rename \"\n \t\t\t\t \"on %s -> %s\\n\", directory, newname));\n-\t\t\trename_open_files(conn, lck, id, newname);\n+\t\t\trename_open_files(conn, lck, newname);\n \t\t\tTALLOC_FREE(lck);\n \t\t\tnotify_rename(conn, S_ISDIR(sbuf1.st_mode),\n \t\t\t\t      directory, newname);\n@@ -4738,8 +4735,6 @@\n \t\t\treturn status;\n \t\t}\n \n-\t\tid = file_id_sbuf(&sbuf1);\n-\n \t\tif (strcsequal(fname,destname)) {\n \t\t\tDEBUG(3,(\"rename_internals: identical names \"\n \t\t\t\t \"in wildcard rename %s - success\\n\",\n@@ -4759,10 +4754,11 @@\n \t\t\treturn NT_STATUS_SHARING_VIOLATION;\n \t\t}\n \n-\t\tlck = get_share_mode_lock(NULL, id, NULL, NULL);\n+\t\tlck = get_share_mode_lock(NULL, file_id_sbuf(&sbuf1), NULL,\n+\t\t\t\t\t  NULL);\n \n \t\tif (!SMB_VFS_RENAME(conn,fname,destname)) {\n-\t\t\trename_open_files(conn, lck, id, newname);\n+\t\t\trename_open_files(conn, lck, newname);\n \t\t\tcount++;\n \t\t\tstatus = NT_STATUS_OK;\n \t\t}\n\n"}