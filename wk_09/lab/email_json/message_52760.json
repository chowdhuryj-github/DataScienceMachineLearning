{"category": "ham", "to_address": "Damian Conway <damian@conway.org>", "from_address": "Mark Overmeer <mark@overmeer.net>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "* Damian Conway (damian@conway.org) [070622 09:02]:\n> Mark Overmeer wrote:\n> >Then, when you want to add some docs to the method, to help the\n> >correct use, add it, for instance like:\n> >\n> >  method isValidPostalCode(str $postalcode) returns bool {...}\n> >     ` Check wether the postal code confirms to the standards\n> >     `$postalcode: a string with blanks trimmed.\n> >     `return: the string is not cleaned-up.\n> >\n> >or maybe (exact syntax open to discussion)\n> >\n> >  method isValidPostalCode(str $postalcode) returns bool {...}\n> >  #=  Check wether the postal code confirms to the standards\n> >  #=$postalcode\n> >  #=  a string with blanks trimmed.\n> >  #=return\n> >  #=  the string is not cleaned-up.\n> \n> Would the following syntax suffice?\n> \n>    method isValidPostalCode(str $postalcode) returns bool {...}\n>    =PURPOSE  Check weather the postal code confirms to the standards\n>    =ARG $postalcode\n>        a string with blanks trimmed.\n>    =RETURN\n>        the string is not cleaned-up.\n> \n> Because you can already do precisely that in the current design of Pod 6.\n\nThis is syntactically what can be done with the current design,\nbut is semantically very different.\n\n> And having done it, the current Pod::Parser will extract all of that\n> information (including the source code), preserving the sequential and\n> hierarchical relationships, and present you with an internal object\n> representation that your documentation tool can then analyze and\n> convert to whatever content and layout you prefer (including\n> non-semantic Pod that you can then feed into any of a dozen\n> back-ends).\n\nBesides the point that I do not really like the YELLING all the time, it\nstill has the complication to reconstruct Perl code from the Pod::Parser\ntree.  The tools I wish for need to able to match the tree created by Perl\nwith the tree created by your Pod::Parser, in some safe and simple way.\n\nThe needs for my kind of documentation gerenators are very simple: the\nPerl6 parser needs to collect all lines of docs which follow a certain\nline with code into the AST node of that line or item.  The Perl6 \nparser itself doesn't need to do anything more than that.  Tools doing\nintrospection on the AST do the rest.\n\nYou gave the hint that comments are also in the parse tree.  So, that\nis suffiencent for me:\n\n   sub greetings() { say \"Hello, World!\" }\n   #= the standard first program    <-- doc for user\n   #  we like Perl6 new features    <-- additional doc on internals.\n\nor\n\n   #=sub greetings\n   #=   the standard first program\n   sub greetings() { say \"Hello, World!\" }\n   # we like Perl6 new features     <-- additional doc on internals.\n\n [ I think that the doc block should always start with the item\n   what you are describing, so if the block is before the item (or\n   anywhere else in the file), then it needs to be referenced to (as\n   simple as possible) ]\n\n [ now I have to study the introspection features of the AST ]\n-- \n               MarkOv\n\n------------------------------------------------------------------------\n       Mark Overmeer MSc                                MARKOV Solutions\n       Mark@Overmeer.net                          solutions@overmeer.net\nhttp://Mark.Overmeer.net                   http://solutions.overmeer.net\n\n"}