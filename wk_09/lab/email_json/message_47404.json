{"category": "ham", "to_address": "Northstardomus <northstardomus@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Database insertion, escape issue", "body": "On 6/13/07, Northstardomus  wrote:\nsnip\n>     $sth->execute($values[0], $values[1], $values[3]) or die $dbh-\nsnip\n\nTwo things:\n\n1. If you always want to die on failure it is easier and safer to say\n\nmy $dbh = DBI->connect(\n    $dsn,\n    $user,\n    $pass,\n    {\n        RaiserError => 1\n    }\n) or die DBI->errstr;\n\nThis will cause the DBI to die with DBI->errstr for any errors.\n\n2.  If you are certain that @values has four values in it you can just say\n\n$sth->execute(@values);\n\nIf you want to limit it to a specific subset of @values then use a slice*.\n\n$sth->execute(@values[0 .. 3]);\n\n* see perldoc perldata\n       Entire arrays (and slices of arrays and hashes) are denoted by '@',\n       which works much like the word \"these\" or \"those\" does in English, in\n       that it indicates multiple values are expected.\n\n           @days               # ($days[0], $days[1],... $days[n])\n           @days[3,4,5]        # same as ($days[3],$days[4],$days[5])\n           @days{'a','c'}      # same as ($days{'a'},$days{'c'})\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}