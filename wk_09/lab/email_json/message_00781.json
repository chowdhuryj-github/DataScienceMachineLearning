{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Beginning to use the stricts and warnings", "body": "On 4/9/07, Jean-Rene David  wrote:\n> * Chas Owens [2007.04.09 11:00]:\n> > >       for (my $i = 0; $i < @banks; $i++)\n> >\n> > If you must loop this way at least do it like this:\n> >\n> > for my $i (0 .. $#banks) {}\n> >\n> > But most likely you don't need to loop that way and it is better to\n> > loop this way:\n> >\n> > for my $bank (@banks) {}\n>\n> I've been wondering: is the array guaranteed to be\n> traversed in the same order in all three cases?\n\nAll three loops process the array in the same order (from index 0 to\nindex $#array).  The benefit of the index-less version is that you\ncannot make an off-by-one-error.  Examine the following loops:\n\nfor (my $i = 1; $i < @banks; $i++)\nfor (my $i = 0; $i <= @banks; $i++)\nfor (my $i = 1; $i <= @banks; $i++)\nfor my $i (0 .. @banks)\nfor my $i (1 .. @banks)\nfor my $i (1 .. $#banks)\n\nHow easy do you think it will be to find the error?  What if the code\nseems to be doing the right thing?  It is much safer to say\n\nfor my $bank (@banks)\n\nYou know for certain that each element of @array will be visited.\n\nIt is also important to note that there is no difference between $bank\nand $banks[$i].  If you modify $bank then the corresponding element in\n@banks is also modified.\n\n>\n> And are the latter two really \"for\" and not\n> \"foreach\"?\nsnip\n\nforeach is now only an alias for for, if that makes any sense.  They\nused to have separate functionality, but somewhere around 5.6 they\nwere merged.  The term foreach is only kept around for legacy code;\nnew code should use for.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}