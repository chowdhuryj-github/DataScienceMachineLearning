{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14417 - doc/trunk/design/syn", "body": "Author: larry\nDate: Fri Jun  8 11:13:55 2007\nNew Revision: 14417\n\nModified:\n   doc/trunk/design/syn/S02.pod\n\nLog:\nshould proofread before checkin, not after...\n\n\nModified: doc/trunk/design/syn/S02.pod\n==============================================================================\n--- doc/trunk/design/syn/S02.pod\t(original)\n+++ doc/trunk/design/syn/S02.pod\tFri Jun  8 11:13:55 2007\n@@ -1676,8 +1676,8 @@\n =item *\n \n For an ordinary Perl program running by itself, the C and\n-C namespaces are considered synonymous.  However, it certain\n-situations (such as shared hosting under a webserver), the actually\n+C namespaces are considered synonymous.  However, in certain\n+situations (such as shared hosting under a webserver), the actual\n process may contain multiple virtual processes, each running its own\n \"main\" code.  In this case, the C namespace holds variables\n that properly belong to the individual virtual process, while the\n@@ -1689,11 +1689,11 @@\n mutability of process variables as seen by the individual subprocesses.\n Also, individual subprocesses may not create new process variables.\n If the process wishes to grant subprocesses the ability to communicate\n-via the C namespace, it must supply a writeable hash or some\n-such to all the subprocesses granted that privilege.\n+via the C namespace, it must supply a writeable variable\n+to all the subprocesses granted that privilege.\n \n-When these namespaces are distinguished, the C<*> shortcut always refers\n-to C.  There is no twigil shortcut for C.\n+When these namespaces are so distinguished, the C<*> shortcut always refers\n+to C.  There is no twigil shortcut for C.\n \n =item *\n \n\n"}