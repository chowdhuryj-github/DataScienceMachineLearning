{"category": "ham", "to_address": "\"jerry gay\" <jerry.gay@gmail.com>, p2 <parrot-porters@perl.org>", "from_address": "\"jerry gay\" <jerry.gay@gmail.com>", "subject": "Re: FoTW: src/debug.c -- function and macro do the same thing", "body": "On 5/16/07, Nicholas Clark  wrote:\n> On Wed, May 16, 2007 at 08:45:04AM -0700, jerry gay wrote:\n> > here's a macro to move to the next argument (kjs mentioned in an\n> > earlier thread that this isn't a descriptive name)\n> >\n> >  /* na(c) [Next Argument (Char pointer)]\n> >   *\n> >   * Moves the pointer to the next argument in the user input.\n> >   */\n> >  #define na(c) { \\\n> >      while (*c && !isspace((int) *c)) \\\n> >          c++; \\\n> >      while (*c && isspace((int) *c)) \\\n> >          c++; }\n>\n> That ought to be written (at least):\n>\n>   #define na(c) { \\\n>       while (*c && !isspace((int) *c)) \\\n>           c++; \\\n>       while (isspace((int) *c)) \\\n>           c++; }\n>\n> because isspace('\\0') is false\n>\n>\n> And really, given that macros are text substitutions, standard practice is\n> to wrap all arguments in parentheses, to avoid bugs related to precedence\n> when something more complex is passed in. So, in general, I'd be happier with:\n>\n>   #define na(c) { \\\n>       while (*(c) && !isspace((int) *(c))) \\\n>           (c)++; \\\n>       while (isspace((int) *(c))) \\\n>           (c)++; }\n>\ngood comments... but why keep both function and macro? which would you\nprefer keeping over the other, and why? i can't understand why both\nexist.\n~jerry\n\n"}