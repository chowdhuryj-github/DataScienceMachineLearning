{"category": "ham", "to_address": "\"David Green\" <david.green@telus.net>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Re: Referring to source code within Perldoc", "body": "David Green wrote:\n> (Unless I'm missing something, which is always possible; you can put\n> a piece of POD geographically next to a Perl declaration, but I'm not\n> sure that's unambiguous enough.  Hm, why not?  POD doesn't know\n> what's going on around it, but Perl does, and could say, \"I've just\n> declared $size, and the next line starts a chunk of POD, so I'll\n> simply copy it into $size's 'documented' trait... would that work??)\n\nIt is doable: say that any Pod section that appears within or after a\nclass definition is considered by perldoc to refer to that class.\n\nThe problem with this is that you're forcing the Pod author to\norganize his documentation in a manner that precisely mirrors the\norganization used by the Perl programmer, and to scatter it throughout\nthe module.  This isn't necessarily a deal-breaker because the Pod\nauthor is usually(?) going to _be_ the Perl programmer (thus letting\nhim reorganize the classes to match the preferred documentation\nsequence or vice versa), and because the Pod author may _prefer_ to\nplace the documentation in close proximity to the source code being\ndocumented.  But it would be nice to have more freedom of placement of\ndocumentation for those with other preferences.\n\nThere's the new 'A<>' tag, which specifically refers to a word or\nphrase in the source code.  But that's a single inline tag; so it's\nquestionable as to how useful it would be for the purpose of\nassociating an entire Pod section to a piece of source code.  In\naddition, the 'A<>' tag, as written, makes explicit use of exactly the\ngeographic positioning that we're trying to get around.\n\n--\n\nThen there's the suggestion that I made about providing a Pod rule (or\nPod rules) for the purpose of identifying points in or sections of the\nsource code for more robust referencing.  In my proposal, I suggested\nbeing able to say something like '=code Foo' to identify the start of\na section of source code that abstractly relates to the label 'Foo',\ncoupled with the ability to tell a Pod section elsewhere that it is\nassociated with the source code identified by 'Foo' (using something\nlike '=begin pod :A' to do so).\n\nAt the time, I was thinking in terms of allowing more freedom of\nplacement of 'A<>' tags; but it also works for giving entire pod\nsections freedom of placement while still maintaining ties to specific\nsource code: for example, perldoc could look for the '=code' rule that\nprecedes or encompasses a given class definition and then associate\nany Pod sections that attach themselves to that rule with that class.\nSo while the '=code' rule would have to maintain a close geographic\nrelationship to the source code in question, the documentation itself\nwould not.\n\nIdeally, this wouldn't replace the proximity-based bindings, but would\nsupplement it, with the idea that Pod sections with :A<...> traits\nwould be bound to whatever follows the associated '=code' rule, while\nthose without :A<...> traits would be bound to whatever they follow.\n\nBest of all, none of these bindings would be Pod's responsibility.  As\nfar as Pod is concerned, the only use that '=code' rules would have\nwould be in service to 'A<>' tags, and could maintain ignorance about\nwhat the source code speaks of.  Perldoc would have the final\nresponsibility of binding documentation to definitions.\n\n--\n\nThe other way to go about it would be to have the source code refer to\nPod sections:\n\n  class Foo is documented(Bar) {\n    has $.x is documented(Baz);\n  }\n\n  ...\n\n  =begin Bar\n  ...\n\n  =begin Baz\n  ...\n\nThis places the responsibility of bindings on the language (in this\ncase, Perl) - each of which would have to come up with its own syntax\nfor referencing documentation.  This is fine as far as Perldoc is\nconcerned, but does raise issues if you decide that you want to do\nsomething similar with, say, C++ or HTML.\n\n-- \nJonathan \"Dataweaver\" Lang\n\n"}