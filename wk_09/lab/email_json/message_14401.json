{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jelmer@samba.org", "subject": "svn commit: samba r22503 - in branches/SAMBA_4_0: .\n\tsource/lib/socket", "body": "Author: jelmer\nDate: 2007-04-24 13:55:04 +0000 (Tue, 24 Apr 2007)\nNew Revision: 22503\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22503\n\nLog:\nAdd support for dgram to socket_ipv6. No tests yet...\nModified:\n   branches/SAMBA_4_0/\n   branches/SAMBA_4_0/source/lib/socket/socket_ipv6.c\n\n\nChangeset:\n\nProperty changes on: branches/SAMBA_4_0\n___________________________________________________________________\nName: bzr:merge\n...skipped...\n\nModified: branches/SAMBA_4_0/source/lib/socket/socket_ipv6.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/socket/socket_ipv6.c\t2007-04-24 12:56:23 UTC (rev 22502)\n+++ branches/SAMBA_4_0/source/lib/socket/socket_ipv6.c\t2007-04-24 13:55:04 UTC (rev 22503)\n@@ -190,7 +190,12 @@\n \tstruct sockaddr_in cli_addr;\n \tsocklen_t cli_addr_len = sizeof(cli_addr);\n \tint new_fd;\n+\t\n+\tif (sock->type != SOCKET_TYPE_STREAM) {\n+\t\treturn NT_STATUS_INVALID_PARAMETER;\n+\t}\n \n+\n \tnew_fd = accept(sock->fd, (struct sockaddr *)&cli_addr, &cli_addr_len);\n \tif (new_fd == -1) {\n \t\treturn map_nt_error_from_unix(errno);\n@@ -249,6 +254,62 @@\n \treturn NT_STATUS_OK;\n }\n \n+static NTSTATUS ipv6_recvfrom(struct socket_context *sock, void *buf, \n+\t\t\t      size_t wantlen, size_t *nread, \n+\t\t\t      TALLOC_CTX *addr_ctx, struct socket_address **_src)\n+{\n+\tssize_t gotlen;\n+\tstruct sockaddr_in6 *from_addr;\n+\tsocklen_t from_len = sizeof(*from_addr);\n+\tstruct socket_address *src;\n+\tstruct hostent *he;\n+\t\n+\tsrc = talloc(addr_ctx, struct socket_address);\n+\tif (!src) {\n+\t\treturn NT_STATUS_NO_MEMORY;\n+\t}\n+\t\n+\tsrc->family = sock->backend_name;\n+\n+\tfrom_addr = talloc(src, struct sockaddr_in6);\n+\tif (!from_addr) {\n+\t\ttalloc_free(src);\n+\t\treturn NT_STATUS_NO_MEMORY;\n+\t}\n+\n+\tsrc->sockaddr = (struct sockaddr *)from_addr;\n+\n+\t*nread = 0;\n+\n+\tgotlen = recvfrom(sock->fd, buf, wantlen, 0, \n+\t\t\t  src->sockaddr, &from_len);\n+\tif (gotlen == 0) {\n+\t\ttalloc_free(src);\n+\t\treturn NT_STATUS_END_OF_FILE;\n+\t} else if (gotlen == -1) {\n+\t\ttalloc_free(src);\n+\t\treturn map_nt_error_from_unix(errno);\n+\t}\n+\n+\tsrc->sockaddrlen = from_len;\n+\n+\the = gethostbyaddr((void *)&from_addr->sin6_addr, sizeof(from_addr->sin6_addr), AF_INET6);\n+\tif (he == NULL) {\n+\t\ttalloc_free(src);\n+\t\treturn NT_STATUS_INTERNAL_ERROR;\n+\t}\n+\tsrc->addr = talloc_strdup(src, he->h_name);\n+\tif (src->addr == NULL) {\n+\t\ttalloc_free(src);\n+\t\treturn NT_STATUS_NO_MEMORY;\n+\t}\n+\tsrc->port = ntohs(from_addr->sin6_port);\n+\n+\t*nread\t= gotlen;\n+\t*_src\t= src;\n+\treturn NT_STATUS_OK;\n+}\n+\n static NTSTATUS ipv6_tcp_send(struct socket_context *sock, \n \t\t\t      const DATA_BLOB *blob, size_t *sendlen)\n {\n@@ -266,6 +327,42 @@\n \treturn NT_STATUS_OK;\n }\n \n+static NTSTATUS ipv6_sendto(struct socket_context *sock, \n+\t\t\t    const DATA_BLOB *blob, size_t *sendlen, \n+\t\t\t    const struct socket_address *dest_addr)\n+{\n+\tssize_t len;\n+\n+\tif (dest_addr->sockaddr) {\n+\t\tlen = sendto(sock->fd, blob->data, blob->length, 0, \n+\t\t\t     dest_addr->sockaddr, dest_addr->sockaddrlen);\n+\t} else {\n+\t\tstruct sockaddr_in6 srv_addr;\n+\t\tstruct in6_addr addr;\n+\t\t\n+\t\tZERO_STRUCT(srv_addr);\n+\t\taddr                     = interpret_addr6(dest_addr->addr);\n+\t\tif (addr.s6_addr == 0) {\n+\t\t\treturn NT_STATUS_HOST_UNREACHABLE;\n+\t\t}\n+\t\tsrv_addr.sin6_addr = addr;\n+\t\tsrv_addr.sin6_port        = htons(dest_addr->port);\n+\t\tsrv_addr.sin6_family      = PF_INET6;\n+\t\t\n+\t\t*sendlen = 0;\n+\t\t\n+\t\tlen = sendto(sock->fd, blob->data, blob->length, 0, \n+\t\t\t     (struct sockaddr *)&srv_addr, sizeof(srv_addr));\n+\t}\n+\tif (len == -1) {\n+\t\treturn map_nt_error_from_unix(errno);\n+\t}\t\n+\n+\t*sendlen = len;\n+\n+\treturn NT_STATUS_OK;\n+}\n+\n static NTSTATUS ipv6_tcp_set_option(struct socket_context *sock, const char *option, const char *val)\n {\n \tset_socket_options(sock->fd, option);\n@@ -410,6 +507,8 @@\n \t.fn_listen\t\t= ipv6_tcp_listen,\n \t.fn_accept\t\t= ipv6_tcp_accept,\n \t.fn_recv\t\t= ipv6_tcp_recv,\n+\t.fn_recvfrom \t= ipv6_recvfrom,\n+\t.fn_sendto\t\t= ipv6_sendto,\n \t.fn_send\t\t= ipv6_tcp_send,\n \t.fn_close\t\t= ipv6_tcp_close,\n \t.fn_pending\t\t= ipv6_pending,\n@@ -425,8 +524,5 @@\n \n const struct socket_ops *socket_ipv6_ops(enum socket_type type)\n {\n-\tif (type != SOCKET_TYPE_STREAM) {\n-\t\treturn NULL;\n-\t}\n \treturn &ipv6_tcp_ops;\n }\n\n"}