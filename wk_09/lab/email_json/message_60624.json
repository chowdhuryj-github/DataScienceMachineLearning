{"category": "ham", "to_address": "Richard Hainsworth <richard@rusrating.ru>", "from_address": "Mark Overmeer <mark@overmeer.net>", "subject": "Re: Documenting Perl6", "body": "* Richard Hainsworth (richard@rusrating.ru) [070702 17:06]:\n> Having read this posting, I find it VERY hard to understand exactly how \n> Damian and Mark differ fundamentally. They both seem to be after the \n> same thing in the end.\n\nDamain defines a markup language, and says that \"tools\" (to be defined)\nwill do the actual work.  I try to define the needs to create good tools\nfirst.  The unspoken conclusion from my list must be that POD6 is not\nbringing us closer to the goal than POD(5) does, because most of the\nneeds are not answered in that design.\n\n> A rhetorical question of my own and an answer.\n> Q) what is the real difference between comments and documentation?\n> - Syntactically for the perl parser they are both white space.\n> - Both are used to explain the code.\n\nDocs are for end-users, which do want to use the code but were\nthe internal organization is a black box.  Comments explain code\nwhere it is not obvious for maintainers, looking at the guts.\n\n> Questions:\n> 1) Would it be possible to unify all comments and documentation into a \n> single paradigm, such as a sort of bracketting convention with optional \n> extra information for other tools to use, eg., layout information, \n> grouping information, context (viz., for a tutorial, or reference) \n> information?\n\nAll are forms of text, so yes.  However, probably you loose more than\nyou win, because, as you said yourself: their purpose is very different.\nWhen you forcefully merge unrelated things, you add complexity.\n\n> 2) Would it be possible for the brackets to have different 'opacities' \n> for the perl parser, so that code can be recognised both as code and as \n> documentation with extra information? In this way, code would be \n> included in some forms of documentation (eg., function signatures in \n> reference manuals) just by placing \"transparent\" documentation brackets \n> around them.\n\nActually, for commenting code you probably already use invisible brackets:\nyou put comments on seperate lines before a piece of code, and when the\nnext comment block starts, the previous ends.\n\n> 3) Would it be possible for the brackets to have 'opacities' for the \n> perl parser that can be set by the value of some variable, hence \n> debugging / tracing code could be switched on by setting that variable \n> in the code?\n\nAre you merging the idea of assertions with documentation here?\n\n> 4) Is there a means for specifying the way documentation is reassembled, \n> eg., a means for defining for say a tutorial a different structure than \n> the linear structure of the documentation strings within the software?\n\nI would like to put this responsibility in the back-ends, with a\nbig \"YES\".\n\n> c) Am I wrong in thinking that implementing the suggestions in the \n> questions should not require a substantial redesign of perl6?\n\nThere is no need for any redesign.\n\n> d) If what I have suggested can already be done with Pod, could some \n> examples be shown.\n\nI have asked for more extensive demonstrations how POD6 would\nbe used, but uptill now only saw very small documentation fragments.\nBut IMO, POD6 is not the problem: it's just not the solution.\n-- \nRegards,\n               MarkOv\n\n------------------------------------------------------------------------\n       Mark Overmeer MSc                                MARKOV Solutions\n       Mark@Overmeer.net                          solutions@overmeer.net\nhttp://Mark.Overmeer.net                   http://solutions.overmeer.net\n\n"}