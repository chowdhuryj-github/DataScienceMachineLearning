{"category": "ham", "to_address": "perl6-compiler@perl.org", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: x and xx operators fail when given negatives", "body": "it looks like the patch did not make it to the list, so here it is inline\n\ndiff -ruN pugs.orig/src/Pugs/Prim.hs pugs/src/Pugs/Prim.hs\n--- pugs.orig/src/Pugs/Prim.hs  2007-05-25 16:34:55.000000000 -0400\n+++ pugs/src/Pugs/Prim.hs       2007-05-25 15:59:47.000000000 -0400\n@@ -923,6 +923,11 @@\n     | last str == '\\n'  = VStr (init str)\n     | otherwise         = VStr str\n\n+perlReplicate :: VInt -> a -> [a]\n+perlReplicate i a = if i < 0\n+    then genericReplicate 0 a\n+    else genericReplicate i a\n+\n -- |Implementation of 2-arity primitive operators and functions\n op2 :: String -> Val -> Val -> Eval Val\n op2 \"rename\" = guardedIO2 rename\n@@ -931,8 +936,8 @@\n op2 \"*\"  = op2Numeric (*)\n op2 \"/\"  = op2Divide\n op2 \"%\"  = op2Modulus\n-op2 \"x\"  = op2Cast (\\x y -> VStr . concat $ (y :: VInt) `genericReplicate` x)\n-op2 \"xx\" = op2Cast (\\x y -> VList . concat $ (y :: VInt) `genericReplicate` x)\n+op2 \"x\"  = op2Cast (\\x y -> VStr . concat $ (y :: VInt) `perlReplicate` x)\n+op2 \"xx\" = op2Cast (\\x y -> VList . concat $ (y :: VInt) `perlReplicate` x)\n op2 \"+&\" = op2Int (.&.)\n op2 \"+<\" = op2Int shiftL\n op2 \"+>\" = op2Int shiftR\ndiff -ruN pugs.orig/t/operators/repeat.t pugs/t/operators/repeat.t\n--- pugs.orig/t/operators/repeat.t      2007-05-25 16:34:55.000000000 -0400\n+++ pugs/t/operators/repeat.t   2007-05-25 16:13:29.000000000 -0400\n@@ -8,7 +8,7 @@\n\n =cut\n\n-plan 19;\n+plan 23;\n\n #L\n\n@@ -16,6 +16,8 @@\n is('ab' x 4, 'abababab', 'string repeat operator works on multiple character');\n is(1 x 5, '11111', 'number repeat operator works on number and\ncreates string');\n is('' x 6, '', 'repeating an empty string creates an empty string');\n+is('a' x 0, '', 'repeating zero times produces an empty string');\n+is('a' x -1, '', 'repeating negative times produces an empty string');\n\n #L\n my @foo = 'x' xx 10;\n@@ -23,12 +25,20 @@\n is(@foo[9], 'x', 'list repeat operator created correct array');\n is(+@foo, 10, 'list repeat operator created array of the right size');\n\n+\n lives_ok { my @foo2 = undef xx 2; }, 'can repeat undefs';\n my @foo3 = (1, 2) xx 2;\n is(@foo3[0], 1, 'can repeat lists');\n is(@foo3[1], 2, 'can repeat lists');\n is(@foo3[2], 1, 'can repeat lists');\n is(@foo3[3], 2, 'can repeat lists');\n+\n+my @foo4 = 'x' xx 0;\n+is(+@foo4, 0, 'repeating zero times produces an empty list');\n+\n+my @foo5 = 'x' xx -1;\n+is(+@foo5, 0, 'repeating negative times produces an empty list');\n+\n my @foo_2d = [1, 2] xx 2; # should create 2d\n is(@foo_2d[1], [1, 2], 'can create 2d arrays', :todo); # creates\na flat 1d array\n # Wrong/unsure: \\(1, 2) does not create a ref to the array/list (1,2), but\n\n"}