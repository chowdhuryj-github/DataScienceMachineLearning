{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14376 - doc/trunk/design/syn", "body": "Author: larry\nDate: Tue Apr 17 11:22:38 2007\nNew Revision: 14376\n\nModified:\n   doc/trunk/design/syn/S04.pod\n   doc/trunk/design/syn/S05.pod\n\nLog:\nNote that unless no longer allows an else\nClarification of binding semantics of if, elsif, and else\nClarification of C<..>. requested by moritz++\n\n\nModified: doc/trunk/design/syn/S04.pod\n==============================================================================\n--- doc/trunk/design/syn/S04.pod\t(original)\n+++ doc/trunk/design/syn/S04.pod\tTue Apr 17 11:22:38 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 19 Aug 2004\n-  Last Modified: 28 Mar 2007\n+  Last Modified: 17 Apr 2007\n   Number: 4\n-  Version: 56\n+  Version: 57\n \n This document summarizes Apocalypse 4, which covers the block and\n statement syntax of Perl.\n@@ -175,8 +175,8 @@\n \n =head1 Conditional statements\n \n-The C and C statements work almost exactly as they do in\n-Perl\u00a05, except that you may omit the parentheses on the conditional:\n+The C and C statements work much as they do in\n+Perl\u00a05.  However, you may omit the parentheses on the conditional:\n \n     if $foo == 123 {\n         ...\n@@ -192,6 +192,24 @@\n branch, the return value is C in item context and C<()> in\n list context.\n \n+The C statement does not allow an C or C in Perl 6.\n+\n+The value of the conditional expression may be optionally bound to\n+a closure parameter:\n+\n+    if    testa() -> $a { say $a }\n+    elsif testb() -> $b { say $b }\n+    else          -> $b { say $b }\n+\n+Note that the value being evaluated for truth and subsequently bound is\n+not necessarily a value of type Bool.  (All normal types in Perl may\n+be evaluated for truth.  In fact, this construct would be relatively\n+useless if you could bind only boolean values as parameters, since\n+within the closure you already know whether it evaluated to true\n+or false.)  Binding within an C automatically binds the value\n+tested by the previous C or C, which, while known to be\n+false, might nevertheless be an I value of false.\n+\n Conditional statement modifiers work as in Perl\u00a05.  So do the\n implicit conditionals implied by short-circuit operators.  Note though that\n the first expression within parens or brackets is parsed as a statement,\n\nModified: doc/trunk/design/syn/S05.pod\n==============================================================================\n--- doc/trunk/design/syn/S05.pod\t(original)\n+++ doc/trunk/design/syn/S05.pod\tTue Apr 17 11:22:38 2007\n@@ -14,9 +14,9 @@\n    Maintainer: Patrick Michaud  and\n                Larry Wall \n    Date: 24 Jun 2002\n-   Last Modified: 31 Mar 2007\n+   Last Modified: 17 Apr 2007\n    Number: 5\n-   Version: 56\n+   Version: 57\n \n This document summarizes Apocalypse 5, which is about the new regex\n syntax.  We now try to call them I rather than \"regular\n@@ -1137,7 +1137,7 @@\n =item *\n \n A leading C<[> or C<+> indicates an enumerated character class.  Ranges\n-in enumerated character classes are indicated with C<..>.\n+in enumerated character classes are indicated with \"C<..>\" rather than \"C<->\".\n \n      / <[a..z_]>* /\n      / <+[a..z_]>* /\n\n"}