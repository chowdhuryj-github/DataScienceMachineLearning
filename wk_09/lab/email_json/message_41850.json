{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Ryan <cryan2@stny.rr.com>", "subject": "Re: freeze after <STDIN>", "body": "Now I think I understand better, thanks.\n\nThe idea of changing the record separator to something else I borrowed \nfrom another thread on the list archives, which dealt with a similar \nproblem to mine.  I have large text files that contain multi-line, \nmulti-paragraph sections that pertain to a variety of patients.  I \nseparated them with ***.  I thought as my first exercise in perl, I \nwould try to learn how to extract from those files all the sections that \npertain to a particular patient, and print them to the screen.  I \ncouldn't think how to do it by walking through the file line-by-line. \nSo that thread about sections and separators really helped.  With your \nsuggestions, and a small test input file, it looks like it is working.\n\nI thought the * character needed a backslash to be taken literally.  But \nI guess that's only in regular expressions?  I was confused about that.\n\n--Chris\n\nChas Owens wrote:\n> On 6/3/07, Ryan  wrote:\n> snip\n>> open F, \"JunkTestText.txt\";\n>> local $/ = \"\\*\\*\\*\";\n>> my @sections = ;\n>> close F;\n> snip\n>> When executed, it runs up to and including asking me for input from the\n>> terminal.  When I enter a value for $patient (a 7-digit number) and\n>> press enter, nothing happens.  The cursor goes down to the next line and\n>> just waits.\n> snip\n> \n> The Problem is in that section of code.  You did the right thing using\n> local to limit the scope of $/, but failed to do the other necessary\n> thing: add a block around the code to cause it to revert back.  This\n> being Perl there are several solutions.  Here are few in order of my\n> preference.\n> \n> #!/usr/bin/perl\n> \n> use strict;\n> use warnings;\n> \n> print \"use do to make the three steps into one\\n\";\n> my @sections1 = do {\n>        open my $file, '<', 'JunkTestText.txt';\n>        local $/ = '***';\n>        <$file>;\n> };\n> \n> print map { \"[$_]\\n\" } @sections1;\n> \n> print \"use a bare block to limit the scope\\n\";\n> my @sections2;\n> {\n>        open my $file, '<', 'JunkTestText.txt';\n>        local $/ = '***';\n>        @sections2 = <$file>;\n> }\n> \n> print map { \"[$_]\\n\" } @sections2;\n> \n> print \"save to old value of \\$/ and put it back\\n\";\n> my $old_in_sep = $/;\n> $/ = '***';\n> open my $file, '<', 'JunkTestText.txt';\n> my @sections3 = <$file>;\n> #this was not necessary before because\n> #the file handle closes when it goes\n> #out of scope\n> close $file;\n> $/ = $old_in_sep;\n> \n> print map { \"[$_]\\n\" } @sections3;\n> \n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}