{"category": "ham", "to_address": "\"tom@tacocat.net\" <tom@tacocat.net>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: forking problem with dbd::mysql", "body": "On 5/9/07, tom@tacocat.net  wrote:\n> This is an interesting point, but I think a database might be more\n> similar to a network socket than a file handle.\n>\n> I have this same observed behaviour under Oracle and PostgreSQL, so it's\n> not limited to mysql (and shouldn't be fixed with mysql specific flags).\nsnip\n\nThis is just to summarize what this thread was about.\n\nThe problem:\n\n1. a process opens a database connection\n2. does some work\n3. forks a child that opens its own database connection\n4. both run along with no problems\n5. the child process ends\n6. the parent's database connection is closed unexpectedly.\n\nThe reason:\n\nThe child has a copy of the parent's database handle.  When that\nhandle goes out of scope (because the program ended) it automagically*\ncloses.  This causes the databases to free the resources that are\nstill in use by the parent thus closing its handle unexpectedly.\n\nThe solution:\n\nSetting a flag (InactiveDestroy) on the parent's handle inside the\nchild process prevents the automagic closing of the connection.\n\n* the magic in this case is the DESTROY method of DBI::db\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}