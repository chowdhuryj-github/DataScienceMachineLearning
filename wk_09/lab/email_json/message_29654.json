{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Juerd Waalboer <juerd@convolution.nl>", "subject": "Re: Is Perl 6 too late?", "body": "Thomas Wittek skribis 2007-05-14  0:42 (+0200):\n> excessive use of special characters (/\\W/).\n\nThis seems to be \"I don't like regexes\". Ignoring for now that Perl 6\nregexes will be more verbose and thus easier to read for someone without\nmuch prior exposure to them, what would you suggest as an alternative to\nregex matching?\n\nOne of the common alternatives is to iterate over a list of characters,\npossibly using an index. Would you say that a screen page full of such\ncode is easier to read and maintain than a single regex on a single\nline?\n\nMany languages have regexes, even the cleanest among them. And they're\nall as messy as Perl's. They're often more verbose on the outside, which\ncan result in something like foo.match(/foo/) instead of foo =~ /foo/,\nbut the /foo/ part is most important here. If you don't recognise what\nthat is, it doesn't matter if \".match\" or \"=~\" was used.\n\nMany languages have regexes, but Perl was probably the first to apply\nthem heavily in \"normal\" programming. And nowadays, they're so\nubiquitous that it's hard to find a language without Perl-ish or \"Perl\ncompatible\" regexes. Why do you think this is?\n\nI think it's kind of funny that indeed exactly the most cryptic part of\nPerl's syntax is copied to so just about every modern programming\nlanguage, while at the same time Perl is constantly criticized for using\n\"special characters\" so much.\n\nNo, special characters aren't a problem. They are the fundament of a\nvery powerful and expressive syntax. Just don't try to understand a\nscreen full of them all at once -- realise that in another language, the\nfirst three lines would sometimes already fill the same screen, and\nadjust your reading speed.\n\nOn the other hand, the overall structure of a program is often more\nobvious, exactly because so much more fits in one screenful.\n\nIn Perl it is often not needed to refactor something to many tiny\nsubroutines with verbose identifiers, just for legibility.\n\nOne thing stays true, though: Perl is very hard to read for someone who\ndoesn't know Perl well enough. But that's practically true for almost\nlanguage, be it Python or Japanese.\n-- \nkorajn salutojn,\n\n  juerd waalboer:  perl hacker   \n  convolution:     ict solutions and consultancy \n"}