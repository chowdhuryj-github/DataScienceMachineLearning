{"category": "ham", "to_address": "\"OtherRecipients of perl Ticket #42908\": ;", "from_address": "\"Paul Cochrane via RT\" <parrotbug-followup@parrotcode.org>", "subject": "[perl #42908] [PATCH] add guard macro to autogenerated file include/parrot/has_header.h ", "body": "On Tue May 08 18:44:52 2007, infinoid wrote:\n> Just talking to myself here :)\n> \n> On Tue May 08 13:28:41 2007, mark  at glines.org wrote:\n> > Hmm.  It seems there's more than one header being missed by\n> > t/codingstd/c_header_guards.t.  I'm going to try to supplement the\n> > $DIST->c_header_files() list with items culled from\n> > $DIST->generated_files(), or something, if noone can come up with a\n> > better idea.\n> \n> I've done this, and I also fixed a bug preventing the test from\n> detecting two header files using the same guard-macro name.\n> \n> Here's a cumulative patch, please consider applying this instead of \nthe\n> previous diffs I attached to this ticket.\n> \n> The patch:\n> \n> * Fixes the collision check, in c_header_guards.t\n> * Adds some logic to c_header_guards.t to sift through the\n> $DIST->generated_files() list, looking for additional header files not\n> returned by ->c_header_files() (but only checks files which exist in \nthe\n> current tree)\n> * skips the redundancy check for include/parrot/platform.h, because \nthat\n> header contains verbatim copies of other header files (with their own\n> guards)\n> * fixes a guard collision between src/jit/skeleton/jit_emit.h and\n> src/jit/ppc/jit_emit.h\n> * fix generated guards in include/parrot/vtable.h,\n> include/parrot/oplib/ops.h, include/parrot/platform.h,\n> include/parrot/feature.h\n> * add guards to code to generate src/string_private_cstring.h,\n> include/parrot/oplib/core_ops.h, include/parrot/core_pmcs.h,\n> include/parrot/has_header.h, \n> * add a comment to another #endif in the generated\n> include/parrot/vtable.h, which was 52 lines away from its #ifdef\n> * add a \"do not edit this file, its autogenerated\" comment to the top \nof\n> the generated include/parrot/platform.h\n> \n> After this, c_header_guards.t detects conflicting guard-names in a\n> couple of places where header files are copied from one subdirectory \nto\n> another, which I might be able to filter out with a whitelist, or \nmaybe\n> just compare their md5sums.  But otherwise, I'm done for a while, I\n> promise :)\n> \n> Mark\n\nApplied in revisions: 18484--18488; thanks!\n\nI changed the output generated when tests fail slightly and TODO'ed the \nidentical header guard test until we have a decent way to check for \ncopied header files.  Some C languages files are exempted from the \ncoding standards tests and you might want to do a similar thing here \nwith the C headers.  Have a look at is_c_exemption() in lib/Parrot/\nDistribution.pm (and the file in general).\n\nOne nit: the changes to the test should really have been a separate \npatch.  Thanks for your hard work!\n\nPaul\n\n"}