{"category": "ham", "to_address": "\"Allison Randal\" <allison@perl.org>", "from_address": "\"Alek Storm\" <alek.storm@gmail.com>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "On 4/18/07, Allison Randal  wrote:\n> Alek Storm wrote:\n> > .sub get_string :vtable :method :anon # now we're in trouble\n>\n> Just like \":method :anon\", but also stores it as a vtable entry.\n\nBut herein lies the problem.  Saying \":vtable :method :anon\" is just\nlike \":method :anon\" doesn't make sense, because with this solution,\n:method means something *different* when used with :vtable.  \":vtable\"\nadds a hidden vtable entry, \":vtable :method\" adds a visible vtable\nentry, \":method :anon\" adds a hidden method, so what does \":vtable\n:method :anon\" do?  When used with :vtable, :method and :anon have\nexactly opposite meanings, so who wins?  I don't know, and it doesn't\nmatter who does win, because it's not obvious to the user.  That is\nwhy we can't use two opposite systems.\n\n> This works too, but doesn't optimize for the most common case.\n\nThat's a good point.  However, requiring two flags instead of one for\nthe most common case is not worth the costs I've outlined above and in\nmy previous posts.\n\nI ran a test through all code in the parrot repository, and was about\nto publish my results, before I realized that vtable overriding with\n:anon wasn't working.  I'll definitely fix this.\n\n-- \nAlek Storm\n\n"}