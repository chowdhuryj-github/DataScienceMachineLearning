{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14395 - doc/trunk/design/syn", "body": "Author: larry\nDate: Sat May 19 09:45:24 2007\nNew Revision: 14395\n\nModified:\n   doc/trunk/design/syn/S02.pod\n\nLog:\nClarify type semantics of sigil bindability, requested by dduncan++.\n\n\nModified: doc/trunk/design/syn/S02.pod\n==============================================================================\n--- doc/trunk/design/syn/S02.pod\t(original)\n+++ doc/trunk/design/syn/S02.pod\tSat May 19 09:45:24 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 10 Aug 2004\n-  Last Modified: 18 May 2007\n+  Last Modified: 19 May 2007\n   Number: 2\n-  Version: 104\n+  Version: 105\n \n This document summarizes Apocalypse 2, which covers small-scale\n lexical items and typological issues.  (These Synopses also contain\n@@ -1080,6 +1080,20 @@\n \n =item *\n \n+Sigils indicate overall interface, not the exact type of the bound\n+object.  Hence, C<@x> may be bound to an object of the C\n+class, but it may also be bound to any object that does the C\n+role, such as a C, C, C, C, C, C,\n+C, and so on.  Likewise, C<%x> may be bound to a C,\n+C, C, C, C, C, and so on.\n+And C<&x> may be bound to any kind of C or C.\n+The implicit container type is checked at binding time.  If you wish\n+to bind an object that doesn't yet do the appropriate role, you must\n+either stick with the generic C<$> sigil, or mix in the appropriate\n+role before binding to a more specific sigil.\n+\n+=item *\n+\n Unlike in Perl\u00a05, you may no longer put whitespace between a sigil\n and its following name or construct.\n \n\n"}