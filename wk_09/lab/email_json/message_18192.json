{"category": "ham", "to_address": "matt@diephouse.com", "from_address": "\"jerry gay\" <jerry.gay@gmail.com>", "subject": "Re: [perl #42776] [BUG] is isa ok?", "body": "On 4/27/07, Matt Diephouse  wrote:\n> On 4/27/07, via RT Jerry Gay  wrote:\n> > # New Ticket Created by  Jerry Gay\n> > # Please include the string:  [perl #42776]\n> > # in the subject line of all future correspondence about this issue.\n> > # \n> >\n> >\n> > there are two 'isa' ops, defined in src/ops/object.ops\n> >\n> > one takes a string param, and the other a pmc. it seems the string\n> > variant is used frequently throughout the source and tests, but the\n> > pmc variant is much less frequently used, and i haven't come across\n> > any tests, either. it seems these two ops don't agree on return\n> > value... which is problematic.\n> >\n> >   D:\\usr\\local\\parrot\\head>parrot -\n> >   .sub main\n> >       .local pmc class, obj\n> >       class = new 'Class'\n> >       obj = class.'new'()\n> >       $I0 = isa obj, 'Object'\n> >       print $I0\n> >       .local pmc cl\n> >       cl = new 'String'\n> >       cl = 'Object'\n> >       $I1 = isa obj, cl\n> >       print $I1\n> >   .end\n> >   ^Z\n> >   10\n> >\n> > why? iunno. but this is causing me problems when using 'isa_ok' in\n> > 'Test/More.pir', since it uses the pmc variant.\n>\n> It looks like the PMC variant is correct in this case, because Object\n> isn't actually a class. There's a class flag for PMCs that sets\n> whether or not they are a class and Object doesn't have this set.\n>\n> When you call the PMC variant of isa, it calls Parrot_object_isa, and\n> that has this code:\n>\n>     /* if this is not a class */\n>     if (!PObj_is_class_TEST(pmc)) {\n>         pmc = VTABLE_get_class(interp, pmc);\n>     }\n>\n> So since Object isn't a class, it calls the get_class vtable and gets\n> the Class pmc. It then tests the object to see if it's a Class, which\n> it obviously isn't.\n>\n> Contrast this to the String isa variant. It calls the isa vtable\n> function. Object inherits whatever default isa implementation is\n> provided. I'm not sure where that code is (it's a little harder to\n> find), but I'm guessing it just does a string comparison on the PMC\n> names without testing if the PMC is a class.\n>\nthanks for the explanation. i believe src/pmc/default.pmc has the isa\nvtable implementation for Object, by the way.\n\nso, given this differing behavior, these ops must be better\ndocumented. also, isa_ok in Test/More.pir should be modified to use\nthe string variant of isa, which seems more appropriate. expect a\npatch soon.\n~jerry\n\n"}