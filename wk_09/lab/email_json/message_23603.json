{"category": "ham", "to_address": "\"Duncan Murdoch\" <murdoch@stats.uwo.ca>", "from_address": "\"Gabor Grothendieck\" <ggrothendieck@gmail.com>", "subject": "Re: [R] [SPAM] - Re: R package development in windows -\n\tBayesianFilter detected spam", "body": "Surely the idea of having a separate windows version of R is that\nit works in a very Windows-like way and that would preclude\nhaving conflicts with standard utilities on Windows.  To me this\nis one of the most annoying things about R since I do use other\nWindows software and that includes software that conflicts with R.\nIn fact, one of the Linux distros I tried to install on top of Windows\nconflicted with R since its setup.bat file used find and that's Linux!\nAfter spending quite a bit of time being frustrated with the installation\nI finally realized R was the culprit and was really cursing R for having\nwasted so much of my time.  Windows should be setting the standard,\nnot R.\n\nI don't have this sort of conflict problem with any of the other software I use\nexcept R.\n\nOne other point.  The multiple UNIX tools in a single executable\nI mentioned is called busybox:\n\nhttp://busybox.net/\n\nIts intended for embedded systems and specific to UNIX systems although its\nweb page claims its not that hard to get it to work on Windows.  For\nexample, this UNIX-on-a-floppy distro, tomsrtbt, uses it:\n\nhttp://www.toms.net/rb/\n\nI mention busybox because you indicated that you were concerned about the\nsize of the R distro on Windows.\n\nOn 5/5/07, Duncan Murdoch  wrote:\n> On 05/05/2007 8:00 AM, Gabor Grothendieck wrote:\n> > I think that should be the default in order to protect the user.  Protecting\n> > the user from this sort of annoying conflict is important for a professionally\n> > working product that gets along with the rest of the Windows system.\n>\n> I don't, because R building requires simulation of a subset of a Unix\n> environment, so in case of a Unix/Windows conflict, Unix should win.\n> For example none of the Makefiles use backslashes as path separators,\n> they all use Unix-style forward slashes.\n>\n> Duncan Murdoch\n>\n>\n> >\n> > On 5/5/07, Duncan Murdoch  wrote:\n> >> On 04/05/2007 9:32 PM, Gabor Grothendieck wrote:\n> >>> It certainly would be excellent if installing perl could be eliminated.\n> >>>\n> >>> One additional thing that I really dislike about the R installation is that\n> >>> one needs \"find\" on one's path and that conflicts with \"find\" on Windows\n> >>> so other applications unrelated to R that use scripts can suddenly break\n> >>> because of R.  If that could be solved at the same time it would be nice.\n> >> At a minimum we should be able to wrap the calls to find in a macro, so\n> >> you could change the macro in MkRules and rename your copy from Rtools\n> >> to remove the conflict.  I'll take a look.\n> >>\n> >> Duncan Murdoch\n> >>\n> >>> On 5/4/07, Duncan Murdoch  wrote:\n> >>>> On 04/05/2007 4:25 PM, Greg Snow wrote:\n> >>>>> I have used the pp/par combination for Perl before.  It is pretty straight forward to convert an existing perl script into a stand alone windows executable.\n> >>>>>\n> >>>>> Both the Activestate licence and the Perl Artistic licence allow for embedding a script and perl interpreter together and distributing the result.\n> >>>>>\n> >>>>> The current perl script(s) used for the R package build package could easily be converted to a 'stand alone' windows executable and be distributed with Rtools for those who do not want to install Perl themselves.\n> >>>>>\n> >>>>> The only drawback is that even a \"Hello World\" script will result in over a meg sized executable (due to the perl interpreter being included).\n> >>>> I took a quick look at the PAR page on CPAN, and it seems possible to\n> >>>> build a DLL that incorporates the interpreter, and then each individual\n> >>>> script .exe could be much smaller.  I'll see if I can get that to work;\n> >>>> it would be really nice to be able to drop the Perl requirement.  If we\n> >>>> could do that, I'd include the command line tools plus the compiled\n> >>>> scripts with the basic R distribution, so you could easily build simple\n> >>>> packages.  The Rtools.exe installer would then just need to install the\n> >>>> MinGW compilers for packages containing compiled code, and a few extras\n> >>>> needed for building R.\n> >>>>\n> >>>> I don't really know Perl, so I might be asking for advice if I get stuck.\n> >>>>\n> >>>> Duncan Murdoch\n> >>>>> ________________________________\n> >>>>>\n> >>>>> From: r-help-bounces@stat.math.ethz.ch on behalf of Gabor Grothendieck\n> >>>>> Sent: Fri 5/4/2007 11:55 AM\n> >>>>> To: Doran, Harold\n> >>>>> Cc: r-help@stat.math.ethz.ch; Duncan Murdoch\n> >>>>> Subject: Re: [R] [SPAM] - Re: R package development in windows - BayesianFilter detected spam\n> >>>>>\n> >>>>>\n> >>>>>\n> >>>>> Just googling I found this:\n> >>>>>\n> >>>>> http://www.perlmonks.org/?node_id=186402\n> >>>>>\n> >>>>> On 5/4/07, Doran, Harold  wrote:\n> >>>>>>> The best, of course, would be to get rid of Perl altogether.\n> >>>>>> In Python, it is possible to make standalone executables. Is it possible\n> >>>>>> to also do this in Perl, then one could eliminate a perl install. Or, is\n> >>>>>> it possible to use Python to accomplish what perl is currently doing? I\n> >>>>>> may be getting in over my head here since I really don't know what perl\n> >>>>>> is doing under the hood.\n> >>>>>>\n> >>>>>> Harold\n> >>>>>>\n> >>>>> ______________________________________________\n> >>>>> R-help@stat.math.ethz.ch mailing list\n> >>>>> https://stat.ethz.ch/mailman/listinfo/r-help\n> >>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html\n> >>>>> and provide commented, minimal, self-contained, reproducible code.\n> >>>>>\n> >>>>>\n> >>>>>\n> >>\n>\n>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}