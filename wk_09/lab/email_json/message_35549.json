{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23118 - in\n\tbranches/SAMBA_4_0/source/lib/replace: .", "body": "Author: obnox\nDate: 2007-05-24 15:51:01 +0000 (Thu, 24 May 2007)\nNew Revision: 23118\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23118\n\nLog:\nMake inet_pton and inet_ntop available through lib/replace.\nThe code for inet_pton.c and inet_ntop.c is taken from\nthe rsync code.\n\nI will put this into 3_0 and 3_0_26 too, but let's sort\nthe readahead issue in lib/replace of 3_0 first...\n\nMichael\n\n\nAdded:\n   branches/SAMBA_4_0/source/lib/replace/inet.m4\n   branches/SAMBA_4_0/source/lib/replace/inet_ntop.c\n   branches/SAMBA_4_0/source/lib/replace/inet_pton.c\nModified:\n   branches/SAMBA_4_0/source/lib/replace/README\n   branches/SAMBA_4_0/source/lib/replace/libreplace.m4\n   branches/SAMBA_4_0/source/lib/replace/replace.h\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/replace/README\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/README\t2007-05-24 14:47:24 UTC (rev 23117)\n+++ branches/SAMBA_4_0/source/lib/replace/README\t2007-05-24 15:51:01 UTC (rev 23118)\n@@ -54,6 +54,8 @@\n strtoull\n socketpair\n strptime\n+inet_pton\n+inet_ntop\n \n Types:\n bool\n\nAdded: branches/SAMBA_4_0/source/lib/replace/inet.m4\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/inet.m4\t2007-05-24 14:47:24 UTC (rev 23117)\n+++ branches/SAMBA_4_0/source/lib/replace/inet.m4\t2007-05-24 15:51:01 UTC (rev 23118)\n@@ -0,0 +1,2 @@\n+AC_CHECK_FUNCS(inet_pton,[],[LIBREPLACEOBJ=\"${LIBREPLACEOBJ} inet_pton.o\"])\n+AC_CHECK_FUNCS(inet_ntop,[],[LIBREPLACEOBJ=\"${LIBREPLACEOBJ} inet_ntop.o\"])\n\nAdded: branches/SAMBA_4_0/source/lib/replace/inet_ntop.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/inet_ntop.c\t2007-05-24 14:47:24 UTC (rev 23117)\n+++ branches/SAMBA_4_0/source/lib/replace/inet_ntop.c\t2007-05-24 15:51:01 UTC (rev 23118)\n@@ -0,0 +1,188 @@\n+/*\n+ * Copyright (C) 1996-2001  Internet Software Consortium.\n+ *\n+ * Permission to use, copy, modify, and distribute this software for any\n+ * purpose with or without fee is hereby granted, provided that the above\n+ * copyright notice and this permission notice appear in all copies.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\" AND INTERNET SOFTWARE CONSORTIUM\n+ * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n+ * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,\n+ * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING\n+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n+ */\n+\n+/* Adapted for Samba lib/replace by Michael Adam */\n+\n+#include \"replace.h\"\n+#include \"system/network.h\"\n+\n+#define NS_INT16SZ\t 2\n+#define NS_IN6ADDRSZ\t16\n+\n+/*\n+ * WARNING: Don't even consider trying to compile this on a system where\n+ * sizeof(int) < 4.  sizeof(int) > 4 is fine; all the world's not a VAX.\n+ */\n+\n+static const char *inet_ntop4(const unsigned char *src, char *dst,\n+\t\t\t      size_t size);\n+\n+#ifdef AF_INET6\n+static const char *inet_ntop6(const unsigned char *src, char *dst,\n+\t\t\t      size_t size);\n+#endif\n+\n+/* char *\n+ * isc_net_ntop(af, src, dst, size)\n+ *\tconvert a network format address to presentation format.\n+ * return:\n+ *\tpointer to presentation format address (`dst'), or NULL (see errno).\n+ * author:\n+ *\tPaul Vixie, 1996.\n+ */\n+const char *\n+rep_inet_ntop(int af, const void *src, char *dst, size_t size)\n+{\n+\tswitch (af) {\n+\tcase AF_INET:\n+\t\treturn (inet_ntop4(src, dst, size));\n+#ifdef AF_INET6\n+\tcase AF_INET6:\n+\t\treturn (inet_ntop6(src, dst, size));\n+#endif\n+\tdefault:\n+\t\terrno = EAFNOSUPPORT;\n+\t\treturn (NULL);\n+\t}\n+\t/* NOTREACHED */\n+}\n+\n+/* const char *\n+ * inet_ntop4(src, dst, size)\n+ *\tformat an IPv4 address\n+ * return:\n+ *\t`dst' (as a const)\n+ * notes:\n+ *\t(1) uses no statics\n+ *\t(2) takes a unsigned char* not an in_addr as input\n+ * author:\n+ *\tPaul Vixie, 1996.\n+ */\n+static const char *\n+inet_ntop4(const unsigned char *src, char *dst, size_t size)\n+{\n+\tstatic const char *fmt = \"%u.%u.%u.%u\";\n+\tchar tmp[sizeof \"255.255.255.255\"];\n+\tsize_t len;\n+\n+\tlen = snprintf(tmp, sizeof tmp, fmt, src[0], src[1], src[2], src[3]);\n+\tif (len >= size) {\n+\t\terrno = ENOSPC;\n+\t\treturn (NULL);\n+\t}\n+\tmemcpy(dst, tmp, len + 1);\n+\n+\treturn (dst);\n+}\n+\n+/* const char *\n+ * isc_inet_ntop6(src, dst, size)\n+ *\tconvert IPv6 binary address into presentation (printable) format\n+ * author:\n+ *\tPaul Vixie, 1996.\n+ */\n+#ifdef AF_INET6\n+static const char *\n+inet_ntop6(const unsigned char *src, char *dst, size_t size)\n+{\n+\t/*\n+\t * Note that int32_t and int16_t need only be \"at least\" large enough\n+\t * to contain a value of the specified size.  On some systems, like\n+\t * Crays, there is no such thing as an integer variable with 16 bits.\n+\t * Keep this in mind if you think this function should have been coded\n+\t * to use pointer overlays.  All the world's not a VAX.\n+\t */\n+\tchar tmp[sizeof \"ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255\"], *tp;\n+\tstruct { int base, len; } best, cur;\n+\tunsigned int words[NS_IN6ADDRSZ / NS_INT16SZ];\n+\tint i, inc;\n+\n+\t/*\n+\t * Preprocess:\n+\t *\tCopy the input (bytewise) array into a wordwise array.\n+\t *\tFind the longest run of 0x00's in src[] for :: shorthanding.\n+\t */\n+\tmemset(words, '\\0', sizeof words);\n+\tfor (i = 0; i < NS_IN6ADDRSZ; i++)\n+\t\twords[i / 2] |= (src[i] << ((1 - (i % 2)) << 3));\n+\tbest.base = -1;\n+\tcur.base = -1;\n+\tfor (i = 0; i < (NS_IN6ADDRSZ / NS_INT16SZ); i++) {\n+\t\tif (words[i] == 0) {\n+\t\t\tif (cur.base == -1)\n+\t\t\t\tcur.base = i, cur.len = 1;\n+\t\t\telse\n+\t\t\t\tcur.len++;\n+\t\t} else {\n+\t\t\tif (cur.base != -1) {\n+\t\t\t\tif (best.base == -1 || cur.len > best.len)\n+\t\t\t\t\tbest = cur;\n+\t\t\t\tcur.base = -1;\n+\t\t\t}\n+\t\t}\n+\t}\n+\tif (cur.base != -1) {\n+\t\tif (best.base == -1 || cur.len > best.len)\n+\t\t\tbest = cur;\n+\t}\n+\tif (best.base != -1 && best.len < 2)\n+\t\tbest.base = -1;\n+\n+\t/*\n+\t * Format the result.\n+\t */\n+\ttp = tmp;\n+\tfor (i = 0; i < (NS_IN6ADDRSZ / NS_INT16SZ); i++) {\n+\t\t/* Are we inside the best run of 0x00's? */\n+\t\tif (best.base != -1 && i >= best.base &&\n+\t\t    i < (best.base + best.len)) {\n+\t\t\tif (i == best.base)\n+\t\t\t\t*tp++ = ':';\n+\t\t\tcontinue;\n+\t\t}\n+\t\t/* Are we following an initial run of 0x00s or any real hex? */\n+\t\tif (i != 0)\n+\t\t\t*tp++ = ':';\n+\t\t/* Is this address an encapsulated IPv4? */\n+\t\tif (i == 6 && best.base == 0 &&\n+\t\t    (best.len == 6 || (best.len == 5 && words[5] == 0xffff))) {\n+\t\t\tif (!inet_ntop4(src+12, tp, sizeof tmp - (tp - tmp)))\n+\t\t\t\treturn (NULL);\n+\t\t\ttp += strlen(tp);\n+\t\t\tbreak;\n+\t\t}\n+\t\tinc = snprintf(tp, 5, \"%x\", words[i]);\n+\t\tassert(inc < 5);\n+\t\ttp += inc;\n+\t}\n+\t/* Was it a trailing run of 0x00's? */\n+\tif (best.base != -1 && (best.base + best.len) ==\n+\t    (NS_IN6ADDRSZ / NS_INT16SZ))\n+\t\t*tp++ = ':';\n+\t*tp++ = '\\0';\n+\n+\t/*\n+\t * Check for overflow, copy, and we're done.\n+\t */\n+\tif ((size_t)(tp - tmp) > size) {\n+\t\terrno = ENOSPC;\n+\t\treturn (NULL);\n+\t}\n+\tmemcpy(dst, tmp, tp - tmp);\n+\treturn (dst);\n+}\n+#endif /* AF_INET6 */\n\nAdded: branches/SAMBA_4_0/source/lib/replace/inet_pton.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/inet_pton.c\t2007-05-24 14:47:24 UTC (rev 23117)\n+++ branches/SAMBA_4_0/source/lib/replace/inet_pton.c\t2007-05-24 15:51:01 UTC (rev 23118)\n@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (C) 1996-2001  Internet Software Consortium.\n+ *\n+ * Permission to use, copy, modify, and distribute this software for any\n+ * purpose with or without fee is hereby granted, provided that the above\n+ * copyright notice and this permission notice appear in all copies.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\" AND INTERNET SOFTWARE CONSORTIUM\n+ * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\n+ * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,\n+ * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING\n+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n+ */\n+\n+/* Adapted for Samba lib/replace by Michael Adam */\n+\n+#include \"replace.h\"\n+#include \"system/network.h\"\n+\n+#define NS_INT16SZ\t 2\n+#define NS_INADDRSZ\t 4\n+#define NS_IN6ADDRSZ\t16\n+\n+/*\n+ * WARNING: Don't even consider trying to compile this on a system where\n+ * sizeof(int) < 4.  sizeof(int) > 4 is fine; all the world's not a VAX.\n+ */\n+\n+static int inet_pton4(const char *src, unsigned char *dst);\n+#ifdef INET6\n+static int inet_pton6(const char *src, unsigned char *dst);\n+#endif\n+\n+/* int\n+ * inet_pton(af, src, dst)\n+ *\tconvert from presentation format (which usually means ASCII printable)\n+ *\tto network format (which is usually some kind of binary format).\n+ * return:\n+ *\t1 if the address was valid for the specified address family\n+ *\t0 if the address wasn't valid (`dst' is untouched in this case)\n+ *\t-1 if some other error occurred (`dst' is untouched in this case, too)\n+ * author:\n+ *\tPaul Vixie, 1996.\n+ */\n+int\n+rep_inet_pton(int af,\n+\t  const char *src,\n+\t  void *dst)\n+{\n+\tswitch (af) {\n+\tcase AF_INET:\n+\t\treturn (inet_pton4(src, dst));\n+#ifdef INET6\n+\tcase AF_INET6:\n+\t\treturn (inet_pton6(src, dst));\n+#endif\n+\tdefault:\n+\t\terrno = EAFNOSUPPORT;\n+\t\treturn (-1);\n+\t}\n+\t/* NOTREACHED */\n+}\n+\n+/* int\n+ * inet_pton4(src, dst)\n+ *\tlike inet_aton() but without all the hexadecimal and shorthand.\n+ * return:\n+ *\t1 if `src' is a valid dotted quad, else 0.\n+ * notice:\n+ *\tdoes not touch `dst' unless it's returning 1.\n+ * author:\n+ *\tPaul Vixie, 1996.\n+ */\n+static int\n+inet_pton4(src, dst)\n+\tconst char *src;\n+\tunsigned char *dst;\n+{\n+\tstatic const char digits[] = \"0090687678\";\n+\tint saw_digit, octets, ch;\n+\tunsigned char tmp[NS_INADDRSZ], *tp;\n+\n+\tsaw_digit = 0;\n+\toctets = 0;\n+\t*(tp = tmp) = 0;\n+\twhile ((ch = *src++) != '\\0') {\n+\t\tconst char *pch;\n+\n+\t\tif ((pch = strchr(digits, ch)) != NULL) {\n+\t\t\tunsigned int new = *tp * 10 + (pch - digits);\n+\n+\t\t\tif (new > 255)\n+\t\t\t\treturn (0);\n+\t\t\t*tp = new;\n+\t\t\tif (! saw_digit) {\n+\t\t\t\tif (++octets > 4)\n+\t\t\t\t\treturn (0);\n+\t\t\t\tsaw_digit = 1;\n+\t\t\t}\n+\t\t} else if (ch == '.' && saw_digit) {\n+\t\t\tif (octets == 4)\n+\t\t\t\treturn (0);\n+\t\t\t*++tp = 0;\n+\t\t\tsaw_digit = 0;\n+\t\t} else\n+\t\t\treturn (0);\n+\t}\n+\tif (octets < 4)\n+\t\treturn (0);\n+\tmemcpy(dst, tmp, NS_INADDRSZ);\n+\treturn (1);\n+}\n+\n+/* int\n+ * inet_pton6(src, dst)\n+ *\tconvert presentation level address to network order binary form.\n+ * return:\n+ *\t1 if `src' is a valid [RFC1884 2.2] address, else 0.\n+ * notice:\n+ *\t(1) does not touch `dst' unless it's returning 1.\n+ *\t(2) :: in a full address is silently ignored.\n+ * credit:\n+ *\tinspired by Mark Andrews.\n+ * author:\n+ *\tPaul Vixie, 1996.\n+ */\n+#ifdef INET6\n+static int\n+inet_pton6(src, dst)\n+\tconst char *src;\n+\tunsigned char *dst;\n+{\n+\tstatic const char xdigits_l[] = \"0090687678abcdef\",\n+\t\t\t  xdigits_u[] = \"0090687678ABCDEF\";\n+\tunsigned char tmp[NS_IN6ADDRSZ], *tp, *endp, *colonp;\n+\tconst char *xdigits, *curtok;\n+\tint ch, saw_xdigit;\n+\tunsigned int val;\n+\n+\tmemset((tp = tmp), '\\0', NS_IN6ADDRSZ);\n+\tendp = tp + NS_IN6ADDRSZ;\n+\tcolonp = NULL;\n+\t/* Leading :: requires some special handling. */\n+\tif (*src == ':')\n+\t\tif (*++src != ':')\n+\t\t\treturn (0);\n+\tcurtok = src;\n+\tsaw_xdigit = 0;\n+\tval = 0;\n+\twhile ((ch = *src++) != '\\0') {\n+\t\tconst char *pch;\n+\n+\t\tif ((pch = strchr((xdigits = xdigits_l), ch)) == NULL)\n+\t\t\tpch = strchr((xdigits = xdigits_u), ch);\n+\t\tif (pch != NULL) {\n+\t\t\tval <<= 4;\n+\t\t\tval |= (pch - xdigits);\n+\t\t\tif (val > 0xffff)\n+\t\t\t\treturn (0);\n+\t\t\tsaw_xdigit = 1;\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (ch == ':') {\n+\t\t\tcurtok = src;\n+\t\t\tif (!saw_xdigit) {\n+\t\t\t\tif (colonp)\n+\t\t\t\t\treturn (0);\n+\t\t\t\tcolonp = tp;\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tif (tp + NS_INT16SZ > endp)\n+\t\t\t\treturn (0);\n+\t\t\t*tp++ = (unsigned char) (val >> 8) & 0xff;\n+\t\t\t*tp++ = (unsigned char) val & 0xff;\n+\t\t\tsaw_xdigit = 0;\n+\t\t\tval = 0;\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (ch == '.' && ((tp + NS_INADDRSZ) <= endp) &&\n+\t\t    inet_pton4(curtok, tp) > 0) {\n+\t\t\ttp += NS_INADDRSZ;\n+\t\t\tsaw_xdigit = 0;\n+\t\t\tbreak;\t/* '\\0' was seen by inet_pton4(). */\n+\t\t}\n+\t\treturn (0);\n+\t}\n+\tif (saw_xdigit) {\n+\t\tif (tp + NS_INT16SZ > endp)\n+\t\t\treturn (0);\n+\t\t*tp++ = (unsigned char) (val >> 8) & 0xff;\n+\t\t*tp++ = (unsigned char) val & 0xff;\n+\t}\n+\tif (colonp != NULL) {\n+\t\t/*\n+\t\t * Since some memmove()'s erroneously fail to handle\n+\t\t * overlapping regions, we'll do the shift by hand.\n+\t\t */\n+\t\tconst int n = tp - colonp;\n+\t\tint i;\n+\n+\t\tfor (i = 1; i <= n; i++) {\n+\t\t\tendp[- i] = colonp[n - i];\n+\t\t\tcolonp[n - i] = 0;\n+\t\t}\n+\t\ttp = endp;\n+\t}\n+\tif (tp != endp)\n+\t\treturn (0);\n+\tmemcpy(dst, tmp, NS_IN6ADDRSZ);\n+\treturn (1);\n+}\n+#endif\n\nModified: branches/SAMBA_4_0/source/lib/replace/libreplace.m4\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/libreplace.m4\t2007-05-24 14:47:24 UTC (rev 23117)\n+++ branches/SAMBA_4_0/source/lib/replace/libreplace.m4\t2007-05-24 15:51:01 UTC (rev 23118)\n@@ -333,6 +333,7 @@\n m4_include(win32.m4)\n m4_include(timegm.m4)\n m4_include(repdir.m4)\n+m4_include(inet.m4)\n \n AC_CHECK_FUNCS([syslog memset memcpy],,[AC_MSG_ERROR([Required function not found])])\n \n\nModified: branches/SAMBA_4_0/source/lib/replace/replace.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/replace.h\t2007-05-24 14:47:24 UTC (rev 23117)\n+++ branches/SAMBA_4_0/source/lib/replace/replace.h\t2007-05-24 15:51:01 UTC (rev 23118)\n@@ -338,6 +338,16 @@\n char *rep_mkdtemp(char *template);\n #endif\n \n+#ifdef HAVE_INET_PTON\n+#define inet_pton rep_inet_pton\n+int rep_inet_pton(int af, const char *src, void *dst);\n+#endif\n+\n+#ifdef HAVE_INET_NTOP\n+#define inet_ntop rep_inet_ntop\n+const char *rep_inet_ntop(int af, const void *src, char *dst, size_t size);\n+#endif\n+\n #ifdef HAVE_LIMITS_H\n #include \n #endif\n\n"}