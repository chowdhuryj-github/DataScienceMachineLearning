{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r22963 - in branches/SAMBA_4_0/source/lib/events:\n\t.", "body": "Author: tridge\nDate: 2007-05-17 02:38:07 +0000 (Thu, 17 May 2007)\nNew Revision: 22963\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22963\n\nLog:\n\nfixed the epoll/fork interaction in the epoll and aio backends\n\nModified:\n   branches/SAMBA_4_0/source/lib/events/events_aio.c\n   branches/SAMBA_4_0/source/lib/events/events_epoll.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/events/events_aio.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events_aio.c\t2007-05-17 02:22:29 UTC (rev 22962)\n+++ branches/SAMBA_4_0/source/lib/events/events_aio.c\t2007-05-17 02:38:07 UTC (rev 22963)\n@@ -48,6 +48,9 @@\n \t/* a pointer back to the generic event_context */\n \tstruct event_context *ev;\n \n+\t/* list of filedescriptor events */\n+\tstruct fd_event *fd_events;\n+\n \t/* number of registered fd event handlers */\n \tint num_fd_events;\n \n@@ -61,6 +64,7 @@\n \n \tint epoll_fd;\n \tint is_epoll_set;\n+\tpid_t pid;\n };\n \n struct aio_event {\n@@ -92,6 +96,28 @@\n \treturn 0;\n }\n \n+static void epoll_add_event(struct aio_event_context *aio_ev, struct fd_event *fde);\n+\n+/*\n+  reopen the epoll handle when our pid changes\n+  see http://junkcode.samba.org/ftp/unpacked/junkcode/epoll_fork.c for an \n+  demonstration of why this is needed\n+ */\n+static void epoll_reopen(struct aio_event_context *aio_ev)\n+{\n+\tstruct fd_event *fde;\n+\n+\tclose(aio_ev->epoll_fd);\n+\taio_ev->epoll_fd = epoll_create(64);\n+\tif (aio_ev->epoll_fd == -1) {\n+\t\treturn;\n+\t}\n+\taio_ev->pid = getpid();\n+\tfor (fde=aio_ev->fd_events;fde;fde=fde->next) {\n+\t\tepoll_add_event(aio_ev, fde);\n+\t}\n+}\n+\n #define EPOLL_ADDITIONAL_FD_FLAG_HAS_EVENT\t(1<<0)\n #define EPOLL_ADDITIONAL_FD_FLAG_REPORT_ERROR\t(1<<1)\n #define EPOLL_ADDITIONAL_FD_FLAG_GOT_ERROR\t(1<<2)\n@@ -104,6 +130,16 @@\n \tstruct epoll_event event;\n \tif (aio_ev->epoll_fd == -1) return;\n \n+\t/* during an add event we need to check if our pid has changed\n+\t   and re-open the epoll socket. Note that we don't need to do this \n+\t   for other epoll changes */\n+\tif (aio_ev->pid != getpid()) {\n+\t\tepoll_reopen(aio_ev);\n+\t\t/* the current event gets added in epoll_reopen(), so\n+\t\t   we can return here */\n+\t\treturn;\n+\t}\n+\n \tfde->additional_flags &= ~EPOLL_ADDITIONAL_FD_FLAG_REPORT_ERROR;\n \n \t/* if we don't want events yet, don't add an aio_event */\n@@ -127,6 +163,9 @@\n static void epoll_del_event(struct aio_event_context *aio_ev, struct fd_event *fde)\n {\n \tstruct epoll_event event;\n+\n+\tDLIST_REMOVE(aio_ev->fd_events, fde);\n+\n \tif (aio_ev->epoll_fd == -1) return;\n \n \tfde->additional_flags &= ~EPOLL_ADDITIONAL_FD_FLAG_REPORT_ERROR;\n@@ -185,6 +224,7 @@\n \n \t/* there's no aio_event attached to the fde */\n \tif (want_read || (want_write && !got_error)) {\n+\t\tDLIST_ADD(aio_ev->fd_events, fde);\n \t\tepoll_add_event(aio_ev, fde);\n \t\treturn;\n \t}\n@@ -334,6 +374,7 @@\n \t\ttalloc_free(aio_ev);\n \t\treturn -1;\n \t}\n+\taio_ev->pid = getpid();\n \n \ttalloc_set_destructor(aio_ev, aio_ctx_destructor);\n \n@@ -396,6 +437,7 @@\n \taio_ev->num_fd_events++;\n \ttalloc_set_destructor(fde, aio_event_fd_destructor);\n \n+\tDLIST_ADD(aio_ev->fd_events, fde);\n \tepoll_add_event(aio_ev, fde);\n \n \treturn fde;\n\nModified: branches/SAMBA_4_0/source/lib/events/events_epoll.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events_epoll.c\t2007-05-17 02:22:29 UTC (rev 22962)\n+++ branches/SAMBA_4_0/source/lib/events/events_epoll.c\t2007-05-17 02:38:07 UTC (rev 22963)\n@@ -32,6 +32,9 @@\n \t/* a pointer back to the generic event_context */\n \tstruct event_context *ev;\n \n+\t/* list of filedescriptor events */\n+\tstruct fd_event *fd_events;\n+\n \t/* number of registered fd event handlers */\n \tint num_fd_events;\n \n@@ -45,6 +48,8 @@\n \n \t/* when using epoll this is the handle from epoll_create */\n \tint epoll_fd;\n+\n+\tpid_t pid;\n };\n \n /*\n@@ -86,9 +91,32 @@\n static void epoll_init_ctx(struct epoll_event_context *epoll_ev)\n {\n \tepoll_ev->epoll_fd = epoll_create(64);\n+\tepoll_ev->pid = getpid();\n \ttalloc_set_destructor(epoll_ev, epoll_ctx_destructor);\n }\n \n+static void epoll_add_event(struct epoll_event_context *epoll_ev, struct fd_event *fde);\n+\n+/*\n+  reopen the epoll handle when our pid changes\n+  see http://junkcode.samba.org/ftp/unpacked/junkcode/epoll_fork.c for an \n+  demonstration of why this is needed\n+ */\n+static void epoll_reopen(struct epoll_event_context *epoll_ev)\n+{\n+\tstruct fd_event *fde;\n+\n+\tclose(epoll_ev->epoll_fd);\n+\tepoll_ev->epoll_fd = epoll_create(64);\n+\tif (epoll_ev->epoll_fd == -1) {\n+\t\treturn;\n+\t}\n+\tepoll_ev->pid = getpid();\n+\tfor (fde=epoll_ev->fd_events;fde;fde=fde->next) {\n+\t\tepoll_add_event(epoll_ev, fde);\n+\t}\n+}\n+\n #define EPOLL_ADDITIONAL_FD_FLAG_HAS_EVENT\t(1<<0)\n #define EPOLL_ADDITIONAL_FD_FLAG_REPORT_ERROR\t(1<<1)\n #define EPOLL_ADDITIONAL_FD_FLAG_GOT_ERROR\t(1<<2)\n@@ -99,8 +127,19 @@\n static void epoll_add_event(struct epoll_event_context *epoll_ev, struct fd_event *fde)\n {\n \tstruct epoll_event event;\n+\n \tif (epoll_ev->epoll_fd == -1) return;\n \n+\t/* during an add event we need to check if our pid has changed\n+\t   and re-open the epoll socket. Note that we don't need to do this \n+\t   for other epoll changes */\n+\tif (epoll_ev->pid != getpid()) {\n+\t\tepoll_reopen(epoll_ev);\n+\t\t/* the current event gets added in epoll_reopen(), so\n+\t\t   we can return here */\n+\t\treturn;\n+\t}\n+\n \tfde->additional_flags &= ~EPOLL_ADDITIONAL_FD_FLAG_REPORT_ERROR;\n \n \t/* if we don't want events yet, don't add an epoll_event */\n@@ -126,6 +165,9 @@\n static void epoll_del_event(struct epoll_event_context *epoll_ev, struct fd_event *fde)\n {\n \tstruct epoll_event event;\n+\n+\tDLIST_REMOVE(epoll_ev->fd_events, fde);\n+\t\t\n \tif (epoll_ev->epoll_fd == -1) return;\n \n \tfde->additional_flags &= ~EPOLL_ADDITIONAL_FD_FLAG_REPORT_ERROR;\n@@ -193,6 +235,7 @@\n \n \t/* there's no epoll_event attached to the fde */\n \tif (want_read || (want_write && !got_error)) {\n+\t\tDLIST_ADD(epoll_ev->fd_events, fde);\n \t\tepoll_add_event(epoll_ev, fde);\n \t\treturn;\n \t}\n@@ -343,6 +386,7 @@\n \tepoll_ev->num_fd_events++;\n \ttalloc_set_destructor(fde, epoll_event_fd_destructor);\n \n+\tDLIST_ADD(epoll_ev->fd_events, fde);\n \tepoll_add_event(epoll_ev, fde);\n \n \treturn fde;\n\n"}