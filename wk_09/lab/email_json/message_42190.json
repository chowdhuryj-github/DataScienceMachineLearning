{"category": "ham", "to_address": "Bert Freudenberg <bert@freudenbergs.de>", "from_address": "Marco Pesenti Gritti <mpg@redhat.com>", "subject": "Re: [sugar] #1560 NORM Trial-2: Activity launch not detected", "body": "Bert Freudenberg wrote:\n> On Jun 3, 2007, at 18:01 , Zarro Boogs per Child wrote:\n>\n>> #1560: Activity launch not detected\n>> ---------------------+------------------------------------------------------ \n>>\n>>   Reporter:  bert    |       Owner:  dcbw\n>>       Type:  defect  |      Status:  reopened\n>>   Priority:  normal  |   Milestone:  Trial-2\n>>  Component:  sugar   |     Version:\n>> Resolution:          |    Keywords:\n>>   Verified:  0       |\n>> ---------------------+------------------------------------------------------ \n>>\n>> Comment (by marco):\n>>\n>>  This should be fixed again in the latest git. Activity id and bundle id\n>>  should now be provided by two properties of the toplevel X window.\n>>\n>>  _SUGAR_ACTIVITY_ID (utf8 string)\n>>  _SUGAR_BUNDLE_ID (utf8 string)\n>>\n>>  sugar/lib/sugar-x11-util.c has the code which we use to set those\n>>  properties for python activities.\n>\n> This only complicates matters. Not only for Etoys (which does not have \n> a way to set X properties currently), but I see you had to resort to C \n> code even for Python activities. I'd much prefer if the only thing \n> Sugar cares about an activity X-wise is its window ID (and we're \n> working on a way to make that accessible in Squeak). Everything else \n> should be handled by DBus, and this is how it actually was before your \n> refactoring. If anything I'd shift communication *towards\" DBus, not \n> away from it towards X by introducing arbitrary and unnecessary \n> properties.\n\n[ CCing Dan, since he wrote the original startup notification and  I'm \ninterested in his opinion ]\n\nWe decided a while ago to use X  for window management and I don't see a \nreason to revisit that decision. Etoys should respect the multiple \nwindows semantic (which I know you are working on, thanks).\n\nTo reassure you, we are not going to use X as an IPC (as people have \ndone in the past), since that gets unbelievably ugly: that's where dbus \nhas his role in the shell -> activity instance communication.\n\n> Besides, it does not address the original problem - that if an \n> activity X window is opened and detected by the Sugar shell, but it \n> has not created its DBus service yet, the shell will mistake it for a \n> raw X app (creating a\n> \"raw\" icon in the donut next to the still flashing activity icon). \n\nIf there is a _SUGAR_ACTIVITY_ID property the window is an activity, \notherwise it's a raw X window. So I think it actually solves the problem.\n\nThe shell must know the activity and the bundle id as soon as an \nactivity window is displayed, otherwise it can't represent it properly \nin the home. Relying on the dbus service for this was very fragile and \nintroduced races which was hard or impossible to solve properly.\n\nWindow management should work using X communication. Mixing dbus and X \nthere just introduce races and confusion. If we was going down the \"dbus \nfor window management\" route then I'd agree with you, but we aren't.\n\n> This can easily be fixed up later by detecting the DBus service \n> creation and removing the raw icon - this is how my fix worked.\n>\n\nNow, that's really a bad hack. I don't want to show a random icon on the \nscreen and than replace it when the DBUS service appear... it just suck.\n\nThe startup phase is completed when the window appear on the screen, not \nwhen the dbus service appear. That's also exactly how startup \nnotification is implemented in GNOME btw.\n\nMarco\n_______________________________________________\nSugar mailing list\nSugar@lists.laptop.org\nhttp://lists.laptop.org/listinfo/sugar\n\n"}