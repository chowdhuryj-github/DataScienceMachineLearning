{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: x, xx, and negative counts", "body": "On Tue, May 29, 2007 at 02:21:37PM -0400, Mark J. Reed wrote:\n: My expectation before reading the delta was that negative counts\n: would do a reversal:\n: \n: \"123\" x -1 = \"321\"\n: \n: ('a', 'b', 'c') xx -3 = ('c', 'b', 'a', 'c', 'b', 'a', 'c', 'b', 'a');\n: \n: I don't know why I think that makes sense, but it was honestly my\n: first thought.  Does it make sense to anyone else?  Is there a\n: compelling reason I'm missing for having negative values behave as if\n: they were zero rather than adding some other potentially useful\n: functionality?\n\nThe main rationale for going with null return is that the biggest use of\nreplication has generally been something like:\n\n    say $foo, ' ' x (20 - $foo.width), $bar\n\nand it would be counterproductive to degrade to \"negative\" spaces in\nsuch a case.  (This is also the rationale for not returning failure\non negative counts.)\n\nNote, however, that these are just multimethods, so if you defined a\nvariant that accepted a count of type \"Int where *..-1, it would come\nearlier in the candidate list than the normal count of type \"Int\".\nSo you could give it different semantics if you like.\n\nArguably, in Perl 6 people might instead write\n\n    say $foo.fmt(\"%20s\"), $bar\n\nbut just because people can write it that way doesn't mean they will.\n(Plus that approach doesn't work if you want to count tabs.)\n\nAnd generally, I think\n\n    @list xx -1\n\nis less readable than\n\n    @list.reverse\n\nso I don't feel inclined to include it as another Way To Do It.\n\nLarry\n\n"}