{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jerry@samba.org", "subject": "svn commit: samba r23248 - in branches/SAMBA_3_0/source/rpc_server:\n\t.", "body": "Author: jerry\nDate: 2007-05-30 21:43:48 +0000 (Wed, 30 May 2007)\nNew Revision: 23248\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23248\n\nLog:\nMerge echo pipe implementation chanegs from SAMBA_3_0_26\njust to stay in sink.  This was more or less just for me \nto play with.\n\n\nModified:\n   branches/SAMBA_3_0/source/rpc_server/srv_echo_nt.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/rpc_server/srv_echo_nt.c\n===================================================================\n--- branches/SAMBA_3_0/source/rpc_server/srv_echo_nt.c\t2007-05-30 21:41:07 UTC (rev 23247)\n+++ branches/SAMBA_3_0/source/rpc_server/srv_echo_nt.c\t2007-05-30 21:43:48 UTC (rev 23248)\n@@ -1,8 +1,9 @@\n /* \n  *  Unix SMB/CIFS implementation.\n  *  RPC Pipe client / server routines for rpcecho\n- *  Copyright (C) Tim Potter                   2003.\n- *  Copyright (C) Jelmer Vernooij \t\t\t   2006.\n+ *  Copyright (C) Tim Potter                   2003\n+ *  Copyright (C) Jelmer Vernooij              2006\n+ *  Copyright (C) Gerald (Jerry) Carter        2007\n  *  \n  *  This program is free software; you can redistribute it and/or modify\n  *  it under the terms of the GNU General Public License as published by\n@@ -31,9 +32,9 @@\n \n /* Add one to the input and return it */\n \n-void _echo_AddOne(pipes_struct *p, struct echo_AddOne *r)\n+void _echo_AddOne(pipes_struct *p, struct echo_AddOne *r )\n {\n-\tDEBUG(10, (\"_echo_add_one\\n\"));\n+\tDEBUG(10, (\"_echo_AddOne\\n\"));\n \n \t*r->out.out_data = r->in.in_data + 1;\n }\n@@ -42,18 +43,26 @@\n \n void _echo_EchoData(pipes_struct *p, struct echo_EchoData *r)\n {\n-\tDEBUG(10, (\"_echo_data\\n\"));\n+\tDEBUG(10, (\"_echo_EchoData\\n\"));\n \n-\tmemcpy(r->out.out_data, r->in.in_data, r->in.len);\n+\tif ( r->in.len == 0 ) {\t\t\n+\t\tr->out.out_data = NULL;\n+\t\treturn;\n+\t}\n+\n+\tr->out.out_data = TALLOC(p->mem_ctx, r->in.len);\t\n+\tmemcpy( r->out.out_data, r->in.in_data, r->in.len );\n+\treturn;\t\n }\n \n /* Sink an array of data */\n \n void _echo_SinkData(pipes_struct *p, struct echo_SinkData *r)\n {\n-\tDEBUG(10, (\"_sink_data\\n\"));\n+\tDEBUG(10, (\"_echo_SinkData\\n\"));\n \n \t/* My that was some yummy data! */\n+\treturn;\t\n }\n \n /* Source an array of data */\n@@ -62,10 +71,20 @@\n {\n \tuint32 i;\n \n-\tDEBUG(10, (\"_source_data\\n\"));\n+\tDEBUG(10, (\"_echo_SourceData\\n\"));\n \n-\tfor (i = 0; i < r->in.len; i++)\n+\tif ( r->in.len == 0 ) {\n+\t\tr->out.data = NULL;\t\t\n+\t\treturn;\n+\t}\n+\n+\tr->out.data = TALLOC(p->mem_ctx, r->in.len );\n+\n+\tfor (i = 0; i < r->in.len; i++ ) {\t\t\n \t\tr->out.data[i] = i & 0xff;\n+\t}\n+\t\n+\treturn;\t\n }\n \n void _echo_TestCall(pipes_struct *p, struct echo_TestCall *r)\n\n"}