{"category": "ham", "to_address": "\"Patrick R. Michaud via RT\" <parrotbug-followup@parrotcode.org>", "from_address": "Joshua Isom <jrisom@gmail.com>", "subject": "Re: [perl #42792] GC bug added in r18323", "body": "On Apr 29, 2007, at 12:55 PM, Allison Randal via RT wrote:\n\n> Joshua Isom (via RT) wrote:\n>>\n>> My current svn repository uses a patch that I sent to the list about a\n>> week ago, in which the pge tests would run with gc on if the file\n>> DEVELOPING existed.  Since I updated to over 18323,\n>> t/compilers/pge/p5regex/p5rx.t segfaults after test 553.  The\n>> current_cont in the interp's ctx is null, and results in a segfault\n>> inside of set_returns.  It doesn't happen on my darwin-ppc system, so \n>> I\n>> don't know how specific it is, and if rebooting will fix it(as often\n>> happens with the gc bugs in my experience).  But it is failing on my\n>> freebsd-amd64 system.  Since odds are r18323 just exposed a bug \n>> instead\n>> of adding one, maybe other people will get the crash as well.  You \n>> will\n>> have to remove -G in t/compilers/pge/p5regex.t/p5rx.t to get it to\n>> fail, as with -G it succeeds(and with -t too).\n>\n> I can't duplicate the error on darwin-intel or ubuntu-x86. Could be\n> specific to FreeBSD (which might help us pin it down further).\n>\n>> I've learned a lot lately about how to use gdb, and all I've come to\n>> learn is that if\n>> interp->ctx.state->current_cont->obj.u._ptrs._struct_val is null,\n>> parrot isn't happy, of course that's with macro expansion, and that\n>> getting the level of debugging information I'd like to be able to \n>> write\n>> little tools to process an analyze it better isn't easy.\n>\n> Could you send us a stack trace? (gdb command bt) Also, if you haven't\n> already, try a make realclean (we've made some significant fundamental\n> changes recently).\n>\n> Thanks!\n> Allison\n>\n>\n\nI've done realclean a few times actually.  If I run with r18322, it \nruns just fine, but r18323, which dealt with zero length mallocs for \nstrings, caused it to start crashing.  Here's a backtrace.  This is one \nof those tests where with -G it succeeds, so you'll have to make sure \nthat gc is enabled.  I'm not having any trouble on my darwin/ppc \nmachine, but my only two running platforms are darwin/ppc and \nfreebsd/amd64.\n\n\n[freebsd:~/parrot] jisom% gdb parrot parrot.core\nGNU gdb 6.1.1 [FreeBSD]\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and \nyou are\nwelcome to change it and/or distribute copies of it under certain \nconditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for \ndetails.\nThis GDB was configured as \"amd64-marcel-freebsd\"...\nCore was generated by `parrot'.\nProgram terminated with signal 11, Segmentation fault.\nReading symbols from \n/usr/home/jisom/parrot/blib/lib/libparrot.so.0.4.11...done.\nLoaded symbols for /usr/home/jisom/parrot/blib/lib/libparrot.so.0.4.11\nReading symbols from /lib/libpthread.so.2...done.\nLoaded symbols for /lib/libpthread.so.2\nReading symbols from /usr/local/lib/libicuuc.so.36...done.\nLoaded symbols for /usr/local/lib/libicuuc.so.36\nReading symbols from /usr/local/lib/libicudata.so.36...done.\nLoaded symbols for /usr/local/lib/libicudata.so.36\nReading symbols from /lib/libm.so.4...done.\nLoaded symbols for /lib/libm.so.4\nReading symbols from /lib/libcrypt.so.3...done.\nLoaded symbols for /lib/libcrypt.so.3\nReading symbols from /lib/libutil.so.5...done.\nLoaded symbols for /lib/libutil.so.5\nReading symbols from /usr/local/lib/libgmp.so.7...done.\nLoaded symbols for /usr/local/lib/libgmp.so.7\nReading symbols from /lib/libreadline.so.6...done.\nLoaded symbols for /lib/libreadline.so.6\nReading symbols from /usr/lib/libstdc++.so.5...done.\nLoaded symbols for /usr/lib/libstdc++.so.5\nReading symbols from /lib/libc.so.6...done.\nLoaded symbols for /lib/libc.so.6\nReading symbols from /lib/libncurses.so.6...done.\nLoaded symbols for /lib/libncurses.so.6\nReading symbols from /libexec/ld-elf.so.1...done.\nLoaded symbols for /libexec/ld-elf.so.1\n#0  0x0000000800c0589c in pthread_testcancel () from \n/lib/libpthread.so.2\n[New Thread 0x8cbc00 (runnable)]\n[New Thread 0x8cb800 (sleeping)]\n[New Thread 0x8cb400 (LWP 100057)]\n[New Thread 0x512000 (runnable)]\n[New LWP 100086]\n(gdb) bt\n#0  0x0000000800c0589c in pthread_testcancel () from \n/lib/libpthread.so.2\n#1  0x0000000800bf4100 in sigaction () from /lib/libpthread.so.2\n#2  0x0000000800bfe09a in pthread_mutexattr_init () from \n/lib/libpthread.so.2\n#3  0x0000000000000000 in ?? ()\nCannot access memory at address 0x7fffffbff000\n(gdb) quit\n[freebsd:~/parrot] jisom% gdb parrot\nGNU gdb 6.1.1 [FreeBSD]\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and \nyou are\nwelcome to change it and/or distribute copies of it under certain \nconditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for \ndetails.\nThis GDB was configured as \"amd64-marcel-freebsd\"...\n(gdb) run t/compilers/pge/p5regex/p5rx.t\nStarting program: /usr/home/jisom/parrot/parrot \nt/compilers/pge/p5regex/p5rx.t\nwarning: Unable to get location for thread creation breakpoint: generic \nerror\n[New LWP 100086]\n1..960\nok 1 - [re_tests:1] /abc/\n...really long list of tests...\nok 553 - [re_tests:553] /([\\w:]+::)?(\\w+)$/\n[New Thread 0x512000 (LWP 100063)]\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x512000 (LWP 100063)]\n0x00000008007a9312 in Parrot_set_returns_pc (cur_opcode=0x800540640,\n     interp=0x50a400) at core.ops:567\n567         if (PMC_cont(ccont)->address) {\n(gdb) bt\n#0  0x00000008007a9312 in Parrot_set_returns_pc (cur_opcode=0x800540640,\n     interp=0x50a400) at core.ops:567\n#1  0x000000080088502f in runops_slow_core (interp=0x50a400, \npc=0x800540640)\n     at src/runops_cores.c:184\n#2  0x000000080086bea5 in runops_int (interp=0x50a400, offset=0)\n     at src/interpreter.c:775\n#3  0x00000008008727a0 in runops (interp=0x50a400, offs=0)\n     at src/inter_run.c:88\n#4  0x0000000800872a23 in runops_args (interp=0x50a400, sub=0x8c5ea8,\n     obj=0x5c98c0, meth=0x0, sig=0x8009ca02a \"vP\", ap=0x7fffffffe8b0)\n     at src/inter_run.c:202\n#5  0x0000000800872bf9 in Parrot_runops_fromc_args (interp=0x50a400,\n     sub=0x8c5ea8, sig=0x8009ca02a \"vP\") at src/inter_run.c:304\n#6  0x0000000800892c65 in Parrot_runcode (interp=0x50a400, argc=1,\n     argv=0x7fffffffeb50) at src/embed.c:803\n#7  0x000000080099d6ac in imcc_run_pbc (interp=0x50a400, obj_file=0,\n     output_file=0x0, argc=1, argv=0x7fffffffeb50) at \ncompilers/imcc/main.c:563\n#8  0x000000080099dede in imcc_run (interp=0x50a400,\n     sourcefile=0x7fffffffed46 \"t/compilers/pge/p5regex/p5rx.t\", argc=1,\n     argv=0x7fffffffeb50) at compilers/imcc/main.c:759\n#9  0x0000000000400bc6 in main (argc=1, argv=0x7fffffffeb50) at \nsrc/main.c:61\n(gdb)\n\n"}