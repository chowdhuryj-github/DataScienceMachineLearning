{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Smylers <Smylers@stripey.com>", "subject": "Re: = at Start of Line ([svn:perl6-synopsis] r14421 - doc/trunk/design/syn)", "body": "brian d foy writes:\n\n> In article <20070616084404.GF6900@stripey.com>, Smylers\n>  wrote:\n> \n> > brian d foy writes:\n> > \n> > > In article\n> > > <832f158a0706141722o5f68cf09l724d4f4520ee146@mail.gmail.com>, Damian\n> > > Conway  wrote:\n> > > \n> > > > No. It's Pod. *Any* line that begins with '=begin' always starts a Pod\n> > > > block. Always.\n> > > \n> > > As you know, one of the biggest complaints about Perl is that you have\n> > > to have a lot of special rules knowledge to figure some things out.\n> > \n> > Indeed.  What's much nicer is to be able to state that a given rule\n> > \"always\" applies.\n> \n> Well, now explain literal strings :)\n\nFortunately Larry has found a way in which literal strings will still\nwork as you (and your students) expect.\n\n> The rules for Pod5 always applied too, so I don't see what we've\n> gained here as far as the simplicity of rules\n\nWell the new is simpler.\n\n> Putting aside this particular situation, the argument comes down to\n> where does the water balloon pooch out? We haven't lost any\n> complexity, it's just in different places. Maybe some places need less\n> complexity and some places could stand a little more.\n\nI agree with that.\n\nI also think that this particular change is worth the risk of a learner\nputting an assignment at the start of a line, especially given:\n\n* With the exception for literal strings, this now pretty much only\n  applies to assignment.\n\n* Because the C<=> has to be followed immediately by the Pod directive,\n  any C<=>s with space after them or assigning a quoted string will be\n  immune; only those assigning the return values of functions will be\n  affected.\n\nThat's slim.  Even allowing for Sod's Law I would happily lead a\nbeginners' Perl course and chance not mentioning this exception\n\nSmylers\n\n"}