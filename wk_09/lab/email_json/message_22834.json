{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: [svn:parrot-pdd] r18418 - trunk/docs/pdds", "body": "chromatic wrote:\n> On Thursday 03 May 2007 21:53:33 allison@cvs.perl.org wrote:\n>> Log:\n>> [pdd]: Standardizing objects PDD on 'vtable function' rather than 'vtable\n>> method'.\n> \n> I don't understand this.  They're \"vtable methods\" everywhere else.  They all \n> take at least one parameter--the invocant--so they're methods in just about \n> every definition of the term I've seen in all of the object systems I've ever \n> seen.\n\nActually, the repository has a half-and-half split between \"vtable \nmethod\" and \"vtable function\", with \"vtable entry\" as a distant third.\n\nThere seems to be a lot of confusion on the list lately on the \ndifference between vtable thingys and methods. On the \"distinction vs. \nsimilarity\" design trade-off, a little distinction is in order here.\n\nHaving an invocant isn't the only defining characteristic of a method. \nIn this case a more important characteristic is whether the code can be \ncalled as a method on the object. Methods can, vtable thingys can't.\n\nI'm happy to take suggestions on better names for vtable thingys.\n\nAllison\n\n"}