{"category": "ham", "to_address": "Chas Owens <chas.owens@gmail.com>", "from_address": "Mathew <theillien@yahoo.com>", "subject": "Re: YARQ: Yet Another Regex Question", "body": "\n\nChas Owens wrote:\n> On 5/16/07, Mathew Snyder  wrote:\n>> I have a trouble ticket application that uses a regex to find a piece of\n>> information in an incoming email and auto populate a field if it is\n>> found.  The\n>> line it will be looking for is\n>> CUSTOMER ENVIRONMENT customer_name\n>> where customer_name will never have a space making it one word.  If I\n>> just want\n>> to pull from the line the customer_name would my regex look like\n>> $MatchString = \"CUSTOMER ENVIRONMENT\\s+(\\w)\"\n> \n> Bad idea.  Use qr() instead.\n> \n>>\n>> For what it's worth the line that will handle this is\n>> $found = ($Transaction->Attachments->First->Content =~ /$MatchString/m);\n>> I'm guessing that when used in an assignment like this, $1 will be\n>> used as the\n>> value.  The contents of (\\w) in this case.  Is that correct?\n> snip\n> \n> Yes, the $1 match variable will hold the match if $found is true.  A\n> common idiom is therefore\n> \n> my $name;\n> my $regex = qr/CUSTOMER ENVIRONMENT\\s+(\\w)/;\n> if ($Transaction->Attachments->First->Content =~ /$regex) {\n>    $name = $1;\n> } else {\n>    die \"could not find name\";\n> }\n> \n> Another way to write this is\n> \n> my $regex = qr/CUSTOMER ENVIRONMENT\\s+(\\w)/;\n> my ($name) = $Transaction->Attachments->First->Content =~ /$regex/\n>    or die \"could not find name\";\n> \n\nWhat does gr() do?\n\nMathew\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}