{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Pierre Mariani <frenchyp@gmail.com>", "subject": "Re: improving my code: array of references", "body": "Matthew and Rob, thank you for your replies.\n\n\n> - It's unclear whether you have a fixed set of variables to process.\n> Is\n>   the list always the same?\n\nYes, the list is always the same.\n\n> - Why are you using references? Are you sure you need to?\n> \n> - modify_variable() doesn't appear to modify anything, otherwise why\n> are\n>   you assigning its return value to the scalar passed as a parameter?\n> It\n>   seems to be just a function.\n\nModify_variable modifies its input variable.\n\nPlease correct me if I am wrong.\nMy understanding is that:\n1) if I do:\n\tmy @array = ($a, $b, $c);\n\tfor (@array) { $_ = modify_variable($_)}\nI am going to modify $array[0], $array[1] and $array[2], and NOT $a, $b,\n$c.\n\n2) if I do:\n\tfor ($a, $b, $c) {$_ = modify_variable($_)}\nI am going to modify $a, $b, $c, which is good, but if $a, $b, $c are\nbig I am going to be passing around lots of data.\n\nSo I think that using 2) with references on variables would be the ideal\nsolution.\n\n> >From what I can see, you need no more than:\n> \n>   $_ = function($_) foreach ($var1, $var2, $var3);\n> \n> Will this do? Or is there more to the problem than you've explained?\n\nYes, that works in my case. I just thought that there might be a more\n\"elegant\" way of doing it.\n\n> Conway (in Perl Best Practices) prefers the block form of map, since in \n> his opinion, it's more readable.  So you could rewrite it as:\n> \n> my @tmp = ( $var1, $var2, $var3 );\n> @tmp = map { modify_variable } @tmp\n>\n> I'm guessing that the code within modify_variable uses $_ under the \n> hood?  That may end up biting you later on, if you use modify_variable \n> in different places.  If $_ is in use by other code or gets changed on \n> you unexpectedly, you may have some difficult debugging ahead of you.   \n> The following may prove clearer when reading it 6 months from now:\n> \n> map { modify_variable($_) } = \\($var1, $var2, $var3);\n\nI like this syntax too. The only difference in my case is that\nmodify_variable works with the content of the variable, not with a\nreference (and I can't modify it).\nSo I will have to write it this way:\n \n\tmap { modify_variable(${$_}) } = \\($var1, $var2, $var3);\n\nThank you for your advices.\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}