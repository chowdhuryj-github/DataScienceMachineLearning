{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Leopold Toetsch <lt@toetsch.at>", "subject": "Re: mmx/sse copy functions (was: Puzzling structure in <parrot/stacks.h>)", "body": "Am Sonntag, 6. Mai 2007 12:32 schrieb pancake:\n\n[ no TOFU please ]\n\n> I think that the right way to handle paddings for memory alignment\n> is using the pack(1) pragma directive to make everything fit on 1\n> byte and ensure by code that what we do is correct (instead of\n> relaying this task to the compiler).\n\nThis is usually not a good idea, as unaligned pointer or integer/long/double \naccess is usually slower with many CPUs - if it even succeeds.\n\n> We can pack to 4 or so...some compilers (aka gcc) returns some\n> nasty sizes when measuring..(not necessary aligned to 4).\n\nYou didn't get the problem probably. The mmx/sse copy operations need 8-byte \n[1] aligned start and end addresses for copying. If the addresses are not \naligned, you'll get a bus error.\nPlease note that this alignment is only needed for the memory pointer and for \nnothing else in that stucture.\n\nleo\n\n[1] there are 16-byte versions too and also some, which work with unaligned \nmemory\n\n"}