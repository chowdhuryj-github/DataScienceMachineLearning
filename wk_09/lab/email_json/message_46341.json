{"category": "ham", "to_address": "oryann9 <oryann9@yahoo.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: flock question", "body": "On 6/11/07, oryann9  wrote:\nsnip\n> If you use LOCK_NB and are refused a LOCK_SH, then you\n> know that someone else has a LOCK_EX and is updating\n> the file. If you are refused a LOCK_EX, then someone\n> holds either a LOCK_SH or a LOCK_EX, so you shouldn't\n> try to update the file.\nsnip\n\nI am not sure what you are asking, but I assume you don't understand\nwhat the flock flags are for.  The flock function normally waits until\na lock can be achieved.  This could be forever (especially in the case\nof a deadlock*), so it provides a flag LOCK_NB that lets you tell it\nto run in Non-Blocking (NB) mode.  It will return immediately with\neither true (if the requested lock type was made) or false (it\ncouldn't lock the file).  The two types of lock are shared (SH) and\nexclusive (EX).  A given file can have an unlimited number of shared\nlocks at the same time, but if a file has been exclusively locked then\nno other process can lock it (with either a shared or an exclusive\nlock).  Think of shared locks as saying \"I am reading this file don't\nchange it.\"  Many different processes can all read the same file\nwithout causing a problem (so long as no one changes it).  Think of\nexclusive locks as saying \"I am going to change this file.\"  Only one\nprocess at a time can safely change a file.\n\nHope that helps.\n\n\n* A simple deadlock can be achieved like this\n1. process A locks file foo\n2. process B locks file bar\n3. process A tries to lock file bar\n4. process B tries to lock file foo\nBoth processes will wait forever for the other process to let go of\nthe others lock.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}