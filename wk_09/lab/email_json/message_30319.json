{"category": "ham", "to_address": "Perl List <beginners@perl.org>", "from_address": "Xavier Noria <fxn@hashref.com>", "subject": "Re: Assign a delimiter variable", "body": "On May 15, 2007, at 6:42 PM, Mike Blezien wrote:\n\n> Hello,\n>\n> this one has been driving me nuts and I'm sure it's something very  \n> simple I maybe overlooking. I need to assign a delimiter variable  \n> IE: Pipe or Comma delimiter:\n>\n> my $del         = '|'; # use either a '|' or ','\n> my $dataline  = \"0|1|2|3|4|5|6|7|8|9\";\n> my @data     = split(/$del/, $dataline);\n>\n> This does not work, it won't split the file line with the '|'  \n> delimiter, and get no errors. But if I do this:\n>\n> my $dataline  = \"0|1|2|3|4|5|6|7|8|9\";\n> my @data     = split(/\\|/, $dataline);\n>\n> Then it works prefectly, it splits the line as expected. What am I  \n> missing ??\n\nThe actual regexp is what you get _after_ interpolation.\n\nSince the pipe is a metacharacter it is being interpreted as such, as  \nif you directly wrote\n\n   split /|/, ...\n\nTo prevent this there's quotemeta(), which is available in literals  \nas \\E:\n\n   my @data     = split(/\\E$del/, $dataline);\n\n-- fxn\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}