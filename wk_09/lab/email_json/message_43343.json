{"category": "ham", "to_address": "\"Gerald (Jerry) Carter\" <jerry@samba.org>", "from_address": "tridge@samba.org", "subject": "Re: getting rid of mkproto.sh from Samba3", "body": "Jerry,\n\n > I don't want to start any flame wars on style so this is\n > all I will say on the subject, but IMO all of your points \n > imply that autogenerated headers are better because they\n > support bad programming habits.\n\nI see it as preventing programmer mistakes. If we had tools to catch\nthose mistakes, then the situation would be different.\n\nSo to get rid of auto generated headers, I think it would be wise to\nfirst write tools along the same lines as the current findstatic.pl\nand minimal_includes.pl, but which catch the sort of errors that hand\nwritten prototypes tend to lead to.\n\nIt's perfectly possible to write tools like that. For example, you\ncould have a tool that checks that the argument names in all of the\nhand written prototypes match the argument names of the real\nfunctions. It's a bit harder to check that the comment blocks match,\nbut might be doable somehow?\n\nYou could also have a tool that scans the hand written prototypes and\nchecks that all the functions exist in the object files, and have the\nright symbol type (using objdump or nm). \n\nAnother tool could check that every function that has a prototype\nincludes the header that declares the prototype.\n\nAll these tools would be potentially useful even if we are using\nauto-generated prototypes, because we could use them on bits of\nimported code (like heimdal) and on pieces of code that we decide not\nto auto-prototype. So they might be worth writing anyway.\n\nYou may be tempted to think that auto-generated prototypes are not\nneeded as so many other projects get away without them. However if you\ntry minimal_includes.pl and findstatic.pl on those other projects, I\nthink you'll find that they do suffer from these sorts of\nproblems. Stephen Rothwell and myself spent some time running them\nover the Linux kernel. Ben Elliston spent some time running them over\nthe gcc source code, and I think he now runs them very regularly. They\nfound piles of errors in both cases, which have now been fixed. This\nis despite the fact that both projects have people doing constant\njanitorial work looking for exactly this sort of problem.\n\nI'd be surprised to find that any large C program which doesn't use\ntools like these and doesn't auto-generate prototypes shows up clean\nif you check for the sorts of mistakes I have mentioned. Can you think\nof one that is a candiate for really good coding practices that we\ncould check?\n\nIt also relates to real bugs, and can even cause security problems in\nsome circumstances. There is a piece of Samba4 where we don't\ncorrectly generate and check prototypes at the moment - the 'init'\nfunctions for modules. I recently found we were getting a SIGBUS on\nsolaris/ultrasparc when starting smbd. The culprit? One of the init\nfunctions (smb_setup_ejs_net) was returning void instead of\nNTSTATUS. On every other platform this was OK, but on ultrasparc it\ngets a SIGBUS. That bug happened because the code that called the\nfunction didn't include a correct auto-generated prototype. Instead,\nit used a different (incorrect) prototype. See r23011 in Samba4.\n\nCheers, Tridge\n\n"}