{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "metze@samba.org", "subject": "svn commit: samba r22858 - in branches/SAMBA_4_0/source: libcli/raw\n\ttorture/smb2", "body": "Author: metze\nDate: 2007-05-14 17:08:18 +0000 (Mon, 14 May 2007)\nNew Revision: 22858\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22858\n\nLog:\n- let SMB2-LOCK-VALID-REQUEST pass against longhorn beta3\n- add modify the SMB2-LOCK-BLOCK-WRITE test to also test reading\n  and name in SMB2-LOCK-RW-EXCLUSIV\n- add SMB2-LOCK-NONE and SMB2-LOCK-SHARED\n\nmetze\nModified:\n   branches/SAMBA_4_0/source/libcli/raw/interfaces.h\n   branches/SAMBA_4_0/source/torture/smb2/lock.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/libcli/raw/interfaces.h\n===================================================================\n--- branches/SAMBA_4_0/source/libcli/raw/interfaces.h\t2007-05-14 16:04:24 UTC (rev 22857)\n+++ branches/SAMBA_4_0/source/libcli/raw/interfaces.h\t2007-05-14 17:08:18 UTC (rev 22858)\n@@ -1889,11 +1889,12 @@\n \t\t\tuint64_t offset;\n \t\t\tuint64_t count;\n \t\t\tuint32_t unknown5;\n-#define SMB2_LOCK_FLAG_NONE\t0x00000000\n-#define SMB2_LOCK_FLAG_EXCLUSIV\t0x00000002\n-#define SMB2_LOCK_FLAG_UNLOCK\t0x00000004\n-#define SMB2_LOCK_FLAGS_MASK\t0x00000006\n-\t\t\tuint32_t flags; \n+#define SMB2_LOCK_FLAG_NONE\t\t0x00000000\n+#define SMB2_LOCK_FLAG_SHARED\t\t0x00000001\n+#define SMB2_LOCK_FLAG_EXCLUSIV\t\t0x00000002\n+#define SMB2_LOCK_FLAG_UNLOCK\t\t0x00000004\n+#define SMB2_LOCK_FLAG_NO_PENDING\t0x00000010\n+\t\t\tuint32_t flags;\n \t\t} in;\n \t\tstruct {\n \t\t\t/* static body buffer 4 (0x04) bytes */\n\nModified: branches/SAMBA_4_0/source/torture/smb2/lock.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/smb2/lock.c\t2007-05-14 16:04:24 UTC (rev 22857)\n+++ branches/SAMBA_4_0/source/torture/smb2/lock.c\t2007-05-14 17:08:18 UTC (rev 22858)\n@@ -93,7 +93,7 @@\n \tlck.in.offset\t\t= UINT64_MAX;\n \tlck.in.count\t\t= UINT64_MAX;\n \tlck.in.unknown5\t\t= 0x00000000;\n-\tlck.in.flags\t\t= SMB2_LOCK_FLAG_EXCLUSIV;\n+\tlck.in.flags\t\t= SMB2_LOCK_FLAG_EXCLUSIV|SMB2_LOCK_FLAG_NO_PENDING;\n \tstatus = smb2_lock(tree, &lck);\n \tCHECK_STATUS(status, NT_STATUS_OK);\n \tCHECK_VALUE(lck.out.unknown1, 0);\n@@ -118,7 +118,7 @@\n \tlck.in.offset\t\t= UINT32_MAX;\n \tlck.in.count\t\t= UINT32_MAX;\n \tlck.in.unknown5\t\t= 0x87654321;\n-\tlck.in.flags\t\t= SMB2_LOCK_FLAG_EXCLUSIV;\n+\tlck.in.flags\t\t= SMB2_LOCK_FLAG_EXCLUSIV|SMB2_LOCK_FLAG_NO_PENDING;\n \tstatus = smb2_lock(tree, &lck);\n \tCHECK_STATUS(status, NT_STATUS_OK);\n \tCHECK_VALUE(lck.out.unknown1, 0);\n@@ -163,8 +163,7 @@\n \tlck.in.unknown5\t\t= 0x12345678;\n \tlck.in.flags\t\t= SMB2_LOCK_FLAG_UNLOCK;\n \tstatus = smb2_lock(tree, &lck);\n-\tCHECK_STATUS(status, NT_STATUS_OK);\n-\tCHECK_VALUE(lck.out.unknown1, 0);\n+\tCHECK_STATUS(status, NT_STATUS_RANGE_NOT_LOCKED);\n \n \tlck.in.unknown1\t\t= 0x0001;\n \tlck.in.unknown2\t\t= 0x12345678;\n@@ -174,19 +173,9 @@\n \tlck.in.unknown5\t\t= 0x00000000;\n \tlck.in.flags\t\t= SMB2_LOCK_FLAG_UNLOCK;\n \tstatus = smb2_lock(tree, &lck);\n-\tCHECK_STATUS(status, NT_STATUS_OK);\n-\tCHECK_VALUE(lck.out.unknown1, 0);\n+\tCHECK_STATUS(status, NT_STATUS_RANGE_NOT_LOCKED);\n \n \tstatus = smb2_lock(tree, &lck);\n-\tCHECK_STATUS(status, NT_STATUS_OK);\n-\tCHECK_VALUE(lck.out.unknown1, 0);\n-\tstatus = smb2_lock(tree, &lck);\n-\tCHECK_STATUS(status, NT_STATUS_OK);\n-\tCHECK_VALUE(lck.out.unknown1, 0);\n-\tstatus = smb2_lock(tree, &lck);\n-\tCHECK_STATUS(status, NT_STATUS_OK);\n-\tCHECK_VALUE(lck.out.unknown1, 0);\n-\tstatus = smb2_lock(tree, &lck);\n \tCHECK_STATUS(status, NT_STATUS_RANGE_NOT_LOCKED);\n \tstatus = smb2_lock(tree, &lck);\n \tCHECK_STATUS(status, NT_STATUS_RANGE_NOT_LOCKED);\n@@ -197,7 +186,18 @@\n \treturn ret;\n }\n \n-static BOOL test_block_write(struct torture_context *torture, struct smb2_tree *tree)\n+struct test_lock_read_write_state {\n+\tconst char *fname;\n+\tuint32_t lock_flags;\n+\tNTSTATUS write_h1_status;\n+\tNTSTATUS read_h1_status;\n+\tNTSTATUS write_h2_status;\n+\tNTSTATUS read_h2_status;\n+};\n+\n+static BOOL test_lock_read_write(struct torture_context *torture,\n+\t\t\t\t struct smb2_tree *tree,\n+\t\t\t\t struct test_lock_read_write_state *s)\n {\n \tBOOL ret = True;\n \tNTSTATUS status;\n@@ -206,11 +206,11 @@\n \tstruct smb2_lock lck;\n \tstruct smb2_create cr;\n \tstruct smb2_write wr;\n-\tconst char *fname = \"lock2.txt\";\n+\tstruct smb2_read rd;\n \n \tZERO_STRUCT(buf);\n \n-\tstatus = torture_smb2_testfile(tree, fname, &h1);\n+\tstatus = torture_smb2_testfile(tree, s->fname, &h1);\n \tCHECK_STATUS(status, NT_STATUS_OK);\n \n \tstatus = smb2_util_write(tree, h1, buf, 0, ARRAY_SIZE(buf));\n@@ -222,7 +222,7 @@\n \tlck.in.offset\t\t= 0;\n \tlck.in.count\t\t= ARRAY_SIZE(buf)/2;\n \tlck.in.unknown5\t\t= 0x00000000;\n-\tlck.in.flags\t\t= SMB2_LOCK_FLAG_EXCLUSIV;\n+\tlck.in.flags\t\t= s->lock_flags;\n \tstatus = smb2_lock(tree, &lck);\n \tCHECK_STATUS(status, NT_STATUS_OK);\n \tCHECK_VALUE(lck.out.unknown1, 0);\n@@ -233,7 +233,7 @@\n \tlck.in.offset\t\t= ARRAY_SIZE(buf)/2;\n \tlck.in.count\t\t= ARRAY_SIZE(buf)/2;\n \tlck.in.unknown5\t\t= 0x00000000;\n-\tlck.in.flags\t\t= SMB2_LOCK_FLAG_EXCLUSIV;\n+\tlck.in.flags\t\t= s->lock_flags;\n \tstatus = smb2_lock(tree, &lck);\n \tCHECK_STATUS(status, NT_STATUS_OK);\n \tCHECK_VALUE(lck.out.unknown1, 0);\n@@ -248,30 +248,45 @@\n \t\tNTCREATEX_SHARE_ACCESS_READ|\n \t\tNTCREATEX_SHARE_ACCESS_WRITE;\n \tcr.in.create_options = 0;\n-\tcr.in.fname = fname;\n+\tcr.in.fname = s->fname;\n \n \tstatus = smb2_create(tree, tree, &cr);\n \tCHECK_STATUS(status, NT_STATUS_OK);\n \n \th2 = cr.out.file.handle;\n \n-\n \tZERO_STRUCT(wr);\n \twr.in.file.handle = h1;\n \twr.in.offset      = ARRAY_SIZE(buf)/2;\n \twr.in.data        = data_blob_const(buf, ARRAY_SIZE(buf)/2);\n \n \tstatus = smb2_write(tree, &wr);\n-\tCHECK_STATUS(status, NT_STATUS_OK);\n+\tCHECK_STATUS(status, s->write_h1_status);\n \n+\tZERO_STRUCT(rd);\n+\trd.in.file.handle = h1;\n+\trd.in.offset      = ARRAY_SIZE(buf)/2;\n+\trd.in.length      = ARRAY_SIZE(buf)/2;\n+\n+\tstatus = smb2_read(tree, tree, &rd);\n+\tCHECK_STATUS(status, s->read_h1_status);\n+\n \tZERO_STRUCT(wr);\n \twr.in.file.handle = h2;\n \twr.in.offset      = ARRAY_SIZE(buf)/2;\n \twr.in.data        = data_blob_const(buf, ARRAY_SIZE(buf)/2);\n \n \tstatus = smb2_write(tree, &wr);\n-\tCHECK_STATUS(status, NT_STATUS_FILE_LOCK_CONFLICT);\n+\tCHECK_STATUS(status, s->write_h2_status);\n \n+\tZERO_STRUCT(rd);\n+\trd.in.file.handle = h2;\n+\trd.in.offset      = ARRAY_SIZE(buf)/2;\n+\trd.in.length      = ARRAY_SIZE(buf)/2;\n+\n+\tstatus = smb2_read(tree, tree, &rd);\n+\tCHECK_STATUS(status, s->read_h2_status);\n+\n \tlck.in.unknown1\t\t= 0x0001;\n \tlck.in.unknown2\t\t= 0x00000000;\n \tlck.in.file.handle\t= h1;\n@@ -291,10 +306,60 @@\n \tstatus = smb2_write(tree, &wr);\n \tCHECK_STATUS(status, NT_STATUS_OK);\n \n+\tZERO_STRUCT(rd);\n+\trd.in.file.handle = h2;\n+\trd.in.offset      = ARRAY_SIZE(buf)/2;\n+\trd.in.length      = ARRAY_SIZE(buf)/2;\n+\n+\tstatus = smb2_read(tree, tree, &rd);\n+\tCHECK_STATUS(status, NT_STATUS_OK);\n+\n done:\n \treturn ret;\n }\n \n+static BOOL test_lock_rw_none(struct torture_context *torture, struct smb2_tree *tree)\n+{\n+\tstruct test_lock_read_write_state s = {\n+\t\t.fname\t\t\t= \"lock_rw_none.dat\",\n+\t\t.lock_flags\t\t= SMB2_LOCK_FLAG_NONE,\n+\t\t.write_h1_status\t= NT_STATUS_FILE_LOCK_CONFLICT,\n+\t\t.read_h1_status\t\t= NT_STATUS_OK,\n+\t\t.write_h2_status\t= NT_STATUS_FILE_LOCK_CONFLICT,\n+\t\t.read_h2_status\t\t= NT_STATUS_OK,\n+\t};\n+\n+\treturn test_lock_read_write(torture, tree, &s);\n+}\n+\n+static BOOL test_lock_rw_shared(struct torture_context *torture, struct smb2_tree *tree)\n+{\n+\tstruct test_lock_read_write_state s = {\n+\t\t.fname\t\t\t= \"lock_rw_shared.dat\",\n+\t\t.lock_flags\t\t= SMB2_LOCK_FLAG_SHARED,\n+\t\t.write_h1_status\t= NT_STATUS_FILE_LOCK_CONFLICT,\n+\t\t.read_h1_status\t\t= NT_STATUS_OK,\n+\t\t.write_h2_status\t= NT_STATUS_FILE_LOCK_CONFLICT,\n+\t\t.read_h2_status\t\t= NT_STATUS_OK,\n+\t};\n+\n+\treturn test_lock_read_write(torture, tree, &s);\n+}\n+\n+static BOOL test_lock_rw_exclusiv(struct torture_context *torture, struct smb2_tree *tree)\n+{\n+\tstruct test_lock_read_write_state s = {\n+\t\t.fname\t\t\t= \"lock_rw_exclusiv.dat\",\n+\t\t.lock_flags\t\t= SMB2_LOCK_FLAG_EXCLUSIV,\n+\t\t.write_h1_status\t= NT_STATUS_OK,\n+\t\t.read_h1_status\t\t= NT_STATUS_OK,\n+\t\t.write_h2_status\t= NT_STATUS_FILE_LOCK_CONFLICT,\n+\t\t.read_h2_status\t\t= NT_STATUS_FILE_LOCK_CONFLICT,\n+\t};\n+\n+\treturn test_lock_read_write(torture, tree, &s);\n+}\n+\n /* basic testing of SMB2 locking\n */\n struct torture_suite *torture_smb2_lock_init(void)\n@@ -302,7 +367,9 @@\n \tstruct torture_suite *suite = torture_suite_create(talloc_autofree_context(), \"LOCK\");\n \n \ttorture_suite_add_1smb2_test(suite, \"VALID-REQUEST\", test_valid_request);\n-\ttorture_suite_add_1smb2_test(suite, \"BLOCK-WRITE\", test_block_write);\n+\ttorture_suite_add_1smb2_test(suite, \"RW-NONE\", test_lock_rw_none);\n+\ttorture_suite_add_1smb2_test(suite, \"RW-SHARED\", test_lock_rw_shared);\n+\ttorture_suite_add_1smb2_test(suite, \"RW-EXCLUSIV\", test_lock_rw_exclusiv);\n \n \tsuite->description = talloc_strdup(suite, \"SMB2-LOCK tests\");\n \n\n"}