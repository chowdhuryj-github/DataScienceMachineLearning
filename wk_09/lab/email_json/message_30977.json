{"category": "ham", "to_address": "\"Andrew Spieherty\" <spiehera@lafayette.edu>", "from_address": "\"jerry gay\" <jerry.gay@gmail.com>", "subject": "Re: Comments on File of the Week: debug.c", "body": "On 5/16/07, Andrew Spieherty  wrote:\n> On Wed, 16 May 2007, Klaas-Jan Stol wrote:\n>\n> > hi,\n> > I've been studying the code in the fotw: debug.c and below are my comments,\n> > if they're of any interest. Feel free to neglect, I'm kinda picky.\n> >\n> > 1.\n> >    while (*command && (isalnum((int) *command) || *command == ',' ||\n> >        *command == ']'))\n> >\n> > I'm not 100% sure, but:\n> > I've always been taught that this should not be written like this. The issue\n> > here is that you ASSUME that the compiler does expression short-cutting\n> > during evaluating the && expression. Suppose a c compiler does not implement\n> > this,\n>\n> Short-circuiting like this is guaranteed in C, dating all the way back to\n> K&R 1.  If the compiler doesn't implement it, it's badly broken.\n>\nit's bitwise AND where order isn't guaranteed--i'm pretty sure that's\nthe point of confusion.\n~jerry\n\n"}