{"category": "ham", "to_address": "Jonathan Worthington <jonathan@jnthn.net>,\n   \"Patrick R. Michaud\" <pmichaud@pobox.com>", "from_address": "Bob Rogers <rogers-perl6@rgrjr.dyndns.org>", "subject": "Re: pdd15 - How do I add a class method?", "body": "   From: Jonathan Worthington \n   Date: Thu, 21 Jun 2007 00:05:00 +0100\n\n   Hi,\n\n   Patrick R. Michaud wrote:\n   > My first question is \"How do I add a class method?\" -- i.e.,\n   > a method that operates on a class instance as opposed\n   > to an object instance of that class . . .\n\nA method that operates on a class instance would be an instance method\nof the class metaclass, wouldn't it?  But I think you meant \"on a\n*particular* class [metaclass] instance\", am I right?\n\n   . . .\n\n   How about writing the method without the :method modifier, but also \n   addmethod'ing it to the class? Then it will be found by find_method, but \n   won't think the first parameter is an invocant. Something here doesn't \n   feel quite right to me, though I'm tired and can't put my finger on what.\n\n   Jonathan\n\nBut in order to be able to use class attributes, you would want the\ninvocant to be the class metaclass instance, wouldn't you?\n\n   If so, then I think this should be handled by a mechanism for\ndefining a method on a particular object, which is useful for more than\njust metaclasses.  I know of only two ways to define a method particular\nto an instance X (though this may say something about my lack of breadth\nin the language department):\n\n   1.  In Ruby, the class of X is transparently subclassed into a\n\"virtual\" class that becomes the class of X only, and the method is\ndefined (and dispatched) normally on the virtual class.\n\n   2.  In Common Lisp, on can define a method for the object X, and this\nis handled by the dispatch machinery.\n\n   Since the consequences of these strategies are visible to the\nprogrammer (\"foo.class\" in Ruby returns something different after\n\"def foo.meth . . .\", but the class remains unchanged in Lisp), it seems\nlike our hands are tied; both must be implemented in order to support\nboth languages.  But it's not clear to me that either needs to be in the\ncore, nor which one would make the better default.\n\n   Does anyone know of other strategies?  For other languages with\nmetaobjects (and, again, I confess I am not familiar with any), how do\nthey do it?\n\n\t\t\t\t\t-- Bob Rogers\n\t\t\t\t\t   http://rgrjr.dyndns.org/\n\n"}