{"category": "ham", "to_address": "\"Christopher R. Hertel\" <crh@ubiqx.mn.org>", "from_address": "\"ronnie sahlberg\" <ronniesahlberg@gmail.com>", "subject": "Re: first swipe at ctdb spec file", "body": "Forgot.\n\nMaybe the biggest benefit in our pCIFS approach compared to the path\ntaken by pNFS  is that our approach does not need a new pCIFS-aware\nredirector to be installed on the windows clients. We manage by using\nthe standard built in redirector.\n\n\n\nOn 6/4/07, ronnie sahlberg  wrote:\n> There is currently no pCIFS   so I \"took\" the name. :-)\n> It is obvioulsy a play on the pNFS acronym which is incredibly hyped.\n>\n>\n>\n> pCIFS in this context means a load-sharing cluster where multiple\n> nodes export the same data read-write to a cluster.\n>\n>\n> This is similar to pNFS, however pNFS is not really clustered, instead\n> (since it is much easier) pNFS provides scalability by having only one\n> node that exports tha share and processes all the metadata operations,\n> and then to provide \"scalability\" it provides a mapping between file\n> data and storage so that clients can do file i/o directly to storage\n> bypassing the nfs server completely.\n> And thus reducing the workload on the, single, NFS server, providing\n> higher scalability than if the singler NFS server also had to process\n> the data.\n>\n> While it would be possible and likely a superior solution for pNFS to\n> provide real read-write clustering across multiple nas heads in a\n> cluster,   that is more difficult and not the path that the IETF\n> workgroup has taken.\n>\n> One way of looking at the common pNFS is that is is really just a\n> single server  but it provides some additional extensions in order to\n> reduce the amount of data that is passed across the interconnect\n> between the nfs server and the storage backend.\n> NFS servers are often more limited by the bandwidth of the SAN\n> interconnect than CPU or memory in the nas head itself.\n> Thus it is primarily a solution to reduce SAN utilization and\n> saturation that occurs rather than providing a clustered service.\n>\n>\n> It would certainly be possible, academically speaking, to build a\n> pCIFS implementation similar to the pNFS path  with only one single\n> node that runs samba and then letting all clients do i/o based on some\n> mapping protocol that maps between files and extents on a storage\n> device.\n> Howver,   that is really just a \"quick fix\" to get slightly better\n> than single node performance on a nas head.\n>\n>\n> a true read-write cluster like our pCIFS   and a proper pNFS\n> implementation would be vastly superiour to the path currently taken\n> by pNFS workgroup, but also much harder to imlement.\n>\n>\n> Comparasions between our pCIFS and the most common pNFS approach :\n>  * higher scalability. we distribute also metadata operations across\n> the different nodes in the cluster.\n>  * higher availability, we do not have a single point of failure (no\n> single metadata server)\n>  * much higher performance.   There is a cost associated with a file\n> mapping protocol which is non-zero   and history has shown that for\n> these \"pNFS\" implementations (there are several, some of which have\n> been in production use for many many years).\n> In many implementations this \"cost\" of filemapping means that one only\n> gets any real benefit for the case where one only works with doing\n> sequential access to very large files.\n>\n>\n> please try it out.\n> it is pretty cool stuff.\n>\n>\n> On 6/4/07, Christopher R. Hertel  wrote:\n> > tridge@samba.org wrote:\n> > > Chris,\n> > >\n> > >  > Quick question:  is this the pCIFS that Peter Brahm started working\n> on\n> > a few\n> > >  > years back or something different?\n> > >\n> > > I've no idea what Peter worked on.\n> >\n> > Have you had a chance to look at pNFS (which is in the NFSv4.1 spec.)?\n> >\n> > A few years ago, Peter proposed a complimentary pCIFS which would allow\n> > clients direct access to the block storage.  Metadata management would be\n> > handled via CIFS but the clients, once they held an appropriate lock,\n> would\n> > do direct block I/O (via iSCSI, Fibre Channel, or other methods).\n> >\n> > I was speaking with folks from Panasas a couple of weeks ago.  Garth gave\n> a\n> > pNFS presentation and afterwards we started talking about the flexibility\n> of\n> > the Linux implementation of pNFS, and the possibility that the client-side\n> > code could also be used to support pCIFS functionality.  The Panasas folks\n> > sounded interested, but I think they'd want to know more about the\n> > possibility of follow-through from both Samba and the Linux CIFS VFS\n> client.\n> >\n> > So back to my question:  When Ronnie talks about pCIFS which pCIFS is that\n> > and what is it intended to do?  Do we have a collision in the name space\n> or\n> > is someone (not unusually) way ahead of me?\n> >\n> > >  > I'm interested in the API at present.\n> > >\n> > > The API is there, but the client half of it (which is what you would\n> > > use) is not yet cleanly separated from the server. I've started doing\n> > > that, but it will take some time yet.\n> > >\n> > > We'll end up with a libctdb library, which is what applications will\n> > > use. The code in common/ctdb_client.c is the basis for that library.\n> >\n> > I will take a look.\n> >\n> > Thanks.\n> >\n> > Chris -)-----\n> >\n> > --\n> > \"Implementing CIFS - the Common Internet FileSystem\" ISBN: 013047116X\n> > Samba Team -- http://www.samba.org/     -)-----   Christopher R. Hertel\n> > jCIFS Team -- http://jcifs.samba.org/   -)-----   ubiqx development,\n> uninq.\n> > ubiqx Team -- http://www.ubiqx.org/     -)-----   crh@ubiqx.mn.org\n> > OnLineBook -- http://ubiqx.org/cifs/    -)-----   crh@ubiqx.org\n> >\n>\n\n"}