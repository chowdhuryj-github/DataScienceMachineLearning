{"category": "ham", "to_address": "\"Chas Owens\" <chas.owens@gmail.com>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Re: 'x' vs. 'xx'", "body": "Chas Owens wrote:\n> Jonathan Lang wrote:\n> > Chas Owens wrote:\n> > > Jonathan Lang wrote:\n> > > > Is there any reason why we can't simply define '$a x $n' as being\n> > > > shorthand for 'cat($a xx $n)'?  In what way does the former differ\n> > > > from the latter, other than the use of a Whatever in place of $n?\n> > >\n> > > \"$a x $n\" is equivalent to \"join '', $a xx $n\", but that isn't an apt\n> > > description of its behavior.  \"cat($a xx *)\" is an attempt to provide\n> > > an infinite string since 'a' x Inf would result in memory overflow\n> > > (but the cat trick works since lists are evaluated lazily).\n> >\n> > Then it looks to me like 'cat($a xx $n)' is more flexible than \"join\n> > '', $a xx $n\", and would work better as the baseline definition for\n> > '$a x $n'.  Is there any reason to prefer a join-based definition to a\n> > cat-based one?  AFAICT, the only thing that 'join' can do that 'cat'\n> > can't is to provide a delimiter when stitching the component strings\n> > together; in the case of 'x', this feature is (rightfully) not being\n> > used.\n>\n> Okay, maybe my understanding of the cat function is flawed, but I\n> thought it walked through each array handed to it in a serial fashion\n> (as opposed to zip which walks the arrays in a parallel fashion).\n\nHmm... true enough.  That was an aspect of the 'cat' function that I\nhadn't been aware of.  Rather, what came to mind when I saw the 'cat'\nfunction was the following (from S29): \"...a C in item context\nemulates the C interface lazily.\"\n\nIn short, 'cat(\"a\" x 5)' effectively _is_ a scalar string value of\nfive characters - in item context.  And because it emulates the string\ninterface _lazily_, there's no danger from an infinitely long string.\n\nAgain, I was not aware that there _was_ a distinct list context result\nfor 'cat'; and I'm pretty sure that it was referenced as an\nalternative to '$a x *' due to its behavior in scalar context, rather\nthan its behavior in list context.\n\nSo the question is this: is there a problem with \"'a' x 5\" producing\n\"'a', 'a', 'a', 'a', 'a'\" in list context, and 'aaaaa' in item\ncontext?  Or should it produce the latter in anything but void\ncontext?\n\n-- \nJonathan \"Dataweaver\" Lang\n\n"}