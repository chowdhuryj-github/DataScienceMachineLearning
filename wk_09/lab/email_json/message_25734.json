{"category": "ham", "to_address": "Allison Randal <allison@perl.org>", "from_address": "\"Patrick R. Michaud\" <pmichaud@pobox.com>", "subject": "Re: PIR syntax methods ambiguity", "body": "On Tue, May 08, 2007 at 12:15:51PM -0700, Allison Randal wrote:\n> Patrick R. Michaud wrote:\n> >\n> >Personally, I would think that the standard approach for going from\n> >a String PMC to a method invocation would be via the find_method\n> >opcode.  But that's just me.\n> \n> That goes back to the philosophical question of \"Is PIR a language to be \n> generated by compilers, or is it a language for humans to use?\" It's \n> about half-way in between at the moment, and the conflict shows.\n> \n> For generated code, it's no problem to require a methodname lookup for \n> every call. For hand-written code it's insanely annoying (which is the \n> reason the syntactic sugar was introduced in the first place).\n\nWell, since I've only come across a single case where the\nmethod I needed to call was in a String PMC, I've never found\nit annoying.  But again, perhaps that's just me and it really is\na big annoyance to other PIR programmers.  :-)\n\nThere's also the point that find_method isn't sufficient if\nwe need the method call to use :multi semantics.  But I'm also\nunsure about that, because I've yet to run across the need for\nthat one.\n\nPm\n\n"}