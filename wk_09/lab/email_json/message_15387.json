{"category": "ham", "to_address": "Duncan Murdoch <murdoch@stats.uwo.ca>", "from_address": "gyadav@ccilindia.co.in", "subject": "Re: [R] regarding 3d Bar Plot", "body": "\nHi Duncan\n\nI am restating the problem and thanks you for sending me such a good \nfunction histogram in 3d. Thanks for that but i think my problem has been \nmisinterpreted. I just wanted a simple 3d bar Plot. Although I have not \nwritten anything for R but i will surely like to contribute to R and if i \ncan assist someone in writing then it would be a great help to me.\n\nProblem was :-)\n\nI have data in a two dimensional table. each row of the data adds upto 100 \n\n( hence they are percentages ). \nit can be interpreted as like this A - I are the matches and  P - X are \nthe players. Thus Player P scored 20% of the runs during this season in \nMatch C, 60% in Match D and remaining 20% in Match G. \n\nI want to plot 3-d bar plot, where X axis have players, Y axis have \nMatches and Z axis as the percentage(0 - 100%) \nPlease help me in this regards. (Please note on my X and Y axes Numbers \nare not there instead alphabets)\n\n        A       B       C       D       E       F       G       H       I \nP       0       0       20      60      0       0       20      0       0 \nQ       0       16.86747        26.907631       11.646586       0 \n12.449799       0.8032129       0       31.325301 \nR       0       59.649123       10.526316       12.280702       0       0 \n1.754386        0       15.789474 \nS       3.57909807      20.281556       33.404915       7.31329 0.584586 \n5.965163        1.1930327       0       27.678358 \nT       0       0       0       0       0       0       0       0       0 \nU       0       9.090909        27.272727       18.181818       0 \n36.363636       0       0       9.090909 \nV       0       33.333333       33.333333       0       0       33.333333 \n0       0       0 \nW       0       2.188184        1.094092        36.105033       0 \n44.420131       5.2516411       0       10.940919 \nX       0.05994234      51.550409       16.304315       6.997668        0 \n17.383277       0.5994234       0.4741439       6.630821 \n\n\n\nThanks in advance\n-gaurav\n\n\n\n\nDuncan Murdoch  \n25-04-07 04:42 PM\n\nTo\nrolf@math.unb.ca\ncc\ngyadav@ccilindia.co.in, r-help@stat.math.ethz.ch\nSubject\nRe: [R] regarding 3d Bar Plot\n\n\n\n\n\n\nOn 4/24/2007 9:38 AM, rolf@math.unb.ca wrote:\n> gyadav@ccilindia.co.in wrote:\n> \n>> I have data in a two dimensional table. each row of the data adds\n>> upto 100 ( hence they are percentages ).  it can be interpreted as\n>> like this A - I are the matches and  P - X are the players. Thus\n>> Player P scored 20% of the runs during this season in Match C, 60% in\n>> Match D and remaining 20% in Match G.\n>>\n>> I want to plot 3-d bar plot, where X axis have players, Y axis have\n>> Matches and Z axis as the percentage(0 - 100%) Please help me in this\n>> regards.\n> \n>          \n> \n>                Many years ago I picked up from the snews mailing list a\n>                suite of functions for plotting 2D barplots (barplots \nwith 2D\n>                bases) written by a chap named Colin Goodall, from (at \nthat\n>                time) the University of Bristol and/or from Penn State.\n> \n>                I never actually did anything with this suite until\n>                recently.  Seeing no replies to the enquiry about 3D\n>                histograms,  I thought I'd try to get Goodal's code \nrunning\n>                in R to see if it might solve guarav's problem.\n> \n>                The trouble is, all the guts of the procedure, \n*including*\n>                the plotting are done from within Fortran.  The actual\n>                plotting seems to be done through a call to a subroutine\n>                ``segmtz'' which is a piece of Splus software that does \nnot\n>                exist in R.\n> \n>                Is there an equivalent subroutine in R that could be \ncalled?\n>                I dug around a bit but couldn't figure out what was going\n>                on.  The function segments() simply calls\n>                .Internal(segments(....\n> \n>                I looked around a bit for corresponding C or Fortran code \nbut\n>                obviously didn't know how to look properly.\n> \n>                I think that the Fortran code could be translated into \nraw R\n>                and the call to segmtz changed to a call to segments() \n---\n>                but this would seem to be a lot of work.\n> \n>                Can anyone suggest a reasonably simple way of replacing \nthe\n>                call to segmtz in the Fortran?\n\nI don't know how to do what you want, but I'd suggest working in R code \nrather than Fortran.  I did write a hist3d function for the djmrgl \npackage (based on hist), mostly to show off the graphics, but haven't \nfound it useful enough to port to rgl.  Here's a quick port, not good \nenough to use, but maybe it will give you a starting point.\n\nDuncan Murdoch\n\n\n\n\nhist3d <-\n    function (x, y, xbreaks, ybreaks, freq= NULL, probability = !freq, \ninclude.lowest= TRUE,\n              right= TRUE, \n              xlim = range(xbreaks), ylim = range(ybreaks), zlim = NULL,\n              xlab = xname, ylab = yname, zlab,\n              plot = TRUE, top = TRUE, nclass = NULL, ...)\n{\n    if (!is.numeric(x) | !is.numeric(y))\n        stop(\"`x' and `y' must be numeric\")\n    xname <- deparse(substitute(x))\n    yname <- deparse(substitute(y))\n    n <- length(x <- x[!is.na(x)])\n    use.xbr <- !missing(xbreaks)\n    if(use.xbr) {\n        if(!missing(nclass))\n            warning(\"`nclass' not used when `xbreaks' specified\")\n    }\n    else if(!is.null(nclass) && length(nclass) == 1)\n        xbreaks <- nclass\n    use.xbr <- use.xbr && (nB <- length(xbreaks)) > 1\n    if(use.xbr)\n        xbreaks <- sort(xbreaks)\n    else {                              # construct vector of breaks\n        rx <- range(x)\n        nnb <-\n            if(missing(xbreaks)) 1 + log2(n)\n            else {                      # breaks = `nclass'\n                if (is.na(xbreaks) | xbreaks < 2)\n                    stop(\"invalid number of xbreaks\")\n                xbreaks\n            }\n        xbreaks <- pretty (rx, n = nnb, min.n=1, eps.corr = 2)\n                 }\n    nxB <- length(xbreaks)\n    if(nxB <= 1) ##-- Impossible !\n    stop(paste(\"hist3d: error, xbreaks=\",format(xbreaks)))\n \n    storage.mode(x) <- \"double\"\n    storage.mode(xbreaks) <- \"double\"\n        use.ybr <- !missing(ybreaks)\n        if(use.ybr) {\n            if(!missing(nclass))\n                warning(\"`nclass' not used when `ybreaks' specified\")\n        }\n        else if(!is.null(nclass) && length(nclass) == 1)\n            ybreaks <- nclass\n        use.ybr <- use.ybr && (nB <- length(ybreaks)) > 1\n        if(use.ybr)\n            ybreaks <- sort(ybreaks)\n        else {                              # construct vector of breaks\n            ry <- range(y)\n            nnb <-\n                if(missing(ybreaks)) 1 + log2(n)\n                else {                      # breaks = `nclass'\n                    if (is.na(ybreaks) | ybreaks < 2)\n                        stop(\"invalid number of ybreaks\")\n                    ybreaks\n                }\n            ybreaks <- pretty (ry, n = nnb, min.n=1, eps.corr = 2)\n                                 }\n        nyB <- length(ybreaks)\n        if(nyB <= 1) ##-- Impossible !\n        stop(paste(\"hist3d: error, ybreaks=\",format(ybreaks)))\n \n        storage.mode(y) <- \"double\"\n    storage.mode(ybreaks) <- \"double\"\n    counts <- table(cut(x,xbreaks),cut(y,ybreaks))\n    if (sum(counts) < n)\n        stop(\"some data not counted; maybe breaks do not span range of \ndata\")\n    xh <- diff(xbreaks)\n    if (!use.xbr && any(xh <= 0))\n        stop(\"not strictly increasing `xbreaks'.\")\n    yh <- diff(ybreaks)\n    if (!use.ybr && any(yh <= 0))\n        stop(\"not strictly increasing `ybreaks'.\")\n    if (is.null(freq)) {\n        freq <- if(!missing(probability))\n            !as.logical(probability)\n        else if(use.xbr | use.ybr) {\n            ##-- Do frequencies if breaks are evenly spaced\n            (max(xh)-min(xh) < 1e-7 * mean(xh)) &  (max(yh)-min(yh) < 1e-7 \n* mean(yh))\n        } else TRUE\n    } else if(!missing(probability) && any(probability == freq))\n        stop(\"`probability' is an alias for `!freq', however they \ndiffer.\")\n    density <- counts/(n*outer(xh,yh))\n    xmids <- 0.5 * (xbreaks[-1] + xbreaks[-nxB])\n    ymids <- 0.5 * (ybreaks[-1] + ybreaks[-nyB])\n    equidist <- (!use.xbr & !use.ybr) || (diff(range(xh)) < 1e-7 * \nmean(yh)) & (diff(range(yh)) < 1e-7 * mean(yh))\n    r <- structure(list(xbreaks = xbreaks, ybreaks = ybreaks, counts = \ncounts,\n                        intensities = density, \n            density = density, xmids = xmids, ymids = ymids,\n                        xname = xname, yname = yname, equidist = \nequidist),\n                   class=\"histogram3d\")\n    if (plot) {\n        plot(r, freq = freq, \n             xlim = xlim, ylim = ylim, zlim = zlim, xlab = xlab, ylab = \nylab, zlab = zlab,\n                                                  top = top, ...)\n        invisible(r)\n    }\n    else r\n}\n\nplot.histogram3d <-\n    function (x, freq = equidist, col = 'gray', rgb = col,\n              main = paste(\"Histogram of\", x$xname, \"and\", x$yname),\n              xlim = range(x$xbreaks), ylim = range(x$ybreaks), zlim = \nNULL,\n              xlab = x$xname, ylab = x$yname, zlab,\n              axes = TRUE, box = TRUE, add = FALSE, \n                                                   top = TRUE, ...)\n{\n    if (!add) clear3d()\n    save <- par3d(skipRedraw = TRUE, ...)\n    on.exit(par3d(save))\n\n    equidist <- x$equidist\n    if(freq && !equidist)\n        warning(\"the AREAS in the plot are wrong -- rather use \n`freq=FALSE'!\")\n\n    z <- if (freq) x$counts else x$density\n    nxB <- length(x$xbreaks)\n    nyB <- length(x$ybreaks)\n\n    if(is.null(z) || 0 == nxB || 0 == nyB) stop(\"`x' is wrongly \nstructured\")\n\n                 rgb <- matrix(rgb,nxB-1,nyB-1)\n    for (i in 1:(nyB-1)) {\n        keep <- z[,i] > 0\n        quads3d(as.double(t(cbind(x$xbreaks[-nxB], x$xbreaks[-1], \nx$xbreaks[-1], x$xbreaks[-nxB])[keep,])),\n \nas.double(t(cbind(rep(x$ybreaks[i],nxB-1),rep(x$ybreaks[i],nxB-1),rep(x$ybreaks[i+1],nxB-1),rep(x$ybreaks[i+1],nxB-1))[keep,])),\n                as.double(t(cbind(z[,i],z[,i],z[,i],z[,i])[keep,])),\n                col = t(cbind(rgb[,i],rgb[,i],rgb[,i],rgb[,i])[keep,]))\n        quads3d(as.double(t(cbind(x$xbreaks[-nxB], x$xbreaks[-1], \nx$xbreaks[-1], x$xbreaks[-nxB])[keep,])),\n                as.double(rep(rep(x$ybreaks[i],(nxB-1))[keep],4)),\n                as.double(t(cbind(rep(0,nxB-1),    rep(0,nxB-1),  z[,i],   \n z[,i])[keep,])),\n                                                                 col = \nt(cbind(rgb[,i],rgb[,i],rgb[,i],rgb[,i])[keep,]))\n        quads3d(as.double(t(cbind(x$xbreaks[-nxB], x$xbreaks[-1], \nx$xbreaks[-1], x$xbreaks[-nxB])[keep,])),\n                as.double(rep(rep(x$ybreaks[i+1],(nxB-1))[keep],4)),\n                as.double(t(cbind(rep(0,nxB-1),    rep(0,nxB-1),  z[,i],   \n z[,i])[keep,])),\n                                                                 col = \nt(cbind(rgb[,i],rgb[,i],rgb[,i],rgb[,i])[keep,]))\n        quads3d(as.double(t(cbind(x$xbreaks[-nxB], x$xbreaks[-nxB], \nx$xbreaks[-nxB], x$xbreaks[-nxB])[keep,])),\n \nas.double(t(cbind(rep(x$ybreaks[i],nxB-1),rep(x$ybreaks[i+1],nxB-1),rep(x$ybreaks[i+1],nxB-1),rep(x$ybreaks[i],nxB-1))[keep,])),\n                as.double(t(cbind(rep(0,nxB-1),    rep(0,nxB-1),  z[,i],   \n z[,i])[keep,])),\n                col = t(cbind(rgb[,i],rgb[,i],rgb[,i],rgb[,i])[keep,]))\n        quads3d(as.double(t(cbind(x$xbreaks[-1], x$xbreaks[-1], \nx$xbreaks[-1], x$xbreaks[-1])[keep,])),\n \nas.double(t(cbind(rep(x$ybreaks[i],nxB-1),rep(x$ybreaks[i+1],nxB-1),rep(x$ybreaks[i+1],nxB-1),rep(x$ybreaks[i],nxB-1))[keep,])),\n                as.double(t(cbind(rep(0,nxB-1),    rep(0,nxB-1),  z[,i],   \n z[,i])[keep,])),\n                                                                 col = \nt(cbind(rgb[,i],rgb[,i],rgb[,i],rgb[,i])[keep,]))\n    }\n    if(!add) {\n        if(is.null(zlim))\n            zlim <- range(z, 0)\n        if (missing(zlab))\n            zlab <- if (!freq) \"Density\" else \"Frequency\"\n        title3d(main = main, xlab = xlab, ylab = ylab, zlab = zlab)\n        if(axes) {\n           axes3d()\n        }\n        if(box) {\n           box3d()\n        }\n    }\n                 if (top) rgl.bringtotop()\n                 invisible()\n}\n\n\n============================================================================================\nDISCLAIMER AND CONFIDENTIALITY CAUTION:\\ \\ This message and ...{{dropped}}\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}