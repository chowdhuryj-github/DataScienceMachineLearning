{"category": "ham", "to_address": "GMan <grgies@gmail.com>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: Annoying HASH(0x...) in Output", "body": "On 6/4/07, GMan  wrote:\n\n> sub new {\n>     my ($class) = @_;\n>     my ($self) = { };\n>     bless $self, $class;\n>     $self->{'_name'} = \"\";\n>     @friends = { };\n\nWait, what was that? Where did this @friends variable come from? It\nshould probably be a 'my' variable; if you have 'use strict' and 'use\nwarnings' enabled, Perl will tell you if you forget a 'my'.\n\nBut what were you assigning to it? A reference to an empty hash? I\nthink you meant this:\n\n  my @friends = ( );    # an empty list - no friends :-(\n\nAnd that's the same as this:\n\n  my @friends;  # think I can really dance :-)\n\n>     $self->{'_friends'} = \\@friends;\n>     return $self;\n> }\n\nThings go smoothly for a while, and things seem quiet. Too quiet. Then...\n\n> sub addfriend {\n>     my ($self,$f) = @_;\n>     #dereference the array from the hash\n>     $fr = $self->{'_friends'};\n>     @friends = @$fr;\n>     push @friends,$f;\n>     $self->{'friends'} = \\@friends;\n> }\n\nIt looks as if (for lack of 'my') this subroutine is also using the\nsame @friends that we saw earlier, the package variable also known as\n@Person::friends. If that doesn't sell you on 'use strict', nothing\nwill.\n\nBut 'strict' won't tell you when you write 'friends' instead of\n'_friends' for a hash key, and 'warnings' won't say that your code\ncould be written more simply. I think this is it:\n\n        sub addfriend {\n           my ($self, $newfriend) = @_;\n           # dereference the array from the hash\n           my $friendsref = $self->{'_friends'};\n           push @$friendsref, $newfriend;\n        }\n\n> sub print {\n>     my ($self) = @_;\n>     printf(\"Name %s\\n\",$self->{'_name'});\n>     printf(\"Friends URLs\\n\");\n\nUsing printf is a sure sign of an unreformed C programmer. C uses\nprintf because C doesn't have string interpolation. Unless you're\nusing printf for columnar formatting, it has the undocumented side\neffect of making other Perl programmers snicker at you behind your\nback. But although there's no justification for the second one, the\nfirst printf at least avoids the problem of trying to interpolate a\ndereferencing expression, which I'd avoid like this:\n\n    print \"Name \", $self->{'_name'}, \"\\n\";\n\nDo these suggestions get you on the road to success? Good luck with it!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}