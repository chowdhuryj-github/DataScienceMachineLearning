{"category": "ham", "to_address": "beginners@perl.org, perl-beginners@moderators.isc.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: if (<FH>) VS while (<FH>)", "body": "On May 29, 9:29 am, jeevan.ing...@gmail.com (Jeevs) wrote:\n> If () ::: if doesn't not fill the $_ variable with contents of\n> files first line automatically.\n> While () ::: while do fill the $_ to content of the files first\n> line automatically.\n>\n> i.e\n> open FH, \"name.txt\" or die \"cant open\";\n> if  (){\n> print \"$_\";\n>\n> }\n>\n> prints nothing\n> If we change if to while $_ is set to first line of the file... how\n> can this happen\n\nBecause it's a special case, very specifically designed to funtion the\nway you just described.  From `perldoc perlop`:\n\n     I/O Operators\n\n     In scalar context, evaluating a filehandle in angle brackets\n     yields the next line from that file (the newline, if any,\n     included), or \"undef\" at end-of-file or on error.\n\n     Ordinarily you must assign the returned value to a variable,\n     but there is one situation where an automatic assignment\n     happens.  If and only if the input symbol is the only thing\n     inside the conditional of a \"while\" statement (even if\n     disguised as a \"for(;;)\" loop), the value is automatically\n     assigned to the global variable $_, destroying whatever was\n     there previously.  (This may seem like an odd thing to you,\n     but you'll use the construct in almost every Perl script you\n     write.)\n\n\nBasically, Perl chose convenience rather than intuitiveness in this\ncase.  The creators decided that\nwhile (defined ($_ = ) ) { ... }\nwould be written so often that they created a special case to let the\nabove be represented by simply:\nwhile () { ... }\n\nHope this helps,\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}