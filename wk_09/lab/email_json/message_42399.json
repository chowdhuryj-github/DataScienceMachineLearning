{"category": "ham", "to_address": "parrotbug-followup@parrotcode.org, perl6-internals@perl.org", "from_address": "Bernhard Schmalhofer <Bernhard.Schmalhofer@gmx.de>", "subject": "Re: [perl #43105] [PATCH] function mmd.c::mmd_expand_y: newly allocated\n memory unitialized", "body": "Nicholas Clark schrieb:\n> On Sun, Jun 03, 2007 at 08:00:18AM -0700, Bernhard Schmalhofer via RT wrote:\n>\n>   \n>> I have looked at the 'more_memory.patch' and I'm wondering about the\n>> portability.\n>> In that patch loops where pointers are explicitly set to NULL\n>> are replaced with a  \n>>   memset( start, 0, len);\n>>\n>> What happens when NULL is not a consective series of '\\0' chars?\n>>     \n>\n> I think that it breaks.\n>\n>   \n>> Are there such platforms and are they releavant for parrot?\n>>     \n>\n> I believe that this assumption is endemic in Perl 5, and it's never hindered\n> Perl 5's portability. The C FAQ gives examples of platforms where NULL is not\n> all bits zero - http://c-faq.com/null/machexamp.html - and I've never\n> encountered anyone using them.\n>\n> (As an aside, I think that Perl 5 also (mostly?) doesn't assume 2s complement\n> storage of integers. IIRC a bug report from a Ahmdal mainframes gave the\n> impression that it was using sign and magnitude. However, we've not heard\n> about anyone using Ahmdal mainframes in years. Likewise no-one has missed the\n> removal of memory model support from Configure, so presumably no-one is\n> compiling on a PDP-11 anymore. We did discover nasal daemons, or something\n> similarly painful, on Irix64, until we removed assumptions about signed\n> integer overflow. (It's undefined behaviour. It will bite))\n>\n> Nicholas Clark\n>\n>   \n\n"}