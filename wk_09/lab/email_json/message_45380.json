{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "abartlet@samba.org", "subject": "svn commit: lorikeet r738 - in trunk/fedora-ds: .", "body": "Author: abartlet\nDate: 2007-06-09 10:26:24 +0000 (Sat, 09 Jun 2007)\nNew Revision: 738\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=lorikeet&rev=738\n\nLog:\nThis patch no longer required.\n\nAndrew Bartlett\n\nRemoved:\n   trunk/fedora-ds/bitwise.patch\n\n\nChangeset:\nDeleted: trunk/fedora-ds/bitwise.patch\n===================================================================\n--- trunk/fedora-ds/bitwise.patch\t2007-06-09 05:00:50 UTC (rev 737)\n+++ trunk/fedora-ds/bitwise.patch\t2007-06-09 10:26:24 UTC (rev 738)\n@@ -1,240 +0,0 @@\n-Index: Makefile.am\n-===================================================================\n-RCS file: /cvs/dirsec/ldapserver/Makefile.am,v\n-retrieving revision 1.35\n-diff -u -r1.35 Makefile.am\n---- Makefile.am\t22 Mar 2007 15:16:26 -0000\t1.35\n-+++ Makefile.am\t5 Apr 2007 05:43:32 -0000\n-@@ -99,7 +99,7 @@\n- \tlibpassthru-plugin.la libpresence-plugin.la \\\n- \tlibpwdstorage-plugin.la libreferint-plugin.la libreplication-plugin.la \\\n- \tlibretrocl-plugin.la libroles-plugin.la libstatechange-plugin.la libsyntax-plugin.la \\\n--\tlibviews-plugin.la $(LIBPAM_PASSTHRU_PLUGIN) $(LIBDNA_PLUGIN)\n-+\tlibviews-plugin.la libbitwise-plugin.la $(LIBPAM_PASSTHRU_PLUGIN) $(LIBDNA_PLUGIN)\n- \n- nodist_property_DATA = ns-slapd.properties\n- \n-@@ -601,6 +601,16 @@\n- libcollation_plugin_la_LINK = $(CXXLINK)\n- \n- #------------------------\n-+# libbitwise-plugin\n-+#------------------------\n-+libbitwise_plugin_la_SOURCES = ldap/servers/plugins/bitwise/bitwise.c\n-+\n-+libbitwise_plugin_la_CPPFLAGS = @icu_inc@ $(PLUGIN_CPPFLAGS)\n-+libbitwise_plugin_la_LIBADD = $(ICU_LINK) $(LIBCSTD) $(LIBCRUN)\n-+libbitwise_plugin_la_LDFLAGS = -avoid-version\n-+libbitwise_plugin_la_LINK = $(CXXLINK)\n-+\n-+#------------------------\n- # libpam-passthru-plugin\n- #------------------------\n- libpam_passthru_plugin_la_SOURCES = ldap/servers/plugins/pam_passthru/pam_ptconfig.c \\\n---- /dev/null\t2007-03-27 12:12:45.566193334 +1000\n-+++ ldap/servers/plugins/bitwise/bitwise.c\t2007-04-04 12:09:32.000000000 +1000\n-@@ -0,0 +1,204 @@\n-+/** BEGIN COPYRIGHT BLOCK\n-+ * This Program is free software; you can redistribute it and/or modify it under\n-+ * the terms of the GNU General Public License as published by the Free Software\n-+ * Foundation; version 2 of the License.\n-+ * \n-+ * This Program is distributed in the hope that it will be useful, but WITHOUT\n-+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n-+ * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n-+ * \n-+ * You should have received a copy of the GNU General Public License along with\n-+ * this Program; if not, write to the Free Software Foundation, Inc., 59 Temple\n-+ * Place, Suite 330, Boston, MA 02111-1307 USA.\n-+ * \n-+ * In addition, as a special exception, Red Hat, Inc. gives You the additional\n-+ * right to link the code of this Program with code not covered under the GNU\n-+ * General Public License (\"Non-GPL Code\") and to distribute linked combinations\n-+ * including the two, subject to the limitations in this paragraph. Non-GPL Code\n-+ * permitted under this exception must only link to the code of this Program\n-+ * through those well defined interfaces identified in the file named EXCEPTION\n-+ * found in the source code files (the \"Approved Interfaces\"). The files of\n-+ * Non-GPL Code may instantiate templates or use macros or inline functions from\n-+ * the Approved Interfaces without causing the resulting work to be covered by\n-+ * the GNU General Public License. Only Red Hat, Inc. may make changes or\n-+ * additions to the list of Approved Interfaces. You must obey the GNU General\n-+ * Public License in all respects for all of the Program code and other code used\n-+ * in conjunction with the Program except the Non-GPL Code covered by this\n-+ * exception. If you modify this file, you may extend this exception to your\n-+ * version of the file, but you are not obligated to do so. If you do not wish to\n-+ * provide this exception without modification, you must delete this exception\n-+ * statement from your version and license this file solely under the GPL without\n-+ * exception. \n-+ * \n-+ * \n-+ * Copyright (C) 2001 Sun Microsystems, Inc. Used by permission.\n-+ * Copyright (C) 2005 Red Hat, Inc.\n-+ * All rights reserved.\n-+ * END COPYRIGHT BLOCK **/\n-+\n-+#ifdef HAVE_CONFIG_H\n-+#  include \n-+#endif\n-+\n-+/* orfilter.c - implementation of ordering rule filter */\n-+\n-+#include  /* LDAP_UTF8INC */\n-+#include  /* for debug macros */\n-+#include  /* slapi_berval_cmp, SLAPI_BERVAL_EQ */\n-+\n-+#ifdef HPUX11\n-+#include \n-+#endif /* HPUX11 */\n-+\n-+/* the match function needs the attribute type and value from the search\n-+   filter - this is unfortunately not passed into the match fn, so we\n-+   have to keep track of this\n-+*/\n-+struct bitwise_match_cb {\n-+    char *type; /* the attribute type from the filter ava */\n-+    struct berval *val; /* the value from the filter ava */\n-+};\n-+\n-+/*\n-+  The type and val pointers are assumed to have sufficient lifetime -\n-+  we don't have to copy them - they are usually just pointers into\n-+  the SLAPI_PLUGIN_MR_TYPE and SLAPI_PLUGIN_MR_VALUE fields of the\n-+  operation pblock, whose lifetime should encompass the creation\n-+  and destruction of the bitwise_match_cb object.\n-+*/\n-+static struct bitwise_match_cb *\n-+new_bitwise_match_cb(char *type, struct berval *val)\n-+{\n-+    struct bitwise_match_cb *bmc = (struct bitwise_match_cb *)slapi_ch_calloc(1, sizeof(struct bitwise_match_cb));\n-+    bmc->type = type;\n-+    bmc->val = val;\n-+\n-+    return bmc;\n-+}\n-+\n-+static void\n-+delete_bitwise_match_cb(struct bitwise_match_cb *bmc)\n-+{\n-+    slapi_ch_free((void **)&bmc);\n-+}\n-+\n-+static int\n-+bitwise_filter_destroy(Slapi_PBlock* pb)\n-+{\n-+    void *obj = NULL;\n-+    slapi_pblock_get(pb, SLAPI_PLUGIN_OBJECT, &obj);\n-+    if (obj) {\n-+\tstruct bitwise_match_cb *bmc = (struct bitwise_match_cb *)obj;\n-+\tdelete_bitwise_match_cb(bmc);\n-+\tobj = NULL;\n-+\tslapi_pblock_set(pb, SLAPI_PLUGIN_OBJECT, obj);\n-+    }\n-+}\n-+\n-+#define BITWISE_OP_AND  0\n-+#define BITWISE_OP_OR   1\n-+\n-+static int\n-+internal_bitwise_filter_match(void* obj, Slapi_Entry* entry, Slapi_Attr* attr, int op)\n-+/* returns:  0  filter matched\n-+ *\t    -1  filter did not match\n-+ *\t    >0  an LDAP error code\n-+ */\n-+{\n-+    struct bitwise_match_cb *bmc = obj;\n-+    unsigned long long a, b;\n-+    char *val_from_entry = NULL;\n-+    auto int rc = -1; /* no match */\n-+\n-+    val_from_entry = slapi_entry_attr_get_charptr(entry, bmc->type);\n-+    if (val_from_entry) {\n-+\terrno = 0;\n-+\ta = strtoull(val_from_entry, NULL, 10);\n-+\tif (errno != ERANGE) {\n-+\t    errno = 0;\n-+\t    b = strtoull(bmc->val->bv_val, NULL, 10);\n-+\t    if (errno == ERANGE) {\n-+\t\trc = LDAP_CONSTRAINT_VIOLATION;\n-+\t    } else {\n-+\t\tint result;\n-+\t\tif (op == BITWISE_OP_AND) {\n-+\t\t    result = (a & b);\n-+\t\t} else if (op == BITWISE_OP_OR) {\n-+\t\t    result = (a | b);\n-+\t\t}\n-+\t\tif (result) {\n-+\t\t    rc = 0;\n-+\t\t}\n-+\t    }\n-+\t}\n-+\tslapi_ch_free_string(&val_from_entry);\n-+    }\n-+    return rc;\n-+}\n-+\n-+static int\n-+bitwise_filter_match_and (void* obj, Slapi_Entry* entry, Slapi_Attr* attr)\n-+/* returns:  0  filter matched\n-+ *\t    -1  filter did not match\n-+ *\t    >0  an LDAP error code\n-+ */\n-+{\n-+    return internal_bitwise_filter_match(obj, entry, attr, BITWISE_OP_AND);\n-+}\n-+\n-+static int\n-+bitwise_filter_match_or (void* obj, Slapi_Entry* entry, Slapi_Attr* attr)\n-+/* returns:  0  filter matched\n-+ *\t    -1  filter did not match\n-+ *\t    >0  an LDAP error code\n-+ */\n-+{\n-+    return internal_bitwise_filter_match(obj, entry, attr, BITWISE_OP_OR);\n-+}\n-+\n-+static int\n-+bitwise_filter_create (Slapi_PBlock* pb)\n-+{\n-+    auto int rc = LDAP_UNAVAILABLE_CRITICAL_EXTENSION; /* failed to initialize */\n-+    auto char* mrOID = NULL;\n-+    auto char* mrTYPE = NULL;\n-+    auto struct berval* mrVALUE = NULL;\n-+\n-+    if (!slapi_pblock_get (pb, SLAPI_PLUGIN_MR_OID, &mrOID) && mrOID != NULL &&\n-+\t!slapi_pblock_get (pb, SLAPI_PLUGIN_MR_TYPE, &mrTYPE) && mrTYPE != NULL &&\n-+\t!slapi_pblock_get (pb, SLAPI_PLUGIN_MR_VALUE, &mrVALUE) && mrVALUE != NULL) {\n-+\n-+\tstruct bitwise_match_cb *bmc = new_bitwise_match_cb(mrTYPE, mrVALUE);\n-+\tslapi_pblock_set (pb, SLAPI_PLUGIN_OBJECT, bmc);\n-+\tslapi_pblock_set (pb, SLAPI_PLUGIN_DESTROY_FN, (void*)bitwise_filter_destroy);\n-+\tif (strcmp(mrOID, \"1.2.840.113556.1.4.803\") == 0) {\n-+\t    slapi_pblock_set (pb, SLAPI_PLUGIN_MR_FILTER_MATCH_FN, (void*)bitwise_filter_match_and);\n-+\t} else if (strcmp(mrOID, \"1.2.840.113556.1.4.804\") == 0) {\n-+\t    slapi_pblock_set (pb, SLAPI_PLUGIN_MR_FILTER_MATCH_FN, (void*)bitwise_filter_match_or);\n-+\t}\n-+\trc = LDAP_SUCCESS;\n-+    } else {\n-+\tLDAPDebug (LDAP_DEBUG_FILTER, \"=> bitwise_filter_create missing parameter(s)\\n\", 0, 0, 0);\n-+    }\n-+    LDAPDebug (LDAP_DEBUG_FILTER, \"<= bitwise_filter_create %i\\n\", rc, 0, 0);\n-+    return LDAP_SUCCESS;\n-+}\n-+\n-+static Slapi_PluginDesc pdesc = { \"bitwise\", PLUGIN_MAGIC_VENDOR_STR, PRODUCTTEXT,\n-+              \"bitwise match plugin\" };\n-+\n-+int /* LDAP error code */\n-+bitwise_init (Slapi_PBlock* pb)\n-+{\n-+    int rc;\n-+    int argc;\n-+    char** argv;\n-+    char* cfgpath;\n-+\n-+    rc = slapi_pblock_set (pb, SLAPI_PLUGIN_MR_FILTER_CREATE_FN, (void*)bitwise_filter_create);\n-+    if ( rc == 0 ) {\n-+\trc = slapi_pblock_set( pb, SLAPI_PLUGIN_DESCRIPTION, (void *)&pdesc );\n-+    }\n-+    LDAPDebug (LDAP_DEBUG_FILTER, \"bitwise_init %i\\n\", rc, 0, 0);\n-+    return rc;\n-+}\n\n"}