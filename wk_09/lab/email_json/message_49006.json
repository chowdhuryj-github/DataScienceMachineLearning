{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Damian Conway <damian@conway.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Mark Overmeer asked:\n\n>> * Pod and Perl (or any other ambient source code) are to be syntactically\n>>  separated, even when there are semantic interconnections\n> \n> Why?  Who says that?\n\nMe. :-)\n\n\n>> * Perl 6 will be able to access ambient Pod via $=POD (and other\n>>  $=WHATEVER variables)\n> \n> Cannot find anything about that in S26\n\nTry S02.\n\n\n> Yes, and that is one of the things which worries me most *You can*.\n> It's full freedom, like XML, and without a convention everyone may\n> think-up there own way of documenting the same kinds of code elements.\n\nNo. There *will* be conventions, which will be defined by the behaviour of the \nstandard documentation tools that we create.\n\n\n> The whole point of the debate, is that IMO the focus (and only real\n> challenge) is this task: combine information about the Perl program\n> and the documentation about those elements in an as good as feasible\n> way.  All the rest is just syntax.  On the moment, I am not convinced\n> that this task sufficiently facilitated.  Many features in POD6 will\n> complicate this task too much.\n\nNaturally, having spent a great deal of time to redesign Pod specifically to \nfacilitate better and easier documentation, I disagree. :-)\n\n\n> And what I would like to see is that doc-tree and Perl6 AST are one.\n\nAnd I am strongly opposed to that as the only alternative.\nThat said, it will certainly be *possible*.\n\n\n> i.e. it is not a valid argument: expressions and regexes are integrated.\n\nSure, but you're arguing from a false analogy. Expressions and regexes are the \nsame kind of thing: executable specifications. So of course they're \nintegrated. Documentation is a different kind of thing...so naturally it \nshould be dis-integrated.  ;-)\n\n\n> IMO it is: the issue is to have sufficiently integrety in code and markup\n> to be able to create documentation-generating tools which produce enough\n> quality.  And at the same time give the programmer the mimimal burden on\n> writing documentation, to increase the chance that it is present and good.\n> [this last sentence is my only design criterium]\n\nAnd I claim the current design fully facilitates that.\n\n\n>> Like so:\n>>\n>>    class Mail::Message {\n>>    =PURPOSE  Base class for message types\n>>\n>>        has $msgid;\n>>    =for PURPOSE\n>>        The (internet wide) unique string which identifies this\n>>        message object.  May be undef as long as the message is\n>>        begin composed.\n>>\n>>        has $content_type = 'text/plain';\n>>    }\n> \n> This is just a syntax transformation, where I can live with.  No\n> problem.  But it is not the whole story.  \"PURPOSE\" is not in S26.\n\nIt is *now* ;-)\n\nRemember, we're still designing and documenting that design. Hence the careful \nwording of S26:\n\n     All other uppercase block typenames are reserved...\n     ^^^\n     Standard semantic blocks include:\n                              ^^^^^^^\n\nUltimately, the complete set of semantic blocks will be defined by the scope \nand behaviour of the documentation tools we create.\n\n\n> In my \"vision\", the example is complete.  Everything else is determined\n> by the processing tools and style sheets.\n\nAgreed.\n\n\n> Do not understand me wrong: for the choosen approach to produce\n> documentation, you did an excellent job with the specification.  It\n> is well written, well documented, and even implemented.\n> But I do not see how this approach contributes to the homogeneous set\n> of manual-pages for Perl modules that the end-user prefers.\n\nIt does so by providing a standard--and extensible--mark-up notation and a \nwell-structured document object model (which includes representations for \ninterspersed code), as well as standardized parsing tools from converting a \nsource document to an internal representation.\n\nThese features (along with Perl 6's ability to parse Perl 6 source) will make \nit vastly easier to build man-page generators.\n\n\n> [ Damian, we didn't change our opinions a thing since the last debate\n>   on this subject, last year, haven't we.  Probably just another\n>   holy war ]\n\nYes. For that very reason I don't propose to keep arguing this issue.\nI certainly respect your concerns and desires. I'm merely frustrated by the \nfact that I can't seem to convince you that they're actually being addressed. :-)\n\nDamian\n\n"}