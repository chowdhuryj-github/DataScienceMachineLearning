{"category": "ham", "to_address": "Damian Conway <damian@conway.org>", "from_address": "Mark Overmeer <mark@overmeer.net>", "subject": "Re: Referring to source code within Perldoc: the new A<> code", "body": "* Damian Conway (damian@conway.org) [070622 08:38]:\n> And, no, I don't consider the pointers to your excellent module to be \n> suitable specific examples of what we're not giving you...mainly because I \n> believe that the Pod 6 documentation language I've designed (in conjunction \n> with the ability for Perl 6 to parse Perl 6) *does* give you what you need \n> to build such tools.\n\nWell, we tried to avoid the stale-mate discussion, but it's back again.\n\nIMO, POD6 should not provide the possibility to build such tools: it\nshould *be* the tool. With a nice (compact) standard definition how\nto document each of the designed features in Perl6, and in attachment\nC some details which explain how Ben Smylers can live in anarchy ;-)\n\n> So it seems we're still at an impasse.\n\nNah, at least a lot more people are thinking about the subject now.\n\n> I fully respect your decision not to \n> attempt a full alternative design (if anything, your estimate of it only \n> taking \"weeks\" is optimistic ;-), but unless someone is willing to step up \n> and suggest some specific improvements to the current proposal, how can we \n> move forward towards the best possible result?\n\nIf you read it well, I say: \"it's a waste of time if the idea of\northogonalism (full code and doc separation) cannot be discussed\".\nBecause my plans are exactly the opposite: optimally merging doc\nand code.  So, it is only a \"no\" when @Larry says \"no\".\n-- \n               MarkOv\n\n------------------------------------------------------------------------\n       Mark Overmeer MSc                                MARKOV Solutions\n       Mark@Overmeer.net                          solutions@overmeer.net\nhttp://Mark.Overmeer.net                   http://solutions.overmeer.net\n\n"}