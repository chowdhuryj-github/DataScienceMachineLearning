{"category": "ham", "to_address": "Leopold Toetsch <lt@toetsch.at>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: modifying classes after they're instantiated", "body": "Leopold Toetsch wrote:\n> Am Mittwoch, 11. April 2007 00:25 schrieb Allison Randal:\n>> 3) Modify the core PMC implementation so it tracks information about\n>> which the different containers (registers, temporary variables,\n>> namespace entries, etc.) that hold a particular PMC, and which\n>> particular container was used to make the method call, so a method call\n>> can modify the variable it was called on. Disadvantage: This isn't a\n>> generally useful feature. (Not my favorite alternative.)\n> \n> I'm just answering 3):\n> Another \"container\" might be (external) C code (incl. the C stack). You can't \n> track that in above terms. This all boils down to the same implications \n> imposed by the conservative GC. You can never be sure, it's a variable (e.g. \n> integer looking like a mem addr) or just a real memory location you were \n> tracking, which means: modifying adjacent (maybe inside the very PMC or not) \n> memory regions could be disastrous.\n\nMmmmm... did I neglect to mention other Disadvantage?: It's a horrible \nsolution. Possible (with additional layers of indirection, containers \nwithin containers, etc), but horrible.\n\nAllison\n\n"}