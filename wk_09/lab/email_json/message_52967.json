{"category": "ham", "to_address": "perl6-compiler@perl.org", "from_address": "\"Patrick R. Michaud\" <pmichaud@pobox.com>", "subject": "Str autoincrement", "body": "S03 says:\n\n   Increment of a Str (in a suitable container) works similarly \n   to Perl 5 except that the final alphanumeric sequence in the \n   string is incremented regardless of what comes before it.\n\nWhat does \"final alphanumeric sequence\" really mean here?\nPerl 5 does magic autoincrementing of non-empty strings that match\nthe (perl5) pattern  /^[A-Za-z]*[0-9]*\\z/ .  Does it continue to\nhave a Perl 5'ish interpretation -- i.e., alphas followed by\ndigits (non-empty match of /[A-Za-z]*[0-9]\\z/), or is it really \nany alphanumeric sequence ( /[A-Za-z0-9]+\\z/ ) ?  And, of course,\nwhat about Unicode?\n\nThe choices make for different results -- consider incrementing\n\n    Original      /[A-Za-z]*[0-9]*\\z/       /[A-Za-z0-9]*\\z/\n    '123zzz'         '123aaaa'                 '124aaa'\n    '4z99'           '4aa00'                   '5a00'\n\nAny clues here?\n\nI'm also assuming that a string that doesn't have a final\nalphanumeric sequence ends up performing a numeric increment,\nas Perl 5 does.\n\nFor completeness:  Strings that matched the Perl 5 pattern\ndo continue to work the same (under either interpretation of\n\"final alphanumeric sequence\"):\n\n    '12'  becomes '13'\n    '99'          '100'\n    'a0'          'a1'\n    'aa'          'ab'\n    'az'          'ba'\n    'Aa'          'Ab'\n    'Az'          'ba'\n    'zz'          'aaa'\n    'Zz'          'AAz'\n\nAllowing magic autoincrement to work on any final alphanumeric\nsequence also means that we get things like:\n\n    '123Any' becomes '123Anz'\n    '@34'            '@35'\n    '@99'            '@100'\n    'x.54'           'x.55'\n    'x.99'           'x.100'\n    '0.27'           '0.28'\n    '0.99'           '0.100'    # not '1.00'\n    '0x99'           '0y00'     # not '0x9a' or '0x100' \n    '0d99'           '0e00'\n\nAny comments or suggestions for interpreting S03 here are\ngreatly appreciated.  :-)  If this gets into detailed\ndesign issues, we may need to move the subject to\nperl6-language for interpretation.\n\nAnd, of course, tests for the above are welcome.  Currently\nthere are some tests for string autoincrement in t/operators/auto.t\n(there may be others I haven't found yet).\n\nThanks!\n\nPm\n\n"}