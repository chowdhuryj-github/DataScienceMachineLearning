{"category": "ham", "to_address": "p6l <perl6-language@perl.org>", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: [S02] Sigils", "body": "On Wed, May 23, 2007 at 04:33:23PM -0700, Jonathan Lang wrote:\n: >From S02:\n: \n: --\n: \n: Perl 6 includes a system of B to mark the fundamental\n: structural type of a variable:\n: \n:    $   scalar (object)\n:    @   ordered array\n:    %   unordered hash (associative array)\n:    &   code/rule/token/regex\n:    ::  package/module/class/role/subset/enum/type/grammar\n:    @@  multislice view of @\n: \n: C<$x> may be bound to any object, including any object that can be\n: bound to any other sigil.\n: \n: C<@x> may be ... bound to any object that does the C role\n: \n: C<%x> may be bound to any object that does the C role\n: \n: C<&x> may be bound to any object that does the C role\n: \n: C<::x> may be bound to any object that does the C role\n: \n: --\n: \n: IIRC, could the above section about C<$x> be considered equivalent to\n: saying that C<$x> may be bound to any object that does the C\n: role?\n: \n: Also, a possible change in terminology:\n: \n:  s/C/C<< sigil:<@> >>/\n:  s/C/C<< sigil:<%> >>/\n:  s/C/C<< sigil:<&> >>/\n:  s/C/C<< sigil:<::> >>/\n:  s/C/C<< sigil:<$> >>/ if every object does the Object role\n: \n: This would free up more role names for programmer use.  It would also\n: imply that one could create a new sigil by defining a role named\n: 'sigil:<...>', with the behavior of the sigil being established by the\n: definition of the role.  Or does this make it too easy to create new\n: sigils?\n\nWell, it's already too easy, but the problem I have with it is not\nthat.  My problem is that sigil:<@> is the name of a very specific\nsyntactic notion, while Positional is the name of a very generic\nsemantic notion.  I don't think those levels should be confused.\n\nLarry\n\n"}