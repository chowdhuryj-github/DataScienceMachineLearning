{"category": "ham", "to_address": "Alek Storm <alek.storm@gmail.com>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "Alek Storm wrote:\n> \n> This seems perfectly fine to me.  The only change I think should be\n> made is that :vtable automatically sets :method to true.  Using :anon\n> to exclude it from the namespace is what you originally proposed, so\n> I'm curious why you've changed your mind.\n\nBecause I realized that under that system, you could never use :vtable \nby itself (there's no such thing as a vtable without a PMC), and because \nthe most common case (only overriding the vtable entry and not modifying \nthe class namespace) required 3 modifiers on the sub. This way the 2 \nmost common cases each only need one modifier (:method or :vtable).\n\n> Making :method mean one thing when used with :vtable, and something\n> completely different without, seems like a really bad idea to me, and\n> is confusing to the user.  The user will also be confused because\n> adding :vtable removes it from the namespace, which they didn't\n> explicitly ask it to do.  What is :anon good for if we use a\n> completely different system for :vtable?\n\nThe whole point of the original change was to keep vtable overrides from \npolluting the namespace of the class. vtables are Parrot's way of \ninterfacing with PMCs at a low-level, and not every language will want \nall the vtable behavior exposed. When they do, we give them the option, \nbut we don't expect most classes written in PIR to expose the vtable \nentries as methods.\n\n> .sub get_string :vtable :anon # unspecified\n\nJust no effect, since :vtable already implies no entry in the namespace.\n\n> .sub get_string :vtable :method :anon # now we're in trouble\n\nJust like \":method :anon\", but also stores it as a vtable entry.\n\n> The same thing, with what I've proposed:\n> \n> .sub get_string # normal sub, attached to a namespace but not a method\n> \n> .sub get_string :method # a full method, attached to a namespace\n> \n> .sub get_string :vtable # a method that also overrides the vtable\n> \n> .sub get_string :vtable :method # same as before\n> \n> .sub get_string :vtable :anon # same, but not attached to the\n> namespace (note that the user has actually specified this, so they\n> expect it to happen)\n> \n> .sub get_string :vtable :method :anon # same as before\n\nThis works too, but doesn't optimize for the most common case.\n\nAllison\n\n"}