{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "Mark Glines <mark@glines.org>", "subject": "Re: [svn:parrot] r19231 - trunk/languages/perl6/src/pmc", "body": "On Fri, 7 Nov 2008 15:28:40 -0700\nchromatic  wrote:\n> On Friday 22 June 2007 02:07:32 Nicholas Clark wrote:\n> > I think that you need something like this\n> >\n> > /* concatenating with \"\" ensures that only literal strings are\n> > accepted as argument */ #define STR_WITH_LEN(s)  (s \"\"),\n> > (sizeof(s)-1)\n> >\n> > /* STR_WITH_LEN() shortcuts */\n> > #define newSVpvs(str) Perl_newSVpvn(aTHX_ STR_WITH_LEN(str))\n> \n> I'm not sure that's what I was asking.\n> \n> string_from_cstring()'s third parameter can be either the length of\n> the string or zero.  If it's zero, the function will call strlen() to\n> get the string's length.\n> \n> If we're passing in a string literal, it seems silly to pass in a\n> length of 0, as we're recalculating a constant on every call.  I\n> don't see that this macro fixes that.\n\nIt uses sizeof, not strlen.  So, it pushes the calculation to\ncompile-time, so you only have to do it once, and never at runtime.\n\nAlso, using sizeof() will fix some cases that strlen() doesn't handle\ncorrectly, specifically, strings containing explicit null characters.\nsrc/objects.c has a few examples of that.  string_to_cstring(interp,\n\"\\0\", 0) will get the size wrong, but string_to_cstring_literal(interp,\n\"\\0\") will get it right.  So I don't really see a good excuse for not\nusing it everywhere.\n\n\n> I do agree that updating strings and string lengths can be tedious,\n> but I'm not aware of any C89-compliant solution to keep the two\n> synchronized.\n\nsizeof() isn't C89?\n\nMark\n\n"}