{"category": "ham", "to_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "from_address": "Uri Guttman <uri@stemsystems.com>", "subject": "Re: Should a dirhandle be a filehandle-like iterator?", "body": ">>>>> \"JL\" == Jonathan Lang  writes:\n\n  JL> Well, I did suggest that \"openfile\" and \"opendir\" exist alongside\n  JL> \"open\", with \"openfile\" being more akin to Perl 5's \"open\" or\n  JL> \"sysopen\", and \"open\" being a bit more dwimmy.\n\n  JL> But in general, most of the differences that you mention are things\n  JL> that ought to be addressed in the resulting iterators, not in the\n  JL> creating statement.  No, a \"directory handle\" will not behave exactly\n  JL> like a \"file handle\".  But then, a file handle doesn't behave exactly\n  JL> like \"standard in\" or \"standard out\", either (last I checked, Perl 5\n  JL> won't do anything useful if you say \"seek STDIN, 0, SEEK_END\").\n\nwell, that seek failure is a result of the stream nature of stdin and\nnot a failure of perl. remember that open and much of the i/o layers\n(regardless of perl I/O's rewrite) are just wrappers around the OS and\nlibc calls. i don't see how to dwim them all together (but IO::All does\nthat in a wacky dwim way). i have never felt the need for super smart\niterators so i can change looping over lines to looping over a\ndir. maybe you might have a set of filenames in file vs a dir of\nnames. but i just don't run into that need. sometimes mappings like that\nare just overkill IMO.\n\nenough from me on this. as with the rest of p6 i will work with whatever\nis decided by @larry.\n\nuri\n\n-- \nUri Guttman  ------  uri@stemsystems.com  -------- http://www.stemsystems.com\n--Perl Consulting, Stem Development, Systems Architecture, Design and Coding-\nSearch or Offer Perl Jobs  ----------------------------  http://jobs.perl.org\n\n"}