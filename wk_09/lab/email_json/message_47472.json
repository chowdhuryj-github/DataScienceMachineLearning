{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jerry@samba.org", "subject": "svn commit: samba r23474 - in branches: SAMBA_3_0/source/libads\n\tSAMBA_3_0/source/nsswitch SAMBA_3_0/source/smbd\n\tSAMBA_3_0/source/utils SAMBA_3_0_26/source/libads\n\tSAMBA_3_0_26/source/nsswitch SAMBA_3_0_26/source/smbd\n\tSAMBA_3_0_26/source/utils", "body": "Author: jerry\nDate: 2007-06-13 20:49:20 +0000 (Wed, 13 Jun 2007)\nNew Revision: 23474\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23474\n\nLog:\nHere's a small patch that disables the libkrb5.so replay cache \nwhen verifying a ticket from winbindd_pam.c.\n\nI've found during multiple, fast, automated SSH logins (such\nas from a cron script) that the replay cache in MIT's krb5\nlib will occasionally fail the krb5_rd_req() as a replay attack.\n\nThere seems to be a small window during which the MIT krb5\nlibs could reproduce identical time stamps for ctime and cusec\nin the authenticator since Unix systems only give back\nmilli-seconds rather than the micro-seconds needed by the\nauthenticator.  Checked against MIT 1.5.1.  Have not\nresearched how Heimdal does it.\n\nMy thinking is that if someone can spoof the KDC and TDS\nservices we are pretty hopeless anyways.\n\n\nModified:\n   branches/SAMBA_3_0/source/libads/kerberos_verify.c\n   branches/SAMBA_3_0/source/nsswitch/winbindd_pam.c\n   branches/SAMBA_3_0/source/smbd/sesssetup.c\n   branches/SAMBA_3_0/source/utils/ntlm_auth.c\n   branches/SAMBA_3_0_26/source/libads/kerberos_verify.c\n   branches/SAMBA_3_0_26/source/nsswitch/winbindd_pam.c\n   branches/SAMBA_3_0_26/source/smbd/sesssetup.c\n   branches/SAMBA_3_0_26/source/utils/ntlm_auth.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/libads/kerberos_verify.c\n===================================================================\n--- branches/SAMBA_3_0/source/libads/kerberos_verify.c\t2007-06-13 20:45:55 UTC (rev 23473)\n+++ branches/SAMBA_3_0/source/libads/kerberos_verify.c\t2007-06-13 20:49:20 UTC (rev 23474)\n@@ -214,7 +214,14 @@\n \tBOOL auth_ok = False;\n \tchar *password_s = NULL;\n \tkrb5_data password;\n-\tkrb5_enctype enctypes[4] = { ENCTYPE_DES_CBC_CRC, ENCTYPE_DES_CBC_MD5, 0, 0 };\n+\tkrb5_enctype enctypes[] = { \n+#if defined(ENCTYPE_ARCFOUR_HMAC)\n+\t\tENCTYPE_ARCFOUR_HMAC,\n+#endif\n+\t\tENCTYPE_DES_CBC_CRC, \n+\t\tENCTYPE_DES_CBC_MD5, \n+\t\tENCTYPE_NULL\n+\t};\n \tkrb5_data packet;\n \tint i;\n \n@@ -222,9 +229,6 @@\n \t*keyblock = NULL;\n \t*perr = 0;\n \n-#if defined(ENCTYPE_ARCFOUR_HMAC)\n-\tenctypes[2] = ENCTYPE_ARCFOUR_HMAC;\n-#endif\n \n \tif (!secrets_init()) {\n \t\tDEBUG(1,(\"ads_secrets_verify_ticket: secrets_init failed\\n\"));\n@@ -307,7 +311,8 @@\n \t\t\t   char **principal,\n \t\t\t   PAC_DATA **pac_data,\n \t\t\t   DATA_BLOB *ap_rep,\n-\t\t\t   DATA_BLOB *session_key)\n+\t\t\t   DATA_BLOB *session_key,\n+\t\t\t   BOOL use_replay_cache)\n {\n \tNTSTATUS sret = NT_STATUS_LOGON_FAILURE;\n \tNTSTATUS pac_ret;\n@@ -320,7 +325,7 @@\n \tkrb5_keyblock *keyblock = NULL;\n \ttime_t authtime;\n \tkrb5_error_code ret = 0;\n-\t\n+\tkrb5_int32 flags = 0;\t\n \tkrb5_principal host_princ = NULL;\n \tkrb5_const_principal client_principal = NULL;\n \tchar *host_princ_s = NULL;\n@@ -363,6 +368,13 @@\n \t\tgoto out;\n \t}\n \n+\tkrb5_auth_con_getflags( context, auth_context, &flags );\n+\tif ( !use_replay_cache ) {\n+\t\t/* Disable default use of a replay cache */\n+\t\tflags &= ~KRB5_AUTH_CONTEXT_DO_TIME;\n+\t\tkrb5_auth_con_setflags( context, auth_context, flags );\n+\t}\n+\n \tasprintf(&host_princ_s, \"%s$\", global_myname());\n \tif (!host_princ_s) {\n \t\tgoto out;\n@@ -377,50 +389,62 @@\n \t}\n \n \n-\t/* Lock a mutex surrounding the replay as there is no locking in the MIT krb5\n-\t * code surrounding the replay cache... */\n+\tif ( use_replay_cache ) {\n+\t\t\n+\t\t/* Lock a mutex surrounding the replay as there is no \n+\t\t   locking in the MIT krb5 code surrounding the replay \n+\t\t   cache... */\n \n-\tif (!grab_server_mutex(\"replay cache mutex\")) {\n-\t\tDEBUG(1,(\"ads_verify_ticket: unable to protect replay cache with mutex.\\n\"));\n-\t\tret = KRB5_CC_IO;\n-\t\tgoto out;\n-\t}\n+\t\tif (!grab_server_mutex(\"replay cache mutex\")) {\n+\t\t\tDEBUG(1,(\"ads_verify_ticket: unable to protect \"\n+\t\t\t\t \"replay cache with mutex.\\n\"));\n+\t\t\tret = KRB5_CC_IO;\n+\t\t\tgoto out;\n+\t\t}\n \n-\tgot_replay_mutex = True;\n+\t\tgot_replay_mutex = True;\n \n-\t/*\n-\t * JRA. We must set the rcache here. This will prevent replay attacks.\n-\t */\n+\t\t/* JRA. We must set the rcache here. This will prevent \n+\t\t   replay attacks. */\n+\t\t\n+\t\tret = krb5_get_server_rcache(context, \n+\t\t\t\t\t     krb5_princ_component(context, host_princ, 0), \n+\t\t\t\t\t     &rcache);\n+\t\tif (ret) {\n+\t\t\tDEBUG(1,(\"ads_verify_ticket: krb5_get_server_rcache \"\n+\t\t\t\t \"failed (%s)\\n\", error_message(ret)));\n+\t\t\tgoto out;\n+\t\t}\n \n-\tret = krb5_get_server_rcache(context, krb5_princ_component(context, host_princ, 0), &rcache);\n-\tif (ret) {\n-\t\tDEBUG(1,(\"ads_verify_ticket: krb5_get_server_rcache failed (%s)\\n\", error_message(ret)));\n-\t\tgoto out;\n+\t\tret = krb5_auth_con_setrcache(context, auth_context, rcache);\n+\t\tif (ret) {\n+\t\t\tDEBUG(1,(\"ads_verify_ticket: krb5_auth_con_setrcache \"\n+\t\t\t\t \"failed (%s)\\n\", error_message(ret)));\n+\t\t\tgoto out;\n+\t\t}\n \t}\n \n-\tret = krb5_auth_con_setrcache(context, auth_context, rcache);\n-\tif (ret) {\n-\t\tDEBUG(1,(\"ads_verify_ticket: krb5_auth_con_setrcache failed (%s)\\n\", error_message(ret)));\n-\t\tgoto out;\n-\t}\n+\t/* Try secrets.tdb first and fallback to the krb5.keytab if\n+\t   necessary */\n \n-\tif (lp_use_kerberos_keytab()) {\n-\t\tauth_ok = ads_keytab_verify_ticket(context, auth_context, ticket, &tkt, &keyblock, &ret);\n+        auth_ok = ads_secrets_verify_ticket(context, auth_context, host_princ,\n+\t\t\t\t\t    ticket, &tkt, &keyblock, &ret);\n+\n+\tif (!auth_ok && lp_use_kerberos_keytab()) {\n+\t\tauth_ok = ads_keytab_verify_ticket(context, auth_context, \n+\t\t\t\t\t\t   ticket, &tkt, &keyblock, &ret);\n \t}\n-\tif (!auth_ok) {\n-\t\tauth_ok = ads_secrets_verify_ticket(context, auth_context, host_princ,\n-\t\t\t\t\t\t    ticket, &tkt, &keyblock, &ret);\n-\t}\n \n-\trelease_server_mutex();\n-\tgot_replay_mutex = False;\n-\n+\tif ( use_replay_cache ) {\t\t\n+\t\trelease_server_mutex();\n+\t\tgot_replay_mutex = False;\n #if 0\n-\t/* Heimdal leaks here, if we fix the leak, MIT crashes */\n-\tif (rcache) {\n-\t\tkrb5_rc_close(context, rcache);\n-\t}\n+\t\t/* Heimdal leaks here, if we fix the leak, MIT crashes */\n+\t\tif (rcache) {\n+\t\t\tkrb5_rc_close(context, rcache);\n+\t\t}\n #endif\n+\t}\t\n \n \tif (!auth_ok) {\n \t\tDEBUG(3,(\"ads_verify_ticket: krb5_rd_req with auth failed (%s)\\n\", \n\nModified: branches/SAMBA_3_0/source/nsswitch/winbindd_pam.c\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/winbindd_pam.c\t2007-06-13 20:45:55 UTC (rev 23473)\n+++ branches/SAMBA_3_0/source/nsswitch/winbindd_pam.c\t2007-06-13 20:49:20 UTC (rev 23474)\n@@ -615,7 +615,7 @@\n \t\t\t\t   &client_princ_out, \n \t\t\t\t   &pac_data, \n \t\t\t\t   &ap_rep, \n-\t\t\t\t   &session_key);\t\n+\t\t\t\t   &session_key, False);\n \tif (!NT_STATUS_IS_OK(result)) {\n \t\tDEBUG(0,(\"winbindd_raw_kerberos_login: ads_verify_ticket failed: %s\\n\", \n \t\t\tnt_errstr(result)));\n\nModified: branches/SAMBA_3_0/source/smbd/sesssetup.c\n===================================================================\n--- branches/SAMBA_3_0/source/smbd/sesssetup.c\t2007-06-13 20:45:55 UTC (rev 23473)\n+++ branches/SAMBA_3_0/source/smbd/sesssetup.c\t2007-06-13 20:49:20 UTC (rev 23474)\n@@ -270,7 +270,9 @@\n \t\treturn ERROR_NT(nt_status_squash(NT_STATUS_LOGON_FAILURE));\n \t}\n \n-\tret = ads_verify_ticket(mem_ctx, lp_realm(), 0, &ticket, &client, &pac_data, &ap_rep, &session_key);\n+\tret = ads_verify_ticket(mem_ctx, lp_realm(), 0, &ticket, \n+\t\t\t\t&client, &pac_data, &ap_rep, \n+\t\t\t\t&session_key, True);\n \n \tdata_blob_free(&ticket);\n \n\nModified: branches/SAMBA_3_0/source/utils/ntlm_auth.c\n===================================================================\n--- branches/SAMBA_3_0/source/utils/ntlm_auth.c\t2007-06-13 20:45:55 UTC (rev 23473)\n+++ branches/SAMBA_3_0/source/utils/ntlm_auth.c\t2007-06-13 20:49:20 UTC (rev 23474)\n@@ -1169,7 +1169,7 @@\n \t\t\tstatus = ads_verify_ticket(mem_ctx, lp_realm(), 0,\n \t\t\t\t\t\t   &request.negTokenInit.mechToken,\n \t\t\t\t\t\t   &principal, NULL, &ap_rep,\n-\t\t\t\t\t\t   &session_key);\n+\t\t\t\t\t\t   &session_key, True);\n \n \t\t\ttalloc_destroy(mem_ctx);\n \n\nModified: branches/SAMBA_3_0_26/source/libads/kerberos_verify.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libads/kerberos_verify.c\t2007-06-13 20:45:55 UTC (rev 23473)\n+++ branches/SAMBA_3_0_26/source/libads/kerberos_verify.c\t2007-06-13 20:49:20 UTC (rev 23474)\n@@ -214,7 +214,14 @@\n \tBOOL auth_ok = False;\n \tchar *password_s = NULL;\n \tkrb5_data password;\n-\tkrb5_enctype enctypes[4] = { ENCTYPE_DES_CBC_CRC, ENCTYPE_DES_CBC_MD5, 0, 0 };\n+\tkrb5_enctype enctypes[] = { \n+#if defined(ENCTYPE_ARCFOUR_HMAC)\n+\t\tENCTYPE_ARCFOUR_HMAC,\n+#endif\n+\t\tENCTYPE_DES_CBC_CRC, \n+\t\tENCTYPE_DES_CBC_MD5, \n+\t\tENCTYPE_NULL\n+\t};\n \tkrb5_data packet;\n \tint i;\n \n@@ -222,9 +229,6 @@\n \t*keyblock = NULL;\n \t*perr = 0;\n \n-#if defined(ENCTYPE_ARCFOUR_HMAC)\n-\tenctypes[2] = ENCTYPE_ARCFOUR_HMAC;\n-#endif\n \n \tif (!secrets_init()) {\n \t\tDEBUG(1,(\"ads_secrets_verify_ticket: secrets_init failed\\n\"));\n@@ -307,7 +311,8 @@\n \t\t\t   char **principal,\n \t\t\t   PAC_DATA **pac_data,\n \t\t\t   DATA_BLOB *ap_rep,\n-\t\t\t   DATA_BLOB *session_key)\n+\t\t\t   DATA_BLOB *session_key,\n+\t\t\t   BOOL use_replay_cache)\n {\n \tNTSTATUS sret = NT_STATUS_LOGON_FAILURE;\n \tNTSTATUS pac_ret;\n@@ -320,7 +325,7 @@\n \tkrb5_keyblock *keyblock = NULL;\n \ttime_t authtime;\n \tkrb5_error_code ret = 0;\n-\t\n+\tkrb5_int32 flags = 0;\t\n \tkrb5_principal host_princ = NULL;\n \tkrb5_const_principal client_principal = NULL;\n \tchar *host_princ_s = NULL;\n@@ -363,6 +368,13 @@\n \t\tgoto out;\n \t}\n \n+\tkrb5_auth_con_getflags( context, auth_context, &flags );\n+\tif ( !use_replay_cache ) {\n+\t\t/* Disable default use of a replay cache */\n+\t\tflags &= ~KRB5_AUTH_CONTEXT_DO_TIME;\n+\t\tkrb5_auth_con_setflags( context, auth_context, flags );\n+\t}\n+\n \tasprintf(&host_princ_s, \"%s$\", global_myname());\n \tif (!host_princ_s) {\n \t\tgoto out;\n@@ -377,50 +389,62 @@\n \t}\n \n \n-\t/* Lock a mutex surrounding the replay as there is no locking in the MIT krb5\n-\t * code surrounding the replay cache... */\n+\tif ( use_replay_cache ) {\n+\t\t\n+\t\t/* Lock a mutex surrounding the replay as there is no \n+\t\t   locking in the MIT krb5 code surrounding the replay \n+\t\t   cache... */\n \n-\tif (!grab_server_mutex(\"replay cache mutex\")) {\n-\t\tDEBUG(1,(\"ads_verify_ticket: unable to protect replay cache with mutex.\\n\"));\n-\t\tret = KRB5_CC_IO;\n-\t\tgoto out;\n-\t}\n+\t\tif (!grab_server_mutex(\"replay cache mutex\")) {\n+\t\t\tDEBUG(1,(\"ads_verify_ticket: unable to protect \"\n+\t\t\t\t \"replay cache with mutex.\\n\"));\n+\t\t\tret = KRB5_CC_IO;\n+\t\t\tgoto out;\n+\t\t}\n \n-\tgot_replay_mutex = True;\n+\t\tgot_replay_mutex = True;\n \n-\t/*\n-\t * JRA. We must set the rcache here. This will prevent replay attacks.\n-\t */\n+\t\t/* JRA. We must set the rcache here. This will prevent \n+\t\t   replay attacks. */\n+\t\t\n+\t\tret = krb5_get_server_rcache(context, \n+\t\t\t\t\t     krb5_princ_component(context, host_princ, 0), \n+\t\t\t\t\t     &rcache);\n+\t\tif (ret) {\n+\t\t\tDEBUG(1,(\"ads_verify_ticket: krb5_get_server_rcache \"\n+\t\t\t\t \"failed (%s)\\n\", error_message(ret)));\n+\t\t\tgoto out;\n+\t\t}\n \n-\tret = krb5_get_server_rcache(context, krb5_princ_component(context, host_princ, 0), &rcache);\n-\tif (ret) {\n-\t\tDEBUG(1,(\"ads_verify_ticket: krb5_get_server_rcache failed (%s)\\n\", error_message(ret)));\n-\t\tgoto out;\n+\t\tret = krb5_auth_con_setrcache(context, auth_context, rcache);\n+\t\tif (ret) {\n+\t\t\tDEBUG(1,(\"ads_verify_ticket: krb5_auth_con_setrcache \"\n+\t\t\t\t \"failed (%s)\\n\", error_message(ret)));\n+\t\t\tgoto out;\n+\t\t}\n \t}\n \n-\tret = krb5_auth_con_setrcache(context, auth_context, rcache);\n-\tif (ret) {\n-\t\tDEBUG(1,(\"ads_verify_ticket: krb5_auth_con_setrcache failed (%s)\\n\", error_message(ret)));\n-\t\tgoto out;\n-\t}\n+\t/* Try secrets.tdb first and fallback to the krb5.keytab if\n+\t   necessary */\n \n-\tif (lp_use_kerberos_keytab()) {\n-\t\tauth_ok = ads_keytab_verify_ticket(context, auth_context, ticket, &tkt, &keyblock, &ret);\n+        auth_ok = ads_secrets_verify_ticket(context, auth_context, host_princ,\n+\t\t\t\t\t    ticket, &tkt, &keyblock, &ret);\n+\n+\tif (!auth_ok && lp_use_kerberos_keytab()) {\n+\t\tauth_ok = ads_keytab_verify_ticket(context, auth_context, \n+\t\t\t\t\t\t   ticket, &tkt, &keyblock, &ret);\n \t}\n-\tif (!auth_ok) {\n-\t\tauth_ok = ads_secrets_verify_ticket(context, auth_context, host_princ,\n-\t\t\t\t\t\t    ticket, &tkt, &keyblock, &ret);\n-\t}\n \n-\trelease_server_mutex();\n-\tgot_replay_mutex = False;\n-\n+\tif ( use_replay_cache ) {\t\t\n+\t\trelease_server_mutex();\n+\t\tgot_replay_mutex = False;\n #if 0\n-\t/* Heimdal leaks here, if we fix the leak, MIT crashes */\n-\tif (rcache) {\n-\t\tkrb5_rc_close(context, rcache);\n-\t}\n+\t\t/* Heimdal leaks here, if we fix the leak, MIT crashes */\n+\t\tif (rcache) {\n+\t\t\tkrb5_rc_close(context, rcache);\n+\t\t}\n #endif\n+\t}\t\n \n \tif (!auth_ok) {\n \t\tDEBUG(3,(\"ads_verify_ticket: krb5_rd_req with auth failed (%s)\\n\", \n\nModified: branches/SAMBA_3_0_26/source/nsswitch/winbindd_pam.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/nsswitch/winbindd_pam.c\t2007-06-13 20:45:55 UTC (rev 23473)\n+++ branches/SAMBA_3_0_26/source/nsswitch/winbindd_pam.c\t2007-06-13 20:49:20 UTC (rev 23474)\n@@ -615,7 +615,7 @@\n \t\t\t\t   &client_princ_out, \n \t\t\t\t   &pac_data, \n \t\t\t\t   &ap_rep, \n-\t\t\t\t   &session_key);\t\n+\t\t\t\t   &session_key, False);\n \tif (!NT_STATUS_IS_OK(result)) {\n \t\tDEBUG(0,(\"winbindd_raw_kerberos_login: ads_verify_ticket failed: %s\\n\", \n \t\t\tnt_errstr(result)));\n\nModified: branches/SAMBA_3_0_26/source/smbd/sesssetup.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/smbd/sesssetup.c\t2007-06-13 20:45:55 UTC (rev 23473)\n+++ branches/SAMBA_3_0_26/source/smbd/sesssetup.c\t2007-06-13 20:49:20 UTC (rev 23474)\n@@ -267,7 +267,9 @@\n \t\treturn ERROR_NT(nt_status_squash(NT_STATUS_LOGON_FAILURE));\n \t}\n \n-\tret = ads_verify_ticket(mem_ctx, lp_realm(), 0, &ticket, &client, &pac_data, &ap_rep, &session_key);\n+\tret = ads_verify_ticket(mem_ctx, lp_realm(), 0, &ticket, \n+\t\t\t\t&client, &pac_data, &ap_rep, \n+\t\t\t\t&session_key, True);\n \n \tdata_blob_free(&ticket);\n \n\nModified: branches/SAMBA_3_0_26/source/utils/ntlm_auth.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/utils/ntlm_auth.c\t2007-06-13 20:45:55 UTC (rev 23473)\n+++ branches/SAMBA_3_0_26/source/utils/ntlm_auth.c\t2007-06-13 20:49:20 UTC (rev 23474)\n@@ -1169,7 +1169,7 @@\n \t\t\tstatus = ads_verify_ticket(mem_ctx, lp_realm(), 0,\n \t\t\t\t\t\t   &request.negTokenInit.mechToken,\n \t\t\t\t\t\t   &principal, NULL, &ap_rep,\n-\t\t\t\t\t\t   &session_key);\n+\t\t\t\t\t\t   &session_key, True);\n \n \t\t\ttalloc_destroy(mem_ctx);\n \n\n"}