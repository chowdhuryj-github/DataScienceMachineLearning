{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jra@samba.org", "subject": "svn commit: samba r22563 - in branches/SAMBA_4_0/source/lib/talloc:\n\t.", "body": "Author: jra\nDate: 2007-04-28 23:23:24 +0000 (Sat, 28 Apr 2007)\nNew Revision: 22563\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22563\n\nLog:\nAs tridge requested remove the _strict calls - for Samba3 I'm moving\nto a separate file.\nJeremy.\n\nModified:\n   branches/SAMBA_4_0/source/lib/talloc/talloc.c\n   branches/SAMBA_4_0/source/lib/talloc/talloc.h\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/talloc/talloc.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/talloc/talloc.c\t2007-04-28 20:56:32 UTC (rev 22562)\n+++ branches/SAMBA_4_0/source/lib/talloc/talloc.c\t2007-04-28 23:23:24 UTC (rev 22563)\n@@ -1086,29 +1086,6 @@\n \treturn p;\n }\n \n-\n-/* \n-   talloc and zero memory. \n-   Strict version - returns NULL if size is zero.\n-*/\n-void *_talloc_zero_strict(const void *ctx, size_t size, const char *name)\n-{\n-\tvoid *p;\n-\n-\tif (unlikely(size == 0)) {\n-\t\treturn NULL;\n-\t}\n-\n-\tp = _talloc_named_const(ctx, size, name);\n-\n-\tif (p) {\n-\t\tmemset(p, '\\0', size);\n-\t}\n-\n-\treturn p;\n-}\n-\n-\n /*\n   memdup with a talloc. \n */\n@@ -1124,26 +1101,6 @@\n }\n \n /*\n-  memdup with a talloc. \n-  Strict version - returns NULL if size is zero.\n-*/\n-void *_talloc_memdup_strict(const void *t, const void *p, size_t size, const char *name)\n-{\n-\tvoid *newp;\n-\n-\tif (unlikely(size == 0)) {\n-\t\treturn NULL;\n-\t}\n-\n-\tnewp = _talloc_named_const(t, size, name);\n-\tif (likely(newp)) {\n-\t\tmemcpy(newp, p, size);\n-\t}\n-\n-\treturn newp;\n-}\n-\n-/*\n   strdup with a talloc \n */\n char *talloc_strdup(const void *t, const char *p)\n@@ -1324,23 +1281,6 @@\n }\n \n /*\n-  alloc an array, checking for integer overflow in the array size.\n-  Strict version - returns NULL if count or el_size are zero.\n-*/\n-void *_talloc_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name)\n-{\n-\tif (count >= MAX_TALLOC_SIZE/el_size) {\n-\t\treturn NULL;\n-\t}\n-\n-\tif (el_size == 0 || count == 0) {\n-\t\treturn NULL;\n-\t}\n-\n-\treturn _talloc_named_const(ctx, el_size * count, name);\n-}\n-\n-/*\n   alloc an zero array, checking for integer overflow in the array size\n */\n void *_talloc_zero_array(const void *ctx, size_t el_size, unsigned count, const char *name)\n@@ -1352,24 +1292,6 @@\n }\n \n /*\n-  alloc an zero array, checking for integer overflow in the array size\n-  Strict version - returns NULL if count or el_size are zero.\n-*/\n-void *_talloc_zero_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name)\n-{\n-\tif (count >= MAX_TALLOC_SIZE/el_size) {\n-\t\treturn NULL;\n-\t}\n-\n-\tif (el_size == 0 || count == 0) {\n-\t\treturn NULL;\n-\t}\n-\n-\treturn _talloc_zero(ctx, el_size * count, name);\n-}\n-\n-\n-/*\n   realloc an array, checking for integer overflow in the array size\n */\n void *_talloc_realloc_array(const void *ctx, void *ptr, size_t el_size, unsigned count, const char *name)\n@@ -1497,14 +1419,3 @@\n \t}\n \treturn 0;\n }\n-\n-/*\n-  Talloc wrapper that returns NULL if size == 0.\n-*/\n-void *talloc_strict(const void *context, size_t size, const char *name)\n-{\n-\tif (unlikely(size == 0)) {\n-\t\treturn NULL;\n-\t}\n-\treturn _talloc_named_const(context, size, name);\n-}\n\nModified: branches/SAMBA_4_0/source/lib/talloc/talloc.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/talloc/talloc.h\t2007-04-28 20:56:32 UTC (rev 22562)\n+++ branches/SAMBA_4_0/source/lib/talloc/talloc.h\t2007-04-28 23:23:24 UTC (rev 22563)\n@@ -84,33 +84,22 @@\n /* useful macros for creating type checked pointers */\n #define talloc(ctx, type) (type *)talloc_named_const(ctx, sizeof(type), #type)\n #define talloc_size(ctx, size) talloc_named_const(ctx, size, __location__)\n-#define talloc_size_strict(ctx, size) talloc_strict(ctx, size, __location__)\n #define talloc_ptrtype(ctx, ptr) (_TALLOC_TYPEOF(ptr))talloc_size(ctx, sizeof(*(ptr)))\n \n #define talloc_new(ctx) talloc_named_const(ctx, 0, \"talloc_new: \" __location__)\n \n #define talloc_zero(ctx, type) (type *)_talloc_zero(ctx, sizeof(type), #type)\n-/* Varient of talloc_zero that returns NULL if size is zero. */\n-#define talloc_zero_strict(ctx, type) (type *)_talloc_zero_strict(ctx, sizeof(type), #type)\n #define talloc_zero_size(ctx, size) _talloc_zero(ctx, size, __location__)\n-#define talloc_zero_size_strict(ctx, size) _talloc_zero_strict(ctx, size, __location__)\n \n #define talloc_zero_array(ctx, type, count) (type *)_talloc_zero_array(ctx, sizeof(type), count, #type)\n-/* Varient of talloc_zero_array that returns NULL if count is zero. */\n-#define talloc_zero_array_strict(ctx, type, count) (type *)_talloc_zero_array_strict(ctx, sizeof(type), count, #type)\n #define talloc_array(ctx, type, count) (type *)_talloc_array(ctx, sizeof(type), count, #type)\n-/* Varient of talloc_array that returns NULL if count is zero. */\n-#define talloc_array_strict(ctx, type, count) (type *)_talloc_array_strict(ctx, sizeof(type), count, #type)\n #define talloc_array_size(ctx, size, count) _talloc_array(ctx, size, count, __location__)\n-#define talloc_array_size_strict(ctx, size, count) _talloc_array_strict(ctx, size, count, __location__)\n #define talloc_array_ptrtype(ctx, ptr, count) (_TALLOC_TYPEOF(ptr))talloc_array_size(ctx, sizeof(*(ptr)), count)\n \n #define talloc_realloc(ctx, p, type, count) (type *)_talloc_realloc_array(ctx, p, sizeof(type), count, #type)\n #define talloc_realloc_size(ctx, ptr, size) _talloc_realloc(ctx, ptr, size, __location__)\n \n #define talloc_memdup(t, p, size) _talloc_memdup(t, p, size, __location__)\n-/* Varient of talloc_memdup that returns NULL if count is zero. */\n-#define talloc_memdup_strict(t, p, size) _talloc_memdup_strict(t, p, size, __location__)\n \n #define talloc_set_type(ptr, type) talloc_set_name_const(ptr, #type)\n #define talloc_get_type(ptr, type) (type *)talloc_check_name(ptr, #type)\n@@ -163,9 +152,7 @@\n void talloc_enable_leak_report(void);\n void talloc_enable_leak_report_full(void);\n void *_talloc_zero(const void *ctx, size_t size, const char *name);\n-void *_talloc_zero_strict(const void *ctx, size_t size, const char *name);\n void *_talloc_memdup(const void *t, const void *p, size_t size, const char *name);\n-void *_talloc_memdup_strict(const void *t, const void *p, size_t size, const char *name);\n char *talloc_strdup(const void *t, const char *p);\n char *talloc_strndup(const void *t, const char *p, size_t n);\n char *talloc_append_string(const void *t, char *orig, const char *append);\n@@ -174,9 +161,7 @@\n char *talloc_asprintf(const void *t, const char *fmt, ...) PRINTF_ATTRIBUTE(2,3);\n char *talloc_asprintf_append(char *s, const char *fmt, ...) PRINTF_ATTRIBUTE(2,3);\n void *_talloc_array(const void *ctx, size_t el_size, unsigned count, const char *name);\n-void *_talloc_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name);\n void *_talloc_zero_array(const void *ctx, size_t el_size, unsigned count, const char *name);\n-void *_talloc_zero_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name);\n void *_talloc_realloc_array(const void *ctx, void *ptr, size_t el_size, unsigned count, const char *name);\n void *talloc_realloc_fn(const void *context, void *ptr, size_t size);\n void *talloc_autofree_context(void);\n@@ -184,6 +169,5 @@\n void *talloc_find_parent_byname(const void *ctx, const char *name);\n void talloc_show_parents(const void *context, FILE *file);\n int talloc_is_parent(const void *context, const void *ptr);\n-void *talloc_strict(const void *context, size_t size, const char *name);\n \n #endif\n\n"}