{"category": "ham", "to_address": "Beginners Perl <beginners@perl.org>", "from_address": "Mike Lesser <exceptions@earthlink.net>", "subject": "testing return values", "body": "Hiya. I'm looking for the correct Perl style for testing and storing  \na return value in a control statement. The solution in any other  \nlanguage is pretty obvious, but I get the distinct impression that  \nthere's a 'right' way in Perl...\n\nLet's say I want to test a scalar returned from a subroutine, and  \nalso keep a copy for my own use:\n\n  $scalar = sub( $argument );\n\n  if( $scalar ){\n  }\n\nNaturally that's no big deal. Now let's say I have a tree I want to  \ntraverse, or some similar open-ended thing to evaluate, and want to  \nrun it until a condition is reached..\n\n  while( read_tree( $argument ){\n  }\n\nAgain no biggie. The problem is if I want to keep the result.  \nObviously I can't do this:\n\nwhile( $tree_element = read_tree( $argument ) ){\n    do_something( $tree_element );\n}\n\nI can come up with a brute-force solution of course, but there's  \nprobably a better, Perlish way that I'm not aware of. In addition, I  \ndon't expect a return value from some module to be consistently  \nundefined or zero; it could change under some circumstances. This  \nmakes me think that the problem has been dealt with long ago, and  \njust doesn't stick out in the llama/alpaca/whatever books.\n\nHopefully I explained this correctly!\n\n\n\n\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}