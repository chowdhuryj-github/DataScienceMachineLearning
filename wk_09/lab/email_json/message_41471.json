{"category": "ham", "to_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: 'x' vs. 'xx'", "body": "On 6/3/07, Jonathan Lang  wrote:\n> Chas Owens wrote:\n> > Jonathan Lang wrote:\n> > > Is there any reason why we can't simply define '$a x $n' as being\n> > > shorthand for 'cat($a xx $n)'?  In what way does the former differ\n> > > from the latter, other than the use of a Whatever in place of $n?\n> >\n> > \"$a x $n\" is equivalent to \"join '', $a xx $n\", but that isn't an apt\n> > description of its behavior.  \"cat($a xx *)\" is an attempt to provide\n> > an infinite string since 'a' x Inf would result in memory overflow\n> > (but the cat trick works since lists are evaluated lazily).\n>\n> Then it looks to me like 'cat($a xx $n)' is more flexible than \"join\n> '', $a xx $n\", and would work better as the baseline definition for\n> '$a x $n'.  Is there any reason to prefer a join-based definition to a\n> cat-based one?  AFAICT, the only thing that 'join' can do that 'cat'\n> can't is to provide a delimiter when stitching the component strings\n> together; in the case of 'x', this feature is (rightfully) not being\n> used.\n>\n> --\n> Jonathan \"Dataweaver\" Lang\n>\n\nOkay, maybe my understanding of the cat function is flawed, but I\nthought it walked through each array handed to it in a serial fashion\n(as opposed to zip which walks the arrays in a parallel fashion).  If\nthat is the case then (\"a\" x 5) ne cat(\"a\" xx 5).  The former produces\na scalar string value of five characters and the other produces a list\nof one character scalar string values.  My understanding is that the\ncat function and the xx operator are being used in  the documentation\nto mimic what an _infinite_ string (not a normal string) would look\nlike.  Since you cannot have an infinite string with the current\nimplementation of scalars (memory would give out), a list with lazy\nevaluation is used; however, you could not just drop cat(\"a\" xx *)\ninto a spot where you you were using \"a\" x 5.\n\n"}