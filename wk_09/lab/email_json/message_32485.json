{"category": "ham", "to_address": "\"Martin Barth\" <martin@senfdax.de>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: syscall getpwnam and changing authetication on system", "body": "On 5/18/07, Martin Barth  wrote:\n\n>         print \"********** \" . eval(\"getpwnam('christian')\") .\"\\n\"; sleep 10;\n\nWhy are you (mis-)using the evil eval?\n\n> if I do a perl -wle 'print getpwnam(\"christian\")' the correct (new) uid is returned.\n\nSo, if you don't use the evil eval, everything works fine?\n\nThat should be the end of the story. (\"Doctor, it hurts when I stick\nmy finger in my eye.\" \"Stop doing that.\") But in case you're burning\nwith curiosity about what's going on with eval, here you go:\n\nI suspect that your perl has cached the result of compiling that\nstring, which is to say it's cached the old uid. If you need an eval\nstring to be repeatedly re-compiled at runtime (and you fail to notice\nthat this is a sign that your algorithm needs fixing) simply ensure\nthat it's a different string each time you eval it. Perhaps something\nlike this:\n\n  my $serial;\n  my $evil_result = eval(\"getpwnam('christian')\" . \"\\n#\" . ++$serial);\n\nBut this is no endorsement of the evil eval. You've found merely one\nof its evil pitfalls. Avoid, avoid, avoid.\n\nCheers!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}