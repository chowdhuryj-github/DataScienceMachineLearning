{"category": "ham", "to_address": "Chas Owens <chas.owens@gmail.com>", "from_address": "Paul Johnson <paul@pjcj.net>", "subject": "Re: Nested loop", "body": "On Fri, Apr 20, 2007 at 01:47:18PM -0400, Chas Owens wrote:\n\n>                                                               but you\n> should be more concerned with making what you write clearly express\n> your intent.  This is why I prefer\n> \n> my @a = (0 .. 10);\n> my $i = 0;\n> for my $elem (grep {not $i++ % 3} @a) {\n>       func($elem);\n> }\n> \n> to\n> \n> for (my $i = 0; $i < @a; $i += 3) {\n>    func($a[$i]\n> }\n> \n> The grep clearly states that I am looking for something and its block\n> tells me what the criteria are.\n\nThere are times where this list needs webcams.  I'd love to have been\nable to have seen you as you wrote that since I find it hard to believe\nthat anyone could have done so whilst keeping a straight face ;-)\n\nI presume that in your second example you should really be comparing\nagainst\n\n  for (my $i = 0; $i < 10; $i += 3) {\n      func($i);\n  }\n\nwhich just seems so much clearer to me.\n\nFortunately, TIMTOWTDI, but with any luck I won't be maintaining your\ncode ;-)\n\nAnyway, there seems to be a little confusion about whether for or\nforeach were going to be removed from the language.  The main point I\nwanted to make was that foreach is not going away.  Neither is for.  At\nleast, not in Perl5, which will still be around for a long time.  They\nare still synonyms, and any code written now and using either of these\nconstructs will continue to work under all Perl5 releases.\n\n-- \nPaul Johnson - paul@pjcj.net\nhttp://www.pjcj.net\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}