{"category": "ham", "to_address": "perl6-all@perl.org, p6l <perl6-language@perl.org>", "from_address": "\"Charles Bailey\" <bailey.charles@gmail.com>", "subject": "Re: assign-if-uninitialized [Was: Generalizing ?? !!]", "body": "On 6/19/07, Larry Wall  wrote:\n> On Tue, Jun 19, 2007 at 11:50:35AM -0400, Charles Bailey wrote:\n> : Yep.  For that matter, if I had to pick one change in this area that'd\n> : have maximum impact, I'd say a good assign-if-uninitialized idiom\n> : would be way ahead of an if-then-else idiom.\n>\n> Depending on how you mean \"uninitialized\", that would be either:\n>\n>     $x //= 42;          # init if undefined\n>\n> or\n>\n>     state $x = 42;      # init first time through\n>\n> Both of which are getting borrowed back into Perl 5, as it happens.\n\nThis is a Good Thing, on both counts.  (I was thinking primarily of the former.)\n\nMy intent was to say that I'm glad this was addressed in the design of\nP6, since it is, in my experience, a much more common version of the\nconditional assignment problem than the ternary operator.   Yet\nanother example of P6 doing things well.\n\nRereading my original comment, I see this is less than clear.  My\napologies for the confusion.\n\n-- \nRegards,\nCharles Bailey\nLists: bailey _dot_ charles _at_ gmail _dot_ com\nOther: bailey _at_ newman _dot_ upenn _dot_ edu\n\n"}