{"category": "ham", "to_address": "beginners@perl.org, perl-beginners@moderators.isc.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: /s, /g and /m modifiers", "body": "On Jun 1, 4:54 am, sharan.basa...@gmail.com (Sharan Basappa) wrote:\n> I have a script as follows  :\n>\n> $str = \"once upon a time\n>         once upon a time\";\n> @store = $str =~ m/(once)/g;\n> print @store ;\n>\n> This outputs \"onceonce\"\n> How come regex is searching beyond newline. I thought the search will\n> stop after first once.\n\nWhat led you to believe that?  There is nothing in that regex that\nsays \"stop after the first newline\"\n\n> When I replace /g with /m, the output I get is \"once\", but I thought /m will\n> tell regex at multiple lines for match.\n\nThat is the mnemonic device, yes, but what it actually does is allow\nthe ^ token to match after a newline and the $ character to match\nbefore a newline, rather than just the beginning and end of string.\nSo effectively, ^ and $ match the beggining/ending of lines, rather\nthan strings.\n\nYour regexp does not involve ^ or $, so /m is completely irrelevent.\n\nIf you remove the /g modifier, your pattern matches only once.\nRegardless of any other modifiers, if you want to search for more than\none occurrence of the pattern, you need the /g modifier.\n\n> Also when I replace /g with /s, I still get output \"once\"\n\nAgain, without the /g modifier, the pattern matches only once.  /s is\nalso irrelevant.  While the mnemonic for this one is \"single line\",\nwhat it actually does is allow the . wildcard to match any character\nincluding the newline.  Normally it matches any character except the\nnewline.  Again, you have no . in your pattern, so /s is irrelevant.\n\n> Can someone demystify this for me ?\n> Is my assumption that regex will stop after encountering first newline is\n> applicable only when dot* type of regex is used ?\n\nAh.  Now I understand your confusion.  It is not the regexp that stops\nmatching.  It is the . wildcard.  The . does not match a newline\ncharacter, unless you provide the /s modifier.  Therefore, the string\n\"onex\\ntwox\" will match /o(.*)x/ by setting $1 to 'on'.  This is what\nyou've interpreted by \"stopping after the first newline\".  The regexp\nengine didn't stop.  It's just that the . ran out of sequential\ncharacters that it could match.  If you add the /s modifier, then $1\nwill become \"nex\\ntwo\", because now the . wildcard will match the\nnewline.\n\nFor more info:\nperldoc perlretut\nperldoc perlre\nperldoc perlreref\n\nHope this helps,\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}