{"category": "ham", "to_address": "Andrew Bartlett <abartlet@samba.org>", "from_address": "derrell@samba.org", "subject": "Re: svn commit: samba r22731 - in branches/SAMBA_3_0/source: . tests", "body": "Andrew Bartlett  writes:\n\n> What type of system is this?\n\nIt's FreeSpire (the free version of Linspire, formerly Lindows), which is\nbased on Debian pre-Etch.\n\n>> On systems that provide declarations for all functions, my change will have\n>> no effect.  It has an effect only on systems where some system functions\n>> are missing declarations in system header files.  If you've succeeded in a\n>> developer build and compile immediately prior to this change, you will\n>> still succeed with no changes to what configure detects nor to your build.\n>> Only those (few?) systems where some functions are missing declarations in\n>> system headers are affected, and this change allows them to compile in\n>> developer mode whereas immediately prior to this change, they could not\n>> compile.\n>\n> On such systems, the missing prototypes (after extensive tests are made\n> for finding the correct prototype header) should be provided by\n> libreplace, as it already does for many standard functions (for which a\n> reliable prototype is often found in the POSIX standard).\n\nThat'd be fine if only the external declaration is provided by libreplace.  My\nunderstanding was that libreplace provided functions that are needed but not\navailable on the system.  This is a different problem, in that the system\nprovides the function (which is why the original configure test passed) but no\nheader file declares the function, so the compile fails.\n\nAre there cases already handled by libreplace where it provides only an\nexternal declaration where one isn't provided by the system?  If so, that'd be\nthe way to go and could be easily cloned.  The downside of doing it this way\nis that it requires adding to libreplace every time any system is found to\nhave a missing system declaration.\n\nCheers,\n\nDerrell\n\n"}