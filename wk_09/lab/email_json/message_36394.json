{"category": "ham", "to_address": "p6l <perl6-language@perl.org>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Purging [-1]", "body": "I just went through all of the synopses searching for instances where[-1] is still being referenced in its perl5 sense; the followingpatches update them to correct perl6 syntax.  I also took the libertyof fixing up a markup glitch in S03.pod.\n=begin S02\n@@ -1379,7 +1379,7 @@\n =item *\n-The C<$#foo> notation is dead.  Use C<@foo.end> or C<@foo[-1]> instead.+The C<$#foo> notation is dead.  Use C<@foo.end> or C<@foo[*-1]> instead. (Or C<@foo.shape[$dimension]> for multidimensional arrays.)\n =back=end S02\n=begin S03\n--- S03.pod     2007-05-25 17:32:16.000000000 -0700+++ S03a.pod    2007-05-25 17:38:14.000000000 -0700@@ -1606,7 +1606,7 @@\n =item *\n-C gets a synonym: C< < ... > >, and an interpolating+C gets a synonym: C<< < ... > >>, and an interpolating variant, C<\u00ab...\u00bb>. For those still living without the blessings of Unicode, that can also be written: C<<< << ... >> >>>.@@ -1614,7 +1614,7 @@ =item *\n In item context comma C<,> now constructs a C object from its-operands.  You have to use a C<[-1]> subscript to get the last one.+operands.  You have to use a C<[*-1]> subscript to get the last one.\n =item *\n@@ -2146,7 +2146,7 @@\n is short for something like:\n-    @array[0..^@array], @array[-1] xx *+    @array[0..^@array], @array[*-1] xx *\n An empty Range cannot be iterated; it returns a C instead.  An empty range still has a defined min and max, but the min is greater than the max.@@ -3050,8 +3050,8 @@\n are equivalent to\n-    $x = @y[0] = @y[1] = @y[2] ... @y[-1] = $z = 0-    $x += @y[0] += @y[1] += @y[2] ... @y[-1] += $z += 1+    $x = @y[0] = @y[1] = @y[2] ... @y[*-1] = $z = 0+    $x += @y[0] += @y[1] += @y[2] ... @y[*-1] += $z += 1\n rather than=end S03\n--Jonathan \"Dataweaver\" Lang\n\n"}