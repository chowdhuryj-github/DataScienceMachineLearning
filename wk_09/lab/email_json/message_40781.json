{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: [perl #43108] [PATCH] Getting Parrot compiled with C++ - Part one", "body": "On Friday 01 June 2007 16:51:18 Steve Peters wrote:\n\n> The attached patch gets Parrot partially compiles with C++ (g++ actually).\n> This work gets the compile going through the start of the imcc compiler.\n\nDanger!\n\nThe patch to src/stm/waitlist.c causes segfaults in t/stm/runtime.t, test 3:\n\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread -1230156912 (LWP 30260)]\n0xb7e02645 in alloc_entry (interp=0x8231358) at src/stm/waitlist.c:57\n57          assert(thr->entries[i]->head == NULL);\n(gdb) x thr\n0x8237700:      0x00000000\n(gdb) p thr\n$1 = (struct waitlist_thread_data *) 0x8237700\n\nThe patch to Parrot::Ops2c::Utils causes errors about multiple definitions of \n`core_numops' in interpreter.o and core_ops.o.\n\nThis patch to the CGP core:\n\n--- lib/Parrot/OpTrans/CGP.pm.  (revision 3741)\n+++ lib/Parrot/OpTrans/CGP.pm.  (local)\n@@ -68,7 +68,7 @@\n     return $pred_def . < $type */\n #  define opcode_to_prederef(i, op)   \\\\\n-     (void**) (op   - CONTEXT(i->ctx)->pred_offset)\n+     (opcode_t*) (op   - (opcode_t*)CONTEXT(i->ctx)->pred_offset)\n\n... causes segfaults for me in the shootout tests (probably because they run \nwith -jC).  If I remove the second cast from the line, the segfault goes \naway.\n\nI applied the rest as r18744.  Thanks!\n\n-- c\n\n"}