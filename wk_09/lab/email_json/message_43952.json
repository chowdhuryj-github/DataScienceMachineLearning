{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jra@samba.org", "subject": "svn commit: samba r23370 - in branches:\n\tSAMBA_3_0/source/lib/tdb/common SAMBA_3_0_25/source/tdb/common\n\tSAMBA_3_0_26/source/lib/tdb/common SAMBA_4_0/source/lib/tdb/common", "body": "Author: jra\nDate: 2007-06-07 00:00:45 +0000 (Thu, 07 Jun 2007)\nNew Revision: 23370\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23370\n\nLog:\nTraverse in tdb wasn't consistently using the\ntravlocks.lock_rw for lock read/write types, it\nwas sometimes using it (tdb_next_lock) and\nsometimes explicitly using F_WRLCK instead.\nChange this to consistently use travlocks.lock_rw\nonly.\nI'm pretty sure about this fix (else I woudn't\nbe checking this in :-) but tridge and Volker\nplease review.\nJeremy.\n\nModified:\n   branches/SAMBA_3_0/source/lib/tdb/common/traverse.c\n   branches/SAMBA_3_0_25/source/tdb/common/traverse.c\n   branches/SAMBA_3_0_26/source/lib/tdb/common/traverse.c\n   branches/SAMBA_4_0/source/lib/tdb/common/traverse.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/lib/tdb/common/traverse.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/tdb/common/traverse.c\t2007-06-06 16:13:14 UTC (rev 23369)\n+++ branches/SAMBA_3_0/source/lib/tdb/common/traverse.c\t2007-06-07 00:00:45 UTC (rev 23370)\n@@ -263,12 +263,15 @@\n \ttdb->travlocks.off = tdb->travlocks.hash = 0;\n \ttdb->travlocks.lock_rw = F_RDLCK;\n \n+\t/* Grab first record: locks chain and returns record. */\n \tif (tdb_next_lock(tdb, &tdb->travlocks, &rec) <= 0)\n \t\treturn tdb_null;\n \t/* now read the key */\n \tkey.dsize = rec.key_len;\n \tkey.dptr =tdb_alloc_read(tdb,tdb->travlocks.off+sizeof(rec),key.dsize);\n-\tif (tdb_unlock(tdb, BUCKET(tdb->travlocks.hash), F_WRLCK) != 0)\n+\n+\t/* Unlock the hash chain of the record we just read. */\n+\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0)\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_firstkey: error occurred while tdb_unlocking!\\n\"));\n \treturn key;\n }\n@@ -283,7 +286,7 @@\n \n \t/* Is locked key the old key?  If so, traverse will be reliable. */\n \tif (tdb->travlocks.off) {\n-\t\tif (tdb_lock(tdb,tdb->travlocks.hash,F_WRLCK))\n+\t\tif (tdb_lock(tdb,tdb->travlocks.hash,tdb->travlocks.lock_rw))\n \t\t\treturn tdb_null;\n \t\tif (tdb_rec_read(tdb, tdb->travlocks.off, &rec) == -1\n \t\t    || !(k = tdb_alloc_read(tdb,tdb->travlocks.off+sizeof(rec),\n@@ -294,7 +297,7 @@\n \t\t\t\tSAFE_FREE(k);\n \t\t\t\treturn tdb_null;\n \t\t\t}\n-\t\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, F_WRLCK) != 0) {\n+\t\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0) {\n \t\t\t\tSAFE_FREE(k);\n \t\t\t\treturn tdb_null;\n \t\t\t}\n@@ -306,7 +309,7 @@\n \n \tif (!tdb->travlocks.off) {\n \t\t/* No previous element: do normal find, and lock record */\n-\t\ttdb->travlocks.off = tdb_find_lock_hash(tdb, oldkey, tdb->hash_fn(&oldkey), F_WRLCK, &rec);\n+\t\ttdb->travlocks.off = tdb_find_lock_hash(tdb, oldkey, tdb->hash_fn(&oldkey), tdb->travlocks.lock_rw, &rec);\n \t\tif (!tdb->travlocks.off)\n \t\t\treturn tdb_null;\n \t\ttdb->travlocks.hash = BUCKET(rec.full_hash);\n@@ -317,19 +320,18 @@\n \t}\n \toldhash = tdb->travlocks.hash;\n \n-\t/* Grab next record: locks chain and returned record,\n+\t/* Grab next record: locks chain and returns record,\n \t   unlocks old record */\n \tif (tdb_next_lock(tdb, &tdb->travlocks, &rec) > 0) {\n \t\tkey.dsize = rec.key_len;\n \t\tkey.dptr = tdb_alloc_read(tdb, tdb->travlocks.off+sizeof(rec),\n \t\t\t\t\t  key.dsize);\n \t\t/* Unlock the chain of this new record */\n-\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, F_WRLCK) != 0)\n+\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0)\n \t\t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_nextkey: WARNING tdb_unlock failed!\\n\"));\n \t}\n \t/* Unlock the chain of old record */\n-\tif (tdb_unlock(tdb, BUCKET(oldhash), F_WRLCK) != 0)\n+\tif (tdb_unlock(tdb, BUCKET(oldhash), tdb->travlocks.lock_rw) != 0)\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_nextkey: WARNING tdb_unlock failed!\\n\"));\n \treturn key;\n }\n-\n\nModified: branches/SAMBA_3_0_25/source/tdb/common/traverse.c\n===================================================================\n--- branches/SAMBA_3_0_25/source/tdb/common/traverse.c\t2007-06-06 16:13:14 UTC (rev 23369)\n+++ branches/SAMBA_3_0_25/source/tdb/common/traverse.c\t2007-06-07 00:00:45 UTC (rev 23370)\n@@ -263,12 +263,15 @@\n \ttdb->travlocks.off = tdb->travlocks.hash = 0;\n \ttdb->travlocks.lock_rw = F_RDLCK;\n \n+\t/* Grab first record: locks chain and returns record. */\n \tif (tdb_next_lock(tdb, &tdb->travlocks, &rec) <= 0)\n \t\treturn tdb_null;\n \t/* now read the key */\n \tkey.dsize = rec.key_len;\n \tkey.dptr =tdb_alloc_read(tdb,tdb->travlocks.off+sizeof(rec),key.dsize);\n-\tif (tdb_unlock(tdb, BUCKET(tdb->travlocks.hash), F_WRLCK) != 0)\n+\n+\t/* Unlock the hash chain of the record we just read. */\n+\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0)\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_firstkey: error occurred while tdb_unlocking!\\n\"));\n \treturn key;\n }\n@@ -283,7 +286,7 @@\n \n \t/* Is locked key the old key?  If so, traverse will be reliable. */\n \tif (tdb->travlocks.off) {\n-\t\tif (tdb_lock(tdb,tdb->travlocks.hash,F_WRLCK))\n+\t\tif (tdb_lock(tdb,tdb->travlocks.hash,tdb->travlocks.lock_rw))\n \t\t\treturn tdb_null;\n \t\tif (tdb_rec_read(tdb, tdb->travlocks.off, &rec) == -1\n \t\t    || !(k = tdb_alloc_read(tdb,tdb->travlocks.off+sizeof(rec),\n@@ -294,7 +297,7 @@\n \t\t\t\tSAFE_FREE(k);\n \t\t\t\treturn tdb_null;\n \t\t\t}\n-\t\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, F_WRLCK) != 0) {\n+\t\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0) {\n \t\t\t\tSAFE_FREE(k);\n \t\t\t\treturn tdb_null;\n \t\t\t}\n@@ -306,7 +309,7 @@\n \n \tif (!tdb->travlocks.off) {\n \t\t/* No previous element: do normal find, and lock record */\n-\t\ttdb->travlocks.off = tdb_find_lock_hash(tdb, oldkey, tdb->hash_fn(&oldkey), F_WRLCK, &rec);\n+\t\ttdb->travlocks.off = tdb_find_lock_hash(tdb, oldkey, tdb->hash_fn(&oldkey), tdb->travlocks.lock_rw, &rec);\n \t\tif (!tdb->travlocks.off)\n \t\t\treturn tdb_null;\n \t\ttdb->travlocks.hash = BUCKET(rec.full_hash);\n@@ -317,19 +320,18 @@\n \t}\n \toldhash = tdb->travlocks.hash;\n \n-\t/* Grab next record: locks chain and returned record,\n+\t/* Grab next record: locks chain and returns record,\n \t   unlocks old record */\n \tif (tdb_next_lock(tdb, &tdb->travlocks, &rec) > 0) {\n \t\tkey.dsize = rec.key_len;\n \t\tkey.dptr = tdb_alloc_read(tdb, tdb->travlocks.off+sizeof(rec),\n \t\t\t\t\t  key.dsize);\n \t\t/* Unlock the chain of this new record */\n-\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, F_WRLCK) != 0)\n+\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0)\n \t\t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_nextkey: WARNING tdb_unlock failed!\\n\"));\n \t}\n \t/* Unlock the chain of old record */\n-\tif (tdb_unlock(tdb, BUCKET(oldhash), F_WRLCK) != 0)\n+\tif (tdb_unlock(tdb, BUCKET(oldhash), tdb->travlocks.lock_rw) != 0)\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_nextkey: WARNING tdb_unlock failed!\\n\"));\n \treturn key;\n }\n-\n\nModified: branches/SAMBA_3_0_26/source/lib/tdb/common/traverse.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/tdb/common/traverse.c\t2007-06-06 16:13:14 UTC (rev 23369)\n+++ branches/SAMBA_3_0_26/source/lib/tdb/common/traverse.c\t2007-06-07 00:00:45 UTC (rev 23370)\n@@ -263,12 +263,15 @@\n \ttdb->travlocks.off = tdb->travlocks.hash = 0;\n \ttdb->travlocks.lock_rw = F_RDLCK;\n \n+\t/* Grab first record: locks chain and returns record. */\n \tif (tdb_next_lock(tdb, &tdb->travlocks, &rec) <= 0)\n \t\treturn tdb_null;\n \t/* now read the key */\n \tkey.dsize = rec.key_len;\n \tkey.dptr =tdb_alloc_read(tdb,tdb->travlocks.off+sizeof(rec),key.dsize);\n-\tif (tdb_unlock(tdb, BUCKET(tdb->travlocks.hash), F_WRLCK) != 0)\n+\n+\t/* Unlock the hash chain of the record we just read. */\n+\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0)\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_firstkey: error occurred while tdb_unlocking!\\n\"));\n \treturn key;\n }\n@@ -283,7 +286,7 @@\n \n \t/* Is locked key the old key?  If so, traverse will be reliable. */\n \tif (tdb->travlocks.off) {\n-\t\tif (tdb_lock(tdb,tdb->travlocks.hash,F_WRLCK))\n+\t\tif (tdb_lock(tdb,tdb->travlocks.hash,tdb->travlocks.lock_rw))\n \t\t\treturn tdb_null;\n \t\tif (tdb_rec_read(tdb, tdb->travlocks.off, &rec) == -1\n \t\t    || !(k = tdb_alloc_read(tdb,tdb->travlocks.off+sizeof(rec),\n@@ -294,7 +297,7 @@\n \t\t\t\tSAFE_FREE(k);\n \t\t\t\treturn tdb_null;\n \t\t\t}\n-\t\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, F_WRLCK) != 0) {\n+\t\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0) {\n \t\t\t\tSAFE_FREE(k);\n \t\t\t\treturn tdb_null;\n \t\t\t}\n@@ -306,7 +309,7 @@\n \n \tif (!tdb->travlocks.off) {\n \t\t/* No previous element: do normal find, and lock record */\n-\t\ttdb->travlocks.off = tdb_find_lock_hash(tdb, oldkey, tdb->hash_fn(&oldkey), F_WRLCK, &rec);\n+\t\ttdb->travlocks.off = tdb_find_lock_hash(tdb, oldkey, tdb->hash_fn(&oldkey), tdb->travlocks.lock_rw, &rec);\n \t\tif (!tdb->travlocks.off)\n \t\t\treturn tdb_null;\n \t\ttdb->travlocks.hash = BUCKET(rec.full_hash);\n@@ -317,19 +320,18 @@\n \t}\n \toldhash = tdb->travlocks.hash;\n \n-\t/* Grab next record: locks chain and returned record,\n+\t/* Grab next record: locks chain and returns record,\n \t   unlocks old record */\n \tif (tdb_next_lock(tdb, &tdb->travlocks, &rec) > 0) {\n \t\tkey.dsize = rec.key_len;\n \t\tkey.dptr = tdb_alloc_read(tdb, tdb->travlocks.off+sizeof(rec),\n \t\t\t\t\t  key.dsize);\n \t\t/* Unlock the chain of this new record */\n-\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, F_WRLCK) != 0)\n+\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0)\n \t\t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_nextkey: WARNING tdb_unlock failed!\\n\"));\n \t}\n \t/* Unlock the chain of old record */\n-\tif (tdb_unlock(tdb, BUCKET(oldhash), F_WRLCK) != 0)\n+\tif (tdb_unlock(tdb, BUCKET(oldhash), tdb->travlocks.lock_rw) != 0)\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_nextkey: WARNING tdb_unlock failed!\\n\"));\n \treturn key;\n }\n-\n\nModified: branches/SAMBA_4_0/source/lib/tdb/common/traverse.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/common/traverse.c\t2007-06-06 16:13:14 UTC (rev 23369)\n+++ branches/SAMBA_4_0/source/lib/tdb/common/traverse.c\t2007-06-07 00:00:45 UTC (rev 23370)\n@@ -259,12 +259,15 @@\n \ttdb->travlocks.off = tdb->travlocks.hash = 0;\n \ttdb->travlocks.lock_rw = F_RDLCK;\n \n+\t/* Grab first record: locks chain and returns record. */\n \tif (tdb_next_lock(tdb, &tdb->travlocks, &rec) <= 0)\n \t\treturn tdb_null;\n \t/* now read the key */\n \tkey.dsize = rec.key_len;\n \tkey.dptr =tdb_alloc_read(tdb,tdb->travlocks.off+sizeof(rec),key.dsize);\n-\tif (tdb_unlock(tdb, BUCKET(tdb->travlocks.hash), F_WRLCK) != 0)\n+\n+\t/* Unlock the hash chain of the record we just read. */\n+\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0)\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_firstkey: error occurred while tdb_unlocking!\\n\"));\n \treturn key;\n }\n@@ -279,7 +282,7 @@\n \n \t/* Is locked key the old key?  If so, traverse will be reliable. */\n \tif (tdb->travlocks.off) {\n-\t\tif (tdb_lock(tdb,tdb->travlocks.hash,F_WRLCK))\n+\t\tif (tdb_lock(tdb,tdb->travlocks.hash,tdb->travlocks.lock_rw))\n \t\t\treturn tdb_null;\n \t\tif (tdb_rec_read(tdb, tdb->travlocks.off, &rec) == -1\n \t\t    || !(k = tdb_alloc_read(tdb,tdb->travlocks.off+sizeof(rec),\n@@ -290,7 +293,7 @@\n \t\t\t\tSAFE_FREE(k);\n \t\t\t\treturn tdb_null;\n \t\t\t}\n-\t\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, F_WRLCK) != 0) {\n+\t\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0) {\n \t\t\t\tSAFE_FREE(k);\n \t\t\t\treturn tdb_null;\n \t\t\t}\n@@ -302,7 +305,7 @@\n \n \tif (!tdb->travlocks.off) {\n \t\t/* No previous element: do normal find, and lock record */\n-\t\ttdb->travlocks.off = tdb_find_lock_hash(tdb, oldkey, tdb->hash_fn(&oldkey), F_WRLCK, &rec);\n+\t\ttdb->travlocks.off = tdb_find_lock_hash(tdb, oldkey, tdb->hash_fn(&oldkey), tdb->travlocks.lock_rw, &rec);\n \t\tif (!tdb->travlocks.off)\n \t\t\treturn tdb_null;\n \t\ttdb->travlocks.hash = BUCKET(rec.full_hash);\n@@ -313,19 +316,18 @@\n \t}\n \toldhash = tdb->travlocks.hash;\n \n-\t/* Grab next record: locks chain and returned record,\n+\t/* Grab next record: locks chain and returns record,\n \t   unlocks old record */\n \tif (tdb_next_lock(tdb, &tdb->travlocks, &rec) > 0) {\n \t\tkey.dsize = rec.key_len;\n \t\tkey.dptr = tdb_alloc_read(tdb, tdb->travlocks.off+sizeof(rec),\n \t\t\t\t\t  key.dsize);\n \t\t/* Unlock the chain of this new record */\n-\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, F_WRLCK) != 0)\n+\t\tif (tdb_unlock(tdb, tdb->travlocks.hash, tdb->travlocks.lock_rw) != 0)\n \t\t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_nextkey: WARNING tdb_unlock failed!\\n\"));\n \t}\n \t/* Unlock the chain of old record */\n-\tif (tdb_unlock(tdb, BUCKET(oldhash), F_WRLCK) != 0)\n+\tif (tdb_unlock(tdb, BUCKET(oldhash), tdb->travlocks.lock_rw) != 0)\n \t\tTDB_LOG((tdb, TDB_DEBUG_FATAL, \"tdb_nextkey: WARNING tdb_unlock failed!\\n\"));\n \treturn key;\n }\n-\n\n"}