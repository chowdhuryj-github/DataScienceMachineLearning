{"category": "ham", "to_address": "Dirk Eddelbuettel <edd@debian.org>", "from_address": "Ross Boylan <ross@biostat.ucsf.edu>", "subject": "Re: [R] random numbers", "body": "On Sat, 2007-06-30 at 14:50 -0500, Dirk Eddelbuettel wrote:\n> On 30 June 2007 at 12:12, Ross Boylan wrote:\n> | I call C++ code from R to generate simulated data.  I'm doing this on a\n> | cluster, and use rmpi and rsprng.  While rsprng randomizes R-level\n> | random numbers (e.g., from runif), it has no effect on the C code, which\n> | is completely SPRNG and MPI ignorant.\n> | \n> | Currently I generate a seed to pass into the C code, using\n> | as.integer(runif(1, max=.Machine$integer.max)-.Machine$integer.max/2)\n> | It seems to work.\n> | \n> | Any comments on this approach?  Here are some issues I see:\n> \n> I may be missing something but given that rsprng is running on your cluster,\n> you are bound to also have sprng itself -- so why don't you use that from C\n> or C++  for this purpose?\n> \n> Hth, Dirk\nDoing so would add considerable complexity, at least as far as I know.\n\nSometimes I run within an MPI session and sometimes not.  My\nunderstanding is that SPRNG will not work if MPI is absent.  I think\nsomeone on the SPRNG list told me that there wasn't a good way to handle\nthis at run-time.  Unfortunately, a lot of SPRNG options seem to be\ncompile-time settings.\n\nUsing SPRNG would also complicate my build process, as I'd need autoconf\nmagic to support it.\n\nPart of the issue is that I want something I can redistribute, not just\nsomething that will work for me on a  one-off basis.\n\nOne simple solution would be to build several versions of the library.\nA not so simple solution would be to build various random number\ngenerators as separate libraries, and dynamically load the appropriate\none.\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}