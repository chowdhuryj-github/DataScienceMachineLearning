{"category": "ham", "to_address": "\"OtherRecipients of perl Ticket #41386\": ;", "from_address": "\"Allison Randal via RT\" <parrotbug-followup@parrotcode.org>", "subject": "[perl #41386] MANIFEST must die. ", "body": "On Sun Feb 18 17:13:40 2007, coke wrote:\n> > If I'm understanding correctly:\n> >\n> > - MANIFEST indicates which files are to be in the distribution.\n> >\n> > - svn:ignore indicates which files in a build tree are to be\n> >   ignored as part of \"svn status\" and other svn commands.\n> >\n> > - MANIFEST.SKIP indicates the files in the repository (build tree?)\n> >   that are not part of the distribution -- i.e., not part of MANIFEST.\n\nAye.\n\nMANIFEST.SKIP is just a safeguard to prevent extraneous files from\nleaking into the distribution tarball. It may contain both files\ncommitted to the repository but not included in the distribution and\nfiles generated by the build process but not included in the distribution.\n\nSo, it doesn't entirely correspond to the svn:ignore property.\n\n> For the moment, disabling configure's manicheck by default would be a  \n> good start. This isn't something we need every developer wasting  \n> their time on given how we're using it right now; more of something  \n> that should be handled by the release manager.\n> \n> (How many times has the build been broken by a missing MANIFEST update?)\n\nI'd agree, but then we're likely to have developers bitten by files left\nout of the distribution because they forgot to include them in the\nMANIFEST. Requiring developers to explicitly note which checked in files\nare excluded from the MANIFEST is good housekeeping. This falls in a\ncategory of \"developer tests\" that don't need to be run by the users,\nbut do need to be run by the developers.\n\n> > I would like to get rid of MANIFEST.SKIP, however,\n\nIt serves a useful purpose, as a \"double accounting\" check.\n\n> > and I think\n> > we may not be using our tool (svn) to its full advantage.\n> > Brainstorming a bit ...  isn't it possible for us to define\n> > our own svn properties?  (I'm not all that familiar with this\n> > part of svn.) If yes, then can we just have a\n> > \"distribution:[yes|no]\" svn property that indicates files to be\n> > part of the distribution?\n> \n> \"coming soon\" to svn, not available yet.\n\nMaybe someday. For now we're stuck with a manual MANIFEST.\n\n\nAllison\n\n"}