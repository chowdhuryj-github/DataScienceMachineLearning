{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r22422 - in branches/SAMBA_4_0/source/lib/tdb: .\n\tcommon include tools", "body": "Author: tridge\nDate: 2007-04-21 07:25:40 +0000 (Sat, 21 Apr 2007)\nNew Revision: 22422\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22422\n\nLog:\n\nmerged tdb changes from ctdb\n\nModified:\n   branches/SAMBA_4_0/source/lib/tdb/autogen.sh\n   branches/SAMBA_4_0/source/lib/tdb/common/lock.c\n   branches/SAMBA_4_0/source/lib/tdb/common/tdb_private.h\n   branches/SAMBA_4_0/source/lib/tdb/include/tdb.h\n   branches/SAMBA_4_0/source/lib/tdb/tools/tdbtest.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/tdb/autogen.sh\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/autogen.sh\t2007-04-21 07:23:42 UTC (rev 22421)\n+++ branches/SAMBA_4_0/source/lib/tdb/autogen.sh\t2007-04-21 07:25:40 UTC (rev 22422)\n@@ -3,7 +3,7 @@\n rm -rf autom4te.cache\n rm -f configure config.h.in\n \n-IPATHS=\"-I libreplace -I lib/replace -I ../libreplace -I ../replace\"\n+IPATHS=\"-I libreplace -I lib/replace -I ../libreplace -I ../replace -I ../lib/replace\"\n autoconf $IPATHS || exit 1\n autoheader $IPATHS || exit 1\n \n\nModified: branches/SAMBA_4_0/source/lib/tdb/common/lock.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/common/lock.c\t2007-04-21 07:23:42 UTC (rev 22421)\n+++ branches/SAMBA_4_0/source/lib/tdb/common/lock.c\t2007-04-21 07:25:40 UTC (rev 22422)\n@@ -105,7 +105,7 @@\n \n \n /* lock a list in the database. list -1 is the alloc list */\n-int tdb_lock(struct tdb_context *tdb, int list, int ltype)\n+static int _tdb_lock(struct tdb_context *tdb, int list, int ltype, int op)\n {\n \tstruct tdb_lock_type *new_lck;\n \tint i;\n@@ -158,10 +158,8 @@\n \n \t/* Since fcntl locks don't nest, we do a lock for the first one,\n \t   and simply bump the count for future ones */\n-\tif (tdb->methods->tdb_brlock(tdb,FREELIST_TOP+4*list,ltype,F_SETLKW,\n+\tif (tdb->methods->tdb_brlock(tdb,FREELIST_TOP+4*list,ltype, op,\n \t\t\t\t     0, 1)) {\n-\t\tTDB_LOG((tdb, TDB_DEBUG_ERROR, \"tdb_lock failed on list %d \"\n-\t\t\t \"ltype=%d (%s)\\n\",  list, ltype, strerror(errno)));\n \t\treturn -1;\n \t}\n \n@@ -175,6 +173,25 @@\n \treturn 0;\n }\n \n+/* lock a list in the database. list -1 is the alloc list */\n+int tdb_lock(struct tdb_context *tdb, int list, int ltype)\n+{\n+\tint ret;\n+\tret = _tdb_lock(tdb, list, ltype, F_SETLKW);\n+\tif (ret) {\n+\t\tTDB_LOG((tdb, TDB_DEBUG_ERROR, \"tdb_lock failed on list %d \"\n+\t\t\t \"ltype=%d (%s)\\n\",  list, ltype, strerror(errno)));\n+\t}\n+\treturn ret;\n+}\n+\n+/* lock a list in the database. list -1 is the alloc list. non-blocking lock */\n+int tdb_lock_nonblock(struct tdb_context *tdb, int list, int ltype)\n+{\n+\treturn _tdb_lock(tdb, list, ltype, F_SETLK);\n+}\n+\n+\n /* unlock the database: returns void because it's too late for errors. */\n \t/* changed to return int it may be interesting to know there\n \t   has been an error  --simo */\n@@ -351,6 +368,14 @@\n \treturn tdb_lock(tdb, BUCKET(tdb->hash_fn(&key)), F_WRLCK);\n }\n \n+/* lock/unlock one hash chain, non-blocking. This is meant to be used\n+   to reduce contention - it cannot guarantee how many records will be\n+   locked */\n+int tdb_chainlock_nonblock(struct tdb_context *tdb, TDB_DATA key)\n+{\n+\treturn tdb_lock_nonblock(tdb, BUCKET(tdb->hash_fn(&key)), F_WRLCK);\n+}\n+\n int tdb_chainunlock(struct tdb_context *tdb, TDB_DATA key)\n {\n \treturn tdb_unlock(tdb, BUCKET(tdb->hash_fn(&key)), F_WRLCK);\n\nModified: branches/SAMBA_4_0/source/lib/tdb/common/tdb_private.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/common/tdb_private.h\t2007-04-21 07:23:42 UTC (rev 22421)\n+++ branches/SAMBA_4_0/source/lib/tdb/common/tdb_private.h\t2007-04-21 07:25:40 UTC (rev 22422)\n@@ -206,7 +206,7 @@\n \t\t\t   struct list_struct *rec);\n void tdb_io_init(struct tdb_context *tdb);\n int tdb_expand(struct tdb_context *tdb, tdb_off_t size);\n-int tdb_rec_free_read(struct tdb_context *tdb, tdb_off_t off,\n-\t\t      struct list_struct *rec);\n+int rec_free_read(struct tdb_context *tdb, tdb_off_t off,\n+\t\t  struct list_struct *rec);\n \n \n\nModified: branches/SAMBA_4_0/source/lib/tdb/include/tdb.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/include/tdb.h\t2007-04-21 07:23:42 UTC (rev 22421)\n+++ branches/SAMBA_4_0/source/lib/tdb/include/tdb.h\t2007-04-21 07:25:40 UTC (rev 22422)\n@@ -134,6 +134,7 @@\n \n /* Low level locking functions: use with care */\n int tdb_chainlock(struct tdb_context *tdb, TDB_DATA key);\n+int tdb_chainlock_nonblock(struct tdb_context *tdb, TDB_DATA key);\n int tdb_chainunlock(struct tdb_context *tdb, TDB_DATA key);\n int tdb_chainlock_read(struct tdb_context *tdb, TDB_DATA key);\n int tdb_chainunlock_read(struct tdb_context *tdb, TDB_DATA key);\n\nModified: branches/SAMBA_4_0/source/lib/tdb/tools/tdbtest.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/tdb/tools/tdbtest.c\t2007-04-21 07:23:42 UTC (rev 22421)\n+++ branches/SAMBA_4_0/source/lib/tdb/tools/tdbtest.c\t2007-04-21 07:25:40 UTC (rev 22422)\n@@ -214,7 +214,7 @@\n \tkey.dptr = keys[3];\n \ttdb_delete(db, key);\n }\n-\t\n+\n  int main(int argc, const char *argv[])\n {\n \tint i, seed=0;\n\n"}