{"category": "ham", "to_address": "beginners@perl.org, perl-beginners@moderators.isc.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: did I get greedy quantifiers wrong ?", "body": "On May 31, 10:15 am, sharan.basa...@gmail.com (Sharan Basappa) wrote:\n> Thanks a lot Paul ..\n>\n> For this rule :\n> $str = mississippi;\n> $str =~ m/m(.*i)(.*pi)/;\n>\n> My initial understanding was that .*i would match all the way till last char i.\n\n> This would indeed be true if .*i was not followed by .*pi.\n\n> Do you agree ?\n\nYes.  Like you said initially - a regexp quantifier will match as much\nas possible WITHOUT PREVENING THE MATCH FROM SUCEEDING.  If the .*i\nmatched all the way up until the very last i, then the .*pi would fail\nbecause there'd be nothing left to match.\n\nFWIW, you can add:\nuse re 'debug';\nto the top of your script to see exactly what Perl does when trying to\nmatch a regexp.  You'll see in this case that it first tries to\nlet .*i match all the way to the end, but then finds that .*pi now\nfails, so it backtracks, letting the .* part of .*i match less and\nless until .*pi can also match.\n\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}