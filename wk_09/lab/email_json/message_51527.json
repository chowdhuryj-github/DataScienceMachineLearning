{"category": "ham", "to_address": "\"Speakup is a screen review system for Linux.\" <speakup@braille.uwo.ca>", "from_address": "\"W. Nick Dotson\" <nickdotson@bellsouth.net>", "subject": "Re: Speakup in userspace", "body": "Wow!  If I had you here as my mentor, I could learn that Linux stuff.  That just had to be the neatest bit of technical explanation I read in aeons...  I saved it \nin my Linux docs folder on my Windows machine...  (grin)\n\nNick\n\nOn Wed, 20 Jun 2007 13:53:35 -0500, Spie Sutherland wrote:\n\n Consider the linux that most of use to be a \"protected mode\" \n operating system as opposed to \"real mode\". Protected mode\n allows access to things like virtual memory, multi-threading, \n and priviledge levels not available in real mode. Protected \n mode has been the standard on x86 PCs since the 80286.\n\n A protected mode system segregates virtual memory into \n kernel space and user space. Kernel space is strictly reserved\n for running the kernel, device drivers, and kernel extensions.\n It is usually the case that kernel space memory is not swapped\n to disk since that is much slower, which user space memory \n can be swapped to disk.\n\n User space or \"userland\" processes cannot access the memory\n of other processes, the basis of memory protection which \n makes linux very stable. Prior to win2k, the windows os was \n not a protected memory system, hence the freezing up or \n crashing of whole system from one bug in one driver or app.\n A user space process, although restricted in memory access,\n can request the kernel to map part of its memory onto its own\n space, and can also access shared memory. \n\n The kernel space is the direct hardware access space along\n with the management software that controls virtual memory,\n DMA, threads, processes, etc. You have kernel processes \n and user processes. The kernel processes are supposed to \n be basic things like the direct interface to hardware. User\n space is where applications run. So there is kernel space \n memory, threads, and processes, and user space memory, \n threads, and processes. \n\n Consider ALSA sound as an example. It's in the kernel but\n it's also not in the kernel. There are kernel drivers and there\n are user space libraries. The alsa-lib delegates sound control\n to user space. This allows application developers to do all \n kinds of things without touching kernel code. The alsa-lib \n provides various functionality like software mixing, support\n for the older OSS API, and user specific configuration, and\n it is multi-thread safe, essential for complex audio programs.\n\n Alsa may not be the best example, but the idea is separating\n the core functionality from the application layer. Let's say I\n create an API for writing text to a speech synth. The code \n that actually talks to the synth would ideally be abstracted \n from the API such that the identical programming interface\n works for any synth using any protocol like serial or usb.\n Some hardware may not implement all parts of the API but\n where there are same functions the API should look the \n same. An example of a very well abstracted API is the \n Java API. It had to be done that way in order to make the\n programs portable on different systems. I may be biased \n because I used to work there, but if you look at how much\n work was done on abstraction it's the most impressively \n abstracted API around. I'm not talking about javascript, \n that's like a virus hehe. Unfortunately Sun wanted Java to \n be the answer to everything everywhere which it is not and\n will never be, and Java, like many good ideas, has become\n overly bloated and complex, although at least the various \n parts of it are separate APIs, and the compact versions \n like J2ME are still very efficient. They run on almost all \n phones now. There is a good reason for this. I wrote some\n apps on blackberry and it was a breeze to do so. Compared\n with doing it in C or ASM it's an entirely different world.\n\n   -- Spie\n\n _______________________________________________\n Speakup mailing list\n Speakup@braille.uwo.ca\n http://speech.braille.uwo.ca/mailman/listinfo/speakup\n\n\n\n\n\n\n_______________________________________________\nSpeakup mailing list\nSpeakup@braille.uwo.ca\nhttp://speech.braille.uwo.ca/mailman/listinfo/speakup\n\n"}