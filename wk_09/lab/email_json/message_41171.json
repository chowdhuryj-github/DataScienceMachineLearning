{"category": "ham", "to_address": "simo <idra@samba.org>", "from_address": "Jeremy Allison <jra@samba.org>", "subject": "Re: svn commit: samba r23290 - in\n\tbranches:\tSAMBA_3_0/source/nsswitch SAMBA_3_0_26/source/nsswitch", "body": "On Sat, Jun 02, 2007 at 09:53:20AM -0400, simo wrote:\n> \n> I am sorry to contradict you Jeremy, but it is not a matter of taste.\n> If you alloc all array children on the array, then if you want to\n> steal/move/free the array, you have to care _only_ about the array\n> pointer. You don;t risk leaving behind children on the wrong context,\n> and maybe have them freed while you are still keeping around the parent.\n\nThat's a very good point, and one I hadn't considered.\nThanks for setting me straight on this.\n\nI must confess I do find the \"invisible heirarchy\"\nof talloc extremely confusing. At least in C++\nheirarchy are explicitly declared.\n\n> talloc_steal/talloc_move are the reasons to not alloc everything on the\n> generic mem_ctx, but to build memory hierarchies that reflect structure\n> hierarchies :)\n\nIndeed, but I wish there was a way to express this in\nthe definitions. I guess if you're careful the structure\ndefinition can be used here, but definitions aren't\nalways so clear.\n\nJeremy.\n\n"}