{"category": "ham", "to_address": "p6l <perl6-language@perl.org>", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: [S03] Negation metaoperator", "body": "On Thu, Apr 05, 2007 at 11:07:12PM -0700, Jonathan Lang wrote:\n: Generalize the negated relational operators to apply to any infix\n: operator that returns a boolean.  In terms of the standard operators,\n: this will add <&& || ^^ // and or xor err> to the family that is\n: implicitly equipped with logical negations.\n\nThis will not fly, I'm afraid.  These relationals are not typed to\nreturn Bool, but rather Any.  They work only because all normal values\ndo the boolean and defined roles, and the operator happens to evaluate\none or more of its Any values for its boolean or defined sense.\nBut the return value is one or another of the Any values (apart from\nthe XORs, which do at least return False unless only one of the Anys\nis true, in which case you still get an Any).\n\nSo basically, either we'd have to pick and choose by precedence level\nwhich infix operators allow meta-!, or open it up to all infix.  That\ncould get a little strange:\n\n    $a = $b !but $c;\n\nThough one odd operator that might actually be useful is\n\n    $a = $b !% $c;\t# short for $a = $b % $c == 0\n\nI doubt that would turn out to be a Best Practice though, and in\ngeneral even negated logicals are not going to be terribly useful\nin reduce.  So I'm not inclined to change anything currently.\n\nLarry\n\n"}