{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Mark Glines <mark@glines.org>", "subject": "Re: [perl #43219] segfault in tcl", "body": "On Thu, 14 Jun 2007 19:10:02 -0700\nWill Coleda (via RT)  wrote:\n\n> # New Ticket Created by  Will Coleda \n> # Please include the string:  [perl #43219]\n> # in the subject line of all future correspondence about this issue. \n> # \n> \n> \n> With recent updates, tcl suite is MUCH faster, but is now\n> segfaulting in several places. No clue when it last worked.\n\nI poked around a bit in gdb.  I don't have any answers or patches, but\nhopefully a little more information will be helpful.\n\nIn Parrot_get_HLL_id, between the 31st and 32nd calls to this function,\nthe string memory for the \"name\" string, from the \"name_pmc\" PMC, is\nfreed.  The string pointer is not updated.  So, the next time around,\nsegfault.\n\n\nBreakpoint 2, Parrot_get_HLL_id (interp=0x804e008, hll_name=0xb591ebb8) at src/hll.c:191\n191         PMC * const hll_info = interp->HLL_info;\n(gdb) next 7\n207               if (!string_equal(interp, name, hll_name))\n(gdb) print name->strstart\n$28 = 0xb5607b00 \"106\"\n(gdb) cont\nContinuing.\n\nBreakpoint 2, Parrot_get_HLL_id (interp=0x804e008, hll_name=0xb591e930) at src/hll.c:191\n191         PMC * const hll_info = interp->HLL_info;\n(gdb) next 7\n207               if (!string_equal(interp, name, hll_name))\n(gdb) print name->strstart\n$29 = 0xb5607b00 \n(gdb) next\nProgram received signal SIGSEGV, Segmentation fault.\n0xb6e4824c in memcmp () from /lib/libc.so.6\n\n\nNote the pointer value is the same; the first time it's valid and the\nstring is displayed.  The second time, it's \"out of bounds\".\n\n\nValgrind has some very interesting things to say about this test\nscript, including lots of undefined data warnings, lots of accesses \noutside of allocated ranges, and also such gems as \"definitely lost:\n1,476,179 bytes in 13,925 blocks\".  But most importantly, it tells us\nwhat freed the memory:\n\n==4825== Invalid read of size 1\n==4825==    at 0x4023080: bcmp (in /usr/lib/valgrind/x86-linux/vgpreload_memcheck.so)\n==4825==    by 0x42632F6: ascii_compare (ascii.c:219)\n==4825==    by 0x41E28B9: string_equal (string.c:1305)\n==4825==    by 0x422FEEF: Parrot_get_HLL_id (hll.c:207)\n==4825==    by 0x422FB1C: Parrot_register_HLL (hll.c:134)\n==4825==    by 0x4315F83: yyparse (imcc.y:525)\n==4825==    by 0x43208FF: compile_string (imcc.l:1153)\n==4825==    by 0x4332752: imcc_compile (parser_util.c:641)\n==4825==    by 0x4332A12: imcc_compile_pir_ex (parser_util.c:751)\n==4825==    by 0x423BEA5: pcf_P_Jt (nci.c:2642)\n==4825==    by 0x429457B: Parrot_NCI_invoke (nci.pmc:163)\n==4825==    by 0x427CBE2: Parrot_Compiler_invoke (compiler.pmc:38)\n==4825==  Address 0x7CF1DAC is 1,432,964 bytes inside a block of size 1,945,416 free'd\n==4825==    at 0x40214AC: free (in /usr/lib/valgrind/x86-linux/vgpreload_memcheck.so)\n==4825==    by 0x41D794C: mem__internal_free (memory.c:200)\n==4825==    by 0x426242A: compact_pool (resources.c:421)\n==4825==    by 0x4261F5A: mem_allocate (resources.c:147)\n==4825==    by 0x4262A3D: Parrot_allocate_string (resources.c:724)\n==4825==    by 0x41E1888: string_make_direct (string.c:647)\n==4825==    by 0x41E1DA1: string_concat (string.c:899)\n==4825==    by 0x41E1489: string_append (string.c:439)\n==4825==    by 0x43013B6: Parrot_scalar_i_concatenate_str (scalar.pmc:1182)\n==4825==    by 0x4257343: mmd_dispatch_v_ps (mmd.c:456)\n==4825==    by 0x41119C6: Parrot_infix_ic_p_s (math.ops:74)\n==4825==    by 0x41E6026: runops_slow_core (runops_cores.c:184)\n\n\nI don't know *why* it was freed, but at least that tells us *where*.\nAnd parrot -G runs great, of course.\n\nMark\n\n"}