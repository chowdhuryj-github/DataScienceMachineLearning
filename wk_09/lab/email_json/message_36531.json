{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 351: paranoid checks for bad packets in tcp layer. Close the\n\tsocket if it gets a bad packet in http://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 351\nrevision-id: tridge@samba.org-20070526063232-f11jm7mw39jlmq8o\nparent: tridge@samba.org-20070526044612-v0alyob7oxnvdun3\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Sat 2007-05-26 16:32:32 +1000\nmessage:\n  paranoid checks for bad packets in tcp layer. Close the socket if it gets a bad packet\nmodified:\n  common/ctdb.c                  ctdb.c-20061127094323-t50f58d65iaao5of-2\n  tcp/tcp_io.c                   tcp_io.c-20061128004937-x70q1cu5xzg5g2tm-3\n=== modified file 'common/ctdb.c'\n--- a/common/ctdb.c\t2007-05-25 07:04:13 +0000\n+++ b/common/ctdb.c\t2007-05-26 06:32:32 +0000\n@@ -347,26 +347,6 @@\n \n \tctdb->status.node_packets_recv++;\n \n-\tif (length < sizeof(*hdr)) {\n-\t\tctdb_set_error(ctdb, \"Bad packet length %u\\n\", length);\n-\t\treturn;\n-\t}\n-\tif (length != hdr->length) {\n-\t\tctdb_set_error(ctdb, \"Bad header length %u expected %u\\n\", \n-\t\t\t       hdr->length, length);\n-\t\treturn;\n-\t}\n-\n-\tif (hdr->ctdb_magic != CTDB_MAGIC) {\n-\t\tctdb_set_error(ctdb, \"Non CTDB packet rejected\\n\");\n-\t\treturn;\n-\t}\n-\n-\tif (hdr->ctdb_version != CTDB_VERSION) {\n-\t\tctdb_set_error(ctdb, \"Bad CTDB version 0x%x rejected\\n\", hdr->ctdb_version);\n-\t\treturn;\n-\t}\n-\n \t/* up the counter for this source node, so we know its alive */\n \tif (ctdb_validate_vnn(ctdb, hdr->srcnode)) {\n \t\t/* as a special case, redirected calls don't increment the rx_cnt */\n\n=== modified file 'tcp/tcp_io.c'\n--- a/tcp/tcp_io.c\t2007-04-28 09:35:49 +0000\n+++ b/tcp/tcp_io.c\t2007-05-26 06:32:32 +0000\n@@ -34,38 +34,48 @@\n void ctdb_tcp_read_cb(uint8_t *data, size_t cnt, void *args)\n {\n \tstruct ctdb_incoming *in = talloc_get_type(args, struct ctdb_incoming);\n-\tstruct ctdb_req_header *hdr;\n+\tstruct ctdb_req_header *hdr = (struct ctdb_req_header *)data;\n \n \tif (data == NULL) {\n \t\t/* incoming socket has died */\n-\t\ttalloc_free(in);\n-\t\treturn;\n+\t\tgoto failed;\n \t}\n \n \tif (cnt < sizeof(*hdr)) {\n-\t\tctdb_set_error(in->ctdb, \"Bad packet length %u\\n\", (unsigned)cnt);\n-\t\treturn;\n-\t}\n-\thdr = (struct ctdb_req_header *)data;\n+\t\tDEBUG(0,(__location__ \" Bad packet length %u\\n\", (unsigned)cnt));\n+\t\tgoto failed;\n+\t}\n+\n+\tif (cnt & (CTDB_TCP_ALIGNMENT-1)) {\n+\t\tDEBUG(0,(__location__ \" Length 0x%x not multiple of alignment\\n\", cnt));\n+\t\tgoto failed;\n+\t}\n+\n+\n \tif (cnt != hdr->length) {\n-\t\tctdb_set_error(in->ctdb, \"Bad header length %u expected %u\\n\", \n-\t\t\t       (unsigned)hdr->length, (unsigned)cnt);\n-\t\treturn;\n+\t\tDEBUG(0,(__location__ \" Bad header length %u expected %u\\n\", \n+\t\t\t (unsigned)hdr->length, (unsigned)cnt));\n+\t\tgoto failed;\n \t}\n \n \tif (hdr->ctdb_magic != CTDB_MAGIC) {\n-\t\tctdb_set_error(in->ctdb, \"Non CTDB packet rejected\\n\");\n-\t\treturn;\n+\t\tDEBUG(0,(__location__ \" Non CTDB packet 0x%x rejected\\n\", \n+\t\t\t hdr->ctdb_magic));\n+\t\tgoto failed;\n \t}\n \n \tif (hdr->ctdb_version != CTDB_VERSION) {\n-\t\tctdb_set_error(in->ctdb, \"Bad CTDB version 0x%x rejected\\n\", hdr->ctdb_version);\n-\t\treturn;\n+\t\tDEBUG(0, (__location__ \" Bad CTDB version 0x%x rejected\\n\", \n+\t\t\t  hdr->ctdb_version));\n+\t\tgoto failed;\n \t}\n \n-\t/* most common case - we got a whole packet in one go\n-\t   tell the ctdb layer above that we have a packet */\n+\t/* tell the ctdb layer above that we have a packet */\n \tin->ctdb->upcalls->recv_pkt(in->ctdb, data, cnt);\n+\treturn;\n+\n+failed:\n+\ttalloc_free(in);\n }\n \n /*\n\n"}