{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: Stuck on a hash referrence, kinda", "body": "Mathew Snyder wrote:\n> \n> yaron@kahanovitch.com wrote:\n>>\n>> Mathew Snyder wrote:\n>>>\n>>> A subroutine I'm working on takes two hash references.  The hashes are each\n>>> actually a HoH.\n>>>\n>>> timesheet(\\%opsTotal, \\%opsEnvTotal);\n>>>\n>>> The problem I'm having is that I need to look past the first hash and into the\n>>> second for the existence of a particular key.  I'm not sure how to go about\n>>> doing this.\n>>>\n>>> sub timesheet {\n>>>   my ($dept, $env) = @_;\n>>>\n>>> #This is where I need help.  'user' is in the second hash but I'm not sure how\n>>> #to get past the first one.  Should I use a foreach and step through each key?\n>>>   if (exists $dept->{user}) {\n>>>     open TIMESHEET, \">/work_reports/user/ops_timesheet_weekof_$endDate.txt\";\n>>>   }else{\n>>>     open TIMESHEET, \">/work_reports/user/eng_timesheet_weekof_$endDate.txt\";\n>>>   }\n>>>\n>>>   print TIMESHEET \"Timesheet for $startDate to $endDate\\n\\n\\n\";\n>>>\n>>>   foreach my $environ (sort keys %$dept) {\n>>>     #Print the header for our data\n>>>     print TIMESHEET \"$environ\", \"\\n\";\n>>>     printf TIMESHEET \"%10s%8s\\n\", \"User\", \"hh:mm\";\n>>>     print TIMESHEET (\"-\" x 30);\n>>>     print TIMESHEET \"\\n\";\n>>>     foreach my $name (sort keys %{ $dept->{$environ} }) {\n>>>       printf TIMESHEET \"%10s%8s\\n\", \"$name\", \"$dept->{$environ}->{$name}\";\n>>>     }\n>>>     printf TIMESHEET (\"-\" x 30);\n>>>     print  TIMESHEET \"\\n\";\n>>>     printf TIMESHEET \"%18s\\n\\n\", \"$env->{$environ}\";\n>>>   }\n>>>   close TIMESHEET;\n>>> }\n>>\n>> I am not sure that I understand your problem.\n>> In General if you want to check the existence of the key \"user\" in the first hash, you can use the following\n>>  if ($dept and exists($dept->{user}){ ....}else{....}\n>>\n>> Hope that helps\n> \n> To make this even more tricky, if the user shows up in even one of the second\n> hashes the whole %$dept hash is affected.\n> \n> We have $dept{customer}{user}\n>         $dept{customer}{user1}\n>         $dept{customer1}{user}\n>   $dept{customer1{user1}\n>   $dept{customer2}{user}\n> \n> So, even though user2 isn't found in either customer's or customer1's hashes,\n> its existence in customer2's hash means that all work will be done on the\n> preceding two hashes as well.\n\nHi Mathew\n\n(Please bottom-post your replies, so that extended threads can remain comprehensible.\nThanks.)\n\nI think you have a less-than optimal solution at present. You need to express the\nproblem more clearly and, once that is done, a solution will present itself. You\nmention the user2 key, but there is no such key in your data and I am not at all\nsure what your criteria are.\n\nHere's how I understand your data. In $dept you have a reference to a hash with a\nnumber of customer names as keys and further hash references as values. You need to\ncheck whether a particular user exists as a key to any of the secondary hashes. Am\nI close?\n\nIf you loop over all the values of the %$dept hash, you will be able to check\nwhether the user exists in any of the secondary hashes, like this:\n\n  my $user;\n  foreach my $data (values %$dept) {\n    $user++ if exists $data-{user};\n  }\n\nand now you can write\n\n  if ($user) {\n    :\n  }\n\nis that close to what you need?\n\nThe foreach loop can be written more concisely as\n\n  my $user = grep exists $_->{user}, values %$dept;\n\nPlease let us now how your problem deviates from this guess.\n\nHTH,\n\nRob\n\n  \n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}