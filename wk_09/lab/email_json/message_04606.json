{"category": "ham", "to_address": "beginners perl <beginners@perl.org>", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: Enum", "body": "yitzle wrote:\n> \n> Rob Dixon wrote:\n>> \n>> yitzle wrote:\n>>>\n>>> Don't shoot me!\n>>> I can't find enum on the perldocs. Perl does have an enum, right?\n>>> How do I go about making an enum? I basically want a bunch of\n>>> variables to equal subsequent values, eg 0, 1, 2, ...\n>> \n>> Perl doesn't provide enum natively. But it's a solution to a\n>> problem, so perhaps\n>> you ought to tell us what the problem is instead of trying to\n>> implement a C solution?\n>\n> The \"problem\" is thus.\n> I an reading in data and using split to get it to an array.\n> Each element/column has a specific meaning, eg firstName, lastName etc\n> Rather than using [0], [1] I figured I could set up an enum($firstName, \n> $lastName, etc)\n> I suppose the alternative is to define (constant or variable) each index \n> name manually.\n> Hm... Stupid me :)\n> \n>   ($firstName, $lastName, etc) = (1 .. x);\n> \n> Close enough to the enum :D (unless I messed up the range notation).\n> I guess that solves it.\n\nBANG!\n\nThere's no need to assign names to array indices when you have Perl's hash\nstructure. Suppose your data is tab-separated, you could write:\n\nmy @data;\n\nwhile (<>) {\n  my %record;\n  @record{qw(firstName lastName field3 field4)} = split /\\t/;\n  push @data, \\%record;\n}\n\nor something similar. No need for C in a Perl program.\n\nHTH,\n\nRob\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}