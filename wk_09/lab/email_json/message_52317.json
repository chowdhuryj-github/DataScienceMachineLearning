{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Smylers <Smylers@stripey.com>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Mark Overmeer writes:\n\n> * Jonathan Scott Duff (duff@pobox.com) [070616 20:15]:\n> \n> > You mention OOP.  For Perl 5 we have a standard, if very general,\n> > syntax and \"open\" semantics that have allowed people to implement\n> > OOP in a variety of ways.  This was all well and good for a while\n> > until we realized that there should be some more reasonable defaults\n> > (in both syntax and semantics) for common operations in OOP.\n> \n> OOP in Perl5 has a mechanism, but not a standard in the use of those\n> features.  Full OO languages all choose a direction, but there are\n> serious culture differences.  Perl uses them all.  There are many ways\n> how to instantiate an object, which is lot of fun as programmer but a\n> hassle for \"the average\" programmer.  Within one program, you may very\n> well need to use different instantiation techniques...  Of course,\n> this could have been forseen (perl is not the first language which\n> implements OO), and some advice on the convention to use could have\n> avoided wild collection of approaches we see now.\n\nBut if this had been \"forseen\" and restrictions put in place, then we\nwouldn't have had the recent advances in things like inside-out objects\nand MOP.  The flexibility and people doing different things allowed for\nexperimentation, and where those experiments were successful new ideas\ngained community mindshare very quickly.\n\n> This is also why \"Perl Best Practices\" is a good book [shameless plug]\n\nIndeed.  But it doesn't need to be part of the Perl core.\n\n> although I would have welcomed it 11 years earlier.\n\nBut it extols many practices which weren't thought of 11 years\npreviously!  Hence the need for flexibility, so as to allow time to\ninvent them ...\n\n> > I think it's the same thing with POD6. It's \"open\" enough that many\n> > documentation systems can be built from it (man pages, books,\n> > magazines, wikis, etc.) For some of those documentation systems\n> > we'll have nice conventions and other conventions will grow as\n> > needed. If we find that convention isn't enough in specific areas,\n> > ...\n> \n> Without any doubt, there are thousands of documentation systems\n> around.  At least ten percent of them are considered \"the best ever\n> made\" by its developer or developer community.  Just by simple math,\n> the chance that the system developed really is the best is less than\n> one percent.\n\nQuite so -- which is why in my previous mail I thought it was\nshortsighted to think we can create something now which we won't later\nwant to change.\n\n> IMO, any argument that POD6 is good because it can be used to write\n> books or express complex mathematical expressions is really frightning\n> me.\n\nPOD (as in the version with Perl 5) wasnt designed for writing books or\nwhatever, yet people liked it enough they took it in directions that\nnobody first expected.  There's a good chance of that happening with Pod\n6, even if it isn't an aim.\n\n> Every single complication added to the doc syntax will make it not to\n> understand for a large percentage of the primar target community, as\n> every teacher can tell you from experience.\n\nYou could say the same thing about Perl 6 (or even earlier versions),\nyet we cope, partly by ensuring that you don't need to learn all of it\nin order to be able to use it.  (In the case of Pod one of the things\nthat helps is its large overlap with plain text.)\n\n> When I create a program, it starts with a goal.  To reach that goal, I\n> have to write some code, some docs, some tests.  For me, it is all\n> part of the program.  I do not see one to be of more importance than\n> the other: all three are first-class sitizens in my program.\n\nTesting is another area which has had immense progress since the release\nof Perl 5.  Look at where Test::More, Test::Class, TAP::Parser and so on\nare now; we certainly wouldn't want to be restricted to a standard of\nbest practices in testing from the early 1990s.\n\nSmylers\n\n"}