{"category": "ham", "to_address": "Marco Pesenti Gritti <mpg@redhat.com>", "from_address": "Bert Freudenberg <bert@freudenbergs.de>", "subject": "Re: [sugar] #1560 NORM Trial-2: Activity launch not detected", "body": "\nOn Jun 4, 2007, at 18:51 , Marco Pesenti Gritti wrote:\n\n> Bert Freudenberg wrote:\n>> On Jun 4, 2007, at 16:41 , Marco Pesenti Gritti wrote:\n>>\n>>> Bert Freudenberg wrote:\n>>>> On Jun 3, 2007, at 18:01 , Zarro Boogs per Child wrote:\n>>>>\n>>>>> #1560: Activity launch not detected\n>>>>> --------------------- \n>>>>> +------------------------------------------------------\n>>>>>   Reporter:  bert    |       Owner:  dcbw\n>>>>>       Type:  defect  |      Status:  reopened\n>>>>>   Priority:  normal  |   Milestone:  Trial-2\n>>>>>  Component:  sugar   |     Version:\n>>>>> Resolution:          |    Keywords:\n>>>>>   Verified:  0       |\n>>>>> --------------------- \n>>>>> +------------------------------------------------------\n>>>>> Comment (by marco):\n>>>>>\n>>>>>  This should be fixed again in the latest git. Activity id and  \n>>>>> bundle id\n>>>>>  should now be provided by two properties of the toplevel X  \n>>>>> window.\n>>>>>\n>>>>>  _SUGAR_ACTIVITY_ID (utf8 string)\n>>>>>  _SUGAR_BUNDLE_ID (utf8 string)\n>>>>>\n>>>>>  sugar/lib/sugar-x11-util.c has the code which we use to set those\n>>>>>  properties for python activities.\n>>>>\n>>>> This only complicates matters. Not only for Etoys (which does  \n>>>> not have a way to set X properties currently), but I see you had  \n>>>> to resort to C code even for Python activities. I'd much prefer  \n>>>> if the only thing Sugar cares about an activity X-wise is its  \n>>>> window ID (and we're working on a way to make that accessible in  \n>>>> Squeak). Everything else should be handled by DBus, and this is  \n>>>> how it actually was before your refactoring. If anything I'd  \n>>>> shift communication *towards\" DBus, not away from it towards X  \n>>>> by introducing arbitrary and unnecessary properties.\n>>>\n>>> [ CCing Dan, since he wrote the original startup notification  \n>>> and  I'm interested in his opinion ]\n>>>\n>>> We decided a while ago to use X  for window management and I  \n>>> don't see a reason to revisit that decision. Etoys should respect  \n>>> the multiple windows semantic (which I know you are working on,  \n>>> thanks).\n>>>\n>>> To reassure you, we are not going to use X as an IPC (as people  \n>>> have done in the past), since that gets unbelievably ugly: that's  \n>>> where dbus has his role in the shell -> activity instance  \n>>> communication.\n>>\n>> That's good to hear. However, the X properties required now are  \n>> more complex than before. In the case of Squeak, at window  \n>> creation time I have no way of knowing the dbus activity id yet.\n>>\n>>>> Besides, it does not address the original problem - that if an  \n>>>> activity X window is opened and detected by the Sugar shell, but  \n>>>> it has not created its DBus service yet, the shell will mistake  \n>>>> it for a raw X app (creating a\n>>>> \"raw\" icon in the donut next to the still flashing activity icon).\n>>>\n>>> If there is a _SUGAR_ACTIVITY_ID property the window is an  \n>>> activity, otherwise it's a raw X window. So I think it actually  \n>>> solves the problem.\n>>>\n>>> The shell must know the activity and the bundle id as soon as an  \n>>> activity window is displayed, otherwise it can't represent it  \n>>> properly in the home. Relying on the dbus service for this was  \n>>> very fragile and introduced races which was hard or impossible to  \n>>> solve properly.\n>>\n>> To show the icon it's sufficient to know the bundle id. Actually,  \n>> you don't even really need that, because the icon is already  \n>> showing (flashing). You just need to know if this is an activity  \n>> window or not. And if it is, then sooner or later the dbus service  \n>> will appear telling you if that window belongs to this activity.\n>>\n>\n> You are probably misunderstanding how startup notification works.\n>\n> 1 Before an activity is started from the panel it informs the shell  \n> that an activity with a certain $ID is going to startup -> The  \n> shell display a pulsing icon.\n> 2 When the window finally appear, sugar needs to get its activity  \n> id so that it can transform the notification icon in a normal one  \n> (stop the pulsing, map it to the window xid etc).\n\nI understand that. And this is perfectly reasonable. However, you  \n*could* do step 2 also in response to a dbus message. In fact, a few  \ndays ago the Sugar code handled both cases nicely. Now you replaced  \nthat mechanism by an admittedly better one, but at the same time you  \nhave removed all fallbacks - and that's what I'm arguing about.\n\n>> It's practically the same whether you announce the dbus service  \n>> via X props, or you send the XID via dbus. Supporting both makes  \n>> activity developer's live easier.\n>\n> Using X props the operation is atomic. The window appears *and* you  \n> know his activity_id at the same time. And that obviously avoid the  \n> races.\n\nUnless you have an activity which cannot set the window properties  \nbefore opening the window.\n\n>>> Window management should work using X communication. Mixing dbus  \n>>> and X there just introduce races and confusion. If we was going  \n>>> down the \"dbus for window management\" route then I'd agree with  \n>>> you, but we aren't.\n>>\n>>>> This can easily be fixed up later by detecting the DBus service  \n>>>> creation and removing the raw icon - this is how my fix worked.\n>>>\n>>> Now, that's really a bad hack. I don't want to show a random icon  \n>>> on the screen and than replace it when the DBUS service appear...  \n>>> it just suck.\n>>\n>> That icon would not even be visible because it is hidden by the X  \n>> window that just appeared. It is noble to try preventing to create  \n>> that icon unnecessarily, but if I had a say in designing Sugar,  \n>> I'd opt for robustness, making it simpler for external developers,  \n>> not harder.\n>>\n>\n> Robustness is exactly the reason I chose to use the X properties.  \n> It makes it slightly harder to setup a non-python Sugar activity  \n> but it's a much cleaner and robust approach.\n\nAgreed, but it would help activity developers like me if you  \nsupported alternate strategies.\n\n>> In fact, if I launch an activity from the Sugar frame, it's  \n>> reasonable to assume that the next X window opened actually  \n>> belongs to that activity. So you don't really need to show that  \n>> raw icon, at least until the activity launch is finished.\n>\n> Huh. You are really not opting for robustness here!\n\nYou misunderstood. This would only be the backup-strategy. What I  \nsuggest is allowing multiple ways to detect activities. There is the  \none preferred way of X window properties, but there could be a DBus- \nbased one, too.\n\n- Bert -\n\n\n_______________________________________________\nSugar mailing list\nSugar@lists.laptop.org\nhttp://lists.laptop.org/listinfo/sugar\n\n"}