{"category": "ham", "to_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "from_address": "\"Mark J. Reed\" <markjreed@mail.com>", "subject": "Re: Sigils by example (was: Re: Is Perl 6 too late?)", "body": "On 5/14/07, Jonathan Lang  wrote:\n> Good examples.  Now could you provide some to explain to me why it's\n> important to distinguish between '$', '@', '%', and '&'?  I ask\n> because I've seen a lot of object-based code that has said stuff like\n> '$container{$key}';\n\nWell, $container{$key} is how you access elements of %container in\nPerl5; in Perl6 that's %container{$key}.  But in object-based P5 code,\nyou'd be much more likely to see $container->{$key}, where $container\ncontains a reference to a hash.  I believe in P6 you could write that\neither as $container.{$key}, $container{$key} (where the . is implied\nsince $container{$key} can't refer to %container anymore),  or\n%$container{$key}.\n\nIf I understand your point, however, it is that the availability of\nreferences, which are scalars, has essentially removed the\nscalar/array/hash/sub distinction, since you can store references to\nany of those things in a $var.   Further, in order to dereference such\nreferences, you need something beyond the sigil anyway, which takes\nits place as a type disambiguator.\n\nYou aren't the only person who feels this way; there was a proposal\nback in the RFC process to remove sigils in favor of \"everything is a\nscalar, dereference as needed\".  I was in that camp myself.  But Larry\nrejected that proposal, defending the utility of sigils, and I have\nbeen swayed by the arguments, which I'm not going to repeat because I\ncan't say it as well, but I do advise you to go read - it was either\nApoc1 or Apoc2, I think.\n\nAnyway, one of the things I like about the Perl6 design is that it\nessentially restores sigils to their pre-Perl5 importance via\nautomatic referencing and dereferencing according to context.   This\neffectively removes the \"everything's a scalar anyway\" argument since\nyou can toss references around without making everything a $var.  (I\ndunno how many times I have tried to declare and initialize a hash\nwith my %hash = { ... }, which initializes the hash to have a single\nelement whose key is the hash reference provided and whose value is\nundef... but in P6 that does the right thing.)\n\n\n-- \nMark J. Reed \n"}