{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "allison@cvs.develooper.com", "subject": "[svn:parrot-pdd] r18476 - trunk/docs/pdds", "body": "Author: allison\nDate: Tue May  8 21:09:56 2007\nNew Revision: 18476\n\nModified:\n   trunk/docs/pdds/pdd15_objects.pod\n\nLog:\n[pdd]: Differentiating vtable functions and vtable overrides in Objects PDD.\n\n\nModified: trunk/docs/pdds/pdd15_objects.pod\n==============================================================================\n--- trunk/docs/pdds/pdd15_objects.pod\t(original)\n+++ trunk/docs/pdds/pdd15_objects.pod\tTue May  8 21:09:56 2007\n@@ -331,7 +331,7 @@\n Note that for languages which support default fallback methods, such as Perl\n 5's AUTOLOAD, this would be the place to return it if a normal lookup fails.\n \n-Since the method list and vtable function list are stored in the class\n+Since the method list and vtable override list are stored in the class\n PMC, method finding is a lookup on the class object and not a lookup in\n the namespace. (This could be handled automatically whenever a class is\n associated with a namespace.) Just adding a sub to a namespace will not\n@@ -453,7 +453,7 @@\n the method with the new method and throw a warning.\n \n It also takes named parameters to flag whether the method is a vtable\n-function, and whether it is anonymous (no named entry as a method, only\n+override, and whether it is anonymous (no named entry as a method, only\n as a vtable).\n \n =item methods\n@@ -806,7 +806,7 @@\n the method with the new method and throw a warning.\n \n It also takes slurpy named parameters to flag whether the method is a\n-vtable function, and whether its anonymous (no named entry as a method,\n+vtable override, and whether its anonymous (no named entry as a method,\n only as a vtable).\n \n =item methods\n\n"}