{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jerry@samba.org", "subject": "svn commit: samba r22714 - in branches: SAMBA_3_0/source/libads\n\tSAMBA_3_0_26/source/libads", "body": "Author: jerry\nDate: 2007-05-06 21:06:55 +0000 (Sun, 06 May 2007)\nNew Revision: 22714\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22714\n\nLog:\nPrevent DNS lookup storms when the DNS servers are unreachable.\nHelps when transitioning from offline to online mode.\n\nNote that this is a quick hack and a better solution\nwould be to start the DNS server's state between processes\n(similar to the namecache entries).\n\n\nModified:\n   branches/SAMBA_3_0/source/libads/dns.c\n   branches/SAMBA_3_0_26/source/libads/dns.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/libads/dns.c\n===================================================================\n--- branches/SAMBA_3_0/source/libads/dns.c\t2007-05-06 21:04:30 UTC (rev 22713)\n+++ branches/SAMBA_3_0/source/libads/dns.c\t2007-05-06 21:06:55 UTC (rev 22714)\n@@ -270,45 +270,76 @@\n  Simple wrapper for a DNS query\n *********************************************************************/\n \n+#define DNS_FAILED_WAITTIME          30\n+\n static NTSTATUS dns_send_req( TALLOC_CTX *ctx, const char *name, int q_type, \n                               uint8 **buf, int *resp_length )\n {\n \tuint8 *buffer = NULL;\n \tsize_t buf_len;\n \tint resp_len = NS_PACKETSZ;\t\n-\t\n+\tstatic time_t last_dns_check = 0;\n+\tstatic NTSTATUS last_dns_status = NT_STATUS_OK;\t\n+\ttime_t now = time(NULL);\n+\n+\t/* Try to prevent bursts of DNS lookups if the server is down */\n+\n+\t/* Protect against large clock changes */\n+\n+\tif ( last_dns_check > now )\n+\t\tlast_dns_check = 0;\n+\n+\t/* IF we had a DNS timeout or a bad server and we are still \n+\t   in the 30 second cache window, just return the previous \n+\t   status and save the network timeout. */\n+\n+\tif ( (NT_STATUS_EQUAL(last_dns_status,NT_STATUS_IO_TIMEOUT) ||\n+\t      NT_STATUS_EQUAL(last_dns_status,NT_STATUS_CONNECTION_REFUSED)) &&\n+\t     (last_dns_check+DNS_FAILED_WAITTIME) > now ) \n+\t{\n+\t\tDEBUG(10,(\"last_dns_check: Returning cached status (%s)\\n\",\n+\t\t\t  nt_errstr(last_dns_status) ));\n+\t\treturn last_dns_status;\n+\t}\n+\n+\t/* Send the Query */\n \tdo {\n \t\tif ( buffer )\n \t\t\tTALLOC_FREE( buffer );\n \t\t\n \t\tbuf_len = resp_len * sizeof(uint8);\n \n-\t\tif (buf_len) {\n+\t\tif (buf_len) {\t\t\t\n \t\t\tif ( (buffer = TALLOC_ARRAY(ctx, uint8, buf_len)) == NULL ) {\n \t\t\t\tDEBUG(0,(\"ads_dns_lookup_srv: talloc() failed!\\n\"));\n-\t\t\t\treturn NT_STATUS_NO_MEMORY;\n+\t\t\t\tlast_dns_status = NT_STATUS_NO_MEMORY;\n+\t\t\t\tlast_dns_check = time(NULL);\n+\t\t\t\treturn last_dns_status;\t\n \t\t\t}\n-\t\t} else {\n-\t\t\tbuffer = NULL;\n \t\t}\n \n \t\tif ( (resp_len = res_query(name, C_IN, q_type, buffer, buf_len)) < 0 ) {\n \t\t\tDEBUG(3,(\"ads_dns_lookup_srv: Failed to resolve %s (%s)\\n\", name, strerror(errno)));\n \t\t\tTALLOC_FREE( buffer );\n+\t\t\tlast_dns_status = NT_STATUS_UNSUCCESSFUL;\n+\t\t\t\n \t\t\tif (errno == ETIMEDOUT) {\n-\t\t\t\treturn NT_STATUS_IO_TIMEOUT;\n+\t\t\t\tlast_dns_status = NT_STATUS_IO_TIMEOUT;\t\t\t\t\n \t\t\t}\n \t\t\tif (errno == ECONNREFUSED) {\n-\t\t\t\treturn NT_STATUS_CONNECTION_REFUSED;\n+\t\t\t\tlast_dns_status = NT_STATUS_CONNECTION_REFUSED;\t\t\t\t\n \t\t\t}\n-\t\t\treturn NT_STATUS_UNSUCCESSFUL;\n+\t\t\tlast_dns_check = time(NULL);\n+\t\t\treturn last_dns_status;\n \t\t}\n \t} while ( buf_len < resp_len && resp_len < MAX_DNS_PACKET_SIZE );\n \t\n \t*buf = buffer;\n \t*resp_length = resp_len;\n \n-\treturn NT_STATUS_OK;\n+\tlast_dns_check = time(NULL);\n+\tlast_dns_status = NT_STATUS_OK;\t\n+\treturn last_dns_status;\n }\n \n /*********************************************************************\n\nModified: branches/SAMBA_3_0_26/source/libads/dns.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libads/dns.c\t2007-05-06 21:04:30 UTC (rev 22713)\n+++ branches/SAMBA_3_0_26/source/libads/dns.c\t2007-05-06 21:06:55 UTC (rev 22714)\n@@ -270,45 +270,76 @@\n  Simple wrapper for a DNS query\n *********************************************************************/\n \n+#define DNS_FAILED_WAITTIME          30\n+\n static NTSTATUS dns_send_req( TALLOC_CTX *ctx, const char *name, int q_type, \n                               uint8 **buf, int *resp_length )\n {\n \tuint8 *buffer = NULL;\n \tsize_t buf_len;\n \tint resp_len = NS_PACKETSZ;\t\n-\t\n+\tstatic time_t last_dns_check = 0;\n+\tstatic NTSTATUS last_dns_status = NT_STATUS_OK;\t\n+\ttime_t now = time(NULL);\n+\n+\t/* Try to prevent bursts of DNS lookups if the server is down */\n+\n+\t/* Protect against large clock changes */\n+\n+\tif ( last_dns_check > now )\n+\t\tlast_dns_check = 0;\n+\n+\t/* IF we had a DNS timeout or a bad server and we are still \n+\t   in the 30 second cache window, just return the previous \n+\t   status and save the network timeout. */\n+\n+\tif ( (NT_STATUS_EQUAL(last_dns_status,NT_STATUS_IO_TIMEOUT) ||\n+\t      NT_STATUS_EQUAL(last_dns_status,NT_STATUS_CONNECTION_REFUSED)) &&\n+\t     (last_dns_check+DNS_FAILED_WAITTIME) > now ) \n+\t{\n+\t\tDEBUG(10,(\"last_dns_check: Returning cached status (%s)\\n\",\n+\t\t\t  nt_errstr(last_dns_status) ));\n+\t\treturn last_dns_status;\n+\t}\n+\n+\t/* Send the Query */\n \tdo {\n \t\tif ( buffer )\n \t\t\tTALLOC_FREE( buffer );\n \t\t\n \t\tbuf_len = resp_len * sizeof(uint8);\n \n-\t\tif (buf_len) {\n+\t\tif (buf_len) {\t\t\t\n \t\t\tif ( (buffer = TALLOC_ARRAY(ctx, uint8, buf_len)) == NULL ) {\n \t\t\t\tDEBUG(0,(\"ads_dns_lookup_srv: talloc() failed!\\n\"));\n-\t\t\t\treturn NT_STATUS_NO_MEMORY;\n+\t\t\t\tlast_dns_status = NT_STATUS_NO_MEMORY;\n+\t\t\t\tlast_dns_check = time(NULL);\n+\t\t\t\treturn last_dns_status;\t\n \t\t\t}\n-\t\t} else {\n-\t\t\tbuffer = NULL;\n \t\t}\n \n \t\tif ( (resp_len = res_query(name, C_IN, q_type, buffer, buf_len)) < 0 ) {\n \t\t\tDEBUG(3,(\"ads_dns_lookup_srv: Failed to resolve %s (%s)\\n\", name, strerror(errno)));\n \t\t\tTALLOC_FREE( buffer );\n+\t\t\tlast_dns_status = NT_STATUS_UNSUCCESSFUL;\n+\t\t\t\n \t\t\tif (errno == ETIMEDOUT) {\n-\t\t\t\treturn NT_STATUS_IO_TIMEOUT;\n+\t\t\t\tlast_dns_status = NT_STATUS_IO_TIMEOUT;\t\t\t\t\n \t\t\t}\n \t\t\tif (errno == ECONNREFUSED) {\n-\t\t\t\treturn NT_STATUS_CONNECTION_REFUSED;\n+\t\t\t\tlast_dns_status = NT_STATUS_CONNECTION_REFUSED;\t\t\t\t\n \t\t\t}\n-\t\t\treturn NT_STATUS_UNSUCCESSFUL;\n+\t\t\tlast_dns_check = time(NULL);\n+\t\t\treturn last_dns_status;\n \t\t}\n \t} while ( buf_len < resp_len && resp_len < MAX_DNS_PACKET_SIZE );\n \t\n \t*buf = buffer;\n \t*resp_length = resp_len;\n \n-\treturn NT_STATUS_OK;\n+\tlast_dns_check = time(NULL);\n+\tlast_dns_status = NT_STATUS_OK;\t\n+\treturn last_dns_status;\n }\n \n /*********************************************************************\n\n"}