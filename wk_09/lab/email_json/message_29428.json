{"category": "ham", "to_address": "Don Hopkins <dhopkins@DonHopkins.com>", "from_address": "Zvi Devir <zdevir@cs.technion.ac.il>", "subject": "Re: [sugar] eBook Reader user interface", "body": "\nI have been collecting a few (more than a few) usability bugs and UI \nsuggestions, which will hopefully be compiled to a list next month.\n\nIn the meanwhile, I would like to share a couple of ideas regarding the \nmapping of the gamepad keys [which I hope won't state the obvious too much].\n\nCurrently, the UP/DOWN/LEFT/RIGHT keys have a fixed functionality \nregardless of the screen orientation. This isn't a correct logic, as the \nexpected functionality changes according to the current orientation. I \nguess the easiest way to implement this kind of behavior would be using \na smart key mapping mechanism in X.\nAnother thought -- the current input method treats those keys as \ndirection keys. However, a better input method may be emulating the \nfunctionality of the mouse (touch pad) using the gamepad keys. In tablet \nmode this can really improve the user experience.\n\nJust my $0.04.\n    Zvi\n\n\nDon Hopkins wrote:\n> Goal for improving the eBook reader user interface:\n> \n>   I've been doing some exploratory programming with GTK and Sugar,\n>   trying to improve the user interface of the eBook reader, and make\n>   it useable in book mode with the gamepad.\n> \n>   + Support the game keypads in eBook mode. \n> \n>     + Low level game keypad support\n> \n>       Need to remap low level keyboard scan codes to Linux keyboard codes. \n> \n>       The setolpckeys.c program remaps the keys and gamepad buttons.\n> \n> \tCurrently it maps both gamepads to the numeric keypad keys (KEY_KP8, etc),\n> \twhich the X server and GDK translates to directional keys (GDK_Up, etc).\n> \n> \tI tried to map them to buttons (BTN_A, etc), but the X server seems \n> \tto ignore keycodes in that range. \n> \n> \tThe xorg.conf file has a keycode mask that looked like it might help, \n> \tbut I couldn't get it to work. \n> \n> \tNeed to have unique keycodes reported for each of the two gamepads, \n> \twhich are not the same as any keyboard keys, without any predefined meanings\n> \tlike arrow keys have. \n> \n> \tNeed to define special purpose keycodes just for the OLPC gamepad,\n> \tinstead of trying to reuse existing but not appropriate keycodes. \n> \n> \tWhat is the process for defining new keycodes in ?\n> \n> \tHere's my strawman proposal for some new keycodes. \n> \n> \t  Use keys (\"KEY_*\") instead of buttons (\"BTN_*\"), since they\n> \t  seem to work better.\n> \n> \t  The 0x1b* range seems to be unused in , \n> \t  and it's between other groups of keycodes, so I'll\n> \t  propose using that range for the OLPC. \n> \n> \t  The UP/DOWN/LEFT/RIGHT keys correspond to the directional\n> \t  keypad.\n> \n> \t  #define KEY_XO_GAMEPAD_UP      0x1b0\n> \t  #define KEY_XO_GAMEPAD_DOWN    0x1b1\n> \t  #define KEY_XO_GAMEPAD_LEFT    0x1b2\n> \t  #define KEY_XO_GAMEPAD_RIGHT   0x1b3\n> \n> \t  The NORTH/SOUTH/EAST/WEST keys correspond to the other\n> \t  buttons. Those names are agnostic to the button labels,\n> \t  which may change from the current Playstation buttons\n> \t  (X/O/Triangle/Square). Can anyone suggest better names for\n> \t  the four buttons on the right?\n> \n> \t  #define KEY_XO_GAMEPAD_NORTH   0x1b4\n> \t  #define KEY_XO_GAMEPAD_SOUTH   0x1b5\n> \t  #define KEY_XO_GAMEPAD_EAST    0x1b6\n> \t  #define KEY_XO_GAMEPAD_WEST    0x1b7\n> \n> \t  While we're at it, we could define keycodes for the other\n> \t  OLPC buttons and switches on the screen. I think there are\n> \t  some other sensor switches that could generate keycodes,\n> \t  like opening the screen, rotating it around, and putting it\n> \t  into book mode, so I will make some guesses at names for\n> \t  them, just to get the discussion rolling. \n> \n> \t  #define KEY_XO_SCREEN_ROTATE   0x1b8\n> \t  #define KEY_XO_SCREEN_POWER    0x1b9\n> \t  #define KEY_XO_SCREEN_OPEN     0x1ba\n> \t  #define KEY_XO_SCREEN_CLOSE    0x1bb\n> \t  #define KEY_XO_SCREEN_IN       0x1bc\n> \t  #define KEY_XO_SCREEN_OUT      0x1bd\n> \n> \t  Is there an exhaustive list of all buttons and switches and\n> \t  events on the OLPC? Are any more planned? Which ones should\n> \t  be assigned keycodes?\n> \n>       Rewrote setolpckeys.c code in Python (just uses ioctl, but needs to know keycodes).\n> \tWriting utilities like that in Python instead of C makes it easier to \n> \treconfigure the keys on the OLPC without a C compiler. \n> \n\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}