{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "Ben Bolker <bolker@zoo.ufl.edu>", "subject": "Re: [R] Simulated annealing using optim()", "body": "  ugr.es> writes:\n\n> Finally, I tried to write my \"gr\" function to compute new random test\n> configurations. Here I found a problem: In the simulated annealing\n> algorithm, changes between succesive iterations during the optimization\n> must be progressively smaller. The \"distance\" from the \"current\"\n> configuration to the next one to be tested must be somehow proportional to\n> the \"temperature\" but I don't see how to acces the value of the\n> \"temperature\" from my gr function. Unfortunately, this is not described in\n> the help page and the examples shown don't need a gr function (in the case\n> of the \"wild\" function example) or uses an \"temperature\" independent\n> function (in the case of the Traveling salesman problem example).\n> \n> I had a look at the C source code for optim(), and I confirmed that the\n> shrinking \"temperature\" is used by the default Gaussian Markov kernel\n> (under the name \"scale\") but I didn't found any clue on how to access this\n> value from the user defined gr function (probably because of my lack of\n> knowledge of the R API).\n\n\nUnfortunately, it looks at the moment optim assumes that \"gr\" only\nhas a single argument -- the parameter vector.  It would take some\nhacking, which I'm (a) not quite sure how to do and (b) really not\nsure how to handle without breaking backward compatibility\n(i.e. how do you check in C code to see whether an R function\nhas one or two arguments?)\n\n>From optim.c:\n\nstatic void genptry(int n, double *p, double *ptry, double scale, void *ex)\n{\n\n  [SNIP]  \n\n  /* if user-defined call */\n  /* set x equal to the scaled parameter vector */\n\n         SETCADR(OS->R_gcall, x); /* set argument of \"gr\" to x */\n\n        PROTECT_WITH_INDEX(s = eval(OS->R_gcall, OS->R_env), &ipx);\n             /* call the \"gr\" function */\n    /* etc. */\n    }\n    else {  /* default Gaussian Markov kernel */\n        for (i = 0; i < n; i++)\n            ptry[i] = p[i] + scale * norm_rand();  /* new candidate point */\n    }\n}\n\n   Possibly useful:\n\nhttp://finzi.psych.upenn.edu/R/Rhelp02a/archive/21978.html\n\n  further discussion should probably go to R-devel ...\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}