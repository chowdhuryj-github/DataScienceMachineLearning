{"category": "ham", "to_address": "\"Mathew Snyder\" <theillien@yahoo.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Proper class setup?", "body": "On 6/22/07, Mathew Snyder  wrote:\nsnip\n> I'm not sure what you mean by \"Change your new() in a new() and init()\".\nsnip\n> What do you mean by \"set/get approach\"?\nsnip\n\nSome people believe that new should just create a new blank object and\ncall an init method to do setup.  There are good arguments both ways.\n\nManually writing Accessor, Mutator, Getter, or Setter methods sucks\nand is error prone.  It is often better to write one getter and one\nsetter that gets or sets the field(s) passed to it.  Another method is\nto use Perl's autoload capability to magically create subroutines for\nyou.  Starting with some Perl in the 5.8 line the autoload function\ngained the ability to be an lvalue, so I have written it that way.\n\nPerl script:\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse Report;\n\nmy $rpt = Report->new;\n\n$rpt->set({id => 5, queue => 10});\nprint $rpt->printable;\n\nmy ($id, $queue) = $rpt->get(qw(id queue));\n\nprint \"id is $id and queue is $queue\\n\";\n\n#same thing, but I like the => better\n$rpt->set(\"id\", 6);\n$rpt->set(id => 6);\n\nprint \"id is now \", $rpt->get(\"id\"), \"\\n\";\n\n$rpt->id = 7;\nprint \"id is now \", $rpt->id, \"\\n\";\n\nModule:\npackage Report;\n\nuse strict;\nuse warnings;\nuse Carp;\n\nour $AUTOLOAD;\nour %fields = (\n        _id       => 1,\n        _queue    => 1,\n        _owner    => 1,\n        _priority => 1,\n        _worked   => 1,\n        _timeLeft => 1,\n        _due      => 1,\n        _created  => 1,\n        _updated  => 1,\n        _severity => 1,\n        _ccl      => 1,\n);\n\n#minimal new\nsub new {\n       my $class = shift;\n       my $self  = bless {}, $class;\n       $self->init(@_);\n       return $self;\n}\n\n#real object creation happens here\nsub init {\n        my $self   = shift;\n        my @fields = keys %fields;\n        @{$self}{@fields} = (undef) x @fields;\n}\n\nsub _validate_field {\n        my ($self, $k) = @_;\n        croak \"$k is not a valid field for \" . ref $self\n                unless $fields{\"_$k\"};\n}\n\n#Getter/setter method 1\nsub get {\n        my ($self, @k) = @_;\n        my @ret;\n        for my $k (@k) {\n                $self->_validate_field($k);\n                push @ret, $self->{\"_$k\"};\n        }\n        local $\" = ' ::: ';\n        return @ret\n}\n\nsub set {\n        my $self = shift;\n        croak \"bad number of arguments\" unless @_ == 2 or @_ == 1;\n        if (@_ == 2) {\n                $self->_validate_field($_[0]);\n                return $self->{\"_$_[0]\"} = $_[1];\n        }\n        croak \"not a hash reference\" unless ref $_[0] eq 'HASH';\n        my $h = $_[0];\n        my @ret;\n        for my $k (keys %$h) {\n                $self->_validate_field($k);\n                push @ret, $self->{\"_$k\"} = $h->{$k};\n        }\n        return @ret;\n}\n\n#another form of setter/getter\n\nsub AUTOLOAD : lvalue {\n        my ($k) = $AUTOLOAD =~ /::(.*?)$/;\n        return if $k eq 'DESTROY';\n        my $self = shift;\n        $self->_validate_field($k);\n        $self->{\"_$k\"};\n}\n\nsub printable {\n       my ($self) = @_;\n\n       # return Printable Report info\n       return $self->id . \" \" . $self->queue . \"\\n\";\n}\n\n1;\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}