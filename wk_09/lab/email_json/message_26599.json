{"category": "ham", "to_address": "Jeff Pang <pangj@earthlink.net>", "from_address": "Tom Allison <tom@tacocat.net>", "subject": "Re: forking problem with dbd::mysql", "body": "\nOn May 9, 2007, at 5:41 PM, Jeff Pang wrote:\n\n>\n>\n> -----Original Message-----\n>> From: Chas Owens \n>>\n>> The solution:\n>>\n>> Setting a flag (InactiveDestroy) on the parent's handle inside the\n>> child process prevents the automagic closing of the connection.\n>>\n>> * the magic in this case is the DESTROY method of DBI::db\n>\n> Using InactiveDestroy flag seems a standard way since this module's  \n> author provide this flag.\n> But it's maybe bring some problems when the applications are large  \n> enough,and it's not the fact that every programmer would disconnect  \n> their dbh connections in time.For example,consider the case  \n> programs were run under modperl and without Apache::DBI,using this  \n> flag would possibly make lots of db connections to database and  \n> consume db's socket source quickly.\n> Then for me I would maybe consider another way of creating its own  \n> dbh in child after fork.\n> Hope I'm right,:)\n\n\n From perldoc:\nThis attribute is specifically designed for use in Unix applica-\n            tions that \"fork\" child processes. Either the parent or  \nthe child\n            process, but not both, should set \"InactiveDestroy\" on  \nall their\n            shared handles.  Note that some databases, including  \nOracle, don't\n            support passing a database connection across a fork.\n\nIn short -- you are lucky it can be supported.\nBut in order to keep things portable, this might be something to avoid?\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}