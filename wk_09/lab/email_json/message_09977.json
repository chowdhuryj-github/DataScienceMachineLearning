{"category": "ham", "to_address": "\"Jenda Krynicky\" <Jenda@krynicky.cz>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Nested loop", "body": "On 4/19/07, Jenda Krynicky  wrote:\n> From: \"Chas Owens\" \nsnip\n> > foreach is dead, long live for.\n>\n> William is dead, long live Bill?\n>\n> foreach and for are two names for the same thing and just as you can\n> call someone both William and Bill you can use foreach and for\n> interchangeably.\n>\n> foreach(my $i = 0; $i < $whatever; $i++)\n> for(my $i = 0; $i < $whatever; $i++)\n>\n> for my $x (@array)\n> foreach my $x (@array)\n>\n> for (@array)\n> foreach (@array)\n>\n> No difference to the computer. Use whichever reads best!\n\nYes, foreach was aliased to for for backwards compatibility, but, like\ntelnet and rsh, it should not be used in new code.\n\n>\n> I would myself use \"for\" for the C-style loops\n\nAnd this is why.  As long as people think \"well, I have foreach which\nis for iterating and for which is for C-style loops\" they will\ncontinue to write C-style loops.  C-style loops are bad.  They are\nthere for backwards compatibility.  I can't think of a single for loop\nthat isn't better written as a range based for loop or while loop. For\ninstance\n\nstandard range based loop\nfor (my $i = 0; $i < 10; $i++) {}\nfor my $i (0 .. 9) {}\n\noften $i winds up being used as an index which just makes me cringe.\n\nThe infinite loop\nfor (;;) {}\nwhile (1) {}\n\nThe reason C programmers give for using for (;;) is that it generates\nless overhead on their platform, but, at least with my tests*,\nwhile(1) is more efficient in Perl.\n\nWeirder stuff that you only tend to see people coming from a C background do\nfor (my $node = $head; $node = $node; $node->next) {}\nmy $node = $head;\nwhile ($node = $node->next) {}\n\nBut in Perl it is rarely necessary to do this sort of loop since most\nfunctions return a list that can be iterated over using for:\n\nfor my $node ($head->nodes) {}\n\n> and if I use the for loop as a way to create an alias\n\nAnd that is a perfectly idiomatic usage; at least until given is added\nto the language (in 5.10 from what I hear).\n\n* benchmark\n        Rate  bare   for while\nbare  6754/s    --  -17%  -31%\nfor   8179/s   21%    --  -17%\nwhile 9823/s   45%   20%    --\n\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse Benchmark;\n\n\nmy %subs = (\n        for   => sub { my $i; for (;;) { last if $i++ > 1_000 } },\n        while => sub { my $i; while (1) { last if $i++ > 1_000 } },\n        bare  => sub { my $i; { last if $i++ > 1_000; redo }  },\n);\n\nBenchmark::cmpthese(-10, \\%subs);\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}