{"category": "ham", "to_address": "Simon McVittie <simon.mcvittie@collabora.co.uk>", "from_address": "Dan Williams <dcbw@redhat.com>", "subject": "Re: [sugar] [PATCH] services/presence/server_plugin:\n\terror_handler\talways takes exactly 1 argument.", "body": "On Thu, 2007-05-24 at 12:47 +0100, Simon McVittie wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n> \n> Instead of using lambdas with arbitrary arguments, use a lambda that takes\n> 1 argument.\n> - ---\n>  services/presence/server_plugin.py |   26 +++++++++++++-------------\n>  1 files changed, 13 insertions(+), 13 deletions(-)\n\nok\n\n> diff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py\n> index 2b220a3..8556792 100644\n> - --- a/services/presence/server_plugin.py\n> +++ b/services/presence/server_plugin.py\n> @@ -423,7 +423,7 @@ class ServerPlugin(gobject.GObject):\n>          img_data = _get_buddy_icon_at_size(icon_data, min(maxw, 96), min(maxh, 96), maxsize)\n>          self._conn[CONN_INTERFACE_AVATARS].SetAvatar(img_data, \"image/jpeg\",\n>                  reply_handler=self._set_self_avatar_cb,\n> - -                error_handler=lambda *args: self._log_error_cb(\"setting avatar\", *args))\n> +                error_handler=lambda e: self._log_error_cb(\"setting avatar\", e))\n>  \n>      def _join_activity_channel_props_set_cb(self, activity_id, signal, handle, channel, userdata):\n>          self._joined_activities.append((activity_id, handle))\n> @@ -489,7 +489,7 @@ class ServerPlugin(gobject.GObject):\n>              room_jid = activity_id + \"@conference.\" + self._account[\"server\"]\n>              self._conn[CONN_INTERFACE].RequestHandles(HANDLE_TYPE_ROOM, [room_jid],\n>                      reply_handler=lambda *args: self._join_activity_get_channel_cb(activity_id, signal, userdata, *args),\n> - -                    error_handler=lambda *args: self._join_error_cb(activity_id, signal, userdata, 'RequestHandles([%u])' % room_jid, *args))\n> +                    error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'RequestHandles([%u])' % room_jid, e))\n>          else:\n>              self._join_activity_get_channel_cb(activity_id, signal, userdata, [handle])\n>      \n> @@ -538,7 +538,7 @@ class ServerPlugin(gobject.GObject):\n>              props['ip4-address'] = addr\n>          self._conn[CONN_INTERFACE_BUDDY_INFO].SetProperties(props,\n>                  reply_handler=self._ignore_success_cb,\n> - -                error_handler=lambda *args: self._log_error_cb(\"setting properties\", *args))\n> +                error_handler=lambda e: self._log_error_cb(\"setting properties\", e))\n>  \n>      def _set_self_alias(self):\n>          \"\"\"Forwarded to SetActivities on AliasInfo channel\"\"\"\n> @@ -546,7 +546,7 @@ class ServerPlugin(gobject.GObject):\n>          self_handle = self._conn[CONN_INTERFACE].GetSelfHandle()\n>          self._conn[CONN_INTERFACE_ALIASING].SetAliases({self_handle : alias},\n>                  reply_handler=self._ignore_success_cb,\n> - -                error_handler=lambda *args: self._log_error_cb(\"setting alias\", *args))\n> +                error_handler=lambda e: self._log_error_cb(\"setting alias\", e))\n>          return False\n>  \n>      def _set_self_activities(self):\n> @@ -556,7 +556,7 @@ class ServerPlugin(gobject.GObject):\n>          \"\"\"\n>          self._conn[CONN_INTERFACE_BUDDY_INFO].SetActivities(self._joined_activities,\n>                  reply_handler=self._ignore_success_cb,\n> - -                error_handler=lambda *args: self._log_error_cb(\"setting activities\", *args))\n> +                error_handler=lambda e: self._log_error_cb(\"setting activities\", e))\n>  \n>      def _set_self_current_activity(self):\n>          \"\"\"Forward our current activity (or \"\") to network\n> @@ -577,7 +577,7 @@ class ServerPlugin(gobject.GObject):\n>          self._conn[CONN_INTERFACE_BUDDY_INFO].SetCurrentActivity(cur_activity,\n>                  cur_activity_handle,\n>                  reply_handler=self._ignore_success_cb,\n> - -                error_handler=lambda *args: self._log_error_cb(\"setting current activity\", *args))\n> +                error_handler=lambda e: self._log_error_cb(\"setting current activity\", e))\n>  \n>      def _get_handle_for_activity(self, activity_id):\n>          \"\"\"Retrieve current handle for given activity or None\"\"\"\n> @@ -713,7 +713,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>          self._conn[CONN_INTERFACE_BUDDY_INFO].GetActivities(handle,\n>              reply_handler=lambda *args: self._contact_online_activities_cb(handle, *args),\n> - -            error_handler=lambda *args: self._contact_online_activities_error_cb(handle, *args))\n> +            error_handler=lambda e: self._contact_online_activities_error_cb(handle, e))\n>  \n>      def _contact_online_aliases_error_cb(self, handle, props, retry, err):\n>          \"\"\"Handle failure to retrieve given user's alias/information\"\"\"\n> @@ -721,7 +721,7 @@ class ServerPlugin(gobject.GObject):\n>              _logger.debug(\"Handle %s - Error getting nickname (will retry): %s\" % (handle, err))\n>              self._conn[CONN_INTERFACE_ALIASING].RequestAliases([handle],\n>                  reply_handler=lambda *args: self._contact_online_aliases_cb(handle, props, *args),\n> - -                error_handler=lambda *args: self._contact_online_aliases_error_cb(handle, props, False, *args))\n> +                error_handler=lambda e: self._contact_online_aliases_error_cb(handle, props, False, e))\n>          else:\n>              _logger.debug(\"Handle %s - Error getting nickname: %s\" % (handle, err))\n>              self._contact_offline(handle)\n> @@ -742,12 +742,12 @@ class ServerPlugin(gobject.GObject):\n>  \n>          self._conn[CONN_INTERFACE_ALIASING].RequestAliases([handle],\n>              reply_handler=lambda *args: self._contact_online_aliases_cb(handle, props, *args),\n> - -            error_handler=lambda *args: self._contact_online_aliases_error_cb(handle, props, True, *args))\n> +            error_handler=lambda e: self._contact_online_aliases_error_cb(handle, props, True, e))\n>  \n>      def _contact_online_request_properties(self, handle, tries):\n>          self._conn[CONN_INTERFACE_BUDDY_INFO].GetProperties(handle,\n>              reply_handler=lambda *args: self._contact_online_properties_cb(handle, *args),\n> - -            error_handler=lambda *args: self._contact_online_properties_error_cb(handle, tries, *args))\n> +            error_handler=lambda e: self._contact_online_properties_error_cb(handle, tries, e))\n>          return False\n>  \n>      def _contact_online_properties_error_cb(self, handle, tries, err):\n> @@ -855,7 +855,7 @@ class ServerPlugin(gobject.GObject):\n>              # cache miss\n>              self._conn[CONN_INTERFACE_AVATARS].RequestAvatar(handle,\n>                      reply_handler=lambda *args: self._request_avatar_cb(handle, new_avatar_token, *args),\n> - -                    error_handler=lambda *args: self._log_error_cb(\"getting avatar\", *args))\n> +                    error_handler=lambda e: self._log_error_cb(\"getting avatar\", e))\n>          else:\n>              self.emit(\"avatar-updated\", handle, icon)\n>  \n> @@ -962,7 +962,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>          self._conn[CONN_INTERFACE_ACTIVITY_PROPERTIES].GetProperties(handle,\n>                  reply_handler=lambda *args: self._activity_properties_changed_cb(handle, *args),\n> - -                error_handler=lambda *args: self._log_error_cb(\"getting activity properties\", *args))\n> +                error_handler=lambda e: self._log_error_cb(\"getting activity properties\", e))\n>  \n>      def set_activity_properties(self, act_id, props):\n>          \"\"\"Send update to network on the activity properties of act_id (props)\"\"\"\n> @@ -972,7 +972,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>          self._conn[CONN_INTERFACE_ACTIVITY_PROPERTIES].SetProperties(handle, props,\n>                  reply_handler=self._ignore_success_cb,\n> - -                error_handler=lambda *args: self._log_error_cb(\"setting activity properties\", *args))\n> +                error_handler=lambda e: self._log_error_cb(\"setting activity properties\", e))\n>  \n>      def _activity_properties_changed_cb(self, room, properties):\n>          \"\"\"Handle update of properties for a \"room\" (activity handle)\"\"\"\n> - -- \n> 1.5.2-rc3.GIT\n> \n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.6 (GNU/Linux)\n> Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net\n> \n> iD8DBQFGVXtvWSc8zVUw7HYRAoyeAKDiO0E8sBO7kFPmT8SHCdpc1odI7wCgsJVB\n> UsdZPmvC3tluwl1qhmQyiGw=\n> =E5fd\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> Sugar mailing list\n> Sugar@laptop.org\n> http://mailman.laptop.org/mailman/listinfo/sugar\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}