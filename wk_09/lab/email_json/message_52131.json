{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Brad Baxter <baxter.brad@gmail.com>", "subject": "Re: Alternatives to highly nested hashes", "body": "On Jun 20, 7:33 am, rob.di...@350.com (Rob Dixon) wrote:\n> Well, sort of. Objects are simply intelligent data structures - structures with\n> code as well as data that know how to perform operations on themselves.\n\nNot to put too fine a point on it, but early on when I was learning\nOOP, I often read descriptions of objects that were similar to this\none, i.e., that objects \"contained\" code and could \"perform operations\non themselves\".\n\nTo my mind, this is a poor way to express things and, at least for me,\ncan lead to confusion.  After faltering with Java for a while, it was\nnot until I learned how Perl handles OOP that the whole zoo of\nconcepts finally sank into my (admittedly less than razor sharp)\nbrain. In my opinion, a better and more accurate way to express it\nwould be something like:\n\nObjects are data structures that are associated with code designed to\nperform operations on them.\n\nI have never seen an object perform an operation on itself.  :-)  I\nhave seen many methods perform operations on objects.  I have seen\nobjects inform the system calling the method where that system may\nfind the proper code for that object.\n\nSo objects out in the wild are data structures that (usually) do not\nhave code \"in\" them.  They must be fed to a method of their class,\nwhich is where the code is.  The objects DO have the information that\ntells, say, Perl, in which class it should start looking for the\nmethod.\n\nRegards,\n\n--\nBrad\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}