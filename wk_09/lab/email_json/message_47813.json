{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"Jenda Krynicky\" <Jenda@Krynicky.cz>", "subject": "Re: Database insertion, escape issue", "body": "From: Northstardomus \n> ...\n>         $dbh->prepare('INSERT INTO area_status (areaID, survey_date,\n> update_time, status ) VALUES (?,?,?,?)');\n>         $dbh->execute('$values[0]', '$values[1]', '$values[2]',\n> '$values[3]');\n\nApart from the $sth already explained by others, there is one more \nproblem with this code. It seems you already found it as it is not \npresent in the examples you give in the later posts, but I'd like to \npoint it out anyway.\n\nYou cannot use singlequotes around the $values[x] in the ->execute() \ncall. You'd insert not the values in the @values array, but the \nliteral dollar, \"values\", opening square brace, one and closing \nbrace. Try\n\n @values = (1,2,3,4);\n print $values[1], \"\\n\";\n print '$values[1]', \"\\n\";\n\nJust for reference, you should not use doublequotes around them \neither:\n\n $dbh->execute(\"$values[0]\", \"$values[1]\", \"$values[2]\",\n   \"$values[3]\");\n\nWhile this would work (in this case) it forces perl to make copies of \nthe values and possibly also an unnecessary number->string \nconversion. I only mention this because I see things like this quite \noften.\n\nJenda\n===== Jenda@Krynicky.cz === http://Jenda.Krynicky.cz =====\nWhen it comes to wine, women and song, wizards are allowed \nto get drunk and croon as much as they like.\n\t-- Terry Pratchett in Sourcery\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}