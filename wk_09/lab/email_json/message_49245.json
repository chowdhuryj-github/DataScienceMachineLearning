{"category": "ham", "to_address": "\"brian d foy\" <brian.d.foy@gmail.com>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "brian d foy wrote:\n> > Whereas the rule you have to teach under the Integration model is:\n>\n> We don't teach any rule under this model, and it's been fine for over a\n> decade :)\n>\n> When we do teach the current Pod, the simple rule is that Pod starts:\n>\n>    * when Perl is expecting a new statement\n>    * there is a =something at the beginning of the line\n>\n> Which is considerably simpler than the long rule list you used to say\n> the same thing (which seems a bit of FUD, honestly).\n\nAgreed about the parenthetical.  From my perspective, the proponents\nof the Separation Model are overstating the difficulties inherent to\nthe Integration model.  That said:\n\nBy the rule you give above, Pod Sections cannot be embedded in the\nmiddle of statements.  For example, given:\n\n  if\n  a = 5\n  {\n    say \"ouch!\"\n  }\n\nyou couldn't insert a Pod Section between the first and second lines,\nor between the second and third lines.   From a guy-in-the-trenches\nperspective, this isn't a problem; interrupting an instruction\nmid-stream in order to talk about it is very bad form.  Still, it's a\nrestriction that Damian's Separation model lacks.\n\n> >  > So, if this is the case, how will a new Perl 6 user debug a program\n> >  > failure when part of their program mysteriously disappears because\n> >  > they just happened to have =begin at the beginning of a line?\n> >\n> > The same way they debug it when part of their program mysteriously\n> > disappears because they just happened to have # at the beginning of a\n> > line:\n>\n> > Except, of course, the Pod mysteriously vanishing will be considerably\n> > easier to debug, because ALL lines starting with =begin vanish, whereas\n> > only some lines beginning with # do.\n>\n> That's not really the case. The # only affects one line, and a pound in\n> a literal string doesn't start a comment. People grok single line\n> comments very well.\n\nWith the advent of block comments, this isn't as true as it used to\nbe.  In fact, I expect that some people will have to take a moment to\nwrap their heads around the notion that you ignore everything that\nfollows the closing bracket on the last line of the block quote.  That\nsaid, I don't expect there to be much of a learning curve here.\n\nStill, it may be worth it to state that a line that starts with '#'\nfollowed by a closing bracket is _not_ commented out (although said\ncharacter sequence should be stripped out of the line).  Less\ncognitive dissonance that way.\n\n> The start of a Pod comment now affects its line and the ones following\n> it.\n\n...also not much in the way of a learning curve; in fact, I expect\nthat people will grok Pod Sections more readily than they will grok\nblock comments as currently written.\n\n> Well, easy to use Pod with other languages until they try to use the\n> assignment operator at the beginning of the line, or a = in a literal\n> string at the beginning of a line.\n\n...or you're dealing with a language that assigns special meaning to\nlines that begin with '='.\n\nYou are not going to be able to make Pod completely orthogonal to the\ncode that it's embedded in.  You can come close (and IMHO you come\n_very_ close with the Separation model that you're discussing), but\nthere will always be some sort of constraint placed on the code into\nwhich you're embedding Pod.\n\n> There are other things to consider, and to me it looks like this design\n> decision isn't based on what's easier for the Perl 6 programmer but\n> what's easier for the implementors. It's not that I don't understand\n> both sides, I just disagree about where the complexity should be.\n\nThank you, Brian.  That's exactly the sense that I've been getting\nfrom the explanations being given.\n\nWhich is not to say that there isn't a time and place when ease of\nimplementation should trump ease of programming; taking an extreme\nexample, being able to write a program that consists of the single\nline:\n\n  attend my every wish\n\nis the ultimate in terms of ease of programming; it's also impossible\nto implement, barring the invention of mind-reading hardware and\nsapient artificial intelligence software.  If a small increase in the\nprogrammer's learning curve is the price that must be paid to achieve\na massive reduction in the implementor's workload, it may very well be\nworthwhile to foist some of the complexity onto the programmer.\n\nThe question is whether or not this is one of those cases.\n\n-- \nJonathan \"Dataweaver\" Lang\n\n"}