{"category": "ham", "to_address": "p2 <parrot-porters@perl.org>", "from_address": "\"jerry gay\" <jerry.gay@gmail.com>", "subject": "FoTW: src/debug.c -- function and macro do the same thing", "body": "here's a macro to move to the next argument (kjs mentioned in an\nearlier thread that this isn't a descriptive name)\n\n  /* na(c) [Next Argument (Char pointer)]\n   *\n   * Moves the pointer to the next argument in the user input.\n   */\n  #define na(c) { \\\n      while (*c && !isspace((int) *c)) \\\n          c++; \\\n      while (*c && isspace((int) *c)) \\\n          c++; }\n\n50 lines later, here's a function by a totally different name, which\ndoes exactly the same thing:\n\n  /*\n\n  =item C\n\n  Returns the pointer past the current debugger command. (This is an\n  alternative to the C macro above.)\n\n  =cut\n\n  */\n\n  static const char*\n  skip_command(const char* str)\n  {\n      while (*str && !isspace((int) *str))\n          str++;\n      while (*str && isspace((int) *str))\n          str++;\n      return str;\n  }\n\nwhy, oh why? i suggest we drop the macro, but i'm willing to hear\narguments, because there may be a benefit i don't see.\n~jerry\n\n"}