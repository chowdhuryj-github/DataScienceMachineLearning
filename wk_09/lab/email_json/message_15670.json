{"category": "ham", "to_address": "Herbert Snorrason <methanal@gmail.com>", "from_address": "Nicholas Clark <nick@ccl4.org>", "subject": "Re: Is Parrot 1.0 too late?", "body": "On Wed, Apr 25, 2007 at 03:32:54PM +0000, Herbert Snorrason wrote:\n> On 25.4.2007, at 15:06, Nicholas Clark wrote:\n> >So Parrot is the odd one out here, for relying on an external  \n> >language for\n> >its extended build process. I'm not sure if this is significant.\n> \n> Isn't Parrot more comparable to JVM and CLI in this regard, in that  \n> it's a theoretically language-independent VM, while the examples you  \n> mention are very specifically tied to one single language? So it  \n> wouldn't be unexpected that it's the odd out?\n\nNot entirely\n\nPerl 5 is really Perl 5/Perl 5, Java is Java/Java, in the sense of C#/.NET\nThe distribution provides both a language and a virtual machine, although\nthat virtual machine is not really accessible apart from via the language of\nthe same name. Java toolchains are written in Java, although I admit that I\ndon't know how early Java is used during the building of a Java VM from\nsource. But I don't see a fundamental reason not to write more of the Parrot\nbuild system toolchain in a language that runs atop the Parrot VM, rather\nthan the Perl 5 VM, over the long term.\n\n(In the shorter term, the Perl 5 code works, and change for the sake of\nchange itself is make-work, and a distraction from progressing other areas,\nsuch as implementing PDDs, and exterminating bugs)\n\nNicholas Clark\n\n"}