{"category": "ham", "to_address": "\"Waichler, Scott R\" <Scott.Waichler@pnl.gov>", "from_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "subject": "Re: [R] levelplot and unequal cell sizes", "body": "On 4/25/07, Waichler, Scott R  wrote:\n> Hadley and Deepayan,\n>\n> Thank you for responding.  Here is a simple example of what I'm talking\n> about.  It is a grid that is 5 cells wide by 2 cells tall.  The width of\n> the cells in the x-direction is variable; the cells at either end have\n> width = 4 units, and the three cells in the middle have width = 2 units.\n> My objective is to have the color contour boundaries fall on the cell\n> boundaries instead of equidistant between cell nodes.  In the plot, I\n> want the cyan/blue and orange/gray boundaries to be located at the red\n> cell boundary lines.  Also, the colored regions should extend to the\n> ends of the domain (x = 0, 14).\n>\n>\n> library(lattice)\n>\n> x.node <- rep(c(2, 5, 7, 9, 12), 2)\n> y.node <- c(rep(0.5, 5), rep(1.5, 5))\n> z <- rep(1:5, 2)\n> contour.levels <- seq(0.5, 5.5, by=1)\n> x.cell.boundary <- c(0, 4, 6, 8, 10, 14)\n> contour.colors <- c(\"cyan\", \"blue\", \"green\", \"orange\", \"gray\")\n>\n> print(\n>   levelplot(z ~ x.node * y.node,\n>      panel = function(z,...) {\n>         panel.levelplot(z,...)\n>         panel.abline(v = x.cell.boundary, col=\"red\")\n>      },\n>      xlim = range(x.cell.boundary),\n>      at=contour.levels,\n>      colorkey = list(space=\"top\", width=1, height=0.9,\n>                      at=1:5,\n>                      col=contour.colors,\n>                      labels=list(labels=z, at=z)\n>                     ),\n>      col.regions=contour.colors,\n>      region = T,\n>      contour = F\n>   )\n> )\n\nYou are right, panel.levelplot is indeed assuming that the boundaries\nare between consecutive midpoints. There is no built in way around\nthat; there simply isn't enough information available to the panel\nfunction.\n\nThe cleanest solution, in principle, is to write your own panel\nfunction that ends up calling panel.polygon or grid.polygon.\npanel.levelplot is a good starting point (the only tricky part is\ngetting the colors right, almost everything else you can get rid of).\nMaybe Hadley will have a simpler solution.\n\nHere's a possible implementation using a panel function:\n\n\nmy.panel.levelplot <-\n    function (x, y, z, subscripts, at = pretty(z),\n              col.regions = regions$col, ...,\n              w, h)\n{\n    regions <- trellis.par.get(\"regions\")\n    numcol <- length(at) - 1\n    numcol.r <- length(col.regions)\n    col.regions <- if (numcol.r <= numcol)\n        rep(col.regions, length = numcol)\n    else col.regions[floor(1+(1:numcol-1) * (numcol.r-1)/(numcol-1))]\n    zcol <- findInterval(z, at, rightmost.closed = TRUE)\n    x <- as.numeric(x[subscripts])\n    y <- as.numeric(y[subscripts])\n    z <- as.numeric(z[subscripts])\n    w <- as.numeric(w[subscripts])\n    h <- as.numeric(h[subscripts])\n    zcol <- as.numeric(zcol[subscripts])\n    print(data.frame(z, x.node, y.node, w.node, h.node, col.regions[zcol]))\n    panel.rect(x = x, y = y, width = w, height = h,\n               col = col.regions[zcol], ...)\n}\n\n\n\nx.node <- rep(c(2, 5, 7, 9, 12), 2)\ny.node <- c(rep(0.5, 5), rep(1.5, 5))\nz <- rep(1:5, 2)\ncontour.levels <- seq(0.5, 5.5, by=1)\nx.cell.boundary <- c(0, 4, 6, 8, 10, 14)\ncontour.colors <- c(\"cyan\", \"blue\", \"green\", \"orange\", \"gray\")\n\n\nw.node <- rep(diff(x.cell.boundary), 2)\nh.node <- rep(1, 10)\n\n\nlevelplot(z ~ x.node * y.node, h = h.node, w = w.node,\n          panel = function(...) {\n              my.panel.levelplot(...)\n              panel.abline(v = x.cell.boundary, col=\"red\")\n          },\n          xlim = range(x.cell.boundary),\n          at=contour.levels,\n          colorkey =\n          list(space=\"top\", width=1, height=0.9,\n               at=contour.levels,\n               col=contour.colors,\n               labels=list(labels=z, at=z)),\n          col.regions=contour.colors)\n\n\n-Deepayan\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}