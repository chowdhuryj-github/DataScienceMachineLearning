{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 147: merge fetch1 changes from ronnie in\n\thttp://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 147\nrevision-id: tridge@samba.org-20070418023912-46efe420d9dd59a1\nparent: tridge@samba.org-20070418015554-f1b0faceed62a64b\nparent: ronniesahlberg@gmail.com-20070418003811-cpnrrypbovb5er9u\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Wed 2007-04-18 12:39:12 +1000\nmessage:\n  merge fetch1 changes from ronnie\nmodified:\n  tests/ctdb_fetch1.c            ctdb_fetch1.c-20070412111848-xawz6wqk9r0v8jdk-1\n    ------------------------------------------------------------\n    merged: ronniesahlberg@gmail.com-20070418003811-cpnrrypbovb5er9u\n    parent: ronniesahlberg@gmail.com-20070417232840-kmcz7vzldyneiw0u\n    committer: Ronnie sahlberg \n    branch nick: ctdb\n    timestamp: Wed 2007-04-18 10:38:11 +1000\n    message:\n      enhance fetch1 test to verify that a lock is released when a client terminates while holding the lock  and the next blocked waiting client is assigned the lock\n    ------------------------------------------------------------\n    merged: ronniesahlberg@gmail.com-20070417232840-kmcz7vzldyneiw0u\n    parent: ronniesahlberg@gmail.com-20070417081508-rhx2vqhbqqkyqtdm\n    parent: tridge@samba.org-20070417123923-99d9e4b5174f992d\n    committer: Ronnie sahlberg \n    branch nick: ctdb\n    timestamp: Wed 2007-04-18 09:28:40 +1000\n    message:\n      merge from tridge\n=== modified file 'tests/ctdb_fetch1.c'\n--- a/tests/ctdb_fetch1.c\t2007-04-17 12:16:50 +0000\n+++ b/tests/ctdb_fetch1.c\t2007-04-18 00:38:11 +0000\n@@ -25,6 +25,7 @@\n #include \"ctdb.h\"\n #include \"ctdb_private.h\"\n #include \"cmdline.h\"\n+#include \n \n #define PARENT_SRVID\t0\n #define CHILD1_SRVID\t1\n@@ -32,6 +33,20 @@\n \n int num_msg=0;\n \n+static struct timeval tp1,tp2;\n+\n+static void start_timer(void)\n+{\n+\tgettimeofday(&tp1,NULL);\n+}\n+\n+static double end_timer(void)\n+{\n+\tgettimeofday(&tp2,NULL);\n+\treturn (tp2.tv_sec + (tp2.tv_usec*1.0e-6)) - \n+\t\t(tp1.tv_sec + (tp1.tv_usec*1.0e-6));\n+}\n+\n static void message_handler(struct ctdb_context *ctdb, uint32_t srvid, \n \t\t\t    TDB_DATA data, void *private_data)\n {\n@@ -113,17 +128,23 @@\n \t/* fetch and lock the record */\n \tkey.dptr  = discard_const(\"Record\");\n \tkey.dsize = strlen((const char *)key.dptr)+1;\n+\tprintf(\"client:%d fetching the record\\n\",srvid);\n \th = ctdb_fetch_lock(ctdb_db, ctdb_db, key, &data2);\n+\tprintf(\"client:%d the record is fetched and locked\\n\",srvid);\n \tif (h == NULL) {\n \t\tprintf(\"client: ctdb_fetch_lock() failed\\n\");\n \t\texit(1);\n \t}\n \tctdb_send_message(ctdb, ctdb_get_vnn(ctdb), PARENT_SRVID, data);\n-\ttalloc_free(h);\n \n-\twhile (1) {\n+\t/* wait until parent tells us to release the lock */\n+\twhile (num_msg==1) {\n \t\tevent_loop_once(ev);\n \t}\n+\n+\tprintf(\"child %d terminating\\n\",srvid);\n+\texit(10);\n+\t   \n }\n \n /*\n@@ -227,29 +248,48 @@\n \t */\n \tdata.dptr=discard_const(\"dummy message\");\n \tdata.dsize=strlen((const char *)data.dptr)+1;\n-\tprintf(\"Send message to child 1 to fetch_lock the record\\n\");\n \tctdb_send_message(ctdb, ctdb_get_vnn(ctdb), CHILD1_SRVID, data);\n \n \t/* wait for child 1 to complete fetching and locking the record */\n \twhile (num_msg!=3) {\n \t\tevent_loop_once(ev);\n \t}\n-\tprintf(\"Child 1 has fetched and locked the record\\n\");\n \n \t/* now tell child 2 to fetch and lock the same record */\n-\tprintf(\"Send message to child 2 to fetch_lock the record\\n\");\n \tctdb_send_message(ctdb, ctdb_get_vnn(ctdb), CHILD2_SRVID, data);\n \n-\t/* wait for child 2 to complete fetching and locking the record */\n+\t/* wait a while for child 2 to complete fetching and locking the \n+\t   record, this should fail since the record is already locked\n+\t   by the first child */\n+\tstart_timer();\n+\twhile ( (end_timer() < 1.0) && (num_msg!=4) ) {\n+\t\tevent_loop_once(ev);\n+\t}\n+\tif (num_msg!=4) {\n+\t\tprintf(\"Child 2 did not get the lock since it is held by client 1:SUCCESS\\n\");\n+\t} else {\n+\t\tprintf(\"Child 2 did get the lock:FAILURE\\n\");\n+\t\texit(10);\n+\t}\n+\n+\t/* send message to child 1 to terminate, which should let child 2\n+\t   get the lock.\n+\t */\n+\tctdb_send_message(ctdb, ctdb_get_vnn(ctdb), CHILD1_SRVID, data);\n+\n+\n+\t/* wait for a final message from child 2 it has received the lock\n+\t   which indicates success */\n \twhile (num_msg!=4) {\n \t\tevent_loop_once(ev);\n \t}\n-\tprintf(\"Child 2 has fetched and locked the record\\n\");\n-\n-\n-\twhile (1) {\n-\t\tevent_loop_once(ev);\n-\t}\n+\tprintf(\"child 2 aquired the lock after child 1 terminated:SUCCESS\\n\");\n+\n+\t/* send a message to child 2 to tell it to terminate too */\n+\tctdb_send_message(ctdb, ctdb_get_vnn(ctdb), CHILD2_SRVID, data);\n+\n+\n+\tprintf(\"Test was SUCCESSFUL\\n\");\n \n \t/* shut it down */\n \ttalloc_free(ctdb);\n\n"}