{"category": "ham", "to_address": "Allison Randal <allison@perl.org>, perl6-internals@perl.org", "from_address": "tewk <tewk@tewk.com>", "subject": "Re: Initial patch for pdd15 testing.", "body": "\nAllison Randal wrote:\n> tewk wrote:\n>> Patch was to large to attach so: http://tewk.com/pdd15_testing.diff\n>>\n>> Tests currently fail because they use the \"new\" opcode to instantiate \n>> objects.\n>\n> Fixing the 'new' opcode is the first change we need to make to get \n> both object models working simultaneously. Pick one:\n>\n> - The 'new' opcode can no longer lookup string class names by type \n> number (eventually true).\n>\nI'd really like to work on permanent solutions.  So how should we \nimplement option one?\nShould we have a pmc lookup resolution order of current namespace, hll \nnamespace,  parrot namespace, and finally root namespace.\nThen all current, non-hll pmcs should be placed in the parrot namespace.\n\nNope that won't work, the parrot and root namespaces can't blead into \nhll namespaces' visibility.\n\nWe really need independent opcodes which segment the current namespace, \nhll namespaces, and the root parrot namespace.\n\nI think we should have:\nnew_cur  - resolves using the current namespace\nnew_hll   - resolves pmcs and classes using the hll namespace\nnew         - resolves using the parrot namespace.\n\nwe probably need the same thing for newclass.\n\nnewclass_cur\nnewclass_hll\nnewclass\n\nSecond issue:\n\nPDD15 registers methods in the class.  So methods defined using :method \nin the class namespace aren't found by the find_method.\nSo:\n1: We force compiler writers to make add_method calls for every method \nand drop :method\n2: After running :init and :load subs we auto-call add_method for \nmethods defined in pir with :method. (this has nasty corner cases)\n       What do we do about evaled :methods, repeat the same auto-call \ntechnique after ever eval?\n3: We modify the Class PMC's find_method to look in the namespace for \nmethod and lazily call add_method.\n\nComments, corrections welcome,\n\nKevin\n> - The PDD 15 object implementation needs to register a type number for \n> its classes (as a temporary measure to smooth over integration).\n>\n> I recommend the second option for now.\n>\n>> $P0 = get_class \"Classname\"\n>> $P1 = $P0.'new'();\n>\n> This will also work, and will provide more syntactic sugar than the \n> 'new' opcode (e.g. named parameters for the initializer).\n>\n> Allison\n\n"}