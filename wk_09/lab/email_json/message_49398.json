{"category": "ham", "to_address": "Beginners List <beginners@perl.org>", "from_address": "\"Mumia W.\" <mumia.w.18.spam+nospam@earthlink.net>", "subject": "Re: character encoding & regex", "body": "On 06/16/2007 05:01 PM, Tom Allison wrote:\n> Mumia W. wrote:\n>>\n>> On 06/16/2007 02:29 PM, Tom Allison wrote:\n>>> I'm trying to do some regular expression on strings in email. \n>>> [...]\n>>> And with unicode and locales and bytes it all gets extremely ugly.\n>>>\n>>> I found something that SpamAssassin uses to convert all this \"goo\" \n>>> into a repeatable set of characters (which is all I'm really after) \n>>> by running something that looks like this:\n>>>\n>>\n>> What do you mean by a \"repeatable set of characters\"? Unicode \n>> characters are repeatable.\n> \n> The fundamental problem is that this:\n> \n> $string =~ /(\\w\\w\\w+)/\n> returns nothing because unicode/utf8/Big5 characters are not considered \n> 'words'.\n> [...]\n\nMany UTF8 characters are words, and many are not. Consider this program \n(written in utf-8):\n\n#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse encoding 'utf8', 'STDOUT', 'utf8';\n\nmy $string2 = '\\u263a \\u8184 \\u8185 \\u8186 \\u263a\n\u00e1 \u00e9 \u00ed \u00f3 \u00fa \u00b6 | \\u2717 \\u2237 \\u0435 \\u307f \\u3080 \\u3082\n\u00e4 \u00eb \u00ef \u00f6 \u00fc \u00b5  \u00b1 \u00d7 \\u1e41 \u00b7 ';\n\nmy @wchars = $string2 =~ /(\\w)/g;\nprint \"@wchars\\n\";\n\nexit;\n__END__\n\nMy output for this program is this:\n\n\\u8184 \\u8185 \\u8186 \u00e1 \u00e9 \u00ed \u00f3 \u00fa \\u0435 \\u307f \\u3080 \\u3082 \u00e4 \u00eb \u00ef \u00f6 \u00fc \u00b5 \\u1e41\n\nNotice that some characters made it and some didn't. In order to do this \nright, I had to enable a utf8 locale in my Debian O/S [ :-) ]. Then I \nset LANG=en_US.UTF-8 before writing the program in vim.\n\nFurthermore, I had to tell Perl that the program was written in utf8 \nusing the 'encoding' module.\n\nBasically, the '\\w' in a regular expression is sensitive to the current \nlocale, and if utf8 is enabled in the locale, '\\w' will (probably) know \nwhich unicode characters are word characters and which are not.\n\nBTW, I don't know Chinese or Korean. I just know how to play with vim \ndigraphs enough to enter random foreign characters--sort of like a \nmonkey banging on a computer keyboard :-)\n\n> And I don't really care to get exactly the right character.\n> I could just as easily use the character ascii values, but the regex for \n> that is not something I'm familiar with.\n> \n> I got this far:\n> my $string = chr(0x263a);\n> my @A = unpack \"C*\", $string;\n> \n> # @A = ( 226, 152, 186 )\n> \n> At least this is consistent.\n> But there are a lot of characters that I want to break on and I don't \n> know that I can do this.  The best I can come up with is:\n> \n> my $string = chr(0x263a);\n> $string = $string .' '. $string;\n> print $string,\"\\n\";\n> foreach my $str (split / / ,$string) {\n>     my @A = unpack \"C*\", $str;\n>     print \"FOO: @A\\n\";\n> }\n> exit;\n> \n> Using the above I can get a consistent array of characters but I don't \n> know if this will work for any character encoding.  I guess this is part \n> of my question/quandry.\n> \n> One thing I'm not sure about is if the MIME::Parser is even decoding \n> things sanely.  I suspect it isn't because I get '?' a lot.\n> \n> I installed urxvt from my Debian installation [ :) ] and I get...\n> \n\n:-)\n\n> Wide character in print at unicode_capture.pl line 5.\n> \u00e2\u00ba\n> Wide character in print at unicode_capture.pl line 9.\n> \u00e2\u00ba \u00e2\u00ba\n> FOO: 226 152 186\n> FOO: 226 152 186\n> \n> However it doesn't print the boxes, which is good.\n> \n> \n\nPut \"use encoding 'iso-8859-1', STDOUT => 'utf8';\" at the top of your \nfile. Also read up on the encoding module (perldoc encoding).\n\nThis will probably work a lot better if you've configured your system to \nsupport a utf8 locale:\n\nhttp://www.debian.org/doc/manuals/reference/ch-tune.en.html#s-activate-locales\n\nBTW, you're using a great O/S ;-)\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}