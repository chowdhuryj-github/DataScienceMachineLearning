{"category": "ham", "to_address": "Damian Conway <damian@conway.org>", "from_address": "Mark Overmeer <mark@overmeer.net>", "subject": "Re: Referring to source code within Perldoc: the new A<> code", "body": "* Damian Conway (damian@conway.org) [070620 05:17]:\n> Feedback and suggestions are most welcome.\n\nClear and usable, in the boundaries you set to yourself.\n\nJust my thoughts.  A lot of questions and speculation, you do\nnot need to answer all.  I'll try to only comment on this design,\nand not restart our usual discussion.\n\n> role Transaction {\n> =alias class  A\n> \n>    state Int $trans_counter;\n> =alias V  A\n> \n> =DESCRIPTION\n> The A variable is used to track the total number of transactions\n> active at any one time. The value of A is incremented by the\n> A C submethod and decremented by the A destructor.\n\nThis is exactly the form of documentation you do *not* want the\nuser to write, for various reasons:\n\n  * it is stylish quite bad to repeat words like 'variable', 'class',\n    or 'method' in nearly every sentence.  It makes manual-pages\n    painfully unpleasant.\n\n  * The explicit naming of the class name in method and attribute\n    descriptions is in general a bad idea: by inheritance, you get\n    sub-classes which also provide this method.  In the people's\n    mind (I mean \"normal people\", not our \"perl guru\"), this\n    requires continuous translations which distracts from the message.\n\n class Transaction\nThe transaction class defines the following methods and attributes.\nThe $trans_counter variable is used to track the total number of\n transactions active at any one time. The value of $trans_counter is\n incremented by the Transaction BUILD submethod and decremented by\n the Transaction destructor.\nThe $max variable reports the number of Transaction objects which\n are allowed to be processed in parallel.  This is a constant value,\n which defaults to 10.\n \n    and so on.  For many pages long.  What, IMO, you want is a clean\n    and condensed way of expressing.  At least I would prefer output\n    in this shape:\n\n class Transaction\nThe transaction class defines the following methods and attributes.\n\nprivate attribute $trans_counter\ntracks the number of transactions actions active at any one time. The\n     value is incremented by BUILD() and decremented at Transaction\n     destruction.\npublic attribute $max (read-only, default 10)\nthe number of transactions are allowed to be processed in\n     parallel.\n\n    Concise, correct, and complete.\n    Of course, adapted to the features of the output channel, using\n    templates and style-sheets in the document generating tools.\n\n  * How do you see this syntactically work in combination with the\n    item list? At least the POD(5) needed that.  I need a combined\n    example.\n\n  * Having aliases is pratical, for referencing.  However, in this\n    latter example it is used to help the programmer to shoot himself\n    in the foot.  If you allow people to say \"class\" each time they\n    mean \"role\", or \"function\" where it is \"method\", then on the long\n    run people will start making avoidable programming mistakes.\n\n    In the chosen approach, this abuse cannot be avoidable. But it\n    may be a wise not to promote it by using it as example.\n\n  * Using ambient back-references this way probably requires a\n    two-pass document generator. AFAIK this is not required for the\n    design of POD6 so far.\n\n  * the A<(..)> syntax is nice, but has a few dangers.  Serious\n    problems.  Your examples are a bit brief.  A little larger:\n\n         method eat(Food $meal) {...}\n\n       =for DESCRIPTION\n       The A() method has the following argument list: A<(..)>\n\n    Now the method gets implemented:\n\n         method eat(Food $meal) {\n            if($manger.isFull) { $manger.clean }\n         }\n\n       =for DESCRIPTION\n       The A() method has the following argument list: A<(..)>\n\n    Oops... now the argument list became (without warning)\n    \"$manger.isFull\"   So, either you impose a strict doc order, forcing\n    people into \"your style\", or people have to use an alias everywhere,\n    bulking the file. More subtle examples of this problem can be\n    created, for instance when the method defines a return type\n\n  * In the manual-page of my sub-class, I want to refer to the\n    documentation of specific attributes and methods.  How?\n    Can I also refer to elements in distributions which are not\n    mine, so where I cannot add X<> or such?  For instance,\n    when I inherit from a core Perl class?\n\n  * In my sub-class, I want to enlist automatically the methods\n    and attributes which are inherited.  Automatically of course,\n    because I want to avoid mistakes.  In case of multi-level\n    inheritance, some way I need to know and show where each is\n    defined. How?\n    For instance, if your look at IO::File in Perl5, it defines\n    some own method, but then simply says: see also IO::Handle\n    and IO::Seekable.  IO::Handle says: see also perlfunc and\n    perlvar.  The more extended your OO model is, (Perl6's\n    structure is probably much more extended), the more levels\n    of hierarchy you get.  Are users able to understand this?\n    Are developers able to maintain manual interface description\n    lists without mistakes?\n    Is the shown syntax sufficient for tools to create it\n    automatically?  As decided, of course without looking at\n    the perl code itself.\n\nYour design goal of A<> is to avoid replication of code information,\nin which you succeeded.  Now your write\n\n         method eat(Food $meal) {...}\n\n     =for DESCRIPTION\n     The A() method has the following argument list: A<(..)>\n\nIn stead of\n\n         method eat(Food $meal) {...}\n\n     =for DESCRIPTION\n     The eat() method has the following argument list: Food $meal. \n\nWhat I would like is to get rit of the replication of that description\nline as well, using back-end specific templates/style-sheets.\n\nWhat about:\n\n      =definition\n         method eat(Food $meal) {...}\n\n      =for DESCRIPTION\n      ...\n\nIn this case, the Perl and POD are using the text in the file\nin an overlapping way, but still the Perl6 and POD6 parsers are\nfully seperate.  This will open a whole new realm of possible\nsimplifications.\n-- \nRegards,\n\n               MarkOv\n\n------------------------------------------------------------------------\n       Mark Overmeer MSc                                MARKOV Solutions\n       Mark@Overmeer.net                          solutions@overmeer.net\nhttp://Mark.Overmeer.net                   http://solutions.overmeer.net\n\n"}