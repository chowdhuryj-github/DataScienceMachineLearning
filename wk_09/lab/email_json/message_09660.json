{"category": "ham", "to_address": "chromatic <chromatic@wgz.org>", "from_address": "Joshua Isom <jrisom@gmail.com>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "\nOn Apr 18, 2007, at 3:48 PM, chromatic wrote:\n\n> On Wednesday 18 April 2007 13:34, Alek Storm wrote:\n>\n>> Vtable methods defined in C are visible from C.\n>\n> Of course, otherwise nothing would be able to call them.\n>\n>> Therefore, it makes\n>> sense that vtable methods defined in PIR are visible from PIR, at\n>> least by default.\n>\n> That makes no sense to me.  Are you saying that vtable methods defined \n> in a\n> specific language should be visible to that language by default?\n>\n> If that's true, then users have to *know* the implementation details \n> of vtable\n> methods.  Is it in C code or is it in PIR code?\n>\n> That's precisely what vtable methods protect against!  That's why \n> they're in\n> vtables.  That's why they're *not* visible as methods to PIR code.\n>\n>> Making :vtable imply :anon might be unintuitive to\n>> users.  Besides that, there's still the problem of :method meaning two\n>> different things with that implementation.  Basically, in a non-vtable\n>> sub, there is the :anon flag to detach it from the namespace, but in a\n>> vtable sub, it's detached by default, and the :method flag attaches it\n>> to the namespace.  Reversal bad.  Continuity good.\n>\n> I can't honestly think of a case where you want :vtable AND :method on \n> a\n> vtable method, with the caveat that right now you *must* do that\n> because :vtable doesn't cause Parrot to include the invocant in the \n> proper\n> register on calls.\n>\n> Fixing that makes these problems all go away.\n>\n> -- c\n>\n\nAnd if vtables are anonymous by default, it'll make it possible to have \na vtable and a method, with the same name.  I think it's more likely to \nbe a good thing than a bad thing, but I imagine it will at some point \ncause a problem for someone, other than confusion.\n\nNo one ever said the logic of a virtual machine intending to support \nall dynamic languages would be simple.\n\n"}