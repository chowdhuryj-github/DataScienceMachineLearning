{"category": "ham", "to_address": "sugar@laptop.org", "from_address": "Simon McVittie <simon.mcvittie@collabora.co.uk>", "subject": "[sugar] [PATCH] services/presence/server_plugin: When creating a\n\troom, make it non-anonymous.", "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOtherwise clients joining the room won't be able to convert other clients'\nchannel-specific handles into global handles in order to make Buddy objects,\nbecause they're not the moderator of the room.\n- ---\n services/presence/server_plugin.py |   47 ++++++++++++++++++++++++++++++-----\n 1 files changed, 40 insertions(+), 7 deletions(-)\n\ndiff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py\nindex 6b21888..18b4776 100644\n- --- a/services/presence/server_plugin.py\n+++ b/services/presence/server_plugin.py\n@@ -30,12 +30,14 @@ import psutils\n from telepathy.client import ConnectionManager, ManagerRegistry, Connection, Channel\n from telepathy.interfaces import (\n     CONN_MGR_INTERFACE, CONN_INTERFACE, CHANNEL_TYPE_CONTACT_LIST, CHANNEL_INTERFACE_GROUP, CONN_INTERFACE_ALIASING,\n- -    CONN_INTERFACE_AVATARS, CONN_INTERFACE_PRESENCE, CHANNEL_TYPE_TEXT, CHANNEL_TYPE_STREAMED_MEDIA)\n+    CONN_INTERFACE_AVATARS, CONN_INTERFACE_PRESENCE, CHANNEL_TYPE_TEXT, CHANNEL_TYPE_STREAMED_MEDIA,\n+    PROPERTIES_INTERFACE)\n from telepathy.constants import (\n     CONNECTION_HANDLE_TYPE_NONE, CONNECTION_HANDLE_TYPE_CONTACT,\n     CONNECTION_STATUS_CONNECTED, CONNECTION_STATUS_DISCONNECTED, CONNECTION_STATUS_CONNECTING,\n     CONNECTION_HANDLE_TYPE_LIST, CONNECTION_HANDLE_TYPE_CONTACT, CONNECTION_HANDLE_TYPE_ROOM,\n- -    CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED)\n+    CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED,\n+    PROPERTY_FLAG_WRITE)\n \n CONN_INTERFACE_BUDDY_INFO = 'org.laptop.Telepathy.BuddyInfo'\n CONN_INTERFACE_ACTIVITY_PROPERTIES = 'org.laptop.Telepathy.ActivityProperties'\n@@ -422,12 +424,43 @@ class ServerPlugin(gobject.GObject):\n                 reply_handler=self._set_self_avatar_cb,\n                 error_handler=lambda *args: self._log_error_cb(\"setting avatar\", *args))\n \n- -    def _join_activity_create_channel_cb(self, activity_id, signal, handle, userdata, chan_path):\n- -        channel = Channel(self._conn._dbus_object._named_service, chan_path)\n+    def _join_activity_channel_props_set_cb(self, activity_id, signal, handle, channel, userdata):\n         self._joined_activities.append((activity_id, handle))\n         self._set_self_activities()\n         self.emit(signal, activity_id, channel, None, userdata)\n \n+    def _join_activity_channel_props_listed_cb(self, activity_id, signal, handle, channel, userdata, props, prop_specs):\n+\n+        props_to_set = []\n+        for ident, name, sig, flags in prop_specs:\n+            value = props.pop(name, None)\n+            if value is not None:\n+                if flags & PROPERTY_FLAG_WRITE:\n+                    props_to_set.append((ident, value))\n+                # FIXME: else error, but only if we're creating the room?\n+        # FIXME: if props is nonempty, then we want to set props that aren't\n+        # supported here - raise an error?\n+\n+        if props_to_set:\n+            channel[PROPERTIES_INTERFACE].SetProperties(props_to_set,\n+                reply_handler=lambda: self._join_activity_channel_props_set_cb(activity_id, signal, handle, channel, userdata),\n+                error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'SetProperties(%r)' % props_to_set, e))\n+        else:\n+            self._join_activity_channel_props_set_cb(activity_id, signal, handle, channel, userdata)\n+\n+    def _join_activity_create_channel_cb(self, activity_id, signal, handle, userdata, chan_path):\n+        channel = Channel(self._conn._dbus_object._named_service, chan_path)\n+        props = {\n+            'anonymous': False,         # otherwise buddy resolution breaks\n+            'invite-only': False,       # XXX: should be True in future\n+            #'name': ...                # XXX: set from activity name?\n+            'persistent': False,        # vanish when there are no members\n+            'private': False,           # XXX: should be True unless public\n+        }\n+        channel[PROPERTIES_INTERFACE].ListProperties(\n+            reply_handler=lambda prop_specs: self._join_activity_channel_props_listed_cb(activity_id, signal, handle, channel, userdata, props, prop_specs),\n+            error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'ListProperties', e))\n+\n     def _join_activity_get_channel_cb(self, activity_id, signal, userdata, handles):\n         if not self._activities.has_key(activity_id):\n             self._activities[activity_id] = handles[0]\n@@ -441,10 +474,10 @@ class ServerPlugin(gobject.GObject):\n         self._conn[CONN_INTERFACE].RequestChannel(CHANNEL_TYPE_TEXT,\n             CONNECTION_HANDLE_TYPE_ROOM, handles[0], True,\n             reply_handler=lambda *args: self._join_activity_create_channel_cb(activity_id, signal, handles[0], userdata, *args),\n- -            error_handler=lambda *args: self._join_error_cb(activity_id, signal, userdata, *args))\n+            error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'RequestChannel(TEXT, ROOM, %r, True)' % handles[0], e))\n \n- -    def _join_error_cb(self, activity_id, signal, userdata, err):\n- -        e = Exception(\"Error joining/sharing activity %s: %s\" % (activity_id, err))\n+    def _join_error_cb(self, activity_id, signal, userdata, where, err):\n+        e = Exception(\"Error joining/sharing activity %s: (%s): %s\" % (activity_id, err))\n         _logger.debug(str(e))\n         self.emit(signal, activity_id, None, e, userdata)\n \n- -- \n1.5.2-rc3.GIT\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.6 (GNU/Linux)\nComment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net\n\niD8DBQFGUxElWSc8zVUw7HYRApw4AJwO+/ndtybiTFPQEI35meJuyPzN5wCfUQWo\nEafNRdOl/ITBL5VY7N34abk=\n=piEB\n-----END PGP SIGNATURE-----\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}