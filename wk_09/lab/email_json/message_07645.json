{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11894: Support building Samba 3 test environments. in\n\tfile:///home/jelmer/bzr.samba/SAMBA_4_0/", "body": "At file:///home/jelmer/bzr.samba/SAMBA_4_0/\n\n------------------------------------------------------------\nrevno: 11894\nrevision-id: jelmer@samba.org-20070417121100-58zt3zyuny95tia2\nparent: svn-v2:22300@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0\ncommitter: Jelmer Vernooij \nbranch nick: SAMBA_4_0\ntimestamp: Tue 2007-04-17 14:11:00 +0200\nmessage:\n  Support building Samba 3 test environments.\nmodified:\n  source/script/tests/Samba3.pm  svn-v2:21909@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fscript%2ftests%2fSamba3.pm\n  source/script/tests/selftest.pl svn-v2:20693@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fscript%2ftests%2fselftest.pl\n=== modified file 'source/script/tests/Samba3.pm'\n--- a/source/script/tests/Samba3.pm\t2007-04-11 03:45:39 +0000\n+++ b/source/script/tests/Samba3.pm\t2007-04-17 12:11:00 +0000\n@@ -6,120 +6,288 @@\n package Samba3;\n \n use strict;\n+use Cwd qw(abs_path);\n use FindBin qw($RealBin);\n-use POSIX;\n-\n-sub new($$$) {\n-\tmy ($classname, $bindir, $setupdir) = @_;\n-\tmy $self = { bindir => $bindir, setupdir => $setupdir };\n+\n+sub binpath($$)\n+{\n+\tmy ($self, $binary) = @_;\n+\n+\tif (defined($self->{bindir})) {\n+\t\treturn \"$self->{bindir}/$binary\";\n+\t}\n+\n+\treturn $binary;\n+}\n+\n+sub new($$) {\n+\tmy ($classname, $bindir) = @_;\n+\tmy $self = { bindir => $bindir };\n \tbless $self;\n \treturn $self;\n }\n \n-sub check_or_start($$$) \n-{\n-\tmy ($self, $env_vars, $max_time) = @_;\n-\treturn 0 if ( -p $env_vars->{SMBD_TEST_FIFO});\n-\n-\tunlink($env_vars->{SMBD_TEST_FIFO});\n-\tPOSIX::mkfifo($env_vars->{SMBD_TEST_FIFO}, 0700);\n+sub teardown_env($$)\n+{\n+\tmy ($self, $envvars) = @_;\n+\n+\t$self->samba3_stop_sig_term($envvars->{PIDDIR});\n+\t$self->samba3_stop_sig_kill($envvars->{PIDDIR});\n+\n+\treturn 0;\n+}\n+\n+sub setup_env($$$)\n+{\n+\tmy ($self, $envname, $path) = @_;\n+\t\n+\tif ($envname eq \"dc\") {\n+\t\treturn $self->setup_dc(\"$path/dc\");\n+\t} else {\n+\t\tdie(\"Samba4 can't provide environment '$envname'\");\n+\t}\n+}\n+\n+sub setup_dc($$)\n+{\n+\tmy ($self, $path) = @_;\n+\n+\tmy $vars = $self->provision($path);\n+\n+\t$self->check_or_start($vars, $ENV{NMBD_MAXTIME} or 2700, $ENV{SMBD_MAXTIME} or 2700);\n+\n+\t$self->wait_for_start($vars);\n+\n+\treturn $vars;\n+}\n+\n+sub stop($)\n+{\n+\tmy ($self) = @_;\n+}\n+\n+sub samba3_stop_sig_term($$) {\n+\tmy ($self, $piddir) = @_;\n+\tmy $ret = 0;\n+\tkill(\"USR1\", `cat $piddir/timelimit.nmbd.pid`) or \\\n+\t\tkill(\"ALRM\", `cat $piddir/timelimit.nmbd.pid`) or $ret++;\n+\n+\tkill(\"USR1\", `cat $piddir/timelimit.smbd.pid`) or \\\n+\t\tkill(\"ALRM\", `cat $piddir/timelimit.smbd.pid`) or $ret++;\n+\n+\treturn $ret;\n+}\n+\n+sub samba3_stop_sig_kill($$) {\n+\tmy ($self, $piddir) = @_;\n+\tkill(\"ALRM\", `cat $piddir/timelimit.nmbd.pid`); \n+\tkill(\"ALRM\", `cat $piddir/timelimit.smbd.pid`);\n+\treturn 0;\n+}\n+\n+sub check_or_start($$$$) {\n+\tmy ($self, $env_vars, $nmbd_maxtime, $smbd_maxtime) = @_;\n+\n+\tunlink($env_vars->{NMBD_TEST_LOG});\n+\tprint \"STARTING NMBD...\";\n+\tmy $pid = fork();\n+\tif ($pid == 0) {\n+\t\topen STDOUT, \">$env_vars->{NMBD_TEST_LOG}\";\n+\t\topen STDERR, '>&STDOUT';\n+\t\n+\t\t$ENV{MAKE_TEST_BINARY} = $self->binpath(\"nmbd\");\n+\t\texec(\"timelimit\", $nmbd_maxtime, $self->binpath(\"nmbd\"), \"-F\", \"-S\", \"--no-process-group\", \"-d0\" ,\"-s\", $env_vars->{SERVERCONFFILE}) or die(\"Unable to start nmbd\");\n+\t}\n+\topen(PID, \">$env_vars->{PIDDIR}/timelimit.nmbd.pid\");\n+\tprint PID $pid;\n+\tclose(PID);\n+\tprint \"DONE\\n\";\n+\n \tunlink($env_vars->{SMBD_TEST_LOG});\n-\t\n-\tmy $valgrind = \"\";\n-\tif (defined($ENV{SMBD_VALGRIND})) {\n-\t\t$valgrind = $ENV{SMBD_VALGRIND};\n-\t} \n-\n-\tprint \"STARTING SMBD... \";\n+\tprint \"STARTING SMBD...\";\n \tmy $pid = fork();\n \tif ($pid == 0) {\n-\t\topen STDIN, $env_vars->{SMBD_TEST_FIFO};\n \t\topen STDOUT, \">$env_vars->{SMBD_TEST_LOG}\";\n \t\topen STDERR, '>&STDOUT';\n-\t\tmy $optarg = \"\";\n-\t\tif (defined($max_time)) {\n-\t\t\t$optarg = \"--maximum-runtime=$max_time \";\n-\t\t}\n-\t\tmy $ret = system(\"$valgrind $self->{bindir}/smbd $optarg -s $env_vars->{CONFFILE} -M single -i --leak-report-full\");\n-\t\tif ($? == -1) {\n-\t\t\tprint \"Unable to start smbd: $ret: $!\\n\";\n-\t\t\texit 1;\n-\t\t}\n-\t\tunlink($env_vars->{SMBD_TEST_FIFO});\n-\t\tmy $exit = $? >> 8;\n-\t\tif ( $ret == 0 ) {\n-\t\t\tprint \"smbd exits with status $exit\\n\";\n-\t\t} elsif ( $ret & 127 ) {\n-\t\t\tprint \"smbd got signal \".($ret & 127).\" and exits with $exit!\\n\";\n-\t\t} else {\n-\t\t\t$ret = $? >> 8;\n-\t\t\tprint \"smbd failed with status $exit!\\n\";\n-\t\t}\n-\t\texit $exit;\n+\t\n+\t\t$ENV{MAKE_TEST_BINARY} = $self->binpath(\"smbd\");\n+\t\texec(\"timelimit\", $nmbd_maxtime, $self->binpath(\"smbd\"), \"-F\", \"-S\", \"--no-process-group\", \"-d0\" ,\"-s\", $env_vars->{SERVERCONFFILE}) or die(\"Unable to start nmbd\");\n \t}\n+\topen(PID, \">$env_vars->{PIDDIR}/timelimit.smbd.pid\");\n+\tprint PID $pid;\n+\tclose(PID);\n \tprint \"DONE\\n\";\n \n-\topen(DATA, \">$env_vars->{SMBD_TEST_FIFO}\");\n-\n-\treturn $pid;\n-}\n-\n-sub wait_for_start($)\n-{\n-\t# give time for nbt server to register its names\n-\tprint \"delaying for nbt name registration\\n\";\n-\n-\t# This will return quickly when things are up, but be slow if we \n-\t# need to wait for (eg) SSL init \n-\tsystem(\"bin/nmblookup $ENV{CONFIGURATION} $ENV{SERVER}\");\n-\tsystem(\"bin/nmblookup $ENV{CONFIGURATION} -U $ENV{SERVER} $ENV{SERVER}\");\n-\tsystem(\"bin/nmblookup $ENV{CONFIGURATION} $ENV{SERVER}\");\n-\tsystem(\"bin/nmblookup $ENV{CONFIGURATION} -U $ENV{SERVER} $ENV{NETBIOSNAME}\");\n-\tsystem(\"bin/nmblookup $ENV{CONFIGURATION} $ENV{NETBIOSNAME}\");\n-\tsystem(\"bin/nmblookup $ENV{CONFIGURATION} -U $ENV{SERVER} $ENV{NETBIOSNAME}\");\n-\tsystem(\"bin/nmblookup $ENV{CONFIGURATION} $ENV{NETBIOSNAME}\");\n-\tsystem(\"bin/nmblookup $ENV{CONFIGURATION} -U $ENV{SERVER} $ENV{NETBIOSNAME}\");\n-}\n-\n-sub provision($$$)\n-{\n-\tmy ($self, $environment, $prefix) = @_;\n+\treturn 0;\n+}\n+\n+sub create_clientconf($$$)\n+{\n+\tmy ($self, $prefix, $domain) = @_;\n+\n+\tmy $lockdir = \"$prefix/locks\";\n+\tmy $logdir = \"$prefix/logs\";\n+\tmy $piddir = \"$prefix/pid\";\n+\tmy $privatedir = \"$prefix/private\";\n+\tmy $scriptdir = \"$RealBin/..\";\n+\tmy $conffile = \"$prefix/smb.conf\";\n+\n+\tmy $torture_interfaces='127.0.0.6/8,127.0.0.7/8,127.0.0.8/8,127.0.0.9/8,127.0.0.10/8,127.0.0.11/8';\n+\topen(CONF, \">$conffile\");\n+\tprint CONF \"\n+[global]\n+\tworkgroup = $domain\n+\n+\tprivate dir = $privatedir\n+\tpid directory = $piddir\n+\tlock directory = $lockdir\n+\tlog file = $logdir/log.\\%m\n+\tlog level = 0\n+\n+\tname resolve order = bcast\n+\n+\tnetbios name = TORTURE_6\n+\tinterfaces = $torture_interfaces\n+\tpanic action = $scriptdir/gdb_backtrace \\%d %\\$(MAKE_TEST_BINARY)\n+\n+\tpassdb backend = tdbsam\n+\t\";\n+\tclose(CONF);\n+}\n+\n+sub provision($$)\n+{\n+\tmy ($self, $prefix) = @_;\n+\n+\t##\n+\t## setup the various environment variables we need\n+\t##\n+\n \tmy %ret = ();\n-\tprint \"PROVISIONING...\";\n-\topen(IN, \"$RealBin/mktestdc.sh $prefix|\") or die(\"Unable to setup\");\n-\twhile () {\n-\t\tdie (\"Error parsing `$_'\") unless (/^([A-Z0-9a-z_]+)=(.*)$/);\n-\t\t$ret{$1} = $2;\n-\t}\n-\tclose(IN);\n-\n-\t$ret{SMBD_TEST_FIFO} = \"$prefix/smbd_test.fifo\";\n+\tmy $server = \"localhost2\";\n+\tmy $server_ip = \"127.0.0.2\";\n+\tmy $username = `PATH=/usr/ucb:$ENV{PATH} whoami`;\n+\tmy $password = \"test\";\n+\n+\tmy $srcdir=\"$RealBin/../..\";\n+\tmy $scriptdir=\"$srcdir/script/tests\";\n+\tmy $prefix_abs = abs_path($prefix);\n+\tmy $shrdir=\"$prefix_abs/tmp\";\n+\tmy $libdir=\"$prefix_abs/lib\";\n+\tmy $piddir=\"$prefix_abs/pid\";\n+\tmy $conffile=\"$libdir/client.conf\";\n+\tmy $serverconffile=\"$libdir/server.conf\";\n+\tmy $privatedir=\"$prefix_abs/private\";\n+\tmy $lockdir=\"$prefix_abs/lockdir\";\n+\tmy $logdir=\"$prefix_abs/logs\";\n+\tmy $domain = \"SAMBA-TEST\";\n+\n+\t## \n+\t## create the test directory layout\n+\t##\n+\tprint \"CREATE TEST ENVIRONMENT IN '$prefix'...\";\n+\tsystem(\"/bin/rm -rf $prefix/*\");\n+\tmkdir($_) foreach($privatedir,$libdir,$piddir,$lockdir,$logdir);\n+\tmy $tmpdir = \"$prefix_abs/tmp\";\n+\tmkdir($tmpdir);\n+\tchmod 0777, $tmpdir;\n+\n+\topen(CONF, \">$serverconffile\");\n+\tprint CONF \"\n+[global]\n+\tworkgroup = $domain\n+\n+\tprivate dir = $privatedir\n+\tpid directory = $piddir\n+\tlock directory = $lockdir\n+\tlog file = $logdir/log.\\%m\n+\tlog level = 0\n+\n+\tname resolve order = bcast\n+\n+\tnetbios name = $server\n+\tinterfaces = $server_ip/8\n+\tbind interfaces only = yes\n+\tpanic action = $scriptdir/gdb_backtrace %d %\\$(MAKE_TEST_BINARY)\n+\n+\tpassdb backend = tdbsam\n+\n+\t; Necessary to add the build farm hacks\n+\tadd user script = /bin/false\n+\tadd machine script = /bin/false\n+\n+\tkernel oplocks = no\n+\tkernel change notify = no\n+\n+\tsyslog = no\n+\tprinting = bsd\n+\tprintcap name = /dev/null\n+\n+[tmp]\n+\tpath = $tmpdir\n+\tread only = no\n+\tsmbd:sharedelay = 100000\n+\tmap hidden = yes\n+\tmap system = yes\n+\tcreate mask = 755\n+[hideunread]\n+\tcopy = tmp\n+\thide unreadable = yes\n+[hideunwrite]\n+\tcopy = tmp\n+\thide unwriteable files = yes\n+[print1]\n+\tcopy = tmp\n+\tprintable = yes\n+\tprinting = test\n+[print2]\n+\tcopy = print1\n+[print3]\n+\tcopy = print1\n+[print4]\n+\tcopy = print1\n+\t\";\n+\tclose(CONF);\n+\n+\t##\n+\t## create a test account\n+\t##\n+\n+\topen(PWD, \"|\".$self->binpath(\"smbpasswd\").\" -c $conffile -L -s -a $username\");\n+\tprint PWD \"$password\\n$password\\n\";\n+\tclose(PWD) or die(\"Unable to set password for test account\");\n+\n+\tprint \"DONE\\n\";\n+\n+\t$ret{NMBD_TEST_LOG} = \"$prefix/nmbd_test.log\";\n \t$ret{SMBD_TEST_LOG} = \"$prefix/smbd_test.log\";\n+\t$ret{CONFIGURATION} =\"-s $conffile\";\n+\t$ret{SERVER} = $server;\n+\t$ret{USERNAME} = $username;\n+\t$ret{DOMAIN} = $domain;\n+\t$ret{NETBIOSNAME} = $server;\n+\t$ret{PASSWORD} = $password;\n+\t$ret{PIDDIR} = $piddir;\n \treturn \\%ret;\n }\n \n-sub stop($)\n-{\n-\tmy ($self) = @_;\n-\n-\tclose(DATA);\n-\n-\tsleep(2);\n-\n-\tmy $failed = $? >> 8;\n-\n-\tif (-f \"$ENV{PIDDIR}/smbd.pid\" ) {\n-\t\topen(IN, \"<$ENV{PIDDIR}/smbd.pid\") or die(\"unable to open smbd pid file\");\n-\t\tkill 9, ;\n-\t\tclose(IN);\n-\t}\n-\n-\treturn $failed;\n-}\n-\n-sub setup_env($$)\n-{\n-\tmy ($self, $name) = @_;\n+sub wait_for_start($$)\n+{\n+\tmy ($self, $envvars) = @_;\n+\n+\t# give time for nbt server to register its names\n+\tprint \"delaying for nbt name registration\\n\";\n+\tsleep(10);\n+\t# This will return quickly when things are up, but be slow if we need to wait for (eg) SSL init \n+\tsystem(\"bin/nmblookup $envvars->{CONFIGURATION} -U $envvars->{SERVER_IP} __SAMBA__\");\n+\tsystem(\"bin/nmblookup $envvars->{CONFIGURATION} __SAMBA__\");\n+\tsystem(\"bin/nmblookup $envvars->{CONFIGURATION} -U 127.255.255.255 __SAMBA__\");\n+\tsystem(\"bin/nmblookup $envvars->{CONFIGURATION} -U $envvars->{SERVER_IP} $envvars->{SERVER}\");\n+\tsystem(\"bin/nmblookup $envvars->{CONFIGURATION} $envvars->{SERVER}\");\n+\t# make sure smbd is also up set\n+\tprint \"wait for smbd\\n\";\n+\tsystem(\"bin/smbclient $envvars->{CONFIGURATION} -L $envvars->{SERVER_IP} -U% -p 139 | head -2\");\n+\tsystem(\"bin/smbclient $envvars->{CONFIGURATION} -L $envvars->{SERVER_IP} -U% -p 139 | head -2\");\n }\n \n 1;\n\n=== modified file 'source/script/tests/selftest.pl'\n--- a/source/script/tests/selftest.pl\t2007-04-17 00:30:01 +0000\n+++ b/source/script/tests/selftest.pl\t2007-04-17 12:11:00 +0000\n@@ -133,6 +133,7 @@\n my $ldap = undef;\n my $opt_analyse_cmd = undef;\n my $opt_resetup_env = undef;\n+my $opt_bindir = undef;\n \n my $srcdir = \".\";\n my $builddir = \".\";\n@@ -297,6 +298,7 @@\n \n Generic options:\n  --help                     this help page\n+ --target=samba4|samba3|win Samba version to target\n \n Paths:\n  --prefix=DIR               prefix to run tests in [st]\n@@ -304,12 +306,16 @@\n  --builddir=DIR             output directory [.]\n \n Target Specific:\n- --target=samba4|samba3|win Samba version to target\n  --socket-wrapper-pcap=FILE save traffic to pcap file\n  --socket-wrapper           enable socket wrapper\n  --expected-failures=FILE   specify list of tests that is guaranteed to fail\n+\n+Samba4 Specific:\n  --ldap=openldap|fedora     back smbd onto specified ldap server\n \n+Samba3 Specific:\n+ --bindir=PATH              path to binaries\n+\n Behaviour:\n  --quick                    run quick overall test\n  --one                      abort when the first test fails\n@@ -338,6 +344,7 @@\n \t\t'ldap:s' => \\$ldap,\n \t\t'analyse-cmd=s' => \\$opt_analyse_cmd,\n \t\t'resetup-environment' => \\$opt_resetup_env,\n+\t\t'bindir:s' => \\$opt_bindir,\n \t    );\n \n exit(1) if (not $result);\n@@ -410,7 +417,11 @@\n if ($opt_target eq \"samba4\") {\n \t$target = new Samba4(\"$srcdir/bin\", $ldap, \"$srcdir/setup\");\n } elsif ($opt_target eq \"samba3\") {\n-\t$target = new Samba3(\"$srcdir/bin\", \"$srcdir/setup\");\n+\tif ($opt_socket_wrapper and `smbd -b | grep SOCKET_WRAPPER` eq \"\") {\n+\t\tdie(\"You must include --enable-socket-wrapper when compiling Samba in order to execute 'make test'.  Exiting....\");\n+\t}\n+\n+\t$target = new Samba3($opt_bindir);\n } elsif ($opt_target eq \"win\") {\n \tdie(\"Windows tests will not run with socket wrapper enabled.\") \n \t\tif ($opt_socket_wrapper);\n\n"}