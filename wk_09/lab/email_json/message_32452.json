{"category": "ham", "to_address": "bugs-bitbucket@netlabs.develooper.com", "from_address": "Eric Hanchrow (via RT) <parrotbug-followup@parrotcode.org>", "subject": "[perl #42996] [PATCH]: add new TODO test for \"clone\" method for iterators ", "body": "# New Ticket Created by  Eric Hanchrow \n# Please include the string:  [perl #42996]\n# in the subject line of all future correspondence about this issue. \n# \n\n\n\nAdd a new TODO test for iterator cloning: make sure that we're not\naccidentally copying the entire array.  (Since this test currently\nfails, I fear that we _are_ copying the entire array :-( )\n\nIndex: t/pmc/iterator.t\n===================================================================\n--- t/pmc/iterator.t\t(revision 18587)\n+++ t/pmc/iterator.t\t(working copy)\n@@ -7,7 +7,7 @@\n use lib qw( . lib ../lib ../../lib );\n \n use Test::More;\n-use Parrot::Test tests => 43;\n+use Parrot::Test tests => 44;\n \n =head1 NAME\n \n@@ -1391,6 +1391,38 @@\n ok\n OUTPUT\n \n+TODO: {\n+    local $TODO = \"cloned iterator doesn't copy the array to which it 'points'\";\n+pir_output_is( <<'CODE', <<'OUTPUT', \"cloned iterator doesn't copy the array to which it 'points'\" );\n+.sub main :main\n+    .local pmc ar, i1, i2\n+    .local Integer temp\n+    temp = new Integer\n+    ar = new ResizableIntegerArray\n+    push ar, 1\n+    new i1, .Iterator, ar\n+\n+    # i1 and i2 now \"point\" to the same element of the same array.\n+    clone i2, i1\n+\n+    # Modify the array ...\n+    temp = 17\n+    i1 = temp\n+\n+    # Now read back the modified value ...\n+    shift temp, i2\n+\n+    unless temp == 17 goto fail\n+\n+    say \"ok\"\n+    end\n+fail:\n+    say \"not ok\"\n+.end\n+CODE\n+ok\n+OUTPUT\n+}\n # Local Variables:\n #   mode: cperl\n #   cperl-indent-level: 4\n\n iterator.t |   34 +++++++++++++++++++++++++++++++++-\n 1 file changed, 33 insertions(+), 1 deletion(-)\n-- \n[T]he only two jobs at which I have ever earned my living are\nsoul musician and linguist\n        Geoffrey K. Pullum\n\n"}