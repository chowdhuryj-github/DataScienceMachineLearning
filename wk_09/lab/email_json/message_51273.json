{"category": "ham", "to_address": "beginners@perl.org", "from_address": "zentara <zentara@highstream.net>", "subject": "Re: Inter-thread communications", "body": "On Tue, 19 Jun 2007 15:44:18 -0400, rvm@CBORD.com (\"Bob McConnell\")\nwrote:\n\n\n>I have been trying to implement this in ActivePerl 5.8.8.820 on W2K, so\n>I am working in the thread based fork() implementation. IPC does not\n>seem to exist in that implementation.\n\nFor forked processes, you need pipes, sockets, or shared mem for\nIPC.  \n\nYou probably are better off sticking with threads on Win32, since\nit only uses threads underneath it all.\n\n>I had pretty much figured out that alarm doesn't work in Win32. I had\nAlarm dosn't work on linux with threads either ( or not as you would\nexpect.... the main thread intercepts all alarms).\n\n>tried to use it to interrupt read() on a serial port, and that wasn't\n>working. Neither did SIGINT or SIGTERM. The only way to get out of it\n>was Ctrl->Break, which shuts down the whole process.\n>\n>Unless the Glib timer can interrupt a serial port read() call, I don't\n>see any way to timeout a serial port input function on Win32.\n>Unfortunately, that means I will probably need to steal one of the FC5\n>boxes from the next room in order to get it to work.\n\nYeah, Glib should be able to do it with some \"flagging magic\". I don't\nhave an example offhand, but if you look at that perlmonks url, about\nrolling your own event loop, you can see how it MIGHT be done :-)\n\n.....pseudo-code follows......\n\n###  filehandle watch\nopen (FH, \"+> test.log\") or warn \"$!\\n\";     # simulate your socket\n\nGlib::IO->add_watch (fileno 'FH', ['in'], \\&watch_callback, 'FH', 1 );\n\n$main_loop->run;\n####################################################################\nsub watch_callback {\n    my ($fd, $condition, $fh) = @_;\n\n    if($flag){return 1}  # test for timer flag\n\n    my @lines = ;\n    print @lines;\n\n   # here you might regex the lines for Ack or Nack, and if found,\n   #launch a timer to set a flag after 3 seconds ( act as alarm) \n   my $timer  = Glib::Timeout->add (3000, \\&timer_callback, undef, 1 );\n\n\n    #always return TRUE to continue the callback\n    return 1;\n}       \n\n\n\nLike I said it was just pseudo code, and I have to admit, it would\nprobably take a few hours of realtime testing scripts, to see how\nthe serial port socket actually behaves..... the devil is always in the\ndetails.\n\nSwitching to a linux box would make things work better for sure, but\nfirst I recommend checking out POE. It is an advanced event-loop system\nthat has alot of the bugs worked out.\nThere is a POE cookbook of examples online, and you may find\nsomething close to your needs.\nPOE does offer alarms and signals.\n\nhttp://poe.perl.org/?POE_Cookbook\n\n\nzentara\n\n\n-- \nI'm not really a human, but I play one on earth.\nhttp://zentara.net/japh.html\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}