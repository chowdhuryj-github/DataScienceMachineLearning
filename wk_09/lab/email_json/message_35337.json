{"category": "ham", "to_address": "Josh Wilmes <josh@hitchhiker.org>", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: new FAQs", "body": "On Wed, May 23, 2007 at 10:37:06PM -0400, Josh Wilmes wrote:\n\n> At 19:05 on 05/23/2007 PDT, chromatic  wrote:\n\n> >  - better compiler tools than lex and yacc.\n \n> Is it necessary (or even fair) to tie compiler components to parrot?\n\nI really don't know how to answer this question.\n\nThe compiler tools target Parrot, so that it will be easier for people\n(including us) to write languages that run on Parrot.\n\nParrot is awfully pointless without languages that run on it, so making it\neasier to write a language that runs on Parrot is well in line with the goals\nof Parrot.\n\nI suppose it would be possible to write compiler tools that target multiple\nbackends, but some of those backends I have no interest in running (for legal\nor technical reasons, such as that I don't own any platform on which they run\nor have little desire to be the target of a patent suit).  Besides that, my\ngoal with Parrot is to produce the best possible platform for running dynamic\nlanguages.\n\nSupporting other platforms (if such a thing is even possible in any sensible\nway) would take a lot of work for little benefit.\n\nHow would you, for example, write C compiler tools that didn't target a\nspecific processor architecture?\n\n> > Snarkily, it's better than the JVM because it actually supports features of \n> > dynamic languages natively without forcing all dynamic languages built on it \n> > to invent everything besides \"look up named method at runtime\".\n \n> Apparently this is an improvement over \"invent the whole VM\"? ;-)\n\nI suppose that depends on whether you're implementing the single VM or the many\neach inventing the same types of things on said single VM.\n\nThere's a reason we're not writing Parrot in assembly language: sometimes a\nlittle more abstraction helps.  You can certainly implement any kind of control\nflow you can imagine with goto and a lot of discipline, but although I know\nit's theoretically possible and could certainly do it if I really had to, I\ndon't have to and I certainly don't want to.\n\n-- c\n\n"}