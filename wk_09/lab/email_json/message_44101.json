{"category": "ham", "to_address": "parrot-porters@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "P6 String Assertion Failure (diagnosis and fix)", "body": "When I run the t/01-sanity/06-use.t test in languages/perl6, I get an \nassertion failure:\n\n\tparrot: src/string.c:2028: string_hash: Assertion `s->encoding && s->charset \n&& !(((s)->obj.flags) & b_PObj_on_free_list_FLAG)' failed.\n\nThis happens when trying to hash a string (specifically the \nstring 'Perl6::Grammar::quote_term').  I dug into this a little bit.  It's \nthe last test that fails; the string IS on the free list.  Something isn't \nmarking it as live appropriately.\n\nHere's the backtrace:\n\nProgram received signal SIGABRT, Aborted.\n[Switching to Thread -1212417840 (LWP 15328)]\n0xffffe410 in __kernel_vsyscall ()\n(gdb) bt\n#0  0xffffe410 in __kernel_vsyscall ()\n#1  0x4d068df0 in raise () from /lib/tls/i686/cmov/libc.so.6\n#2  0x4d06a641 in abort () from /lib/tls/i686/cmov/libc.so.6\n#3  0x4d06243b in __assert_fail () from /lib/tls/i686/cmov/libc.so.6\n#4  0xb7dbbc0d in string_hash (interp=0x804e008, s=0x81e1600, seed=3793)\n    at src/string.c:2028\n#5  0xb7dc30be in key_hash_STRING (interp=0x804e008, value=0x81e1600, \n    seed=3793) at src/hash.c:57\n#6  0xb7dc3dee in parrot_hash_get_bucket (interp=0x804e008, hash=0x805d138, \n    key=0x81e1600) at src/hash.c:726\n#7  0xb7ea2663 in Parrot_Hash_exists_keyed (interp=0x804e008, pmc=0x82ab8b0, \n    key=0x0) at ./src/pmc/hash.pmc:900\n#8  0xb7cd1f1b in Parrot_exists_i_p_kc (cur_opcode=0xb6af4230, \n    interp=0x804e008) at src/ops/pmc.ops:327\n#9  0xb7dbe35b in runops_slow_core (interp=0x804e008, pc=0xb6af4230)\n    at src/runops_cores.c:184\n#10 0xb7da8d5e in runops_int (interp=0x804e008, offset=58)\n    at src/interpreter.c:779\n\nI poked around some more and found out that the string is in a Key PMC (okay, \nthat's obvious from the backtrace).  I can't see that the Key itself is \ngetting marked as live, which is a problem.\n\nThe problem is that the actual string is in a register, in \nTGE::Tree::_scan_node(), lines 66 - 75:\n\n    # Iterate over the elements of the visit hash for the given type\n    .local pmc actions\n    .local int index\n    .local pmc currule\n    $P2 = getattribute self, 'visit'\n    $I2 = exists $P2[type]\n    unless $I2 goto end_loop\n    actions = $P2[type]\n    index = actions\n\nThat exists call is frame #8 in the backtrace.\n\nIt makes *some* sense that the Key PMC created for that call doesn't mark the \nString explicitly.  It's sort of a temporary thing (and the String has a flag \nset marking that it's in a register).\n\nI wondered if register values weren't getting marked as live appropriately.  I \ndug into mark_context() in src/sub.c and annotated that, to see if the string \ndoes get marked.  (String registers do get marked as live.)\n\nThen I had an insight.  There's no guarantee that a GC run will occur unless \nyou force it, so I forced it in TGE::Tree just before the exists call:\n\n    .local pmc interp\n    interp = getinterp\n    interp.'run_gc'()\n    $P2 = getattribute self, 'visit'\n    $I2 = exists $P2[type]\n\nThe test then passed.  The assertion was okay.  The String is obviously live, \nafter it gets marked as live.  I then wondered if strings get marked as live \nwhen they're created.  The answer was in new_string_header() in \nsrc/headers.c:\n\n\tPObj_get_FLAGS(string) |= flags |PObj_is_string_FLAG|PObj_is_COWable_FLAG;\n\nI changed it:\n\n\tPObj_get_FLAGS(string) |= flags |\n\t        PObj_is_string_FLAG | PObj_is_COWable_FLAG | PObj_live_FLAG;\n\nAdding the live flag fixed the problem (r18855).\n\nAlternately, deleting that part of the assertion wouldn't entirely suck \neither.  I'm not sure that anyone has dug into the encoding problem though, \nso it ought to stay until we're sure that things work.\n\n-- c\n\n"}