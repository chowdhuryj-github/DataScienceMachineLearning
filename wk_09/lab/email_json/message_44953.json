{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Robert Hicks <sigzero@gmail.com>", "subject": "Re: new vs ->new", "body": "Chas Owens wrote:\n> On 6/8/07, Robert Hicks  wrote:\n>> I see some modules that call \"new\" like:\n>>\n>> my $test = new Some::Module;\n>>\n>> and some like:\n>>\n>> my $test = Some::Module->new;\n>>\n>> Is there a difference and what is the \"recommended\" way?\n>>\n>> Robert\n> \n> \"new Object\" uses indirect invocation*.  Some people feel it improves\n> readability; I am not one of those people.\n> \n> from perldoc perlobj\n>       There is another problem with this syntax: the indirect object is \n> lim\u001b$B!>\u001b(B\n>       ited to a name, a scalar variable, or a block, because it would \n> have to\n>       do too much lookahead otherwise, just like any other postfix derefer\u001b$B!>\u001b(B\n>       ence in the language.  (These are the same quirky rules as are \n> used for\n>       the filehandle slot in functions like \"print\" and \"printf\".)  This \n> can\n>       lead to horribly confusing precedence problems, as in these next two\n>       lines:\n> \n>           move $obj->{FIELD};                 # probably wrong!\n>           move $ary[$i];                      # probably wrong!\n> \n>       Those actually parse as the very surprising:\n> \n>           $obj->move->{FIELD};                # Well, lookee here\n>           $ary->move([$i]);                   # Didn't expect this one, eh?\n> \n>       Rather than what you might have expected:\n> \n>           $obj->{FIELD}->move();              # You should be so lucky.\n>           $ary[$i]->move;                     # Yeah, sure.\n> \n>       To get the correct behavior with indirect object syntax, you would \n> have\n>       to use a block around the indirect object:\n> \n>           move {$obj->{FIELD}};\n>           move {$ary[$i]};\n> \n>       Even then, you still have the same potential problem if there happens\n>       to be a function named \"move\" in the current package.  The \"->\" nota\u001b$B!>\u001b(B\n>       tion suffers from neither of these disturbing ambiguities, so we \n> recom\u001b$B!>\u001b(B\n>       mend you use it exclusively.  However, you may still end up having to\n>       read code using the indirect object notation, so it's important to be\n>       familiar with it.\nI will read \"perlobj\" then...\n\nThanks!\n\nRobert\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}