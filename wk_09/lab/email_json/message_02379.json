{"category": "ham", "to_address": "\"AJ Rossini\" <blindglobe@gmail.com>", "from_address": "\"Ramon Diaz-Uriarte\" <rdiaz02@gmail.com>", "subject": "Re: [R] Rserve and R to R communication", "body": "On 4/11/07, AJ Rossini  wrote:\n> On Tuesday 10 April 2007 23:17, Ramon Diaz-Uriarte wrote:\n>\n> > Of course, you are right there. I think that might still be the case.\n> > At the time we made our decision, and decided to go for MPI, MPI 2 was\n> > already out, and MPI seemed \"more like the current/future standard\"\n> > than PVM.\n>\n> That's always been the case.  In fact MPI is a standard, where as PVM always\n> was an implementation defining a so-called standard.\n>\n\n\nOoops, you are right. But in addition to whether or not a standard, it\nseemed (and still seems) that \"MPI is the current/future stuff\"\nwhereas PVM seemed more like a useful but aging approach. (I am aging\ntoo, so maybe that ain't that good an argument :-).\n\n\n> > So using papply with Rmpi requires sharper programmers than using\n> > snow? Hey, it is good to know I am that smarter. I'll wear that as a\n> > badge :-).\n>\n> You are!   I've never been patient enough to use plain Rmpi or rpvm except a\n> few times, but for me, the advantage of snow is that you get all the\n\nOh, but except for a few very simple things such as broadcasting data\nor functions to all the slaves, or cleaning up, I never use Rmpi\ndirectly. I always use papply, which is, really, a piece of cake.\n\nI am just scratching the surface of this parallelism stuff, and I am\nsticking to the simple \"embarrasingly parallelizable\" problems\n(cross-validation, bootstrap, identical analysis on many samples,\netc). So going any deeper into MPI (individual sends, receives, etc)\nwas more trouble than it seemed worth. papply or, alternatively,\nclusterApplyLB, are all I've (almost ever) needed/used.\n\n\n> backends, not just MPI.  In fact, I've heard mention that some folks are\n> sticking together a NWS backend as well.\n>\n\n> > Anyway, papply (with Rmpi) is not, in my experience, any harder than\n> > snow (with either rpvm or Rmpi). In fact, I find papply a lot simpler\n> > than snow (clusterApply and clusterApplyLB). For one thing, debugging\n> > is very simple, since papply becomes lapply if no lam universe is\n> > booted.\n>\n> In fact it might be easier, since we never put together decent aggregation\n> routines.\n>\n> (smarter doesn't mean works harder, just more intelligently :-).\n>\n\nI'll take that as a compliment :-).\n\n\n> > I see, though, that I might want to check PVM just for the sake of the\n> > fault tolerance in snowFT.\n>\n> Fault tolerance is one of those very ill-defined words.   Specifically:\n>\n> #1 - mapping pRNG streams to work units, not just CPUs or dispatch order (both\n> of which can differ), for reproducibility\n>\n> #2 - handling \"failure to complete\" on worker nodes gracefully.\n>\n> However, you'd need checkpointing or probably a miracle to handle failure on\n> the master...\n>\n\nAha, I hadn't thought of #1, beings as I am much more concerned about\n#2. (For #1, and to check results, I tend to run things under\ncontrolled conditions, where if a worker shuts down, I'll bring it\nback to life, and start again ---not elegant, but this happens rarely\nenough that I don't worry too much).\n\nRight now, I am dealing with #2 via additional external scripts that\ncheck that LAM universes are up, examine log files for signs of\nfailures, modify lamb host definition files if needed, restart LAM\nuniverses,  etc, and with checkpointing in the R code.  But I think it\nis an ugly kludge (and a pain). I envy the Erlang guys.\n\nAs for failure in the master ... I'll take that as an act of god, so\nno point in trying to defeat it via miracles :-). Actually, the\nscripts above could be distributed (the checkpointing is done from the\nmaster), so this is doable via a meta script that runs distributed.\nI've just added that to the \"to-do\" list.\n\n\nBest,\n\n\nR.\n>\n> best,\n> -tony\n>\n> blindglobe@gmail.com\n> Muttenz, Switzerland.\n> \"Commit early,commit often, and commit in a repository from which we can\n> easily\n> roll-back your mistakes\" (AJR, 4Jan05).\n>\n>\n\n\n-- \nRamon Diaz-Uriarte\nStatistical Computing Team\nStructural Biology and Biocomputing Programme\nSpanish National Cancer Centre (CNIO)\nhttp://ligarto.org/rdiaz\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}