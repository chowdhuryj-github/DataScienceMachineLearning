{"category": "ham", "to_address": "Dirk Eddelbuettel <edd@debian.org>", "from_address": "Marc Schwartz <marc_schwartz@comcast.net>", "subject": "Re: [R] model.frame: how does one use it?", "body": "On Fri, 2007-06-15 at 15:34 -0500, Dirk Eddelbuettel wrote:\n> Hi Mark,\n> \n> Thanks for the reply.\n> \n> On 15 June 2007 at 14:33, Marc Schwartz wrote:\n> | On Fri, 2007-06-15 at 10:47 -0500, Dirk Eddelbuettel wrote: \n> | > Philipp Benner reported a Debian bug report against r-cran-rpart aka rpart.\n> | > In short, the issue has to do with how rpart evaluates a formula and\n> | > supporting arguments, in particular 'weights'.  \n> | > \n> | > A simple contrived example is\n> | > \n> | > -----------------------------------------------------------------------------\n> | > library(rpart)\n> | > \n> | > ## using data from help(rpart), set up simple example\n> | > myformula <- formula(Kyphosis ~ Age + Number + Start)\n> | > mydata <- kyphosis\n> | > myweight <- abs(rnorm(nrow(mydata)))\n> | > \n> | > goodFunction <- function(mydata, myformula, myweight) {\n> | >   hyp <- rpart(myformula, data=mydata, weights=myweight, method=\"class\")\n> | >   prev <- hyp\n> | > }\n> | > goodFunction(mydata, myformula, myweight)\n> | > cat(\"Ok\\n\")\n> | > \n\n\n\n> | \n> | However, now let's do this:\n> | \n> | \n> | library(rpart)\n> | myformula <- formula(Kyphosis ~ Age + Number + Start)\n> | mydata <- kyphosis\n> | myweight <- abs(rnorm(nrow(mydata)))\n> | \n> | goodFunction <- function(mydata, myformula) {\n> |                          hyp <- rpart(myformula, data=mydata,\n> |                                       weights=myweight, method=\"class\")\n> |                          prev <- hyp\n> |                         }\n> | \n> | > goodFunction(mydata, myformula)\n> | > \n> | \n> | It works, because 'myweight' is found in the global environment, which\n> | is where the formula is created.\n> \n> Well,yes, but doesn't this just recreate the working example I showed above?\n> It works 'because we get lucky' with the data in the outer global env.\n\nTechnically, it is not the same, as I was trying to emphasize that there\nwas no need to pass 'myweight' as an argument to the function to\nfacilitate successful location/evaluation within the function.\n\nWe don't get lucky here. The behavior is by design and consistent with\nthe documentation, which is that 'myweight' in the call to rpart() is\nevaluated within the environment of the formula in this case. The\nformula is created in the global environment, so 'myweight' is found\nthere. Hence, no need to pass it as an argument.\n\nA review of the code for rpart() will reveal code similar to that which\nis used in most R modeling functions, relative to the evaluation of the\nformula, associated args and the creation of the model frame.\n\nOne exception to the above, is that in other modeling functions, one\ncould forgo passing the formula and just pass the entire data frame,\nwhere the presumption is that the first column is the response variable\nand the remaining columns would be the independent terms. I don't see\nthat supported in rpart().\n\n> \n> | Now, final example, try this:\n> | \n> | \n> | library(rpart)\n> | goodFunction <- function() {\n> |                          myformula <- formula(Kyphosis ~ Age + Number +\n> |                                               Start)\n> |                          mydata <- kyphosis\n> |                          myweight <- abs(rnorm(nrow(mydata)))\n> | \n> |                          hyp <- rpart(myformula, data=mydata,\n> |                                       weights=myweight, method=\"class\")\n> |                          prev <- hyp\n> |                         }\n> | \n> | > goodFunction()\n> | > \n> | \n> | It works because the formula is created within the environment of the\n> | function and hence, 'myweight', which is created there as well, is\n> | found.\n> \n> That works because we force it to be local. BDR claims that my 'badFunction'\n> (derived from Philipp's original bug report) above can be made to work\n> provide you use model.frame.  I asked about model.frame -- and you were kind\n> enough do answer, but you dodged the question.\n> \n> So let me try again:  How can rpart be called inside a function using a\n> local weight variable as I do above ?   Either it can, and the BDR is right\n> and there is no bug, or one cannot, and then mere mortals like myself must\n> consider rpart to be buggy as it does not support all its argument in at\n> least some conceivable calling situations. \n> \n> Is that a fair question?\n> \n> Regards,  Dirk\n\nYep, entirely fair. \n\nWithout knowing what specific approach Prof. Ripley had in mind, I am\nenvisioning a couple of possibilities, but here is one:\n\nlibrary(rpart)\n\nmyformula <- formula(Kyphosis ~ Age + Number + Start)\nmydata <- kyphosis\n\nbadFunction <- function(mydata, myformula) {\n  mydata$myweight <- abs(rnorm(nrow(mydata)))\n  rpart(myformula, data = mydata, weights = myweight, method = \"class\")\n}\n\nbadFunction(mydata, myformula)\n\n\nBasically, there are 3 places in which 'myweights' could be found:\n\n1. Formula environment\n\n2. Data frame environment\n\n3. Global environment\n\n\nIn this case, we add the weights as a new column within the function to\nthe 'mydata' data frame, so that it will be found in the call to\nrpart(), based upon location number 2 above.\n\nDoes that help?\n\nRegards,\n\nMarc\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}