{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"nobull67@gmail.com\" <nobull67@gmail.com>", "subject": "Re: Conditional in regex", "body": "On Jun 24, 9:05 pm, kra...@telus.net (John W. Krahn) wrote:\n> nobul...@gmail.com wrote:\n> > On Jun 24, 3:31 am, p...@loserville.org (Jeff) wrote:\n>\n> >> Second, and equally important, what kind of data structure\n> >> should I put the results in? I think I need a hash of hashes\n>\n> > Probably a list of hashes would be the most natural.\n>\n> > my @LoH = map { { split } } $file_contents =~ /\\{(.*?)\\}/gs;\n>\n> >> . What I'd like\n> >> to do is assign each left hand value as the key in a hash. Then, in each set\n> >> there's a left 'command' where the right hand value will always be unique,\n> >> which would be perfect for use as the name of an alias for the hash or as\n> >> the key to a reference to a hash of that definition.\n>\n> > my %HoH;\n> > while ( $file_contents =~ /\\{(.*?)\\}/gs ) {\n> >         my %entry = split;\n> >         $HoH{delete $entry{command}} = \\%entry;\n> > }\n>\n> Shouldn't that be:\n>\n> while ( $file_contents =~ /\\{(.*?)\\}/gs ) {\n>          my %entry = split ' ', $1;\n>          $HoH{delete $entry{command}} = \\%entry;\n>\n> }\n\nWell actually I'd meant foreach() rather than while(). But using\nwhile() and $1 is arguably better.\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}