{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Jeni Zundel <jenizundel@mac.com>", "subject": "Re: Nested loop", "body": "foreach is dead?\n\ndangit... I loved that.\n\nand,  java 5 just put in a for loop construct that is very similar to the foreach.\n\njen \nOn Thursday, April 19, 2007, at 08:08AM, \"Chas Owens\"  wrote:\n>On 4/19/07, Jenda Krynicky  wrote:\n>> From: \"Chas Owens\" \n>snip\n>> > foreach is dead, long live for.\n>>\n>> William is dead, long live Bill?\n>>\n>> foreach and for are two names for the same thing and just as you can\n>> call someone both William and Bill you can use foreach and for\n>> interchangeably.\n>>\n>> foreach(my $i = 0; $i < $whatever; $i++)\n>> for(my $i = 0; $i < $whatever; $i++)\n>>\n>> for my $x (@array)\n>> foreach my $x (@array)\n>>\n>> for (@array)\n>> foreach (@array)\n>>\n>> No difference to the computer. Use whichever reads best!\n>\n>Yes, foreach was aliased to for for backwards compatibility, but, like\n>telnet and rsh, it should not be used in new code.\n>\n>>\n>> I would myself use \"for\" for the C-style loops\n>\n>And this is why.  As long as people think \"well, I have foreach which\n>is for iterating and for which is for C-style loops\" they will\n>continue to write C-style loops.  C-style loops are bad.  They are\n>there for backwards compatibility.  I can't think of a single for loop\n>that isn't better written as a range based for loop or while loop. For\n>instance\n>\n>standard range based loop\n>for (my $i = 0; $i < 10; $i++) {}\n>for my $i (0 .. 9) {}\n>\n>often $i winds up being used as an index which just makes me cringe.\n>\n>The infinite loop\n>for (;;) {}\n>while (1) {}\n>\n>The reason C programmers give for using for (;;) is that it generates\n>less overhead on their platform, but, at least with my tests*,\n>while(1) is more efficient in Perl.\n>\n>Weirder stuff that you only tend to see people coming from a C background do\n>for (my $node = $head; $node = $node; $node->next) {}\n>my $node = $head;\n>while ($node = $node->next) {}\n>\n>But in Perl it is rarely necessary to do this sort of loop since most\n>functions return a list that can be iterated over using for:\n>\n>for my $node ($head->nodes) {}\n>\n>> and if I use the for loop as a way to create an alias\n>\n>And that is a perfectly idiomatic usage; at least until given is added\n>to the language (in 5.10 from what I hear).\n>\n>* benchmark\n>        Rate  bare   for while\n>bare  6754/s    --  -17%  -31%\n>for   8179/s   21%    --  -17%\n>while 9823/s   45%   20%    --\n>\n>#!/usr/bin/perl\n>\n>use strict;\n>use warnings;\n>use Benchmark;\n>\n>\n>my %subs = (\n>        for   => sub { my $i; for (;;) { last if $i++ > 1_000 } },\n>        while => sub { my $i; while (1) { last if $i++ > 1_000 } },\n>        bare  => sub { my $i; { last if $i++ > 1_000; redo }  },\n>);\n>\n>Benchmark::cmpthese(-10, \\%subs);\n>\n>-- \n>To unsubscribe, e-mail: beginners-unsubscribe@perl.org\n>For additional commands, e-mail: beginners-help@perl.org\n>http://learn.perl.org/\n>\n>\n>\n>\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}