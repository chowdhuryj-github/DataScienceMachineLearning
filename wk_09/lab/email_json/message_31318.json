{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r22959 - in branches/SAMBA_4_0/source/lib/events:\n\t.", "body": "Author: tridge\nDate: 2007-05-17 02:18:29 +0000 (Thu, 17 May 2007)\nNew Revision: 22959\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22959\n\nLog:\n\ncope with a rather interesting interaction between epoll() and\nfork(). See\nhttp://junkcode.samba.org/ftp/unpacked/junkcode/epoll_fork.c for why\nthis is needed\n\nModified:\n   branches/SAMBA_4_0/source/lib/events/events_standard.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/events/events_standard.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events_standard.c\t2007-05-17 01:17:43 UTC (rev 22958)\n+++ branches/SAMBA_4_0/source/lib/events/events_standard.c\t2007-05-17 02:18:29 UTC (rev 22959)\n@@ -58,6 +58,9 @@\n \n \t/* when using epoll this is the handle from epoll_create */\n \tint epoll_fd;\n+\n+\t/* our pid at the time the epoll_fd was created */\n+\tpid_t pid;\n };\n \n /* use epoll if it is available */\n@@ -68,7 +71,9 @@\n */\n static void epoll_fallback_to_select(struct std_event_context *std_ev, const char *reason)\n {\n+\tconst char *cmd = talloc_asprintf(std_ev, \"xterm -e gdb --pid %u\", getpid());\n \tDEBUG(0,(\"%s (%s) - falling back to select()\\n\", reason, strerror(errno)));\n+\tsystem(cmd);\n \tclose(std_ev->epoll_fd);\n \tstd_ev->epoll_fd = -1;\n \ttalloc_set_destructor(std_ev, NULL);\n@@ -90,7 +95,9 @@\n */\n static int epoll_ctx_destructor(struct std_event_context *std_ev)\n {\n-\tclose(std_ev->epoll_fd);\n+\tif (std_ev->epoll_fd != -1) {\n+\t\tclose(std_ev->epoll_fd);\n+\t}\n \tstd_ev->epoll_fd = -1;\n \treturn 0;\n }\n@@ -101,9 +108,32 @@\n static void epoll_init_ctx(struct std_event_context *std_ev)\n {\n \tstd_ev->epoll_fd = epoll_create(64);\n+\tstd_ev->pid = getpid();\n \ttalloc_set_destructor(std_ev, epoll_ctx_destructor);\n }\n \n+static void epoll_add_event(struct std_event_context *std_ev, struct fd_event *fde);\n+\n+/*\n+  reopen the epoll handle when our pid changes\n+  see http://junkcode.samba.org/ftp/unpacked/junkcode/epoll_fork.c for an \n+  demonstration of why this is needed\n+ */\n+static void epoll_reopen(struct std_event_context *std_ev)\n+{\n+\tstruct fd_event *fde;\n+\n+\tclose(std_ev->epoll_fd);\n+\tstd_ev->epoll_fd = epoll_create(64);\n+\tif (std_ev->epoll_fd == -1) {\n+\t\treturn;\n+\t}\n+\tstd_ev->pid = getpid();\n+\tfor (fde=std_ev->fd_events;fde;fde=fde->next) {\n+\t\tepoll_add_event(std_ev, fde);\n+\t}\n+}\n+\n #define EPOLL_ADDITIONAL_FD_FLAG_HAS_EVENT\t(1<<0)\n #define EPOLL_ADDITIONAL_FD_FLAG_REPORT_ERROR\t(1<<1)\n #define EPOLL_ADDITIONAL_FD_FLAG_GOT_ERROR\t(1<<2)\n@@ -116,6 +146,16 @@\n \tstruct epoll_event event;\n \tif (std_ev->epoll_fd == -1) return;\n \n+\t/* during an add event we need to check if our pid has changed\n+\t   and re-open the epoll socket. Note that we don't need to do this \n+\t   for other epoll changes */\n+\tif (std_ev->pid != getpid()) {\n+\t\tepoll_reopen(std_ev);\n+\t\t/* the current event gets added in epoll_reopen(), so\n+\t\t   we can return here */\n+\t\treturn;\n+\t}\n+\n \tfde->additional_flags &= ~EPOLL_ADDITIONAL_FD_FLAG_REPORT_ERROR;\n \n \t/* if we don't want events yet, don't add an epoll_event */\n\n"}