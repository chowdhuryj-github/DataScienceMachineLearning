{"category": "ham", "to_address": "Patrick Wang <pwang@berkeley.edu>", "from_address": "Marc Schwartz <marc_schwartz@comcast.net>", "subject": "Re: [R] Split a vector(list) into 3 list", "body": "On Thu, 2007-05-17 at 17:14 -0700, Patrick Wang wrote:\n> Hi,\n> \n> I have a vector contains values 1,2,3.\n> \n> Can I call a function split to split it into 3 vectors with 1 corresponds\n> to value ==1, which contain all the indexes for value==1.\n> \n> 2 corresponds to value ==2 which contain all the indexes for value=2\n> \n> Thanks\n> pat\n\n\nLet's first try with unequal numbers of each value:\n\n\nset.seed(1)\nVec <- sample(3, 20, replace = TRUE)\n\n> Vec\n [1] 1 2 2 3 1 3 3 2 2 1 1 1 3 2 3 2 3 3 2 3\n\n> sapply(1:3, function(x) which(Vec == x))\n[[1]]\n[1]  1  5 10 11 12\n\n[[2]]\n[1]  2  3  8  9 14 16 19\n\n[[3]]\n[1]  4  6  7 13 15 17 18 20\n\n\n\nNow let's try with equal counts of each number:\n\nVec <- sample(rep(1:3, each = 5))\n\n> Vec\n [1] 3 1 2 1 3 1 1 2 2 3 2 1 3 3 2\n\n > t(sapply(1:3, function(x) which(Vec == x)))\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    2    4    6    7   12\n[2,]    3    8    9   11   15\n[3,]    1    5   10   13   14\n\n\nNote how the result varies in structure depending upon the content of\nthe source vector. In the first case you get a list, in the second a\nmatrix.\n\nIf you wish you could add code to set names for the list elements or\nrownames for the matrix, which can help with comprehension of the result\nif you have other, non-sequential values, etc.\n\n\nRes <- sapply(1:3, function(x) which(Vec == x))\n\nnames(Res) <- 1:3\n\n> Res\n$`1`\n[1]  1  5 10 11 12\n\n$`2`\n[1]  2  3  8  9 14 16 19\n\n$`3`\n[1]  4  6  7 13 15 17 18 20\n\n\n\n\nmat <- t(sapply(1:3, function(x) which(Vec == x)))\nrownames(mat) <- 1:3\n\n> mat\n  [,1] [,2] [,3] [,4] [,5]\n1    2    4    6    7   12\n2    3    8    9   11   15\n3    1    5   10   13   14\n\n\nSee ?sapply and ?which\n\n\nAlso, to make the approach more generic, you could use:\n\n  unique(Vec)\n\nto get the unique values in the source vector and then use that result\nfor the first argument in sapply() and then for the names in the result.\n\nFor example:\n\nVals <- unique(Vec)\nRes <- sapply(Vals, function(x) which(Vec == x))\nnames(Res) <- Vals\n\nSee ?unique\n\nHTH,\n\nMarc Schwartz\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}