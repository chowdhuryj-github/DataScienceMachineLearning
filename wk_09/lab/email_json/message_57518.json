{"category": "ham", "to_address": "\"Amichai Teumim\" <amichai@teumim.com>", "from_address": "\"Tom Phoenix\" <tom@stonehenge.com>", "subject": "Re: missing curly - brain fried", "body": "On 6/28/07, Amichai Teumim  wrote:\n\n> Where is the open curly missing here?\n\nHere it is:\n\n    @array = sort { $a <=> $b } @array;\n\nBut if you really want to do it the hard, slow way.... Well, then you\nshould be programming this as a shell script. But let's at least\ntranslate your code to Perl.\n\n> #!/usr/bin/perl\n\n  use strict;\n  use warnings;\n\n> @array = (5,3,2,1,4);\n\nDeclare most new variables with my().\n\n  my @array = (5, 3, 2, 1, 4);\n\n> for ($i=0; $i<$n-1; $i++) {\n> (  for ($j=0; $j<$n-1-$i; $j++)\n\nThe curly braces of a block are never optional in Perl, unlike in C.\nMost uses of the C-style computed for loop are simpler as a foreach\nloop in Perl:\n\n  for my $i (0..$#array-1) {\n    for my $j (0..$#array-1-$i) {\n\n> if ($array[$j+1] < $array[$j]) {  /* compare the two neighbors\n> */\n>       $tmp = $array[$j];         /* swap $array[j] and $array[j+1]\n>   */\n>       $array[$j] = $array[$j+1];\n>       $array[$j+1] = $tmp;\n>   }\n>  }\n\nPerl doesn't have multi-line comments like C, and it doesn't need to\nuse temp variables to swap two items.\n\n      # compare two neighbors\n      if ($array[$j+1] < $array[$j]) {\n        # swap these two\n        ($array[$j], $array[$j+1]) = ($array[$j+1], $array[$j]);\n      }\n\n      # end two nested loops\n    }\n  }\n\n> foreach $elem (@array){\n>   print \"$elem\";\n> }\n\n  print \"Results: @array\\n\";\n\nBut I like the one liner better, perhaps because I have more\nconfidence in its algorithm. Hope this helps!\n\n--Tom Phoenix\nStonehenge Perl Training\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}