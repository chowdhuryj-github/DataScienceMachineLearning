{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r23142 - in\n\tbranches/SAMBA_4_0/source/torture/raw: .", "body": "Author: tridge\nDate: 2007-05-25 12:21:29 +0000 (Fri, 25 May 2007)\nNew Revision: 23142\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23142\n\nLog:\nadded error checking and reconnect on echo replies\n\nModified:\n   branches/SAMBA_4_0/source/torture/raw/lockbench.c\n   branches/SAMBA_4_0/source/torture/raw/openbench.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/torture/raw/lockbench.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/raw/lockbench.c\t2007-05-25 11:59:52 UTC (rev 23141)\n+++ branches/SAMBA_4_0/source/torture/raw/lockbench.c\t2007-05-25 12:21:29 UTC (rev 23142)\n@@ -244,6 +244,22 @@\n }\n \n \n+static void echo_completion(struct smbcli_request *req)\n+{\n+\tstruct benchlock_state *state = talloc_get_type(req->async.private, \n+\t\t\t\t\t\t\tstruct benchlock_state);\n+\tNTSTATUS status = smbcli_request_simple_recv(req);\n+\tif (NT_STATUS_EQUAL(status, NT_STATUS_END_OF_FILE)) {\n+\t\ttalloc_free(state->tree);\n+\t\tstate->tree = NULL;\n+\t\tnum_connected--;\t\n+\t\tDEBUG(0,(\"reopening connection to %s\\n\", state->dest_host));\n+\t\tevent_add_timed(state->ev, state->mem_ctx, \n+\t\t\t\ttimeval_current_ofs(1,0), \n+\t\t\t\treopen_connection, state);\n+\t}\n+}\n+\n static void report_rate(struct event_context *ev, struct timed_event *te, \n \t\t\tstruct timeval t, void *private_data)\n {\n@@ -258,16 +274,21 @@\n \tfflush(stdout);\n \tevent_add_timed(ev, state, timeval_current_ofs(1, 0), report_rate, state);\n \n+\tif (!state[i].tree) {\n+\t\treturn;\n+\t}\n+\n \t/* send an echo on each interface to ensure it stays alive - this helps\n \t   with IP takeover */\n \tfor (i=0;isession->transport, &p);\n-\t\t}\n+\t\treq = smb_raw_echo_send(state[i].tree->session->transport, &p);\n+\t\treq->async.private = state;\n+\t\treq->async.fn      = echo_completion;\n \t}\n }\n \n\nModified: branches/SAMBA_4_0/source/torture/raw/openbench.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/raw/openbench.c\t2007-05-25 11:59:52 UTC (rev 23141)\n+++ branches/SAMBA_4_0/source/torture/raw/openbench.c\t2007-05-25 12:21:29 UTC (rev 23142)\n@@ -284,6 +284,22 @@\n \t}\n }\n \n+static void echo_completion(struct smbcli_request *req)\n+{\n+\tstruct benchopen_state *state = talloc_get_type(req->async.private, \n+\t\t\t\t\t\t\tstruct benchopen_state);\n+\tNTSTATUS status = smbcli_request_simple_recv(req);\n+\tif (NT_STATUS_EQUAL(status, NT_STATUS_END_OF_FILE)) {\n+\t\ttalloc_free(state->tree);\n+\t\tstate->tree = NULL;\n+\t\tnum_connected--;\t\n+\t\tDEBUG(0,(\"reopening connection to %s\\n\", state->dest_host));\n+\t\tevent_add_timed(state->ev, state->mem_ctx, \n+\t\t\t\ttimeval_current_ofs(1,0), \n+\t\t\t\treopen_connection, state);\n+\t}\n+}\n+\n static void report_rate(struct event_context *ev, struct timed_event *te, \n \t\t\tstruct timeval t, void *private_data)\n {\n@@ -298,16 +314,21 @@\n \tfflush(stdout);\n \tevent_add_timed(ev, state, timeval_current_ofs(1, 0), report_rate, state);\n \n+\tif (!state[i].tree) {\n+\t\treturn;\n+\t}\n+\n \t/* send an echo on each interface to ensure it stays alive - this helps\n \t   with IP takeover */\n \tfor (i=0;isession->transport, &p);\n-\t\t}\n+\t\treq = smb_raw_echo_send(state[i].tree->session->transport, &p);\n+\t\treq->async.private = state;\n+\t\treq->async.fn      = echo_completion;\n \t}\n }\n \n\n"}