{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "David Green <david.green@telus.net>", "subject": "Re: Referring to source code within Perldoc", "body": "On 6/21/07, brian d foy wrote:\n>Couldn't most of this be figured out by making Pod6 extensible (or \n>whatever the right term is). Pod6 would be more of the syntax and \n>basic operation, but other people could have custom directives that \n>their Pod6 translators and formatters could then use.\n\nYeah, then you could write in Kwid/HTML/etc. or C custom parsers \nor whatever....  I bet Damian wishes he'd thought of that!  =)\nSeriously, I think POD is as extensible as it's supposed to be, and I \nlike what Damian has done.  I also share MarkOv's sentiments, but I \nthink there's less opposition here than it may seem because there are \nreally two (almost) separate issues here.  (Of course, if human \nnature didn't tend to polarise every discussion, how would we have \nfun??)\n\n>That is, if we want something different than you want we have to \n>have competing specs and there won't be any compromise?\n\nI think he's saying we actually need some competing specs if there is \nto be anything to compromise on.  I also think that if we did start \nspec'ing out what many people (including me) are looking for, we'd \nfind that we're adding something else rather than compromising on \nanything.\n\nPart of the issue is that \"POD\" seems to be two things: there's POD \nthe markup format, analogous to Kwid or RTF, which when given a chunk \nof text applies certain meanings to sequences like \"B<>\", etc.\nThen there's POD the (dis)integration standard that consists of rules \n(\"=\" in the first column!) to distinguish POD-markup from non-markup \n(source code or anything else).\n\nI want to be able to have documentation that \"belongs\" to Perl \nobjects (probably something like an \"is documented\" trait), so I can \nsay things like \"perldoc Some::Module --sub=foo --param=size\" and get \nback a piece of text specifically applying to that one parameter. \nThe piece of text could consist of POD-markup (or Kwid or HTML), but \nit couldn't use POD-integration because there's no way to \"attach\" a \nsection of POD to a specific piece of Perl syntax.\n(Unless I'm missing something, which is always possible; you can put \na piece of POD geographically next to a Perl declaration, but I'm not \nsure that's unambiguous enough.  Hm, why not?  POD doesn't know \nwhat's going on around it, but Perl does, and could say, \"I've just \ndeclared $size, and the next line starts a chunk of POD, so I'll \nsimply copy it into $size's 'documented' trait... would that work??)\n\n\n\n-David\n\n"}