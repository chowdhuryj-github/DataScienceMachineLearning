{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jra@samba.org", "subject": "svn commit: samba r22540 - in branches: SAMBA_3_0/source/lib/talloc\n\tSAMBA_3_0_25/source/lib/talloc SAMBA_4_0/source/lib/talloc", "body": "Author: jra\nDate: 2007-04-27 21:58:10 +0000 (Fri, 27 Apr 2007)\nNew Revision: 22540\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22540\n\nLog:\nAdded _strict varients of the macro calls - added\nprototypes.\nJeremy.\n\nModified:\n   branches/SAMBA_3_0/source/lib/talloc/talloc.h\n   branches/SAMBA_3_0_25/source/lib/talloc/talloc.h\n   branches/SAMBA_4_0/source/lib/talloc/talloc.h\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/lib/talloc/talloc.h\n===================================================================\n--- branches/SAMBA_3_0/source/lib/talloc/talloc.h\t2007-04-27 21:09:16 UTC (rev 22539)\n+++ branches/SAMBA_3_0/source/lib/talloc/talloc.h\t2007-04-27 21:58:10 UTC (rev 22540)\n@@ -92,6 +92,7 @@\n /* Varient of talloc_zero that returns NULL if size is zero. */\n #define talloc_zero_strict(ctx, type) (type *)_talloc_zero_strict(ctx, sizeof(type), #type)\n #define talloc_zero_size(ctx, size) _talloc_zero(ctx, size, __location__)\n+#define talloc_zero_size_strict(ctx, size) _talloc_zero_strict(ctx, size, __location__)\n \n #define talloc_zero_array(ctx, type, count) (type *)_talloc_zero_array(ctx, sizeof(type), count, #type)\n /* Varient of talloc_zero_array that returns NULL if count is zero. */\n@@ -100,6 +101,7 @@\n /* Varient of talloc_array that returns NULL if count is zero. */\n #define talloc_array_strict(ctx, type, count) (type *)_talloc_array_strict(ctx, sizeof(type), count, #type)\n #define talloc_array_size(ctx, size, count) _talloc_array(ctx, size, count, __location__)\n+#define talloc_array_size_strict(ctx, size, count) _talloc_array_strict(ctx, size, count, __location__)\n #define talloc_array_ptrtype(ctx, ptr, count) (_TALLOC_TYPEOF(ptr))talloc_array_size(ctx, sizeof(*(ptr)), count)\n \n #define talloc_realloc(ctx, p, type, count) (type *)_talloc_realloc_array(ctx, p, sizeof(type), count, #type)\n@@ -160,7 +162,9 @@\n void talloc_enable_leak_report(void);\n void talloc_enable_leak_report_full(void);\n void *_talloc_zero(const void *ctx, size_t size, const char *name);\n+void *_talloc_zero_strict(const void *ctx, size_t size, const char *name);\n void *_talloc_memdup(const void *t, const void *p, size_t size, const char *name);\n+void *_talloc_memdup_strict(const void *t, const void *p, size_t size, const char *name);\n char *talloc_strdup(const void *t, const char *p);\n char *talloc_strndup(const void *t, const char *p, size_t n);\n char *talloc_append_string(const void *t, char *orig, const char *append);\n@@ -169,7 +173,9 @@\n char *talloc_asprintf(const void *t, const char *fmt, ...) PRINTF_ATTRIBUTE(2,3);\n char *talloc_asprintf_append(char *s, const char *fmt, ...) PRINTF_ATTRIBUTE(2,3);\n void *_talloc_array(const void *ctx, size_t el_size, unsigned count, const char *name);\n+void *_talloc_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name);\n void *_talloc_zero_array(const void *ctx, size_t el_size, unsigned count, const char *name);\n+void *_talloc_zero_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name);\n void *_talloc_realloc_array(const void *ctx, void *ptr, size_t el_size, unsigned count, const char *name);\n void *talloc_realloc_fn(const void *context, void *ptr, size_t size);\n void *talloc_autofree_context(void);\n\nModified: branches/SAMBA_3_0_25/source/lib/talloc/talloc.h\n===================================================================\n--- branches/SAMBA_3_0_25/source/lib/talloc/talloc.h\t2007-04-27 21:09:16 UTC (rev 22539)\n+++ branches/SAMBA_3_0_25/source/lib/talloc/talloc.h\t2007-04-27 21:58:10 UTC (rev 22540)\n@@ -88,6 +88,7 @@\n /* Varient of talloc_zero that returns NULL if size is zero. */\n #define talloc_zero_strict(ctx, type) (type *)_talloc_zero_strict(ctx, sizeof(type), #type)\n #define talloc_zero_size(ctx, size) _talloc_zero(ctx, size, __location__)\n+#define talloc_zero_size_strict(ctx, size) _talloc_zero_strict(ctx, size, __location__)\n \n #define talloc_zero_array(ctx, type, count) (type *)_talloc_zero_array(ctx, sizeof(type), count, #type)\n /* Varient of talloc_zero_array that returns NULL if count is zero. */\n@@ -96,6 +97,7 @@\n /* Varient of talloc_array that returns NULL if count is zero. */\n #define talloc_array_strict(ctx, type, count) (type *)_talloc_array_strict(ctx, sizeof(type), count, #type)\n #define talloc_array_size(ctx, size, count) _talloc_array(ctx, size, count, __location__)\n+#define talloc_array_size_strict(ctx, size, count) _talloc_array_strict(ctx, size, count, __location__)\n #define talloc_array_ptrtype(ctx, ptr, count) (_TALLOC_TYPEOF(ptr))talloc_array_size(ctx, sizeof(*(ptr)), count)\n \n #define talloc_realloc(ctx, p, type, count) (type *)_talloc_realloc_array(ctx, p, sizeof(type), count, #type)\n@@ -156,7 +158,9 @@\n void talloc_enable_leak_report(void);\n void talloc_enable_leak_report_full(void);\n void *_talloc_zero(const void *ctx, size_t size, const char *name);\n+void *_talloc_zero_strict(const void *ctx, size_t size, const char *name);\n void *_talloc_memdup(const void *t, const void *p, size_t size, const char *name);\n+void *_talloc_memdup_strict(const void *t, const void *p, size_t size, const char *name);\n char *talloc_strdup(const void *t, const char *p);\n char *talloc_strndup(const void *t, const char *p, size_t n);\n char *talloc_append_string(const void *t, char *orig, const char *append);\n@@ -165,7 +169,9 @@\n char *talloc_asprintf(const void *t, const char *fmt, ...) PRINTF_ATTRIBUTE(2,3);\n char *talloc_asprintf_append(char *s, const char *fmt, ...) PRINTF_ATTRIBUTE(2,3);\n void *_talloc_array(const void *ctx, size_t el_size, unsigned count, const char *name);\n+void *_talloc_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name);\n void *_talloc_zero_array(const void *ctx, size_t el_size, unsigned count, const char *name);\n+void *_talloc_zero_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name);\n void *_talloc_realloc_array(const void *ctx, void *ptr, size_t el_size, unsigned count, const char *name);\n void *talloc_realloc_fn(const void *context, void *ptr, size_t size);\n void *talloc_autofree_context(void);\n\nModified: branches/SAMBA_4_0/source/lib/talloc/talloc.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/talloc/talloc.h\t2007-04-27 21:09:16 UTC (rev 22539)\n+++ branches/SAMBA_4_0/source/lib/talloc/talloc.h\t2007-04-27 21:58:10 UTC (rev 22540)\n@@ -92,6 +92,7 @@\n /* Varient of talloc_zero that returns NULL if size is zero. */\n #define talloc_zero_strict(ctx, type) (type *)_talloc_zero_strict(ctx, sizeof(type), #type)\n #define talloc_zero_size(ctx, size) _talloc_zero(ctx, size, __location__)\n+#define talloc_zero_size_strict(ctx, size) _talloc_zero_strict(ctx, size, __location__)\n \n #define talloc_zero_array(ctx, type, count) (type *)_talloc_zero_array(ctx, sizeof(type), count, #type)\n /* Varient of talloc_zero_array that returns NULL if count is zero. */\n@@ -100,6 +101,7 @@\n /* Varient of talloc_array that returns NULL if count is zero. */\n #define talloc_array_strict(ctx, type, count) (type *)_talloc_array_strict(ctx, sizeof(type), count, #type)\n #define talloc_array_size(ctx, size, count) _talloc_array(ctx, size, count, __location__)\n+#define talloc_array_size_strict(ctx, size, count) _talloc_array_strict(ctx, size, count, __location__)\n #define talloc_array_ptrtype(ctx, ptr, count) (_TALLOC_TYPEOF(ptr))talloc_array_size(ctx, sizeof(*(ptr)), count)\n \n #define talloc_realloc(ctx, p, type, count) (type *)_talloc_realloc_array(ctx, p, sizeof(type), count, #type)\n@@ -160,7 +162,9 @@\n void talloc_enable_leak_report(void);\n void talloc_enable_leak_report_full(void);\n void *_talloc_zero(const void *ctx, size_t size, const char *name);\n+void *_talloc_zero_strict(const void *ctx, size_t size, const char *name);\n void *_talloc_memdup(const void *t, const void *p, size_t size, const char *name);\n+void *_talloc_memdup_strict(const void *t, const void *p, size_t size, const char *name);\n char *talloc_strdup(const void *t, const char *p);\n char *talloc_strndup(const void *t, const char *p, size_t n);\n char *talloc_append_string(const void *t, char *orig, const char *append);\n@@ -169,7 +173,9 @@\n char *talloc_asprintf(const void *t, const char *fmt, ...) PRINTF_ATTRIBUTE(2,3);\n char *talloc_asprintf_append(char *s, const char *fmt, ...) PRINTF_ATTRIBUTE(2,3);\n void *_talloc_array(const void *ctx, size_t el_size, unsigned count, const char *name);\n+void *_talloc_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name);\n void *_talloc_zero_array(const void *ctx, size_t el_size, unsigned count, const char *name);\n+void *_talloc_zero_array_strict(const void *ctx, size_t el_size, unsigned count, const char *name);\n void *_talloc_realloc_array(const void *ctx, void *ptr, size_t el_size, unsigned count, const char *name);\n void *talloc_realloc_fn(const void *context, void *ptr, size_t size);\n void *talloc_autofree_context(void);\n\n"}