{"category": "ham", "to_address": "Chris Yocum <cyocum@gmail.com>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: Not Understanding TGE", "body": "Chris Yocum wrote:\n> Hi Everyone,\n>    I am not sure if this is the correct list to post this problem to\n> but I will try here first.\n\nThe main Parrot list is better for anything not specifically related to \nthe Perl 6 compiler.\n\n> I am having a problem with understanding\n> TGE and I was hoping someone might be able to give me some help.  I am\n> writing a parrot version of 1964 BASIC using the compiler tools and I\n> have the PGE part nearly complete (there are a few things that I need\n> to finish though) and I was looking forward to using TGE but I have\n> become stuck.\n>    My problem is that when I get through the first two parts of the\n> tree, I come to a point where things come to a screeching halt because\n> the node (in Basic64::Grammar::statement) does not seem to be anything\n> at all or anything that I can identify.  I know from the parse output\n> that Basic64::Grammar::statement is a ResizablePMCArray (size:1) but I\n> am not sure how to reflect that in PIR or if that is even significant\n> here.  Underneath that are the linenumber and statement_type rules but\n> I cannot seem to access them at all.\n>    I apologize in advance if this is something simple but any help\n> would be greatly appreciated.\n\nIf you can have more than one element in the statement array (I expect \nyou can) in the rule for Basic64::Grammar::statements, you need to grab \nthe array, and iterate over it, calling tree.'get' on each element of \nthe array. As an example, take a look at the PunieGrammar::lineseq rule \nin languages/punie/lib/ASTGrammar.tg.\n\nIf you can only ever have one statement (unlikely, but I mention it in \ncase it's useful for other rules), then you can just grab the first item \nin the array (e.g. \"cnode[0]\") and pass that to tree.'get'.\n\n(And thanks for the details you provided with the question. They made it \neasy to see the answer.)\n\nAllison\n\n"}