{"category": "ham", "to_address": "perl6-compiler@perl.org", "from_address": "\"Flavio S. Glock\" <fglock@gmail.com>", "subject": "Re: Request for kp6 compiler architecture review", "body": "This is a summary of the responses I've got on #perl6 irc.\n\nI'm sending the follow up to perl6-compiler only; I guess this is\noff-topic in perl6-language.\n\n2007/6/19, Flavio S. Glock :\n> I'm looking for comments on how to improve the compiler internals.\n>\n> For example:\n>\n> - One of my basic design principles was to implement AST\n> transformations as \"pluggable\" modules, using a visitor pattern.\n> Do you see potential problems with this approach?\n\nNo problems with the visitor pattern, but the way that \"aspects\" are\nimplemented in the AST-plugins might cause hard-to-detect errors.\nFor example, if the AST is changed in one place and the AST-plugin is\nnot updated, no error will be reported (pmurias++).\n\n> - BEGIN block side-effects are recorded in a hash. This adds an\n> overhead to all assignment operations. Do you see a better way to\n> check for side-effects?\n\nThis will probably be discussed in an irc meeting scheduled for next week.\n\nYesterday, we discussed the way the compiling environment is\nrepresented internally. It's complex, but it works. We don't have a\nsimpler solution yet.\n\n> I'd appreciate if I can get a compiler architecture review.\n>\n> I'm available on #perl6 in freenode (my timezone is -03:00).\n> You can find me there as 'fglock'.\n> Please share your comments either here on the mailinglist or via IRC.\n> I look forward to your feedback\n\nthanks!\n- Flavio S. Glock (fglock)\n\n"}