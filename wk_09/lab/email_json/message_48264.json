{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "\"Damian Conway\" <damian@conway.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Larry and Thom have each ably explained the rhyme and reason of the choices\nthat we made for Pod 6. Here I will merely summarize those reasons, and answer\na specific question.\n\n* Pod and Perl (or any other ambient source code) are to be syntactically\n  separated, even when there are semantic interconnections\n\n* Perl 6 will be able to access ambient Pod via $=POD (and other\n  $=WHATEVER variables)\n\n* It doesn't make sense for Pod to access ambient Perl, since Pod is a\n  passive mark-up notation, not an executable language\n\n* It is self-evidently the case that documentation can be usefully\n  derived from source code, as well as from explicit mark-up\n\n* That does not, however, mean that source code and explicit mark-up are\n  (or should be) either equivalent or syntactically commingled\n\n* Rather, it means that the *tools* that extract such documentation need to\n  be able to extract it from both explicit mark-up and source code\n\n* This will be possible in Perl 6, since both the Pod and Perl 6 parsers\n  will be accessible from Perl 6.\n\n* Pod 6 is not a presentational mark-up scheme; in fact, it has no\n  presentational elements at all\n\n* Pod 6 is both a structural and a semantic scheme; you can specify both the\n  structure of a document, and the meaning of its various components\n\n* Structural mark-up features are entirely lower-case (=head, =item, =table)\n  at the block level, and single-letter upper-case (B<>, N<>, S<>) at the\n  embedded level\n\n* Semantic mark-up features are entirely upper-case (=METHOD, =PURPOSE,\n  =DEFAULT)\n\n* The semantic features are intended to be used to facilitate the creation and\n  use of tools that can autoextract documentation elements directly from code\n\n* Such tools would (usually) convert the information extracted from\n  [source + semantic-Pod] into purely structural Pod, which could then\n  be fed to any suitable pod-to-whatever converter\n\n* In other words, the tool-chain envisaged is something like:\n\n                    perl6doc              pod2whatever\n\n        source\n          +                     purely\n    structural Pod  ------->  structural  -----------> plaintext\n          +                      Pod      \\----------> HTML\n     semantic Pod                          \\---------> XML\n                                            \\--------> roff\n                                             \\-------> MPEG\n                                              \\etc.\n\n\n* Which means that Pod 6 needs to be a suitable pure-structural-mark-up\n  target language with an extensible semantic overlayer\n\n* Which is precisely what it has already been designed to be\n\n\n* To summarize the summary:\n    - Use Perl for what Perl is good for (specification)\n    - Use Pod for what Pod is good for (commentary)\n    - Then generate unified documentation by extracting information from\n      wherever its available (source or mark-up), according to what the\n      reader asks for\n    - The issue is not having sufficiently powerful Pod syntax;\n      the issue is having sufficiently powerful documentation-generating *tools*\n\n\nTo answer Mark's specific question:\n\n  > class Mail::Message {\n  >     `base class for message types\n  >\n  >     .has $msgid;\n  >     `The (internet wide) unique string which identifies this\n  >     `message object.  May be undef as long as the message is\n  >     `begin composed.\n  >\n  >     .has $content_type = 'text/plain';\n  > }\n  >\n  > Damian, can you show how you would document the same code in POD6\n  > syntax to get a comparible short man-page?\n\nLike so:\n\n    class Mail::Message {\n    =PURPOSE  Base class for message types\n\n        has $msgid;\n    =for PURPOSE\n        The (internet wide) unique string which identifies this\n        message object.  May be undef as long as the message is\n        begin composed.\n\n        has $content_type = 'text/plain';\n    }\n\n\nDamian\n\nPS: I agree that there needs to be a mechanism for abstracting names\n    within Pod and for extracting those names from ambient code. I will\n    propose such a mechanism and the syntax for it in a subsequent email\n    (probably early next week).\n\n"}