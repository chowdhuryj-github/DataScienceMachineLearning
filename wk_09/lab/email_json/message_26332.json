{"category": "ham", "to_address": "\"Jeff Pang\" <pangj@earthlink.net>,\n   \"Jeremy Kister\" <perl-04@jeremykister.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: forking problem with dbd::mysql", "body": "On 5/9/07, Chas Owens  wrote:\n> On 5/9/07, Jeff Pang  wrote:\n> snip\n> > Yes but I think is this maybe a bug in DBI class?For example,open a file handle and\n> > after forking child close that handle,this would not affect parent's handle.\n> snip\n>\n> It definitely violates the principle of least surprise, but it is also\n> a very hard problem.  File handles are much simpler* in comparison.\n> The handle is auto-disconnecting so that you don't accidentally exit\n> your script leaving the database connection open.  Imagine a script\n> that connects to the database, runs a short query, and then ends.  Now\n> imagine that script running several times a second.  Each time it runs\n> it leaks a connection that is not reclaimed by the server until it\n> times out (if it times out).  The proper way to handle this (in my\n> opinion, which might be terribly flawed since I haven't thought about\n> it very hard yet) is to have some sort of flag that can be set on the\n> database handle to tell the DBI to destroy it without closing the\n> connection.  This flag could be set in the child and everybody would\n> be happy.  I am looking in the docs now to see if such a flag exists.\n> If it doesn't then I am going to bug the maintainers of both the DBI\n> and DBD::mysql to add it.\n>\n\nAnd happily such a flag exists: InactiveDestroy.\n\nJust add\n\n$dbh->{InactiveDestroy} = 1;\n\nto the child and the problem should go away.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}