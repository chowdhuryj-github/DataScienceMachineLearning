{"category": "ham", "to_address": "sugar@laptop.org", "from_address": "Simon McVittie <simon.mcvittie@collabora.co.uk>", "subject": "[sugar] [PATCH] services/presence/: move more of the handle\n\ttracking into the Buddy object", "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n- ---\n services/presence/buddy.py           |   25 +++++++++++++++-\n services/presence/presenceservice.py |   55 ++++++++++++++++++++++++++++-----\n 2 files changed, 70 insertions(+), 10 deletions(-)\n\ndiff --git a/services/presence/buddy.py b/services/presence/buddy.py\nindex ab397ef..eb072a1 100644\n- --- a/services/presence/buddy.py\n+++ b/services/presence/buddy.py\n@@ -80,7 +80,9 @@ class Buddy(ExportedGObject):\n         'property-changed': (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE,\n                             ([gobject.TYPE_PYOBJECT])),\n         'icon-changed':     (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE,\n- -                            ([gobject.TYPE_PYOBJECT]))\n+                            ([gobject.TYPE_PYOBJECT])),\n+        'disappeared':      (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE,\n+                            ([])),\n     }\n \n     __gproperties__ = {\n@@ -236,6 +238,12 @@ class Buddy(ExportedGObject):\n             full set of properties, just the changes.\n         \"\"\"\n \n+    def add_telepathy_handle(self, tp_client, handle):\n+        \"\"\"Add a Telepathy handle.\"\"\"\n+        conn = tp_client.get_connection()\n+        self.TelepathyHandleAdded(conn.service_name, conn.object_path, handle)\n+        self.handles[tp_client] = handle\n+\n     @dbus.service.signal(_BUDDY_INTERFACE, signature='sou')\n     def TelepathyHandleAdded(self, tp_conn_name, tp_conn_path, handle):\n         \"\"\"Another Telepathy handle has become associated with the buddy.\n@@ -250,6 +258,21 @@ class Buddy(ExportedGObject):\n             newly associated with the buddy\n         \"\"\"\n \n+    def remove_telepathy_handle(self, tp_client, handle):\n+        \"\"\"Remove a Telepathy handle.\"\"\"\n+        conn = tp_client.get_connection()\n+        my_handle = self.handles.get(tp_client, 0)\n+        if my_handle == handle:\n+            del self.handles[tp_client]\n+            self.TelepathyHandleRemoved(conn.service_name, conn.object_path,\n+                                        handle)\n+            if not self.handles:\n+                self.emit('disappeared')\n+        else:\n+            _logger.debug('Telepathy handle %u supposedly removed, but '\n+                          'my handle on that connection is %u - ignoring',\n+                          handle, my_handle)\n+\n     @dbus.service.signal(_BUDDY_INTERFACE, signature='sou')\n     def TelepathyHandleRemoved(self, tp_conn_name, tp_conn_path, handle):\n         \"\"\"A Telepathy handle has ceased to be associated with the buddy,\ndiff --git a/services/presence/presenceservice.py b/services/presence/presenceservice.py\nindex c554ce6..4bd4da8 100644\n- --- a/services/presence/presenceservice.py\n+++ b/services/presence/presenceservice.py\n@@ -126,12 +126,12 @@ class PresenceService(ExportedGObject):\n             objid = self._get_next_object_id()\n             buddy = Buddy(self._bus_name, objid, key=key)\n             buddy.connect(\"validity-changed\", self._buddy_validity_changed_cb)\n+            buddy.connect(\"disappeared\", self._buddy_disappeared_cb)\n             self._buddies[key] = buddy\n \n- -        buddies = self._handles_buddies[tp]\n- -        buddies[handle] = buddy\n+        self._handles_buddies[tp][handle] = buddy\n         # store the handle of the buddy for this CM\n- -        buddy.handles[tp] = handle\n+        buddy.add_telepathy_handle(tp, handle)\n \n         buddy.set_properties(props)\n \n@@ -143,6 +143,12 @@ class PresenceService(ExportedGObject):\n             self.BuddyDisappeared(buddy.object_path())\n             _logger.debug(\"Buddy left: %s (%s)\" % (buddy.props.nick, buddy.props.color))\n \n+    def _buddy_disappeared_cb(self, buddy):\n+        if buddy.props.valid:\n+            self.BuddyDisappeared(buddy.object_path())\n+            _logger.debug('Buddy left: %s (%s)' % (buddy.props.nick, buddy.props.color))\n+        self._buddies.pop(buddy.props.key)\n+\n     def _contact_offline(self, tp, handle):\n         if not self._handles_buddies[tp].has_key(handle):\n             return\n@@ -151,12 +157,7 @@ class PresenceService(ExportedGObject):\n         key = buddy.props.key\n \n         # the handle of the buddy for this CM is not valid anymore\n- -        buddy.handles.pop(tp)\n- -        if not buddy.handles:\n- -            if buddy.props.valid:\n- -                self.BuddyDisappeared(buddy.object_path())\n- -                _logger.debug(\"Buddy left: %s (%s)\" % (buddy.props.nick, buddy.props.color))\n- -            self._buddies.pop(key)\n+        buddy.remove_telepathy_handle(tp, handle)\n \n     def _get_next_object_id(self):\n         \"\"\"Increment and return the object ID counter.\"\"\"\n@@ -304,6 +305,42 @@ class PresenceService(ExportedGObject):\n                 return buddy.object_path()\n         raise NotFoundError(\"The buddy was not found.\")\n \n+    @dbus.service.method(_PRESENCE_INTERFACE, in_signature='sou',\n+                         out_signature='o')\n+    def GetBuddyByTelepathyHandle(self, tp_conn_name, tp_conn_path, handle):\n+        \"\"\"Get the buddy corresponding to a Telepathy handle.\n+\n+        :Parameters:\n+            `tp_conn_name` : str\n+                The well-known bus name of a Telepathy connection\n+            `tp_conn_path` : dbus.ObjectPath\n+                The object path of the Telepathy connection\n+            `handle` : int or long\n+                The handle of a Telepathy contact on that connection,\n+                of type HANDLE_TYPE_CONTACT. This may not be a\n+                channel-specific handle.\n+        :Returns: the object path of a Buddy\n+        :Raises NotFoundError: if the buddy is not found.\n+        \"\"\"\n+        for tp, handles in self._handles_buddies.iteritems():\n+            conn = tp.get_connection()\n+            if conn is None:\n+                continue\n+            if (conn.service_name == tp_conn_name\n+                and conn.object_path == tp_conn_path):\n+                buddy = handles.get(handle)\n+                if buddy is not None and buddy.props.valid:\n+                        return buddy.object_path()\n+                # either the handle is invalid, or we don't have a Buddy\n+                # object for that buddy because we don't have all their\n+                # details yet\n+                raise NotFoundError(\"The buddy %u was not found on the \"\n+                                    \"connection to %s:%s\"\n+                                    % (handle, tp_conn_name, tp_conn_path))\n+        raise NotFoundError(\"The buddy %u was not found: we have no \"\n+                            \"connection to %s:%s\" % (handle, tp_conn_name,\n+                                                     tp_conn_path))\n+\n     @dbus.service.method(_PRESENCE_INTERFACE, out_signature=\"o\")\n     def GetOwner(self):\n         if not self._owner:\n- -- \n1.5.2-rc3.GIT\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.6 (GNU/Linux)\nComment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net\n\niD8DBQFGUYFbWSc8zVUw7HYRAt/HAJwO9KlFyOVh8L3i5t+qmsr19Ag+/gCgjcyv\nE5WdXpj+JeTnlFnCj1wm11o=\n=idu8\n-----END PGP SIGNATURE-----\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}