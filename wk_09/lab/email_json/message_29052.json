{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r22830 - in branches/SAMBA_4_0/source/lib/events:\n\t.", "body": "Author: tridge\nDate: 2007-05-14 00:57:48 +0000 (Mon, 14 May 2007)\nNew Revision: 22830\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22830\n\nLog:\n\nmerged the latest lib/events updates from ctdb to Samba4. This\nincludes a new EVENT_FD_AUTOCLOSE flag that prevents race conditions\nwhere code using fd events might close a fd before releasing the\nstruct fd_event. That causes headaches for epoll.\n\nAdded:\n   branches/SAMBA_4_0/source/lib/events/libevents.m4\nModified:\n   branches/SAMBA_4_0/source/lib/events/config.m4\n   branches/SAMBA_4_0/source/lib/events/events.c\n   branches/SAMBA_4_0/source/lib/events/events.h\n   branches/SAMBA_4_0/source/lib/events/events_aio.c\n   branches/SAMBA_4_0/source/lib/events/events_epoll.c\n   branches/SAMBA_4_0/source/lib/events/events_liboop.c\n   branches/SAMBA_4_0/source/lib/events/events_select.c\n   branches/SAMBA_4_0/source/lib/events/events_standard.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/events/config.m4\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/config.m4\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/config.m4\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -5,6 +5,7 @@\n AC_CHECK_FUNCS(epoll_create)\n if test x\"$ac_cv_header_sys_epoll_h\" = x\"yes\" -a x\"$ac_cv_func_epoll_create\" = x\"yes\";then\n \tSMB_ENABLE(EVENTS_EPOLL,YES)\n+\tAC_DEFINE(HAVE_EVENTS_EPOLL, 1, [Whether epoll is available])\n \n \t# check for native Linux AIO interface\n \tAC_CHECK_HEADERS(libaio.h)\n\nModified: branches/SAMBA_4_0/source/lib/events/events.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events.c\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/events.c\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -71,6 +71,8 @@\n /* list of registered event backends */\n static struct event_ops_list *event_backends;\n \n+static char *event_default_backend = NULL;\n+\n /*\n   register an events backend\n */\n@@ -86,6 +88,15 @@\n }\n \n /*\n+  set the default event backend\n+ */\n+void event_set_default_backend(const char *backend)\n+{\n+\tif (event_default_backend) free(event_default_backend);\n+\tevent_default_backend = strdup(backend);\n+}\n+\n+/*\n   initialise backends if not already done\n */\n static void event_backend_init(void)\n@@ -99,8 +110,16 @@\n \trun_init_functions(shared_init);\n #else\n \tbool events_standard_init(void);\n+\tbool events_select_init(void);\n+\tevents_select_init();\n \tevents_standard_init();\n+#if HAVE_EVENTS_EPOLL\n+\t{\n+\t\tbool events_epoll_init(void);\n+\t\tevents_epoll_init();\n+\t}\n #endif\n+#endif\n }\n \n /*\n@@ -170,6 +189,9 @@\n \t}\n #endif\n \tif (name == NULL) {\n+\t\tname = event_default_backend;\n+\t}\n+\tif (name == NULL) {\n \t\tname = \"standard\";\n \t}\n \n@@ -195,6 +217,9 @@\n /*\n   add a fd based event\n   return NULL on failure (memory allocation error)\n+\n+  if flags contains EVENT_FD_AUTOCLOSE then the fd will be closed when\n+  the returned fd_event context is freed\n */\n struct fd_event *event_add_fd(struct event_context *ev, TALLOC_CTX *mem_ctx,\n \t\t\t      int fd, uint16_t flags, event_fd_handler_t handler,\n\nModified: branches/SAMBA_4_0/source/lib/events/events.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events.h\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/events.h\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -46,6 +46,7 @@\n struct event_context *event_context_init(TALLOC_CTX *mem_ctx);\n struct event_context *event_context_init_byname(TALLOC_CTX *mem_ctx, const char *name);\n const char **event_backend_list(TALLOC_CTX *mem_ctx);\n+void event_set_default_backend(const char *backend);\n \n struct fd_event *event_add_fd(struct event_context *ev, TALLOC_CTX *mem_ctx,\n \t\t\t      int fd, uint16_t flags, event_fd_handler_t handler,\n@@ -79,6 +80,7 @@\n /* bits for file descriptor event flags */\n #define EVENT_FD_READ 1\n #define EVENT_FD_WRITE 2\n+#define EVENT_FD_AUTOCLOSE 4\n \n #define EVENT_FD_WRITEABLE(fde) \\\n \tevent_set_fd_flags(fde, event_get_fd_flags(fde) | EVENT_FD_WRITE)\n\nModified: branches/SAMBA_4_0/source/lib/events/events_aio.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events_aio.c\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/events_aio.c\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -361,6 +361,11 @@\n \n \tepoll_del_event(aio_ev, fde);\n \n+\tif (fde->flags & EVENT_FD_AUTOCLOSE) {\n+\t\tclose(fde->fd);\n+\t\tfde->fd = -1;\n+\t}\n+\n \treturn 0;\n }\n \n\nModified: branches/SAMBA_4_0/source/lib/events/events_epoll.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events_epoll.c\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/events_epoll.c\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -136,7 +136,9 @@\n \tZERO_STRUCT(event);\n \tevent.events = epoll_map_flags(fde->flags);\n \tevent.data.ptr = fde;\n-\tepoll_ctl(epoll_ev->epoll_fd, EPOLL_CTL_DEL, fde->fd, &event);\n+\tif (epoll_ctl(epoll_ev->epoll_fd, EPOLL_CTL_DEL, fde->fd, &event) != 0) {\n+\t\tDEBUG(0,(\"epoll_del_event failed! probable early close bug (%s)\\n\", strerror(errno)));\n+\t}\n \tfde->additional_flags &= ~EPOLL_ADDITIONAL_FD_FLAG_HAS_EVENT;\n }\n \n@@ -202,7 +204,7 @@\n static int epoll_event_loop(struct epoll_event_context *epoll_ev, struct timeval *tvalp)\n {\n \tint ret, i;\n-#define MAXEVENTS 8\n+#define MAXEVENTS 32\n \tstruct epoll_event events[MAXEVENTS];\n \tuint32_t destruction_count = ++epoll_ev->destruction_count;\n \tint timeout = -1;\n@@ -306,6 +308,11 @@\n \n \tepoll_del_event(epoll_ev, fde);\n \n+\tif (fde->flags & EVENT_FD_AUTOCLOSE) {\n+\t\tclose(fde->fd);\n+\t\tfde->fd = -1;\n+\t}\n+\n \treturn 0;\n }\n \n\nModified: branches/SAMBA_4_0/source/lib/events/events_liboop.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events_liboop.c\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/events_liboop.c\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -101,6 +101,11 @@\n \tif (fde->flags & EVENT_FD_WRITE)\n \t\toop->cancel_fd(oop, fde->fd, OOP_WRITE);\n \n+\tif (fde->flags & EVENT_FD_AUTOCLOSE) {\n+\t\tclose(fde->fd);\n+\t\tfde->fd = -1;\n+\t}\n+\n \treturn 0;\n }\n \n\nModified: branches/SAMBA_4_0/source/lib/events/events_select.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events_select.c\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/events_select.c\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -104,6 +104,11 @@\n \tDLIST_REMOVE(select_ev->fd_events, fde);\n \tselect_ev->destruction_count++;\n \n+\tif (fde->flags & EVENT_FD_AUTOCLOSE) {\n+\t\tclose(fde->fd);\n+\t\tfde->fd = -1;\n+\t}\n+\n \treturn 0;\n }\n \n\nModified: branches/SAMBA_4_0/source/lib/events/events_standard.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/events_standard.c\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/events_standard.c\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -30,7 +30,7 @@\n \n #include \"includes.h\"\n #include \"system/filesys.h\"\n-#include \"system/select.h\" /* needed for WITH_EPOLL */\n+#include \"system/select.h\" /* needed for HAVE_EVENTS_EPOLL */\n #include \"lib/util/dlinklist.h\"\n #include \"lib/events/events.h\"\n #include \"lib/events/events_internal.h\"\n@@ -61,7 +61,7 @@\n };\n \n /* use epoll if it is available */\n-#if WITH_EPOLL\n+#if HAVE_EVENTS_EPOLL\n /*\n   called when a epoll call fails, and we should fallback\n   to using select\n@@ -229,15 +229,15 @@\n \t\ttimeout = ((tvalp->tv_usec+999) / 1000) + (tvalp->tv_sec*1000);\n \t}\n \n-\tif (epoll_ev->ev->num_signal_handlers && \n-\t    common_event_check_signal(epoll_ev->ev)) {\n+\tif (std_ev->ev->num_signal_handlers && \n+\t    common_event_check_signal(std_ev->ev)) {\n \t\treturn 0;\n \t}\n \n \tret = epoll_wait(std_ev->epoll_fd, events, MAXEVENTS, timeout);\n \n-\tif (ret == -1 && errno == EINTR && epoll_ev->ev->num_signal_handlers) {\n-\t\tif (common_event_check_signal(epoll_ev->ev)) {\n+\tif (ret == -1 && errno == EINTR && std_ev->ev->num_signal_handlers) {\n+\t\tif (common_event_check_signal(std_ev->ev)) {\n \t\t\treturn 0;\n \t\t}\n \t}\n@@ -353,6 +353,11 @@\n \n \tepoll_del_event(std_ev, fde);\n \n+\tif (fde->flags & EVENT_FD_AUTOCLOSE) {\n+\t\tclose(fde->fd);\n+\t\tfde->fd = -1;\n+\t}\n+\n \treturn 0;\n }\n \n\nAdded: branches/SAMBA_4_0/source/lib/events/libevents.m4\n===================================================================\n--- branches/SAMBA_4_0/source/lib/events/libevents.m4\t2007-05-14 00:31:04 UTC (rev 22829)\n+++ branches/SAMBA_4_0/source/lib/events/libevents.m4\t2007-05-14 00:57:48 UTC (rev 22830)\n@@ -0,0 +1,11 @@\n+EVENTS_OBJ=\"lib/events/events.o lib/events/events_select.o lib/events/events_signal.o lib/events/events_timed.o lib/events/events_standard.o\"\n+\n+AC_CHECK_HEADERS(sys/epoll.h)\n+AC_CHECK_FUNCS(epoll_create)\n+\n+if test x\"$ac_cv_header_sys_epoll_h\" = x\"yes\" -a x\"$ac_cv_func_epoll_create\" = x\"yes\"; then\n+   EVENTS_OBJ=\"$EVENTS_OBJ lib/events/events_epoll.o\"\n+   AC_DEFINE(HAVE_EVENTS_EPOLL, 1, [Whether epoll available])\n+fi\n+\n+AC_SUBST(EVENTS_OBJ)\n\n"}