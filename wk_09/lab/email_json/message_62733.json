{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Michael Scondo <michael.scondo@phil.stud.uni-erlangen.de>", "subject": "Memory leaks with threads", "body": "Hi,\nI'm still trying to get familiar with threads and sockets.\n\nHowever, I got in some troubles with memory leaks, could anyone perhaps give \nme a hint in which way I should write a multithreaded socket server ?\n\n\nI wrote a small server, which accepts connections on a tcp socket and spawns a \nnew thread for each connection, which terminates when the socket has been \nclosed.\n\nThe server runs fine, however, while stresstesting, I experienced a runaway of \nthe memory consumption.\nAfter a few hundred connects and disconnects I'll get an Out of memory. :-(\n\nIn order to test threads in perl, I wrote a new script which just spawns and \nterminates threads. ( Attached it below )\n\nI already figured out that global variables seem to lead to memory leaks, \nhowever, although the memory size raises slower now, it still raises. ( which \nI didn't expect ).\n\nI stumbled over http://search.cpan.org/~rybskej/forks-0.23/lib/forks.pm, which \nseems to be a replacement for ithreads and also has the advantage of not \nneeding a thread enabled perl.\nHowever, there are still memory leaks with this module.\n\n\n\nMy conclusion is to write a preforked server, using the forks module mentioned \nabove and create a pool of  say 50 preforked threads at startup time.\n\nBut, are there perhaps any better possiblities or recommendations ?\n\nThanks,\nMichael\n\n--------------------------\n\n#!/usr/bin/perl -w\n\nuse threads;\nuse threads::shared;\n\n#use forks;\n#use forks::shared;\n\nshare $threadscount;\n$threadscount = 0;\n\nshare $createthreads;\n$createthreads = 1;\n\nshare $maxthreads;\n$maxthreads = 0;\n\n\nsub thread{\n\t\tmy $count;\n\t\t{ \n\t\t\t\tlock $threadscount;\n\t\t\t\t$threadscount ++;\n\t\t\t\t$count = $threadscount;\n\n\t\t\t\tlock $maxthreads;\n\t\t\t\tif ( $count>$maxthreads ){\n\t\t\t\t\t\t$maxthreads = $count;\n\t\t\t\t}\n\t\t}\n\t\t#print \"$count\\n\";\n\t\tsleep 4;\n\n\t\tlock $threadscount;\n\t\t$threadscount --;\n}\n\n\nsub threadcreator{\n\t\tmy $tc;\n\t\tdo {\n\t\t\t\tmy $t = threads->create(\"thread\");\n\t\t\t\t$t->detach();\n\t\t\t\tlock $createthreads;\n\t\t\t\t$tc = $createthreads;\n\t\t} while ( $tc );\n}\n\t\n\nwhile ( 1 ){\n{\n\t\tlock $createthreads;\n\t\t$createthreads = 1;\n}\n\nmy $thread = threads->create(\"threadcreator\");\n$thread->detach();\nsleep 4;\n\n{\n\t\tlock $createthreads;\n\t\t$createthreads = 0;\n}\n\nmy $count;\ndo {\n\t\t#sleep 3;\n\t\tlock $threadscount;\n\t\t$count = $threadscount;\n} while ( $count > 0 );\n{ \n\t\tlock $maxthreads;\n\t\tprint \"maxthreads: $maxthreads\\n\";\n}\n}\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}