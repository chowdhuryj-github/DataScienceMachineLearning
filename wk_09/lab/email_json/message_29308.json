{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: Can't sort error out; strict refs", "body": "Mathew Snyder wrote:\n>\n> I'm passing two hash references into a subroutine.  One hash is in the format of\n> $dept{$env}{$user}.  This contains an amount of time spent by each user on a\n> customer ($env).  The second hash is in the format of\n> $ticCount{$env}{$user}{$ticID}.  This contains a running count of how many times\n> a user worked on ticket '$ticID' which belongs to customer '$env'.  I won't be\n> using that number though.  What I need is the number of tickets worked on so I\n> simply use 'scalar keys' on this hash.\n> \n> The problem I'm encountering though, is that I'm passing the hashes into my\n> subroutine as references.  When I get to the statement that gets the key count I\n> get an error: \"Can't use string (\"2\") as a HASH ref while \"strict refs\" in use\n> at user_timesheet.pl line 63.\"  Presumably, 2 is the number of keys at\n> $ticCount{$env}{$user}{$ticID}.\n> \n> sub average {\n> \n>   my ($users, $count) = @_;\n>   my %userAvg;\n> \n>   foreach my $env (keys %$count) {\n>     foreach my $user (keys %{ $count->{$env} }) {\n>       foreach my $ticID (keys %{ $count->{$env}->{$user} }) {\n> \n>         my $ticCount = scalar keys %{$count->{$env}->{$user}->{$ticID}};\n> \n>         my @meantemp;\n>         my @meantime;\n>         my @endtime;\n> \n>         my $temp     = $users->{$env}->{$user};\n>         @meantemp    = split /\\./, ($temp / $ticCount);\n> \n>         # If the time divided by the number of tickets has a decimal\n>         # value round up if that value is greater than\n>         # 0.5.  This will give an even number of minutes to figure\n>         # out the mean time with.\n>         if ($meantemp[1]) {\n>           if ($meantemp[1] >= 5) {\n>             $meantemp[0]++;\n>           }\n>         }\n>         @meantime  = split /\\./, ($meantemp[0] / 60);\n>         $endtime[0]  = $meantime[0];\n>         $endtime[1]  = $meantemp[0] % 60;\n>         $userAvg{$env}{$user} = sprintf '%d:%02d', @endtime[0,1];\n>       }\n>     }\n>   }\n> \n>   return %userAvg;\n> }\n> \n> I've run this in the debugger and when I get to the line which assigns $ticCount\n> I try to print it out and it's just blank.  If I keep hitting enter it just\n> returns to a blank line.  I get the error when I continue to the next line with 'c'.\n\nHi Mathew\n\nFirst of all, you can replace\n\n  $count->{$env}->{$user}->{$ticID}\n\nwith\n\n  $count->{$env}{$user}{$ticID}\n\nand Perl will infer the indirection. It makes for neater code.\n\nThe reason for your problem is that you've gone too far down in the hash structure. You\nsaid that $count->{$env}{$user}{$ticID} is a \"count of how many times a user worked on\n[a] ticket\", in this case 2. so you're then trying to do\n\n  my $ticCount = scalar keys %{2};\n\nwhich is failing.\n\nFinally, you can round more efficiently by using int(x + 0.5). I suggest something\nlike this (untested):\n\n  sub average {\n\n    my ($users, $count) = @_;\n    my %userAvg;\n\n    foreach my $env (keys %$count) {\n      foreach my $user (keys %{ $count->{$env} }) {\n\n          my $ticCount = scalar keys %{$count->{$env}{$user}};\n\n          my $time = $users->{$env}{$user};\n          my $meantime = int($time / $ticCount + 0.5);\n\n          $userAvg{$env}{$user} = sprintf '%d:%02d',\n              int($meantime / 60), $meantime % 60;\n      }\n    }\n\n    return %userAvg;\n  }\n\nHTH,\n\nRob\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}