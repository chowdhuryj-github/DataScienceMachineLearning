{"category": "ham", "to_address": "Perl Beginners <beginners@perl.org>", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: testing return values", "body": "Mike Lesser wrote:\n> Hiya. I'm looking for the correct Perl style for testing and storing a \n> return value in a control statement. The solution in any other language \n> is pretty obvious, but I get the distinct impression that there's a \n> 'right' way in Perl...\n> \n> Let's say I want to test a scalar returned from a subroutine, and also \n> keep a copy for my own use:\n> \n>  $scalar = sub( $argument );\n> \n>  if( $scalar ){\n>  }\n> \n> Naturally that's no big deal. Now let's say I have a tree I want to \n> traverse, or some similar open-ended thing to evaluate, and want to run \n> it until a condition is reached..\n> \n>  while( read_tree( $argument ){\n>  }\n> \n> Again no biggie. The problem is if I want to keep the result. Obviously \n> I can't do this:\n> \n> while( $tree_element = read_tree( $argument ) ){\n>    do_something( $tree_element );\n> }\n> \n> I can come up with a brute-force solution of course, but there's \n> probably a better, Perlish way that I'm not aware of. In addition, I \n> don't expect a return value from some module to be consistently \n> undefined or zero; it could change under some circumstances. This makes \n> me think that the problem has been dealt with long ago, and just doesn't \n> stick out in the llama/alpaca/whatever books.\n> \n> Hopefully I explained this correctly!\n\nwhile (my $x = func()) {\n  :\n}\n\nis perfectly valid. In Perl every operator returns a value, and the assignment\noperator is no exception. It's value is the expression on the left of the equals\nsign, and it's even an lvalue so you can do things like\n\n  ($x = 3)++;\n\nleaving $x with a value of four. This sort of thing is more useful for things like\n\n  $p = $q = 'A';\n\nwhich is the same as\n\n  $p = ($q = 'A');\n\nor\n\n  $q = 'A'; $p = $q;\n\nBut the bottom line is that your while loop is quite valid.\n\nHTH,\n\nRob\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}