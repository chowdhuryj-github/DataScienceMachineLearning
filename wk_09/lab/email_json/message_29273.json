{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Thomas Wittek <mail@gedankenkonstrukt.de>", "subject": "Re: Is Perl 6 too late?", "body": "Moritz Lenz schrieb:\n>> What makes Perl hard to read is the excessive use of special characters\n>> (/\\W/).\n> \n> I disagree: The make it look ugly, but not hard to read.\n\nEven if it's \"only\" ugly: To what advantage? I don't think ugliness is a \ngood characteristic of a programming language.\n\n>> Global variables with cryptic names, that no beginner can make any sense\n>> of by reading it. And after not working with \"$<\" for some months I\n>> can't remember it either, although I've got quite some Perl experience.\n> \n> Well, most of them are gone or renamed to more readable ones in p6.\n\nI hope so. I could only find the counterparts for __PACKAGE__ etc. in \nS02. I didn't find the one for e.g. $<.\n\n>> Additionally I'm not a friend of sigils: \n> \n> Then you shouldn't program in perl. Really.\n\nReason? I still haven't seen a good justification for sigils.\nTo allow arrays and scalars and subs to have the same name (besides the \nsigil) although they have different content? No good idea I think.\nI also can't remember that I ever named a variable like a \"reserved \nword\" or operator. And even if I could, I'd consider it to be bad style.\n\n>> I would also like semicolons to be optional. \n> \n> Most people don't ;-).\n\nOh, really? Source? :)\nI think they were invented to allow easier parsing and not easier coding.\nE.g. in JavaScript, Python, Ruby and Groovy they are optional or even \ndon't exist. As I said, there are much more cases where you wouldn't \nneed them but have to write them than vice versa.\nOptional semicolons save keystrokes, eye pain and stupid syntactic \nerrors. And if you still like them, you could just use them, which is \nthe definition of \"optional\".\n\n>> I really like the Python way of doing it: Set the variables type on the\n>> assignment and remember it. The (fewer) operators now work according to\n>> the type of the operands. No implicit (and error prone) type casting.\n>> That way seems to be the best compromise of easiness and type safety.\n> \n> Well, if you like the python way, feel free to code in python.\n\nOh, if I didn't like Perl, why should I care about posting my ideas here?\nPerl has stolen the largest part of the language from other languages.\nWhy not do so again by adopting good ideas.\n\n> Don't get me wrong, there's nothing bad in writing some critics, but\n> yours is impossible to realize in Perl 6\n\nAdmittedly I'm much too late and I didn't expect applause for my critics \n-- but at least I hoped to get a discussion based on arguments.\n\n > and therefore are it's hard to call it constructive.\n\nUnfortunately I already thought this. Even if everyone agreed that \nsigils (or forced semicolons, or tons of operators, ...) are more bad \nthan good (and this seems like persuading the pope to allow homosexual \nmuslims to marry with priests) the design process is probably too far to \nintroduce such dramatic changes.\nSadly.\n\n-- \nThomas Wittek\nhttp://gedankenkonstrukt.de/\nJabber: streawkceur@jabber.i-pobox.net\n\n"}