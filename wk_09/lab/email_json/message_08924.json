{"category": "ham", "to_address": "\"Allison Randal\" <allison@perl.org>", "from_address": "\"Alek Storm\" <alek.storm@gmail.com>", "subject": "Re: [perl #42430] [PATCH] make :vtable imply :method", "body": "On 4/16/07, Allison Randal  wrote:\n> Here's the original post where I gave the rationale for making the flags\n> work as they do:\n>\n> \n\n>From the link: < I'm comfortable with a modification saying that :vtable always gets the\n> 'self' parameter like :method does. But without :method, :vtable should\n> not make an entry in the namespace of the class, or call 'add_method' on\n> the class. This results in simpler syntax for the cases where you only\n> want to override the vtable entry.\n\nMaking :method mean one thing when used with :vtable, and something\ncompletely different without, seems like a really bad idea to me, and\nis confusing to the user.  The user will also be confused because\nadding :vtable removes it from the namespace, which they didn't\nexplicitly ask it to do.  What is :anon good for if we use a\ncompletely different system for :vtable?\n\nHere are the semantics you've proposed:\n\n.sub get_string # normal sub, attached to a namespace but not a method\n\n.sub get_string :method # a full method, attached to a namespace\n\n.sub get_string :vtable # a vtable method, but not attached to a\nnamespace (user wonders why, since methods are attached to their\nnamespace)\n\n.sub get_string :vtable :method # adding :method attaches it to a\nnamespace (*not* what :method means without :vtable - user wonders why\nthey need it, since it's already a method)\n\n.sub get_string :vtable :anon # unspecified\n\n.sub get_string :vtable :method :anon # now we're in trouble\n\nThe same thing, with what I've proposed:\n\n.sub get_string # normal sub, attached to a namespace but not a method\n\n.sub get_string :method # a full method, attached to a namespace\n\n.sub get_string :vtable # a method that also overrides the vtable\n\n.sub get_string :vtable :method # same as before\n\n.sub get_string :vtable :anon # same, but not attached to the\nnamespace (note that the user has actually specified this, so they\nexpect it to happen)\n\n.sub get_string :vtable :method :anon # same as before\n\n-- \nAlek Storm\n\n"}