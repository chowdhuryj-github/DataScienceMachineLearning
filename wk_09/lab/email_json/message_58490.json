{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Bob Rogers <rogers-perl6@rgrjr.dyndns.org>", "subject": "[perl #43417] Should we change the API of functions just for real_exception()? ", "body": "   From: Paul Cochrane (via RT) \n   Date: Thu, 28 Jun 2007 11:06:47 -0700\n\n   # New Ticket Created by  Paul Cochrane \n   # Please include the string:  [perl #43417]\n   # in the subject line of all future correspondence about this issue. \n   # \n\n   Hi all,\n\n   As part of going through and converting internal_exception()s to\n   real_exception()s (see RT#40392) I've found several functions which\n   could use real_exception(), but to use this they would have to have\n   the interpreter passed in as an argument, hence changing their API.\n   Is it worth changing these functions' API just for a real_exception()?\n\n   Comments most definitely welcome!\n\n   Paul\n\nAs far as I'm concerned, the only places where we should keep\ninternal_exception are those where throwing an exception would just make\nit worse, e.g. when deep memory corruption is detected and throwing is\nso likely to fail that it would only obscure the source of the error.\nI've been converting calls to use real_exception one at a time, because\nI needed to see the backtrace to debug something else; that alone, IMHO,\nis worth API changes.  Using real_exception will become even more\nhelpful as code gets more complicated and interactive debugging becomes\nmore powerful.\n\n   So my vote is a resounding YES!\n\n   If you would like to pass some or all of these cases on to me, please\ndo; just let me know, so I'm not stepping on your toes.\n\n\t\t\t\t\t-- Bob Rogers\n\t\t\t\t\t   http://rgrjr.dyndns.org/\n\n"}