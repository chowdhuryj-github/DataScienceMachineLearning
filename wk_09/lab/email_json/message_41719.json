{"category": "ham", "to_address": "Bernhard Schmalhofer via RT <parrotbug-followup@parrotcode.org>", "from_address": "Nicholas Clark <nick@ccl4.org>", "subject": "Re: [perl #43105] [PATCH] function mmd.c::mmd_expand_y: newly allocated memory unitialized", "body": "On Sun, Jun 03, 2007 at 08:00:18AM -0700, Bernhard Schmalhofer via RT wrote:\n\n> I have looked at the 'more_memory.patch' and I'm wondering about the\n> portability.\n> In that patch loops where pointers are explicitly set to NULL\n> are replaced with a  \n>   memset( start, 0, len);\n> \n> What happens when NULL is not a consective series of '\\0' chars?\n\nI think that it breaks.\n\n> Are there such platforms and are they releavant for parrot?\n\nI believe that this assumption is endemic in Perl 5, and it's never hindered\nPerl 5's portability. The C FAQ gives examples of platforms where NULL is not\nall bits zero - http://c-faq.com/null/machexamp.html - and I've never\nencountered anyone using them.\n\n(As an aside, I think that Perl 5 also (mostly?) doesn't assume 2s complement\nstorage of integers. IIRC a bug report from a Ahmdal mainframes gave the\nimpression that it was using sign and magnitude. However, we've not heard\nabout anyone using Ahmdal mainframes in years. Likewise no-one has missed the\nremoval of memory model support from Configure, so presumably no-one is\ncompiling on a PDP-11 anymore. We did discover nasal daemons, or something\nsimilarly painful, on Irix64, until we removed assumptions about signed\ninteger overflow. (It's undefined behaviour. It will bite))\n\nNicholas Clark\n\n"}