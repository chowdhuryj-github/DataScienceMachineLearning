{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23660 - in branches: SAMBA_3_0/source\n\tSAMBA_3_0/source/lib SAMBA_3_0/source/torture\n\tSAMBA_3_0_26/source SAMBA_3_0_26/source/lib\n\tSAMBA_3_0_26/source/torture", "body": "Author: vlendec\nDate: 2007-06-29 17:27:59 +0000 (Fri, 29 Jun 2007)\nNew Revision: 23660\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23660\n\nLog:\nAnybody know what check_dos_char() was used for? It wasn't called at\nall, so it's gone. With it 8k bss went away.\n\nRemoved:\n   branches/SAMBA_3_0/source/torture/t_doschar.c\n   branches/SAMBA_3_0_26/source/torture/t_doschar.c\nModified:\n   branches/SAMBA_3_0/source/Makefile.in\n   branches/SAMBA_3_0/source/lib/charcnv.c\n   branches/SAMBA_3_0/source/lib/util_unistr.c\n   branches/SAMBA_3_0_26/source/Makefile.in\n   branches/SAMBA_3_0_26/source/lib/charcnv.c\n   branches/SAMBA_3_0_26/source/lib/util_unistr.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0/source/Makefile.in\t2007-06-29 17:09:39 UTC (rev 23659)\n+++ branches/SAMBA_3_0/source/Makefile.in\t2007-06-29 17:27:59 UTC (rev 23660)\n@@ -1735,8 +1735,6 @@\n bin/t_stringoverflow@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_stringoverflow.o\n \t$(CC) $(FLAGS) -o $@ $(DYNEXP) torture/t_stringoverflow.o -L./bin -lbigballofmud\n \n-bin/t_doschar@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_doschar.o\n-\t$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_doschar.o -L ./bin -lbigballofmud\n bin/t_push_ucs2@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_push_ucs2.o\n \t$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_push_ucs2.o -L ./bin -lbigballofmud\n \n\nModified: branches/SAMBA_3_0/source/lib/charcnv.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/charcnv.c\t2007-06-29 17:09:39 UTC (rev 23659)\n+++ branches/SAMBA_3_0/source/lib/charcnv.c\t2007-06-29 17:27:59 UTC (rev 23660)\n@@ -179,7 +179,6 @@\n \t\t * codepage changes? */\n \t\t/* XXX: Is the did_reload test too strict? */\n \t\tconv_silent = True;\n-\t\tinit_doschar_table();\n \t\tinit_valid_table();\n \t\tconv_silent = False;\n \t}\n\nModified: branches/SAMBA_3_0/source/lib/util_unistr.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/util_unistr.c\t2007-06-29 17:09:39 UTC (rev 23659)\n+++ branches/SAMBA_3_0/source/lib/util_unistr.c\t2007-06-29 17:27:59 UTC (rev 23660)\n@@ -36,14 +36,6 @@\n static BOOL valid_table_use_unmap;\n \n /**\n- * This table says which Unicode characters are valid dos\n- * characters.\n- *\n- * Each value is just a single bit.\n- **/\n-static uint8 doschar_table[8192]; /* 65536 characters / 8 bits/byte */\n-\n-/**\n  * Destroy global objects allocated by load_case_tables()\n  **/\n void gfree_case_tables(void)\n@@ -150,21 +142,6 @@\n #endif\n }\n \n-/*\n-  see if a ucs2 character can be mapped correctly to a dos character\n-  and mapped back to the same character in ucs2\n-*/\n-\n-int check_dos_char(smb_ucs2_t c)\n-{\n-\tlazy_initialize_conv();\n-\t\n-\t/* Find the right byte, and right bit within the byte; return\n-\t * 1 or 0 */\n-\treturn (doschar_table[(c & 0xffff) / 8] & (1 << (c & 7))) != 0;\n-}\n-\n-\n static int check_dos_char_slowly(smb_ucs2_t c)\n {\n \tchar buf[10];\n@@ -182,34 +159,7 @@\n \treturn (c == c2);\n }\n \n-\n /**\n- * Fill out doschar table the hard way, by examining each character\n- **/\n-\n-void init_doschar_table(void)\n-{\n-\tint i, j, byteval;\n-\n-\t/* For each byte of packed table */\n-\t\n-\tfor (i = 0; i <= 0xffff; i += 8) {\n-\t\tbyteval = 0;\n-\t\tfor (j = 0; j <= 7; j++) {\n-\t\t\tsmb_ucs2_t c;\n-\n-\t\t\tc = i + j;\n-\t\t\t\n-\t\t\tif (check_dos_char_slowly(c)) {\n-\t\t\t\tbyteval |= 1 << j;\n-\t\t\t}\n-\t\t}\n-\t\tdoschar_table[i/8] = byteval;\n-\t}\n-}\n-\n-\n-/**\n  * Load the valid character map table from valid.dat or\n  * create from the configured codepage.\n  *\n@@ -257,7 +207,7 @@\n \tfor (;i<0x10000;i++) {\n \t\tsmb_ucs2_t c;\n \t\tSSVAL(&c, 0, i);\n-\t\tvalid_table[i] = check_dos_char(c);\n+\t\tvalid_table[i] = check_dos_char_slowly(c);\n \t}\n }\n \n\nDeleted: branches/SAMBA_3_0/source/torture/t_doschar.c\n===================================================================\n--- branches/SAMBA_3_0/source/torture/t_doschar.c\t2007-06-29 17:09:39 UTC (rev 23659)\n+++ branches/SAMBA_3_0/source/torture/t_doschar.c\t2007-06-29 17:27:59 UTC (rev 23660)\n@@ -1,42 +0,0 @@\n-/*\n-   Samba - Unix SMB/CIFS implementation\n-   Test harness for check_dos_char\n-   Copyright (C) Martin Pool 2003\n-   \n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 2 of the License, or\n-   (at your option) any later version.\n-   \n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-   \n-   You should have received a copy of the GNU General Public License\n-   along with this program; if not, write to the Free Software\n-   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n-*/\n-\n-#include \"includes.h\"\n-\n-\n-/*\n- * Just print out DOS validity or not for every character.\n- *\n- * DOS validity for a Unicode character set means that it can be\n- * represented in DOS codepage, and that the DOS character maps back\n- * to the same Unicode character.\n- *\n- * This depends on which DOS codepage is configured.\n- */\n- int main(void)\n-{\n-\tsmb_ucs2_t\ti;\n-\n-\tfor (i = 0; i < 0xffff; i++) {\n-\t\tprintf(\"%d %d\\n\", (int) i, (int) check_dos_char(i));\n-\t}\n-\t\n-\treturn 0;\n-}\n\nModified: branches/SAMBA_3_0_26/source/Makefile.in\n===================================================================\n--- branches/SAMBA_3_0_26/source/Makefile.in\t2007-06-29 17:09:39 UTC (rev 23659)\n+++ branches/SAMBA_3_0_26/source/Makefile.in\t2007-06-29 17:27:59 UTC (rev 23660)\n@@ -1725,8 +1725,6 @@\n bin/t_stringoverflow@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_stringoverflow.o\n \t$(CC) $(FLAGS) -o $@ $(DYNEXP) torture/t_stringoverflow.o -L./bin -lbigballofmud\n \n-bin/t_doschar@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_doschar.o\n-\t$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_doschar.o -L ./bin -lbigballofmud\n bin/t_push_ucs2@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_push_ucs2.o\n \t$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_push_ucs2.o -L ./bin -lbigballofmud\n \n\nModified: branches/SAMBA_3_0_26/source/lib/charcnv.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/charcnv.c\t2007-06-29 17:09:39 UTC (rev 23659)\n+++ branches/SAMBA_3_0_26/source/lib/charcnv.c\t2007-06-29 17:27:59 UTC (rev 23660)\n@@ -179,7 +179,6 @@\n \t\t * codepage changes? */\n \t\t/* XXX: Is the did_reload test too strict? */\n \t\tconv_silent = True;\n-\t\tinit_doschar_table();\n \t\tinit_valid_table();\n \t\tconv_silent = False;\n \t}\n\nModified: branches/SAMBA_3_0_26/source/lib/util_unistr.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/util_unistr.c\t2007-06-29 17:09:39 UTC (rev 23659)\n+++ branches/SAMBA_3_0_26/source/lib/util_unistr.c\t2007-06-29 17:27:59 UTC (rev 23660)\n@@ -36,14 +36,6 @@\n static BOOL valid_table_use_unmap;\n \n /**\n- * This table says which Unicode characters are valid dos\n- * characters.\n- *\n- * Each value is just a single bit.\n- **/\n-static uint8 doschar_table[8192]; /* 65536 characters / 8 bits/byte */\n-\n-/**\n  * Destroy global objects allocated by load_case_tables()\n  **/\n void gfree_case_tables(void)\n@@ -150,21 +142,6 @@\n #endif\n }\n \n-/*\n-  see if a ucs2 character can be mapped correctly to a dos character\n-  and mapped back to the same character in ucs2\n-*/\n-\n-int check_dos_char(smb_ucs2_t c)\n-{\n-\tlazy_initialize_conv();\n-\t\n-\t/* Find the right byte, and right bit within the byte; return\n-\t * 1 or 0 */\n-\treturn (doschar_table[(c & 0xffff) / 8] & (1 << (c & 7))) != 0;\n-}\n-\n-\n static int check_dos_char_slowly(smb_ucs2_t c)\n {\n \tchar buf[10];\n@@ -182,34 +159,7 @@\n \treturn (c == c2);\n }\n \n-\n /**\n- * Fill out doschar table the hard way, by examining each character\n- **/\n-\n-void init_doschar_table(void)\n-{\n-\tint i, j, byteval;\n-\n-\t/* For each byte of packed table */\n-\t\n-\tfor (i = 0; i <= 0xffff; i += 8) {\n-\t\tbyteval = 0;\n-\t\tfor (j = 0; j <= 7; j++) {\n-\t\t\tsmb_ucs2_t c;\n-\n-\t\t\tc = i + j;\n-\t\t\t\n-\t\t\tif (check_dos_char_slowly(c)) {\n-\t\t\t\tbyteval |= 1 << j;\n-\t\t\t}\n-\t\t}\n-\t\tdoschar_table[i/8] = byteval;\n-\t}\n-}\n-\n-\n-/**\n  * Load the valid character map table from valid.dat or\n  * create from the configured codepage.\n  *\n@@ -257,7 +207,7 @@\n \tfor (;i<0x10000;i++) {\n \t\tsmb_ucs2_t c;\n \t\tSSVAL(&c, 0, i);\n-\t\tvalid_table[i] = check_dos_char(c);\n+\t\tvalid_table[i] = check_dos_char_slowly(c);\n \t}\n }\n \n\nDeleted: branches/SAMBA_3_0_26/source/torture/t_doschar.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/torture/t_doschar.c\t2007-06-29 17:09:39 UTC (rev 23659)\n+++ branches/SAMBA_3_0_26/source/torture/t_doschar.c\t2007-06-29 17:27:59 UTC (rev 23660)\n@@ -1,42 +0,0 @@\n-/*\n-   Samba - Unix SMB/CIFS implementation\n-   Test harness for check_dos_char\n-   Copyright (C) Martin Pool 2003\n-   \n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 2 of the License, or\n-   (at your option) any later version.\n-   \n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-   \n-   You should have received a copy of the GNU General Public License\n-   along with this program; if not, write to the Free Software\n-   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n-*/\n-\n-#include \"includes.h\"\n-\n-\n-/*\n- * Just print out DOS validity or not for every character.\n- *\n- * DOS validity for a Unicode character set means that it can be\n- * represented in DOS codepage, and that the DOS character maps back\n- * to the same Unicode character.\n- *\n- * This depends on which DOS codepage is configured.\n- */\n- int main(void)\n-{\n-\tsmb_ucs2_t\ti;\n-\n-\tfor (i = 0; i < 0xffff; i++) {\n-\t\tprintf(\"%d %d\\n\", (int) i, (int) check_dos_char(i));\n-\t}\n-\t\n-\treturn 0;\n-}\n\n"}