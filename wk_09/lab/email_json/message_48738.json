{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14423 - doc/trunk/design/syn", "body": "Author: larry\nDate: Fri Jun 15 12:20:51 2007\nNew Revision: 14423\n\nModified:\n   doc/trunk/design/syn/S03.pod\n   doc/trunk/design/syn/S12.pod\n\nLog:\nminor clarifications to previous\n\n\nModified: doc/trunk/design/syn/S03.pod\n==============================================================================\n--- doc/trunk/design/syn/S03.pod\t(original)\n+++ doc/trunk/design/syn/S03.pod\tFri Jun 15 12:20:51 2007\n@@ -222,7 +222,11 @@\n \n Note that this may occur only where a term is expected.  Where a\n postfix is expected, it is a postfix.  If only an infix is expected\n-(that is, after a term with intervening whitespace), it is a syntax error.\n+(that is, after a term with intervening whitespace), C<.meth> is a\n+syntax error.  (The C<.=meth> form is allowed there only because there\n+is a special C<.=> infix assignment operator that is equivalent in\n+semantics to the method call form but that allows whitespace between\n+the C<=> and the method name.)\n \n =item *\n \n\nModified: doc/trunk/design/syn/S12.pod\n==============================================================================\n--- doc/trunk/design/syn/S12.pod\t(original)\n+++ doc/trunk/design/syn/S12.pod\tFri Jun 15 12:20:51 2007\n@@ -232,8 +232,8 @@\n likely to produce missing method errors at run time in any case.)\n Also, if there is whitespace around an intended C<.> concatenation,\n it cannot be parsed as a method call at all; instead if fails at\n-compile time because standard Perl 6 has no C<< infix:<.> >> operator\n-unless the user happens to have defined one (bad idea).]\n+compile time because standard Perl 6 has a pseudo C<< infix:<.> >> operator\n+that always fails at compile time.]\n \n For situations where you already have a method located, you\n can use a simple scalar variable in place of method name:\n\n"}