{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r22836 - in\n\tbranches/SAMBA_4_0/source/torture/raw: .", "body": "Author: tridge\nDate: 2007-05-14 01:05:09 +0000 (Mon, 14 May 2007)\nNew Revision: 22836\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22836\n\nLog:\n\nstarted adding auto-reconnect logic to lockbench. This needs to be\nmade async.\n\nModified:\n   branches/SAMBA_4_0/source/torture/raw/lockbench.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/torture/raw/lockbench.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/raw/lockbench.c\t2007-05-14 01:04:35 UTC (rev 22835)\n+++ branches/SAMBA_4_0/source/torture/raw/lockbench.c\t2007-05-14 01:05:09 UTC (rev 22836)\n@@ -44,7 +44,9 @@\n static int lock_failed;\n \n struct benchlock_state {\n+\tstruct event_context *ev;\n \tstruct smbcli_state *cli;\n+\tint client_num;\n \tint fnum;\n \tint offset;\n \tint count;\n@@ -77,6 +79,33 @@\n }\n \n /*\n+  reopen dead connections\n+ */\n+static void reopen_connection(struct benchlock_state *state)\n+{\n+\tdo {\n+\t\tDEBUG(0,(\"reopening connection %u\\n\", state->client_num));\n+\t} while (!torture_open_connection_ev(&state->cli, state->client_num, state->ev));\n+\t\n+\tstate->fnum = smbcli_open(state->cli->tree, FNAME, O_RDWR|O_CREAT, DENY_NONE);\n+\tif (state->fnum == -1) {\n+\t\tprintf(\"Failed to open %s on connection %d\\n\", FNAME, state->client_num);\n+\t\texit(1);\n+\t}\n+\n+\tstate->lock[0].offset = state->offset;\n+\tstate->io.lockx.in.ulock_cnt = 0;\n+\tstate->req = smb_raw_lock_send(state->cli->tree, &state->io);\n+\tif (state->req == NULL) {\n+\t\tDEBUG(0,(\"Failed to setup lock\\n\"));\n+\t\tlock_failed++;\n+\t}\n+\tstate->req->async.private = state;\n+\tstate->req->async.fn      = lock_completion;\n+\tstate->offset = (state->offset+1)%nprocs;\n+}\n+\n+/*\n   called when a lock completes\n */\n static void lock_completion(struct smbcli_request *req)\n@@ -87,6 +116,9 @@\n \tif (!NT_STATUS_IS_OK(status)) {\n \t\tlock_failed++;\n \t\tDEBUG(0,(\"Lock failed - %s\\n\", nt_errstr(status)));\n+\t\tif (NT_STATUS_EQUAL(status, NT_STATUS_END_OF_FILE)) {\n+\t\t\treopen_connection(state);\n+\t\t}\n \t} else {\n \t\tstate->count++;\n \t\tlock_send(state);\n@@ -114,6 +146,8 @@\n \n \tprintf(\"Opening %d connections\\n\", nprocs);\n \tfor (i=0;i<nprocs;i++) {\n+\t\tstate[i].client_num = i;\n+\t\tstate[i].ev = ev;\n \t\tif (!torture_open_connection_ev(&state[i].cli, i, ev)) {\n \t\t\treturn False;\n \t\t}\n@@ -171,9 +205,10 @@\n \t\tfor (i=0;i<nprocs;i++) {\n \t\t\ttotal += state[i].count;\n \t\t}\n-\n \t\tif (torture_setting_bool(torture, \"progress\", true)) {\n-\t\t\tprintf(\"%.2f ops/second\\r\", total/timeval_elapsed(&tv));\n+\t\t\tprintf(\"%.2f ops/second (remaining=%u)\\r\", \n+\t\t\t       total/timeval_elapsed(&tv), \n+\t\t\t       (unsigned)(timelimit - timeval_elapsed(&tv)));\n \t\t\tfflush(stdout);\n \t\t}\n \t}\n\n"}