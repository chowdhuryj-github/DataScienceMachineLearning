{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "gd@samba.org", "subject": "svn commit: samba r22803 - in branches: SAMBA_3_0/source/libgpo\n\tSAMBA_3_0_26/source/libgpo", "body": "Author: gd\nDate: 2007-05-11 15:28:07 +0000 (Fri, 11 May 2007)\nNew Revision: 22803\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22803\n\nLog:\nAdd some more flesh to the GPO security filtering (still very basic).\n\nGuenther\n\nModified:\n   branches/SAMBA_3_0/source/libgpo/gpo_sec.c\n   branches/SAMBA_3_0_26/source/libgpo/gpo_sec.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/libgpo/gpo_sec.c\n===================================================================\n--- branches/SAMBA_3_0/source/libgpo/gpo_sec.c\t2007-05-11 15:08:05 UTC (rev 22802)\n+++ branches/SAMBA_3_0/source/libgpo/gpo_sec.c\t2007-05-11 15:28:07 UTC (rev 22803)\n@@ -20,11 +20,161 @@\n \n #include \"includes.h\"\n \n+\t/* When modifiying security filtering with gpmc.msc (on w2k3) the\n+\t * following ACE is created in the DACL:\n+\n+------- ACE (type: 0x05, flags: 0x02, size: 0x38, mask: 0x100, object flags: 0x1)\n+access SID: $SID \n+access type: ALLOWED OBJECT\n+Permissions:\n+\t[Apply Group Policy] (0x00000100)\n+\n+------- ACE (type: 0x00, flags: 0x02, size: 0x24, mask: 0x20014)\n+access SID:  $SID\n+access type: ALLOWED\n+Permissions:\n+\t[List Contents] (0x00000004)\n+\t[Read All Properties] (0x00000010)\n+\t[Read Permissions] (0x00020000)\n+\n+\t * by default all \"Authenticated Users\" (S-1-5-11) have an ALLOW\n+\t * OBJECT ace with SEC_RIGHTS_APPLY_GROUP_POLICY mask */\n+\n+\n /****************************************************************\n ****************************************************************/\n \n+static BOOL gpo_sd_check_agp_access_bits(uint32 access_mask)\n+{\n+\treturn (access_mask & SEC_RIGHTS_APPLY_GROUP_POLICY);\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static BOOL gpo_sd_check_read_access_bits(uint32 access_mask)\n+{\n+\tuint32 read_bits = SEC_RIGHTS_LIST_CONTENTS |\n+\t\t\t   SEC_RIGHTS_READ_ALL_PROP |\n+\t\t\t   SEC_RIGHTS_READ_PERMS;\n+\n+\treturn (read_bits == (access_mask & read_bits));\n+}\n+\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static BOOL gpo_sd_check_trustee_in_sid_token(const DOM_SID *trustee, \n+\t\t\t\t\t      const struct GPO_SID_TOKEN *token)\n+{\n+\tint i;\n+\n+\tif (sid_equal(trustee, &token->object_sid)) {\n+\t\treturn True;\n+\t}\n+\n+\tif (sid_equal(trustee, &token->primary_group_sid)) {\n+\t\treturn True;\n+\t}\n+\n+\tfor (i = 0; i < token->num_token_sids; i++) {\n+\t\tif (sid_equal(trustee, &token->token_sids[i])) {\n+\t\t\treturn True;\n+\t\t}\n+\t}\n+\n+\treturn False;\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static NTSTATUS gpo_sd_check_ace_denied_object(const SEC_ACE *ace, \n+\t\t\t\t\t       const struct GPO_SID_TOKEN *token) \n+{\n+\tif (gpo_sd_check_agp_access_bits(ace->access_mask) &&\n+\t    gpo_sd_check_trustee_in_sid_token(&ace->trustee, token)) {\n+\t\tDEBUG(10,(\"gpo_sd_check_ace_denied_object: Access denied as of ace for %s\\n\", \n+\t\t\tsid_string_static(&ace->trustee)));\n+\t\treturn NT_STATUS_ACCESS_DENIED;\n+\t}\n+\n+\treturn STATUS_MORE_ENTRIES;\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static NTSTATUS gpo_sd_check_ace_allowed_object(const SEC_ACE *ace, \n+\t\t\t\t\t\tconst struct GPO_SID_TOKEN *token) \n+{\n+\tif (gpo_sd_check_agp_access_bits(ace->access_mask) && \n+\t    gpo_sd_check_trustee_in_sid_token(&ace->trustee, token)) {\n+\t\tDEBUG(10,(\"gpo_sd_check_ace_allowed_object: Access granted as of ace for %s\\n\", \n+\t\t\tsid_string_static(&ace->trustee)));\n+\t\treturn NT_STATUS_OK;\n+\t}\n+\n+\treturn STATUS_MORE_ENTRIES;\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static NTSTATUS gpo_sd_check_ace(const SEC_ACE *ace, \n+\t\t\t\t const struct GPO_SID_TOKEN *token) \n+{\n+\tswitch (ace->type) {\n+\t\tcase SEC_ACE_TYPE_ACCESS_DENIED_OBJECT:\n+\t\t\treturn gpo_sd_check_ace_denied_object(ace, token);\n+\t\tcase SEC_ACE_TYPE_ACCESS_ALLOWED_OBJECT:\n+\t\t\treturn gpo_sd_check_ace_allowed_object(ace, token);\n+\t\tdefault:\n+\t\t\treturn STATUS_MORE_ENTRIES;\n+\t}\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n NTSTATUS gpo_apply_security_filtering(const struct GROUP_POLICY_OBJECT *gpo, \n \t\t\t\t      const struct GPO_SID_TOKEN *token)\n {\n-\treturn NT_STATUS_OK;\n+\tSEC_DESC *sd = gpo->security_descriptor;\n+\tSEC_ACL *dacl = NULL;\n+\tNTSTATUS status = NT_STATUS_ACCESS_DENIED;\n+\tint i;\n+\n+\tif (!token) {\n+\t\treturn NT_STATUS_INVALID_USER_BUFFER;\n+\t}\n+\n+\tif (!sd) {\n+\t\treturn NT_STATUS_INVALID_SECURITY_DESCR;\n+\t}\n+\n+\tdacl = sd->dacl;\n+\tif (!dacl) {\n+\t\treturn NT_STATUS_INVALID_SECURITY_DESCR;\n+\t}\n+\n+\t/* check all aces and only return NT_STATUS_OK (== Access granted) or\n+\t * NT_STATUS_ACCESS_DENIED ( == Access denied) - the default is to\n+\t * deny access */\n+\n+\tfor (i = 0; i < dacl->num_aces; i ++) {\n+\n+\t\tstatus = gpo_sd_check_ace(&dacl->aces[i], token);\n+\n+\t\tif (NT_STATUS_EQUAL(status, NT_STATUS_ACCESS_DENIED)) {\n+\t\t\treturn status;\n+\t\t} else if (NT_STATUS_IS_OK(status)) {\n+\t\t\treturn status;\n+\t\t}\n+\n+\t\tcontinue;\n+\t}\n+\n+\treturn NT_STATUS_ACCESS_DENIED;\n }\n\nModified: branches/SAMBA_3_0_26/source/libgpo/gpo_sec.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libgpo/gpo_sec.c\t2007-05-11 15:08:05 UTC (rev 22802)\n+++ branches/SAMBA_3_0_26/source/libgpo/gpo_sec.c\t2007-05-11 15:28:07 UTC (rev 22803)\n@@ -20,11 +20,161 @@\n \n #include \"includes.h\"\n \n+\t/* When modifiying security filtering with gpmc.msc (on w2k3) the\n+\t * following ACE is created in the DACL:\n+\n+------- ACE (type: 0x05, flags: 0x02, size: 0x38, mask: 0x100, object flags: 0x1)\n+access SID: $SID \n+access type: ALLOWED OBJECT\n+Permissions:\n+\t[Apply Group Policy] (0x00000100)\n+\n+------- ACE (type: 0x00, flags: 0x02, size: 0x24, mask: 0x20014)\n+access SID:  $SID\n+access type: ALLOWED\n+Permissions:\n+\t[List Contents] (0x00000004)\n+\t[Read All Properties] (0x00000010)\n+\t[Read Permissions] (0x00020000)\n+\n+\t * by default all \"Authenticated Users\" (S-1-5-11) have an ALLOW\n+\t * OBJECT ace with SEC_RIGHTS_APPLY_GROUP_POLICY mask */\n+\n+\n /****************************************************************\n ****************************************************************/\n \n+static BOOL gpo_sd_check_agp_access_bits(uint32 access_mask)\n+{\n+\treturn (access_mask & SEC_RIGHTS_APPLY_GROUP_POLICY);\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static BOOL gpo_sd_check_read_access_bits(uint32 access_mask)\n+{\n+\tuint32 read_bits = SEC_RIGHTS_LIST_CONTENTS |\n+\t\t\t   SEC_RIGHTS_READ_ALL_PROP |\n+\t\t\t   SEC_RIGHTS_READ_PERMS;\n+\n+\treturn (read_bits == (access_mask & read_bits));\n+}\n+\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static BOOL gpo_sd_check_trustee_in_sid_token(const DOM_SID *trustee, \n+\t\t\t\t\t      const struct GPO_SID_TOKEN *token)\n+{\n+\tint i;\n+\n+\tif (sid_equal(trustee, &token->object_sid)) {\n+\t\treturn True;\n+\t}\n+\n+\tif (sid_equal(trustee, &token->primary_group_sid)) {\n+\t\treturn True;\n+\t}\n+\n+\tfor (i = 0; i < token->num_token_sids; i++) {\n+\t\tif (sid_equal(trustee, &token->token_sids[i])) {\n+\t\t\treturn True;\n+\t\t}\n+\t}\n+\n+\treturn False;\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static NTSTATUS gpo_sd_check_ace_denied_object(const SEC_ACE *ace, \n+\t\t\t\t\t       const struct GPO_SID_TOKEN *token) \n+{\n+\tif (gpo_sd_check_agp_access_bits(ace->access_mask) &&\n+\t    gpo_sd_check_trustee_in_sid_token(&ace->trustee, token)) {\n+\t\tDEBUG(10,(\"gpo_sd_check_ace_denied_object: Access denied as of ace for %s\\n\", \n+\t\t\tsid_string_static(&ace->trustee)));\n+\t\treturn NT_STATUS_ACCESS_DENIED;\n+\t}\n+\n+\treturn STATUS_MORE_ENTRIES;\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static NTSTATUS gpo_sd_check_ace_allowed_object(const SEC_ACE *ace, \n+\t\t\t\t\t\tconst struct GPO_SID_TOKEN *token) \n+{\n+\tif (gpo_sd_check_agp_access_bits(ace->access_mask) && \n+\t    gpo_sd_check_trustee_in_sid_token(&ace->trustee, token)) {\n+\t\tDEBUG(10,(\"gpo_sd_check_ace_allowed_object: Access granted as of ace for %s\\n\", \n+\t\t\tsid_string_static(&ace->trustee)));\n+\t\treturn NT_STATUS_OK;\n+\t}\n+\n+\treturn STATUS_MORE_ENTRIES;\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n+static NTSTATUS gpo_sd_check_ace(const SEC_ACE *ace, \n+\t\t\t\t const struct GPO_SID_TOKEN *token) \n+{\n+\tswitch (ace->type) {\n+\t\tcase SEC_ACE_TYPE_ACCESS_DENIED_OBJECT:\n+\t\t\treturn gpo_sd_check_ace_denied_object(ace, token);\n+\t\tcase SEC_ACE_TYPE_ACCESS_ALLOWED_OBJECT:\n+\t\t\treturn gpo_sd_check_ace_allowed_object(ace, token);\n+\t\tdefault:\n+\t\t\treturn STATUS_MORE_ENTRIES;\n+\t}\n+}\n+\n+/****************************************************************\n+****************************************************************/\n+\n NTSTATUS gpo_apply_security_filtering(const struct GROUP_POLICY_OBJECT *gpo, \n \t\t\t\t      const struct GPO_SID_TOKEN *token)\n {\n-\treturn NT_STATUS_OK;\n+\tSEC_DESC *sd = gpo->security_descriptor;\n+\tSEC_ACL *dacl = NULL;\n+\tNTSTATUS status = NT_STATUS_ACCESS_DENIED;\n+\tint i;\n+\n+\tif (!token) {\n+\t\treturn NT_STATUS_INVALID_USER_BUFFER;\n+\t}\n+\n+\tif (!sd) {\n+\t\treturn NT_STATUS_INVALID_SECURITY_DESCR;\n+\t}\n+\n+\tdacl = sd->dacl;\n+\tif (!dacl) {\n+\t\treturn NT_STATUS_INVALID_SECURITY_DESCR;\n+\t}\n+\n+\t/* check all aces and only return NT_STATUS_OK (== Access granted) or\n+\t * NT_STATUS_ACCESS_DENIED ( == Access denied) - the default is to\n+\t * deny access */\n+\n+\tfor (i = 0; i < dacl->num_aces; i ++) {\n+\n+\t\tstatus = gpo_sd_check_ace(&dacl->aces[i], token);\n+\n+\t\tif (NT_STATUS_EQUAL(status, NT_STATUS_ACCESS_DENIED)) {\n+\t\t\treturn status;\n+\t\t} else if (NT_STATUS_IS_OK(status)) {\n+\t\t\treturn status;\n+\t\t}\n+\n+\t\tcontinue;\n+\t}\n+\n+\treturn NT_STATUS_ACCESS_DENIED;\n }\n\n"}