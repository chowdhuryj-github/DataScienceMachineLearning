{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: What should file test operators return?", "body": "On Thu, Apr 12, 2007 at 01:52:50PM -0500, brian d foy wrote:\n: At the moment the file test operators that I expect to return true or\n: false do, but the true is the filename.\n\nYou've just dug up a pugsian fossil.\n\n: I expected a boolean, for no\n: other reason than Perl 6 has them so it might as well use them. The\n: section on Smart Matching in S03 says that the ~~ doesn't have to\n: return a boolean,  but aside from things liek :s, :M, and :A, what good\n: would it be not to? I'm happy to update S16 with whatever the answer\n: is. :)\n\nThe intent of moving from the\n\n    -r -w -x $file\n    \nform to the\n\n    $file ~~ :r & :w & :x\n\nform was to get rid of the klunky, inflexible statbuffer propagation\nmechanism, which (without an temp var) could only do \"and\" and not\n\"or\", and didn't work well syntactically in \"when\" statements.  Plus\nit forced the user to worry about statbuf caching, which probably just\nought to timeout automatically since it assumes we're the only person\naccessing the filesystem, a bogus assumption in the face of any kind\nof multiprocessing.\n\nSo the new filetests just return a simple value, generally Bool or Num.\nTo get a statbuf object you now use an explicit stat or lstat.  Such an\nobject should probably stringify to \"Stat('filename')\" or some such, so\nthat the filename \"0\" comes out \"Stat('0')\".\n\nI will attempt to clarify S03, though my brain is still a little\nfuzzy this week for a variety of unrelated reasons.\n\n: Here's my code example that motivates this question. For a Llama6\n: exercise with file test operators, I wanted to create a little table:\n: \n:    for @files -> $file {\n:       printf \"%-70s  %s  %s  %s\\n\",\n:          $file,\n:          $file ~~ :r,\n:          $file ~~ :w,\n:          $file ~~ :x;      \n:       }\n\nI think I would now write that more like:\n\n    for @files -> $file {\n\tgiven stat $file {\n\t  printf \"%-70s  %s  %s  %s\\n\", $file, .:r, .:w, .:x;      \n\t}\n    }\n\n: Which I wanted to work like this perl5 (not that I care if it's\n: different, I just have to explain it to reader)\n: \n:    #!/usr/bin/perl5\n:    foreach ( glob( \"*\" ) )\n:       {\n:       printf \"%30s %s %s %s\\n\", $_, -r, -w, -x\n:       }\n: \n: \n: With the Pugs 6.2.13 (r15868), only the ~~ form seems to work, but is\n: that going to be any different than the other two forms?\n\nThe current pugs implementation is just translating to the old form\nunderneath, so it's not surprising it's a bit off.  That's the sort\nof thing that happens when the language designer gives the language\nimplementor whiplash.  However, I rather suspect the interpersonal\nmetaphorical meaning was lost on the physicist/comic who decided that\nthe 3rd derivative of position should be called \"jerk\".  :)\n\nLarry\n\n"}