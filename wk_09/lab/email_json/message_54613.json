{"category": "ham", "to_address": "sugar@lists.laptop.org", "from_address": "Michael Stone <michael@laptop.org>", "subject": "[sugar] Activity Launching Change Proposal", "body": "Dear Sugar Developers,\n\nNoah Kantrowitz (coderanger) and myself (Michael Stone, ashsong) are\npresently implementing the Bitfrost security spec. Since one of the core\nideas of Bitfrost is to isolate activities from one another and from\ncritical parts of the system using the Linux-VServer virtualization\ntechnology, we're presently changing Sugar to allow activities to be\nstarted in controlled VServer environments called \"containers\".\n\nUnfortunately, it is difficult to start activities in containers using\nthe present model of DBus service activation. We would therefore like to\nrevise the mechanism used to start activities and are seeking input on\nhow best to do this. \n\nAs background, I will first describe how activities are presently launched.\nThen, I will explain the incompatibility between the present DBus-activation\nbased model and a world with containers. Finally, I will describe our proposed\nsolution.\n\nPresent Situation:\n\n  \"Activities\" are presently launched as follows:\n\n  1. Clicking on an activity launch icon in Sugar triggers the\n     `sugar.shell.view.frame.ActivitiesBox._activity_clicked_cb' callback which\n     in turn fires off a call to `sugar.shell.view.start_activity(...)'\n  2. `sugar.Shell.start_activity' calls\n     `sugar.activity.activityfactory.create()' which constructs a\n     `sugar.activity.activityfactory.ActivityCreationHandler', initialized with\n     an `ActivityHandle' describing the activity being started.\n  3. The `__init__' method of ActivityCreationHandler connects to the DBus\n     session bus, uses a well-known name to locate an appropriate\n     ActivityFactory _DBus object_, and calls this _DBus object's_ `create'\n     method.\n     (The ActivityCreationHandler also installs callbacks to log the success or\n     failure of the attempt to launch the activity)\n  4. The appropriate `ActivityServiceFactory' DBus service is automatically\n     launched by DBus from a service file if necessary. Then its `create' method\n     is dispatched, which results in the activity itself being constructed and\n     presented.\n\nProblem:\n\n  The basic incompatibility between the present activation-based model and\n  containerization lies in step (4) above; namely, that creating and\n  manipulating containers is a privileged operation which the DBus session\n  daemon is neither permitted, nor designed to effect and is one which demands\n  detailed knowledge of the Bitfrost security model to operate correctly.\n\n  The solution proposed by the Bitfrost spec is to encapsulate (to the extent\n  possible) the implementation of Bitfrost in a privileged security daemon\n  which we are calling \"Rainbow\".  Rainbow is designed to, among other things,\n  start activities in appropriately restricted containers. Ideally, we would\n  just replace step (3) with something like:\n\n    3b. The `__init__' method of ActivityCreationHandler connects to the DBus\n    system bus, locates the `org.laptop.security.Rainbow' service, and calls\n    the `create_activity' method of Rainbow's `org.laptop.security.Rainbow'\n    interface. \n\n  where Rainbow's `create_activity' method would handle all the details.\n  \n  Unfortunately, in attempting to implement this `create_activity' method, we\n  discovered that it is very inconvenient to start activities through DBus\n  *inside containers*.\n\n  The low-level problem is that, after a Rainbow-child-process enters a\n  container to start the desired activity, the Rainbow-child-process must\n  actually start the activity's 'ActivityFactory', then send it a 'create'\n  message *over the session bus*\n\nSolution:\n\n  The procedure described in the preceding paragraph for actually starting\n  activities inside an active container is overly-complicated at best and is\n  highly error-prone at worst. A much simpler, more robust procedure would be\n  leave out the DBus call to the factory's 'create' method and would merely\n  rely on the execution of the factory process itself to perform whatever\n  activity is appropriate to make a new activity instance inside the container.\n  \nFeedback on this proposal in general and on the appropriate information to pass\nto the proposed factory executable would be most appreciated.\n\nThanks,\n\nMichael and Noah\n\n \n\n\n\n\n\n  \n_______________________________________________\nSugar mailing list\nSugar@lists.laptop.org\nhttp://lists.laptop.org/listinfo/sugar\n\n"}