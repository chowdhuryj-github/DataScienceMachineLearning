{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Damian Conway <damian@conway.org>", "subject": "Re: Referring to source code within Perldoc: the new A<> code", "body": "brian asked:\n\n> Couldn't most of this be figured out by making Pod6 extensible (or\n> whatever the right term is). Pod6 would be more of the syntax and basic\n> operation, but other people could have custom directives that their\n> Pod6 translators and formatters could then use. That is, not all of\n> this has to be in the spec if the spec has a way to make it possible\n> later. :)\n\nYes. That's exactly what we've done. Pod 6 has:\n\n=item  a C<=use> directive that allows you to load behaviours for\n        any user-defined blocks or formatting code you want\n\n=item  a standard mechanism by which user-defined blocks are available\n        (just make the block names mixed-case)\n\n=item  a standard mechanism for adding new formatting codes (the M<> metacode)\n\n\n> And, as far as writing a new S26, does this mean that this really isn't\n> open to discussion? That is, if we want something different than you\n> want we have to have competing specs and there won't be any compromise?\n\nOf course not. Indeed it's a *plea* for something more concrete to discuss, a \nsuggestion of a way to get past the philosophical impasse of one group saying \n\"this does everything you want\", without nailing down the specifics of how, \nwhilst another says \"this isn't good enough\", without clearly indicating what \nwould be.\n\nWhat I was actually suggesting was that this design *isn't* set in stone, and \nthat the best way to convince Larry that the existing design could be better \nis to actually offer a better design.\n\nDamian\n\n"}