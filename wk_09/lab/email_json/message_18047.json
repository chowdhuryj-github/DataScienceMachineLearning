{"category": "ham", "to_address": "\"Michael Kubovy\" <kubovy@virginia.edu>", "from_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "subject": "Re: [R] xyplot() and controlling panel.polygon()", "body": "On 4/27/07, Michael Kubovy  wrote:\n> Hi Deepayan,\n>\n> Your solution works, anf the polygon are drawn where I wanted them to\n> go. I thought that I could figure out how to gain control over the\n> colors of the four ensuing polygons (I'm trying to get two lighter\n> shades of the lines).\n>\n> I've tried, for example, to see if I could control the color of the\n> polyon outline, by adding border = 'red' to panel.polygon. That\n> didn't work. Does it work only in lpolygon()?\n\nNo. This is a bug, and the border color can currently only be black or\ntransparent (but it's easy to find and fix the bug; lpolygon is very\nshort, so just write a replacement).\n\nHowever, panel.superpose recognizes and splits certain graphical\nparameters; border is not among them, but fill is. So you could do:\n\nmy.panel.bands <-\n    function(x, y, upper, lower,\n             fill, col,\n             subscripts, ..., font, fontface)\n{\n    upper <- upper[subscripts]\n    lower <- lower[subscripts]\n    panel.polygon(c(x, rev(x)), c(upper, rev(lower)),\n                  col = fill, border = FALSE,\n                  ...)\n}\n\nxyplot(est ~ x | cond, group = grp, data = data, type = 'b',\n       col = c(\"#0080ff\", \"#ff00ff\"),\n       fill = c(\"#bbddff\", \"#ffbbff\"),\n       upper = data$upper,\n       lower = data$lower,\n       panel = function(x, y, ...){\n           panel.superpose(x, y, panel.groups = 'my.panel.bands', ...)\n           panel.xyplot(x, y, ...)\n       })\n\n\n> I often can figure things out on my own, but obviously there's\n> something fundamental that I'm not getting about inheritance and\n> passing in these sorts of objects. I've been trying to get it from\n> the help pages and from Murrell's book, but neither offers enough of\n> a cookbook for me to figure these things out. Is there something I\n> should have read?\n\nThe concepts are all there in the help page (but it's often difficult\nto put them together). The main points are:\n\n(1) unrecognized arguments get passed on to the panel function as is\n(2) subscripts give indices of x, y, etc in the original data frame\n\n(the implication being that if you have another column from the\noriginal data frame, such as upper and lower in your example, indexing\nby subscripts will give you the matching subset). Other than that, the\npanel functions have to do their own work (and what they do should\nideally be documented); nothing is enforced, so nothing is guaranteed.\n\nThis sort of thing doesn't get used often enough for examples to be\neasily found. The following demo in lattice might be helpful.\n\nfile.show(system.file(\"demo/intervals.R\", package = \"lattice\"))\n\n-Deepayan\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}