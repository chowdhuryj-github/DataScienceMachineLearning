{"category": "ham", "to_address": "\"Luke Palmer\" <lrpalmer@gmail.com>", "from_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "subject": "Re: File test operators as Pairs", "body": "Luke Palmer wrote:\n> These things are methods, and I'm not sure why we've crammed them into\n> smart match. Things like :M have nothing to do with matching. What\n> would it mean if smart match returned false?  \"This file has not been\n> modified ever\"?  :e has a bit more merit for a smart match, but the\n> operation has little to do with the concept of a string or the pair e\n> => 1.\n\nAlso, I found the following line from S03 to be jolting:\n\n    Any       Pair      test object             .STATUS(X) (Str,IO do filetest)\n\nIt struck me as a rather specific application for such a generic data type.\n\n> I'm inclined to say that the best solution for filetests is to throw\n> out our dwimmery altogether.  Back in Perl 4 days, using \"stat\"\n> explicitly was awkward, because you had to use it as a list and\n> memorize the positions of all the returns.  -s $file beats the heck\n> out of (stat $file)[7], for sure.  It also had the benefit that shell\n> people would instantly recognize what's going on.\n>\n> However, now we have stat($file).size.  With that, every programmer\n> will recognize what's going on, not just people with shell background.\n>  And I don't think even people with a shell background will know what\n> ($file ~~ :s) means (their guess could be right, but they'd have to\n> look it up to confirm, and they would never think to *write* such a\n> thing).\n>\n> I can never remember whether mtime is -m or -M anyway...\n>\n> Let's get rid of all the filetest magic, in favor of using stat explicitly.\n\nI tend to agree that the magic should go away.  However, I already\nmiss the filetest operators.  Given the way that prefix operators\nwork, wasn't it already possible to say something like the following?\n\n    given $handle {\n        when .'-r' & .'-w' & .'-x' { ... }\n        when !.'-w' | !.'-x' { ... }\n        when * { ... }\n    }\n\n    sort { $^a.'-M' <=> $^b.'-M' }, @files\n    sort { .'-M' }, @files\n\nWhat does pair notation buy us that quoted-postfix notation doesn't\nalready cover?\n\n-- \nJonathan \"Dataweaver\" Lang\n\n"}