{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "metze@samba.org", "subject": "svn commit: samba r22360 - in\n\tbranches/SAMBA_4_0/source/script/tests: .", "body": "Author: metze\nDate: 2007-04-19 08:04:35 +0000 (Thu, 19 Apr 2007)\nNew Revision: 22360\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22360\n\nLog:\nprint out the name of the PCAP file and move setup and cleanup\nof pcap files into functions\n\nmetze\nModified:\n   branches/SAMBA_4_0/source/script/tests/SocketWrapper.pm\n   branches/SAMBA_4_0/source/script/tests/selftest.pl\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/script/tests/SocketWrapper.pm\n===================================================================\n--- branches/SAMBA_4_0/source/script/tests/SocketWrapper.pm\t2007-04-19 07:39:45 UTC (rev 22359)\n+++ branches/SAMBA_4_0/source/script/tests/SocketWrapper.pm\t2007-04-19 08:04:35 UTC (rev 22360)\n@@ -12,17 +12,30 @@\n use strict;\n use FindBin qw($RealBin);\n \n-sub setup_dir($)\n+sub setup_dir($$)\n {\n-\tmy ($dir) = @_;\n+\tmy ($dir, $pcap) = @_;\n+\tmy $pcap_dir = undef;\n+\n \tif (defined($dir)) {\n \t\tif ( -d $dir ) {\n \t\t\tunlink <$dir/*>;\n \t\t} else {\n \t\t\tmkdir($dir);\n \t\t}\n+\n+\t\tif ($pcap) {\n+\t\t\t$pcap_dir = $dir.\"/pcap\";\n+\n+\t\t\tif ( -d $pcap_dir ) {\n+\t\t\t\tunlink <$pcap_dir/*>;\n+\t\t\t} else {\n+\t\t\t\tmkdir($pcap_dir);\n+\t\t\t}\n+\t\t}\n \t}\n \n+\t$ENV{SOCKET_WRAPPER_PCAP_DIR} = $pcap_dir;\n \t$ENV{SOCKET_WRAPPER_DIR} = $dir;\n \treturn $dir;\n }\n\nModified: branches/SAMBA_4_0/source/script/tests/selftest.pl\n===================================================================\n--- branches/SAMBA_4_0/source/script/tests/selftest.pl\t2007-04-19 07:39:45 UTC (rev 22359)\n+++ branches/SAMBA_4_0/source/script/tests/selftest.pl\t2007-04-19 08:04:35 UTC (rev 22360)\n@@ -219,6 +219,8 @@\n \t\t$out .= $test_output->{$state->{NAME}};\n \t}\n \n+\t$out .= \"PCAP FILE: $state->{PCAP_FILE}\\n\" if defined($state->{PCAP_FILE});\n+\n \t$out .= getlog_env($state->{ENVNAME});\n \n \t$out .= \"==========================================\\n\";\n@@ -270,16 +272,23 @@\n sub plain_end_msg($$$)\n {\n \tmy ($state, $expected_ret, $ret) = @_;\n+\tmy $out = \"\";\n \n \tif ($ret != $expected_ret) {\n \t\tplain_output_msg($state, \"ERROR: $ret\\n\");\n \t}\n \n \tif ($ret != $expected_ret and ($opt_immediate or $opt_one) and not $opt_verbose) {\n-\t\tprint $test_output->{$state->{NAME}}.\"\\n\";\n+\t\t$out .= $test_output->{$state->{NAME}};\n \t}\n \n-\tprint getlog_env($state->{ENVNAME});\n+\tif (not $opt_socket_wrapper_keep_pcap and defined($state->{PCAP_FILE})) {\n+\t\t$out .= \"PCAP FILE: $state->{PCAP_FILE}\\n\";\n+\t}\n+\n+\t$out .= getlog_env($state->{ENVNAME});\n+\n+\tprint $out;\n }\n \n my $plain_msg_ops = {\n@@ -288,9 +297,39 @@\n \tend_msg\t\t=> \\&plain_end_msg\n };\n \n+sub setup_pcap($)\n+{\n+\tmy ($state) = @_;\n+\n+\treturn unless ($opt_socket_wrapper_pcap);\n+\treturn unless defined($ENV{SOCKET_WRAPPER_PCAP_DIR});\n+\n+\tmy $fname = sprintf(\"t%03u_%s\", $state->{INDEX}, $state->{NAME});\n+\t$fname =~ s%[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0090687678\\-]%_%g;\n+\n+\t$state->{PCAP_FILE} = \"$ENV{SOCKET_WRAPPER_PCAP_DIR}/$fname.pcap\";\n+\n+\tSocketWrapper::setup_pcap($state->{PCAP_FILE});\n+}\n+\n+sub cleanup_pcap($$$)\n+{\n+\tmy ($state, $expected_ret, $ret) = @_;\n+\n+\treturn unless ($opt_socket_wrapper_pcap);\n+\treturn if ($opt_socket_wrapper_keep_pcap);\n+\treturn unless ($expected_ret == $ret);\n+\treturn unless defined($state->{PCAP_FILE});\n+\n+\tunlink($state->{PCAP_FILE});\n+\t$state->{PCAP_FILE} = undef;\n+}\n+\n sub run_test($$$$$$)\n {\n \tmy ($envname, $name, $cmd, $i, $totalsuites, $msg_ops) = @_;\n+\tmy $expected_ret = 1;\n+\tmy $open_tests = {};\n \tmy $msg_state = {\n \t\tENVNAME\t=> $envname,\n \t\tNAME\t=> $name,\n@@ -299,10 +338,12 @@\n \t\tTOTAL\t=> $totalsuites,\n \t\tSTART\t=> time()\n \t};\n+\n+\tsetup_pcap($msg_state);\n+\n \t$msg_ops->{start_msg}($msg_state);\n+\n \topen(RESULT, \"$cmd 2>&1|\");\n-\tmy $expected_ret = 1;\n-\tmy $open_tests = {};\n \twhile () {\n \t\t$msg_ops->{output_msg}($msg_state, $_);\n \t\tif (/^test: (.+)\\n/) {\n@@ -338,7 +379,11 @@\n \t\t$statistics->{TESTS_ERROR}++;\n \t}\n \tmy $ret = close(RESULT);\n+\n+\tcleanup_pcap($msg_state,  $expected_ret, $ret);\n+\n \t$msg_ops->{end_msg}($msg_state, $expected_ret, $ret);\n+\n \tif ($ret != $expected_ret) {\n \t\tpush(@$suitesfailed, $name);\n \t\t$statistics->{SUITES_FAIL}++;\n@@ -473,17 +518,15 @@\n $ENV{PKG_CONFIG_PATH} = \"$old_pwd/bin/pkgconfig:$ENV{PKG_CONFIG_PATH}\";\n $ENV{PATH} = \"$old_pwd/bin:$ENV{PATH}\";\n \n-my $pcap_dir = \"$prefix/pcap\";\n \n if ($opt_socket_wrapper_pcap) {\n-\tmkdir($pcap_dir);\n \t# Socket wrapper pcap implies socket wrapper\n \t$opt_socket_wrapper = 1;\n }\n \n my $socket_wrapper_dir;\n if ($opt_socket_wrapper) {\n-\t$socket_wrapper_dir = SocketWrapper::setup_dir(\"$prefix/w\");\n+\t$socket_wrapper_dir = SocketWrapper::setup_dir(\"$prefix/w\", $opt_socket_wrapper_pcap);\n \tprint \"SOCKET_WRAPPER_DIR=$socket_wrapper_dir\\n\";\n } else {\n \twarn(\"Not using socket wrapper, but also not running as root. Will not be able to listen on proper ports\") unless $< == 0;\n@@ -710,19 +753,8 @@\n \n \t\tsetup_env($envname);\n \n-\t\tmy $shname = $name;\n-\t\t$shname =~ s%[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0090687678\\-]%_%g;\n-\t\tmy $pcap_file = \"$pcap_dir/$shname.cap\";\n+\t\trun_test($envname, $name, $cmd, $i, $suitestotal, $msg_ops);\n \n-\t\tSocketWrapper::setup_pcap($pcap_file) if ($opt_socket_wrapper_pcap);\n-\t\tmy $result = run_test($envname, $name, $cmd, $i, $suitestotal, \n-\t\t\t\t\t\t\t  $msg_ops);\n-\n-\t\tif ($opt_socket_wrapper_pcap and $result and \n-\t\t\tnot $opt_socket_wrapper_keep_pcap) {\n-\t\t\tunlink($pcap_file);\n-\t\t}\n-\n \t\tif (defined($opt_analyse_cmd)) {\n \t\t\tsystem(\"$opt_analyse_cmd \\\"$name\\\"\");\n \t\t}\n\n"}