{"category": "ham", "to_address": "\"Sharan Basappa\" <sharan.basappa@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: zero width lookahead match", "body": "On 5/30/07, Sharan Basappa  wrote:\n> Hi All,\n>\n> I have some background working with scanners built from Flex. And I have\n> used lookahead capability of flex many a times. But I dont understand the\n> meaning of ZERO in zero lookahead match rule i.e. (?=pattern)\nsnip\n\nI don't know jack about flex, so I can't help you with a comparison, but\n\nsnip\n> The other question I have is - how does regex engine decide that it has to\n> move further its scanner by 1 character everytime\nsnip\n\nthis is what the zero-width lookahead assertion means.  It say with\nout moving where you are currently starting the match, make certain\nyou can match the following pattern.  If you want it to move where the\nmatch starts then you have to include something that does not have\nzero-width like this\n\n#match groups of three characters followed by three characters: \"123\" and \"456\"\n@store = $str =~ m/(\\d\\d\\d)(?=\\d\\d\\d)/g;\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}