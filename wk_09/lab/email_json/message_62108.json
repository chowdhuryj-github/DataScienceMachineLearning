{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "lmuelle@samba.org", "subject": "svn commit: samba r23704 - in branches:\n\tSAMBA_3_0/examples/pam_winbind SAMBA_3_0/source/nsswitch\n\tSAMBA_3_0_26/examples/pam_winbind SAMBA_3_0_26/source/nsswitch", "body": "Author: lmuelle\nDate: 2007-07-04 14:03:10 +0000 (Wed, 04 Jul 2007)\nNew Revision: 23704\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23704\n\nLog:\nAdd pam_pwd_expire feature as discussed on samba-technical.\n\nThis is a slightly modified version to set warn_pwd_expire to the\ndefault value if 0, no, or a broken value is set.\n\nThis version also has one if statement less in get_config_item_int().\n\nThanks a lot to Andreas 'GlaDiaC' Schneider for this feature!\n\nModified:\n   branches/SAMBA_3_0/examples/pam_winbind/pam_winbind.conf\n   branches/SAMBA_3_0/source/nsswitch/pam_winbind.c\n   branches/SAMBA_3_0/source/nsswitch/pam_winbind.h\n   branches/SAMBA_3_0_26/examples/pam_winbind/pam_winbind.conf\n   branches/SAMBA_3_0_26/source/nsswitch/pam_winbind.c\n   branches/SAMBA_3_0_26/source/nsswitch/pam_winbind.h\n\n\nChangeset:\nModified: branches/SAMBA_3_0/examples/pam_winbind/pam_winbind.conf\n===================================================================\n--- branches/SAMBA_3_0/examples/pam_winbind/pam_winbind.conf\t2007-07-04 11:06:32 UTC (rev 23703)\n+++ branches/SAMBA_3_0/examples/pam_winbind/pam_winbind.conf\t2007-07-04 14:03:10 UTC (rev 23704)\n@@ -28,5 +28,8 @@\n # (can also take a name)\n ;require_membership_of =\n \n+# password expiry warning period in days\n+;warn_pwd_expire = 14\n+\n # omit pam conversations\n ;silent = no\n\nModified: branches/SAMBA_3_0/source/nsswitch/pam_winbind.c\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/pam_winbind.c\t2007-07-04 11:06:32 UTC (rev 23703)\n+++ branches/SAMBA_3_0/source/nsswitch/pam_winbind.c\t2007-07-04 14:03:10 UTC (rev 23704)\n@@ -561,7 +561,12 @@\n  * @return boolean Returns True if message has been sent, False if not.\n  */\n \n-static BOOL _pam_send_password_expiry_message(pam_handle_t *pamh, int ctrl, time_t next_change, time_t now, BOOL *already_expired)\n+static BOOL _pam_send_password_expiry_message(pam_handle_t *pamh,\n+\t\t\t\t\t      int ctrl,\n+\t\t\t\t\t      time_t next_change,\n+\t\t\t\t\t      time_t now,\n+\t\t\t\t\t      int warn_pwd_expire,\n+\t\t\t\t\t      BOOL *already_expired)\n {\n \tint days = 0;\n \tstruct tm tm_now, tm_next_change;\n@@ -579,7 +584,7 @@\n \t}\n \n \tif ((next_change < 0) ||\n-\t    (next_change > now + DAYS_TO_WARN_BEFORE_PWD_EXPIRES * SECONDS_PER_DAY)) {\n+\t    (next_change > now + warn_pwd_expire * SECONDS_PER_DAY)) {\n \t\treturn False;\n \t}\n \n@@ -595,7 +600,7 @@\n \t\treturn True;\n \t} \n \t\n-\tif (days > 0 && days < DAYS_TO_WARN_BEFORE_PWD_EXPIRES) {\n+\tif (days > 0 && days < warn_pwd_expire) {\n \t\t_make_remark_format(pamh, ctrl, PAM_TEXT_INFO, \"Your password will expire in %d %s\", \n \t\t\tdays, (days > 1) ? \"days\":\"day\");\n \t\treturn True;\n@@ -618,6 +623,7 @@\n static void _pam_warn_password_expiry(pam_handle_t *pamh, \n \t\t\t\t      int flags, \n \t\t\t\t      const struct winbindd_response *response,\n+\t\t\t\t      int warn_pwd_expire,\n \t\t\t\t      BOOL *already_expired)\n {\n \ttime_t now = time(NULL);\n@@ -640,7 +646,8 @@\n \t/* check if the info3 must change timestamp has been set */\n \tnext_change = response->data.auth.info3.pass_must_change_time;\n \n-\tif (_pam_send_password_expiry_message(pamh, flags, next_change, now, \n+\tif (_pam_send_password_expiry_message(pamh, flags, next_change, now,\n+\t\t\t\t\t      warn_pwd_expire,\n \t\t\t\t\t      already_expired)) {\n \t\treturn;\n \t}\n@@ -655,7 +662,8 @@\n \tnext_change = response->data.auth.info3.pass_last_set_time + \n \t\t      response->data.auth.policy.expire;\n \n-\tif (_pam_send_password_expiry_message(pamh, flags, next_change, now, \n+\tif (_pam_send_password_expiry_message(pamh, flags, next_change, now,\n+\t\t\t\t\t      warn_pwd_expire,\n \t\t\t\t\t      already_expired)) {\n \t\treturn;\n \t}\n@@ -1029,6 +1037,7 @@\n \t\t\t\tconst char *pass, \n \t\t\t\tconst char *member, \n \t\t\t\tconst char *cctype,\n+\t\t\t\tconst int warn_pwd_expire,\n \t\t\t\tstruct winbindd_response *p_response,\n \t\t\t\ttime_t *pwd_last_set,\n \t\t\t\tchar **user_ret)\n@@ -1134,7 +1143,9 @@\n \tif (ret == PAM_SUCCESS) {\n \n \t\t/* warn a user if the password is about to expire soon */\n-\t\t_pam_warn_password_expiry(pamh, ctrl, &response, &already_expired);\n+\t\t_pam_warn_password_expiry(pamh, ctrl, &response,\n+\t\t\t\t\t  warn_pwd_expire,\n+\t\t\t\t\t  &already_expired);\n \n \t\tif (already_expired == True) {\n \t\t\t_pam_log_debug(pamh, ctrl, LOG_DEBUG, \"Password has expired \"\n@@ -1519,6 +1530,52 @@\n \treturn parm_opt;\n }\n \n+int get_config_item_int(const pam_handle_t *pamh,\n+\t\t\t      int argc,\n+\t\t\t      const char **argv,\n+\t\t\t      int ctrl,\n+\t\t\t      dictionary *d,\n+\t\t\t      const char *item)\n+{\n+\tint parm_opt = -1, i = 0;\n+\tchar *key = NULL;\n+\n+\t/* let the pam opt take precedence over the pam_winbind.conf option */\n+\tfor (i = 0; i < argc; i++) {\n+\n+\t\tif ((strncmp(argv[i], item, strlen(item)) == 0)) {\n+\t\t\tchar *p;\n+\n+\t\t\tif ( (p = strchr( argv[i], '=' )) == NULL) {\n+\t\t\t\t_pam_log(pamh, ctrl, LOG_INFO,\n+\t\t\t\t\t \"no \\\"=\\\" delimiter for \\\"%s\\\" found\\n\",\n+\t\t\t\t\t item);\n+\t\t\t\tgoto out;\n+\t\t\t}\n+\t\t\tparm_opt = atoi(p + 1);\n+\t\t\t_pam_log_debug(pamh, ctrl, LOG_INFO,\n+\t\t\t\t       \"PAM config: %s '%d'\\n\",\n+\t\t\t\t       item, parm_opt);\n+\t\t\treturn parm_opt;\n+\t\t}\n+\t}\n+\n+\tif (d != NULL) {\n+\t\tif (!asprintf(&key, \"global:%s\", item)) {\n+\t\t\tgoto out;\n+\t\t}\n+\n+\t\tparm_opt = iniparser_getint(d, key, -1);\n+\t\tSAFE_FREE(key);\n+\n+\t\t_pam_log_debug(pamh, ctrl, LOG_INFO,\n+\t\t\t       \"CONFIG file: %s '%d'\\n\",\n+\t\t\t       item, parm_opt);\n+\t}\n+out:\n+\treturn parm_opt;\n+}\n+\n const char *get_krb5_cc_type_from_config(const pam_handle_t *pamh, int argc, const char **argv, int ctrl, dictionary *d)\n {\n \treturn get_conf_item_string(pamh, argc, argv, ctrl, d, \"krb5_ccache_type\", WINBIND_KRB5_CCACHE_TYPE);\n@@ -1534,6 +1591,22 @@\n \treturn get_conf_item_string(pamh, argc, argv, ctrl, d, \"require-membership-of\", WINBIND_REQUIRED_MEMBERSHIP);\n }\n \n+int get_warn_pwd_expire_from_config(const pam_handle_t *pamh,\n+\t\t\t\t\t\t\t  int argc,\n+\t\t\t\t\t\t\t  const char **argv,\n+\t\t\t\t\t\t\t  int ctrl,\n+\t\t\t\t\t\t\t  dictionary *d)\n+{\n+\tint ret;\n+\tret = get_config_item_int(pamh, argc, argv, ctrl, d,\n+\t\t\t\t  \"warn_pwd_expire\");\n+\t/* no or broken setting */\n+\tif (ret <= 0) {\n+\t\treturn DEFAULT_DAYS_TO_WARN_BEFORE_PWD_EXPIRES;\n+\t}\n+\treturn ret;\n+}\n+\n PAM_EXTERN\n int pam_sm_authenticate(pam_handle_t *pamh, int flags,\n \t\t\tint argc, const char **argv)\n@@ -1542,6 +1615,7 @@\n \tconst char *password;\n \tconst char *member = NULL;\n \tconst char *cctype = NULL;\n+\tint warn_pwd_expire;\n \tint retval = PAM_AUTH_ERR;\n \tdictionary *d = NULL;\n \tchar *username_ret = NULL;\n@@ -1612,9 +1686,13 @@\n \n \tcctype = get_krb5_cc_type_from_config(pamh, argc, argv, ctrl, d);\n \n+\twarn_pwd_expire = get_warn_pwd_expire_from_config(pamh, argc, argv,\n+\t\t\t\t\t\t\t  ctrl, d);\n+\n \t/* Now use the username to look up password */\n \tretval = winbind_auth_request(pamh, ctrl, username, password, member,\n-\t\t\t\t      cctype, NULL, NULL, &username_ret);\n+\t\t\t\t      cctype, warn_pwd_expire, NULL, NULL,\n+\t\t\t\t      &username_ret);\n \n \tif (retval == PAM_NEW_AUTHTOK_REQD ||\n \t    retval == PAM_AUTHTOK_EXPIRED) {\n@@ -2064,7 +2142,8 @@\n \t\t/* verify that this is the password for this user */\n \t\t\n \t\tret = winbind_auth_request(pamh, ctrl, user, pass_old,\n-\t\t\t\t\tNULL, NULL, &response, &pwdlastset_prelim, NULL);\n+\t\t\t\t\t   NULL, NULL, 0, &response,\n+\t\t\t\t\t   &pwdlastset_prelim, NULL);\n \n \t\tif (ret != PAM_ACCT_EXPIRED && \n \t\t    ret != PAM_AUTHTOK_EXPIRED &&\n@@ -2156,9 +2235,13 @@\n \n \t\t\tconst char *member = get_member_from_config(pamh, argc, argv, ctrl, d);\n \t\t\tconst char *cctype = get_krb5_cc_type_from_config(pamh, argc, argv, ctrl, d);\n+\t\t\tconst int warn_pwd_expire =\n+\t\t\t get_warn_pwd_expire_from_config(pamh, argc, argv, ctrl,\n+\t\t\t\t\t\t\t d);\n \n \t\t\tret = winbind_auth_request(pamh, ctrl, user, pass_new,\n-\t\t\t\t\t\t\tmember, cctype, &response, NULL, &username_ret);\n+\t\t\t\t\t\t   member, cctype, 0, &response,\n+\t\t\t\t\t\t   NULL, &username_ret);\n \t\t\t_pam_overwrite(pass_new);\n \t\t\t_pam_overwrite(pass_old);\n \t\t\tpass_old = pass_new = NULL;\n@@ -2166,7 +2249,8 @@\n \t\t\tif (ret == PAM_SUCCESS) {\n \t\t\t\n \t\t\t\t/* warn a user if the password is about to expire soon */\n-\t\t\t\t_pam_warn_password_expiry(pamh, ctrl, &response, NULL);\n+\t\t\t\t_pam_warn_password_expiry(pamh, ctrl, &response,\n+\t\t\t\t\t\t\t  warn_pwd_expire , NULL);\n \n \t\t\t\t/* set some info3 info for other modules in the stack */\n \t\t\t\t_pam_set_data_info3(pamh, ctrl, &response);\n\nModified: branches/SAMBA_3_0/source/nsswitch/pam_winbind.h\n===================================================================\n--- branches/SAMBA_3_0/source/nsswitch/pam_winbind.h\t2007-07-04 11:06:32 UTC (rev 23703)\n+++ branches/SAMBA_3_0/source/nsswitch/pam_winbind.h\t2007-07-04 14:03:10 UTC (rev 23704)\n@@ -116,7 +116,7 @@\n \n #define SECONDS_PER_DAY 86400\n \n-#define DAYS_TO_WARN_BEFORE_PWD_EXPIRES 5\n+#define DEFAULT_DAYS_TO_WARN_BEFORE_PWD_EXPIRES 14\n \n #include \"winbind_client.h\"\n \n\nModified: branches/SAMBA_3_0_26/examples/pam_winbind/pam_winbind.conf\n===================================================================\n--- branches/SAMBA_3_0_26/examples/pam_winbind/pam_winbind.conf\t2007-07-04 11:06:32 UTC (rev 23703)\n+++ branches/SAMBA_3_0_26/examples/pam_winbind/pam_winbind.conf\t2007-07-04 14:03:10 UTC (rev 23704)\n@@ -28,5 +28,8 @@\n # (can also take a name)\n ;require_membership_of =\n \n+# password expiry warning period in days\n+;warn_pwd_expire = 14\n+\n # omit pam conversations\n ;silent = no\n\nModified: branches/SAMBA_3_0_26/source/nsswitch/pam_winbind.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/nsswitch/pam_winbind.c\t2007-07-04 11:06:32 UTC (rev 23703)\n+++ branches/SAMBA_3_0_26/source/nsswitch/pam_winbind.c\t2007-07-04 14:03:10 UTC (rev 23704)\n@@ -561,7 +561,12 @@\n  * @return boolean Returns True if message has been sent, False if not.\n  */\n \n-static BOOL _pam_send_password_expiry_message(pam_handle_t *pamh, int ctrl, time_t next_change, time_t now, BOOL *already_expired)\n+static BOOL _pam_send_password_expiry_message(pam_handle_t *pamh,\n+\t\t\t\t\t      int ctrl,\n+\t\t\t\t\t      time_t next_change,\n+\t\t\t\t\t      time_t now,\n+\t\t\t\t\t      int warn_pwd_expire,\n+\t\t\t\t\t      BOOL *already_expired)\n {\n \tint days = 0;\n \tstruct tm tm_now, tm_next_change;\n@@ -579,7 +584,7 @@\n \t}\n \n \tif ((next_change < 0) ||\n-\t    (next_change > now + DAYS_TO_WARN_BEFORE_PWD_EXPIRES * SECONDS_PER_DAY)) {\n+\t    (next_change > now + warn_pwd_expire * SECONDS_PER_DAY)) {\n \t\treturn False;\n \t}\n \n@@ -595,7 +600,7 @@\n \t\treturn True;\n \t} \n \t\n-\tif (days > 0 && days < DAYS_TO_WARN_BEFORE_PWD_EXPIRES) {\n+\tif (days > 0 && days < warn_pwd_expire) {\n \t\t_make_remark_format(pamh, ctrl, PAM_TEXT_INFO, \"Your password will expire in %d %s\", \n \t\t\tdays, (days > 1) ? \"days\":\"day\");\n \t\treturn True;\n@@ -618,6 +623,7 @@\n static void _pam_warn_password_expiry(pam_handle_t *pamh, \n \t\t\t\t      int flags, \n \t\t\t\t      const struct winbindd_response *response,\n+\t\t\t\t      int warn_pwd_expire,\n \t\t\t\t      BOOL *already_expired)\n {\n \ttime_t now = time(NULL);\n@@ -640,7 +646,8 @@\n \t/* check if the info3 must change timestamp has been set */\n \tnext_change = response->data.auth.info3.pass_must_change_time;\n \n-\tif (_pam_send_password_expiry_message(pamh, flags, next_change, now, \n+\tif (_pam_send_password_expiry_message(pamh, flags, next_change, now,\n+\t\t\t\t\t      warn_pwd_expire,\n \t\t\t\t\t      already_expired)) {\n \t\treturn;\n \t}\n@@ -655,7 +662,8 @@\n \tnext_change = response->data.auth.info3.pass_last_set_time + \n \t\t      response->data.auth.policy.expire;\n \n-\tif (_pam_send_password_expiry_message(pamh, flags, next_change, now, \n+\tif (_pam_send_password_expiry_message(pamh, flags, next_change, now,\n+\t\t\t\t\t      warn_pwd_expire,\n \t\t\t\t\t      already_expired)) {\n \t\treturn;\n \t}\n@@ -1029,6 +1037,7 @@\n \t\t\t\tconst char *pass, \n \t\t\t\tconst char *member, \n \t\t\t\tconst char *cctype,\n+\t\t\t\tconst int warn_pwd_expire,\n \t\t\t\tstruct winbindd_response *p_response,\n \t\t\t\ttime_t *pwd_last_set,\n \t\t\t\tchar **user_ret)\n@@ -1134,7 +1143,9 @@\n \tif (ret == PAM_SUCCESS) {\n \n \t\t/* warn a user if the password is about to expire soon */\n-\t\t_pam_warn_password_expiry(pamh, ctrl, &response, &already_expired);\n+\t\t_pam_warn_password_expiry(pamh, ctrl, &response,\n+\t\t\t\t\t  warn_pwd_expire,\n+\t\t\t\t\t  &already_expired);\n \n \t\tif (already_expired == True) {\n \t\t\t_pam_log_debug(pamh, ctrl, LOG_DEBUG, \"Password has expired \"\n@@ -1519,6 +1530,52 @@\n \treturn parm_opt;\n }\n \n+int get_config_item_int(const pam_handle_t *pamh,\n+\t\t\t      int argc,\n+\t\t\t      const char **argv,\n+\t\t\t      int ctrl,\n+\t\t\t      dictionary *d,\n+\t\t\t      const char *item)\n+{\n+\tint parm_opt = -1, i = 0;\n+\tchar *key = NULL;\n+\n+\t/* let the pam opt take precedence over the pam_winbind.conf option */\n+\tfor (i = 0; i < argc; i++) {\n+\n+\t\tif ((strncmp(argv[i], item, strlen(item)) == 0)) {\n+\t\t\tchar *p;\n+\n+\t\t\tif ( (p = strchr( argv[i], '=' )) == NULL) {\n+\t\t\t\t_pam_log(pamh, ctrl, LOG_INFO,\n+\t\t\t\t\t \"no \\\"=\\\" delimiter for \\\"%s\\\" found\\n\",\n+\t\t\t\t\t item);\n+\t\t\t\tgoto out;\n+\t\t\t}\n+\t\t\tparm_opt = atoi(p + 1);\n+\t\t\t_pam_log_debug(pamh, ctrl, LOG_INFO,\n+\t\t\t\t       \"PAM config: %s '%d'\\n\",\n+\t\t\t\t       item, parm_opt);\n+\t\t\treturn parm_opt;\n+\t\t}\n+\t}\n+\n+\tif (d != NULL) {\n+\t\tif (!asprintf(&key, \"global:%s\", item)) {\n+\t\t\tgoto out;\n+\t\t}\n+\n+\t\tparm_opt = iniparser_getint(d, key, -1);\n+\t\tSAFE_FREE(key);\n+\n+\t\t_pam_log_debug(pamh, ctrl, LOG_INFO,\n+\t\t\t       \"CONFIG file: %s '%d'\\n\",\n+\t\t\t       item, parm_opt);\n+\t}\n+out:\n+\treturn parm_opt;\n+}\n+\n const char *get_krb5_cc_type_from_config(const pam_handle_t *pamh, int argc, const char **argv, int ctrl, dictionary *d)\n {\n \treturn get_conf_item_string(pamh, argc, argv, ctrl, d, \"krb5_ccache_type\", WINBIND_KRB5_CCACHE_TYPE);\n@@ -1534,6 +1591,22 @@\n \treturn get_conf_item_string(pamh, argc, argv, ctrl, d, \"require-membership-of\", WINBIND_REQUIRED_MEMBERSHIP);\n }\n \n+int get_warn_pwd_expire_from_config(const pam_handle_t *pamh,\n+\t\t\t\t\t\t\t  int argc,\n+\t\t\t\t\t\t\t  const char **argv,\n+\t\t\t\t\t\t\t  int ctrl,\n+\t\t\t\t\t\t\t  dictionary *d)\n+{\n+\tint ret;\n+\tret = get_config_item_int(pamh, argc, argv, ctrl, d,\n+\t\t\t\t  \"warn_pwd_expire\");\n+\t/* no or broken setting */\n+\tif (ret <= 0) {\n+\t\treturn DEFAULT_DAYS_TO_WARN_BEFORE_PWD_EXPIRES;\n+\t}\n+\treturn ret;\n+}\n+\n PAM_EXTERN\n int pam_sm_authenticate(pam_handle_t *pamh, int flags,\n \t\t\tint argc, const char **argv)\n@@ -1542,6 +1615,7 @@\n \tconst char *password;\n \tconst char *member = NULL;\n \tconst char *cctype = NULL;\n+\tint warn_pwd_expire;\n \tint retval = PAM_AUTH_ERR;\n \tdictionary *d = NULL;\n \tchar *username_ret = NULL;\n@@ -1612,9 +1686,13 @@\n \n \tcctype = get_krb5_cc_type_from_config(pamh, argc, argv, ctrl, d);\n \n+\twarn_pwd_expire = get_warn_pwd_expire_from_config(pamh, argc, argv,\n+\t\t\t\t\t\t\t  ctrl, d);\n+\n \t/* Now use the username to look up password */\n \tretval = winbind_auth_request(pamh, ctrl, username, password, member,\n-\t\t\t\t      cctype, NULL, NULL, &username_ret);\n+\t\t\t\t      cctype, warn_pwd_expire, NULL, NULL,\n+\t\t\t\t      &username_ret);\n \n \tif (retval == PAM_NEW_AUTHTOK_REQD ||\n \t    retval == PAM_AUTHTOK_EXPIRED) {\n@@ -2064,7 +2142,8 @@\n \t\t/* verify that this is the password for this user */\n \t\t\n \t\tret = winbind_auth_request(pamh, ctrl, user, pass_old,\n-\t\t\t\t\tNULL, NULL, &response, &pwdlastset_prelim, NULL);\n+\t\t\t\t\t   NULL, NULL, 0, &response,\n+\t\t\t\t\t   &pwdlastset_prelim, NULL);\n \n \t\tif (ret != PAM_ACCT_EXPIRED && \n \t\t    ret != PAM_AUTHTOK_EXPIRED &&\n@@ -2156,9 +2235,13 @@\n \n \t\t\tconst char *member = get_member_from_config(pamh, argc, argv, ctrl, d);\n \t\t\tconst char *cctype = get_krb5_cc_type_from_config(pamh, argc, argv, ctrl, d);\n+\t\t\tconst int warn_pwd_expire =\n+\t\t\t get_warn_pwd_expire_from_config(pamh, argc, argv, ctrl,\n+\t\t\t\t\t\t\t d);\n \n \t\t\tret = winbind_auth_request(pamh, ctrl, user, pass_new,\n-\t\t\t\t\t\t\tmember, cctype, &response, NULL, &username_ret);\n+\t\t\t\t\t\t   member, cctype, 0, &response,\n+\t\t\t\t\t\t   NULL, &username_ret);\n \t\t\t_pam_overwrite(pass_new);\n \t\t\t_pam_overwrite(pass_old);\n \t\t\tpass_old = pass_new = NULL;\n@@ -2166,7 +2249,8 @@\n \t\t\tif (ret == PAM_SUCCESS) {\n \t\t\t\n \t\t\t\t/* warn a user if the password is about to expire soon */\n-\t\t\t\t_pam_warn_password_expiry(pamh, ctrl, &response, NULL);\n+\t\t\t\t_pam_warn_password_expiry(pamh, ctrl, &response,\n+\t\t\t\t\t\t\t  warn_pwd_expire , NULL);\n \n \t\t\t\t/* set some info3 info for other modules in the stack */\n \t\t\t\t_pam_set_data_info3(pamh, ctrl, &response);\n\nModified: branches/SAMBA_3_0_26/source/nsswitch/pam_winbind.h\n===================================================================\n--- branches/SAMBA_3_0_26/source/nsswitch/pam_winbind.h\t2007-07-04 11:06:32 UTC (rev 23703)\n+++ branches/SAMBA_3_0_26/source/nsswitch/pam_winbind.h\t2007-07-04 14:03:10 UTC (rev 23704)\n@@ -116,7 +116,7 @@\n \n #define SECONDS_PER_DAY 86400\n \n-#define DAYS_TO_WARN_BEFORE_PWD_EXPIRES 5\n+#define DEFAULT_DAYS_TO_WARN_BEFORE_PWD_EXPIRES 14\n \n #include \"winbind_client.h\"\n \n\n"}