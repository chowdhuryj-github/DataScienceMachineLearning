{"category": "ham", "to_address": "\"Zack Weinberg\" <zack@cogsci.ucsd.edu>", "from_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "subject": "Re: [R] lattice: aligning independent graphs", "body": "On 5/26/07, Zack Weinberg  wrote:\n> I find myself wanting to plot three graphs side by side 'as if' they\n> were panels -- that is, with the same y-axis limits, no space between\n> the graphs, and precise vertical alignment of the plot areas. However,\n> I don't want strip titles; I want each graph to have its own x-axis\n> label, on the bottom of the plot.\n>\n> The best way I have so far found to do this is to fake up a data frame\n> that allows me to use actual panels, turn off the strip, and insert a\n> whole bunch of white space in the x-axis label so it looks like there\n> are three separate labels.  Like this:\n>\n> xyplot(x ~ thing | panel,\n>        data=wrong.all,\n>        ylab=list(label='% incorrect responses', cex=0.7),\n>        xlab=list(label=paste('Trial number                                 ',\n>                              'Subject number                              ',\n>                              'Experimental condition'), cex=0.7),\n>        ylim=c(0,top), col='black', pch=3, strip=F,\n>        scales=list(\n>          x=list(alternating=c(1,0), tck=c(1,0), cex=0.5, rot=90,\n>            relation='free',\n>            at=list(\n>              seq(0,33,by=5),\n>              seq(0,maxsub, by=5),\n>              seq(1,length(levels(wrongconds)))),\n>            labels=list(seq(0,33,by=5), seq(0,maxsub, by=5),\n>              levels(wrongconds))),\n>          y=list(at=seq(0,top,by=10), alternating=c(1,0),\n>            tck=c(1,1),\n>            cex=0.5)),\n>        type=list(c('p','smooth'), 'h', 'h'),\n>        panel=function(..., type=list(\"p\")) {\n>          panel.grid(h=-1, v=0)\n>          panel.xyplot(..., type=type[[panel.number()]])\n>        })\n>\n> But surely there is a better way?\n\nBetter in what sense? You are trying to use lattice to do something\nthat lattice isn't designed to do, so there is no solution that is\n\"clean\" in a philosophical sense. Ideally, you want something like\ngrid, that allows you to control the layout in as much detail as you\nwant (you can still use panel.xyplot, panel.grid, etc. as \"panel\nfunctions\" once you set up everything else). On the other hand,\nlattice gets you very close, and the only improvement I can think of\nis some sort of automated scheme to align the x labels to the\nrespective columns. Here's one approach to do that (taking advantage\nof the fact that xlab can be an arbitrary \"grob\"):\n\n\nlibrary(grid)\n\nmyXlabGrob <-\n   function(...) ## ...is lab1, lab2, etc\n{\n   ## you can add arguments to textGrob for more control\n   ## in the next line\n   labs <- lapply(list(...), textGrob)\n   nlabs <- length(labs)\n   lab.heights <-\n       lapply(labs,\n              function(lab) unit(1, \"grobheight\", data = list(lab)))\n   lab.layout <-\n       grid.layout(ncol = nlabs, nrow = 1,\n                   heights = do.call(max, lab.heights),\n                   widths = unit(1, \"null\"),\n                   respect = TRUE)\n   lab.gf <- frameGrob(layout = lab.layout)\n   for (i in seq_len(nlabs))\n   {\n       lab.gf <- placeGrob(lab.gf, labs[[i]], row = 1, col = i)\n   }\n   lab.gf\n}\n\n\nxyplot(1:9 ~ 1:9 | gl(3, 1, 9),\n       layout = c(3, 1),\n       xlab =\n       myXlabGrob('Trial number',\n                  'Subject number',\n                  'Experimental condition'),\n       strip = FALSE)\n\n-Deepayan\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}