{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Larry Wall <larry@wall.org>", "subject": "Re: propose renaming Hash to Dict", "body": "On Thu, May 31, 2007 at 05:10:57PM -0700, Darren Duncan wrote:\n: I decided to bring out this Hash->Dict topic in a different thread \n: from the thread on Synopsis r14407 about Object->Universal since I \n: consider them separate though tangential matters that should be \n: argued on their individual merits.\n: \n: In the interest of that Perl data types are better off being named \n: primarily after their meaning rather than their implementation, \n: probably the current worst offender is Hash.\n\nNope.  Hash is mostly about meaning, and very little about implementation.\nPlease don't assume that I name things according to Standard Names in\nComputer Science.  I name things in English.  Hash is just something\nthat is disordered, which describes the associative array interface\nrather nicely, distinguishing it from the ordered Array interface.\nThe fact that it *might* be implemented using a hash algorithm is\nmerely a nice association with some mnemonic value for CSish folks.\n\nLikewise, if I say Object I'm referring not to a CS object so much as\nan English object, which is just something that is fairly discrete\nand can be handled and treated as a single thing, even if it happens\nto contain multiple things.  About the only nod to CS here is that\nyou can call the .HOW method on any Object.  Anything beyond that\nis the fault of the metamodel.\n\nIn general I'm much more interested in the natural linguistic feel\nof Perl than in matching up with any particular standard CS terms.\nThat's why you have \"given\" and \"when\", not \"switch\" and \"case\".\nThat's why you say \"next\" and \"last\", not \"continue\" and \"break\".\nThat's why we have \"state\" rather than \"static\", \"my\" rather than\n\"var\" or \"decl\", \"contend\" rather than \"atomic\", \"maybe\" rather than\n\"orElse\", \"has\" rather than \"attr\", \"role\" rather than \"interface\",\nand so on.\n\nOf course, it's possible to pick words that have too much overloading\nin the CS literature, but I don't think either Hash or Object really\nfall into that category, in the case of Hash because hash algorithms\nare a fairly minor thing, and in the case of Object because people are\nalready used to all different kinds of Object systems, some class-based,\nsome prototype-based, so generalizing to a kind of object that gives\nyou both is not really a problem.\n\nAnd as I said before, part of the reason for using Object is political,\nbecause it means we're Really Doing Real OO\\u2122.\n\nAnd maybe part of the reason for *not* using Universal is also\npolitical, insofar as Perl 5's UNIVERSAL has been sorely abused in\nvarious ways, and I don't want people to have that mental association.\n(Kinda like the fact that Captures resemble anonymous typeglobs but\nwe're *not* going to call them that...)\n\nLarry\n\n"}