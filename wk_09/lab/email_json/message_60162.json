{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 552: merge from ronnie in http://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 552\nrevision-id: tridge@samba.org-20070702083017-obd2fxlx88u5osxu\nparent: tridge@samba.org-20070702082443-xbtuhcorf1cjw1hb\nparent: sahlberg@ronnie-20070702082513-8gpdtqa1cmupxy0j\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Mon 2007-07-02 18:30:17 +1000\nmessage:\n  merge from ronnie\nmodified:\n  scsi/scsi_io.c                 scsi_io.c-20070702055133-iclxpxa82pdb3ue6-2\n    ------------------------------------------------------------\n    revno: 432.1.90\n    merged: sahlberg@ronnie-20070702082513-8gpdtqa1cmupxy0j\n    parent: sahlberg@ronnie-20070702075257-iqnu4jf7kduwq2eg\n    committer: Ronnie Sahlberg \n    branch nick: ctdb\n    timestamp: Mon 2007-07-02 18:25:13 +1000\n    message:\n      add GPL comment to scsi_io.c\n    ------------------------------------------------------------\n    revno: 432.1.89\n    merged: sahlberg@ronnie-20070702075257-iqnu4jf7kduwq2eg\n    parent: sahlberg@ronnie-20070702061331-x7tthejqu86xju08\n    committer: Ronnie Sahlberg \n    branch nick: ctdb\n    timestamp: Mon 2007-07-02 17:52:57 +1000\n    message:\n      start implementing command line parsing to scsi_io to make it take\n      parameters that control what operations to perform\n=== modified file 'scsi/scsi_io.c'\n--- a/scsi/scsi_io.c\t2007-07-02 06:13:31 +0000\n+++ b/scsi/scsi_io.c\t2007-07-02 08:25:13 +0000\n@@ -3,6 +3,20 @@\n    functions\n \n    Copyright   ronnie sahlberg 2007\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+   \n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n */\n \n /* very incomplete and needs to be enhanced with noice command line options\n@@ -26,6 +40,7 @@\n #include \n #include \n #include \n+#include \"popt.h\"\n \n \n #define SCSI_TIMEOUT 5000 /* ms */\n@@ -123,11 +138,6 @@\n \treturn 0;\n }\n \n-void usage(void)\n-{\n-\tprintf(\"Usage:  scsi \\n\");\n-}\n-\n typedef struct _value_string_t {\n \tint\tvalue;\n \tconst char\t*string;\n@@ -877,28 +887,95 @@\n \treturn fd;\n }\n \n-int main(int argc, char *argv[])\n-{\n-\tint fd;\n-\n-\tif(argc!=2){\n-\t\tusage();\n-\t\t_exit(10);\n-\t}\n-\tfd=open_scsi_device(argv[1]);\n+typedef int (*scsi_func_t)(int fd);\n+typedef struct _cmds_t {\n+\tconst char *cmd;\n+\tscsi_func_t func;\n+\tconst char *comment;\n+} cmds_t;\n+cmds_t cmds[] = {\n+\t{\"inq\",\t\tscsi_inquiry,\t\"Standard INQUIRY output\"},\n+\t{\"vpd\",\t\tscsi_inquiry_supported_vpd_pages,\t\"Supported VPD Pages\"},\n+\t{\"usn\",\t\tscsi_inquiry_unit_serial_number,\t\"Unit serial number\"},\n+\t{\"readkeys\",\tscsi_persistent_reserve_in_read_keys,\t\"Read SCSI Reservation Keys\"},\n+\t{\"readrsvr\",\tscsi_persistent_reserve_in_read_reservation, \"Read SCSI Reservation Data\"},\n+\t{\"reportcap\",\tscsi_persistent_reserve_in_report_capabilities, \"Report reservation Capabilities\"},\n+};\n+\n+void usage(void)\n+{\n+\tint i;\n+\tprintf(\"Usage:  scsi_io --command  --device \\n\");\n+\tprintf(\"Commands:\\n\");\n+\tfor (i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++){\n+\t\tprintf(\"\t%s\t%s\\n\", cmds[i].cmd, cmds[i].comment);\n+\t}\t\n+}\n+\n+\n+int main(int argc, const char *argv[])\n+{\n+\tint i, fd;\n+\tint opt;\n+\tchar *command = NULL;\n+\tchar *device = NULL;\n+\tscsi_func_t func=NULL;\n+\tstruct poptOption popt_options[] = {\n+\t\tPOPT_AUTOHELP\n+//\t\t{ \"timelimit\", 't', POPT_ARG_INT, &options.timelimit, 0, \"timelimit\", \"integer\" },\n+\t\t{ \"command\",      'n', POPT_ARG_STRING, &command, 0, \"command\", \"command\" },\n+\t\t{ \"device\",      'n', POPT_ARG_STRING, &device, 0, \"device\", \"device\" },\n+//\t\t{ \"machinereadable\", 'Y', POPT_ARG_NONE, &options.machinereadable, 0, \"enable machinereadable output\", NULL },\n+\t\tPOPT_TABLEEND\n+\t};\n+\tpoptContext pc;\n+\n+\tpc = poptGetContext(argv[0], argc, argv, popt_options, POPT_CONTEXT_KEEP_FIRST);\n+\n+\twhile ((opt = poptGetNextOpt(pc)) != -1) {\n+\t\tswitch (opt) {\n+\t\tdefault:\n+\t\t\tfprintf(stderr, \"Invalid option %s: %s\\n\", \n+\t\t\t\tpoptBadOption(pc, 0), poptStrerror(opt));\n+\t\t\t_exit(1);\n+\t\t}\n+\t}\n+\n+\tif (!command) {\n+\t\tprintf(\"Must specify the command\\n\");\n+\t\tusage();\n+\t\t_exit(10);\n+\t}\n+\n+\tif (!device) {\n+\t\tprintf(\"Must specify the device\\n\");\n+\t\tusage();\n+\t\t_exit(10);\n+\t}\n+\n+\tfd=open_scsi_device(device);\n \tif(fd<0){\n-\t\tprintf(\"Could not open SCSI device %s\\n\",argv[1]);\n-\t\t_exit(10);\n-\t}\n-\n-\tscsi_inquiry(fd);\n-\tscsi_inquiry_supported_vpd_pages(fd);\n-\tscsi_inquiry_unit_serial_number(fd);\n-\tscsi_persistent_reserve_in_read_keys(fd);\n-\tscsi_persistent_reserve_in_read_reservation(fd);\n-\tscsi_persistent_reserve_in_report_capabilities(fd);\n+\t\tprintf(\"Could not open SCSI device %s\\n\",device);\n+\t\tusage();\n+\t\t_exit(10);\n+\t}\n+\n+\tfor (i=0;i<sizeof(cmds)/sizeof(cmds[0]);i++){\n+\t\tif(!strcmp(cmds[i].cmd, command)) {\n+\t\t\tfunc = cmds[i].func;\n+\t\t\tbreak;\n+\t\t}\t\t\n+\t}\n+\tif (!func) {\n+\t\tprintf(\"Unrecognized command : %s\\n\", command);\n+\t\tusage();\n+\t\t_exit(10);\n+\t}\n+\n+\tfunc(fd);\n+\n+#if 0\n \tscsi_persistent_reserve_in_read_full_status(fd);\n-#if 0\n \tscsi_persistent_reserve_out_register_and_ignore_existing_key(fd);\n \tscsi_persistent_reserve_in_read_keys(fd);\n \n\n"}