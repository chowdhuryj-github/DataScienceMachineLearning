{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 320: timeout pending controls immediately when a node becomes\n\tdisconnected in http://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 320\nrevision-id: tridge@samba.org-20070518134829-y384ldoxc07qxxi5\nparent: tridge@samba.org-20070518132336-gjpdua5y9j3ydutx\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Fri 2007-05-18 23:48:29 +1000\nmessage:\n  timeout pending controls immediately when a node becomes disconnected\nmodified:\n  common/ctdb.c                  ctdb.c-20061127094323-t50f58d65iaao5of-2\n  common/ctdb_daemon.c           ctdb_daemon.c-20070409200331-3el1kqgdb9m4ib0g-1\n  common/ctdb_monitor.c          ctdb_monitor.c-20070518100625-8jf4ft1mjzmb22ck-1\n  include/ctdb_private.h         ctdb_private.h-20061117234101-o3qt14umlg9en8z0-13\n=== modified file 'common/ctdb.c'\n--- a/common/ctdb.c\t2007-05-18 13:23:36 +0000\n+++ b/common/ctdb.c\t2007-05-18 13:48:29 +0000\n@@ -379,6 +379,7 @@\n \tnode->flags &= ~NODE_FLAGS_CONNECTED;\n \tDEBUG(1,(\"%s: node %s is dead: %d connected\\n\", \n \t\t node->ctdb->name, node->name, node->ctdb->num_connected));\n+\tctdb_daemon_cancel_controls(node->ctdb, node);\n }\n \n /*\n\n=== modified file 'common/ctdb_daemon.c'\n--- a/common/ctdb_daemon.c\t2007-05-18 09:19:35 +0000\n+++ b/common/ctdb_daemon.c\t2007-05-18 13:48:29 +0000\n@@ -836,16 +836,18 @@\n \n \n struct daemon_control_state {\n+\tstruct daemon_control_state *next, *prev;\n \tstruct ctdb_client *client;\n \tstruct ctdb_req_control *c;\n \tuint32_t reqid;\n+\tstruct ctdb_node *node;\n };\n \n /*\n   callback when a control reply comes in\n  */\n static void daemon_control_callback(struct ctdb_context *ctdb,\n-\t\t\t\t    uint32_t status, TDB_DATA data, \n+\t\t\t\t    int32_t status, TDB_DATA data, \n \t\t\t\t    const char *errormsg,\n \t\t\t\t    void *private_data)\n {\n@@ -880,6 +882,30 @@\n }\n \n /*\n+  fail all pending controls to a disconnected node\n+ */\n+void ctdb_daemon_cancel_controls(struct ctdb_context *ctdb, struct ctdb_node *node)\n+{\n+\tstruct daemon_control_state *state;\n+\twhile ((state = node->pending_controls)) {\n+\t\tDLIST_REMOVE(node->pending_controls, state);\n+\t\tdaemon_control_callback(ctdb, (uint32_t)-1, tdb_null, \n+\t\t\t\t\t\"node is disconnected\", state);\n+\t}\n+}\n+\n+/*\n+  destroy a daemon_control_state\n+ */\n+static int daemon_control_destructor(struct daemon_control_state *state)\n+{\n+\tif (state->node) {\n+\t\tDLIST_REMOVE(state->node->pending_controls, state);\n+\t}\n+\treturn 0;\n+}\n+\n+/*\n   this is called when the ctdb daemon received a ctdb request control\n   from a local client over the unix domain socket\n  */\n@@ -900,6 +926,14 @@\n \tstate->client = client;\n \tstate->c = talloc_steal(state, c);\n \tstate->reqid = c->hdr.reqid;\n+\tif (ctdb_validate_vnn(client->ctdb, c->hdr.destnode)) {\n+\t\tstate->node = client->ctdb->nodes[c->hdr.destnode];\n+\t\tDLIST_ADD(state->node->pending_controls, state);\n+\t} else {\n+\t\tstate->node = NULL;\n+\t}\n+\n+\ttalloc_set_destructor(state, daemon_control_destructor);\n \t\n \tdata.dptr = &c->data[0];\n \tdata.dsize = c->datalen;\n@@ -912,6 +946,10 @@\n \t\tDEBUG(0,(__location__ \" Failed to send control to remote node %u\\n\",\n \t\t\t c->hdr.destnode));\n \t}\n+\n+\tif (c->flags & CTDB_CTRL_FLAG_NOREPLY) {\n+\t\ttalloc_free(state);\n+\t}\n }\n \n /*\n\n=== modified file 'common/ctdb_monitor.c'\n--- a/common/ctdb_monitor.c\t2007-05-18 13:23:36 +0000\n+++ b/common/ctdb_monitor.c\t2007-05-18 13:48:29 +0000\n@@ -58,6 +58,7 @@\n \t\tif (node->dead_count >= CTDB_MONITORING_DEAD_COUNT) {\n \t\t\tDEBUG(0,(\"Node %u is dead - marking as not connected\\n\", node->vnn));\n \t\t\tnode->flags &= ~NODE_FLAGS_CONNECTED;\n+\t\t\tctdb_daemon_cancel_controls(ctdb, node);\n \t\t\t/* maybe tell the transport layer to kill the\n \t\t\t   sockets as well?\n \t\t\t*/\n\n=== modified file 'include/ctdb_private.h'\n--- a/include/ctdb_private.h\t2007-05-18 13:23:36 +0000\n+++ b/include/ctdb_private.h\t2007-05-18 13:48:29 +0000\n@@ -74,7 +74,7 @@\n \n /* used for callbacks in ctdb_control requests */\n typedef void (*ctdb_control_callback_fn_t)(struct ctdb_context *,\n-\t\t\t\t\t   uint32_t status, TDB_DATA data, \n+\t\t\t\t\t   int32_t status, TDB_DATA data, \n \t\t\t\t\t   const char *errormsg,\n \t\t\t\t\t   void *private_data);\n \n@@ -93,6 +93,10 @@\n \t/* used by the dead node monitoring */\n \tuint32_t dead_count;\n \tuint32_t rx_cnt;\n+\n+\t/* a list of controls pending to this node, so we can time them out quickly\n+\t   if the node becomes disconnected */\n+\tstruct daemon_control_state *pending_controls;\n };\n \n /*\n@@ -823,4 +827,6 @@\n int ctdb_start_monitoring(struct ctdb_context *ctdb);\n void ctdb_send_keepalive(struct ctdb_context *ctdb, uint32_t destnode);\n \n+void ctdb_daemon_cancel_controls(struct ctdb_context *ctdb, struct ctdb_node *node);\n+\n #endif\n\n"}