{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "\"andrew cooke\" <andrew@acooke.org>", "subject": "Intro / Parrot / Functional Lang Imp Q", "body": "\nHi,\n\nI am thinking about using Parrot as the VM for a small, experimental\nfunctional language.  My priority is ease of getting things working.  I\nwas wondering if:\n\n- this is the right list for parrot (parrot-porters-subscribe bounced)?\n\n- whether there was a more suitable venue (more focussed on developing\n  languages with parrot than on perl/parrot itself)?\n\n- if anyone could recommend some good code (an already implemented\n  language) to copy and hack?\n\nOn the last point, all I really need is first class functions, basic\ntypes, eager (partial) evaluation, pattern matching (where is that\nhandled?) and a little mutability.  In other words, I don't care much\nabout first class continuations, exceptions, (static) types or\ninheritance.\n\nAlso, am I right in thinking that I can use whatever language I want for\ngenerating the IR?  Are there any libraries/toolkits for various\nlanguages?  I hate to admit it, but I would prefer not Perl (sorry,\nhaven't used it for years...), although if that's hugely easier I guess I\ngo that route anyway.\n\nThanks,\nAndrew\n\n\n"}