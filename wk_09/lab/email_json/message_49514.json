{"category": "ham", "to_address": "beginners@perl.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: Problems referencing variable value in another loop", "body": "On Jun 16, 4:08 pm, shadke...@hotmail.com wrote:\n\n\n>  The problem is that when I\n> reference a variable in the second while loop that I initialized in\n> the first while loop, the script doesn't recognize it. To be more\n> clear, there is a number value for $SLPdataSFO[6] that I extracted in\n> the first while loop, and I'd like to subtract that value from\n> $SLPdataSAC[6], which I extracted in the second while loop. I tried to\n> make it a global variable at the beginning by using \"our @SLPdataSFO =\n> ();\" to make it a global variable, but no luck there.\n\nOkay, I'm going to answer your second question first.  In this\nexample:\n\nour @foo;\nwhile (do_stuff()){\n  my @foo = get_values();\n  #etc\n}\nprint @foo;\n\nThe @foo that gets printed is the global @foo you declared at the\nbeginning.  It has nothing at all to do with the @foo you declared\ninside the while loop.  The lexical @foo in the while loop \"masks\"\naccess to the global @foo you declared outside the while loop.[1]\nThat's why simply adding a 'our @SLPdataSFO;' statement to your\nprogram would have no effect.\n\n\n\n> while (my $line = ) { #reads through each line of model data\n>\n> if ($line =~ m/^ Mean/) { #finds line with sealevel pressure\n> print \"$line\";\n> my $SFOdataSLP = $line; #places $line into new string called $data SLP\n> my @SLPdataSFO = split(/\\s+/, $SFOdataSLP); #splits $data SLP string\n\nYou are declaring your variable inside the while loop.  As soon as\nthis while loop ends, @SLPdataSFO goes out of scope.  It does not\nexist anywhere else.  To fix this issue, *declare* the array before\nthe loop, but *assign* it within the loop:\n\nmy @SLPdataSFO;  #declaration\nwhile (my $line = ) {\n  if ($line =~ m/^ Mean/) {\n      @SLPdataSFO = split(/\\s+/, $line);  #assigns values, but does\nnot redeclare\n      #etc\n   }\n   #etc\n}\n\nNow a this point, the @SLPdataSFO you declared will still exist, and\nwill be populated with the last values put into it in your while loop.\n\nThere is no need to use 'our' here.  You simply need to fix the scope\nof your lexical variable so that all pieces of code that want to use\nthe variable are within that scope.\n\nHope that helps,\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}