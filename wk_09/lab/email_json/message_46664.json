{"category": "ham", "to_address": "<r-help@stat.math.ethz.ch>", "from_address": "\"Wentzel-Larsen, Tore\" <tore.wentzel-larsen@helse-bergen.no>", "subject": "[R] distribution graph", "body": "The following gives two functions for producing distribution graphs:\n\ndistribution-graph\n\nproduces a single graph, and\n\nmultiple.distribution.graph\n\nproduces a number of graphs side by side.\n\nRegards,\nTore Wentzel-Larsen\nstatistician\nCentre for Clinical research\nArmauer Hansen house \nHaukeland University Hospital\nN-5021 Bergen\ntlf   +47 55 97 55 39 (a)\nfaks  +47 55 97 60 88 (a)\nemail tore.wentzel-larsen@helse-bergen.no \n\n\nDocumentation:\n\ndistribution.graph\n\nDescription\n\ndistribution.graph produces a distribution graph of the data values. \n\nUsage\n\ndistribution.graph(xx, grouping=FALSE,\n\tngroups=10, xplace=c(0,1,.5),  halfband=.25,\n\txlab='', ylab='', pch=16,\n\tlines=FALSE, lty='solid')\n\nArguments\n\nxx\t\tnumeric, a vector of values for which to produce the \n\t\tdistribution graph. Missing values are allowed, and are \n\t\tdisregarded.\n\ngrouping\tlogical, if FALSE (the default) the actual values are graphed,\n\t\tif TRUE the values are grouped before being plotted.\n\nngroups\tthe number of groups (default 10) if grouping=TRUE.\n\nxplace\tvector with three components. The first two components define\n\t\tthe horizontal plotting range. The last component defines the\n\t\thorizontal placement of the centre of the distribution graph.\n\nhalfband\tHalf-length of the maximal horizontal band in the distribution\n\t\tGraph, from the centre outwards. The bands should be within the \n\t\tHorizontal plotting range.\n\nxlab, \nylab\t\tx and y axis labels, as in plot.default.\n\npch\t\tplotting symbol, default 16 (solid circle).\n\nlines\t\tlogical, if FALSE (the default) only points are plotted, if\n\t\tTRUE the points are connected by lines.\n\nlty\t\tline type, as in plot.default.\n\n\nValue\n\nA frequency table for the values actually plotted.\n\nExamples\n\n# a simple distribution graph with no grouping:\ndistribution.graph(floor(runif(100, 200, 310)))\n\n# a similar graph with vertical bars only:\ndistribution.graph(floor(runif(100, 200, 310)), lines=TRUE, pch='')\n\n# a distribution graph with grouping (points or line bars):\ndistribution.graph(runif(1000 ,0, 3), grouping=TRUE)\ndistribution.graph(runif(1000, 0, 3), grouping=TRUE, lines=TRUE, pch='')\n\n# a distribution graph with grouping, 5 groups:\ndistribution.graph(runif(1000, 0, 10), grouping=TRUE, ngroups=5)\ndistribution.graph(rbinom(1000, 20, .7), grouping=TRUE, ngroups=5)\n\n\n- - - - - - - - - - - - - - -\n\nmultiple.distribution.graph\n\nDescription\n\nmultiple.distribution.graph produces a number of distribution graphs of the data values, side by side. \n\nUsage\n\nmultiple.distribution.graph(xx, grouping=FALSE,\n\tngroups=10, xleft=0, xright=1, xmiddle=.5, xband=.5,\n\txlab=c(1:length(xx)), ylab='', pch=16,\n\tlines=FALSE, lty='solid')\nArguments\n\nxx\t\tlist of numeric variables, a vector of values for which to produce the distribution \t\tgraph. Missing values are allowed, and are disregarded.\n\ngrouping\tlogical, if FALSE (the default) the actual values are graphed,\n\t\tif TRUE the values are grouped before being plotted.\n\nngroups\tthe number of groups (default 10) if grouping=TRUE.\n\nxleft\nxright\nxmiddle\txleft and xright define the horizontal plotting range within\n\t\teach distribution graph. xmiddle defines the horizontal placement of the centre of each \t\tdistribution graph.\n\nxband\t\tthe part actually used for plotting, of the horizontal range\n\t\tallocated top each individual graph.\n\nxlab, \nylab\t\tx and y axis labels, as in plot.default.\n\npch\t\tplotting symbol, default 16 (solid circle).\n\nlines\t\tlogical, if FALSE (the default) only points are plotted, if\n\t\tTRUE the points are connected by lines.\n\nlty\t\tline type, as in plot.default.\n\n\nValue\n\nA list of frequency tables for the values actually plotted.\n\n\nExamples\n\npar(ask=TRUE)\nmultiple.distribution.graph(as.list(data.frame(matrix(runif(72),ncol=9))))\nmultiple.distribution.graph(as.list(data.frame(matrix(runif(72),ncol=9))),\n\tgrouping=TRUE)\nmultiple.distribution.graph(as.list(data.frame(matrix(runif(72),ncol=9))),\n\tgrouping=TRUE,ngroups=3)\nmultiple.distribution.graph(as.list(data.frame(matrix(runif(72),ncol=9))),\n\tgrouping=TRUE,ngroups=3,lines=TRUE)\nmultiple.distribution.graph(as.list(data.frame(matrix(runif(72),ncol=9))),\n\tgrouping=TRUE,ngroups=3,lines=TRUE,pch='')\nmultiple.distribution.graph(as.list(data.frame(matrix(runif(72),ncol=9))),\n\tgrouping=TRUE,ngroups=5,lines=TRUE,pch='')\npar(ask=FALSE)\n\n# a more complicated list of numeric vectors:\nxx <- as.list(as.list(data.frame(matrix(runif(72,10,45),ncol=9))))\nxx[[1]][c(1,3,4,8)]<- NA\nxx[[2]][c(2,4)]<- NA\nxx[[4]][c(3)]<- NA\nxx[[6]][c(2,5,8)]<- NA\nxx[[8]][c(1,2,8)]<- NA\nxx <- lapply(xx,stripmiss)\nxx[[1]][c(3)]<- NA\nxx[[3]][c(1,3,4,5)]<- NA\nxx[[4]][c(2,3)]<- NA\nxx[[8]][c(3,4)]<- NA\n\nmultiple.distribution.graph(xx)\nmultiple.distribution.graph(xx,grouping=TRUE,ngroups=3,lines=TRUE,\n\tpch='')\nmultiple.distribution.graph(xx,grouping=TRUE,ngroups=3,lines=TRUE,\n\tpch='.',lty='blank')\n\n\n\n\n\n\nCode:\n- - -\n\n# auxiliary functions: stripmiss and grouping.v :\n\n# function for deleting missing values from a vector:\n\nstripmiss <- function(xx) xx[is.na(xx)==0]\n\n# grouping of a vector into a specified number of\n#\tintervals of equal size:\n\ngrouping.v <- function(xx,ngroups=10,eps=.001) {\nminx<- min(xx)\nmaxx <-max(xx)\nif (minx == maxx | ngroups == 1) x2 <- xx\nif(ngroups==1) x2 <- mean(x2)\nif (minx < maxx & ngroups > 1) {\nx1 <- round(.5+eps + (xx - minx)*(ngroups - 2*eps)/(maxx - minx))\nx2 <- minx + (x1 - 1) * (maxx - minx)/(ngroups -1)\n} # end if\nx2\n} # end function grouping.v (grouping of a vector)\n\n\n# function for a single distribution graph:\n\ndistribution.graph <- function(xx, grouping=FALSE,\n\tngroups=10, xplace=c(0,1,.5),  halfband=.25,\n\txlab='', ylab='', pch=16,\n\tlines=FALSE, lty='solid') {\nx1 <- stripmiss(xx)\nif (grouping) x1 <- grouping.v(x1,ngroups=ngroups)\nxv <- as.numeric(names(table(x1))) # actual values\nminxv <-min(xv)\nmaxxv <-max(xv)\nxn <- as.numeric(table(x1)) # number of occurences\nnx <- length(xv)\nmaxn <- max(xn)\nplot(x=xplace[1]+(xv-minxv)*(xplace[2]-xplace[1])/\n\t(maxxv-minxv),y=xv,xlab='',ylab='',\n\taxes=FALSE,col='white')\nbox()\naxis(1,at=xplace[3],labels=xlab)\naxis(2)\nfor (value.nr in 1:nx) {\nn.act <- xn[value.nr]\nif (n.act==1) xpositions.act <- xplace[3]\nif (n.act > 1) {\nhalfband.act <- halfband * n.act/maxn\nleft.act  <- xplace[3] - halfband.act\nright.act <- xplace[3] + halfband.act\nxpositions.act <- left.act + (0:(n.act-1)) * \n\t(right.act - left.act)/(n.act-1)\n} # end if n.act > 1\nif (!lines)\npoints(x=xpositions.act,y=rep(xv[value.nr],n.act),pch=pch)\nif (lines)\npoints(x=xpositions.act,y=rep(xv[value.nr],n.act),\n\tpch=pch,type='o',lty=lty)\n} # end for xvalue\ndistribution <- x1\ntable(distribution)\n} # end function distribution.graph\n\npar(ask=TRUE)\ndistribution.graph(floor(runif(100,200,310)))\ndistribution.graph(floor(runif(100,200,310)),lines=TRUE,pch='.')\ndistribution.graph(runif(1000,0,3),grouping=TRUE)\ndistribution.graph(runif(1000,0,3),grouping=TRUE,lines=TRUE,pch='')\ndistribution.graph(runif(1000,0,10),grouping=TRUE,ngroups=5)\ndistribution.graph(rbinom(1000,20,.7),grouping=TRUE,ngroups=5)\npar(ask=FALSE)\n\n# function for several distribution graphs in the same plot:\n\nmultiple.distribution.graph <- function(xx, grouping=FALSE,\n\tngroups=10, xleft=0, xright=1, xmiddle=.5, xband=.5,\n\txlab=c(1:length(xx)), ylab='', pch=16,\n\tlines=FALSE, lty='solid') {\nxx <- lapply(xx,stripmiss) # remove missing values\nif (grouping) xx <- lapply(xx,grouping.v,ngroups=ngroups)\nxtable <- lapply(xx,table)\nxtable.values <- lapply(lapply(xtable,names),as.numeric)\nxtable.freq <- lapply(xtable,as.numeric)\nmax.freq <- max(as.numeric(lapply(xtable.freq,max)),na.rm=TRUE)\nmin.value <- min(as.numeric(lapply(xtable.values,min)),na.rm=TRUE)\nmax.value <- max(as.numeric(lapply(xtable.values,max)),na.rm=TRUE)\nncomp <- length(xx)\nplot.xtotal<- xleft + c(0,ncomp) * (xright - xleft)\nplot.ytotal<- c(min.value,max.value)\nplot.mids <- xleft + c(0:(ncomp-1)) * (xright - xleft) + xmiddle\nplot(x=plot.xtotal,y=plot.ytotal,xlab='',ylab=ylab,\n\txlim=plot.xtotal,ylim=plot.ytotal,\n\taxes=FALSE,col='white')\nbox()\naxis(1,at=plot.mids,labels=xlab)\naxis(2)\nfor (comp in 1:ncomp) {\nleft.outer <- xleft + (comp - 1) * (xright - xleft)\nright.outer <- xleft + comp * (xright - xleft)\nmid <- plot.mids[comp]\nmax.freq.comp <- max(xtable.freq[[comp]],na.rm=TRUE)\nvalues.comp <- xtable.values[[comp]]\nnvalues.comp <- length(values.comp)\nfreq.comp <- xtable.freq[[comp]]\nmaxband.comp <- xband * ((xright - xleft)/2) * \n\tmax.freq.comp / max.freq\nif (comp==1) abline(v=left.outer,lty=lty)\nabline(v=right.outer,lty=lty)\nfor (nr in 1:nvalues.comp) {\nvalue.nr <- values.comp[nr]\nfreq.nr <- freq.comp[nr]\nleft.nr <- mid - maxband.comp * freq.nr/max.freq.comp \nright.nr <- mid + maxband.comp * freq.nr/max.freq.comp \nif (freq.nr==1) points(x=mid,y=value.nr,pch=pch)\nif (freq.nr>1 & !lines) points(x=left.nr + c(0:(freq.nr-1))*\n\t(right.nr-left.nr)/(freq.nr-1),y=rep(value.nr,freq.nr),pch=pch)\nif (freq.nr>1 & lines) points(x=left.nr + c(0:(freq.nr-1))*\n\t(right.nr-left.nr)/(freq.nr-1),y=rep(value.nr,freq.nr),\n\tpch=pch,type='o',lty=lty)\n} # end for value.nr\n} # end for comp\nlapply(xx,table)\n} # end function multiple.distribution.graph\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}