{"category": "ham", "to_address": "Perl beginners <beginners@perl.org>", "from_address": "\"John W. Krahn\" <krahnj@telus.net>", "subject": "Re: Howto decode an arp entry to hex", "body": "Bernard wrote:\n> Hi,\n\nHello,\n\n> When I try to get the arp table from any type of device (oid \n> 1.3.6.1.2.1.4.22.1.3) with the snmp_util module, it  returns the 6 \n> character, instead of the hex byte value.\n> \n> How can I convert a 6 byte word into the hex equivalent like \n> 00:0a:8b:bd:62:8a.\n\n$ perl -le'\nmy $data = \"\\x00\\x0a\\x8b\\xbd\\x62\\x8a\";\n( my $new = unpack \"H*\", $data ) =~ s/(..)(?=..)/$1:/g;\nprint $new;\n'\n00:0a:8b:bd:62:8a\n\n\n> Any help greatly appreciated\n> \n> #!/usr/bin/perl\n\nYou should let perl help you too!\n\nuse warnings;\nuse strict;\n\n\n> use SNMP_util;\n> \n> \n> my $IPADDR = $ARGV[0] || die \"Oops, no ipaddr specified....\";\n> my $COMM = $ARGV[1] || die \"Oops, no community specified....\";\n> my $OID = $ARGV[2] || die \"Oops, no oid specified....\";\n\nAlthough that *will* technically work, you are using the wrong logical \noperator.  The logical or operator (||) has higher precedence than the \nassignment operator (=).\n\nThe usual idiom is to use '||' for assignment:\n\nmy $var = $ARGV[0] || 'some default value';\n\nAnd to use 'or' for flow control:\n\nmy $var = $ARGV[0] or die \"Opps\\n\";\n\n\n> print(\"Getting info for $IPADDR with comm $COMM ($OID)\\n\");\n> \n> $HOST = $COMM . \"@\" . $IPADDR;\n> $SNMPVER = \"1\";\n> $SNMPSTR = \"$HOST\" . \":::::\" . \"$SNMPVER\";\n> print(\"Getting table.\\n\");\n> \n> $length = length($OID);\n> $oid = $OID;\n>    $oid = substr($oid,0,$length);\n\nWhy not simply:\n\nmy $oid = substr $OID, 0, length $OID;\n\nWhich is just a long way of saying:\n\nmy $oid = $OID;\n\n\n> print \"Trying 'getnext' on $host with $oid\\n\";\n> while ( substr($oid,0,$length) eq $OID ) {\n>  my @ret = &snmpgetnext($SNMPSTR, \"$oid\");\n\nYou shouldn't prefix a subroutine name with an ampersand.\n\nperldoc perlsub\n\n\n>  foreach my $desc (@ret) {\n>    ($oid, $desc) = split(':', $desc, 2);\n>    $testStr = substr($oid,0,$length);\n>    if ( substr($oid,0,$length) eq $OID ) {\n>      print \"$oid = $desc ($testStr)')\\n\";\n>    }\n>  }\n> }\n\n\n\nJohn\n-- \nPerl isn't a toolbox, but a small machine shop where you\ncan special-order certain sorts of tools at low cost and\nin short order.                            -- Larry Wall\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}