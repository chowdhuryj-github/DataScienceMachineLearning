{"category": "ham", "to_address": "\"Andrew Yee\" <andrewjyee@gmail.com>, marc_schwartz@comcast.net", "from_address": "\"Liaw, Andy\" <andy_liaw@merck.com>", "subject": "Re: [R] more woes trying to convert a data.frame to a numerical\n matrix", "body": "I think this might be a bit more straight forward:\n\nR> mat <- do.call(cbind, scan(\"clipboard\", what=list(NULL, 0, 0, 0),\nsep=\",\", skip=2))\nRead 3 records\nR> mat\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\nAndy\n\n\nFrom: Andrew Yee\n> \n> Thanks again to everyone for all your help.\n> \n> I think I've figured out the solution to my dilemma.  Instead of using\n> data.matrix or sapply, this works for me:\n> \n> sample.data<-read.csv(\"sample.csv\")\n> sample.matrix.raw<-as.matrix(sample.data[-1,-1])\n> sample.matrix <- matrix(as.numeric(sample.matrix.raw),\n>     nrow=attributes(sample.matrix.raw)$dim[1], ncol=attributes(\n> sample.matrix.raw)$dim[2])\n> \n> With the above code, I get the desired matrix of:\n> \n> 1 2 3\n> 4 5 6\n> 7 8 9\n> \n> (I'd like to be able to import the whole csv and then subset \n> the relevant\n> header and data sections (rather than creating a separate csv \n> for the header\n> and csv for the data)\n> \n> Of course, the above code seems kind of clunky, and welcome \n> any suggestions\n> for improvement.\n> \n> Thanks,\n> Andrew\n> \n> \n> On 5/16/07, Andrew Yee  wrote:\n> >\n> > Thanks for the suggestion.\n> >\n> > However, I've tried sapply and data.matrix.\n> >\n> > The problem is that it while it returns a numeric matrix, \n> it gives back:\n> >\n> > 1 1 1\n> > 2 2 2\n> > 3 3 3\n> >\n> > instead of\n> >\n> > 1 2 3\n> > 4 5 6\n> > 7 8 9\n> >\n> > The latter matrix is the desired result\n> >\n> > Thanks,\n> > Andrew\n> >\n> > On 5/16/07, Marc Schwartz < marc_schwartz@comcast.net> wrote:\n> > >\n> > > On Wed, 2007-05-16 at 08:40 -0400, Andrew Yee wrote:\n> > > > Thanks for the suggestion and the explanation for why I \n> was running\n> > > > into these troubles.\n> > > >\n> > > > I've tried:\n> > > >\n> > > > as.numeric(as.matrix(sample.data[-1, -1]))\n> > > >\n> > > > However, this creates another vector rather than a matrix.\n> > >\n> > > Right. That's because I'm an idiot and need more caffeine... :-)\n> > >\n> > > >  Is there a straight forward way to convert this directly into a\n> > > > numeric matrix rather than a vector?\n> > >\n> > > Yeah, Dimitris' approach below of using data.matrix().\n> > >\n> > > You could also use:\n> > >\n> > > mat <- sapply(sample.data[-1, -1], as.numeric)\n> > > rownames(mat) <- rownames(sample.data[-1, -1])\n> > >\n> > > > mat\n> > >   x y z\n> > > 2 1 1 1\n> > > 3 2 2 2\n> > > 4 3 3 3\n> > >\n> > > Though, this is essentially what data.matrix() does internally.\n> > >\n> > > > Additionally, I've also considered:\n> > > >\n> > > > data.matrix(sample.data[-1,-1]\n> > > >\n> > > > but bizarrely, it returns:\n> > > >\n> > > >   x y z\n> > > > 2 1 1 1\n> > > > 3 2 2 2\n> > > > 4 3 3 3\n> > >\n> > > That is a numeric matrix:\n> > >\n> > > > str(data.matrix(sample.data[-1, -1]))\n> > > int [1:3, 1:3] 1 2 3 1 2 3 1 2 3\n> > > - attr(*, \"dimnames\")=List of 2\n> > >   ..$ : chr [1:3] \"2\" \"3\" \"4\"\n> > >   ..$ : chr [1:3] \"x\" \"y\" \"z\"\n> > >\n> > > HTH,\n> > >\n> > > Marc\n> > >\n> > > >\n> > > > Thanks,\n> > > > Andrew\n> > > >\n> > > >\n> > > > On 5/16/07, Marc Schwartz < marc_schwartz@comcast.net> wrote:\n> > > >         On Wed, 2007-05-16 at 08:10 -0400, Andrew Yee wrote:\n> > > >         > I have the following csv file:\n> > > >         >\n> > > >         > name,x,y,z\n> > > >         > category,delta,gamma,epsilon\n> > > >         > a,1,2,3\n> > > >         > b,4,5,6\n> > > >         > c,7,8,9\n> > > >         >\n> > > >         > I'd like to create a numeric matrix of just \n> the numbers in\n> > > >         this csv dataset.\n> > > >         >\n> > > >         > I've tried the following program:\n> > > >         >\n> > > >         > sample.data <- read.csv(\"sample.csv\")\n> > > >         > numerical.data <- as.matrix (sample.data[-1,-1])\n> > > >         >\n> > > >         > However, print(numerical.data ) returns what \n> appears to be a\n> > > >         matrix of\n> > > >         > characters:\n> > > >         >\n> > > >         >   x   y   z\n> > > >         > 2 \"1\" \"2\" \"3\"\n> > > >         > 3 \"4\" \"5\" \"6\"\n> > > >         > 4 \"7\" \"8\" \"9\"\n> > > >         >\n> > > >         > How do I force it to be numbers rather than \n> characters?\n> > > >         >\n> > > >         > Thanks,\n> > > >         > Andrew\n> > > >\n> > > >         The problem is that you have two rows which \n> contain alpha\n> > > >         entries.\n> > > >\n> > > >         The first row is treated as the header, but the \n> second row is\n> > > >         treated as\n> > > >         actual data, thus overriding the numeric values in the\n> > > >         subsequent rows.\n> > > >\n> > > >         You could use:\n> > > >\n> > > >           as.numeric(as.matrix(sample.data [-1, -1]))\n> > > >\n> > > >         to coerce the matrix to numeric, or if you \n> don't need the\n> > > >         alpha entries,\n> > > >         you could modify the read.csv() call to something like:\n> > > >\n> > > >           read.csv(\"sample.csv\", header = FALSE, skip = \n> 2, row.names =\n> > > >         1,\n> > > >                    col.names = c(\"name\", \"x\", \"y\", \"z\")\n> > > >\n> > > >         This will skip the first two rows, set the \n> first column to the\n> > >\n> > > >         row names\n> > > >         and give you a data frame with numeric columns, \n> which in most\n> > > >         cases can\n> > > >         be treated as a numeric matrix and/or you could \n> explicitly\n> > > >         coerce it to\n> > > >         one.\n> > > >\n> > > >         HTH,\n> > > >\n> > > >         Marc Schwartz\n> > > >\n> > > >\n> > > >\n> > >\n> > >\n> >\n> \n> \t[[alternative HTML version deleted]]\n> \n> ______________________________________________\n> R-help@stat.math.ethz.ch mailing list\n> https://stat.ethz.ch/mailman/listinfo/r-help\n> PLEASE do read the posting guide \n> http://www.R-project.org/posting-guide.html\n> and provide commented, minimal, self-contained, reproducible code.\n> \n> \n> \n\n\n------------------------------------------------------------------------------\nNotice:  This e-mail message, together with any attachments,...{{dropped}}\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}