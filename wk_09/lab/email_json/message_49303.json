{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Damian Conway <damian@conway.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "brian wrote:\n\n >> The rule you have to teach under the Separation model is:\n >>\n >>      \"Any line that starts with an = is Pod...and not part of your\n >>      program.\"\n >\n > And that's something that now comes up very early in teaching the\n > assignment operator.\n\nYou know, that's a benefit I hadn't even considered. Documentation\n*should* come up early! Thanks for pointing it out. ;-)\n\n\n > When we do teach the current Pod, the simple rule is that Pod starts:\n >\n >    * when Perl is expecting a new statement\n >    * there is a =something at the beginning of the line\n\nWhich means that the user has to understand Perl's statement syntax and\nsemantics, in order to write Pod. And the user also has to understand\nthat in order to even read Pod.\n\n\n > Which is considerably simpler than the long rule list you used to say\n > the same thing (which seems a bit of FUD, honestly).\n\nNot FUD...just an partial enumeration of the full recursive complexity\nof the \"simple rule\" regarding \"is expecting a new statement\".\n\n\n > I know you think it's easier to teach and explain, but that's because\n > you came up with it.\n\nI hope I'm not that shallow. I would like to think I have enough experience \nwith both design and teaching not to fall prey to that--admittedly common--\nmistake. I'm heartened by the fact that several other contributors to\nthis debate have agreed with me, but I certainly do have to acknowledge\nthe possibility that you (as an excellent and experienced teacher) are\nright. Nevertheless I still believe that the new model, because it has\nno exceptions or context dependency, will actually be much easier to\nunderstand and to explain.\n\n\n > The notion that a special character in a certain column means\n > something was tough to explain to other people in FORTRAN too.\n\nSure. When the \"certain column\" was column 6! Surely you're not arguing\nthat:\n\n     \"A = in the first column introduces some documentation\"\n\nis as hard to understand (or even just identify) as:\n\n     \"A non-blank/non-zero in column 6 continues the previous line\"\n\n???\n\nPerceptually and cognitively, the first column is both highly\ndistinctive and easily identified. For example, in my experience\nteaching Fortran (back in the mid-80s), students had no problem\nwhatsoever learning that \"A 'C' in the first column is a comment\".\n\n\n > There are other things to consider, and to me it looks like this\n > design decision isn't based on what's easier for the Perl 6 programmer\n > but what's easier for the implementors.\n\nI assure you that that is categorically *not* the case (as I'll discuss\nat length in a subsequent message).\n\n\nDamian\n\n"}