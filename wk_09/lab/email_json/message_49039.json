{"category": "ham", "to_address": "Smylers <Smylers@stripey.com>", "from_address": "Mark Overmeer <mark@overmeer.net>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "* Smylers (Smylers@stripey.com) [070616 09:09]:\n> > * Damian Conway (damian@conway.org) [070615 00:17]:\n> > > * Pod 6 is both a structural and a semantic scheme; you can specify\n> > >   both the structure of a document, and the meaning of its various\n> > >   components\n> > \n> > Yes, and that is one of the things which worries me most *You can*.\n> > It's full freedom,\n> \n> You're concerned that an aspect of Perl 6 might have too much freedom?\n> Isn't Perl all about giving users freedom to choose their own way of\n> doing something?\n\nWhy treat documentation as a second-class citizen all the time?  Why\nhave a standard syntax for regexes, and not for docs?  Aren't you glad\nthat at last we get a standard for OO programming and named parameters?\nThe boundary between freedom and anacharchy is faint.\n\n> Yes.  But in reality many people will follow what others do, or look to\n> follow best practices.  With Perl 5 you have complete freedom as to the\n> names of C<=head1> sections in the Pod for modules, yet in browsing Cpan\n> it's clear that there are conventions and many people use the same\n> headings.  So not mandating a convention isn't much of a problem.\n\nWell, the you are talking about the top three headers, the most.  And\nthose have a good example in standard UNIX manual-pages.  So: there\nis a definitions for them, which most people have seen.\n\nLook at how people document how methods should be called.  We, as\nprogrammers, don't worry: we can read between the lines.  But most\n\"normal\" programmers we hardly ever meet, have a hard time.  Is\n\"freedom\" (in some definition) so important that consistency must\nsuffer?\n\n> Do you really think that people can now, before Perl 6 has gained\n> anything approaching the usage we expect, make policy for how things\n> should be documented, such that that policy will be the best possible\n> way of documenting everything written in Perl 6, for ever?  Or even a\n> good way?\n\nThere is no need to think that a documentation syntax develops differently\nthan a programming language.  So when Perl is developing, POD can develop\nin parallel.  And, of course, documentation is for most people a well\nknown area: at least, every program I wrote last 30 years had some form\nof documentation. To find a kind of common base of features you need does\nnot require any knowledge about the language involved is quite simple.\n\n> That strikes me as incredibly shortsighted, verging on arrogance by\n> whoever comes up with the rules, and doomed to failure.\n\nSorry?  Not only you insult me, but you also ignore all these other\nlanguages which do have a nice and standard way of documenting.\nInsignificant languages, like Java, which we tend to ignore.  Also\nPython, to name a closer neighbour.\n\nIt is incredibly shortsighted to think that any experienced programmer\nwould suggest a standard which cannot evolve, and adapt to variance\nin needs.\n\nWhat I suggest is at least some kind of suggestion how to denote the\nthings everyone certainly needs.  As I understand now, Damian is working\non that.\n\n> If a particular convention gains widespread approval then peer pressure\n> should encourage its use (in the same way that strict and warnings are\n> currently optional in Perl 5, but in the absence of a good reason it's\n> expected that they be used).\n\nWell, \"man Perl/BUGS\" says:\n       The -w switch is not mandatory.\nSo at least some people agree that there may need some more guidance.\nWarnings default \"on\" is a good idea, just as giving people a good\ndefault documentation strategy.\n-- \nRegards,\n\n               MarkOv\n\n------------------------------------------------------------------------\n       Mark Overmeer MSc                                MARKOV Solutions\n       Mark@Overmeer.net                          solutions@overmeer.net\nhttp://Mark.Overmeer.net                   http://solutions.overmeer.net\n\n"}