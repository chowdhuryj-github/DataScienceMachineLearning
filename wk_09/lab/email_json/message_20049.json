{"category": "ham", "to_address": "Andrew Bartlett <abartlet@samba.org>", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Re: [SAMBA4] we should create just one test environment", "body": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nAndrew Bartlett wrote:\n> On Mon, 2007-04-30 at 11:04 +0200, Jelmer Vernooij wrote:\n>> Andrew Bartlett wrote:\n>>> On Mon, 2007-04-30 at 10:22 +0200, Jelmer Vernooij wrote:\n>>>> Andrew Bartlett wrote:\n>>>>>> Also, the current code makes it very easy to add support for other\n>>>>>> targets (Samba3, for example) that don't support all test environments\n>>>>>> (yet).\n>>>>>>\n>>>>>> Perhaps you would simply like to make sure that all test environments\n>>>>>> are set up in 'make testenv' ? \n>>>>> No, then the tests will constantly differ from the environment in which\n>>>>> they are normally run, even worse than the current situation.\n>>>> In that case, why not add an ENV= variable so you can run \"make testenv\n>>>> ENV=member\" ? Or perhaps we can simply add \"make testenv-dc\" and \"make\n>>>> testenv-member\"?\n>>>>\n>>>> We can print out the environment name for failed tests, if that would help.\n>>> I just think it's getting too complex.  It used to be very simple, and\n>>> it isn't any more.  \n>> The only added complexity would be that there isn't just 'testenv' but\n>> 'testenv-dc' and 'testenv-member', and there is just one test that uses\n>> the latter at the moment. That makes it a little bit more complex, but\n>> the alternative is a complex test environment.\n> I would prefer a more complex, but realistic test environment that is\n> static, for most configurations.  That way, I know where things are, and\n> can easily aim tests (including ad-hoc tests/debugging in 'make\n> testenv') at whatever parts I need.\nWhat is more realistic about such a test environment? It's just more\ncomplex than the current test environments and can make debugging harder\nas there are more factors involved than can cause problems.\n\nThings will still be where they are. I just don't see why you would be\ninterested in $RANDOM-DOMAIN-MEMBER when you're running a couple of SAMR\ntests against a DC.\n\n>>>>> I'm afraid that the selftest setup is becoming too complex to reproduce\n>>>>> - I want to be able to easily reproduce any failure in 'make\n>>>>> testenv' (which you will recall is my primary work tool), without first\n>>>>> wondering 'oh, what environment did it declare, what environment did it\n>>>>> get, and what environment do I have now'.\n>>>> That will make other things more complex. For example, we'd need to\n>>>> change the environment variables to be $DC1_IP, $DC1_USERNAME,\n>>>> $DC2_PASSWORD, etc because the tests can be run against either of the\n>>>> dcs or domain member.\n>>> Well, the first point is that DC1 and DC2 *should* be sharing the same\n>>> username and passwords.  The member server will have additional local\n>>> users (to verify the local SAM), but the whole point of a member server\n>>> is to use the same passwords...\n>> Well, I was thinking of the case where two DCs were in different domains\n>> but had a trust between them. So, in the case of two dc's in the same\n>> domain, you would have a $DC_USERNAME and $DC_PASSWORD but also\n>> passwords and ips for various member servers.\n> If the cost is a few environment variables, that's a reasonable cost. \nMy point is, that is also complexity. Not much, but the same thing could\nbe said for multiple test environments.\n\n> I'm quite happy for tests to declare what environments they need, but\n> for the moment, I would really like all those environments to be\n> provided.  \nLike you use 'make testenv', I use \"make test TESTS=\" all the\ntime. It's very annoying if I have to wait not 10 but 20 or even 30\nseconds for provisioning to finish.\n\nI don't mind 'make testenv' setting up more than one environment so you\ncan do more ad-hoc testing/debugging. Or perhaps having 'make testenv'\nset up all environments, while 'make testenv-dc' or 'make\ntestenv-member' set up just one.\n\nCheers,\n\nJelmer\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.6 (GNU/Linux)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org\n\niQCVAwUBRjXD6gy0JeEGD2blAQLEhwP/QaCcIOVVjIVeVJkQbds1m9U+k4iw1aiG\n04Alk6bKmOorUbw96kPU8K772p/j3qvFsqnYj0CoAfBEmwsfPbwmffWBbCaOkDyV\nAT7hlt0/UOhRUClZ8wHWSYx/ieefjQ7SBQeeqXJjLqUlgZvjNIjzGM2INBqB/sZA\nNvQbLvQpOac=\n=d2pm\n-----END PGP SIGNATURE-----\n\n"}