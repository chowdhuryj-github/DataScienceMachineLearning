{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Thomas Wittek <mail@gedankenkonstrukt.de>", "subject": "Re: Is Perl 6 too late?", "body": "chromatic schrieb:\n> On Thursday 03 May 2007 03:06:43 Andrew Shitov wrote:\n>> What is nedded is a very simple step:\n> Contributors.\n\nAnd to attract contributors, you have to have a convincing vision.\nI'm not sure, if the (current) Perl6 specs are convincing enough to\nattract the developers out there.\nSure there are a lot of great ideas. But imho Perl6 still has quite some\ndeficiencies, that are criticized very often for Perl5.\n\n\n\nI'm only a distant observer of the Perl6 design process, so I might not\nbe in the position to criticize Perl6.\nOn the other hand, a distant view might be insightful.\nThis is not intended to be a provocation.\nBut I also think that there is a great opportunity to make _big_ changes\nto Perl to be even more competitive.\nBut maybe Perl6 is probably too far defined to encounter big changes in\nsome critical aspects.\n\nAs Ruby and Python are getting more and more attraction [1][2] I think\nthey do something right, that Perl doesn't.\nWhat I think where both (especially Python) do better is in readable code.\n\nWhat makes Perl hard to read is the excessive use of special characters\n(/\\W/).\nIn my opinion, reducing the use of those characters would make Perl a\nlot easier to read and also easier to write.\nGlobal variables with cryptic names, that no beginner can make any sense\nof by reading it. And after not working with \"$<\" for some months I\ncan't remember it either, although I've got quite some Perl experience.\n\nAdditionally I'm not a friend of sigils: Typing them is relatively\npainful, for reading there is no advantage if you use an editor with\ndecent syntax highlighting and the code looks more cryptic. The answer\nin Perl6 are twigils, great... One step backwards in my optinion.\nMost programming languages\n/C(++|#)?|Java(Script)?|Python|Ruby|Groovy/... don't need them. The only\nobvious advantage of using sigils is variable interpolation in strings.\nBut that could easily be done only in strings without the need to put a\n$ in front of each and every variable name in the rest of the code.\n\nI would also like semicolons to be optional. There are far more cases of\nsingle line statements than multiline statements. So you would save\nquite some characters, when the semicolon would be optional and you\ncould concatenate multiline statements with e.g. a backslash.\n\nSome say that there are too much operators in Perl(6). I partially\nagree. I don't like the implicit type casting forced by the operators\n(== int / eq string). That's harder to learn and remember. Harder to\nread also.\nI really like the Python way of doing it: Set the variables type on the\nassignment and remember it. The (fewer) operators now work according to\nthe type of the operands. No implicit (and error prone) type casting.\nThat way seems to be the best compromise of easiness and type safety.\n\nI could continue on that, but I've already written too much...\n\n[1] http://radar.oreilly.com/archives/2007/05/state_of_the_co_6.html\n[2] http://www.google.com/trends?q=perl%2C+python+-snake%2C+ruby\n\n\n\nPeople not only want code that _is_ sexy, but they also want it to\n_look_ sexy.\n\n-- \nThomas Wittek\nhttp://gedankenkonstrukt.de/\nJabber: streawkceur@jabber.i-pobox.net\n\n"}