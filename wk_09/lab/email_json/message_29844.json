{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Darren Duncan <darren@DarrenDuncan.net>", "subject": "Re: variable type specific sigils (was Re: Sigils by example)", "body": "At 5:00 PM -0700 5/14/07, Darren Duncan wrote:\n>On the other hand, unless this steps on something, I could suggest \n>dropping the @ and % anyway, so we have $array and $hash, and then \n>we could instead use the @ and % sigils as a prefix to indicate in \n>that case that we want them to copy by value.  For example:\n>\n>   my $foo = [23, 434, 6];\n>   my $bar;\n>   $bar = $foo; # copy by reference\n>   @$bar = @$foo; # copy by value\n>\n>Actually, I think that would be a vast improvement, as we could then \n>use the @ prefix with any collection type as short-hand to say that \n>= is copy by value.\n\nAs a follow-up or clarification of what I just said, here is a proposal ...\n\nVariables of all types have $ sigils.\n\nThe semantics of $foo = $bar are unchanged; usually $foo and $bar \npoint to the same container after the assignment, afaik.\n\nPrefixing a @ or % before a variable name indicates a syntactic \nshort-hand for something concerning the variable.\n\nOn declaration, saying @$foo means the same as \"Array $foo\", and \nsaying %$foo means the same as \"Hash $foo\", or some such.  This works \nfor my|our|has etc as well as parameter declarations.  This is \ninstead of declaring @foo or %foo.\n\nOn use in an expression, @$foo = @$bar indicates we want a copy by \nvalue or clone or shallow copy or whatever, and $foo and $bar point \nto different containers after the assignment; the semantics are like \nthe current @foo = @bar.\n\nSimilarly, use eg @@$foo rather than @@foo as appropriate.\n\nWith these changes, I see it making Perl more consistent in \nappropriate ways, and easier to use, and huffmanizing isn't worse.\n\nAlso, it means we can free up the @ and % rare ASCII symbols for \nother purposes in some situations.\n\nI could also argue that the conception of @ meaning plural vs $ \nsingular isn't really an absolute, since any value can be treated as \neither being a collection or being atomic under different \ncircumstances.\n\n-- Darren Duncan\n\n"}