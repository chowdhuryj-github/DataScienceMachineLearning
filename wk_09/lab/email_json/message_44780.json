{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "gd@samba.org", "subject": "svn commit: samba r23383 - in\n\tbranches/SAMBA_4_0/source/torture/rpc: .", "body": "Author: gd\nDate: 2007-06-08 10:43:42 +0000 (Fri, 08 Jun 2007)\nNew Revision: 23383\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23383\n\nLog:\nQuery transitive forest trust info in LSA torture test once we see such trusts.\n\nGuenther\n\nModified:\n   branches/SAMBA_4_0/source/torture/rpc/lsa.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/torture/rpc/lsa.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/rpc/lsa.c\t2007-06-08 10:42:33 UTC (rev 23382)\n+++ branches/SAMBA_4_0/source/torture/rpc/lsa.c\t2007-06-08 10:43:42 UTC (rev 23383)\n@@ -23,6 +23,7 @@\n #include \"includes.h\"\n #include \"torture/torture.h\"\n #include \"librpc/gen_ndr/ndr_lsa_c.h\"\n+#include \"librpc/gen_ndr/netlogon.h\"\n #include \"lib/events/events.h\"\n #include \"libcli/security/security.h\"\n #include \"libcli/auth/libcli_auth.h\"\n@@ -1449,6 +1450,68 @@\n \treturn ret;\n }\n \n+static BOOL test_QueryForestTrustInformation(struct dcerpc_pipe *p, \n+\t\t\t\t\t     TALLOC_CTX *mem_ctx, \n+\t\t\t\t\t     struct policy_handle *handle,\n+\t\t\t\t\t     const char *trusted_domain_name)\n+{\n+\tBOOL ret = True;\n+\tstruct lsa_lsaRQueryForestTrustInformation r;\n+\tNTSTATUS status;\n+\tstruct lsa_String string;\n+\tstruct lsa_ForestTrustInformation info, *info_ptr;\n+\tuint16_t unknown = 0;\n+\n+\tprintf(\"\\nTesting lsaRQueryForestTrustInformation\\n\");\n+\n+\tif (lp_parm_bool(-1, \"torture\", \"samba4\", False)) {\n+\t\tprintf(\"skipping QueryForestTrustInformation against Samba4\\n\");\n+\t\treturn True;\n+\t}\n+\n+\tZERO_STRUCT(string);\n+\n+\tif (trusted_domain_name) {\n+\t\tinit_lsa_String(&string, trusted_domain_name);\n+\t}\n+\n+\tinfo_ptr = &info\n+\n+\tr.in.handle = handle;\n+\tr.in.trusted_domain_name = &string\n+\tr.in.unknown = 0;\n+\tr.out.forest_trust_info = &info_ptr;\n+\n+\tstatus = dcerpc_lsa_lsaRQueryForestTrustInformation(p, mem_ctx, &r);\n+\n+\tif (!NT_STATUS_IS_OK(status)) {\n+\t\tprintf(\"lsaRQueryForestTrustInformation failed - %s\\n\", nt_errstr(status));\n+\t\tret = False;\n+\t}\n+\n+\treturn ret;\n+}\n+\n+static BOOL test_query_each_TrustDomEx(struct dcerpc_pipe *p, \n+\t\t\t\t       TALLOC_CTX *mem_ctx, \n+\t\t\t\t       struct policy_handle *handle, \n+\t\t\t\t       struct lsa_DomainListEx *domains) \n+{\n+\tNTSTATUS status;\n+\tint i,j;\n+\tBOOL ret = True;\n+\n+\tfor (i=0; i< domains->count; i++) {\n+\n+\t\tif (domains->domains[i].trust_attributes & NETR_TRUST_ATTRIBUTE_FOREST_TRANSITIVE) {\n+\t\t\tret &= test_QueryForestTrustInformation(p, mem_ctx, handle, \n+\t\t\t\t\t\t\t\tdomains->domains[i].domain_name.string);\n+\t\t}\n+\t}\n+\n+\treturn ret;\n+}\n+\n static BOOL test_query_each_TrustDom(struct dcerpc_pipe *p, \n \t\t\t\t     TALLOC_CTX *mem_ctx, \n \t\t\t\t     struct policy_handle *handle, \n@@ -1682,6 +1745,9 @@\n \t\t\tprintf(\"EnumTrustedDomainEx failed - %s\\n\", nt_errstr(enum_status));\n \t\t\treturn False;\n \t\t}\n+\n+\t\tret &= test_query_each_TrustDomEx(p, mem_ctx, handle, &domains_ex);\n+\t\t\n \t} while ((NT_STATUS_EQUAL(enum_status, STATUS_MORE_ENTRIES)));\n \n \treturn ret;\n\n"}