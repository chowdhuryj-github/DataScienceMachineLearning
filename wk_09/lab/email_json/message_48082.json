{"category": "ham", "to_address": "Jonathan Lang <dataweaver@gmail.com>", "from_address": "Thom Boyer <thom@boyers.org>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Jonathan Lang wrote:\n > 2. Getting block comments to hide POD blocks wouldn't require the POD\n > parser to have a full implementation of a Perl parser.  It would\n > require the POD parser to have a _limited_ implementation of a Perl\n > parser, one that's capable of identifying block comments.  And IIRC,\n > you already have to do something like this with respect to block\n > quotes:\n\nActually, the POD parser would have to be a fairly complete Perl parser. \nAs your example shows:\n\n >\n >  say :to(END);\n >  =begin POD\n >  blah blah blah\n >  =end POD\n >  END\n >\n > If I understand matters correctly, the \"POD code\" in the above example\n > isn't POD code at all, but rather the content of a multi-line quote.\n > So extending the POD parser's awareness of Perl syntax to handle block\n > comments as well isn't much of a stretch.\n\nIf *I* understand matters correctly, Perl 6 will see that as identical to\n\n     say :to(END);\n     END\n\n*because* we want the POD parser be simple, rather than an \nalmost-complete parser of Perl. After all, there are many ways to \"hide\" \nPOD-like text in Perl.\n\nYou might think, \"Well, how hard is it to look for \":to(XYZ)\" followed \nby a line containing XYZ?\" Going beyond the fact that there are actually \nquite a few ways to spell \":to(XYZ)\", Perl code that generates Perl code \nwill trip you up:\n\n     say \"say :to(END);\";\n     say \"Here's my text\";\n     say \"=begin comment\";\n     say \"My auto-generated code even contains comments on it's strings!\"\n     say \"=end\";\n     say \"More of my text\";\n     say \"END\";\n\nYou have to parse all string syntaxes to avoid that pitfall. And once \nyou take care of that issue, you have to handle the problem of parsing \nPerl code that's trying to parse Perl code, looking for say statements \nthat use here-doc syntax containing POD comments:\n\n     my $checker = regex {\nsay \\s* \\: to \\( \\w+ \\) ; $ # match a say with here-doc\n(\n    .* $\n)* # match any lines that don't start with $1\n=for comment   # match the beginning of an embedded POD comment\n     }\n\n(No, I don't approve of the indentation of that example. But should your \nprogram fail just because somebody doesn't follow good style?)\n\nAnd once you've extended the parser to handle *that* case, Finagle's Law \ndictates that someone will put the above code sample into a Perl string \nliteral!\n\nIn summary:\n\nAs your example pointed out, the POD parser would have to handle all the \nvarious string syntaxes of Perl 6. Then, there is also regular \nexpression syntax that has to be covered. And who knows what else I'm \noverlooking?\n\nCompare that with the simplicity that $larry & $damian are promoting.\n\nYes, it'll be a pain to get the effect you *wanted* from\n >  say :to(END);\n >  =begin POD\n >  blah blah blah\n >  =end POD\n >  END\nbut the cost to the POD parser is just not worth it.\n\n=thom\n-----\nFinagle's Law: the perversity of the Universe tends towards a maximum.\n\n"}