{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11177: Add hive operations. in\n\tfile:///home/jelmer/bzr.samba/4.0-regwrite/", "body": "At file:///home/jelmer/bzr.samba/4.0-regwrite/\n\n------------------------------------------------------------\nrevno: 11177\nrevision-id: jelmer@samba.org-20070423140539-m81ruspga5mhbmdm\nparent: jelmer@samba.org-20070418170502-zvjkpzrur94nevvb\ncommitter: Jelmer Vernooij \nbranch nick: 4.0-regwrite\ntimestamp: Mon 2007-04-23 16:05:39 +0200\nmessage:\n  Add hive operations.\nadded:\n  source/lib/registry/hive.h     hive.h-20070423140448-w1nvzs8d2qxvyswz-1\nmodified:\n  source/lib/registry/config.mk  svn-v2:851@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fconfig.mk\n  source/lib/registry/registry.h svn-v2:10026@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2fregistry.h\n=== added file 'source/lib/registry/hive.h'\n--- a/source/lib/registry/hive.h\t1970-01-01 00:00:00 +0000\n+++ b/source/lib/registry/hive.h\t2007-04-23 14:05:39 +0000\n@@ -0,0 +1,59 @@\n+/* \n+   Unix SMB/CIFS implementation.\n+   Registry hive interface\n+   Copyright (C) Jelmer Vernooij\t\t\t\t\t  2003-2007.\n+   \n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+   \n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+*/\n+\n+#ifndef __REGISTRY_HIVE_H__\n+#define __REGISTRY_HIVE_H__\n+\n+struct hive_context {\n+\tconst struct hive_operations *ops;\n+};\n+\n+struct hive_key {\n+\tstruct hive_context *context;\n+\n+};\n+\n+struct hive_operations {\n+\tconst char *name;\t\n+\n+\tWERROR (*open_root) (struct hive_context *hive, struct hive_key **key);\n+\t\n+\tWERROR (*enum_key) (struct hive_key *key, int idx, struct hive_key **key);\n+\tWERROR (*get_key_by_name) (struct hive_key *key, const char *name, struct hive_key **key);\n+\t\n+\tWERROR (*add_key) (struct hive_key *key, const char *name, uint32_t access_mask, \n+\t\t\t\t\t   struct security_descriptor *desc, struct hive_key **key);\n+\tWERROR (*del_key) (struct hive_key *key, const char *name);\n+\tWERROR (*flush_key) (struct hive_key *key);\n+\n+\t/* Value */\n+\tWERROR (*enum_value) (struct hive_key *key, int idx, uint32_t *type, DATA_BLOB *data);\n+\tWERROR (*get_value_by_name) (struct hive_key *key, const char *name, uint32_t *type, \n+\t\t\t\t\t\t\t\t DATA_BLOB *data);\n+\tWERROR (*set_value) (struct hive_key *key, const char *name, uint32_t type, DATA_BLOB data);\n+\n+\t/* Security Descriptors */\n+\tWERROR (*set_sec_desc) (struct hive_key *key, struct security_descriptor *desc);\n+\tWERROR (*set_get_desc) (struct hive_key *key, struct security_descriptor **desc);\n+};\n+\n+struct hive_context *hive_load(TALLOC_CTX *ctx, const char *filename);\n+\n+#endif /* __REGISTRY_HIVE_H__ */\n\n=== modified file 'source/lib/registry/config.mk'\n--- a/source/lib/registry/config.mk\t2007-04-18 17:05:02 +0000\n+++ b/source/lib/registry/config.mk\t2007-04-23 14:05:39 +0000\n@@ -33,13 +33,8 @@\n \t\tdir.o \\\n \t\trpc.o\n PUBLIC_DEPENDENCIES = \\\n-<<<<<<< TREE\n \t\tLIBSAMBA-UTIL CHARSET TDR_REGF ldb \\\n \t\tRPC_NDR_WINREG\n-PRIVATE_PROTO_HEADER = registry_proto.h\n-=======\n-\t\tLIBSAMBA-UTIL CHARSET\n->>>>>>> MERGE-SOURCE\n PUBLIC_HEADERS = registry.h\n # End MODULE registry_ldb\n ################################################\n\n=== modified file 'source/lib/registry/registry.h'\n--- a/source/lib/registry/registry.h\t2007-04-18 17:05:02 +0000\n+++ b/source/lib/registry/registry.h\t2007-04-23 14:05:39 +0000\n@@ -57,6 +57,10 @@\n \n #define REGISTRY_INTERFACE_VERSION 1\n \n+struct reg_key_path {\n+\tconst char **elements;\n+};\n+\n struct reg_key_operations;\n \n /* structure to store the registry handles */\n@@ -82,55 +86,6 @@\n typedef void (*reg_key_notification_function) (void);\n typedef void (*reg_value_notification_function) (void);\n \n-/* \n- * Container for function pointers to enumeration routines\n- * for virtual registry view \n- *\n- * Backends provide just one hive (example: regf, creg)\n- * \n- * Backends should always do case-insensitive compares \n- * (everything is case-insensitive but case-preserving, \n- * just like the FS)\n- *\n- * There is no save function as all operations are expected to \n- * be atomic.\n- */ \n-\n-struct reg_key_operations {\n-\tconst char *name;\n-\n-\t/* Or this function or get_subkey_by_name() */\n-\tWERROR (*open_key) (TALLOC_CTX *, const struct registry_key *, const char *name, struct registry_key **);\n-\n-\tWERROR (*num_subkeys) (const struct registry_key *, uint32_t *count);\n-\tWERROR (*num_values) (const struct registry_key *, uint32_t *count);\n-\tWERROR (*get_subkey_by_index) (TALLOC_CTX *, const struct registry_key *, int idx, struct registry_key **);\n-\n-\t/* Can not contain more than one level */\n-\tWERROR (*get_subkey_by_name) (TALLOC_CTX *, const struct registry_key *, const char *name, struct registry_key **);\n-\tWERROR (*get_value_by_index) (TALLOC_CTX *, const struct registry_key *, int idx, struct registry_value **);\n-\n-\t/* Can not contain more than one level */\n-\tWERROR (*get_value_by_name) (TALLOC_CTX *, const struct registry_key *, const char *name, struct registry_value **);\n-\n-\t/* Security control */\n-\tWERROR (*key_get_sec_desc) (TALLOC_CTX *, const struct registry_key *, struct security_descriptor **);\n-\tWERROR (*key_set_sec_desc) (const struct registry_key *, const struct security_descriptor *);\n-\n-\t/* Notification */\n-\tWERROR (*request_key_change_notify) (const struct registry_key *, reg_key_notification_function);\n-\tWERROR (*request_value_change_notify) (const struct registry_value *, reg_value_notification_function);\n-\n-\t/* Key management */\n-\tWERROR (*add_key)(TALLOC_CTX *, const struct registry_key *, const char *name, uint32_t access_mask, struct security_descriptor *, struct registry_key **);\n-\tWERROR (*del_key)(const struct registry_key *, const char *name);\n-\tWERROR (*flush_key) (const struct registry_key *);\n-\n-\t/* Value management */\n-\tWERROR (*set_value)(const struct registry_key *, const char *name, uint32_t type, const DATA_BLOB data); \n-\tWERROR (*del_value)(const struct registry_key *, const char *valname);\n-};\n-\n struct cli_credentials;\n \n /* Handle to a full registry\n@@ -227,6 +182,13 @@\n WERROR reg_key_del_abs(struct registry_context *ctx, const char *path);\n WERROR reg_key_add_abs(TALLOC_CTX *mem_ctx, struct registry_context *ctx, const char *path, uint32_t access_mask, struct security_descriptor *sec_desc, struct registry_key **result);\n \n+struct reg_key_path {\n+\tuint32_t predefined_key;\n+\tconst char **elements;\n+};\n+\n+WERROR reg_mount_hive(struct registry_context *ctx, struct reg_key_path *path, struct hive_context *hive);\n+WERROR reg_unmount_hive(struct registry_context *ctx, struct hive_context *hive);\n \n /* Patch files */\n \n\n"}