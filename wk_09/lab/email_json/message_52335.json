{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Smylers <Smylers@stripey.com>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Mark Overmeer writes:\n\n> * Smylers (Smylers@stripey.com) [070616 09:09]:\n> > \n> > You're concerned that an aspect of Perl 6 might have too much\n> > freedom?  Isn't Perl all about giving users freedom to choose their\n> > own way of doing something?\n> \n> Why treat documentation as a second-class citizen all the time?\n\nI'm not suggesting we do; it's precisely _because_ Perl provides so much\nfreedom in things like coding style that I think it would be bizarre to\nbe so restrictive in the documenation format.  Documentation should be a\nfirst-class citizen, and therefore have as much freedom as coding.\n\n> Why have a standard syntax for regexes, and not for docs?\n\nWe have a standard _syntax_ for docs; what you are additionally\nproposing are standard _semantics_, which is something regeps (and other\nareas of Perl) don't enforce -- they just provide the tools for\nprogrammers to use them as they wish.\n\n> Aren't you glad that at last we get a standard for OO programming and\n> named parameters?\n\nYes.  But I'm also glad that these have both carefully been done in ways\nwhich don't enforce them, leaving programmers free to do things in other\nways.\n\n> The boundary between freedom and anacharchy is faint.\n\nIndeed.  And I'd much rather we err on the side of anarchy.  Many times\nhave I been frustrated by the limits of some software or programming\nlanguage.  Far better to allow somebody enough freedom to create a poor\npiece of software (since that's going to be possible anyway) than to go\ntoo far in t'other direction and inadvertently prevent somebody in the\nfuture from doing something really clever that none of us have yet\nthought of.\n\n> > Yes.  But in reality many people will follow what others do, or look\n> > to follow best practices.  With Perl 5 you have complete freedom as\n> > to the names of C<=head1> sections in the Pod for modules, yet in\n> > browsing Cpan it's clear that there are conventions and many people\n> > use the same headings.  So not mandating a convention isn't much of\n> > a problem.\n> \n> Well, the you are talking about the top three headers, the most.\n\nNot true; there are several more which are shared between Cpan\ndistributions (by different authors).\n\n> And those have a good example in standard UNIX manual-pages.  So:\n> there is a definitions for them, which most people have seen.\n\nI am sceptical of your claim that most Cpan authors have seen any\nofficial definitions of sections in Unix manual pages.\n\n> > Do you really think that people can now, before Perl 6 has gained\n> > anything approaching the usage we expect, make policy for how things\n> > should be documented, such that that policy will be the best\n> > possible way of documenting everything written in Perl 6, for ever?\n> > Or even a good way?\n> \n> There is no need to think that a documentation syntax develops\n> differently than a programming language.\n\nI agree.  And programming languages develop in hard-to-predict ways,\nwhich is why Larry is putting lots of flexibility for things to be\nredefined into Perl 6, so it can grow and adapt in line with future\ndevelopments.  It would be good if Pod can keep up.\n\n> So when Perl is developing, POD can develop in parallel.\n\nExactly!\n\n> > That strikes me as incredibly shortsighted, verging on arrogance by\n> > whoever comes up with the rules, and doomed to failure.\n> \n> Sorry?  Not only you insult me,\n\nApologies, that wasn't supposed to be an insult.  Note that it isn't\nthat I'm objecting to your rules (nor any particular rules), nor\ndoubting your abilities to come up with good rules; you'd be one of the\nbest people for coming up with some standards.  I just don't believe\nthat _anybody_ can come up with rules that won't be bettered at some\npoint in the future.\n\n> but you also ignore all these other languages which do have a nice and\n> standard way of documenting.  Insignificant languages, like Java,\n> which we tend to ignore.\n\nI've encountered Javadoc, and I really dislike it[*0].  The fact that a\nstandard exists does not make it a good one.\n\nSmylers\n\n  [*0]  Consider a function C.  I'd document it along\n  the lines of:\n\n    valid_postcode\n\n      Returns whether the specified postcode is valid, for example:\n\n        if (valid_postcode $postcode) {\n\n  Javadoc-style systems seem to insist on documentation like:\n\n    valid_postcode\n      Description: Returns whether the specified postcode is valid.\n      Parameters:\n        $postcode: (string) The postcode to test for validity\n      Returns: (boolean) Whether $postcode is valid\n      Exceptions: none\n      Side Effects: none\n\n  Lots of structure and consistency, but in practical terms no\n  additional information compared to my informal doc -- and the\n  verbosity and repetition actually make it harder to spot the\n  information you want.\n\n"}