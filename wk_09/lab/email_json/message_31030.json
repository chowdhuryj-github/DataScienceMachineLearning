{"category": "ham", "to_address": "jerry gay <jerry.gay@gmail.com>", "from_address": "Nicholas Clark <nick@ccl4.org>", "subject": "Re: FoTW: src/debug.c -- function and macro do the same thing", "body": "On Wed, May 16, 2007 at 08:45:04AM -0700, jerry gay wrote:\n> here's a macro to move to the next argument (kjs mentioned in an\n> earlier thread that this isn't a descriptive name)\n> \n>  /* na(c) [Next Argument (Char pointer)]\n>   *\n>   * Moves the pointer to the next argument in the user input.\n>   */\n>  #define na(c) { \\\n>      while (*c && !isspace((int) *c)) \\\n>          c++; \\\n>      while (*c && isspace((int) *c)) \\\n>          c++; }\n\nThat ought to be written (at least):\n\n  #define na(c) { \\\n      while (*c && !isspace((int) *c)) \\\n          c++; \\\n      while (isspace((int) *c)) \\\n          c++; }\n\nbecause isspace('\\0') is false\n\n\nAnd really, given that macros are text substitutions, standard practice is\nto wrap all arguments in parentheses, to avoid bugs related to precedence\nwhen something more complex is passed in. So, in general, I'd be happier with:\n\n  #define na(c) { \\\n      while (*(c) && !isspace((int) *(c))) \\\n          (c)++; \\\n      while (isspace((int) *(c))) \\\n          (c)++; }\n\nNicholas Clark\n\n"}