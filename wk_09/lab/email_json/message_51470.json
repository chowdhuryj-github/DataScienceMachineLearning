{"category": "ham", "to_address": "oryann9 <oryann9@yahoo.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Simple Encryption - what function/module could I use?", "body": "On 6/20/07, oryann9  wrote:\nsnip\n> > > my $plaintext = do { local $/ = undef; <> };\n> > > my $pad = \"X\" x length $plaintext;\n> > >\n> > > my $encryptedtext = $plaintext      ^ $pad;\nsnip\n> I like it to, but dont understand how it is\n> encrypting.\n> Will you kindly expalin?\n\n$plaintext is the contents of the file(s) passed in on the commandline\n(or stdin if none are passed in).\n\n$pad is the character X repeated until there are as many Xs as\ncharacters in $plaintext\n\n$encryptedtext is the result of xor'ing $plaintext with pad.\n\nxor has the following truth table\nA B R\n0 0 0\n0 1 1\n1 0 1\n1 1 0\n\nso if I have 01101100 and I xor it with 01110001 I get 00011101.  This\nis the \"encrypted value\".  If I xor the result 00011101 with the key\n01110001 I get the original value back.\n\n01101100 plaintext\n01110001 key\n00011101 \"encrypted\"\n\n00011101 \"encrypted\"\n01110001 key\n01101100 plaintext\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}