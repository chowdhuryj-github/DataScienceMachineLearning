{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Author: larry\nDate: Wed Jun 13 13:55:24 2007\nNew Revision: 14421\n\nModified:\n   doc/trunk/design/syn/S02.pod\n\nLog:\nBlock comments should not hide POD, pointed out by TheDamian++\n\n\nModified: doc/trunk/design/syn/S02.pod\n==============================================================================\n--- doc/trunk/design/syn/S02.pod\t(original)\n+++ doc/trunk/design/syn/S02.pod\tWed Jun 13 13:55:24 2007\n@@ -14,7 +14,7 @@\n   Date: 10 Aug 2004\n   Last Modified: 13 Jun 2007\n   Number: 2\n-  Version: 111\n+  Version: 112\n \n This document summarizes Apocalypse 2, which covers small-scale\n lexical items and typological issues.  (These Synopses also contain\n@@ -169,10 +169,11 @@\n \n The entire final line counts as part of the comment.  It does\n not matter whether the intervening lines start with C<#> or not.\n-Block comments may be nested within other block comments (with\n-the same or differing brackets) but will ignore any other comment\n-mechanism including POD, so this mechanism may be used to hide POD\n-even from the pod parser, along with any associated code.  The parser\n+Block comments may be nested within other block comments (with the\n+same or differing brackets).  POD comments may also be nested within\n+block comments.  (These are still visible to the POD parser; if you\n+wish to comment out a block of mixed POD and Perl 6 code, either use a\n+POD comment around it all, or prefix every line with C<#>.)  The parser\n must report mismatched openers or closers to prevent, for example,\n unwitting use of bare C<}> as a closer for an opening C<#{>.\n \n@@ -192,11 +193,6 @@\n in the face of strings containing bracket characters, and the probability\n of such bracket skew increases with the length of the commented code.\n \n-The POD parser must also recognize these comments in order to ignore\n-them.  For instance, it could treat C<#[[> and C<#]]> as a shorthand for\n-C<=begin comment_2square> and C<=end comment_2square>.  (The C<2> indicates\n-degree of repetition, as described below.)\n-\n =item *\n \n For all quoting constructs that use user-selected brackets, you can open\n\n"}