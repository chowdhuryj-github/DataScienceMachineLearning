{"category": "ham", "to_address": "\"Deepayan Sarkar\" <deepayan.sarkar@gmail.com>", "from_address": "\"hadley wickham\" <h.wickham@gmail.com>", "subject": "Re: [R] model.frame: how does one use it?", "body": "On 6/15/07, Deepayan Sarkar  wrote:\n> On 6/15/07, Dirk Eddelbuettel  wrote:\n> >\n> > Philipp Benner reported a Debian bug report against r-cran-rpart aka rpart.\n> > In short, the issue has to do with how rpart evaluates a formula and\n> > supporting arguments, in particular 'weights'.\n> >\n> > A simple contrived example is\n> >\n> > -----------------------------------------------------------------------------\n> > library(rpart)\n> >\n> > ## using data from help(rpart), set up simple example\n> > myformula <- formula(Kyphosis ~ Age + Number + Start)\n> > mydata <- kyphosis\n> > myweight <- abs(rnorm(nrow(mydata)))\n> >\n> > goodFunction <- function(mydata, myformula, myweight) {\n> >   hyp <- rpart(myformula, data=mydata, weights=myweight, method=\"class\")\n> >   prev <- hyp\n> > }\n> > goodFunction(mydata, myformula, myweight)\n> > cat(\"Ok\\n\")\n> >\n> > ## now remove myweight and try to compute it inside a function\n> > rm(myweight)\n> >\n> > badFunction <- function(mydata, myformula) {\n> >   myweight <- abs(rnorm(nrow(mydata)))\n> >   mf <- model.frame(myformula, mydata, myweight)\n> >   print(head(df))\n> >   hyp <- rpart(myformula,\n> >                data=mf,\n> >                weights=myweight,\n> >                method=\"class\")\n> >   prev <- hyp\n> > }\n> > badFunction(mydata, myformula)\n> > cat(\"Done\\n\")\n> > -----------------------------------------------------------------------------\n> >\n> > Here goodFunction works, but only because myweight (with useless random\n> > weights, but that is not the point here) is found from the calling\n> > environment.\n> >\n> > badFunction fails after we remove myweight from there:\n> >\n> > :~> cat /tmp/philipp.R | R --slave\n> > Ok\n> > Error in eval(expr, envir, enclos) : object \"myweight\" not found\n> > Execution halted\n> > :~>\n> >\n> > As I was able to replicate it, I reported this to the package maintainer.  It\n> > turns out that seemingly all is well as this is supposed to work this way,\n> > and I got a friendly pointer to study model.frame and its help page.\n> >\n> > Now I am stuck as I can't make sense of model.frame -- see badFunction\n> > above. I would greatly appreciate any help in making rpart work with a local\n> > argument weights so that I can tell Philipp that there is no bug.  :)\n>\n> I don't know if ?model.frame is the best place page to look. There's a\n> more detailed description at\n>\n> http://developer.r-project.org/nonstandard-eval.pdf\n>\n> but here are the non-standard evaluation rules as I understand them:\n> given a name in either (1) the formula or (2) ``special'' arguments like\n> 'weights' in this case, or 'subset', try to find the name\n>\n> 1. in 'data'\n> 2. failing that, in environment(formula)\n> 3. failing that, in the enclosing environment, and so on.\n>\n> By 'name', I mean a symbol, such as 'Age' or 'myweight'.  So\n> basically, everything is as you would expect if the name is visible in\n> data, but if not, the search starts in the environment of the formula,\n> not the environment where the function call is being made (which is\n> the standard evaulation behaviour).  This is a feature, not a bug\n> (things would be a lot more confusing if it were the other way round).\n\nCould you give an example?  It's always seemed confusing to me and I\ndon't see why looking in the environment of the formula helps.\n\nHadley\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}