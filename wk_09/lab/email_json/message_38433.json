{"category": "ham", "to_address": "\"Mark J. Reed\" <markjreed@mail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: x, xx, and negative counts", "body": "On 5/29/07, Mark J. Reed  wrote:\n>  My expectation before reading the delta was that negative counts\n> would do a reversal:\n>\n> \"123\" x -1 = \"321\"\n>\n> ('a', 'b', 'c') xx -3 = ('c', 'b', 'a', 'c', 'b', 'a', 'c', 'b', 'a');\n>\n> I don't know why I think that makes sense, but it was honestly my\n> first thought.  Does it make sense to anyone else?  Is there a\n> compelling reason I'm missing for having negative values behave as if\n> they were zero rather than adding some other potentially useful\n> functionality?\nsnip\n\nIn Perl 5 I commonly say things like\n\nsub zeropad (\n    my ($len, $s) = @_;\n    my $slen = length $s;\n    carp \"the string $s is longer than the specified length $len\" if\n$slen > $len;\n    return = 0 x  ($len - length($str)) . $str;\n);\n\nWhich is roughly equivalent to doing a sprintf with the format \"%0${len}d\".\n\n"}