{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "gd@samba.org", "subject": "svn commit: samba r22800 - in branches: SAMBA_3_0/source/include\n\tSAMBA_3_0/source/libads SAMBA_3_0/source/libgpo\n\tSAMBA_3_0_26/source/include SAMBA_3_0_26/source/libads\n\tSAMBA_3_0_26/source/libgpo", "body": "Author: gd\nDate: 2007-05-11 13:33:37 +0000 (Fri, 11 May 2007)\nNew Revision: 22800\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22800\n\nLog:\nAdd GPO_SID_TOKEN and an LDAP function to get tokensids from the tokenGroup attribute.\n\nGuenther\n\nModified:\n   branches/SAMBA_3_0/source/include/ads_protos.h\n   branches/SAMBA_3_0/source/include/gpo.h\n   branches/SAMBA_3_0/source/libads/ldap.c\n   branches/SAMBA_3_0/source/libgpo/gpo_ldap.c\n   branches/SAMBA_3_0_26/source/include/ads_protos.h\n   branches/SAMBA_3_0_26/source/include/gpo.h\n   branches/SAMBA_3_0_26/source/libads/ldap.c\n   branches/SAMBA_3_0_26/source/libgpo/gpo_ldap.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/include/ads_protos.h\n===================================================================\n--- branches/SAMBA_3_0/source/include/ads_protos.h\t2007-05-11 13:19:49 UTC (rev 22799)\n+++ branches/SAMBA_3_0/source/include/ads_protos.h\t2007-05-11 13:33:37 UTC (rev 22800)\n@@ -110,5 +110,10 @@\n \t\t\t\t       int scope, const char *expr,\n \t\t\t\t       const char **attrs, uint32 sd_flags, \n \t\t\t\t       LDAPMessage **res);\n-\n-\n+ADS_STATUS ads_get_tokensids(ADS_STRUCT *ads,\n+\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t      const char *dn,\n+\t\t\t      DOM_SID *user_sid,\n+\t\t\t      DOM_SID *primary_group_sid,\n+\t\t\t      DOM_SID **sids,\n+\t\t\t      size_t *num_sids);\n\nModified: branches/SAMBA_3_0/source/include/gpo.h\n===================================================================\n--- branches/SAMBA_3_0/source/include/gpo.h\t2007-05-11 13:19:49 UTC (rev 22799)\n+++ branches/SAMBA_3_0/source/include/gpo.h\t2007-05-11 13:33:37 UTC (rev 22800)\n@@ -94,3 +94,10 @@\n \n #define GPO_CACHE_DIR \"gpo_cache\"\n #define GPT_INI \"GPT.INI\"\n+\n+struct GPO_SID_TOKEN {\n+\tDOM_SID object_sid;\n+\tDOM_SID primary_group_sid;\n+\tsize_t num_token_sids;\n+\tDOM_SID *token_sids;\n+};\n\nModified: branches/SAMBA_3_0/source/libads/ldap.c\n===================================================================\n--- branches/SAMBA_3_0/source/libads/ldap.c\t2007-05-11 13:19:49 UTC (rev 22799)\n+++ branches/SAMBA_3_0/source/libads/ldap.c\t2007-05-11 13:33:37 UTC (rev 22800)\n@@ -3196,4 +3196,108 @@\n \treturn status;\n }\n \n+/**\n+ * pull all token-sids from an LDAP dn\n+ * @param ads connection to ads server\n+ * @param mem_ctx TALLOC_CTX for allocating sid array\n+ * @param dn of LDAP object\n+ * @param user_sid pointer to DOM_SID (objectSid)\n+ * @param primary_group_sid pointer to DOM_SID (self composed)\n+ * @param sids pointer to sid array to allocate\n+ * @param num_sids counter of SIDs pulled\n+ * @return status of token query\n+ **/\n+ ADS_STATUS ads_get_tokensids(ADS_STRUCT *ads,\n+\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t      const char *dn,\n+\t\t\t      DOM_SID *user_sid,\n+\t\t\t      DOM_SID *primary_group_sid,\n+\t\t\t      DOM_SID **sids,\n+\t\t\t      size_t *num_sids)\n+{\n+\tADS_STATUS status;\n+\tLDAPMessage *res = NULL;\n+\tint count = 0;\n+\tsize_t tmp_num_sids;\n+\tDOM_SID *tmp_sids;\n+\tDOM_SID tmp_user_sid;\n+\tDOM_SID tmp_primary_group_sid;\n+\tuint32 pgid;\n+\tconst char *attrs[] = {\n+\t\t\"objectSid\",\n+\t\t\"tokenGroups\",\n+\t\t\"primaryGroupID\",\n+\t\tNULL\n+\t};\n+\n+\tstatus = ads_search_retry_dn(ads, &res, dn, attrs);\n+\tif (!ADS_ERR_OK(status)) {\n+\t\treturn status;\n+\t}\n+\n+\tcount = ads_count_replies(ads, res);\n+\tif (count != 1) {\n+\t\tads_msgfree(ads, res);\n+\t\treturn ADS_ERROR_LDAP(LDAP_NO_SUCH_OBJECT);\n+\t}\n+\n+\tif (!ads_pull_sid(ads, res, \"objectSid\", &tmp_user_sid)) {\n+\t\tads_msgfree(ads, res);\n+\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t}\n+\n+\tif (!ads_pull_uint32(ads, res, \"primaryGroupID\", &pgid)) {\n+\t\tads_msgfree(ads, res);\n+\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t}\n+\n+\t{\n+\t\t/* hack to compose the primary group sid without knowing the\n+\t\t * domsid */\n+\n+\t\tDOM_SID domsid;\n+\t\tuint32 dummy_rid;\n+\n+\t\tsid_copy(&domsid, &tmp_user_sid);\n+\n+\t\tif (!sid_split_rid(&domsid, &dummy_rid)) {\n+\t\t\tads_msgfree(ads, res);\n+\t\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t\t}\n+\n+\t\tif (!sid_compose(&tmp_primary_group_sid, &domsid, pgid)) {\n+\t\t\tads_msgfree(ads, res);\n+\t\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t\t}\n+\t}\n+\n+\ttmp_num_sids = ads_pull_sids(ads, mem_ctx, res, \"tokenGroups\", &tmp_sids);\n+\n+\tif (tmp_num_sids == 0 || !tmp_sids) {\n+\t\tads_msgfree(ads, res);\n+\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t}\n+\n+\tif (num_sids) {\n+\t\t*num_sids = tmp_num_sids;\n+\t}\n+\n+\tif (sids) {\n+\t\t*sids = tmp_sids;\n+\t}\n+\n+\tif (user_sid) {\n+\t\t*user_sid = tmp_user_sid;\n+\t}\n+\n+\tif (primary_group_sid) {\n+\t\t*primary_group_sid = tmp_primary_group_sid;\n+\t}\n+\n+\tDEBUG(10,(\"ads_get_tokensids: returned %d sids\\n\", (int)tmp_num_sids + 2));\n+\n+\tads_msgfree(ads, res);\n+\treturn ADS_ERROR_LDAP(LDAP_SUCCESS);\n+}\n+\n #endif\n\nModified: branches/SAMBA_3_0/source/libgpo/gpo_ldap.c\n===================================================================\n--- branches/SAMBA_3_0/source/libgpo/gpo_ldap.c\t2007-05-11 13:19:49 UTC (rev 22799)\n+++ branches/SAMBA_3_0/source/libgpo/gpo_ldap.c\t2007-05-11 13:33:37 UTC (rev 22800)\n@@ -571,6 +571,68 @@\n }\n \n /****************************************************************\n+****************************************************************/\n+\n+ADS_STATUS ads_get_gpo_sid_token(ADS_STRUCT *ads,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tconst char *dn,\n+\t\t\t\tstruct GPO_SID_TOKEN **token)\n+{\n+\tADS_STATUS status;\n+\tDOM_SID object_sid;\n+\tDOM_SID primary_group_sid;\n+\tDOM_SID *ad_token_sids;\n+\tsize_t num_ad_token_sids = 0;\n+\tDOM_SID *token_sids;\n+\tsize_t num_token_sids = 0;\n+\tstruct GPO_SID_TOKEN *new_token = NULL;\n+\tint i;\n+\n+\tnew_token = TALLOC_ZERO_P(mem_ctx, struct GPO_SID_TOKEN);\n+\tADS_ERROR_HAVE_NO_MEMORY(new_token);\n+\n+\tstatus = ads_get_tokensids(ads, mem_ctx, dn, \n+\t\t\t\t   &object_sid, &primary_group_sid,\n+\t\t\t\t   &ad_token_sids, &num_ad_token_sids);\n+\tif (!ADS_ERR_OK(status)) {\n+\t\treturn status;\n+\t}\n+\n+\tnew_token->object_sid = object_sid;\n+\tnew_token->primary_group_sid = primary_group_sid;\n+\n+\ttoken_sids = TALLOC_ARRAY(mem_ctx, DOM_SID, 1);\n+\tADS_ERROR_HAVE_NO_MEMORY(token_sids);\n+\n+\tfor (i = 0; i < num_ad_token_sids; i++) {\n+\t\t\n+\t\tif (sid_check_is_in_builtin(&ad_token_sids[i])) {\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (!add_sid_to_array_unique(mem_ctx, &ad_token_sids[i], \n+\t\t\t\t\t     &token_sids, &num_token_sids)) {\n+\t\t\treturn ADS_ERROR(LDAP_NO_MEMORY);\n+\t\t}\n+\t}\n+\n+\t/* Add S-1-5-11 to token */\n+\tif (!add_sid_to_array_unique(mem_ctx, &global_sid_Authenticated_Users,\n+\t\t\t\t     &token_sids, &num_token_sids)) {\n+\t\treturn ADS_ERROR(LDAP_NO_MEMORY);\n+\t}\n+\n+\n+\tnew_token->token_sids = token_sids;\n+\tnew_token->num_token_sids = num_token_sids;\n+\n+\t*token = new_token;\n+\n+\treturn ADS_ERROR_LDAP(LDAP_SUCCESS);\n+}\n+\n+\n+/****************************************************************\n  get the full list of GROUP_POLICY_OBJECTs for a given dn\n ****************************************************************/\n \n\nModified: branches/SAMBA_3_0_26/source/include/ads_protos.h\n===================================================================\n--- branches/SAMBA_3_0_26/source/include/ads_protos.h\t2007-05-11 13:19:49 UTC (rev 22799)\n+++ branches/SAMBA_3_0_26/source/include/ads_protos.h\t2007-05-11 13:33:37 UTC (rev 22800)\n@@ -101,5 +101,10 @@\n \t\t\t\t       int scope, const char *expr,\n \t\t\t\t       const char **attrs, uint32 sd_flags, \n \t\t\t\t       LDAPMessage **res);\n-\n-\n+ADS_STATUS ads_get_tokensids(ADS_STRUCT *ads,\n+\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t      const char *dn,\n+\t\t\t      DOM_SID *user_sid,\n+\t\t\t      DOM_SID *primary_group_sid,\n+\t\t\t      DOM_SID **sids,\n+\t\t\t      size_t *num_sids);\n\nModified: branches/SAMBA_3_0_26/source/include/gpo.h\n===================================================================\n--- branches/SAMBA_3_0_26/source/include/gpo.h\t2007-05-11 13:19:49 UTC (rev 22799)\n+++ branches/SAMBA_3_0_26/source/include/gpo.h\t2007-05-11 13:33:37 UTC (rev 22800)\n@@ -94,3 +94,10 @@\n \n #define GPO_CACHE_DIR \"gpo_cache\"\n #define GPT_INI \"GPT.INI\"\n+\n+struct GPO_SID_TOKEN {\n+\tDOM_SID object_sid;\n+\tDOM_SID primary_group_sid;\n+\tsize_t num_token_sids;\n+\tDOM_SID *token_sids;\n+};\n\nModified: branches/SAMBA_3_0_26/source/libads/ldap.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libads/ldap.c\t2007-05-11 13:19:49 UTC (rev 22799)\n+++ branches/SAMBA_3_0_26/source/libads/ldap.c\t2007-05-11 13:33:37 UTC (rev 22800)\n@@ -3162,4 +3162,108 @@\n \treturn status;\n }\n \n+/**\n+ * pull all token-sids from an LDAP dn\n+ * @param ads connection to ads server\n+ * @param mem_ctx TALLOC_CTX for allocating sid array\n+ * @param dn of LDAP object\n+ * @param user_sid pointer to DOM_SID (objectSid)\n+ * @param primary_group_sid pointer to DOM_SID (self composed)\n+ * @param sids pointer to sid array to allocate\n+ * @param num_sids counter of SIDs pulled\n+ * @return status of token query\n+ **/\n+ ADS_STATUS ads_get_tokensids(ADS_STRUCT *ads,\n+\t\t\t      TALLOC_CTX *mem_ctx,\n+\t\t\t      const char *dn,\n+\t\t\t      DOM_SID *user_sid,\n+\t\t\t      DOM_SID *primary_group_sid,\n+\t\t\t      DOM_SID **sids,\n+\t\t\t      size_t *num_sids)\n+{\n+\tADS_STATUS status;\n+\tLDAPMessage *res = NULL;\n+\tint count = 0;\n+\tsize_t tmp_num_sids;\n+\tDOM_SID *tmp_sids;\n+\tDOM_SID tmp_user_sid;\n+\tDOM_SID tmp_primary_group_sid;\n+\tuint32 pgid;\n+\tconst char *attrs[] = {\n+\t\t\"objectSid\",\n+\t\t\"tokenGroups\",\n+\t\t\"primaryGroupID\",\n+\t\tNULL\n+\t};\n+\n+\tstatus = ads_search_retry_dn(ads, &res, dn, attrs);\n+\tif (!ADS_ERR_OK(status)) {\n+\t\treturn status;\n+\t}\n+\n+\tcount = ads_count_replies(ads, res);\n+\tif (count != 1) {\n+\t\tads_msgfree(ads, res);\n+\t\treturn ADS_ERROR_LDAP(LDAP_NO_SUCH_OBJECT);\n+\t}\n+\n+\tif (!ads_pull_sid(ads, res, \"objectSid\", &tmp_user_sid)) {\n+\t\tads_msgfree(ads, res);\n+\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t}\n+\n+\tif (!ads_pull_uint32(ads, res, \"primaryGroupID\", &pgid)) {\n+\t\tads_msgfree(ads, res);\n+\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t}\n+\n+\t{\n+\t\t/* hack to compose the primary group sid without knowing the\n+\t\t * domsid */\n+\n+\t\tDOM_SID domsid;\n+\t\tuint32 dummy_rid;\n+\n+\t\tsid_copy(&domsid, &tmp_user_sid);\n+\n+\t\tif (!sid_split_rid(&domsid, &dummy_rid)) {\n+\t\t\tads_msgfree(ads, res);\n+\t\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t\t}\n+\n+\t\tif (!sid_compose(&tmp_primary_group_sid, &domsid, pgid)) {\n+\t\t\tads_msgfree(ads, res);\n+\t\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t\t}\n+\t}\n+\n+\ttmp_num_sids = ads_pull_sids(ads, mem_ctx, res, \"tokenGroups\", &tmp_sids);\n+\n+\tif (tmp_num_sids == 0 || !tmp_sids) {\n+\t\tads_msgfree(ads, res);\n+\t\treturn ADS_ERROR_LDAP(LDAP_NO_MEMORY);\n+\t}\n+\n+\tif (num_sids) {\n+\t\t*num_sids = tmp_num_sids;\n+\t}\n+\n+\tif (sids) {\n+\t\t*sids = tmp_sids;\n+\t}\n+\n+\tif (user_sid) {\n+\t\t*user_sid = tmp_user_sid;\n+\t}\n+\n+\tif (primary_group_sid) {\n+\t\t*primary_group_sid = tmp_primary_group_sid;\n+\t}\n+\n+\tDEBUG(10,(\"ads_get_tokensids: returned %d sids\\n\", (int)tmp_num_sids + 2));\n+\n+\tads_msgfree(ads, res);\n+\treturn ADS_ERROR_LDAP(LDAP_SUCCESS);\n+}\n+\n #endif\n\nModified: branches/SAMBA_3_0_26/source/libgpo/gpo_ldap.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/libgpo/gpo_ldap.c\t2007-05-11 13:19:49 UTC (rev 22799)\n+++ branches/SAMBA_3_0_26/source/libgpo/gpo_ldap.c\t2007-05-11 13:33:37 UTC (rev 22800)\n@@ -571,6 +571,68 @@\n }\n \n /****************************************************************\n+****************************************************************/\n+\n+ADS_STATUS ads_get_gpo_sid_token(ADS_STRUCT *ads,\n+\t\t\t\tTALLOC_CTX *mem_ctx,\n+\t\t\t\tconst char *dn,\n+\t\t\t\tstruct GPO_SID_TOKEN **token)\n+{\n+\tADS_STATUS status;\n+\tDOM_SID object_sid;\n+\tDOM_SID primary_group_sid;\n+\tDOM_SID *ad_token_sids;\n+\tsize_t num_ad_token_sids = 0;\n+\tDOM_SID *token_sids;\n+\tsize_t num_token_sids = 0;\n+\tstruct GPO_SID_TOKEN *new_token = NULL;\n+\tint i;\n+\n+\tnew_token = TALLOC_ZERO_P(mem_ctx, struct GPO_SID_TOKEN);\n+\tADS_ERROR_HAVE_NO_MEMORY(new_token);\n+\n+\tstatus = ads_get_tokensids(ads, mem_ctx, dn, \n+\t\t\t\t   &object_sid, &primary_group_sid,\n+\t\t\t\t   &ad_token_sids, &num_ad_token_sids);\n+\tif (!ADS_ERR_OK(status)) {\n+\t\treturn status;\n+\t}\n+\n+\tnew_token->object_sid = object_sid;\n+\tnew_token->primary_group_sid = primary_group_sid;\n+\n+\ttoken_sids = TALLOC_ARRAY(mem_ctx, DOM_SID, 1);\n+\tADS_ERROR_HAVE_NO_MEMORY(token_sids);\n+\n+\tfor (i = 0; i < num_ad_token_sids; i++) {\n+\t\t\n+\t\tif (sid_check_is_in_builtin(&ad_token_sids[i])) {\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (!add_sid_to_array_unique(mem_ctx, &ad_token_sids[i], \n+\t\t\t\t\t     &token_sids, &num_token_sids)) {\n+\t\t\treturn ADS_ERROR(LDAP_NO_MEMORY);\n+\t\t}\n+\t}\n+\n+\t/* Add S-1-5-11 to token */\n+\tif (!add_sid_to_array_unique(mem_ctx, &global_sid_Authenticated_Users,\n+\t\t\t\t     &token_sids, &num_token_sids)) {\n+\t\treturn ADS_ERROR(LDAP_NO_MEMORY);\n+\t}\n+\n+\n+\tnew_token->token_sids = token_sids;\n+\tnew_token->num_token_sids = num_token_sids;\n+\n+\t*token = new_token;\n+\n+\treturn ADS_ERROR_LDAP(LDAP_SUCCESS);\n+}\n+\n+\n+/****************************************************************\n  get the full list of GROUP_POLICY_OBJECTs for a given dn\n ****************************************************************/\n \n\n"}