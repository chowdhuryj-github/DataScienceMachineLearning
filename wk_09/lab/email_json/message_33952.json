{"category": "ham", "to_address": "James E Keenan <jkeen@verizon.net>", "from_address": "Mark Glines <mark@glines.org>", "subject": "Re: POD Coverage  (was:  Parrot Project Management...)", "body": "On Mon, 21 May 2007 19:27:26 -0400\nJames E Keenan  wrote:\n\n> Mark Glines wrote:\n> >\n> > Think its worth adding a\n> > codingstd test for POD coverage?\n> > \n> > \n> \n> No.\n> \n> Or perhaps:  No, not unless you want to start a big \"philosophical\" \n> argument about POD coverage.\n> \n> I say this as someone who dissents from the prevailing wisdom about\n> POD coverage as it relates to CPAN modules.  That's because the tests\n> on CPAN that purport to rate the \"kwalitee\" of the POD coverage of\n> CPAN distributions will only credit you if you write your POD in one \n> particular style.  If you happen to have written POD for one of your \n> distros before that standard was formulated, or if you happen to\n> think that style doesn't suit your distro well, then you don't get\n> credit and your \"kwalitee\" sinks.\n> \n> There are distros for which I've written 40+ pages of documentation\n> but which fail these \"kwalitee\" tests because of the way I structured\n> the =head tags.\n> \n> I happen to think that some of our coding standards amount to\n> excessive nitpicking ... and when Perl::Critic is applied to some of\n> the code I maintain, the results, IMHO, are demonstrably less\n> readable code.  And that's for stuff we write in relatively well\n> structured languages like Perl 5 and PIR.  We write POD in English;\n> need I say more?\n> \n> Finally, to add a test for POD coverage is just one more test which\n> will fail often in 'make test' or 'make smoke' and yet say nothing\n> about the quality of Parrot.\n> \n> In, short:  No.\n\nOk.  Thanks for the feedback.  Lets see what I can do with it...\n\nFirst.  Frankly, I don't care about the *style* of POD in use, just that\nthere *is* some.  \"Well-formedness\" for me comes down to parsability,\nnot style.  So Perl::Critic can GTFOMI.  :)  And there already is a POD\nwell-formedness test (t/doc/pod.t), so all the codingstd test I'm\nproposing would do is make sure some pod exists, at least for\nnon-generated sources in POD-capable file formats.\n\nI feel the same way you do about Test::Pod::Coverage; its the reason I\nhaven't added POD coverage tests to my own distributions.  It's quite\npossible to document a module properly without having a separate =head\ntag for each subroutine in it.\n\nSecond.  How do you feel about a codingstd test for this that is not run\nduring \"make test\" or \"make smoke\"?  The @coding_std_tests variable in\nt/harness looks to me like a whitelist for which tests to run on\nnon-release builds... so if this test isn't part of the list, then\neveryone is happy?  (Or have I misunderstood that code?)\n\nIf you still don't like it, I'll drop the subject :)\n\nMark\n\n"}