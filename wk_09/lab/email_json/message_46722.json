{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23440 - in\n\tbranches/SAMBA_3_0_26/source/registry: .", "body": "Author: obnox\nDate: 2007-06-12 15:36:02 +0000 (Tue, 12 Jun 2007)\nNew Revision: 23440\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23440\n\nLog:\nMerge r20016 from 3_0:\n\nAdd two utility functions for easy opening/creating registry keys.\n\nMichael\n\nModified:\n   branches/SAMBA_3_0_26/source/registry/reg_frontend.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0_26/source/registry/reg_frontend.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/registry/reg_frontend.c\t2007-06-12 15:33:47 UTC (rev 23439)\n+++ branches/SAMBA_3_0_26/source/registry/reg_frontend.c\t2007-06-12 15:36:02 UTC (rev 23440)\n@@ -631,8 +631,8 @@\n \t\t\tSAFE_FREE(path);\n \t\t\treturn err;\n \t\t}\n+\t\tSAFE_FREE(path);\n \t\t*pkey = hive;\n-\t\tSAFE_FREE(path);\n \t\treturn WERR_OK;\n \t}\n \n@@ -657,3 +657,97 @@\n \t*pkey = key;\n \treturn WERR_OK;\n }\n+\n+/*\n+ * Utility function to create a registry key without opening the hive\n+ * before. Assumes the hive already exists.\n+ */\n+\n+WERROR reg_create_path(TALLOC_CTX *mem_ctx, const char *orig_path,\n+\t\t       uint32 desired_access,\n+\t\t       const struct nt_user_token *token,\n+\t\t       enum winreg_CreateAction *paction,\n+\t\t       struct registry_key **pkey)\n+{\n+\tstruct registry_key *hive;\n+\tchar *path, *p;\n+\tWERROR err;\n+\n+\tif (!(path = SMB_STRDUP(orig_path))) {\n+\t\treturn WERR_NOMEM;\n+\t}\n+\n+\tp = strchr(path, '\\\\');\n+\n+\tif ((p == NULL) || (p[1] == '\\0')) {\n+\t\t/*\n+\t\t * No key behind the hive, just return the hive\n+\t\t */\n+\n+\t\terr = reg_openhive(mem_ctx, path, desired_access, token,\n+\t\t\t\t   &hive);\n+\t\tif (!W_ERROR_IS_OK(err)) {\n+\t\t\tSAFE_FREE(path);\n+\t\t\treturn err;\n+\t\t}\n+\t\tSAFE_FREE(path);\n+\t\t*pkey = hive;\n+\t\t*paction = REG_OPENED_EXISTING_KEY;\n+\t\treturn WERR_OK;\n+\t}\n+\n+\t*p = '\\0';\n+\n+\terr = reg_openhive(mem_ctx, path,\n+\t\t\t   (strchr(p+1, '\\\\') != NULL) ?\n+\t\t\t   SEC_RIGHTS_ENUM_SUBKEYS : SEC_RIGHTS_CREATE_SUBKEY,\n+\t\t\t   token, &hive);\n+\tif (!W_ERROR_IS_OK(err)) {\n+\t\tSAFE_FREE(path);\n+\t\treturn err;\n+\t}\n+\n+\terr = reg_createkey(mem_ctx, hive, p+1, desired_access, pkey, paction);\n+\tSAFE_FREE(path);\n+\tTALLOC_FREE(hive);\n+\treturn err;\n+}\n+\n+/*\n+ * Utility function to create a registry key without opening the hive\n+ * before. Will not delete a hive.\n+ */\n+\n+WERROR reg_delete_path(const struct nt_user_token *token,\n+\t\t       const char *orig_path)\n+{\n+\tstruct registry_key *hive;\n+\tchar *path, *p;\n+\tWERROR err;\n+\n+\tif (!(path = SMB_STRDUP(orig_path))) {\n+\t\treturn WERR_NOMEM;\n+\t}\n+\n+\tp = strchr(path, '\\\\');\n+\n+\tif ((p == NULL) || (p[1] == '\\0')) {\n+\t\treturn WERR_INVALID_PARAM;\n+\t}\n+\n+\t*p = '\\0';\n+\n+\terr = reg_openhive(NULL, path,\n+\t\t\t   (strchr(p+1, '\\\\') != NULL) ?\n+\t\t\t   SEC_RIGHTS_ENUM_SUBKEYS : SEC_RIGHTS_CREATE_SUBKEY,\n+\t\t\t   token, &hive);\n+\tif (!W_ERROR_IS_OK(err)) {\n+\t\tSAFE_FREE(path);\n+\t\treturn err;\n+\t}\n+\n+\terr = reg_deletekey(hive, p+1);\n+\tSAFE_FREE(path);\n+\tTALLOC_FREE(hive);\n+\treturn err;\n+}\n\n"}