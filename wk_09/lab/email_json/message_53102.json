{"category": "ham", "to_address": "Mark Glines <mark@glines.org>", "from_address": "\"Patrick R. Michaud\" <pmichaud@pobox.com>", "subject": "Re: [svn:parrot] r19231 - trunk/languages/perl6/src/pmc", "body": "On Fri, Jun 22, 2007 at 09:30:40AM -0700, Mark Glines wrote:\n> On Fri, 7 Nov 2008 15:28:40 -0700\n> chromatic  wrote:\n> > On Friday 22 June 2007 02:07:32 Nicholas Clark wrote:\n> > > I think that you need something like this\n> > > /* concatenating with \"\" ensures that only literal strings are\n> > > accepted as argument */ #define STR_WITH_LEN(s)  (s \"\"),\n> > > (sizeof(s)-1)\n> > >\n> > > /* STR_WITH_LEN() shortcuts */\n> > > #define newSVpvs(str) Perl_newSVpvn(aTHX_ STR_WITH_LEN(str))\n> > \n> > I'm not sure that's what I was asking.\n> > \n> > string_from_cstring()'s third parameter can be either the length of\n> > the string or zero.  If it's zero, the function will call strlen() to\n> > get the string's length.\n> \n> It uses sizeof, not strlen.  So, it pushes the calculation to\n> compile-time, so you only have to do it once, and never at runtime.\n> \n> Also, using sizeof() will fix some cases that strlen() doesn't handle\n> correctly, specifically, strings containing explicit null characters.\n> src/objects.c has a few examples of that.  string_to_cstring(interp,\n> \"\\0\", 0) will get the size wrong, but string_to_cstring_literal(interp,\n> \"\\0\") will get it right.  So I don't really see a good excuse for not\n> using it everywhere.\n\nI think you mean \"string_from_cstring_literal\", not \n\"string_to_cstring_literal\".  At least I _hope_ that's \nwhat you mean.  :-)\n\nAlso, out of curiosity, do we really need \"cstring\" in the name?\nHow about simply...?\n\n    string_from_literal(interp, \"Foo\")\n\n(I'm not opposed to leaving 'cstring' in the name if it's important\nto somehow make it clear that the literal is a cstring literal, I'm\njust asking the question.)\n\nPm\n\n"}