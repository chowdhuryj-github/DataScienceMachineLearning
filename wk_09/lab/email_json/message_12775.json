{"category": "ham", "to_address": "Leopold Toetsch <lt@toetsch.at>", "from_address": "Patrick Rutkowski <rutski89@gmail.com>", "subject": "Re: I Don't Understand The Context Allocation/Destruction Code", "body": "Yes, I see that now, but that doesn't answer the questions.\n\nWhy did you choose reg_alloc/8 as an index into free_list?\n\nWhy does the code need to increase the size of free_list so\ndramatically in the branching into the first if()?\n\nI was also going to ask again how free_list is meant to be used, but\nthen I found this in the comments at the top of register.c:\n\n\"Context/register memory is malloced. C is used as a\nfree list of reusable items.\"\n\nOn Apr 22, 2007, at 11:36 AM, Leopold Toetsch wrote:\n\n> Am Sonntag, 22. April 2007 14:40 schrieb Patrick Rutkowski:\n>> Ok, so I see now that reg_alloc is rounded up to a multiple of 8 by\n>> the following two lines:\n>>\n>>    /*code*/ const int slot = (reg_alloc + 7) >> 3;\n>>    /*code*/ reg_alloc = slot << 3;\n>>\n>> However, this still begs the question of what the slot variable is\n>> for. Clearly it's being used as an index into\n>> interp->ctx_mem.free_list; but its value, which is always set to\n>> reg_alloc/8, seems to me to be rather arbitrary (either that or it  \n>> has\n>> some meaning but I just don't know any better).\n>\n> Alloc size     slot\n>   0, 4           0\n>   8, 12          1\n>  16, 20          2\n>  ...\n>\n> (As this is for registers, the sizes are not more fine grained).\n>\n> That's all.\n> leo\n\n"}