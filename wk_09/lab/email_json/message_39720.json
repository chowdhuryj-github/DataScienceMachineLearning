{"category": "ham", "to_address": "sugar@lists.laptop.org", "from_address": "Morgan Collett <morgan@collabora.co.uk>", "subject": "Re: [sugar] [PATCH] services/presence/: identify Buddies by \"key\n ID\"\t(pubkey hash), not whole key.", "body": "Simon McVittie wrote:\n\n> services/presence/: identify Buddies by \"key ID\" (pubkey hash), not whole key.\n> \n> This allows us to create Buddy objects as soon as we see a contact on the\n> server. For contacts not on trusted servers, or seen in anonymous MUCs, we\n> create a Buddy identified by JID instead (so we have some way to talk\n> about the anonymous contact within the Sugar API).\n\nSounds good.\n\n> The concept of \"trusted server\" means a server which we trust to validate that\n> users with a keyID as the username part of their JID do in fact have that key.\n> Currently we just pretend that olpc.collabora.co.uk does this - in future, the\n> school servers will do this validation by using key rather than password\n> authentication.\n\nSecurity by hand-waving :)\n\n> I'm assuming here that the key-ID is \"sufficiently unique\" across all\n> trusted servers. It's a SHA-1 of the public key, so basically the\n> same strength as GnuPG key fingerprints and git object hashes.\n> (Actually, for hysterical raisins, it's a SHA-1 of Base64(public_key) -\n> we should probably change this before we ship.)\n\nA lot of crypto out there relies on hashes of keys. If the key is random\n(enough), then the hash should be good enough not to collide. At least,\nnot in predictable ways...\n\nWhy though is it a hash of the base64? In theory the base64s have the\nsame entropy as the keys, but the crypto stuff should be happening in\nbinary land unless we get into XML.\n\nIf changing it will break the mesh for everybody at some point \"before\nwe ship\", sooner's better than later.\n\nIn http://www.nist.gov/sha, NIST states:\n\"Federal agencies should stop using SHA-1 for digital signatures,\ndigital time stamping and other applications that require collision\nresistance as soon as practical, and must use the SHA-2 family of hash\nfunctions for these applications after 2010.\"\n\nWe probably won't have a NIST-blessed replacement for SHA before 2012.\nNevertheless, we need to allow for changes along the way.\n\n> The actual function used for the key-ID can be changed (if it\n> is, old and new versions of Sugar will be incompatible, but that's not\n> really a problem yet) so if any crypto gurus want to specify something\n> different, now would be a really good time. As currently implemented, its\n> output must be short enough to put in the JID (for which a hex SHA-1 is\n> somewhat long already).\n\nIMO we need to allow for some algorithm agility here. Breaking the mesh\nat any stage is going to be very unpleasant - for the users^Wkids\nespecially.\n\nFor the unique identifier stuff, could we at some future point do a\n'keyid2/' (or some other prefix) meaning that this is an identifier in a\ndifferent space?\n\nAnyway, the patch looks good.\n\nMorgan\n\n_______________________________________________\nSugar mailing list\nSugar@lists.laptop.org\nhttp://lists.laptop.org/listinfo/sugar\n\n"}