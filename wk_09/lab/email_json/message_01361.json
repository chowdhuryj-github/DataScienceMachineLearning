{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "allison@cvs.develooper.com", "subject": "[svn:parrot-pdd] r18101 - trunk/docs/pdds", "body": "Author: allison\nDate: Tue Apr 10 00:28:51 2007\nNew Revision: 18101\n\nModified:\n   trunk/docs/pdds/pdd15_objects.pod\n\nLog:\n[pdd]: Changes from latest round of comments: namespace method, remove_method,\nget_class vs getclass.\n\n\nModified: trunk/docs/pdds/pdd15_objects.pod\n==============================================================================\n--- trunk/docs/pdds/pdd15_objects.pod\t(original)\n+++ trunk/docs/pdds/pdd15_objects.pod\tTue Apr 10 00:28:51 2007\n@@ -373,6 +373,10 @@\n \n Remove an attribute from the class.\n \n+=item remove_method(string *)\n+\n+Remove a method from the class.\n+\n =item remove_parent(string *)\n \n Remove a parent from the class.\n@@ -403,6 +407,12 @@\n the class, and also sets the association with a namespace. With no\n argument it only returns the current value of the name attribute.\n \n+=item namespace\n+\n+    $P1 = $P2.namespace()\n+\n+Retrieve the namespace object associated with the class.\n+\n =item new\n \n     $P1 = $P2.new( 'myattrib' => \"Foo\" )\n@@ -718,13 +728,18 @@\n \n Remove an attribute from the role.\n \n+=item remove_method(string *)\n+\n+Remove a method from the role.\n+\n+\n =item remove_role(string *)\n \n Remove a role from the role.\n \n =back\n \n-=head3 Methods\n+=head3 Role Methods\n \n These methods are just syntactic sugar for the vtable methods. They are\n not included in the Role PMC by default, but added to Role as a role.\n@@ -733,14 +748,17 @@\n \n =item name\n \n+    $P1 = $P2.name( $S3 )\n+\n The accessor for the name attribute. With no argument, it simply returns\n the current value for name. When passed an argument, it sets the name of\n the role, and also sets the association with a namespace.\n \n-When you associate a class with a namespace, it pulls in all of the\n-methods and vtable methods held within that namespace.  And when\n-replacing one class with another in the association, it removes any\n-methods and vtable methods from the previous class.\n+=item namespace\n+\n+    $P1 = $P2.namespace()\n+\n+Retrieve the namespace object associated with the role.\n \n =item attributes\n \n@@ -1038,8 +1056,8 @@\n \n To create a class C with the parents C and C, the code would be:\n \n-   getclass $P0, \"A\"\n-   getclass $P1, \"B\"\n+   get_class $P0, \"A\"\n+   get_class $P1, \"B\"\n    subclass $P2, $P0, \"Foo\"\n    addparent $P2, $P1\n \n\n"}