{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "Leopold Toetsch <lt@toetsch.at>", "subject": "Re: [perl #42320] [BUG] Memory leak with String pmc", "body": "Am Montag, 23. April 2007 20:23 schrieb chromatic:\n> On Thursday 05 April 2007 16:56, Mehmet Yavuz Selim Soyturk wrote:\n> > The next program causes a memory leak for me.\n> >\n> > .sub main :main\n> > loop:\n> >     $P0 = new .String\n> >     goto loop\n> > .end\n\nThat's an endless loop. How does one measure, if it's leaking memory?\n\nAnway:\n\n> I can't explain that, but here's some suspicious code in\n> Parrot_allocate_string() in src/resources.c:\n\n[ ... ]\n\n> If I identify and read the related freeing code correctly\n> (Parrot_dod_sweep() in src/gc/dod.c):\n>\n>                 else if (PObj_sysmem_TEST(b) && PObj_bufstart(b)) {\n\nThese 2 snippets aren't related at all. The latter is dealing with freeing \nsys-malloced memory as the comment is saying. The former is plain string \nmemory allocation code.\n\nI'd presume, that the string memory compaction code i.e. 'compact_pool()' is \nnever run in the loop above.\n\nleo\n\n"}