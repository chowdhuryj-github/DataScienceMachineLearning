{"category": "ham", "to_address": "Pierre Mariani <frenchyp@gmail.com>", "from_address": "\"Matthew J. Avitable\" <mja@richweb.com>", "subject": "Re: improving my code: array of references", "body": "Hi Pierre,\n> my @tmp = ( $var1, $var2, $var3 );\n> @tmp = map modify_variable, @tmp;\n>\n> which is better\n\nConway (in Perl Best Practices) prefers the block form of map, since in \nhis opinion, it's more readable.  So you could rewrite it as:\n\nmy @tmp = ( $var1, $var2, $var3 );\n@tmp = map { modify_variable } @tmp\n\n\nI'm guessing that the code within modify_variable uses $_ under the \nhood?  That may end up biting you later on, if you use modify_variable \nin different places.  If $_ is in use by other code or gets changed on \nyou unexpectedly, you may have some difficult debugging ahead of you.   \nThe following may prove clearer when reading it 6 months from now:\n\nmap { modify_variable($_) } = \\($var1, $var2, $var3);\n\n\nI personally like the above syntax - others may not.  A foreach gets you \nan alias to each element, so what about the following?  I've provided a \nmodify_var sub as an example.\n\n$var1 = 1;\n$var2 = 2;\n$var3 = 3;\n\nforeach my $v ($var1, $var2, $var3) {\n    modify_var(\\$v);\n}\n\nsub modify_var {\n    my $scalar_ref = shift || die \"blaaaaa\";\n    ${$scalar_ref} += 5;\n}\n\n$, = \"\\n\";   ## print a newline between each argument to print\nprint ($var1, $var2, $var3);\n\n-m\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}