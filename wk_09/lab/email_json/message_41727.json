{"category": "ham", "to_address": "Beginners Perl <beginners@perl.org>", "from_address": "Mike Lesser <exceptions@earthlink.net>", "subject": "Fwd: Paths, Spaces, Getopt::Long", "body": "\nWell I'm not sure. I may be explaining this badly. I'll go thru all  \nthe details in case it helps.\n\nThe path I pass when I'm executing the script is escaped, which I  \nassume is correct.\n\nOnce that path is read by Getopt, I print it and, voila, no escapes,  \njust nice-to-read spaces.\n\nThis path gets a filename appended as if it were a regular string,  \nand is used to when I make a file (via another module). This file is  \ncreated & written just fine. This made me assume all was well, and  \nthat Perl or the modules covered all the issues with spaces. I now  \nrealize this may have been naive.\n\nThen I attempted to use Tidy, sans HTML::Tidy, through Shell. The  \nHTML::Tidy lib won't work on my system. So, I have been futzing with  \ntidy and I'v e discovered that tidy and simple commands like cd fail,  \nmost likely because of the spaces in my paths.\n\nFor example, here's the path I pass to the script (no quotes):\n     /Users/mike/Airline\\ Sheets/Original\\ Schedules/UnitedJune.html\n\nHere's the path as found via File::Basename/fileparse:\n     /Users/mike/Projects/Omni/Airline Sheets/Original Schedules/\t\n\nMy script uses modules that create files based on this path, and it  \nseems okay. If however I try to              use the path with say,  \nthe Shell mod, it fails. This is what cd returns:\n\n\t/Users/mike/Projects/Omni/Airline: No such file or directory\n.\nI need to use the Shell because I need to run tidy, locally.\n\n> I fear that you're using the Shell module for more than it was\n> intended to do, perhaps because you don't know about system().\n>\n\nThat may very well be the case!\n> One easy solution may be to give a list of arguments to system(). The\n> first is the name of the program you're trying to run, the rest of the\n> list are the command-line arguments to give it. You don't need to\n> escape anything, because the strings are passed as-is.\n>\n>  # use the system's chmod command on a list of filenames\n>  system \"chmod\", \"u+w\", @filenames;\n>\n> Hope this helps!\n>\n> --Tom Phoenix\n> Stonehenge Perl Training\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}