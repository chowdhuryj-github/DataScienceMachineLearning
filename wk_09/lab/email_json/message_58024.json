{"category": "ham", "to_address": "\"r-help@stat.math.ethz.ch R-help\" <r-help@stat.math.ethz.ch>", "from_address": "Benilton Carvalho <bcarvalh@jhsph.edu>", "subject": "[R] Comparison: glm() vs. bigglm()", "body": "Hi,\n\nUntil now, I thought that the results of glm() and bigglm() would  \ncoincide. Probably a naive assumption?\n\nAnyways, I've been using bigglm() on some datasets I have available.  \nOne of the sets has >15M observations.\n\nI have 3 continuous predictors (A, B, C) and a binary outcome (Y).  \nAnd tried the following:\n\nm1 <- bigglm(Y~A+B+C, family=binomial(), data=dataset1, chunksize=10e6)\nm2 <- bigglm(Y~A*B+C, family=binomial(), data=dataset1, chunksize=10e6)\nimp <- m1$deviance-m2$deviance\n\nFor my surprise \"imp\" was negative.\n\nI then tried the same models, using glm() instead... and as I  \nexpected, \"imp\" was positive.\n\nI also noticed differences on the coefficients estimated by glm() and  \nbigglm() - small differences, though, and CIs for the coefficients (a  \ngiven coefficient compared across methods) overlap.\n\nAre such incrongruences expected? What can I use to check for  \nconvergence with bigglm(), as this might be one plausible cause for a  \nnegative difference on the deviances?\n\nThank you very much,\n\n-benilton\n\n > sessionInfo()\nR version 2.5.0 (2007-04-23)\nx86_64-unknown-linux-gnu\n\nlocale:\nLC_CTYPE=en_US.iso885915;LC_NUMERIC=C;LC_TIME=en_US.iso885915;LC_COLLATE \n=en_US.iso885915;LC_MONETARY=en_US.iso885915;LC_MESSAGES=en_US.iso885915 \n;LC_PAPER=en_US.iso885915;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASU \nREMENT=en_US.iso885915;LC_IDENTIFICATION=C\n\nattached base packages:\n[1] \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     \"datasets\"   \n\"methods\"\n[7] \"base\"\n\nother attached packages:\nbiglm\n\"0.4\"\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}