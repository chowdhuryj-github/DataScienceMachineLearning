{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Darren Duncan <darren@DarrenDuncan.net>", "subject": "Re: = at Start of Line ... solution is simple", "body": "Without replying to anyone in particular, I'll say ...\n\nI agree with the camp that says an = at the start of a line is pod, \nwithout exception, regardless of context.\n\nI am also assuming that \"start of the line\" means there is no \nwhitespace to the left of the =.\n\nI also recognize and agree with Perl 6 being sometimes whitespace sensitive.\n\nI also found from my own experience a few months back (and I added a \ntest for it as t/syntax/parsing/pod_in_multi_line_exprs.t), that this \n(represented with Pod 5) didn't work, but ought to (assume the 'my' \net al is flush left):\n\n   my $list = {\n\n   =pod foo docs\n   =cut\n\n     'foo' => sub {...},\n\n   =pod bar docs\n   =cut\n\n     'bar' => sub {...},\n\n   };\n\nFor technical reasons, I was constructing a bunch of routines \nanonymized within a hash, rather than added to a package.  A whole \nfile could be mostly a single hash declaration like this.  I had been \nexpecting that I could put pod at the start of any line and it would \nwork, as is what seems the most intuitive.  The camp that I support \nwould make this work.\n\nGiven this, there is an obvious (to me) solution for pod blocks in \nthe middle of expressions like:\n\n   my $foo\n     = $bar;\n\nAs the example shows, and I believe best practices espouse, you \n*indent* the code line with a leading =.\n\nThis both makes the Perl code easier to understand (a continuation is \nindented), and because there is leading whitespace, that = isn't \nconfused with pod, which is always not indented.\n\nSimple.\n\nAnd since Perl 6 does consider whitespace significant sometimes, this \nis not unprecedented.\n\n-- Darren Duncan\n\n"}