{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "vlendec@samba.org", "subject": "svn commit: samba r23170 - in branches: SAMBA_3_0/source/lib\n\tSAMBA_3_0_26/source/lib", "body": "Author: vlendec\nDate: 2007-05-28 11:08:58 +0000 (Mon, 28 May 2007)\nNew Revision: 23170\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23170\n\nLog:\nAdd map_nt_error_from_tdb()\n\nModified:\n   branches/SAMBA_3_0/source/lib/dbwrap_tdb.c\n   branches/SAMBA_3_0/source/lib/util_tdb.c\n   branches/SAMBA_3_0_26/source/lib/dbwrap_tdb.c\n   branches/SAMBA_3_0_26/source/lib/util_tdb.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/lib/dbwrap_tdb.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/dbwrap_tdb.c\t2007-05-27 17:12:08 UTC (rev 23169)\n+++ branches/SAMBA_3_0/source/lib/dbwrap_tdb.c\t2007-05-28 11:08:58 UTC (rev 23170)\n@@ -127,9 +127,15 @@\n {\n \tstruct db_tdb_ctx *ctx = talloc_get_type_abort(rec->private_data,\n \t\t\t\t\t\t       struct db_tdb_ctx);\n+\tint res;\n+\t\n+\tres = tdb_delete(ctx->tdb, rec->key);\n \n-\treturn (tdb_delete(ctx->tdb, rec->key) == 0) ?\n-\t\tNT_STATUS_OK : NT_STATUS_UNSUCCESSFUL;\n+\tif (res == 0) {\n+\t\treturn NT_STATUS_OK;\n+\t}\n+\n+\treturn map_nt_error_from_tdb(tdb_error(ctx->tdb));\n }\n \n struct db_tdb_traverse_ctx {\n\nModified: branches/SAMBA_3_0/source/lib/util_tdb.c\n===================================================================\n--- branches/SAMBA_3_0/source/lib/util_tdb.c\t2007-05-27 17:12:08 UTC (rev 23169)\n+++ branches/SAMBA_3_0/source/lib/util_tdb.c\t2007-05-28 11:08:58 UTC (rev 23170)\n@@ -940,3 +940,40 @@\n \n \treturn w;\n }\n+\n+NTSTATUS map_nt_error_from_tdb(enum TDB_ERROR err)\n+{\n+\tstruct { enum TDB_ERROR err; NTSTATUS status; }\tmap[] =\n+\t\t{ { TDB_SUCCESS,\tNT_STATUS_OK },\n+\t\t  { TDB_ERR_CORRUPT,\tNT_STATUS_INTERNAL_DB_CORRUPTION },\n+\t\t  { TDB_ERR_IO,\t\tNT_STATUS_UNEXPECTED_IO_ERROR },\n+\t\t  { TDB_ERR_OOM,\tNT_STATUS_NO_MEMORY },\n+\t\t  { TDB_ERR_EXISTS,\tNT_STATUS_OBJECT_NAME_COLLISION },\n+\n+\t\t  /*\n+\t\t   * TDB_ERR_LOCK is very broad, we could for example\n+\t\t   * distinguish between fcntl locks and invalid lock\n+\t\t   * sequences. So NT_STATUS_FILE_LOCK_CONFLICT is a\n+\t\t   * compromise.\n+\t\t   */\n+\t\t  { TDB_ERR_LOCK,\tNT_STATUS_FILE_LOCK_CONFLICT },\n+\t\t  /*\n+\t\t   * The next two ones in the enum are not actually used\n+\t\t   */\n+\t\t  { TDB_ERR_NOLOCK,\tNT_STATUS_FILE_LOCK_CONFLICT },\n+\t\t  { TDB_ERR_LOCK_TIMEOUT, NT_STATUS_FILE_LOCK_CONFLICT },\n+\t\t  { TDB_ERR_NOEXIST,\tNT_STATUS_NOT_FOUND },\n+\t\t  { TDB_ERR_EINVAL,\tNT_STATUS_INVALID_PARAMETER },\n+\t\t  { TDB_ERR_RDONLY,\tNT_STATUS_ACCESS_DENIED }\n+\t\t};\n+\n+\tint i;\n+\n+\tfor (i=0; i < sizeof(map) / sizeof(map[0]); i++) {\n+\t\tif (err == map[i].err) {\n+\t\t\treturn map[i].status;\n+\t\t}\n+\t}\n+\n+\treturn NT_STATUS_INTERNAL_ERROR;\n+}\n\nModified: branches/SAMBA_3_0_26/source/lib/dbwrap_tdb.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/dbwrap_tdb.c\t2007-05-27 17:12:08 UTC (rev 23169)\n+++ branches/SAMBA_3_0_26/source/lib/dbwrap_tdb.c\t2007-05-28 11:08:58 UTC (rev 23170)\n@@ -125,9 +125,15 @@\n {\n \tstruct db_tdb_ctx *ctx = talloc_get_type_abort(rec->private_data,\n \t\t\t\t\t\t       struct db_tdb_ctx);\n+\tint res;\n+\t\n+\tres = tdb_delete(ctx->tdb, rec->key);\n \n-\treturn (tdb_delete(ctx->tdb, rec->key) == 0) ?\n-\t\tNT_STATUS_OK : NT_STATUS_UNSUCCESSFUL;\n+\tif (res == 0) {\n+\t\treturn NT_STATUS_OK;\n+\t}\n+\n+\treturn map_nt_error_from_tdb(tdb_error(ctx->tdb));\n }\n \n struct db_tdb_traverse_ctx {\n\nModified: branches/SAMBA_3_0_26/source/lib/util_tdb.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/lib/util_tdb.c\t2007-05-27 17:12:08 UTC (rev 23169)\n+++ branches/SAMBA_3_0_26/source/lib/util_tdb.c\t2007-05-28 11:08:58 UTC (rev 23170)\n@@ -940,3 +940,40 @@\n \n \treturn w;\n }\n+\n+NTSTATUS map_nt_error_from_tdb(enum TDB_ERROR err)\n+{\n+\tstruct { enum TDB_ERROR err; NTSTATUS status; }\tmap[] =\n+\t\t{ { TDB_SUCCESS,\tNT_STATUS_OK },\n+\t\t  { TDB_ERR_CORRUPT,\tNT_STATUS_INTERNAL_DB_CORRUPTION },\n+\t\t  { TDB_ERR_IO,\t\tNT_STATUS_UNEXPECTED_IO_ERROR },\n+\t\t  { TDB_ERR_OOM,\tNT_STATUS_NO_MEMORY },\n+\t\t  { TDB_ERR_EXISTS,\tNT_STATUS_OBJECT_NAME_COLLISION },\n+\n+\t\t  /*\n+\t\t   * TDB_ERR_LOCK is very broad, we could for example\n+\t\t   * distinguish between fcntl locks and invalid lock\n+\t\t   * sequences. So NT_STATUS_FILE_LOCK_CONFLICT is a\n+\t\t   * compromise.\n+\t\t   */\n+\t\t  { TDB_ERR_LOCK,\tNT_STATUS_FILE_LOCK_CONFLICT },\n+\t\t  /*\n+\t\t   * The next two ones in the enum are not actually used\n+\t\t   */\n+\t\t  { TDB_ERR_NOLOCK,\tNT_STATUS_FILE_LOCK_CONFLICT },\n+\t\t  { TDB_ERR_LOCK_TIMEOUT, NT_STATUS_FILE_LOCK_CONFLICT },\n+\t\t  { TDB_ERR_NOEXIST,\tNT_STATUS_NOT_FOUND },\n+\t\t  { TDB_ERR_EINVAL,\tNT_STATUS_INVALID_PARAMETER },\n+\t\t  { TDB_ERR_RDONLY,\tNT_STATUS_ACCESS_DENIED }\n+\t\t};\n+\n+\tint i;\n+\n+\tfor (i=0; i < sizeof(map) / sizeof(map[0]); i++) {\n+\t\tif (err == map[i].err) {\n+\t\t\treturn map[i].status;\n+\t\t}\n+\t}\n+\n+\treturn NT_STATUS_INTERNAL_ERROR;\n+}\n\n"}