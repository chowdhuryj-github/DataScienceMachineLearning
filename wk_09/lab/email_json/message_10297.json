{"category": "ham", "to_address": "Bernhard Klingenberg <Bernhard.Klingenberg@williams.edu>", "from_address": "Duncan Murdoch <murdoch@stats.uwo.ca>", "subject": "Re: [R] erratic behavior of match()?", "body": "On 4/19/2007 4:29 PM, Bernhard Klingenberg wrote:\n> Thank you! Is floating point arithmetic also the reason why \n> \n> 1 %% 0.1\n> \n> gives the \"surprising\" answer 0.1 (because 0.1 cannot be written as a \n> fraction with denominator a power of 2, e.g. 1%%0.5 correctly gives 0).\n> \n> This seems to go a bit against the statement in the help for '%%', which \n> states \"For real arguments, '%%' can be subject to catastrophic loss of \n> accuracy if 'x' is much larger than 'y', and a warning is given if this \n> is detected.\"\n\nI don't see the contradiction.  The statement is talking about one way \nto get imprecise results; you may have found another.\n\nHowever, I'm not sure if you can blame %% in your example:  the loss of \nprecision probably came from the translation of \"0.1\" to the internal \nrepresentation.  I think \"0.1\" ends up a little bit larger than 0.1 \nafter string conversion and rounding, so 1 %/% 0.1 should give 9, and 1 \n%% 0.1 should give something very close to 0.1, as you saw.\n\nDuncan Murdoch\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}