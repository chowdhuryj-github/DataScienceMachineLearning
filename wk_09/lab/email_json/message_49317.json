{"category": "ham", "to_address": "\"perl6-language@perl.org\" <perl6-language@perl.org>", "from_address": "Damian Conway <damian@conway.org>", "subject": "Pod 6: ease of implementation vs easy of use", "body": "I'm not going to argue about the design of Pod 6 any more. As both Mark\nand brian have pointed out, this really comes down to philosophical\ndifferences that no amount of discussion is going to resolve. In any\ncase, I'm sure that Larry now has plenty of \"grist\" from which to mill a\nfinal specification of how the Perl 6 documentation mechanism will work.\n\nI will, however, take a moment to answer the accusation that I appear to\nhave redesigned Pod the way I did in order to make implementation\neasier...and at the expense of making life harder for programmers and\neducators.\n\n\nIt's hard to believe anyone could think I would ever do that. It's\nalmost as if the they don't know me at all.\n\n From the very first day I became part of the Perl community (August 18,\n1998, when I presented Getopt::Declare and Lingua::EN::Inflect at the\nSecond Perl Conference), my entire philosophy and purpose has been to\nmake things *easier* for users of Perl, no matter what that did to the\ncomplexity of the implementation.\n\nEvery serious module I've ever written over the subsequent decade has\nhad that same characteristic and intended function: Attribute::Handlers,\nClass::Contract, Class::Multimethods, Class::Std, Config::Std,\nContextual::Return, Filter::Simple, Getopt::Euclid, IO::Prompt,\nModule::Starter, NEXT, Parse::RecDescent, Regexp::Common,\nSmart::Comments, Switch, Text::Autoformat...etc., etc.\n\nIndeed the term \"a Damian module\" is now widely used to mean \"software\nthat makes your life easier...until you actually try to read the source\nor understand the implementation\". :-)\n\nI've always been quite proud of that...since that description is pretty\nmuch the definition of the perl interpreter itself. I always felt that\nmeant I was doing my job right.\n\nI've also lectured and taught academic and professional classes on\ninterface design for several decades now, and always with that same\nbasic message: make life easier for the user, no matter how much that\ncomplicates the implementor's job.\n\nCertainly, anyone who has sat in on a Perl 6 design meeting will tell\nyou that I've consistently argued that way; frequently to the point of\naggravating those courageous souls who are charged with the task of\nimplementing Perl 6.\n\n\nSo it actually *hurts* me that people might think I would ever\ncompromise on usability, just to facilitate implementability. Please\nread what I wrote again. I *did* claim that \"easier to implement\" was a\nnice side-benefit of my design...but only because I was directly\nresponding to brian's question about Pod 6's adaptability to other\nprogramming languages.\n\nI *never* said ease-of-implementation was a major consideration, of a\nmotivation for, or even a significant argument in favour of, the\noriginal design. My entire argument for separated Pod is based on\npromoting the prominence and readability of Pod documentation by\ndistinguishing it lexically, rather than syntactically.\n\n\nEnough. I will now get back to designing the new A<> formatting code\n('A' for *A*lias to *A*mbient *A*rtifact), which I'll preview early\nnext week. Though I'm sure people won't like that new feature either,\nsince it's going to be designed using the same \"separated model\"\nphilosophy. ;-)\n\nDamian\n\n"}