{"category": "ham", "to_address": "\"John W. Krahn\" <krahnj@telus.net>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: RegEx Substitution + Arrays", "body": "On 4/25/07, John W. Krahn  wrote:\n> Seanie wrote:\n> > Rob Dixon wrote:\n> >>> map(s/$find/$replace/, @arr);\n> >> Haha yes you can, but if you want to write nasty code go for\n> >>   grep s/$find/$replace/, @arr;\n> >> which also works.\n> >\n> > True, but grep implies \"find stuff\", while map implies \"do stuff\", so your\n> > nasty code is way, way, nastier than mine - it masks the intention.\n> >\n> > Maybe using map in void context is deep-level wrongness, but it'd be nice if\n> > somebody would explain WHY, instead of posting \"don't do it\" one-liners.\n>\n> perldoc perl581delta\n> [ snip ]\n>        Miscellaneous Enhancements\n>\n>        \"map\" in void context is no longer expensive. \"map\" is now context\n>        aware, and will not construct a list if called in void context.\n>\n>\n> So it is not really \"wrong\" anymore (for certain values of \"wrongness\".)\n>\n>\n>\n> John\n> --\n> Perl isn't a toolbox, but a small machine shop where you can special-order\n> certain sorts of tools at low cost and in short order.       -- Larry Wall\n\nIt is no longer inefficient; however, it is still an abuse of map and\nlonger than the for loop version.  It is hard to defend the use of map\nin a void context.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}