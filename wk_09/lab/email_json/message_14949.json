{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14381 - doc/trunk/design/syn", "body": "Author: larry\nDate: Tue Apr 24 18:29:02 2007\nNew Revision: 14381\n\nModified:\n   doc/trunk/design/syn/S11.pod\n\nLog:\nClarifications to module naming suggested by TheDamian++.\n\n\nModified: doc/trunk/design/syn/S11.pod\n==============================================================================\n--- doc/trunk/design/syn/S11.pod\t(original)\n+++ doc/trunk/design/syn/S11.pod\tTue Apr 24 18:29:02 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 27 Oct 2004\n-  Last Modified: 16 Apr 2007\n+  Last Modified: 24 Apr 2007\n   Number: 11\n-  Version: 18\n+  Version: 19\n \n =head1 Overview\n \n@@ -44,9 +44,10 @@\n or use the sigil-like C<::ModuleName> syntax.  The C<::> prefix does not\n imply top-levelness as it does in Perl\u00a05.  (Use C<::*> or C for that.)\n \n-A bare C declarator declares an C module name in the current\n-package.  At the start of the file, the current package is C<*>, so the\n-first declaration in the file is automatically global.\n+A bare (unscoped) C declarator declares a nested C module\n+name within the current package.  However, at the start of the file,\n+the current package is C<*>, so the first such declaration in the\n+file is automatically global.\n \n You can use C to explicitly\n declare a module in the current package (or module, or class).\n@@ -149,25 +150,33 @@\n \n =head1 Runtime Importation\n \n-Importing via C also binds into the current lexical scope by\n-default, but performs the binding at runtime:\n+Importing via C also installs names into the current lexical scope by\n+default, but delays the actual binding till runtime:\n \n     require Sense ;\n     require \"/home/non/Sense.pm\" ;\n \n-Tagsets are not recognized in the default import list to C<:MY>, but you can\n-explicitly request to put them into the C<:OUR> scope:\n+Only explicitly mentioned names may be so installed.  In order\n+to protect the run-time sanctity of the lexical pad, it may not be\n+modified by C.  Tagsets are assumed to be unknown at compile\n+time, hence tagsets are not allowed in the default import list to\n+C<:MY>, but you can explicitly request to put names into the C<:OUR>\n+scope, since that is modifiable at run time:\n \n     require Sense <:ALL>    # does not work\n     require Sense :MY  # this doesn't work either\n     require Sense :OUR # but this works\n \n-If the import list is omitted, then nothing is imported.  Calling C<.import>\n-at runtime cannot import into the lexical scope:\n+If the import list is omitted, then nothing is imported.  Since you\n+may not modify the lexical pad, calling an importation routine at\n+runtime cannot import into the lexical scope, and defaults to importation\n+to the package scope instead:\n \n     require Sense;\n     Sense.EXPORTALL;   # goes to the OUR scope by default, not MY\n \n+(Such a routine I rebind existing lexicals, however.)\n+\n =head1 Importing from a pseudo-package\n \n You may also import symbols from the various pseudo-packages listed in S02.\n@@ -236,6 +245,24 @@\n \n     class Dog:<1.2.1 cpan:JRANDOM>\n \n+The pieces are interpreted as follows:\n+=over\n+\n+=item *\n+\n+Anything matching C<< [ '::']*  >> is treated as a\n+package name\n+\n+=item *\n+\n+Anything matching C<< v? [\\d+ '.']* \\d+ >> is treated as a version number\n+\n+=item *\n+\n+Anything matching C<< + \\: \\S+ >> is treated as an author(ity)\n+\n+=back\n+\n These declarations automatically alias the full name of the class\n (or module) to the short name.  So for the rest of the lexical scope,\n C refers to the longer name.  The real library name can be\n@@ -286,7 +313,8 @@\n When specifying the version of your own module, C<1.2> is equivalent\n to C<1.2.0>, C<1.2.0.0>, and so on.  However C searches for\n modules matching a version prefix, so the subversions are wildcarded,\n-and in this context C<1.2> really means C<1.2.*>.  If you say:\n+and in this context C<< :vers<1.2> >> really means C<< :vers<1.2.*> >>.\n+If you say:\n \n     use v6;\n \n\n"}