{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Smylers <Smylers@stripey.com>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "Mark Overmeer writes:\n\n> * Damian Conway (damian@conway.org) [070615 00:17]:\n> \n> > * Pod 6 is both a structural and a semantic scheme; you can specify\n> >   both the structure of a document, and the meaning of its various\n> >   components\n> \n> Yes, and that is one of the things which worries me most *You can*.\n> It's full freedom,\n\nYou're concerned that an aspect of Perl 6 might have too much freedom?\nIsn't Perl all about giving users freedom to choose their own way of\ndoing something?\n\n> like XML, and without a convention everyone may think-up there own way\n> of documenting the same kinds of code elements.\n\nYes.  But in reality many people will follow what others do, or look to\nfollow best practices.  With Perl 5 you have complete freedom as to the\nnames of C<=head1> sections in the Pod for modules, yet in browsing Cpan\nit's clear that there are conventions and many people use the same\nheadings.  So not mandating a convention isn't much of a problem.\n\nMoreover, I reckon that not mandating a convention is essential.  Look\nat what's being done with Perl 5 at the moment (not specifically Pod,\njust in the Perl 5 community in general) and the best practices that\nhave sprung up in recent years (and are still evolving).  People are, of\ntheir own accord, following conventions that nobody had even thought of\nat the time Perl 5 was released; even at the time Perl 5.6, say, was\nreleased.\n\n> In this structure, the responsibility of how things get interpreted is\n> not for the programmer, so consistent over all modules.  We can make\n> search.cpan.org and manual-pages with a consistent structure.\n\nDo you really think that people can now, before Perl 6 has gained\nanything approaching the usage we expect, make policy for how things\nshould be documented, such that that policy will be the best possible\nway of documenting everything written in Perl 6, for ever?  Or even a\ngood way?\n\nThat strikes me as incredibly shortsighted, verging on arrogance by\nwhoever comes up with the rules, and doomed to failure.\n\nRather than trying to map out the future in detail (which is tricky),\nthe best we can do is come up with things that are sufficiently flexible\nthat they're capable of being used in ways we haven't yet thought of.\n\nThen when somebody, years from now, has a good idea, it will be possible\nfor that to be implemented (and followed by others), rather than tying\nus to some convention set at an arbitrary point in the past.\n\n> > * To summarize the summary:\n> >    - Use Perl for what Perl is good for (specification)\n> >    - Use Pod for what Pod is good for (commentary)\n>      - Use expressions where expressions are good for (calculation)\n>      - Use regexes where regexes are good for (matching)\n>        ...\n> \n> i.e. it is not a valid argument: expressions and regexes\n> are integrated.\n\nYes, but on the other side of the argument coconuts and fax machines are\nnot integrated.  I'm reasonably confident that for every pair of things\nwhich you list as being integrated I can come up with a pair which\naren't; I doubt that will really assist the argument one way or t'other.\n\n> the issue is to have sufficiently integrety in code and markup\n> to be able to create documentation-generating tools which produce enough\n> quality.\n\nDamian's spec permits this.\n\n> And at the same time give the programmer the mimimal burden on writing\n> documentation, to increase the chance that it is present and good.\n\nYou should 'Perl 6 Documentation Best Practices', with guidelines for\nhow to use Pod.  I'm sure many people would appreciate just being able\nto follow a template rather than having to make decisions over the small\ndetails of what to do.\n\nThat way we have a convention for those that want it, but also don't tie\nourselves into anything.\n\nIf a particular convention gains widespread approval then peer pressure\nshould encourage its use (in the same way that strict and warnings are\ncurrently optional in Perl 5, but in the absence of a good reason it's\nexpected that they be used).\n\nSmylers\n\n"}