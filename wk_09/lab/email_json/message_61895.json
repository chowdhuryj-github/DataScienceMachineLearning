{"category": "ham", "to_address": "<beginners@perl.org>", "from_address": "=?iso-8859-1?Q?Thomas_B=E4tzler?= <t.baetzler@bringe.com>", "subject": "RE: foreach broken in my script", "body": "Joseph L. Casale  wrote:\n\n> I  have a list:\n> @list = ('Exchange','Filter','DNS','Domain');\n> This is a list of arrays I also have of course to leverage \n> this I am trying to . the @ symbol on it during use.\n> \n> foreach $vm (@list) {\n>                 my_sub(\"@\" . \"$vm\");\n>                 print \"@\" . \"$vm\\n\";\n> }\n> \n> The print likes this, but the my_sub doesn't? Why not?\n\nIf you're trying to use symbolic references, well, please\ndon't. They are evil.\n\nInstead, structure your data into a hash of lists, like\n\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\n# initialize a hash with \"array names\" as keys and\n# anonymous hash references as their value.\n\nmy %host = (\n\t'Exchange' => [ 'foo', 'baz', 'bar' ],\n\t'Filter' => [ 'foo2', 'baz2', 'bar2' ],\n\t'DNS' => [ 'foo3', 'baz3', 'bar3' ],\n\t'Domain' => [ 'blerg' ],\n);\n\n# the argument passed to this sub is not an array, but\n# an array reference.\n\nsub my_sub {\n  my $array_ref = shift;\n\n  # array in scalar context == number of elements\n  if( @$array_ref > 1 ){\n    # note -> syntax used to dereference the reference\n    print \"the second element is \" . $array_ref->[1] . \"\\n\";\n  } else {\n    print \"the passed array has less than 2 elements\\n\";\n  }\n}\n\n# keys %host is the most flexible way to specify a list of all\n# key values. The order of the values is indeterminate, so you\n# might have to sort to get them in the same order every time.\nforeach my $vm ( keys %host ){\n  print \"values for $vm: \" . join(', ', @{$host{$vm}} ) . \"\\n\";\n  my_sub( $host{$vm} );\n}\n\n__END__\n\nHTH,\nThomas\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n\n"}