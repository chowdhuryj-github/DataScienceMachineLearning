{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "yoooooo <magno_yu@ml.com>", "subject": "[R] Memory management", "body": "\nHi all, I'm just curious how memory management works in R... I need to run an\noptimization that keeps calling the same function with a large set of\nparameters... so then I start to wonder if it's better if I attach the\nvariables first vs passing them in (coz that involves a lot of copying.. )\n\nThus, I do this\nfn3 <- function(x, y, z, a, b, c){ sum(x, y, z, a, b, c) }\nfn4 <- function(){ sum(x, y, z, a, b, c) }\n\nrdn <- rep(1.1, times=1e8)\nr <- proc.time()\nfor (i in 1:5)\n  fn3(rdn, rdn, rdn, rdn, rdn, rdn)\ntime1 <- proc.time() - r\nprint(time1)\n\nlt <- list(x = rdn, y = rdn, z = rdn, a = rdn, b = rdn, c = rdn)\nattach(lt)\nr <- proc.time()\nfor (i in 1:5)\n  fn4()\ntime2 <- proc.time() - r\nprint(time2)\ndetach(\"lt\")\n\nThe output is\n[1] 25.691  0.003 25.735  0.000  0.000\n[1] 25.822  0.005 25.860  0.000  0.000\n\nTurns out attaching takes longer to run.. which is counter intuitive (unless\nthe search to the pos=2 envir takes long time as well) Do you guys know why\nthis is the case? \n-- \nView this message in context: http://www.nabble.com/Memory-management-tf3556238.html#a9929835\nSent from the R help mailing list archive at Nabble.com.\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}