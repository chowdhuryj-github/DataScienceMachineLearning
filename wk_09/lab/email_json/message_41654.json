{"category": "ham", "to_address": "\"Jonathan Lang\" <dataweaver@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: 'x' vs. 'xx'", "body": "On 6/3/07, Jonathan Lang  wrote:\nsnip\n> From what you're saying, I get the impression that you think that \"'-'\n> x 5\" ought to produce a single string of five dashes regardless of\n> whether the context is item or list.  Correct?  (Note: I'm not asking\n> about what the spec says, since what it says is potentially up for\n> revision, given sufficient cause; I'm asking about what you think the\n> spec _should_ say.)  If so, \"cat($n xx *)\" is not an adequate\n> replacement for \"$n x *\", since it produces a list of one-character\n> strings if used in list context.  OTOH, \"~cat($n xx *)\" might work.\nsnip\n\nThe current Perl 5 behavior is\n\ncowens@amans:~$ perl -le 'my @a = (\"-\" x 5, \"foo\", \"-\" x 5); print \"@a\"'\n----- foo -----\ncowens@amans:~$ perl -le 'my @a = ((\"-\") x 5, \"foo\", (\"-\") x 5); print \"@a\"'\n- - - - - foo - - - - -\n\nI am against anything other than that for x or xx without a really\ncompelling reason.\n\nsnip\n>\n> Personally, I would tend to favor the notion that infix: always\n> produces a single string.  With this in mind, I'm now leaning toward\n> \"~cat($a xx $n)\" as the more verbose equivalent of \"$a x $n\".  You\n> always produce a single string, and you do so lazily (according to the\n> way that 'cat' works in item context).\n>\n> --\n> Jonathan \"Dataweaver\" Lang\n\nI assume it is a bug in Pugs implementation of cat, but\npugs> ~cat('a' xx 5)\n\"a a a a a\"\n\nI also am having a hard time figuring out why I would want an infinite\nstring.  My first thought was something like\n\nmy $ten_zeros = substr(cat(0 xx *), 0, 10);\n\nbut that is more clearly written as\n\nmy $ten_zeros = 0 x 10;\n\n"}