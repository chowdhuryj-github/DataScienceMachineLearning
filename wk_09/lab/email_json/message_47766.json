{"category": "ham", "to_address": "sugar@laptop.org", "from_address": "Simon Schamijer <simon@schampijer.de>", "subject": "Re: [sugar] olpc-games osc protocol", "body": "Noah Kantrowitz wrote:\n> Simon Schamijer wrote:\n>> Hi,\n>>\n>> memosono is using the osc protocol \n>> (http://opensoundcontrol.org/spec-1_0) to communicate with the game \n>> server and to talk to the csound server. I think it is an easy to use \n>> protocol and maybe some other games or activities want to use it as well.\n>>\n>> An osc message consists of an OSC address pattern (a path) followed by \n>> an OSC type tag string followed by zero or more OSC arguments.\n>>\n>> '/MEMOSONO/test', 'ifs', [1, 3.4, 'test']\n>>\n>> osc is callback based. On the receiver side the osc path and the type \n>> tag is used to dispatch the right callback.\n>>\n>> A python implementation of the osc protocol and a basic api for \n>> receiving and sending osc messages can be found in the memosono tree in \n>> the osc folder. There exist python bindings for the osc library liblo as \n>> well (http://das.nasophon.de/pyliblo/).\n>>\n>>   \n> What is the benefit of using this instead of SDL_mixer (as exposed\n> through pygame.mixer)? Most games have no need to deal with a remote\n> sound daemon, so I see no actual reason to use this.\n> \n> --Noah\n> \n\nThe question was about the exchange of information between shared \nactivities. I am convinced that dbus/telepathy is the way to go here. \nThere was no idea of a game dealing with a remote sound daemon. Sorry if \nthis was not clear from the mail.\n\nBest,\n    Simon\n_______________________________________________\nSugar mailing list\nSugar@lists.laptop.org\nhttp://lists.laptop.org/listinfo/sugar\n\n"}