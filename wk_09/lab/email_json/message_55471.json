{"category": "ham", "to_address": "\"Gerald (Jerry) Carter\" <jerry@samba.org>", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Re: Comparision of Git & Bzr [was Re: Short HOWTO on using git for\n\tSamba development]", "body": "On Mon, Jun 25, 2007 at 04:25:10PM -0500, Gerald (Jerry) Carter wrote:\n> Jelmer Vernooij wrote:\n> > I really think Bazaar has the best approach of the \n> > various DVCS systems. They are also the (only?) one that\n> > focussed on correctness of model first rather than speed\n> > and that's really breaking them up at the moment.\n> Other than tracking renames, what else do you mean by\n> \"correctness\".  I haven't followed all the DSCM bake-offs\n> and debates.\nI think the Bazaar model is a bit easier to understand than the git\none, especially for people coming from (for example) Subversion. The\nUI is also much nicer. For example, there's no need to worry about sha1s as a\nregular user and the commands make a little bit more sense. It's usable \neasily in a centralized fashion. \n\nGit's data format and representation are intermixed - there's no way\nof upgrading the repository format without changing the revision ids,\nas they are checksums tied to the format. Bazaar has infrastructure\nfor upgrading to newer formats and thus can support things like nested\ntrees in the future without breaking everybody's existing branches. \n\nGit is really fast and efficient at what it is supposed to do: merge between\nand store snapshots of code on POSIX systems. It does not aim to do\nmore than that; for example, win32 will be tricky to get fast because it \nrelies on platform-specific features and its heavy integration with\nthe current data format means it's hard to add new features such as nested \ntrees. Bazaar is trying to be more generic.\n\n> > For the last half year I've used Bazaar for my Samba \n> > code, but while  local performance has improved it's really,\n> > really slow to push across the full history of Samba over the\n> > wire all the time. Until lazy repositories/history horizons\n> > (being able to push/pull a tree without its history) land,\n> > I'll go back to Subversion for my Samba code.\n> I truly like bzr as a project.  I do however, find the\n> branch checkouts in git much more intuitive and having\n> all branches in < 100M is a huge deal for me.  I haven't\n> played with bzr's smart server to compare it with the\n> git-daemon but the latter seems pretty snappy.\nbzr's smart server improves performance significantly, especially for \nhigh-latency connections. The fact that all of Samba's history has to \nbe transmitted makes that its still slow.\n\n> The things I like about git are:\n\n> * git-svnimport and git-svn (for now)\n> * fast-forwards and rebasing branches\nI've never really understood what's so nice about fast-forwards or\nrebasing. What's so useful about it?\n\n> * speed\n> * disk and RAM footprint\nYeah, I have to agree with these. The speed and RAM usage of git are \n\n> Questions about bzr are\n\n> * Will svn2bzr.py actually work on the Samba sv repo now ?\nNot sure about svn2bzr.py, but svn-import (similar command from\nbzr-svn) does. \n\n> * What would the resulting size be?\nI think it was about half the size of the Samba Subversion repository\nlast time I tried it.  Obviously, it would be a lot less when lazy \nrepositories would be supported.\n\n> * What is the status of bzr repositories and cheap branching?\nIt's high on the list for the summer. Most of the current focus is on\nperformance.\n\n\"bzr switch\" changes the branch that is used by the current working\ntree, much in the way you can do so with git. It doesn't change\ndirectory or anything.\n\nCheers,\n\nJelmer\n\n-- \nJelmer Vernooij  - http://jelmer.vernstok.nl/\n 23:41:21 up 78 days, 22:32,  1 user,  load average: 1.34, 0.93, 0.56\n\n"}