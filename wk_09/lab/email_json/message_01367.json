{"category": "ham", "to_address": "Allison Randal <allison@perl.org>", "from_address": "Joshua Isom <jrisom@gmail.com>", "subject": "Re: Minor notes/suggestions on PDD15", "body": "On Apr 10, 2007, at 2:05 AM, Allison Randal wrote:\n\n> Klaas-Jan Stol wrote:\n>> hi,\n>> Some suggestions for PDD15:\n>> 1.\n>> reading PDD15, I noticed that some methods/ops are named using an \n>> underscore to separate words, others don't, for instance:\n>> * get_class (but also \"getclass\" is used in the examples)\n>> * newclass\n>> IMO, it'd be nice to be consistent, and stick to 1 style. (My \n>> personal preference is to leave out the underscore)\n>\n> The get_ standard entered with namespaces, and was itself a \n> modification of the find_ standard from the earlier opcodes for \n> dealing with globals and lexicals. For methods, I'd say the \n> underscores are standard. For opcoess, it's debatable whether \n> underscores or no underscores is standard at this point. I made a note \n> to review it when I get to the Opcodes PDD.\n>\n\nI'm a little mixed on this.  Something like get_args probably shouldn't \nbe getargs or even getArgs, but if you look through ops.num, it can be \nconfusing to know what is what.  Although not for beginners, scanning \nthrough ops.num can help figure out why your code doesn't compile as \nexpected.\n\n>> 2.\n>> Another thing; operations such as find_method return a NULL PMC on \n>> failure. It might be nice to have it configurable for the user so \n>> s/he can choose whether an exception will be thrown, or a NULL PMC is \n>> returned. (IIRC, this can already be done for some ops, it'd be nice \n>> to set it for all ops that may return a NULL PMC).\n>> (as a detail: in PIR this might be represented by a pragma, like: \n>> \".pragma exceptions 1\")\n>\n> This is the same question we have for I/O, and really for large parts \n> of Parrot. I've temporarily held off on this decision until the new \n> exceptions PDD is implemented (widespread exceptions really aren't \n> practical with the current exceptions implementation).\n>\n\nPerhaps a namespace specific code can be used, and maybe applicable for \nnested namespaces such that hll's can easily take advantage, so an hll \ncan say in it's root namespace \"I want exceptions\" and all namespaces \nin that hll default to using exceptions.  A file specific option would \nbe bug prone with something like pbc_merge or whatever, and making it \nnamespace specific seems simple and clean, even if a little too DWIM \nfor parrot.\n\n> Allison\n>\n\n"}