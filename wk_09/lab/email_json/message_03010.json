{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "\"William Constantine\" <wconstan@gmail.com>", "subject": "[R] Calling LAPACK functions directly from R", "body": "I am interested in tapping into LAPACK functionality directly from R.\nUsing R-2.4.1 for Windows, I was able to do so ala:\n\ndyn.load(\"bin/Rlapack.dll\")\nis.loaded(\"dstebz\") # returns TRUE\n\nN <- 100\nNW <- 4\nn.tapers <- 5\ntpW <- (2 * pi * NW)/N\notNmo <- 1:N\nD <- as.double(cos(tpW) * ((N - 1 - 2 * (0:(N - 1)))/2)^2)\nE <- as.double((otNmo * (N - otNmo))/2)\n\nz <- .Fortran(\"dstebz\",\n  \"I\", \"B\", as.integer(N), double(1), double(1),\n  as.integer(N - n.tapers + 1), as.integer(N), double(1),\n  D, E, integer(1), integer(1), double(N), integer(N), integer(N),\n  double(4 * N), integer(3 * N), integer(1))[13:15]\n\nI then extended this approach in developing an R package\nwhere I added the following to the appropriate .First.lib():\n\n  lapack.path <- file.path(R.home(), ifelse(.Platform$OS.type == \"windows\",\n    file.path(\"bin\", \"Rlapack\"), file.path(\"lib\", \"libRlapack\")))\n  dyn.load(paste(lapack.path,.Platform$dynlib.ext, sep=\"\"))\n\nwhich loads the LAPACK shared objects in lib/libRlapack.so for LINUX/UNIX\nand bin/Rlapack.dll for Windows.\n\nQ1: Is there a better or more robust way of loading LAPACK symbols\ninto R, (e.g., one that is not platform dependent)?\n\n---------------------------------------------------------------------------------------------------------------------\n\nMy R package does not currently contain any C or FORTRAN code. However,\nit has been suggested to me that creating a src/Makevars file containing\nthe line:\n\n  PKG_LIBS=$(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)\n\nis a better means of loading LAPACK symbols as it\nwould eliminate the need to use dyn.load() as shown in my .First.lib().\nIn Windows, however, this suggestion fails and results (for example)\nin the above code returning a \"missing dstebz symbol\" error. My understanding\nis that one need only create such a src/Makevar if they are interested in\ntapping into LAPACK functionality from their src/ C or FORTRAN code\nand so am doubtful of this suggestion.\n\nQ2: Given that I have no C/FORTRAN code in my package, am I\ncorrect to assume that creating a Makevars files in such a way\ndoes not eliminate the need to use dyn.load() as in the above?\n\nQ3: For future releases of R, should I expect the path of the LAPACK\nlibrary to remain as they are noted above in my .First.lib() example?\n\nThanks!\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}