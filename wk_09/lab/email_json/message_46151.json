{"category": "ham", "to_address": "r-help@stat.math.ethz.ch", "from_address": "terra <joseclaudio.faria@terra.com.br>", "subject": "[R] biplot package II", "body": "Dear all,\n\nI've been learning biplot (Gabriel, 1971) and some days ago I sent for\nthis list a procedural function with invitation for a collaborative package.\nJari Oksanen made some suggestions and I agree with all.\n\nSo, I reworked the function under the object-oriented programming\n(OOP/S3). I think it is now a good frame for more resources.\n\nBelow it is the function and a small script to learn it:\n\n#===============================================================================\n# Name           : biplot.s\n# Author         : Jose Claudio Faria (DCET/USC/BRAZIL)\n# Date (dd/mm/yy): 9/6/2007 13:33:48\n# Version        : v1.1\n# Aim            : 2d and 3d (under scaterplot3d and rgl packages) biplot\n# Mail           : joseclaudio.faria@terra.com.br\n#===============================================================================\n# Arguments:\n# x             Data (frame or matrix: objects in lines variables in columns)\n#               or a object of the class 'prcomp'.\n# lambda.ini    First eigenvalue to be considered (default is 1)\n# lambda.end    Latest eigenvalue to be considered\n#               (default is 2 to 2d or 3 to 3d)\n# center        Either a logical value or a numeric vector of length equal\n#               to the number of columns of x (TRUE is the default).\n# scale         Either a logical value or a numeric vector of length equal\n#               to the number of columns of x (FALSE is the default).\n# weight        Way of factorize: 'equal', 'objects', 'variables'\n#               ('equal' is the default).\n# plot          Logical to produce or not a graphical representation of\n#               biplot (TRUE is the default).\n# rgl.use       If TRUE the 3d scatter will be under the rgl environment, in\n#               another way the scatterplot3d will be used ( the default).\n# aspect3d      Apparent ratios of the x, y, and z axes of the bounding box.\n# clear3d       Logical to clear or not a 3d graphical representation of\n#               biplot before to make a new (TRUE is the default).\n# simple.axes   Whether to draw simple axes (TRUE or FALSE).\n# box           Whether to draw a box (the default is FALSE).\n# spheres       Logical to represent objects as spheres (FALSE is the default).\n# sphere.factor Relative size factor of sphere representing points; the\n#               default size is dependent on the scale of observations.\n# col.obj       Color of spheres or labels of objects.\n# col.var       Color of lines and labels of variables.\n# var.factor    Factor of expansion/reduction of length lines of the variables.\n#               graphical variables representation (<=1, 1 is the default).\n# cex           Character expansion (for while valid only to graphics and\n#               scatterplot3d, not to rgl, packages).\n#===============================================================================\n# Require       'rgl' and 'scatterplot3d' packages.\n#===============================================================================\n\n# check the necessary packages\nnecessary = c('rgl', 'scatterplot3d')\nif(!all(necessary %in% installed.packages()[, 'Package']))\n   install.packages(c('rgl', 'scatterplot3d'), dep = T)\n\n# Plot 2d with 'graphics' packages\nplot.biplot.2d = function(scores,\n                           g,\n                           hl,\n                           lambda.ini,\n                           lambda.end,\n                           col.obj,\n                           col.var,\n                           var.factor,\n                           cex)\n{\n   plot(scores,\n        xlab=paste('PC', lambda.ini, sep=''),\n        ylab=paste('PC', lambda.end, sep=''),\n        type='n')\n   text(x=g[,1], y=g[,2],\n        labels=rownames(g),\n        cex=cex, col=col.obj)\n   arrows(x0=0, y0=0,\n          x1=hl[,1]*var.factor, y1=hl[,2]*var.factor,\n          length=0.1, angle=20,\n          col=col.var)\n   text(x=hl[,1]*var.factor, y=hl[,2]*var.factor,\n        labels = rownames(hl),\n        cex=cex, col=col.var)\n}\n\n# Plot 3d with 'scatterplot3d' package\nplot.biplot.3d.default = function(scores,\n                                   g,\n                                   hl,\n                                   lambda.ini,\n                                   lambda.end,\n                                   col.obj,\n                                   col.var,\n                                   var.factor,\n                                   spheres,\n                                   box,\n                                   cex)\n{\n   require(scatterplot3d)\n   graph = scatterplot3d(scores,\n                         type = if(spheres) 'p' else 'n',\n                         xlab=paste('PC', lambda.ini, sep=''),\n                         ylab=paste('PC', lambda.ini+1, sep=''),\n                         zlab=paste('PC', lambda.end, sep=''),\n                         grid=F,\n                         box=box,\n                         cex.symbols=cex,\n                         color=col.obj,\n                         pch=20)\n    if(!spheres)\n      text(graph$xyz.convert(g),\n           labels=rownames(g),\n           col=col.obj, cex=cex)\n   for(i in 1:nrow(hl)) {\n     graph$points3d(c(0, hl[i,1]*var.factor),\n                    c(0, hl[i,2]*var.factor),\n                    c(0, hl[i,3]*var.factor),\n                    type='l', col=col.var)\n   }\n   text(graph$xyz.convert(hl*var.factor),\n        labels=rownames(hl),\n        col=col.var, cex=cex)\n}\n\n# Plot 3d with 'rgl' package\nplot.biplot.3d.rgl = function(g,\n                               hl,\n                               lambda.ini,\n                               lambda.end,\n                               simple.axes,\n                               clear3d,\n                               aspect3d,\n                               col.obj,\n                               col.var,\n                               var.factor,\n                               spheres,\n                               sphere.factor,\n                               box)\n{\n   require(rgl)\n   size = max(g)/20 * sphere.factor\n   if (clear3d)\n     clear3d()\n   if (spheres)\n     spheres3d(g, col=col.obj, radius=size, alpha=.5)\n   else\n     text3d(g, texts=rownames(g), col=col.obj, alpha=.5)\n   aspect3d(aspect3d)\n   for(i in 1:nrow(hl)) {\n     segments3d(rbind(matrix(0, nc=3),\n                hl[i,]*var.factor),\n                col=col.var)\n   }\n   text3d(hl*var.factor,\n          texts=rownames(hl),\n          col=col.var)\n   if(simple.axes) {\n     axes3d(c('x', 'y', 'z'))\n     title3d(xlab=paste('PC', lambda.ini, sep=''),\n             ylab=paste('PC', lambda.ini+1, sep=''),\n             zlab=paste('PC', lambda.end, sep=''))\n   }\n   else\n     decorate3d(xlab=paste('PC', lambda.ini, sep=''),\n                ylab=paste('PC', lambda.ini+1, sep=''),\n                zlab=paste('PC', lambda.end, sep=''),\n                box = box)\n}\n\nplot.biplot = function(scores,\n                        g,\n                        hl,\n                        lambda.ini,\n                        lambda.end,\n                        rgl.use,\n                        simple.axes,\n                        clear3d,\n                        aspect3d,\n                        col.obj,\n                        col.var,\n                        var.factor,\n                        spheres,\n                        sphere.factor,\n                        size,\n                        box,\n                        cex)\n{\n   n.values = (lambda.end - lambda.ini + 1)\n   if(n.values == 2) plot.biplot.2d(scores,\n                                    g,\n                                    hl,\n                                    lambda.ini,\n                                    lambda.end,\n                                    col.obj,\n                                    col.var,\n                                    var.factor,\n                                    cex)\n\n   else if(n.values == 3)\n     if (!rgl.use)\n       plot.biplot.3d.default(scores,\n                              g,\n                              hl,\n                              lambda.ini,\n                              lambda.end,\n                              col.obj,\n                              col.var,\n                              var.factor,\n                              spheres,\n                              box,\n                              cex)\n\n     else\n       plot.biplot.3d.rgl(g,\n                          hl,\n                          lambda.ini,\n                          lambda.end,\n                          simple.axes,\n                          clear3d,\n                          aspect3d,\n                          col.obj,\n                          col.var,\n                          var.factor,\n                          spheres,\n                          sphere.factor,\n                          box)\n}\n\n# main function\nbiplot.s = function(x, ...) UseMethod('biplot.s', x)\n\n# x is 'data.frame' or 'matrix'\nbiplot.s.default = function(x,\n                             lambda.ini=1,\n                             lambda.end=2,\n                             center=T,\n                             scale=F,\n                             weight=c('equal', 'objects', 'variables'),\n                             plot=T,\n                             rgl.use=F,\n                             aspect3d=c(1, 1, 1),\n                             clear3d=T,\n                             simple.axes=T,\n                             box=F,\n                             spheres=F,\n                             sphere.factor=1,\n                             col.obj=1,\n                             col.var=2,\n                             var.factor=1,\n                             cex=.6)\n{\n   stopifnot(is.matrix(x) || is.data.frame(x))\n   n.values = (lambda.end - lambda.ini + 1)\n   if(n.values < 2 || n.values > 3)\n     stop('Please, check the parameters: lambda.ini and lambda.end!')\n\n   x = as.matrix(x)\n   x = scale(x, center=center, scale=scale)\n   svdx = svd(x)\n   s2 = diag(sqrt(svdx$d[lambda.ini:lambda.end]))\n   # 'prcomp.default' of 'stats' package (and 'pca' of 'pcurve') is like the below!\n   #s2 = diag(svdx$d[lambda.ini:lambda.end])\n\n   switch(match.arg(weight),\n     equal = {\n       g  = svdx$u[,lambda.ini:lambda.end] %*% s2\n       h  = s2 %*% t(svdx$v[,lambda.ini:lambda.end])\n       hl = t(h)\n     },\n     objects = {\n       g  = svdx$u[,lambda.ini:lambda.end] %*% s2\n       h  = t(svdx$v[,lambda.ini:lambda.end])\n       hl = t(h)\n     },\n     variables = {\n       g  = svdx$u[,lambda.ini:lambda.end]\n       h  = s2 %*% t(svdx$v[,lambda.ini:lambda.end])\n       hl = t(h)\n     })\n\n   if(is.null(rownames(x)))\n     rownames = 1:nrow(x)\n   else\n     rownames = rownames(x)\n   if(is.null(colnames(x)))\n     colnames = paste('V', 1:ncol(x), sep='')\n   else\n     colnames = colnames(x)\n\n   cnames       = paste('PC', lambda.ini:lambda.end, sep='')\n   rownames(g)  = rownames\n   colnames(g)  = cnames\n   rownames(hl) = colnames\n   colnames(hl) = cnames\n   scores       = rbind(g, hl)\n   rownames(scores) = c(rownames, colnames)\n   colnames(scores) = cnames\n\n   res = list(values=svdx$d,\n              explained=round(sum(svdx$d[lambda.ini:lambda.end]^2) /\n                              sum(svdx$d^2), 3),\n              objects=g,\n              variables=hl,\n              all=scores)\n\n   if(plot) {\n     scores = rbind(g, hl*var.factor)\n     scores = rbind(scores, rep(0, n.values)) # to correct visualization\n\n     plot.biplot(scores,\n                 g,\n                 hl,\n                 lambda.ini,\n                 lambda.end,\n                 rgl.use,\n                 simple.axes,\n                 clear3d,\n                 aspect3d,\n                 col.obj,\n                 col.var,\n                 var.factor,\n                 spheres,\n                 sphere.factor,\n                 size,\n                 box,\n                 cex)\n   }\n   invisible(res)\n}\n\n# x is of the class 'prcomp'\nbiplot.s.prcomp = function(x,\n                            lambda.ini=1,\n                            lambda.end=2,\n                            ...)\n{\n   stopifnot(class(x) == 'prcomp')\n   if (!length(x$x))\n     stop(gettextf(\"object '%s' has no objects coordinates!\",\n          deparse(substitute(x))), domain = NA)\n   if (is.complex(x$x))\n     stop(\"biplots are not defined for complex PCA!\")\n\n   n.values = (lambda.end - lambda.ini + 1)\n   if(n.values < 2 || n.values > 3)\n     stop('Please, check the parameters: lambda.ini and lambda.end!')\n\n   # Go back from prcom, i.e, regenerate the x already scaled under 'prcomp'\n   # due to necessity of different kinds of factoration!\n   # I'm still in doubt if this is the best alternative!\n   xreg = x$x %*% (solve(t(x$rotation) %*% x$rotation) %*% t(x$rotation))\n   #xreg = x$x %*% ginv(x$rotation) # another option\n   biplot.s.default(xreg,\n                    lambda.ini,\n                    lambda.end,\n                    center=ifelse(x$center[1] == F, F, T),\n                    scale=ifelse(x$scale[1] == F, F, T),\n                    ...)\n}\n\n#===============================================================================\n# Name           : biplot.s_to_learn\n# Author         : Jose Claudio Faria (DCET/USC/BRAZIL)\n# Date (dd/mm/yy): 9/6/2007 13:33:32\n# Version        : v1.1\n# Aim            : to learn and to test the 'biplot.s' function\n# Mail           : joseclaudio.faria@terra.com.br\n#===============================================================================\n\n#===============================================================================\n# to debug 'biplot.s' functions\n#===============================================================================\n#mtrace(biplot.s.2d, T)\n#mtrace(biplot.s.3d.default, T)\n#mtrace(biplot.s.3d.rgl, T)\n#mtrace(biplot.s.default, T)\n#mtrace(biplot.s.prcomp, T)\n#\n#mtrace(biplot.s.2d, F)\n#mtrace(biplot.s.3d.default, F)\n#mtrace(biplot.s.3d.rgl, F)\n#mtrace(biplot.s.default, F)\n#mtrace(biplot.s.prcomp, F)\n\n#===============================================================================\n# example: Gabriel(1971)\n#===============================================================================\ngabriel.1971 = matrix(c(98.2, 97.2, 97.3, 96.9, 97.6, 94.4, 90.2, 94.0, 70.5,\n                         78.8, 81.0, 65.6, 73.3, 91.4, 88.7, 82.2, 84.2, 55.1,\n                         14.4, 17.6,  6.0,  9.6, 56.2, 69.5, 31.8, 19.5, 10.7,\n                         86.2, 82.1, 54.5, 74.7, 87.2, 80.4, 68.6, 65.5, 26.1,\n                         32.9, 30.3, 21.1, 26.9, 80.1, 74.3, 46.3, 36.2,  9.8,\n                         73.0, 70.4, 53.0, 60.5, 81.2, 78.0, 67.9, 64.8, 57.1,\n                          4.6,  6.0,  1.5,  3.4, 12.7, 23.0,  5.6,  2.7,  1.3,\n                         29.2, 26.3,  5.3, 10.5, 52.8, 49.7, 21.7,  9.5,  1.2),\n                         nr=8, byrow=T)\n\ndimnames(gabriel.1971) = list(c('toilet', 'kitchen', 'bath', 'eletricity',\n                                 'water', 'radio', 'tv set', 'refrigerator'),\n                               c('CRISTIAN', 'ARMENIAN', 'JEWISH', 'MOSLEM',\n                                 'MODERN_1', 'MODERN_2', 'OTHER_1', 'OTHER_2',\n                                 'RUR'))\n\n#===============================================================================\n# 2d with graphics package\n#===============================================================================\nx = gabriel.1971\nbp1 = biplot.s(x, plot=F)\nbp1$val\nbp1$expl\nbp1$obj\nbp1$var\nbp1$all\n\nbiplot.s(x, center=F, scale=F)\nbiplot.s(x, center=T, scale=F)\nbiplot.s(x, center=T, scale=T)\nbiplot.s(x, lambda.ini=2, lambda.end=3)\nbiplot.s(x, lambda.ini=2, lambda.end=3, scale=T)\nbiplot.s(x, scale=T, weight='eq')\nbiplot.s(x, scale=T, weight='ob')\nbiplot.s(x, scale=T, weight='va')\n\n#===============================================================================\n# 3d with scatterplot3d package\n#===============================================================================\nx = gabriel.1971\nbp2 = biplot.s(x, lambda.end=3, plot=F)\nbp2$val\nbp2$expl\nbp2$obj\nbp2$var\nbp2$all\n\nbiplot.s(x, lambda.end=3)\nbiplot.s(x, lambda.ini=2, lambda.end=4)\nbiplot.s(x, lambda.end=3, spheres=T, box=T)\nbiplot.s(x, lambda.end=3, col.obj='gray', col.var='red', var.factor=.8)\nbiplot.s(x, lambda.end=3, center=T, scale=T, weight='eq')\nbiplot.s(x, lambda.end=3, center=T, scale=F, weight='eq')\nbiplot.s(x, lambda.end=3, center=T, scale=T, weight='ob')\nbiplot.s(x, lambda.end=3, center=T, scale=F, weight='ob')\nbiplot.s(x, lambda.end=3, center=T, scale=T, weight='va')\nbiplot.s(x, lambda.end=3, center=T, scale=T, weight='va', var.factor=.5)\n\n#===============================================================================\n# 2d associated with 'prcomp' function ('stas' package)\n#===============================================================================\nbiplot.s(prcomp(gabriel.1971, center=T, scale=F), plot=T)\nbiplot.s(prcomp(gabriel.1971, center=T, scale=T), plot=T)\n\npc = prcomp(gabriel.1971, center=T, scale=F)\nbiplot(pc) # to compare\nbp = biplot.s(pc)\nbp$val\nbp$expl\nbp$obj\nbp$var\nbp$all\n\nbiplot.s(pc, lambda.ini=2, lambda.end=4)\nbiplot.s(pc, lambda.end=3, spheres=T, box=T)\nbiplot.s(pc, lambda.end=3, col.obj='gray', col.var='red', var.factor=.8)\nbiplot.s(pc, lambda.end=3, weight='eq')\nbiplot.s(pc, lambda.end=3, weight='ob')\nbiplot.s(pc, lambda.end=3, weight='va')\nbiplot.s(pc, lambda.end=3, weight='va', var.factor=.5)\n\n#===============================================================================\n# 3d with rgl package\n#===============================================================================\nx = gabriel.1971\nclear3d()\nrgl.bringtotop(stay=T)\nbiplot.s(x, lambda.end=3, rgl.use=T)\nrgl.bringtotop(stay=T)\nbiplot.s(x, lambda.end=3, rgl.use=T, box=T, aspect3d=c(1.5, 1.5, 1))\nrgl.bringtotop(stay=T)\nbiplot.s(x, lambda.end=3, rgl.use=T, col.obj=3, col.var=4, var.factor=.5)\nrgl.bringtotop(stay=T)\nbiplot.s(x, lambda.end=3, rgl.use=T, spheres=T)\nrgl.bringtotop(stay=T)\nbiplot.s(x, lambda.end=3, rgl.use=T, weight='eq')\nrgl.bringtotop(stay=T)\nbiplot.s(x, lambda.end=3, rgl.use=T, weight='ob')\nrgl.bringtotop(stay=T)\nbiplot.s(x, lambda.end=3, rgl.use=T, weight='va')\nrgl.bringtotop(stay=T)\nbiplot.s(x, lambda.end=3, rgl.use=T, weight='va', var.factor=.09)\n\nrgl.bringtotop(stay=T)\nbiplot.s(prcomp(gabriel.1971, center=T, scale=F), lambda.end=3, rgl.use=T, plot=T)\n\nRegards,\n-- \n/////\\\\\\\\\\/////\\\\\\\\\\/////\\\\\\\\\\/////\\\\\\\\\\\n  Jose Claudio Faria\n  Brasil/Bahia/UESC/DCET\n  Estatistica Experimental/Prof. Titular\n    joseclaudio.faria@terra.com.br\n    joseclaudio.faria@oi.com.br\n    jc_faria@uesc.br\n    jc_faria@uol.com.br\n  Tels:\n    73-3634.2779 (res - Ilheus/BA)\n    19-3435.1536 (res - Piracicaba/SP) *\n    19-9144.8979 (cel - Piracicaba/SP) *\n/////\\\\\\\\\\/////\\\\\\\\\\/////\\\\\\\\\\/////\\\\\\\\\\\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}