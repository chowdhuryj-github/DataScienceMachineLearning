{"category": "ham", "to_address": "\"Gerald (Jerry) Carter\" <jerry@samba.org>", "from_address": "James Peach <jpeach@samba.org>", "subject": "Re: Broken idmap interface design", "body": "On 19/04/2007, at 7:49 AM, Gerald (Jerry) Carter wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Simo,\n>\n>> On Thu, 2007-04-19 at 23:30 +1000, Luke Howard wrote:\n>>> Sorry to jump in here, one thing I'd like to see\n>>> in idmap_ad is support for using the Global Catalog. Shouldn't\n>>> be too hard. Thoughts?\n>>\n>> Well IIRC rfc2307 attributes are not exposed via GC by\n>> default, so to use it we must have fallback code in place.\n>> Not that hard, but I guess this is more of a 3.0.26 feature.\n>> I am working only to stabilize the code for offline\n>> usage right now.\n>\n> It's actually worse than that.  The idmap interface is\n> badly broken.  I hate to say this, but the calls into\n> winbindd from the idmap child has to go.  I know how you\n> arrived at the design assumptions.\n>\n> You designed the unixids_to_sids() and sids_to_unixids()\n> with the assumption that the idmap plugin would have\n> knowledge about the SID type.  I didn't catch this\n> because the backend I'm using for primary testing operates\n> similarly to idmap_ad and can obtain the SID type based\n> on LDAP searches.  This is ok for something like idmap_ad\n> which can get the information.  But the general and\n> default case is idmap_tdb (or even idmap_ldap).\n\nThere's two cases for mapping from SIDs to UGIDs.\n\nFirst case is where full SIDs are explicitly stored in the directory  \nor have a static partitioning (like Unix Users and Unix Groups). In  \nthis case, you don't need to be told what kind of ID the caller is  \nlooking for, because the SID is globally unique, and must only map to  \none ID.\n\nSecond case is where the SID is dynamically generated from other  \ninformation in the directory. In this case, knowing the type of ID in  \nadvance helps a lot and can prevent you generating bogus SIDs.\n\nI take it that it is this second case that is problematic?\n\n> Requiring the idmap_tdb code (or idmap_rid) to issues a\n> winbindd client call is wrong and a layering violation.  The\n> caller should specify the SID type which is exactly what\n> the WINBINDD_SID_TO_UID, et. al. calls used to do.\n\nI don't see any winbind client calls in idmap_tdb.c. Could you spell  \nthis out a bit more?\n\n> Right now I'm going to do several things in order to get\n> the code to a release point.\n>\n> (a) Remove WINBINDD_SIDS_TO_XIDS from winbindd_nss.h to\n>    prevent us from having to support the broken call in\n>    future releases.  The existing idmap_methods API will\n>    not change but will become solely an internal interface\n>    used by winbindd.\n>\n> (b) Overload the id_map.xid.type to be specified by the caller\n>    and not filled by the idmap backend.\n\nSo existing idmap modules will need to be changed?\n\n--\nJames Peach | jpeach@samba.org\n\n"}