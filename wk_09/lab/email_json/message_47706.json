{"category": "ham", "to_address": "\"Gabor Grothendieck\" <ggrothendieck@gmail.com>", "from_address": "\"Christophe Pallier\" <christophe@pallier.org>", "subject": "Re: [R] Read Windows-like .INI files into R data structure?", "body": "Ah! I forgot to mention that it is possible to call awk from R:\n\na <- system(\"awk -F'=' '/\\\\[/{a=$1;next}{print $1,$2,a}' example.ini\",\nintern=T)\nz <- textConnection(a)\nread.table(z)\n\n\nChristophe\n\n\nOn 6/14/07, Christophe Pallier  wrote:\n>\n> On 6/14/07, Gabor Grothendieck  wrote:\n> >\n> > Here is yet another solution.  This is the simplest so far.\n> > Lines.raw is as before and the output is a 3 column character\n> > matrix.\n>\n> section <- \"\"\n> > f <- function(x) {\n> >         if (length(x) == 1) section <<- gsub(\"[\\\\[\\\\]]\", \"\", x)\n> >         if (length(x) <= 1) return()\n> >         return(c(x, section))\n> > }\n> > # Lines <- readLines(\"myfile.ini\")\n> > Lines <- readLines(textConnection(Lines.raw))\n> > do.call(\"rbind\", lapply(strsplit(Lines, \"=\"), f))\n>\n>\n>\n> The corresponding awk code fits in one line '/\\[/{a=$1;next}{print\n> $1,$2,a}'.\n>\n> With the example.ini:\n>\n> $ awk -F\"=\" '/\\[/{a=$1;next}{print $1,$2,a}' example.ini\n> var1 value1 [Section1]\n> var2 value2 [Section1]\n> A value3 [Section2]\n> B value4 [Section2]\n>\n> The output can then be imported in R with read.table.\n>\n> I know, I am not playing by the rules here... :)\n> But with programming languages, like with human languages, it pays to be\n> bi or tri-lingual (or polyglot, if one can).\n>\n> I also realise that under Windows, it means using the command line,\n> something that  not so many people are comfortable with nowadays.\n>\n> One reason people insist on using only one language to do everything may\n> be due to the awkwardness and limitations of the default scripting language\n> under Windows (DOS). Having everything done inside one single R script can\n> seem simpler. But a divide-and-conquer approach, with a few small scripts,\n> can actually work better in some complex cases.\n>\n> I tend to do as much as possible in R but for all serious data analysis\n> tasks, I use Makefile to \"glue\" the various stages of processing. Data\n> preprocessing stages (performed with R or other tools) create files that are\n> then processed with R. One advantage is that preprocessing is performed only\n> when raw input data change; but the most important, is that when I come back\n> years later, I can follow the exact flow of transformations.\n> Again, \"make\"  (like awk  or R) is not without limits and idiosyncrasies.\n> If someone has a simpler solution, I am interested to hear about it.\n>\n> Christophe\n>\n>\n>\n>\n>\n> --\n> Christophe Pallier ( http://www.pallier.org)\n>\n\n\n\n-- \nChristophe Pallier (http://www.pallier.org)\n\n\t[[alternative HTML version deleted]]\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}