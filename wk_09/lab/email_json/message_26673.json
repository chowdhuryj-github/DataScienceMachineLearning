{"category": "ham", "to_address": "\"'Sugar List'\" <sugar@laptop.org>, John Gilmore <gnu@toad.com>,\n   Don Hopkins <dhopkins@DonHopkins.com>", "from_address": "Don Hopkins <dhopkins@DonHopkins.com>", "subject": "[sugar] Read activity modifications", "body": "I've been working on making the Read activity usable in book mode, and \nadding other improvements.\nI'm updating it to work against the latest build, and I'll put up a tar \nfile soon.\nHere's a summary of my changes and ideas for further improvements.\n\n    -Don\n\nLoading icons for gtk buttons from SVG files.\n  Wrote a LoadIcon(fileName) function that loads an svg file and returns \na GTK pixbuf.\n    TODO: support different file formats (XPM, PNG, PDF, etc).\n    TODO: support scaling of the image to a particular size.\n    TODO: caching images according to file name and size.\n  Made a gtk.IconFactory for the activity.\n    Loop over all SVG files in the icons subdirectory of the bundle path.\n      Loaded all SVG files into icon pixbufs, wrapped them in IconSets, \nand added them to the icon manager.\n      TODO: make a smart IconFactory that supports lazy loading of icons.\n  Icons are named the same as the file name with the extension stripped \noff.\n  Icons should have a prefix like \"read-\" to distinguish them from other \nicons (like the \"stock-\" icons).\n  GTK widgets can be configured to use named icons by setting their \nstock-id property.\n\nImplement a new set of toolbars and buttons using custom \"Action\" \nclasses and UIManager.\n  Defined SugarAction, SugarToggleAction, SugarRadioAction subclasses of \nstock GTK Action classes, mixing in SugarActionMixin.\n  Defined SugarToolButton, SugarToggleToolButton, SugarRadioToolButton \nsubclasses of GTK ToolButton classes, mixing in SugarWidgetMixin.\n  Defined SugarActionMixin and SugarWidgetMixin classes for shared \nSugar-specific behavior and state.\n    Added support for \"allowed\" property, like \"sensitive\" (enabled), \nbut it will let you set the focus to the control and see a tooltip \ntelling the reason it's not allowed.\n    Added support for \"reason\" property, a translated text string that \nexplains the reason an action is not allowed to the user.\n    TODO: Implement visual indication of \"allow\" state.\n    TODO: Make actions show tooltip with disallow reason if user tries \nto invoke un-allowed control, but not invoke callback.\n  Rewrote gtk.ActionGroup methods add_actions, add_toggle_actions, \nadd_radio_actions in Python instead of C (from pygtk).\n    Instead of making them differently named class-specific methods of \ngtk.ActionGroup, I re-factored them into generic \"add_actions\" methods \non the corresponding classes.\n    So instead of calling action_group.add_toggle_actions(entries), you \ncall SugarToggleAction.add_actions(action_group, entries), or whatever \nclass you want to add.\n    This makes it much easier to extend the system with your own sets of \nActions and Widgets, by subclassing SugarAction, and mixin \nSugarWidgetMixin into the widget.\n      TODO: Implement search string entry field, page number entry \nfield, page count label, as application specific Action/Widget sets.\n    The gtk.ActionGroup add_*_actions api took a list of entries, where \neach entry was a tuple with positional arguments filled with \"None\" \nplaceholders.\n    That was brittle and hard to use, and impossible to extend by adding \nnew parameters.\n    Instead, the new interface takes a list of entries, where each entry \nis a dictionary instead of a tuple, so it's possible to pass additional \narguments and omit unused keys.\n    The dictionary entry based API is more open-ended and flexible, so \nwe can seamlessly add additional parameters in the future without \nbreaking the API.\n    Defined optional \"action_class\" parameter to each entry that \nspecifies the class to make, which defaults to \"self\", the class you're \ncalling the add_action class method on.\n      So subclasses of Action will automatically get instances of their \nclass when you call add_action on their class.\n      TODO: Factor out any class-specific behavior from add_actions into \nclass method hooks, so Action subclasses can define their own hooks \ninstead of redefining their own entire add_action methods.\n    Defined optional *args and **kwargs parameters to add_actions, as \nwell as to each entry, which are merged and passed to the callback.\n    You can specify additional parameters to each set of actions you \ncreate at once, and to each individual action, which makes it possible \nto define more general purpose actions that you can customize with \nparameters and additional callbacks, instead of defining a new special \npurpose Action class for each control.\n\nMade a UIManager to create the toolbars from an XML user interface \ndescription.\n  TODO: Implement an open-ended extensible Pythonic SugarUIManager.\n  TODO: Allow the applilcation to register new action classes \ncorresponding to XML elements in the user interface descriptions.\n  TODO: Extend the SugarUIManager to support other kinds of interfaces \nbeyond toolbars and menus: gamepad navigation, pie menus, etc.\n\nImplement enabling and disabling actions and toolbar buttons.\n  Actions automatically take care of enabling and disabling all of their \ncorresponding toolbar buttons and menu items (proxies).\n  Implemented a higher level _set_action_sensitive(self, action_name, \nsensitive, reason=None) interface for setting the sensitivity and reason \nan action is insensitive, which lets you pass a translated string that \ndescribes why an action is disabled, that helps the user figure out what \nto do about it.\n  Wrote code to call _set_action_sensitive at the appropriate time to \nenable and disable evince controls (back page, next page, first page, \nlast page, zoom in, zoom out).\n  TODO: Use \"allowed\" instead of \"sensitive\" to disable controls, so the \nuser can navigate to them and see tooltips about why they're disabled.\n\nDefined SugarActions for most of the interesting evince functions, \nSugarToggleActions for boolean properties, SugarRadioAction for \nenumerated properties.\nDefined toolbars with buttons and separators to control evince.\nMade icons for all of the buttons (first cut placeholder programmer art \nfor now: round buttons with tiny text labels).\n\nDefined a _bundle_path instance variable in XbookActivity that tells \nwhere the root of the Read activity bundle is.\nAdded a _startup_file_name instance variable to XbookActivity, \ninitialized to \"userguide.pdf\" that's read from the documents \nsub-directory of the bundle_path.\n  This is currently to help me test the Read activity, because the \"open \nfile\" button is no longer supported.\n  But the default startup document could be used to throw up a useful \nintroduction with links to libraries and documentation. (Once links in \nPDF documents work properly).\n\nWrote a \"MANIFEST\" file that lists all the files to be installed into \nthe activity directory.\n  If you don't have a \"MANIFEST\" file, the activity builder looks at the \nsubversion source code control system to figure out which files to \nbundle, which doesn't work during development before the files have been \nadded to source code control.\n\n    -Don\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}