{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "jelmer@samba.org", "subject": "svn commit: samba r22336 - in branches/SAMBA_4_0: . source/param\n\tsource/torture/local", "body": "Author: jelmer\nDate: 2007-04-18 13:28:04 +0000 (Wed, 18 Apr 2007)\nNew Revision: 22336\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22336\n\nLog:\nAdd some more share tests.\nModified:\n   branches/SAMBA_4_0/\n   branches/SAMBA_4_0/source/param/share_ldb.c\n   branches/SAMBA_4_0/source/torture/local/share.c\n\n\nChangeset:\n\nProperty changes on: branches/SAMBA_4_0\n___________________________________________________________________\nName: bzr:merge\n...skipped...\n\nModified: branches/SAMBA_4_0/source/param/share_ldb.c\n===================================================================\n--- branches/SAMBA_4_0/source/param/share_ldb.c\t2007-04-18 12:50:55 UTC (rev 22335)\n+++ branches/SAMBA_4_0/source/param/share_ldb.c\t2007-04-18 13:28:04 UTC (rev 22336)\n@@ -289,7 +289,7 @@\n \tNTSTATUS ret;\n \tint err, i, j;\n \n-\tfor (i = 0, j = 0; i < count || j != 0x03; i++) {\n+\tfor (i = 0, j = 0; i < count && j != 0x03; i++) {\n \t\tif (strcasecmp(info[i].name, SHARE_TYPE) == 0) j |= 0x02;\n \t\tif (strcasecmp(info[i].name, SHARE_PATH) == 0) j |= 0x01;\n \t\tif (strcasecmp(info[i].name, SHARE_NAME) == 0) {\n\nModified: branches/SAMBA_4_0/source/torture/local/share.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/local/share.c\t2007-04-18 12:50:55 UTC (rev 22335)\n+++ branches/SAMBA_4_0/source/torture/local/share.c\t2007-04-18 13:28:04 UTC (rev 22336)\n@@ -25,10 +25,10 @@\n #include \"torture/torture.h\"\n \n static bool test_list_empty(struct torture_context *tctx, \n-\t\t\t\t\t\t\tvoid *tcase_data, \n-\t\t\t\t\t\t\tvoid *test_data)\n+\t\t\t\t\t\t\tconst void *tcase_data, \n+\t\t\t\t\t\t\tconst void *test_data)\n {\n-\tstruct share_context *ctx = tcase_data;\n+\tstruct share_context *ctx = discard_const(tcase_data);\n \tint count;\n \tconst char **names;\n \n@@ -38,19 +38,157 @@\n \treturn true;\n }\n \n+static bool test_create(struct torture_context *tctx, \n+\t\t\t\t\t\t\tconst void *tcase_data, \n+\t\t\t\t\t\t\tconst void *test_data)\n+{\n+\tstruct share_context *ctx = discard_const(tcase_data);\n+\tint count;\n+\tconst char **names;\n+\tint i;\n+\tbool found = false;\n+\tstruct share_info inf[] = { \n+\t\t{ SHARE_INFO_STRING, SHARE_TYPE, discard_const_p(void *, \"IPC$\") },\n+\t\t{ SHARE_INFO_STRING, SHARE_PATH, discard_const_p(void *, \"/tmp/bla\") }\n+\t};\n+\tNTSTATUS status;\n+\n+\tstatus = share_create(ctx, \"bloe\", inf, 2);\n+\n+\tif (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))\n+\t\ttorture_skip(tctx, \"Not supported by backend\");\n+\n+\ttorture_assert_ntstatus_ok(tctx, status, \"create_share failed\");\n+\n+\ttorture_assert_ntstatus_ok(tctx, share_list_all(tctx, ctx, &count, &names),\n+\t\t\t\t\t\t\t   \"share_list_all failed\");\n+\n+\ttorture_assert(tctx, count >= 1, \"creating share failed\");\n+\n+\n+\tfor (i = 0; i < count; i++) {\n+\t\tfound |= strcmp(names[i], \"bloe\") == 0;\n+\t}\n+\n+\ttorture_assert(tctx, found, \"created share found\");\n+\n+\treturn true;\n+}\n+\n+\n+static bool test_create_invalid(struct torture_context *tctx, \n+\t\t\t\t\t\t\tconst void *tcase_data, \n+\t\t\t\t\t\t\tconst void *test_data)\n+{\n+\tstruct share_context *ctx = discard_const(tcase_data);\n+\tNTSTATUS status;\n+\n+\tstatus = share_create(ctx, \"bla\", NULL, 0);\n+\n+\tif (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))\n+\t\ttorture_skip(tctx, \"Not supported by backend\");\n+\n+\ttorture_assert_ntstatus_equal(tctx, NT_STATUS_INVALID_PARAMETER, \n+\t\t\t\t\t\t\t\t  status,\n+\t\t\t\t\t\t\t   \"create_share failed\");\n+\n+\ttorture_assert_ntstatus_equal(tctx, NT_STATUS_INVALID_PARAMETER, \n+\t\t\t\t\t\t\t\t  share_create(ctx, NULL, NULL, 0),\n+\t\t\t\t\t\t\t   \"create_share failed\");\n+\n+\treturn true;\n+}\n+\n+static bool test_share_remove_invalid(struct torture_context *tctx, \n+\t\t\t\t\t\t\tconst void *tcase_data, \n+\t\t\t\t\t\t\tconst void *test_data)\n+{\n+\tstruct share_context *ctx = discard_const(tcase_data);\n+\tNTSTATUS status;\n+\n+\tstatus = share_remove(ctx, \"nonexistant\");\n+\n+\tif (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))\n+\t\ttorture_skip(tctx, \"Not supported by backend\");\n+\n+\ttorture_assert_ntstatus_equal(ctx, status, NT_STATUS_UNSUCCESSFUL, \n+\t\t\t\t\t\t\t\t  \"remove fails\");\n+\n+\treturn true;\n+}\n+\n+\n+\n+static bool test_share_remove(struct torture_context *tctx, \n+\t\t\t\t\t\t\tconst void *tcase_data, \n+\t\t\t\t\t\t\tconst void *test_data)\n+{\n+\tstruct share_context *ctx = discard_const(tcase_data);\n+\tstruct share_info inf[] = { \n+\t\t{ SHARE_INFO_STRING, SHARE_TYPE, discard_const_p(void *, \"IPC$\") },\n+\t\t{ SHARE_INFO_STRING, SHARE_PATH, discard_const_p(void *, \"/tmp/bla\") }\n+\t};\n+\tNTSTATUS status;\n+\n+\tstatus = share_create(ctx, \"blie\", inf, 2);\n+\n+\tif (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))\n+\t\ttorture_skip(tctx, \"Not supported by backend\");\n+\n+\ttorture_assert_ntstatus_ok(tctx, status,\n+\t\t\t\t\t\t\t   \"create_share failed\");\n+\n+\ttorture_assert_ntstatus_ok(tctx, share_remove(ctx, \"blie\"), \n+\t\t\t\t\t\t\t   \"remove failed\");\n+\n+\treturn true;\n+}\n+\n+static bool test_double_create(struct torture_context *tctx, \n+\t\t\t\t\t\t\tconst void *tcase_data, \n+\t\t\t\t\t\t\tconst void *test_data)\n+{\n+\tstruct share_context *ctx = discard_const(tcase_data);\n+\tstruct share_info inf[] = { \n+\t\t{ SHARE_INFO_STRING, SHARE_TYPE, discard_const_p(void *, \"IPC$\") },\n+\t\t{ SHARE_INFO_STRING, SHARE_PATH, discard_const_p(void *, \"/tmp/bla\") }\n+\t};\n+\tNTSTATUS status;\n+\n+\tstatus = share_create(ctx, \"bla\", inf, 2);\n+\n+\tif (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))\n+\t\ttorture_skip(tctx, \"Not supported by backend\");\n+\n+\ttorture_assert_ntstatus_ok(tctx, status,\n+\t\t\t\t\t\t\t   \"create_share failed\");\n+\n+\ttorture_assert_ntstatus_equal(tctx, NT_STATUS_UNSUCCESSFUL, \n+\t\t\t\t\t\t\t\t  share_create(ctx, \"bla\", inf, 2),\n+\t\t\t\t\t\t\t   \"create_share failed\");\n+\n+\treturn true;\n+}\n+\n static void tcase_add_share_tests(struct torture_tcase *tcase)\n {\n \ttorture_tcase_add_test(tcase, \"list_empty\", test_list_empty, NULL);\n+\ttorture_tcase_add_test(tcase, \"share_create\", test_create, NULL);\n+\ttorture_tcase_add_test(tcase, \"share_remove\", test_share_remove, NULL);\n+\ttorture_tcase_add_test(tcase, \"share_remove_invalid\", test_share_remove_invalid, NULL);\n+\ttorture_tcase_add_test(tcase, \"share_create_invalid\", test_create_invalid, \n+\t\t\t\t\t\t   NULL);\n+\ttorture_tcase_add_test(tcase, \"share_double_create\", test_double_create, NULL);\n }\n \n static BOOL setup_ldb(struct torture_context *tctx, void **data)\n {\n-\treturn NT_STATUS_IS_OK(share_get_context_by_name(tctx, \"ldb\", data));\n+\treturn NT_STATUS_IS_OK(share_get_context_by_name(tctx, \"ldb\", (struct share_context **)data));\n }\n \n static BOOL setup_classic(struct torture_context *tctx, void **data)\n {\n-\treturn NT_STATUS_IS_OK(share_get_context_by_name(tctx, \"classic\", data));\n+\treturn NT_STATUS_IS_OK(share_get_context_by_name(tctx, \"classic\", (struct share_context **)data));\n }\n \n static BOOL teardown(struct torture_context *tctx, void *data)\n\n"}