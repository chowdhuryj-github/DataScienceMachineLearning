{"category": "ham", "to_address": "Thomas Wittek <mail@gedankenkonstrukt.de>", "from_address": "Garrett Cooper <youshi10@u.washington.edu>", "subject": "Re: Is Perl 6 too late?", "body": "Thomas Wittek wrote:\n> Moritz Lenz schrieb:\n>>> What makes Perl hard to read is the excessive use of special characters\n>>> (/\\W/).\n>>\n>> I disagree: The make it look ugly, but not hard to read.\n> \n> Even if it's \"only\" ugly: To what advantage? I don't think ugliness is a \n> good characteristic of a programming language.\n> \n>>> Global variables with cryptic names, that no beginner can make any sense\n>>> of by reading it. And after not working with \"$<\" for some months I\n>>> can't remember it either, although I've got quite some Perl experience.\n>>\n>> Well, most of them are gone or renamed to more readable ones in p6.\n> \n> I hope so. I could only find the counterparts for __PACKAGE__ etc. in \n> S02. I didn't find the one for e.g. $<.\n> \n>>> Additionally I'm not a friend of sigils: \n>>\n>> Then you shouldn't program in perl. Really.\n> \n> Reason? I still haven't seen a good justification for sigils.\n> To allow arrays and scalars and subs to have the same name (besides the \n> sigil) although they have different content? No good idea I think.\n> I also can't remember that I ever named a variable like a \"reserved \n> word\" or operator. And even if I could, I'd consider it to be bad style.\n\nNo one mentioned that if it wasn't for sigils, many strings would be \nincreased, length-wise, to do operator concatentation. If it wasn't for \nthat then simple string insertions couldn't be used.\n\nPlus sigils are a defacto form of representing variables in other \nlanguages, like Unix scripting and PHP. I'd rather read a data item \n[scalar, { associative, 1-D } array, list, class object ] and have a \ngood idea of what the target data type is. References is the only data \ntype ones that introduces some sort of mystery to this mix, IMO.\n\n>>> I would also like semicolons to be optional. \n>>\n>> Most people don't ;-).\n> \n> Oh, really? Source? :)\n> I think they were invented to allow easier parsing and not easier coding.\n> E.g. in JavaScript, Python, Ruby and Groovy they are optional or even \n> don't exist. As I said, there are much more cases where you wouldn't \n> need them but have to write them than vice versa.\n> Optional semicolons save keystrokes, eye pain and stupid syntactic \n> errors. And if you still like them, you could just use them, which is \n> the definition of \"optional\".\n\nAlmost all mainstream languages do it though, and it serves as nice \nvisual breaks in source. I honestly hate lack of semi-colons, with the \nexception of shell scripts, all of which I produce that are less than \n150 lines long.\n\nThen again I don't do more than 2 sets of statements in a given line for \nshell scripts either, and I don't so the same with Perl.\n\n\n\nThe only thing I hate about Perl with required formatting is the silly \nbraces. If it's one line and separated by visible whitespace, why is the \nonly option available to me the\n\n\tstatement_1 if(statement_2);\n\nor\n\n\tstatement_1 unless(statement_2);\n\nsyntax? Seems less readable than:\n\n\tif(statement_2)\n\t\tstatement_1\n\nor\n\n\tunless(statement_2)\n\t\tstatement_1\n\nThe only legitimacy for the first set of formats would be if in fact you \nwere reading off the logic statement in a left-to-right language. But \nthen again many languages don't follow that convention (Japanese, \nKorean, etc etc for instance).\n\nThe same opinion goes for all loops, except the\n\n\tdo { statement } ( { while, until } );\n\nvariety.\n\n\n\n>>> I really like the Python way of doing it: Set the variables type on the\n>>> assignment and remember it. The (fewer) operators now work according to\n>>> the type of the operands. No implicit (and error prone) type casting.\n>>> That way seems to be the best compromise of easiness and type safety.\n>>\n>> Well, if you like the python way, feel free to code in python.\n> \n> Oh, if I didn't like Perl, why should I care about posting my ideas here?\n> Perl has stolen the largest part of the language from other languages.\n> Why not do so again by adopting good ideas.\n> \n>> Don't get me wrong, there's nothing bad in writing some critics, but\n>> yours is impossible to realize in Perl 6\n> \n> Admittedly I'm much too late and I didn't expect applause for my critics \n> -- but at least I hoped to get a discussion based on arguments.\n> \n>  > and therefore are it's hard to call it constructive.\n> \n> Unfortunately I already thought this. Even if everyone agreed that \n> sigils (or forced semicolons, or tons of operators, ...) are more bad \n> than good (and this seems like persuading the pope to allow homosexual \n> muslims to marry with priests) the design process is probably too far to \n> introduce such dramatic changes.\n> Sadly.\n\nYes, probably about as likely as Neo-Nazi's getting married to Haccidic \nJewish people with Satanic priests presiding.\n\n-Garrett\n\n"}