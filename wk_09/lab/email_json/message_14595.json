{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 11998: Allow using system python. in\n\tfile:///home/jelmer/bzr.samba/python/", "body": "At file:///home/jelmer/bzr.samba/python/\n\n------------------------------------------------------------\nrevno: 11998\nrevision-id: jelmer@samba.org-20070424105253-27pda62b1kn6bwbj\nparent: jelmer@samba.org-20070423231935-oh9d9hbudrs8jfdh\ncommitter: Jelmer Vernooij \nbranch nick: python\ntimestamp: Tue 2007-04-24 12:52:53 +0200\nmessage:\n  Allow using system python.\nremoved:\n  source/lib/python/Modules/linuxaudiodev.c linuxaudiodev.c-20070423105804-3mrp9flhlt8pjj8v-398\nmodified:\n  source/build/m4/public.m4      svn-v2:7274@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fbuild%2fm4%2fpublic.m4\n  source/build/smb_build/makefile.pm svn-v2:3690@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fbuild%2fsmb_build%2fmakefile.pm\n  source/lib/ldb/libldb.m4       svn-v2:18109@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fldb%2flibldb.m4\n  source/lib/python/config.m4    configure.in-20070423105804-3mrp9flhlt8pjj8v-11\n  source/lib/python/config.mk    makefile.pre.in-20070423105804-3mrp9flhlt8pjj8v-5\n  source/lib/tdb/libtdb.m4       svn-v2:18108@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2ftdb%2flibtdb.m4\n  source/libcli/config.m4        svn-v2:15395@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flibcli%2fconfig.m4\n  source/scripting/swig/config.m4 svn-v2:14906@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fscripting%2fswig%2fconfig.m4\n=== removed file 'source/lib/python/Modules/linuxaudiodev.c'\n--- a/source/lib/python/Modules/linuxaudiodev.c\t2007-04-23 11:03:09 +0000\n+++ b/source/lib/python/Modules/linuxaudiodev.c\t1970-01-01 00:00:00 +0000\n@@ -1,502 +0,0 @@\n-/* Hey Emacs, this is -*-C-*- \n- ******************************************************************************\n- * linuxaudiodev.c -- Linux audio device for python.\n- * \n- * Author          : Peter Bosch\n- * Created On      : Thu Mar  2 21:10:33 2000\n- * Status          : Unknown, Use with caution!\n- * \n- * Unless other notices are present in any part of this file\n- * explicitly claiming copyrights for other people and/or \n- * organizations, the contents of this file is fully copyright \n- * (C) 2000 Peter Bosch, all rights reserved.\n- ******************************************************************************\n- */\n-\n-#include \"Python.h\"\n-#include \"structmember.h\"\n-\n-#ifdef HAVE_FCNTL_H\n-#include \n-#else\n-#define O_RDONLY 00\n-#define O_WRONLY 01\n-#endif\n-\n-\n-#include \n-#if defined(linux)\n-#include \n-\n-#ifndef HAVE_STDINT_H\n-typedef unsigned long uint32_t;\n-#endif\n-\n-#elif defined(__FreeBSD__)\n-#include \n-\n-#ifndef SNDCTL_DSP_CHANNELS\n-#define SNDCTL_DSP_CHANNELS SOUND_PCM_WRITE_CHANNELS\n-#endif\n-\n-#endif\n-\n-typedef struct {\n-    PyObject_HEAD\n-    int\t\tx_fd;\t\t/* The open file */\n-    int         x_mode;           /* file mode */\n-    int\t\tx_icount;\t/* Input count */\n-    int\t\tx_ocount;\t/* Output count */\n-    uint32_t\tx_afmts;\t/* Audio formats supported by hardware*/\n-} lad_t;\n-\n-/* XXX several format defined in soundcard.h are not supported,\n-   including _NE (native endian) options and S32 options\n-*/\n-\n-static struct {\n-    int\t\ta_bps;\n-    uint32_t\ta_fmt;\n-    char       *a_name;\n-} audio_types[] = {\n-    {  8, \tAFMT_MU_LAW, \"logarithmic mu-law 8-bit audio\" },\n-    {  8, \tAFMT_A_LAW,  \"logarithmic A-law 8-bit audio\" },\n-    {  8,\tAFMT_U8,     \"linear unsigned 8-bit audio\" },\n-    {  8, \tAFMT_S8,     \"linear signed 8-bit audio\" },\n-    { 16, \tAFMT_U16_BE, \"linear unsigned 16-bit big-endian audio\" },\n-    { 16, \tAFMT_U16_LE, \"linear unsigned 16-bit little-endian audio\" },\n-    { 16, \tAFMT_S16_BE, \"linear signed 16-bit big-endian audio\" },\n-    { 16, \tAFMT_S16_LE, \"linear signed 16-bit little-endian audio\" },\n-    { 16, \tAFMT_S16_NE, \"linear signed 16-bit native-endian audio\" },\n-};\n-\n-static int n_audio_types = sizeof(audio_types) / sizeof(audio_types[0]);\n-\n-static PyTypeObject Ladtype;\n-\n-static PyObject *LinuxAudioError;\n-\n-static lad_t *\n-newladobject(PyObject *arg)\n-{\n-    lad_t *xp;\n-    int fd, afmts, imode;\n-    char *basedev = NULL;\n-    char *mode = NULL;\n-\n-    /* Two ways to call linuxaudiodev.open():\n-         open(device, mode) (for consistency with builtin open())\n-         open(mode)         (for backwards compatibility)\n-       because the *first* argument is optional, parsing args is\n-       a wee bit tricky. */\n-    if (!PyArg_ParseTuple(arg, \"s|s:open\", &basedev, &mode))\n-       return NULL;\n-    if (mode == NULL) {                 /* only one arg supplied */\n-       mode = basedev;\n-       basedev = NULL;\n-    }\n-\n-    if (strcmp(mode, \"r\") == 0)\n-        imode = O_RDONLY;\n-    else if (strcmp(mode, \"w\") == 0)\n-        imode = O_WRONLY;\n-    else {\n-        PyErr_SetString(LinuxAudioError, \"mode should be 'r' or 'w'\");\n-        return NULL;\n-    }\n-\n-    /* Open the correct device.  The base device name comes from the\n-     * AUDIODEV environment variable first, then /dev/dsp.  The\n-     * control device tacks \"ctl\" onto the base device name.\n-     * \n-     * Note that the only difference between /dev/audio and /dev/dsp\n-     * is that the former uses logarithmic mu-law encoding and the\n-     * latter uses 8-bit unsigned encoding.\n-     */\n-\n-    if (basedev == NULL) {              /* called with one arg */\n-       basedev = getenv(\"AUDIODEV\");\n-       if (basedev == NULL)             /* $AUDIODEV not set */\n-          basedev = \"/dev/dsp\";\n-    }\n-\n-    if ((fd = open(basedev, imode)) == -1) {\n-        PyErr_SetFromErrnoWithFilename(LinuxAudioError, basedev);\n-        return NULL;\n-    }\n-    if (imode == O_WRONLY && ioctl(fd, SNDCTL_DSP_NONBLOCK, NULL) == -1) {\n-        PyErr_SetFromErrnoWithFilename(LinuxAudioError, basedev);\n-        return NULL;\n-    }\n-    if (ioctl(fd, SNDCTL_DSP_GETFMTS, &afmts) == -1) {\n-        PyErr_SetFromErrnoWithFilename(LinuxAudioError, basedev);\n-        return NULL;\n-    }\n-    /* Create and initialize the object */\n-    if ((xp = PyObject_New(lad_t, &Ladtype)) == NULL) {\n-        close(fd);\n-        return NULL;\n-    }\n-    xp->x_fd = fd;\n-    xp->x_mode = imode;\n-    xp->x_icount = xp->x_ocount = 0;\n-    xp->x_afmts  = afmts;\n-    return xp;\n-}\n-\n-static void\n-lad_dealloc(lad_t *xp)\n-{\n-    /* if already closed, don't reclose it */\n-    if (xp->x_fd != -1)\n-\tclose(xp->x_fd);\n-    PyObject_Del(xp);\n-}\n-\n-static PyObject *\n-lad_read(lad_t *self, PyObject *args)\n-{\n-    int size, count;\n-    char *cp;\n-    PyObject *rv;\n-\t\n-    if (!PyArg_ParseTuple(args, \"i:read\", &size))\n-        return NULL;\n-    rv = PyString_FromStringAndSize(NULL, size);\n-    if (rv == NULL)\n-        return NULL;\n-    cp = PyString_AS_STRING(rv);\n-    if ((count = read(self->x_fd, cp, size)) < 0) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        Py_DECREF(rv);\n-        return NULL;\n-    }\n-    self->x_icount += count;\n-    _PyString_Resize(&rv, count);\n-    return rv;\n-}\n-\n-static PyObject *\n-lad_write(lad_t *self, PyObject *args)\n-{\n-    char *cp;\n-    int rv, size;\n-    fd_set write_set_fds;\n-    struct timeval tv;\n-    int select_retval;\n-    \n-    if (!PyArg_ParseTuple(args, \"s#:write\", &cp, &size)) \n-\treturn NULL;\n-\n-    /* use select to wait for audio device to be available */\n-    FD_ZERO(&write_set_fds);\n-    FD_SET(self->x_fd, &write_set_fds);\n-    tv.tv_sec = 4; /* timeout values */\n-    tv.tv_usec = 0; \n-\n-    while (size > 0) {\n-      select_retval = select(self->x_fd+1, NULL, &write_set_fds, NULL, &tv);\n-      tv.tv_sec = 1; tv.tv_usec = 0; /* willing to wait this long next time*/\n-      if (select_retval) {\n-        if ((rv = write(self->x_fd, cp, size)) == -1) {\n-\t  if (errno != EAGAIN) {\n-\t    PyErr_SetFromErrno(LinuxAudioError);\n-\t    return NULL;\n-\t  } else {\n-\t    errno = 0; /* EAGAIN: buffer is full, try again */\n-\t  }\n-        } else {\n-\t  self->x_ocount += rv;\n-\t  size -= rv;\n-\t  cp += rv;\n-\t}\n-      } else {\n-\t/* printf(\"Not able to write to linux audio device within %ld seconds\\n\", tv.tv_sec); */\n-\tPyErr_SetFromErrno(LinuxAudioError);\n-\treturn NULL;\n-      }\n-    }\n-    Py_INCREF(Py_None);\n-    return Py_None;\n-}\n-\n-static PyObject *\n-lad_close(lad_t *self, PyObject *unused)\n-{\n-    if (self->x_fd >= 0) {\n-        close(self->x_fd);\n-        self->x_fd = -1;\n-    }\n-    Py_RETURN_NONE;\n-}\n-\n-static PyObject *\n-lad_fileno(lad_t *self, PyObject *unused)\n-{\n-    return PyInt_FromLong(self->x_fd);\n-}\n-\n-static PyObject *\n-lad_setparameters(lad_t *self, PyObject *args)\n-{\n-    int rate, ssize, nchannels, n, fmt, emulate=0;\n-\n-    if (!PyArg_ParseTuple(args, \"iiii|i:setparameters\",\n-                          &rate, &ssize, &nchannels, &fmt, &emulate))\n-        return NULL;\n-  \n-    if (rate < 0) {\n-\tPyErr_Format(PyExc_ValueError, \"expected rate >= 0, not %d\",\n-\t\t     rate); \n-\treturn NULL;\n-    }\n-    if (ssize < 0) {\n-\tPyErr_Format(PyExc_ValueError, \"expected sample size >= 0, not %d\",\n-\t\t     ssize);\n-\treturn NULL;\n-    }\n-    if (nchannels != 1 && nchannels != 2) {\n-\tPyErr_Format(PyExc_ValueError, \"nchannels must be 1 or 2, not %d\",\n-\t\t     nchannels);\n-\treturn NULL;\n-    }\n-\n-    for (n = 0; n < n_audio_types; n++)\n-        if (fmt == audio_types[n].a_fmt)\n-            break;\n-    if (n == n_audio_types) {\n-\tPyErr_Format(PyExc_ValueError, \"unknown audio encoding: %d\", fmt);\n-\treturn NULL;\n-    }\n-    if (audio_types[n].a_bps != ssize) {\n-\tPyErr_Format(PyExc_ValueError, \n-\t\t     \"for %s, expected sample size %d, not %d\",\n-\t\t     audio_types[n].a_name, audio_types[n].a_bps, ssize);\n-\treturn NULL;\n-    }\n-\n-    if (emulate == 0) {\n-\tif ((self->x_afmts & audio_types[n].a_fmt) == 0) {\n-\t    PyErr_Format(PyExc_ValueError, \n-\t\t\t \"%s format not supported by device\",\n-\t\t\t audio_types[n].a_name);\n-\t    return NULL;\n-\t}\n-    }\n-    if (ioctl(self->x_fd, SNDCTL_DSP_SETFMT, \n-\t      &audio_types[n].a_fmt) == -1) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    if (ioctl(self->x_fd, SNDCTL_DSP_CHANNELS, &nchannels) == -1) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    if (ioctl(self->x_fd, SNDCTL_DSP_SPEED, &rate) == -1) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-\n-    Py_INCREF(Py_None);\n-    return Py_None;\n-}\n-\n-static int\n-_ssize(lad_t *self, int *nchannels, int *ssize)\n-{\n-    int fmt;\n-\n-    fmt = 0;\n-    if (ioctl(self->x_fd, SNDCTL_DSP_SETFMT, &fmt) < 0) \n-        return -errno;\n-\n-    switch (fmt) {\n-    case AFMT_MU_LAW:\n-    case AFMT_A_LAW:\n-    case AFMT_U8:\n-    case AFMT_S8:\n-        *ssize = sizeof(char);\n-        break;\n-    case AFMT_S16_LE:\n-    case AFMT_S16_BE:\n-    case AFMT_U16_LE:\n-    case AFMT_U16_BE:\n-        *ssize = sizeof(short);\n-        break;\n-    case AFMT_MPEG:\n-    case AFMT_IMA_ADPCM:\n-    default:\n-        return -EOPNOTSUPP;\n-    }\n-    if (ioctl(self->x_fd, SNDCTL_DSP_CHANNELS, nchannels) < 0)\n-        return -errno;\n-    return 0;\n-}\n-\n-\n-/* bufsize returns the size of the hardware audio buffer in number \n-   of samples */\n-static PyObject *\n-lad_bufsize(lad_t *self, PyObject *unused)\n-{\n-    audio_buf_info ai;\n-    int nchannels=0, ssize=0;\n-\n-    if (_ssize(self, &nchannels, &ssize) < 0 || !ssize || !nchannels) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    if (ioctl(self->x_fd, SNDCTL_DSP_GETOSPACE, &ai) < 0) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    return PyInt_FromLong((ai.fragstotal * ai.fragsize) / (nchannels * ssize));\n-}\n-\n-/* obufcount returns the number of samples that are available in the \n-   hardware for playing */\n-static PyObject *\n-lad_obufcount(lad_t *self, PyObject *unused)\n-{\n-    audio_buf_info ai;\n-    int nchannels=0, ssize=0;\n-\n-    if (_ssize(self, &nchannels, &ssize) < 0 || !ssize || !nchannels) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    if (ioctl(self->x_fd, SNDCTL_DSP_GETOSPACE, &ai) < 0) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    return PyInt_FromLong((ai.fragstotal * ai.fragsize - ai.bytes) / \n-                          (ssize * nchannels));\n-}\n-\n-/* obufcount returns the number of samples that can be played without\n-   blocking */\n-static PyObject *\n-lad_obuffree(lad_t *self, PyObject *unused)\n-{\n-    audio_buf_info ai;\n-    int nchannels=0, ssize=0;\n-\n-    if (_ssize(self, &nchannels, &ssize) < 0 || !ssize || !nchannels) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    if (ioctl(self->x_fd, SNDCTL_DSP_GETOSPACE, &ai) < 0) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    return PyInt_FromLong(ai.bytes / (ssize * nchannels));\n-}\n-\n-/* Flush the device */\n-static PyObject *\n-lad_flush(lad_t *self, PyObject *unused)\n-{\n-    if (ioctl(self->x_fd, SNDCTL_DSP_SYNC, NULL) == -1) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    Py_RETURN_NONE;\n-}\n-\n-static PyObject *\n-lad_getptr(lad_t *self, PyObject *unused)\n-{\n-    count_info info;\n-    int req;\n-\n-    if (self->x_mode == O_RDONLY)\n-\treq = SNDCTL_DSP_GETIPTR;\n-    else\n-\treq = SNDCTL_DSP_GETOPTR;\n-    if (ioctl(self->x_fd, req, &info) == -1) {\n-        PyErr_SetFromErrno(LinuxAudioError);\n-        return NULL;\n-    }\n-    return Py_BuildValue(\"iii\", info.bytes, info.blocks, info.ptr);\n-}\n-\n-static PyMethodDef lad_methods[] = {\n-    { \"read\",\t\t(PyCFunction)lad_read, METH_VARARGS },\n-    { \"write\",\t\t(PyCFunction)lad_write, METH_VARARGS },\n-    { \"setparameters\",\t(PyCFunction)lad_setparameters, METH_VARARGS },\n-    { \"bufsize\",\t(PyCFunction)lad_bufsize, METH_VARARGS },\n-    { \"obufcount\",\t(PyCFunction)lad_obufcount, METH_NOARGS },\n-    { \"obuffree\",\t(PyCFunction)lad_obuffree, METH_NOARGS },\n-    { \"flush\",\t\t(PyCFunction)lad_flush, METH_NOARGS },\n-    { \"close\",\t\t(PyCFunction)lad_close, METH_NOARGS },\n-    { \"fileno\",     \t(PyCFunction)lad_fileno, METH_NOARGS },\n-    { \"getptr\",         (PyCFunction)lad_getptr, METH_NOARGS },\n-    { NULL,\t\tNULL}\t\t/* sentinel */\n-};\n-\n-static PyObject *\n-lad_getattr(lad_t *xp, char *name)\n-{\n-    return Py_FindMethod(lad_methods, (PyObject *)xp, name);\n-}\n-\n-static PyTypeObject Ladtype = {\n-    PyObject_HEAD_INIT(&PyType_Type)\n-    0,\t\t\t\t/*ob_size*/\n-    \"linuxaudiodev.linux_audio_device\", /*tp_name*/\n-    sizeof(lad_t),\t\t/*tp_size*/\n-    0,\t\t\t\t/*tp_itemsize*/\n-    /* methods */\n-    (destructor)lad_dealloc,\t/*tp_dealloc*/\n-    0,\t\t\t\t/*tp_print*/\n-    (getattrfunc)lad_getattr,\t/*tp_getattr*/\n-    0,\t\t\t\t/*tp_setattr*/\n-    0,\t\t\t\t/*tp_compare*/\n-    0,\t\t\t\t/*tp_repr*/\n-};\n-\n-static PyObject *\n-ladopen(PyObject *self, PyObject *args)\n-{\n-    return (PyObject *)newladobject(args);\n-}\n-\n-static PyMethodDef linuxaudiodev_methods[] = {\n-    { \"open\", ladopen, METH_VARARGS },\n-    { 0, 0 },\n-};\n-\n-void\n-initlinuxaudiodev(void)\n-{\n-    PyObject *m;\n-  \n-    m = Py_InitModule(\"linuxaudiodev\", linuxaudiodev_methods);\n-    if (m == NULL)\n-\treturn;\n-\n-    LinuxAudioError = PyErr_NewException(\"linuxaudiodev.error\", NULL, NULL);\n-    if (LinuxAudioError)\n-\tPyModule_AddObject(m, \"error\", LinuxAudioError);\n-\n-    if (PyModule_AddIntConstant(m, \"AFMT_MU_LAW\", (long)AFMT_MU_LAW) == -1)\n-\treturn;\n-    if (PyModule_AddIntConstant(m, \"AFMT_A_LAW\", (long)AFMT_A_LAW) == -1)\n-\treturn;\n-    if (PyModule_AddIntConstant(m, \"AFMT_U8\", (long)AFMT_U8) == -1)\n-\treturn;\n-    if (PyModule_AddIntConstant(m, \"AFMT_S8\", (long)AFMT_S8) == -1)\n-\treturn;\n-    if (PyModule_AddIntConstant(m, \"AFMT_U16_BE\", (long)AFMT_U16_BE) == -1)\n-\treturn;\n-    if (PyModule_AddIntConstant(m, \"AFMT_U16_LE\", (long)AFMT_U16_LE) == -1)\n-\treturn;\n-    if (PyModule_AddIntConstant(m, \"AFMT_S16_BE\", (long)AFMT_S16_BE) == -1)\n-\treturn;\n-    if (PyModule_AddIntConstant(m, \"AFMT_S16_LE\", (long)AFMT_S16_LE) == -1)\n-\treturn;\n-    if (PyModule_AddIntConstant(m, \"AFMT_S16_NE\", (long)AFMT_S16_NE) == -1)\n-\treturn;\n-\n-    return;\n-}\n\n=== modified file 'source/build/m4/public.m4'\n--- a/source/build/m4/public.m4\t2006-05-13 19:57:09 +0000\n+++ b/source/build/m4/public.m4\t2007-04-24 10:52:53 +0000\n@@ -4,7 +4,7 @@\n dnl Copyright (C) 2004-2005 Jelmer Vernooij\n dnl Published under the GPL\n dnl\n-dnl SMB_SUBSYSTEM(name,obj_files,required_subsystems)\n+dnl SMB_SUBSYSTEM(name,obj_files,required_subsystems,cflags)\n dnl\n dnl SMB_EXT_LIB_FROM_PKGCONFIG(name,pkg-config name)\n dnl\n\n=== modified file 'source/build/smb_build/makefile.pm'\n--- a/source/build/smb_build/makefile.pm\t2007-04-22 10:33:59 +0000\n+++ b/source/build/smb_build/makefile.pm\t2007-04-24 10:52:53 +0000\n@@ -179,6 +179,7 @@\n SHELL=$self->{config}->{SHELL}\n \n PERL=$self->{config}->{PERL}\n+PYTHON=$self->{config}->{PYTHON}\n \n CPP=$self->{config}->{CPP}\n CPPFLAGS=$builddir_headers-I\\$(srcdir)/include -I\\$(srcdir) -I\\$(srcdir)/lib -I\\$(srcdir)/lib/replace -D_SAMBA_BUILD_=4 -DHAVE_CONFIG_H $self->{config}->{CPPFLAGS}\n\n=== modified file 'source/lib/ldb/libldb.m4'\n--- a/source/lib/ldb/libldb.m4\t2006-12-15 17:54:47 +0000\n+++ b/source/lib/ldb/libldb.m4\t2007-04-24 10:52:53 +0000\n@@ -6,34 +6,4 @@\n \tSMB_ENABLE(ldb_sqlite3, YES)\n fi\n \n-AC_MSG_CHECKING([for Python])\n-\n-PYTHON=\n- \n-AC_ARG_WITH(python,\n-[  --with-python=PYTHONNAME  build Python libraries],\n-[ case \"${withval-python}\" in\n-  yes)\n-        PYTHON=python\n-        ;;\n-  no)\n-        PYTHON=\n-        ;;\n-  *)\n-        PYTHON=${withval-python}\n-        ;;\n-  esac ])\n-\n-if test x\"$PYTHON\" != \"x\"; then\n-\tincdir=`python -c 'import sys; print \"%s/include/python%d.%d\" % (sys.prefix, sys.version_info[[0]], sys.version_info[[1]])'`\n-\tCPPFLAGS=\"$CPPFLAGS -I $incdir\"\n-fi\n-\n-if test x\"$PYTHON\" != \"x\"; then\n-\tAC_MSG_RESULT([${withval-python}])\n-else\n-\tAC_MSG_RESULT(no)\n-\tSMB_ENABLE(swig_ldb, NO)\n-fi\n-\n-AC_SUBST(PYTHON)\n+SMB_ENABLE(swig_ldb, NO)\n\n=== modified file 'source/lib/python/config.m4'\n--- a/source/lib/python/config.m4\t2007-04-23 23:19:35 +0000\n+++ b/source/lib/python/config.m4\t2007-04-24 10:52:53 +0000\n@@ -1,4 +1,66 @@\n-dnl Process this file with autoconf 2.0 or later to make a configure script.\n+case $INTERNAL_PYTHON in\n+\tyes|no|auto) ;;\n+\t*) INTERNAL_PYTHON=auto ;;\n+esac\n+AC_ARG_VAR(INTERNAL_PYTHON,\n+[Whether the bundled python should be used (auto,yes,no)])\n+\n+ac_have_python=yes\n+\n+#\n+# Allow the use of a (user set) custom python version\n+#\n+AC_ARG_VAR([PYTHON_VERSION],[The installed Python\n+\tversion to use, for example '2.3'. This string \n+\twill be appended to the Python interpreter\n+\tcanonical name.])\n+\n+AC_PATH_PROG([PYTHON],[python[$PYTHON_VERSION]])\n+if test -z \"$PYTHON\"; then\n+\tac_have_python=no\n+fi\n+\n+AC_SUBST(PYTHON)\n+\n+#\n+# Check for a version of Python >= 2.1.0\n+#\n+AC_MSG_CHECKING([for a version of Python >= '2.1.0'])\n+ac_supports_python_ver=`$PYTHON -c \"import sys, string; \\\n+\tver = string.split(sys.version)[[0]]; \\\n+\tprint ver >= '2.1.0'\"`\n+if test \"$ac_supports_python_ver\" != \"True\"; then\n+\tac_have_python=no\n+\tAC_MSG_RESULT([no])\n+else \n+\tAC_MSG_RESULT([yes])\n+fi\n+\n+#\n+# Check if you have distutils, else fail\n+#\n+AC_MSG_CHECKING([for the distutils Python package])\n+ac_distutils_result=`$PYTHON -c \"import distutils\" 2>&1`\n+if test -z \"$ac_distutils_result\"; then\n+\tAC_MSG_RESULT([yes])\n+else\n+\tac_have_python=no\n+\tAC_MSG_RESULT([no])\n+fi\n+\n+if test x$INTERNAL_PYTHON = xauto\n+then\n+\tif test x$ac_have_python = xyes; then\t\t\n+\t\tINTERNAL_PYTHON=no\n+\telse\n+\t\tINTERNAL_PYTHON=yes\n+\tfi\n+fi\n+\n+AC_MSG_CHECKING([whether to use internal python])\n+AC_MSG_RESULT($INTERNAL_PYTHON)\n+\n+if test x$INTERNAL_PYTHON = xyes; then\n \n # Set VERSION so we only need to edit in one place (i.e., here)\n m4_define(PYTHON_VERSION, 2.6)\n@@ -18,9 +80,6 @@\n #endif /*Py_PYCONFIG_H*/\n ])\n \n-AC_SUBST(SOVERSION)\n-SOVERSION=1.0\n-\n # The later defininition of _XOPEN_SOURCE and _POSIX_C_SOURCE disables\n # certain features on NetBSD, so we need _NETBSD_SOURCE to re-enable\n # them.\n@@ -47,15 +106,6 @@\n   CFLAGS=$save_CFLAGS\n fi\n \n-dnl # check for ANSI or K&R (\"traditional\") preprocessor\n-dnl AC_MSG_CHECKING(for C preprocessor type)\n-dnl AC_TRY_COMPILE([\n-dnl #define spam(name, doc) {#name, &name, #name \"() -- \" doc}\n-dnl int foo;\n-dnl struct {char *name; int *addr; char *doc;} desc = spam(foo, \"something\");\n-dnl ], [;], cpp_type=ansi, AC_DEFINE(HAVE_OLD_CPP) cpp_type=traditional)\n-dnl AC_MSG_RESULT($cpp_type)\n-\n # checks for header files\n AC_CHECK_HEADERS(asm/types.h conio.h curses.h direct.h dlfcn.h errno.h \\\n fcntl.h grp.h \\\n@@ -69,7 +119,6 @@\n sys/times.h sys/types.h sys/un.h sys/utsname.h sys/wait.h pty.h libutil.h \\\n sys/resource.h netpacket/packet.h sysexits.h bluetooth.h \\\n bluetooth/bluetooth.h)\n-AC_HEADER_DIRENT\n AC_HEADER_MAJOR\n \n # On Solaris, term.h requires curses.h\n@@ -390,25 +439,6 @@\n fi\n AC_MSG_RESULT($with_pymalloc)\n \n-# Check for --with-wctype-functions\n-AC_MSG_CHECKING(for --with-wctype-functions)\n-AC_ARG_WITH(wctype-functions, \n-            AC_HELP_STRING(--with-wctype-functions, use wctype.h functions),\n-[\n-if test \"$withval\" != no\n-then \n-  AC_DEFINE(WANT_WCTYPE_FUNCTIONS, 1,\n-  [Define if you want wctype.h functions to be used instead of the\n-   one supplied by Python itself. (see Include/unicodectype.h).]) \n-  AC_MSG_RESULT(yes)\n-else AC_MSG_RESULT(no)\n-fi],\n-[AC_MSG_RESULT(no)])\n-\n-# -I${DLINCLDIR} is added to the compile rule for importdl.o\n-AC_SUBST(DLINCLDIR)\n-DLINCLDIR=.\n-\n # checks for library functions\n AC_CHECK_FUNCS(alarm bind_textdomain_codeset chflags chown clock confstr \\\n  ctermid execv fork fpathconf ftime ftruncate \\\n@@ -499,34 +529,6 @@\n )\n \n dnl check for true\n-AC_CHECK_PROGS(TRUE, true, /bin/true)\n-\n-dnl On some systems (e.g. Solaris 9), hstrerror and inet_aton are in -lresolv\n-dnl On others, they are in the C library, so we to take no action\n-AC_CHECK_LIB(c, inet_aton, [$ac_cv_prog_TRUE],\n-  AC_CHECK_LIB(resolv, inet_aton)\n-)\n-\n-dnl Check if system zlib has *Copy() functions\n-dnl\n-dnl On MacOSX the linker will search for dylibs on the entire linker path\n-dnl before searching for static libraries. setup.py adds -Wl,-search_paths_first\n-dnl to revert to a more traditional unix behaviour and make it possible to\n-dnl override the system libz with a local static library of libz. Temporarily\n-dnl add that flag to our CFLAGS as well to ensure that we check the version\n-dnl of libz that will be used by setup.py. \n-dnl The -L/usr/local/lib is needed as wel to get the same compilation \n-dnl environment as setup.py (and leaving it out can cause configure to use the\n-dnl wrong version of the library)\n-case $ac_sys_system/$ac_sys_release in\n-Darwin/*) \n-\t_CUR_CFLAGS=\"${CFLAGS}\"\n-\t_CUR_LDFLAGS=\"${LDFLAGS}\"\n-\tCFLAGS=\"${CFLAGS} -Wl,-search_paths_first\"\n-\tLDFLAGS=\"${LDFLAGS} -Wl,-search_paths_first -L/usr/local/lib\"\n-\t;;\n-esac\n-\n AC_CHECK_LIB(z, inflateCopy, AC_DEFINE(HAVE_ZLIB_COPY, 1, Define if the zlib library has inflateCopy))\n \n case $ac_sys_system/$ac_sys_release in\n@@ -1517,3 +1519,89 @@\n fi\n \n AC_DEFINE_UNQUOTED(PLATFORM, $MACHDEP, [Platforms])\n+SMB_SUBSYSTEM(LIBPYTHON, [], [INTERNAL_PYTHON])\n+SMB_ENABLE(python)\n+SMB_ENABLE(pgen)\n+PYTHON=\"$builddir/bin/python\"\n+\n+else\n+#\n+# Check for Python include path\n+#\n+\tAC_MSG_CHECKING([for Python include path])\n+\tif test -z \"$PYTHON_CPPFLAGS\"; then\n+\t\tpython_path=`$PYTHON -c \"import distutils.sysconfig; \\\n+\t\t\t\tprint distutils.sysconfig.get_python_inc();\"`\n+\t\tif test -n \"${python_path}\"; then\n+\t\t\tpython_path=\"-I$python_path\"\n+\t\tfi\n+\t\tPYTHON_CPPFLAGS=$python_path\n+\tfi\n+\tAC_MSG_RESULT([$PYTHON_CPPFLAGS])\n+\tAC_SUBST([PYTHON_CPPFLAGS])\n+\n+#\n+# Check for Python library path\n+#\n+\tAC_MSG_CHECKING([for Python library path])\n+\tif test -z \"$PYTHON_LDFLAGS\"; then\n+\t\t# (makes two attempts to ensure we've got a version number\n+\t\t# from the interpreter)\n+\t\tpy_version=`$PYTHON -c \"from distutils.sysconfig import *; \\\n+\t\t\tfrom string import join; \\\n+\t\t\tprint join(get_config_vars('VERSION'))\"`\n+\t\tif test \"$py_version\" == \"[None]\"; then\n+\t\t\tif test -n \"$PYTHON_VERSION\"; then\n+\t\t\t\tpy_version=$PYTHON_VERSION\n+\t\t\telse\n+\t\t\t\tpy_version=`$PYTHON -c \"import sys; \\\n+\t\t\t\t\tprint sys.version[[:3]]\"`\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tPYTHON_LDFLAGS=`$PYTHON -c \"from distutils.sysconfig import *; \\\n+\t\t\tfrom string import join; \\\n+\t\t\tprint '-L' + get_python_lib(0,1), \\\n+\t\t\t\t'-lpython';\"`$py_version\n+\tfi\t\t\n+\tAC_MSG_RESULT([$PYTHON_LDFLAGS])\n+\tAC_SUBST([PYTHON_LDFLAGS])\n+\n+#\n+# Check for site packages\n+#\n+\tAC_MSG_CHECKING([for Python site-packages path])\n+\tif test -z \"$PYTHON_SITE_PKG\"; then\n+\t\tPYTHON_SITE_PKG=`$PYTHON -c \"import distutils.sysconfig; \\\n+\t\t\t\tprint distutils.sysconfig.get_python_lib(0,0);\"`\n+\tfi\n+\tAC_MSG_RESULT([$PYTHON_SITE_PKG])\n+\tAC_SUBST([PYTHON_SITE_PKG])\n+\n+#\n+# libraries which must be linked in when embedding\n+#\n+\tAC_MSG_CHECKING(python extra libraries)\n+\tif test -z \"$PYTHON_EXTRA_LIBS\"; then\n+\t   PYTHON_EXTRA_LIBS=`$PYTHON -c \"import distutils.sysconfig; \\\n+\t\t\t\tconf = distutils.sysconfig.get_config_var; \\\n+\t\t\t\tprint conf('LOCALMODLIBS'), conf('LIBS')\"`\n+\tfi\n+\tAC_MSG_RESULT([$PYTHON_EXTRA_LIBS])\n+\tAC_SUBST(PYTHON_EXTRA_LIBS)\n+\n+#\n+# linking flags needed when embedding\n+#\n+\tAC_MSG_CHECKING(python extra linking flags)\n+\tif test -z \"$PYTHON_EXTRA_LDFLAGS\"; then\n+\t\tPYTHON_EXTRA_LDFLAGS=`$PYTHON -c \"import distutils.sysconfig; \\\n+\t\t\tconf = distutils.sysconfig.get_config_var; \\\n+\t\t\tprint conf('LINKFORSHARED')\"`\n+\tfi\n+\tAC_MSG_RESULT([$PYTHON_EXTRA_LDFLAGS])\n+\tAC_SUBST(PYTHON_EXTRA_LDFLAGS)\n+\n+    SMB_EXT_LIB(LIBPYTHON, [$PYTHON_LDFLAGS], [$PYTHON_CPPFLAGS])\n+\tSMB_ENABLE(LIBPYTHON)\n+fi\n\n=== modified file 'source/lib/python/config.mk'\n--- a/source/lib/python/config.mk\t2007-04-23 22:48:27 +0000\n+++ b/source/lib/python/config.mk\t2007-04-24 10:52:53 +0000\n@@ -35,7 +35,7 @@\n # XXX Note that a build now requires Python exist before the build starts\n ASDLGEN=\t$(srcdir)/lib/python/Parser/asdl_c.py\n \n-[LIBRARY::PYTHON]\n+[LIBRARY::INTERNAL_PYTHON]\n LDFLAGS = -lm -lutil\n CFLAGS = -DPy_BUILD_CORE -Ilib/python/Include -Ilib/python -DPYTHONPATH=\":plat-linux2\" -DVERSION=\"2.6\" -DPLATFORM=\"linux2\"\n OBJ_FILES =\t\\\n@@ -122,6 +122,7 @@\n \t\tModules/_sre.o  \\\n \t\tModules/_codecsmodule.o  \\\n \t\tModules/zipimport.o  \\\n+\t\tModules/socketmodule.o \\\n \t\tModules/symtablemodule.o  \\\n \t\tModules/xxsubtype.o \\\n \t\tParser/acceler.o \\\n@@ -147,7 +148,8 @@\n \n # Build the interpreter\n [BINARY::python]\n-PRIVATE_DEPENDENCIES = PYTHON\n+ENABLE = NO\n+PRIVATE_DEPENDENCIES = INTERNAL_PYTHON\n CFLAGS = -DPy_BUILD_CORE -Ilib/python/Include -Ilib/python\n OBJ_FILES = \\\n \t\t\tModules/python.o\n@@ -156,6 +158,7 @@\n \t\t-bin/pgen $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C)\n \n [BINARY::pgen]\n+ENABLE = NO\n CFLAGS = -DPy_BUILD_CORE -Ilib/python/Include -Ilib/python\n PRIVATE_DEPENDENCIES = PYTHON_PARSER_HOST\n OBJ_FILES = \\\n\n=== modified file 'source/lib/tdb/libtdb.m4'\n--- a/source/lib/tdb/libtdb.m4\t2006-11-30 03:25:07 +0000\n+++ b/source/lib/tdb/libtdb.m4\t2007-04-24 10:52:53 +0000\n@@ -23,34 +23,4 @@\n AC_HAVE_DECL(pread, [#include ])\n AC_HAVE_DECL(pwrite, [#include ])\n \n-AC_MSG_CHECKING([for Python])\n-\n-PYTHON=\n- \n-AC_ARG_WITH(python,\n-[  --with-python=PYTHONNAME  build Python libraries],\n-[ case \"${withval-python}\" in\n-  yes)\n-        PYTHON=python\n-        ;;\n-  no)\n-        PYTHON=\n-        ;;\n-  *)\n-        PYTHON=${withval-python}\n-        ;;\n-  esac ])\n-\n-if test x\"$PYTHON\" != \"x\"; then\n-\tincdir=`python -c 'import sys; print \"%s/include/python%d.%d\" % (sys.prefix, sys.version_info[[0]], sys.version_info[[1]])'`\n-\tCPPFLAGS=\"$CPPFLAGS -I $incdir\"\n-fi\n-\n-if test x\"$PYTHON\" != \"x\"; then\n-\tAC_MSG_RESULT([${withval-python}])\n-else\n-\tSMB_ENABLE(swig_tdb, NO)\n-\tAC_MSG_RESULT(no)\n-fi\n-\n-AC_SUBST(PYTHON)\n+SMB_ENABLE(swig_tdb, NO)\n\n=== modified file 'source/libcli/config.m4'\n--- a/source/libcli/config.m4\t2006-05-02 19:20:49 +0000\n+++ b/source/libcli/config.m4\t2007-04-24 10:52:53 +0000\n@@ -1,31 +1,3 @@\n AC_MSG_CHECKING([for Python (libcli_nbt)])\n \n-PYTHON=\n- \n-AC_ARG_WITH(python,\n-[  --with-python=PYTHONNAME  build Python libraries],\n-[ case \"${withval-python}\" in\n-  yes)\n-        PYTHON=python\n-        ;;\n-  no)\n-        PYTHON=\n-        ;;\n-  *)\n-        PYTHON=${withval-python}\n-        ;;\n-  esac ])\n-\n-if test x\"$PYTHON\" != \"x\"; then\n-\tincdir=`python -c 'import sys; print \"%s/include/python%d.%d\" % (sys.prefix, sys.version_info[[0]], sys.version_info[[1]])'`\n-\tCPPFLAGS=\"$CPPFLAGS -I $incdir\"\n-fi\n-\n-if test x\"$PYTHON\" != \"x\"; then\n-\tAC_MSG_RESULT([${withval-python}])\n-else\n-\tAC_MSG_RESULT(no)\n-\tSMB_ENABLE(swig_libcli_nbt, NO)\n-fi\n-\n-AC_SUBST(PYTHON)\n+SMB_ENABLE(swig_libcli_nbt, NO)\n\n=== modified file 'source/scripting/swig/config.m4'\n--- a/source/scripting/swig/config.m4\t2006-04-27 20:55:26 +0000\n+++ b/source/scripting/swig/config.m4\t2007-04-24 10:52:53 +0000\n@@ -2,28 +2,5 @@\n \n # Check for python support\n \n-PYTHON=\n- \n-AC_ARG_WITH(python,\n-[  --with-python=PYTHONNAME  build Python libraries],\n-[ case \"${withval-python}\" in\n-  yes)\n-        PYTHON=python\n-        ;;\n-  no)\n-        PYTHON=\n-        ;;\n-  *)\n-        PYTHON=${withval-python}\n-        ;;\n-  esac ])\n-\n-if test x\"$PYTHON\" != \"x\"; then\n-\tincdir=`python -c 'import sys; print \"%s/include/python%d.%d\" % (sys.prefix, sys.version_info[[0]], sys.version_info[[1]])'`\n-\tCPPFLAGS=\"$CPPFLAGS -I $incdir\"\n-else\n-\tSMB_ENABLE(swig_dcerpc, NO)\n-fi\n-\n-AC_SUBST(PYTHON)\n+SMB_ENABLE(swig_dcerpc, NO)\n \n\n"}