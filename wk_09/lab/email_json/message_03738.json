{"category": "ham", "to_address": "Nicholas Clark <nick@ccl4.org>", "from_address": "Joshua Isom <jrisom@gmail.com>", "subject": "Re: Limiting Exported Symbols on GCC", "body": "\nOn Apr 12, 2007, at 9:29 AM, Nicholas Clark wrote:\n\n> On Thu, Apr 12, 2007 at 09:13:14AM -0500, Steve Peters wrote:\n>> On Thu, Apr 12, 2007 at 01:37:24PM +0200, Ron Blaschke wrote:\n>>\n>> I think that we need to tread very carefully with adding additional\n>> gcc-isms to Parrot, lest we break compatibility with additional \n>> compilers\n>> even further.  If Parrot will run everywhere, we need to think about\n>> working more towards ANSI and POSIX compliance.\n>\n> On the other hand, we've managed very well in Perl 5 with the flag \n> data in\n> embed.fnc and generating the annotated headers programmatically.\n>\n> I think it would have been nice to have had something like this some \n> years\n> ago (er, maybe 10) to prevent the magpies from turning any and every \n> function\n> in the Perl 5 core into part of the supported API.\n>\n\nMy view of this is something along these lines.  You can use any \nfunction you want at all, but if it's not documented as part of the \nsupported API, there's nothing saying I won't purposely break your code \nin the next release.  In big bold red letters of course.\n\n> Particularly given that on some platforms (such as Win32) API \n> functions need\n> to be exported explicitly, resulting in modules written on *nix \n> platforms\n> not working on Win32.\n>\n> (and actually, I'm tempted to add it even now to Perl 5 to enforce what\n> remains of our sanity)\n>\n> Nicholas Clark\n>\n\n"}