{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "Jelmer Vernooij <jelmer@samba.org>", "subject": "Rev 12012: Fix param module. in\n\tfile:///home/jelmer/bzr.samba/python/", "body": "At file:///home/jelmer/bzr.samba/python/\n\n------------------------------------------------------------\nrevno: 12012\nrevision-id: jelmer@samba.org-20070508215744-bw3ibeqsypztyvv3\nparent: jelmer@samba.org-20070508202221-cv48zrv775va98jy\ncommitter: Jelmer Vernooij \nbranch nick: python\ntimestamp: Tue 2007-05-08 23:57:44 +0200\nmessage:\n  Fix param module.\nadded:\n  source/scripting/python/talloc.c talloc.c-20070508214200-ruf43htj5k9dlrwj-1\nmodified:\n  .bzrignore                     svn-v2:17811@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-.bzrignore\n  source/scripting/python/config.mk config.mk-20070425124132-wptmykwi2tvyqm26-1\n  source/scripting/python/parammodule.c param.c-20070425124147-y6pej29g7xqsb3n6-1\n  source/selftest/Samba4.pm      svn-v2:22575@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fselftest%2fSamba4.pm\n=== added file 'source/scripting/python/talloc.c'\n--- a/source/scripting/python/talloc.c\t1970-01-01 00:00:00 +0000\n+++ b/source/scripting/python/talloc.c\t2007-05-08 21:57:44 +0000\n@@ -0,0 +1,30 @@\n+/* \n+   Unix SMB/CIFS implementation.\n+\n+   Helper functions for using talloc and Python together\n+\n+   Copyright (C) Jelmer Vernooij 2007\n+   \n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+   \n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n+*/\n+\n+#include \"includes.h\"\n+#include \"scripting/ejs/smbcalls.h\"\n+#include \"Python.h\"\n+#include \"param/param.h\"\n+\n+TALLOC_CTX *PyMemCtx() {\n+\treturn talloc_autofree_context();\n+}\n\n=== modified file '.bzrignore'\n--- a/.bzrignore\t2007-05-05 00:02:47 +0000\n+++ b/.bzrignore\t2007-05-08 21:57:44 +0000\n@@ -191,3 +191,4 @@\n source/lib/ldb/examples/ldifreader\n source/lib/tdb/bin/tdbbackup\n source/lib/tdb/bin/tdbdump\n+source/scripting/python/talloc.h\n\n=== modified file 'source/scripting/python/config.mk'\n--- a/source/scripting/python/config.mk\t2007-04-27 21:34:20 +0000\n+++ b/source/scripting/python/config.mk\t2007-05-08 21:57:44 +0000\n@@ -1,4 +1,9 @@\n+[SUBSYSTEM::talloc_python]\n+PRIVATE_DEPENDENCIES = LIBTALLOC LIBPYTHON\n+OBJ_FILES = talloc.o\n+PUBLIC_PROTO_HEADER = talloc.h\n+\n [PYTHON::python_param]\n-PRIVATE_DEPENDENCIES = LIBSAMBA-CONFIG\n+PRIVATE_DEPENDENCIES = LIBSAMBA-CONFIG talloc_python\n OBJ_FILES = \\\n \t\t\tparammodule.o\n\n=== modified file 'source/scripting/python/parammodule.c'\n--- a/source/scripting/python/parammodule.c\t2007-04-27 21:34:20 +0000\n+++ b/source/scripting/python/parammodule.c\t2007-05-08 21:57:44 +0000\n@@ -21,42 +21,55 @@\n */\n \n #include \"includes.h\"\n-#include \"scripting/ejs/smbcalls.h\"\n+#include \"scripting/python/talloc.h\"\n #include \"Python.h\"\n #include \"param/param.h\"\n \n-PyTypeObject noddy_NoddyType;\n+staticforward PyTypeObject param_ParamFileType;\n \n typedef struct {\n-\t    PyObject_HEAD\n-} noddy_NoddyObject;\n-\n-static PyObject *loadparm_object(void)\n-{\n-\tPyObject *self = PyObject_New();\t\n-\n-\t/* FIXME */\n-\n-\treturn self;\n-}\n+\tPyObject_HEAD\n+} param_ParamFileObject;\n \n static PyObject *param_load(PyObject *self, PyObject *args)\n {\n+\tint ret;\n \tchar *filename;\n-\tPyObject *param;\n+\tparam_ParamFileObject *param;\n \n \tif (!PyArg_ParseTuple(args, \"s:new\", &filename))\n \t        return NULL;\n \n-\tparam = PyObject_New();\n+\tparam = PyObject_New(param_ParamFileObject, &param_ParamFileType);\n+\n+\tret = param_read(PyMemCtx(), filename);\n+\n+\tif (ret == -1) {\n+\t\tPyErr_SetString(PyExc_TypeError, \"reading file failed\");\n+\t\treturn NULL;\n+\t}\n \n \t/* FIXME: Add members:\n \t *   globals\n \t *   shares\n \t */\n \n-\treturn param;\n-}\n+\treturn (PyObject *)param;\n+}\n+\n+static void\n+param_dealloc(PyObject* self)\n+{\n+\tPyObject_Del(self);\n+}\n+\n+static PyTypeObject param_ParamFileType = {\n+\tPyObject_HEAD_INIT(NULL) 0,\n+\t.tp_name = \"ParamFile\",\n+\t.tp_basicsize = sizeof(param_ParamFileObject),\n+\t.tp_dealloc = param_dealloc,\n+};\n+\n \n static PyMethodDef methods[] = {\n \t{ \"ParamFile\", (PyCFunction)param_load, METH_VARARGS, NULL},\n@@ -65,6 +78,12 @@\n \n PyDoc_STRVAR(param_doc, \"Simple wrappers around the smb.conf parsers\");\n \n+PyObject *loadparm_object(void)\n+{\n+\n+\treturn NULL; /* FIXME */\n+}\n+\n PyMODINIT_FUNC initparam(void)\n {\n \tPyObject *mod = Py_InitModule3(\"param\", methods, param_doc);\n@@ -72,5 +91,5 @@\n \t\treturn;\n \n \t/* FIXME: Check error code */\n-\tPyModule_AddObject(mod, \"default_config\", loadparm_object());\n+\t/*PyModule_AddObject(mod, \"default_config\", loadparm_object());*/\n }\n\n=== modified file 'source/selftest/Samba4.pm'\n--- a/source/selftest/Samba4.pm\t2007-05-01 03:30:04 +0000\n+++ b/source/selftest/Samba4.pm\t2007-05-08 21:57:44 +0000\n@@ -417,7 +417,7 @@\n \tsystem(\"$self->{bindir}/ad2oLschema $configuration -H $privatedir/sam.ldb -I $self->{setupdir}/schema-map-openldap-2.3 -O $ldapdir/ad.schema >&2\") == 0 or die(\"schema conversion for OpenLDAP failed\");\n \n \t#Now create an LDAP baseDN\n-\tsystem(\"$self->{bindir}/smbscript $self->{setupdir}/provision $provision_options --ldap-base >&2\") == 0 or die(\"creating an OpenLDAP basedn failed\");\n+\tsystem(\"$ENV{PYTHON} $self->{setupdir}/provision $provision_options --ldap-base >&2\") == 0 or die(\"creating an OpenLDAP basedn failed\");\n \n \tmy $oldpath = $ENV{PATH};\n \t$ENV{PATH} = \"/usr/local/sbin:/usr/sbin:/sbin:$ENV{PATH}\";\n@@ -615,7 +615,7 @@\n \tpush (@provision_options, \"--password=$password\");\n \tpush (@provision_options, \"--root=$root\");\n \n-\t(system(\"$self->{bindir}/smbscript $self->{setupdir}/provision \" .  join(' ', @provision_options) . \">&2\") == 0) or die(\"Unable to provision\");\n+\t(system(\"$ENV{PYTHON} $self->{setupdir}/provision \" .  join(' ', @provision_options) . \">&2\") == 0) or die(\"Unable to provision\");\n \n \tmy $ldap_uri= \"$ldapdir/ldapi\";\n \t$ldap_uri =~ s|/|%2F|g;\n@@ -733,8 +733,8 @@\n \t\t$provision_aci = \"--aci=aci:: KHRhcmdldGF0dHIgPSAiKiIpICh2ZXJzaW9uIDMuMDthY2wgImZ1bGwgYWNjZXNzIHRvIGFsbCBieSBhbGwiO2FsbG93IChhbGwpKHVzZXJkbiA9ICJsZGFwOi8vL2FueW9uZSIpOykK\";\n \t}\n \n-\tsystem(\"$self->{bindir}/smbscript $self->{setupdir}/provision $envvars->{PROVISION_OPTIONS} \\\"$provision_aci\\\" --ldap-backend=$envvars->{LDAP_URI}\") and\n-\t\tdie(\"LDAP PROVISIONING failed: $self->{bindir}/smbscript $self->{setupdir}/provision $envvars->{PROVISION_OPTIONS} \\\"$provision_aci\\\" --ldap-backend=$envvars->{LDAP_URI}\");\n+\tsystem(\"$ENV{PYTHON} $self->{setupdir}/provision $envvars->{PROVISION_OPTIONS} \\\"$provision_aci\\\" --ldap-backend=$envvars->{LDAP_URI}\") and\n+\t\tdie(\"LDAP PROVISIONING failed: $ENV{PYTHON} $self->{setupdir}/provision $envvars->{PROVISION_OPTIONS} \\\"$provision_aci\\\" --ldap-backend=$envvars->{LDAP_URI}\");\n }\n \n sub teardown_env($$)\n\n"}