{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14378 - doc/trunk/design/syn", "body": "Author: larry\nDate: Tue Apr 24 16:49:21 2007\nNew Revision: 14378\n\nModified:\n   doc/trunk/design/syn/S09.pod\n\nLog:\ncut-n-paste typo noticed by TheDamian++\n\n\nModified: doc/trunk/design/syn/S09.pod\n==============================================================================\n--- doc/trunk/design/syn/S09.pod\t(original)\n+++ doc/trunk/design/syn/S09.pod\tTue Apr 24 16:49:21 2007\n@@ -1063,13 +1063,13 @@\n subscripts that must match the same everywhere that parameter is used.\n For example,\n \n-    do -> @wild { @b[[;] reverse @wild] = @a[[;] @wild]; };\n+    do -> @wild { @b[[;] reverse @wild] = @a[[;] @wild] };\n \n produces an array with the dimensions reversed regardless of the\n dimensionality of C<@a>.  Since the multidimensional C<@@wild> notation\n is more or less equivalent to C<[;]@wild>, you can also write that as:\n \n-    do -> @@wild { @b[reverse @@wild] = @a[[;] @@wild]; };\n+    do -> @@wild { @b[reverse @@wild] = @a[@@wild] };\n \n The optimizer is, of course, free to optimize away any implicit loops\n that it can figure out how to do more efficiently without changing\n\n"}