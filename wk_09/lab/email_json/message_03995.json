{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14370 - doc/trunk/design/syn", "body": "Author: larry\nDate: Thu Apr 12 17:11:56 2007\nNew Revision: 14370\n\nModified:\n   doc/trunk/design/syn/S02.pod\n\nLog:\nClarify the single-character backslash escapes, including \\c control forms.\nNote that \\c[ is not legal to mean \\c[ESCAPE]\n\n\nModified: doc/trunk/design/syn/S02.pod\n==============================================================================\n--- doc/trunk/design/syn/S02.pod\t(original)\n+++ doc/trunk/design/syn/S02.pod\tThu Apr 12 17:11:56 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 10 Aug 2004\n-  Last Modified: 16 Mar 2007\n+  Last Modified: 12 Apr 2007\n   Number: 2\n-  Version: 100\n+  Version: 101\n \n This document summarizes Apocalypse 2, which covers small-scale\n lexical items and typological issues.  (These Synopses also contain\n@@ -2274,7 +2274,15 @@\n \n Backslash sequences still interpolate, but there's no longer any C<\\v>\n to mean I, whatever that is...  (C<\\v> now match vertical\n-whitespace in a regex.)\n+whitespace in a regex.)  Literal character representations are:\n+\n+    \\a          BELL\n+    \\b          BACKSPACE\n+    \\t          TAB\n+    \\n          LINE FEED\n+    \\f          FORM FEED\n+    \\r          CARRIAGE RETURN\n+    \\e          ESCAPE\n \n =item *\n \n@@ -2302,6 +2310,22 @@\n \n [Note: none of the official Unicode character names contains comma.]\n \n+(Within a regex you may also use C<\\C> to match a character that is\n+not the specified character.)\n+\n+If the character following C<\\c> or C<\\C> is not a left square bracket,\n+the single following character is turned into a control character by\n+the usual trick of XORing the 64 bit.  This allows C<\\c@> for NULL\n+and C<\\c?> for DELETE, but note that the ESCAPE character may not be\n+represented that way; it must be represented something like:\n+\n+    \\e\n+    \\c[ESCAPE]\n+    \\x1B\n+    \\o33\n+\n+Obviously C<\\e> is preferred when brevity is needed.\n+\n =item *\n \n There are no barewords in Perl\u00a06.  An undeclared bare identifier will\n\n"}