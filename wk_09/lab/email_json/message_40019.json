{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23285 - in\n\tbranches/SAMBA_3_0_26/source/nsswitch: .", "body": "Author: obnox\nDate: 2007-06-01 00:04:13 +0000 (Fri, 01 Jun 2007)\nNew Revision: 23285\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23285\n\nLog:\nr23283 and r23284 also for SAMBA_3_0_26.\n\nUse a temporary talloc context in ads:lookup_groupmem and clean up\nat the end. And fix one nasty typo.\n\n\nModified:\n   branches/SAMBA_3_0_26/source/nsswitch/winbindd_ads.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0_26/source/nsswitch/winbindd_ads.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/nsswitch/winbindd_ads.c\t2007-05-31 23:58:56 UTC (rev 23284)\n+++ branches/SAMBA_3_0_26/source/nsswitch/winbindd_ads.c\t2007-06-01 00:04:13 UTC (rev 23285)\n@@ -912,12 +912,20 @@\n \tuint32 *name_types_nocache = NULL;\n \tchar **domains_nocache = NULL;     /* only needed for rpccli_lsa_lookup_sids */\n \tuint32 num_nocache = 0;\n+\tTALLOC_CTX *tmp_ctx = NULL;\n \n \tDEBUG(10,(\"ads: lookup_groupmem %s sid=%s\\n\", domain->name, \n \t\t  sid_string_static(group_sid)));\n \n \t*num_names = 0;\n \n+\ttmp_ctx = talloc_new(mem_ctx);\n+\tif (!tmp_ctx) {\n+\t\tDEBUG(1, (\"ads: lookup_groupmem: talloc failed\\n\"));\n+\t\tstatus = NT_STATUS_NO_MEMORY;\n+\t\tgoto done;\n+\t}\n+\n \tif ( !winbindd_can_contact_domain( domain ) ) {\n \t\tDEBUG(10,(\"lookup_groupmem: No incoming trust for domain %s\\n\",\n \t\t\t  domain->name));\t\t\n@@ -932,8 +940,8 @@\n \t}\n \n \t/* search for all members of the group */\n-\tif (!(ldap_exp = talloc_asprintf(mem_ctx, \"(objectSid=%s)\",\n-\t\t\t\t         sid_string_static(group_sid)))) \n+\tif (!(ldap_exp = talloc_asprintf(tmp_ctx, \"(objectSid=%s)\",\n+\t\t\t\t\t sid_string_static(group_sid)))) \n \t{\n \t\tDEBUG(1, (\"ads: lookup_groupmem: talloc_asprintf for ldap_exp failed!\\n\"));\n \t\tstatus = NT_STATUS_NO_MEMORY;\n@@ -944,7 +952,7 @@\n \targs.val = ADS_EXTENDED_DN_HEX_STRING;\n \targs.critical = True;\n \n-\trc = ads_ranged_search(ads, mem_ctx, LDAP_SCOPE_SUBTREE, ads->config.bind_path, \n+\trc = ads_ranged_search(ads, tmp_ctx, LDAP_SCOPE_SUBTREE, ads->config.bind_path, \n \t\t\t       ldap_exp, &args, \"member\", &members, &num_members);\n \n \tif (!ADS_ERR_OK(rc)) {\n@@ -967,17 +975,17 @@\n \t * we try to resolve as many sids as possible from the\n \t * cache. Only the rest is passed to the lsa_lookup_sids call. */\n \t\n-\tif (num_names) {\n+\tif (num_members) {\n \t\t(*sid_mem) = TALLOC_ZERO_ARRAY(mem_ctx, DOM_SID, num_members);\n \t\t(*names) = TALLOC_ZERO_ARRAY(mem_ctx, char *, num_members);\n \t\t(*name_types) = TALLOC_ZERO_ARRAY(mem_ctx, uint32, num_members);\n-\t\t(sid_mem_nocache) = TALLOC_ZERO_ARRAY(mem_ctx, DOM_SID, num_members);\n+\t\t(sid_mem_nocache) = TALLOC_ZERO_ARRAY(tmp_ctx, DOM_SID, num_members);\n \n \t\tif ((members == NULL) || (*sid_mem == NULL) ||\n \t\t    (*names == NULL) || (*name_types == NULL) ||\n \t\t    (sid_mem_nocache == NULL))\n \t\t{\n-\t\t\tDEBUG(1, (\"talloc failed\\n\"));\n+\t\t\tDEBUG(1, (\"ads: lookup_groupmem: talloc failed\\n\"));\n \t\t\tstatus = NT_STATUS_NO_MEMORY;\n \t\t\tgoto done;\n \t\t}\n@@ -993,7 +1001,7 @@\n \t\tchar *name, *domain_name;\n \t\tDOM_SID sid;\n \n-\t        if (!ads_get_sid_from_extended_dn(mem_ctx, members[i], args.val, &sid)) {\n+\t        if (!ads_get_sid_from_extended_dn(tmp_ctx, members[i], args.val, &sid)) {\n \t\t\tstatus = NT_STATUS_INVALID_PARAMETER;\n \t                goto done;\n \t\t}\n@@ -1019,13 +1027,13 @@\n \t/* handle sids not resolved from cache by lsa_lookup_sids */\n \tif (num_nocache > 0) {\n \n-\t\tstatus = cm_connect_lsa(domain, mem_ctx, &cli, &lsa_policy);\n+\t\tstatus = cm_connect_lsa(domain, tmp_ctx, &cli, &lsa_policy);\n \n \t\tif (!NT_STATUS_IS_OK(status)) {\n \t\t\tgoto done;\n \t\t}\n \n-\t\tstatus = rpccli_lsa_lookup_sids_all(cli, mem_ctx, \n+\t\tstatus = rpccli_lsa_lookup_sids_all(cli, tmp_ctx, \n \t\t\t\t\t\t    &lsa_policy,\n \t\t\t\t\t\t    num_nocache, \n \t\t\t\t\t\t    sid_mem_nocache, \n@@ -1046,7 +1054,7 @@\n \t\t\t\t{\n \t\t\t\t\tsid_copy(&(*sid_mem)[*num_names],\n \t\t\t\t\t\t &sid_mem_nocache[i]);\n-\t\t\t\t\t(*names)[*num_names] = names_nocache[i];\n+\t\t\t\t\t(*names)[*num_names] = talloc_steal(names, names_nocache[i]);\n \t\t\t\t\t(*name_types)[*num_names] = name_types_nocache[i];\n \t\t\t\t\t(*num_names)++;\n \t\t\t\t}\n@@ -1073,11 +1081,7 @@\n \n done:\n \n-\t/* free intermediate lists. - a temp talloc ctx might be better. */\n-\tTALLOC_FREE(sid_mem_nocache);\n-\tTALLOC_FREE(names_nocache);\n-\tTALLOC_FREE(name_types_nocache);\n-\tTALLOC_FREE(domains_nocache);\n+\tTALLOC_FREE(tmp_ctx);\n \n \treturn status;\n }\n\n"}