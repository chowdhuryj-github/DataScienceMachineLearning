{"category": "ham", "to_address": "\"Brad Baxter\" <baxter.brad@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Passing arguments to subroutine", "body": "On 6/5/07, Brad Baxter  wrote:\nsnip\n> Apparently, unlike with named subs, both &$anon()\n> and $anon->() ignore prototypes.  However, like named\n> subs &$anon gets the caller's @_.  But that is almost\n> never mentioned afaict at the places in the docs where\n> the &$anon style call is used.\n>\n> This isn't intended to be a criticism; I just wonder if some\n> small number of newcomers reading the docs might\n> be picking up calling habits from this.\nsnip\n\nYet another reason to avoid Perl 5 prototypes (they don't survive the\nsub being turned into a reference).  Happily Perl 6 fixes this\n\npugs> sub foo ($arg) { $arg }\nundef\npugs> foo()\n*** No compatible subroutine found: \"&foo\"\n    at  line 1, column 1 - line 2, column 1\npugs> foo(\"arg\")\n\"arg\"\npugs> my $coderef = \\&foo\nsub {Syn \"block\" {Var \"$arg\"}}\npugs> $coderef()\n*** No compatible subroutine found: \"$coderef\"\n    at  line 1, column 1 - line 2, column 1\npugs> $coderef(\"arg\")\n\"arg\"\n\nAdmittedly, Pugs isn't doing a good job with the error message yet,\nbut at least it is working the way one would expect.\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}