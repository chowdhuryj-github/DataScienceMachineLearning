{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Darren Duncan <darren@DarrenDuncan.net>", "subject": "variable type specific sigils (was Re: Sigils by example)", "body": "Speaking just for my own preferences, I very much like having sigils \nto differentiate variables from routines, that is, a $ prefix versus \neither & or no prefix.  However, I generally do *not* like the @ and \n% prefixes.  They seem somewhat contrived so to cover very specific \nvariable types while other very similar types don't have them, eg \nbuilt-in arrays versus some array-like other container type.\n\nAnd so in my own coding style I use $ for all arrays and hashes too, \nso all my variables are $.  This is done consistently in both Perl 5 \nand Perl 6.  The only place a @ or % appears is when I have to say \n@{} or %{}, and even then it is mainly just Perl 5 that requires \nthis, such as in foreach or map.  Perl 6 is an improvement over Perl \n5 in that it is easier to use $ for arrays and hashes too without \nmaking code more verbose as a result.\n\nI would be happy if Perl 6 dropped the @ and % for arrays and hashes, \nusing just $ instead; however, I won't necessarily request this as \nthe semantics of @ and % can be useful (assignment copy by value \nrather than by reference), and I can choose to not use them if I \ndon't want to (TIMTOADY and all that).\n\nOn the other hand, unless this steps on something, I could suggest \ndropping the @ and % anyway, so we have $array and $hash, and then we \ncould instead use the @ and % sigils as a prefix to indicate in that \ncase that we want them to copy by value.  For example:\n\n   my $foo = [23, 434, 6];\n   my $bar;\n   $bar = $foo; # copy by reference\n   @$bar = @$foo; # copy by value\n\nActually, I think that would be a vast improvement, as we could then \nuse the @ prefix with any collection type as short-hand to say that = \nis copy by value.\n\nI also don't think the language would feel any less Perlish with this change.\n\n-- Darren Duncan\n\n"}