{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Juerd Waalboer <juerd@convolution.nl>", "subject": "Re: Sigils by example", "body": "Thomas Wittek skribis 2007-05-15  0:48 (+0200):\n> > The Perl Way:\n> > $object.foo() calls the method called \"foo\".\n> > $object.$foo() calls the method that is in the variable $foo.\n> My way:\n> someref = &somemethod\n> object.someref()\n> Of course you could argue that you don't know in advance, if \"object\"\n> has a method with that name, so you cannot manually avoid the conflict.\n\nIndeed. Now you have to know your object very well, and avoid all of its\nmethod names for variable names. For example, an HTTP::Request object\nhas a .headers method. If Your Way were in effect, I could no longer\nsafely use the name \"headers\" for my own variables, and then still call\nthe \"headers\" method on the object.\n\nPerl allows both avoiding clashes and not-avoiding clashes. Your way\nonly strictly requires the former programming style. And since my\npreferred style is different, I'm glad you're not designing Perl 6.\n-- \nkorajn salutojn,\n\n  juerd waalboer:  perl hacker   \n  convolution:     ict solutions and consultancy \n"}