{"category": "ham", "to_address": "R-Help <r-help@stat.math.ethz.ch>", "from_address": "Thomas Petzoldt <thpe@simecol.de>", "subject": "Re: [R] Using odesolve to produce non-negative solutions", "body": "Dear Jeremy,\n\na few notes about your model: The equations of your derivatives are \ndesigned in a way that can lead to negative state variables with certain \nparameter combinations. In order to avoid this, you are using \"if \nconstructions\" which are intended to correct this. This method is \nhowever (as far as I have learned from theory and own experience ;-) a \nbad idea and should be strictly avoided.\n\nThis trick may violate assumptions of the ODE solvers and in many cases \nalso mass-balances (or similar).\n\nInstead of this, processes should be modeled in a way that avoids \n\"crossing zero\", e.g. exponential decay (x, k > 0):\n\ndx = - k * x  (1)\n\nand not a linear decay like\n\ndx = -k       (2)\n\nwhich by its nature can lead to negative state values.\n\nCase (1) can be managed almost perfectly by lsoda with his automatic \ninternal time step algorithm. hmax is intended for non-autonomous models \nto ensure that external signals are not skipped by the automatism, which \nmay be appropriate in your case because p seems to contain time \ndependent functions.\n\nAs far as I can see, your equations belong to type (1) and should not \nneed any of the if and for constructs, as long as your parameters (which \nare not given in your post) do have the correct sign and range (for \nexample, vax <= 1, death >= 0  etc.).\n\nIf you perform optimization, you must ensure that parameters stay in the \nplausible range is met using transformations of the parameters or \nconstraints in the optimization procedure.\n\nThomas\n\nPS: another question, what is the purpose of the state variable N?\nI guess it can be derived from the other states.\n\n\nJeremy Goldhaber-Fiebert wrote:\n> Hello,\n> \n> I am using odesolve to simulate a group of people moving through time\n> and transmitting infections to one another.\n> \n> In Matlab, there is a NonNegative option which tells the Matlab\n> solver to keep the vector elements of the ODE solution non-negative\n> at all times. What is the right way to do this in R?\n> \n> Thanks, Jeremy\n\n[... code deleted, see original post ...]\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}