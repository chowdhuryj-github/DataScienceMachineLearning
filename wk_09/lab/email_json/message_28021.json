{"category": "ham", "to_address": "Mike Mattie <codermattie@gmail.com>", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: questions on pheme", "body": "On Friday 11 May 2007 21:26:42 Mike Mattie wrote:\n\n> I am very interested in chromatic's pheme language. I have been reading\n> through the code and looking at your TODO list. I thought I would tackle\n> some of the easier issues to get a handle on PIR and help out a bit.\n\nGreat!\n\n> questions:\n>\n> 1. Are you targetting r5 or r6 ? I think r6 would be a better fit for\n> parrot myself. In particular the spec for (library foo) aka name-spaces\n> would help pheme integrate with parrot/other languages better.\n\nI haven't made a particular choice yet.  I put it on hiatus because I hated \nthe hack for dealing with special forms (particularly 'if'), and hope to port \nthe compiler to HLLCompiler.pir and the PAST step to PAST-pm at some point in \nthe near future.\n\nr6 is fine.\n\n> I decided to start with something easy: whitespace.\n>\n> I looked up r6 which has a nice BNF grammar that is a useful starting\n> point. I came up with the rules below:\n>\n> rule ignore { [  |  ]* }\n>\n> token comment { ; \\N*  }\n>\n> rule delimiter {  |  }\n> token blank { <[\\ \\t]>+ }\n> token eol { \\n\\r? }\n>\n> I know almost zero about PGE, I am reading docs etc. but basically what\n> I would like to do is build tokens out of tokens. Ideally I would like\n> to make both \"ignore\" and \"delimiter\" be tokens , not rules.\n>\n> This is more of a writing convenience. In a difficult sed script I built in\n> the past to go through and convert a bunch of broken C++ decls I would use\n> shell variables to store regex building blocks, and then assemble those\n> building blocks into higher level expressions with basic string\n> interpolation.\n>\n> question:\n>\n> 1. can tokens be used to build tokens ? In perl 5 I would compile a regex\n> with string interpolation to get this sort of functionality. if so is there\n> a name for this feature in PGE ?\n\nPatrick or Allison knows better.\n\n> 2. token eol { \\n\\r? }\n>\n>    This is pretty clearly for handling windows line terminators. This is\n> the sort of thing that should be pushed down into parrot. a special builtin\n> \"eol\" or \"end-of-line\" token could help get rid of this stuff out of\n> parrot. Is this RT worthy ? Something like this would definitely fit with\n> the \"conservation of cruft\" principle.\n\nThat seems reasonable to me.\n\n> 3. Is there a tool for pretty printing a AST dump ? I am thinking of\n> dumping the AST using dump, then using a classic tree drawing algorithm ,\n> and drawing a tree using SVG. Something like that could probably be done\n> easily in perl5. Is there a tool like this ?\n\nHLLCompiler can do this with little effort.  I usually modify \nlib/PhemeCompiler.pir and uncomment the appropriate line in compile().  It \nreally needs a port to HLLCompiler.\n\n> 4. how do you debug AST ? recommended tools ?\n\nThe brute force application of your head against a wall.\n\n> atom handling:\n>\n> I noticed that atom handling looked very alpha. It looks like you want to\n> distinguish between symbols \"foo\" | \"foo-bar\" , and literal values \"#t\" |\n> \"#f\". This is really nasty to do at a lexical level.\n>\n> A nicer way to do this would be to form a string token like this:\n>\n> token string { + }\n>\n> token reserved {\n>   # r5 reserved\n>   # future reserved\n>   <[\n>     \\( \\) \\# '\n>\n>     \\[ \\] \\{ \\}\n>   ]>\n> }\n>\n> At this point most languages are going to need to post-lexical analysis of\n> the string to distinguish literal values from symbols. A syntax like this\n> would be nice:\n>\n> token truth:string {\n>   # <[tf]>\n> }\n>\n> token integral:string {\n>   \\d+\n> }\n>\n> token symbol:string fallback\n>\n> This syntax would indicate that after the token string has been lexed that\n> it is again analyzed by a regex, and converted to either a truth value,\n> integral value, or a symbol if all else fails.\n>\n> If this is not already implemented I would like to create a TODO RT for\n> it.\n\nBe my guest.\n\nI'm not sure what Patrick's new languages/abc plan means for Pheme, but it's \nunlikely I'll have time to absorb the new features and get Pheme up to date \nwith regard to HLLCompiler in the next couple of weeks.\n\n-- c\n\n"}