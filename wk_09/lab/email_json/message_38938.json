{"category": "ham", "to_address": "andrew@acooke.org", "from_address": "\"Will Coleda\" <will@coleda.com>", "subject": "Re: Intro / Parrot / Functional Lang Imp Q", "body": "andrew cooke writes: \n\n>>> Also, am I right in thinking that I can use whatever language I want for\n>>> generating the IR?\n>>\n>> Sure. languages/BASIC used perl, as did tcl some time back. Most are\n>> generating PIR with PIR these days, though. (ISTR plumhead is generating\n>> PIR multiple ways)\n> \n> I will check the languages directory, but this confuses me - do people\n> write parsers in PIR?\n\n... I wasn't entirely accurate here. \n\nMany languages (APL, punie, abc, tcl) use PGE's perl6-like grammars to \ndefine their parser. I've worked on tcl, so I'll use that as an example. ABC \nis probably better for actually starting out. \n\nhttp://svn.perl.org/parrot/trunk/languages/tcl/src/grammar/expr/expression.p \ng \n\nThis is the grammar for tcl, written in a subset of perl6. \n\nhttp://svn.perl.org/parrot/trunk/languages/tcl/src/grammar/expr/pge2past.tg \n\nThis is a TGE grammar which, given the input and the PGE grammar, generates \nan AST. The code inside the transforms here is (must be, at the moment) PIR. \n\nhttp://svn.perl.org/parrot/trunk/languages/tcl/src/grammar/expr/past2pir.tg \n\nThis takes the AST and transforms it to PIR. (again, the transforms here are \nwritten in PIR) \n\nThis PIR is then compiled with the PIR compiler available from inside \nparrot, which generates an executable chunk of bytecode. \n\nFYI, when tcl is built, all the PGE and TGE grammars are themselves compiled \nto PIR, then bytecode. \n\nThis is just a high level overview. I'll try to get this (and any followup \nquestions) incorporated into docs/compiler_faq.pod \n\nRegards.\n\n"}