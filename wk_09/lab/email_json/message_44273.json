{"category": "ham", "to_address": "\"Steve Peters\" <steve@fisharerojo.org>", "from_address": "\"Paul Cochrane\" <paultcochrane@gmail.com>", "subject": "Re: Building with icc", "body": "> perl Configure.pl --cc=icc --link=icc --ld=icc\n\nI tried this, but got the following output from Configure.pl:\n\ncochrane@avon parrot_svn2 $ perl Configure.pl --cc=icc --link=icc --ld=icc\nParrot Version 0.4.12 Configure 2.0\nCopyright (C) 2001-2007, The Perl Foundation.\n\nHello, I'm Configure. My job is to poke and prod your system to figure out\nhow to build Parrot. The process is completely automated, unless you passed in\nthe `--ask' flag on the command line, in which case it'll prompt you for a few\npieces of info.\n\nSince you're running this program, you obviously have Perl 5--I'll be pulling\nsome defaults from its configuration.\n\nChecking MANIFEST.....................................................done.\nSetting up Configure's default values.................................done.\nSetting up installation paths.........................................done.\nTweaking settings for miniparrot...................................skipped.\nLoading platform and local hints files................................done.\nDetermining nongenerated header files.................................done.\nDetermining what C compiler and linker to use.........................done.\nDetermining whether make is installed..................................yes.\nDetermining whether lex is installed...............................skipped.\nDetermining whether yacc is installed..............................skipped.\nDetermining if your C compiler is actually gcc..........................no.\nDetermining if your C compiler is actually Visual C++...................no.\nEnabling optimization...................................................no.\nDetermining flags for building shared libraries......................-fPIC.\nDetermine if parrot should be linked against a shared library..........yes.\nDetermining what charset files should be compiled in..................done.\nDetermining what encoding files should be compiled in.................done.\nDetermining what types Parrot should use..............................done.\nDetermining what opcode files should be compiled in...................done.\nDetermining what pmc files should be compiled in......................done.\nDetermining your minimum pointer alignment......................... 1 byte.\nProbing for C headers.................................................done.\nDetermining some sizes................................................done.\nComputing native byteorder for Parrot's wordsize.............little-endian.\nTest the type of va_ptr (this test is likely to segfault)...\nstep auto::va_ptr died during execution: Unknown va_ptr type at\nconfig/auto/va_ptr.pm line 38.\n\n at Configure.pl line 350\n\nFiguring out how to pack() Parrot's types.............................done.\nFiguring out what formats should be used for sprintf..................done.\nDetermining if your C library has a working S_ISREG....................yes.\nDetermining architecture, OS and JIT capability.......................done.\nGenerating CPU specific stuff.........................................done.\nVerifying that the compiler supports function pointer casts............yes.\nDetermining whether your compiler supports computed goto...............yes.\nDetermining if your compiler supports inline...........................yes.\nDetermining what allocator to use.....................................done.\nDetermining if your C library supports memalign........................yes.\nDetermining some signal stuff.........................................done.\nDetermining whether there is socklen_t.................................yes.\nDetermining if your C library has setenv / unsetenv...................both.\nDetermining if your platform supports AIO..............................yes.\nDetermining if your platform supports GMP..............................yes.\nDetermining if your platform supports readline.........................yes.\nDetermining if your platform supports gdbm.............................yes.\nTesting snprintf......................................................done.\nDetermining whether perldoc is installed...............................yes.\nDetermining whether python is installed.........................yes, 2.4.4.\nDetermining whether GNU m4 is installed................................yes.\nRunning CPU specific stuff............................................done.\nDetermining whether ICU is installed...................................yes.\nDetermining Parrot's revision.......................................r18861.\nGenerating C headers...Use of uninitialized value in concatenation (.)\nor string at (eval 76) line 63, <$in> line 10.\nUse of uninitialized value in string eq at (eval 76) line 67, <$in> line 10.\nUse of uninitialized value in string eq at (eval 76) line 73, <$in> line 10.\n...............................................done.\nGenerating core pmc list..............................................done.\nGenerating runtime/parrot/include.....................................done.\nConfiguring languages.................................................done.\nGenerating makefiles and other build files............................done.\nMoving platform files into place......................................done.\nRecording configuration data for later retrieval......................done.\nOkay, we're done!\n\nYou can now use `make' to build your Parrot.\n(NOTE: do not use `make -j '!)\nAfter that, you can use `make test' to run the test suite.\n\nHappy Hacking,\n        The Parrot Team\n\n\nAnd now make complains with:\n\nMakefile:830: *** missing separator.  Stop.\n\n\nMy platform is Gentoo Linux x86 and\n\ncochrane@avon parrot_svn2 $ icc --version\niccbin (ICC) 9.1 20061103\nCopyright (C) 1985-2006 Intel Corporation.  All rights reserved.\n\n\nThought this might be of interest.\n\nPaul\n\n"}