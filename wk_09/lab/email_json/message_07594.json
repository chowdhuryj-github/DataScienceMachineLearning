{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "Rev 139: fixed a missing idr remove,\n\tand check the types after idr_find() in\n\thttp://samba.org/~tridge/ctdb", "body": "------------------------------------------------------------\nrevno: 139\nrevision-id: tridge@samba.org-20070417100301-d4155325c957a5c8\nparent: tridge@samba.org-20070417094129-679a037628a088fc\ncommitter: Andrew Tridgell \nbranch nick: tridge\ntimestamp: Tue 2007-04-17 20:03:01 +1000\nmessage:\n  fixed a missing idr remove, and check the types after idr_find()\nmodified:\n  common/ctdb_call.c             ctdb_call.c-20061128065342-to93h6eejj5kon81-1\n  common/ctdb_client.c           ctdb_client.c-20070411010216-3kd8v37k61steeya-1\n=== modified file 'common/ctdb_call.c'\n--- a/common/ctdb_call.c\t2007-04-17 07:11:12 +0000\n+++ b/common/ctdb_call.c\t2007-04-17 10:03:01 +0000\n@@ -424,6 +424,11 @@\n \tstate = idr_find(ctdb->idr, hdr->reqid);\n \tif (state == NULL) return;\n \n+\tif (!talloc_get_type(state, struct ctdb_call_state)) {\n+\t\tprintf(\"ctdb idr type error at %s\\n\", __location__);\n+\t\treturn;\n+\t}\n+\n \tstate->call.reply_data.dptr = c->data;\n \tstate->call.reply_data.dsize = c->datalen;\n \tstate->call.status = c->status;\n@@ -458,6 +463,12 @@\n \tif (state == NULL) {\n \t\treturn;\n \t}\n+\n+\tif (!talloc_get_type(state, struct ctdb_call_state)) {\n+\t\tprintf(\"ctdb idr type error at %s\\n\", __location__);\n+\t\treturn;\n+\t}\n+\n \tctdb_db = state->ctdb_db;\n \n \tdata.dptr = c->data;\n@@ -495,6 +506,11 @@\n \tstate = idr_find(ctdb->idr, hdr->reqid);\n \tif (state == NULL) return;\n \n+\tif (!talloc_get_type(state, struct ctdb_call_state)) {\n+\t\tprintf(\"ctdb idr type error at %s\\n\", __location__);\n+\t\treturn;\n+\t}\n+\n \ttalloc_steal(state, c);\n \n \tstate->state  = CTDB_CALL_ERROR;\n@@ -520,6 +536,11 @@\n \tstate = idr_find(ctdb->idr, hdr->reqid);\n \tif (state == NULL) return;\n \n+\tif (!talloc_get_type(state, struct ctdb_call_state)) {\n+\t\tprintf(\"ctdb idr type error at %s\\n\", __location__);\n+\t\treturn;\n+\t}\n+\n \ttalloc_steal(state, c);\n \t\n \t/* don't allow for too many redirects */\n\n=== modified file 'common/ctdb_client.c'\n--- a/common/ctdb_client.c\t2007-04-17 07:10:50 +0000\n+++ b/common/ctdb_client.c\t2007-04-17 10:03:01 +0000\n@@ -57,6 +57,7 @@\n \tenum fetch_lock_state state;\n \tstruct ctdb_db_context *ctdb_db;\n \tstruct ctdb_reply_fetch_lock *r;\n+\tstruct ctdb_req_fetch_lock *req;\n \tstruct ctdb_ltdb_header header;\n };\n \n@@ -76,6 +77,11 @@\n \tstate = idr_find(ctdb->idr, hdr->reqid);\n \tif (state == NULL) return;\n \n+\tif (!talloc_get_type(state, struct ctdb_fetch_lock_state)) {\n+\t\tprintf(\"ctdb idr type error at %s\\n\", __location__);\n+\t\treturn;\n+\t}\n+\n \tstate->r = talloc_steal(state, r);\n \n \t/* get an extra reference here - this prevents the free in ctdb_recv_pkt()\n@@ -420,6 +426,12 @@\n \tctdb_daemon_connect_wait(ctdb);\n }\n \n+static int ctdb_fetch_lock_destructor(struct ctdb_fetch_lock_state *state)\n+{\n+\tidr_remove(state->ctdb_db->ctdb->idr, state->req->hdr.reqid);\n+\treturn 0;\n+}\n+\n static struct ctdb_fetch_lock_state *ctdb_client_fetch_lock_send(struct ctdb_db_context *ctdb_db, \n \t\t\t\t\t\t\t\t TALLOC_CTX *mem_ctx, \n \t\t\t\t\t\t\t\t TDB_DATA key, \n@@ -443,7 +455,7 @@\n \tstate->state   = CTDB_FETCH_LOCK_WAIT;\n \tstate->ctdb_db = ctdb_db;\n \tlen = offsetof(struct ctdb_req_fetch_lock, key) + key.dsize;\n-\treq = ctdbd_allocate_pkt(ctdb, len);\n+\tstate->req = req = ctdbd_allocate_pkt(ctdb, len);\n \tif (req == NULL) {\n \t\tprintf(\"failed to allocate packet\\n\");\n \t\treturn NULL;\n@@ -461,6 +473,8 @@\n \treq->keylen          = key.dsize;\n \treq->header          = *header;\n \tmemcpy(&req->key[0], key.dptr, key.dsize);\n+\n+\ttalloc_set_destructor(state, ctdb_fetch_lock_destructor);\n \t\n \tres = ctdb_client_queue_pkt(ctdb, &req->hdr);\n \tif (res != 0) {\n\n"}