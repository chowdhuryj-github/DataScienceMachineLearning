{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "metze@samba.org", "subject": "svn commit: samba r22226 - in branches/SAMBA_4_0/source/lib:\n\tldb/include replace util", "body": "Author: metze\nDate: 2007-04-15 21:13:13 +0000 (Sun, 15 Apr 2007)\nNew Revision: 22226\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22226\n\nLog:\nmove discard_const macros to librelace\n\nmetze\nModified:\n   branches/SAMBA_4_0/source/lib/ldb/include/includes.h\n   branches/SAMBA_4_0/source/lib/replace/replace.h\n   branches/SAMBA_4_0/source/lib/replace/strptime.c\n   branches/SAMBA_4_0/source/lib/util/util.h\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/lib/ldb/include/includes.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/ldb/include/includes.h\t2007-04-15 20:58:00 UTC (rev 22225)\n+++ branches/SAMBA_4_0/source/lib/ldb/include/includes.h\t2007-04-15 21:13:13 UTC (rev 22226)\n@@ -16,11 +16,6 @@\n #define dyn_MODULESDIR dyn_LIBDIR\n #endif\n \n-\n-\n-#define discard_const(ptr) ((void *)((intptr_t)(ptr)))\n-#define discard_const_p(type, ptr) ((type *)discard_const(ptr))\n-\n #include \"replace.h\"\n #include \"system/filesys.h\"\n #include \"system/network.h\"\n\nModified: branches/SAMBA_4_0/source/lib/replace/replace.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/replace.h\t2007-04-15 20:58:00 UTC (rev 22225)\n+++ branches/SAMBA_4_0/source/lib/replace/replace.h\t2007-04-15 21:13:13 UTC (rev 22226)\n@@ -79,6 +79,29 @@\n #include \n #endif\n \n+/**\n+  this is a warning hack. The idea is to use this everywhere that we\n+  get the \"discarding const\" warning from gcc. That doesn't actually\n+  fix the problem of course, but it means that when we do get to\n+  cleaning them up we can do it by searching the code for\n+  discard_const.\n+\n+  It also means that other error types aren't as swamped by the noise\n+  of hundreds of const warnings, so we are more likely to notice when\n+  we get new errors.\n+\n+  Please only add more uses of this macro when you find it\n+  _really_ hard to fix const warnings. Our aim is to eventually use\n+  this function in only a very few places.\n+\n+  Also, please call this via the discard_const_p() macro interface, as that\n+  makes the return type safe.\n+*/\n+#define discard_const(ptr) ((void *)((intptr_t)(ptr)))\n+\n+/** Type-safe version of discard_const */\n+#define discard_const_p(type, ptr) ((type *)discard_const(ptr))\n+\n #ifndef HAVE_STRERROR\n extern char *sys_errlist[];\n #define strerror(i) sys_errlist[i]\n\nModified: branches/SAMBA_4_0/source/lib/replace/strptime.c\n===================================================================\n--- branches/SAMBA_4_0/source/lib/replace/strptime.c\t2007-04-15 20:58:00 UTC (rev 22225)\n+++ branches/SAMBA_4_0/source/lib/replace/strptime.c\t2007-04-15 21:13:13 UTC (rev 22226)\n@@ -974,7 +974,7 @@\n   if (want_xday && !have_yday)\n     day_of_the_year (tm);\n \n-  return (char *) rp;\n+  return discard_const_p(char, rp);\n }\n \n \n\nModified: branches/SAMBA_4_0/source/lib/util/util.h\n===================================================================\n--- branches/SAMBA_4_0/source/lib/util/util.h\t2007-04-15 20:58:00 UTC (rev 22225)\n+++ branches/SAMBA_4_0/source/lib/util/util.h\t2007-04-15 21:13:13 UTC (rev 22226)\n@@ -107,27 +107,4 @@\n #define strlen(x) valgrind_strlen(x)\n #endif\n \n-/**\n-  this is a warning hack. The idea is to use this everywhere that we\n-  get the \"discarding const\" warning from gcc. That doesn't actually\n-  fix the problem of course, but it means that when we do get to\n-  cleaning them up we can do it by searching the code for\n-  discard_const.\n-\n-  It also means that other error types aren't as swamped by the noise\n-  of hundreds of const warnings, so we are more likely to notice when\n-  we get new errors.\n-\n-  Please only add more uses of this macro when you find it\n-  _really_ hard to fix const warnings. Our aim is to eventually use\n-  this function in only a very few places.\n-\n-  Also, please call this via the discard_const_p() macro interface, as that\n-  makes the return type safe.\n-*/\n-#define discard_const(ptr) ((void *)((intptr_t)(ptr)))\n-\n-/** Type-safe version of discard_const */\n-#define discard_const_p(type, ptr) ((type *)discard_const(ptr))\n-\n #endif /* _SAMBA_UTIL_H_ */\n\n"}