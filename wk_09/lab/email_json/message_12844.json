{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "metze@samba.org", "subject": "svn commit: samba r22470 - in branches/SAMBA_4_0/source/librpc/rpc:\n\t.", "body": "Author: metze\nDate: 2007-04-22 23:00:22 +0000 (Sun, 22 Apr 2007)\nNew Revision: 22470\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22470\n\nLog:\nmerge handling of broken connections from wins replication client code\nto the rpc client code\n\nwe need to always ask for read events on the socket otherwise we never\nget the connection error reported.\n\nshutdown the transport when a request timeout.\n\nmetze\nModified:\n   branches/SAMBA_4_0/source/librpc/rpc/dcerpc.c\n   branches/SAMBA_4_0/source/librpc/rpc/dcerpc.h\n   branches/SAMBA_4_0/source/librpc/rpc/dcerpc_smb.c\n   branches/SAMBA_4_0/source/librpc/rpc/dcerpc_smb2.c\n   branches/SAMBA_4_0/source/librpc/rpc/dcerpc_sock.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/librpc/rpc/dcerpc.c\n===================================================================\n--- branches/SAMBA_4_0/source/librpc/rpc/dcerpc.c\t2007-04-22 21:23:37 UTC (rev 22469)\n+++ branches/SAMBA_4_0/source/librpc/rpc/dcerpc.c\t2007-04-22 23:00:22 UTC (rev 22470)\n@@ -37,14 +37,17 @@\n \treturn NT_STATUS_OK;\n }\n \n+static void dcerpc_connection_dead(struct dcerpc_connection *conn, NTSTATUS status);\n static void dcerpc_ship_next_request(struct dcerpc_connection *c);\n \n /* destroy a dcerpc connection */\n-static int dcerpc_connection_destructor(struct dcerpc_connection *c)\n+static int dcerpc_connection_destructor(struct dcerpc_connection *conn)\n {\n-\tif (c->transport.shutdown_pipe) {\n-\t\tc->transport.shutdown_pipe(c);\n+\tif (conn->dead) {\n+\t\tconn->free_skipped = True;\n+\t\treturn -1;\n \t}\n+\tdcerpc_connection_dead(conn, NT_STATUS_LOCAL_DISCONNECT);\n \treturn 0;\n }\n \n@@ -553,6 +556,14 @@\n */\n static void dcerpc_connection_dead(struct dcerpc_connection *conn, NTSTATUS status)\n {\n+\tif (conn->dead) return;\n+\n+\tconn->dead = true;\n+\n+\tif (conn->transport.shutdown_pipe) {\n+\t\tconn->transport.shutdown_pipe(conn, status);\n+\t}\n+\n \t/* all pending requests get the error */\n \twhile (conn->pending) {\n \t\tstruct rpc_request *req = conn->pending;\n@@ -563,6 +574,11 @@\n \t\t\treq->async.callback(req);\n \t\t}\n \t}\t\n+\n+\ttalloc_set_destructor(conn, NULL);\n+\tif (conn->free_skipped) {\n+\t\ttalloc_free(conn);\n+\t}\n }\n \n /*\n@@ -657,18 +673,7 @@\n \t\t\t\t   struct timeval t, void *private)\n {\n \tstruct rpc_request *req = talloc_get_type(private, struct rpc_request);\n-\n-\tif (req->state == RPC_REQUEST_DONE) {\n-\t\treturn;\n-\t}\n-\n-\tdcerpc_req_dequeue(req);\n-\n-\treq->status = NT_STATUS_IO_TIMEOUT;\n-\treq->state = RPC_REQUEST_DONE;\n-\tif (req->async.callback) {\n-\t\treq->async.callback(req);\n-\t}\n+\tdcerpc_connection_dead(req->p->conn, NT_STATUS_IO_TIMEOUT);\n }\n \n /*\n\nModified: branches/SAMBA_4_0/source/librpc/rpc/dcerpc.h\n===================================================================\n--- branches/SAMBA_4_0/source/librpc/rpc/dcerpc.h\t2007-04-22 21:23:37 UTC (rev 22469)\n+++ branches/SAMBA_4_0/source/librpc/rpc/dcerpc.h\t2007-04-22 23:00:22 UTC (rev 22470)\n@@ -57,11 +57,14 @@\n \tconst char *binding_string;\n \tstruct event_context *event_ctx;\n \n+\tbool dead;\n+\tbool free_skipped;\n+\n \tstruct dcerpc_transport {\n \t\tenum dcerpc_transport_t transport;\n \t\tvoid *private;\n \n-\t\tNTSTATUS (*shutdown_pipe)(struct dcerpc_connection *);\n+\t\tNTSTATUS (*shutdown_pipe)(struct dcerpc_connection *, NTSTATUS status);\n \n \t\tconst char *(*peer_name)(struct dcerpc_connection *);\n \n\nModified: branches/SAMBA_4_0/source/librpc/rpc/dcerpc_smb.c\n===================================================================\n--- branches/SAMBA_4_0/source/librpc/rpc/dcerpc_smb.c\t2007-04-22 21:23:37 UTC (rev 22469)\n+++ branches/SAMBA_4_0/source/librpc/rpc/dcerpc_smb.c\t2007-04-22 23:00:22 UTC (rev 22470)\n@@ -326,14 +326,14 @@\n /* \n    shutdown SMB pipe connection\n */\n-static NTSTATUS smb_shutdown_pipe(struct dcerpc_connection *c)\n+static NTSTATUS smb_shutdown_pipe(struct dcerpc_connection *c, NTSTATUS status)\n {\n \tstruct smb_private *smb = c->transport.private;\n \tunion smb_close io;\n \tstruct smbcli_request *req;\n \n \t/* maybe we're still starting up */\n-\tif (!smb) return NT_STATUS_OK;\n+\tif (!smb) return status;\n \n \tio.close.level = RAW_CLOSE_CLOSE;\n \tio.close.in.file.fnum = smb->fnum;\n@@ -346,7 +346,7 @@\n \n \ttalloc_free(smb);\n \n-\treturn NT_STATUS_OK;\n+\treturn status;\n }\n \n /*\n\nModified: branches/SAMBA_4_0/source/librpc/rpc/dcerpc_smb2.c\n===================================================================\n--- branches/SAMBA_4_0/source/librpc/rpc/dcerpc_smb2.c\t2007-04-22 21:23:37 UTC (rev 22469)\n+++ branches/SAMBA_4_0/source/librpc/rpc/dcerpc_smb2.c\t2007-04-22 23:00:22 UTC (rev 22470)\n@@ -299,14 +299,14 @@\n /* \n    shutdown SMB pipe connection\n */\n-static NTSTATUS smb2_shutdown_pipe(struct dcerpc_connection *c)\n+static NTSTATUS smb2_shutdown_pipe(struct dcerpc_connection *c, NTSTATUS status)\n {\n \tstruct smb2_private *smb = c->transport.private;\n \tstruct smb2_close io;\n \tstruct smb2_request *req;\n \n \t/* maybe we're still starting up */\n-\tif (!smb) return NT_STATUS_OK;\n+\tif (!smb) return status;\n \n \tZERO_STRUCT(io);\n \tio.in.file.handle = smb->handle;\n@@ -318,7 +318,7 @@\n \n \ttalloc_free(smb);\n \n-\treturn NT_STATUS_OK;\n+\treturn status;\n }\n \n /*\n\nModified: branches/SAMBA_4_0/source/librpc/rpc/dcerpc_sock.c\n===================================================================\n--- branches/SAMBA_4_0/source/librpc/rpc/dcerpc_sock.c\t2007-04-22 21:23:37 UTC (rev 22469)\n+++ branches/SAMBA_4_0/source/librpc/rpc/dcerpc_sock.c\t2007-04-22 23:00:22 UTC (rev 22470)\n@@ -48,12 +48,34 @@\n {\n \tstruct sock_private *sock = p->transport.private;\n \n-\tif (sock && sock->sock != NULL) {\n+\tif (!sock) return;\n+\n+\tif (sock->fde) {\n \t\ttalloc_free(sock->fde);\n+\t\tsock->fde = NULL;\n+\t}\n+\n+\tif (sock->sock) {\n+\t\ttalloc_free(sock->fde);\n+\t\tsock->fde = NULL;\n \t\ttalloc_free(sock->sock);\n \t\tsock->sock = NULL;\n \t}\n \n+\tif (sock->packet) {\n+\t\tpacket_recv_disable(sock->packet);\n+\t\tpacket_set_fde(sock->packet, NULL);\n+\t\tpacket_set_socket(sock->packet, NULL);\n+\t}\n+\n+\tif (NT_STATUS_EQUAL(NT_STATUS_UNSUCCESSFUL, status)) {\n+\t\tstatus = NT_STATUS_UNEXPECTED_NETWORK_ERROR;\n+\t}\n+\n+\tif (NT_STATUS_EQUAL(NT_STATUS_OK, status)) {\n+\t\tstatus = NT_STATUS_END_OF_FILE;\n+\t}\n+\n \tif (!NT_STATUS_IS_OK(status)) {\n \t\tp->transport.recv_data(p, NULL, status);\n \t}\n@@ -172,15 +194,15 @@\n /* \n    shutdown sock pipe connection\n */\n-static NTSTATUS sock_shutdown_pipe(struct dcerpc_connection *p)\n+static NTSTATUS sock_shutdown_pipe(struct dcerpc_connection *p, NTSTATUS status)\n {\n \tstruct sock_private *sock = p->transport.private;\n \n \tif (sock && sock->sock) {\n-\t\tsock_dead(p, NT_STATUS_OK);\n+\t\tsock_dead(p, status);\n \t}\n \n-\treturn NT_STATUS_OK;\n+\treturn status;\n }\n \n /*\n@@ -253,7 +275,7 @@\n \tsock->server_name   = strupper_talloc(sock, s->target_hostname);\n \n \tsock->fde = event_add_fd(conn->event_ctx, sock->sock, socket_get_fd(sock->sock),\n-\t\t\t\t 0, sock_io_handler, conn);\n+\t\t\t\t EVENT_FD_READ, sock_io_handler, conn);\n \t\n \tconn->transport.private = sock;\n \n@@ -272,7 +294,6 @@\n \tpacket_set_event_context(sock->packet, conn->event_ctx);\n \tpacket_set_fde(sock->packet, sock->fde);\n \tpacket_set_serialise(sock->packet);\n-\tpacket_recv_disable(sock->packet);\n \tpacket_set_initial_read(sock->packet, 16);\n \n \t/* ensure we don't get SIGPIPE */\n\n"}