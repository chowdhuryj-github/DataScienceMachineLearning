{"category": "ham", "to_address": "Beginners Perl <beginners@perl.org>", "from_address": "Rob Dixon <rob.dixon@350.com>", "subject": "Re: Sort + Use of uninitialized value", "body": "yitzle wrote:\n> Inside the loop I check if the value is defined, so I don't care where\n> in the order the undefined one shows up in. I don't want to delete\n> undefined ones or anything...\n> \n> \n> On 4/25/07, Chas Owens  wrote:\n>> On 4/25/07, yitzle  wrote:\n>> > Warning message:\n>> > Use of uninitialized value in numeric comparison (<=>) at ...\n>> >\n>> > Code:\n>> > foreach (sort { $dHash{$b}{'VAL} <=> $dHash{$a}{'VAL'} } keys %dHash) {\n>> >\n>> > How do I fix? Should my sort function be checking for variable\n>> > defined? What do I return on undefined?\n>>\n>> It sounds like one of your keys does not have the key 'VAL' defined or\n>> its value is undef.  This may or may not be an error (which is why it\n>> is a warning message).  I would loop over %dHash until I found the bad\n>> value(s) and then decided what to do from there.\n>>\n>> for my $key (sort keys %dHash) {\n>>     if (not exists $dHash{$key}{VAL}) {\n>>         print \"$key does not have a VAL\\n\";\n>>     elsif (not defined $dHash{$key}{VAL}) {\n>>          print \"$key's VAL is undefined\"\n>>     }\n>> }\n\n... or you could define a sort subroutine and switch off warnings of undefined\nvalues just within that routine:\n\n  sub byVal {\n    no warnings 'uninitialized';\n    $dHash{$b}{VAL} <=> $dHash{$a}{VAL};\n  } \n\n  foreach (sort byVal keys %dHash) {\n    print $_, \"\\n\";\n  }\n\nHTH too!\n\nRob\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}