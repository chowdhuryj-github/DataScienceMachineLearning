{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"Jenda Krynicky\" <Jenda@Krynicky.cz>", "subject": "Re: RegEx Substitution + Arrays", "body": "From: Seanie \n> Rob Dixon wrote:\n> > > map(s/$find/$replace/, @arr);\n> > Haha yes you can, but if you want to write nasty code go for\n> >   grep s/$find/$replace/, @arr;\n> > which also works.\n> \n> True, but grep implies \"find stuff\", while map implies \"do stuff\", so your \n> nasty code is way, way, nastier than mine - it masks the intention.\n> \n> Maybe using map in void context is deep-level wrongness, but it'd be nice if \n> somebody would explain WHY, instead of posting \"don't do it\" one-liners. \n\nWell, because it's \"for\" that implies \"do stuff\". \"map\" means \n\"transform stuff and give me the results\". With a \"for\" I expect that \nthe work will be done as a side-effect, with \"map\" I expect that the \ncode block will be side-effect free. That it will get a value and \nproduce a value (or values). Sure, it may make sense to produce a \nvalue and do something more at the same time, but the produced value \nshould be the main result.\n\nJenda\n===== Jenda@Krynicky.cz === http://Jenda.Krynicky.cz =====\nWhen it comes to wine, women and song, wizards are allowed \nto get drunk and croon as much as they like.\n\t-- Terry Pratchett in Sourcery\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}