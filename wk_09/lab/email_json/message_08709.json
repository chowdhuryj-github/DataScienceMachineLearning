{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "metze@samba.org", "subject": "svn commit: samba r22329 - in\n\tbranches/SAMBA_4_0/source/script/tests: .", "body": "Author: metze\nDate: 2007-04-18 11:08:16 +0000 (Wed, 18 Apr 2007)\nNew Revision: 22329\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22329\n\nLog:\nabstract the output handling of run_test()\nvia function pointers\n\nmetze\nModified:\n   branches/SAMBA_4_0/source/script/tests/selftest.pl\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/script/tests/selftest.pl\n===================================================================\n--- branches/SAMBA_4_0/source/script/tests/selftest.pl\t2007-04-18 01:17:30 UTC (rev 22328)\n+++ branches/SAMBA_4_0/source/script/tests/selftest.pl\t2007-04-18 11:08:16 UTC (rev 22329)\n@@ -234,19 +234,64 @@\n }\n \n my $test_output = {};\n-sub run_test_plain($$$$)\n+\n+sub plain_start_msg($)\n {\n-\tmy ($name, $cmd, $i, $totalsuites) = @_;\n-\tmy $err = \"\";\n-\tif ($#$suitesfailed+1 > 0) { $err = \", \".($#$suitesfailed+1).\" errors\"; }\n-\tprint \"[$i/$totalsuites in \" . (time() - $start).\"s$err] $name\\n\";\n+\tmy ($state) = @_;\n+\tmy $out = \"\";\n+\n+\t$out .= \"[$state->{INDEX}/$state->{TOTAL} in \" . ($state->{START} - $start) . \"s\";\n+\t$out .= \", \".($#$suitesfailed+1).\" errors\" if ($#$suitesfailed+1 > 0);\n+\t$out .= \"] $state->{NAME}\\n\";\n+\n+\t$test_output->{$state->{NAME}} = \"\" unless $opt_verbose;\n+\n+\tprint $out;\n+}\n+\n+sub plain_output_msg($$)\n+{\n+\tmy ($state, $output) = @_;\n+\n+\tif ($opt_verbose) {\n+\t\tprint $output;\n+\t} else {\n+\t\t$test_output->{$state->{NAME}} .= $output;\n+\t}\n+}\n+\n+sub plain_end_msg($$$)\n+{\n+\tmy ($state, $expected_ret, $ret) = @_;\n+\n+\tif ($ret != $expected_ret and ($opt_immediate or $opt_one) and not $opt_verbose) {\n+\t\tprint $test_output->{$state->{NAME}}.\"\\n\";\n+\t}\n+}\n+\n+my $plain_msg_ops = {\n+\tstart_msg\t=> \\&plain_start_msg,\n+\toutput_msg\t=> \\&plain_output_msg,\n+\tend_msg\t\t=> \\&plain_end_msg\n+};\n+\n+sub run_test($$$$$)\n+{\n+\tmy ($name, $cmd, $i, $totalsuites, $msg_ops) = @_;\n+\tmy $msg_state = {\n+\t\tNAME\t=> $name,\n+\t\tCMD\t=> $cmd,\n+\t\tINDEX\t=> $i,\n+\t\tTOTAL\t=> $totalsuites,\n+\t\tSTART\t=> time()\n+\t};\n+\t$msg_ops->{start_msg}($msg_state);\n+\t$msg_ops->{output_msg}($msg_state, \"COMMAND: $cmd\\n\");\n \topen(RESULT, \"$cmd 2>&1|\");\n \tmy $expected_ret = 1;\n \tmy $open_tests = {};\n-\t$test_output->{$name} = \"\";\n-\twhile () { \n-\t\t$test_output->{$name}.=$_;\n-\t\tprint if ($opt_verbose);\n+\twhile () {\n+\t\t$msg_ops->{output_msg}($msg_state, $_);\n \t\tif (/^test: (.+)\\n/) {\n \t\t\t$open_tests->{$1} = 1;\n \t\t} elsif (/^(success|failure|skip|error): (.*?)( \\[)?\\n/) {\n@@ -274,15 +319,12 @@\n \t\t\t}\n \t\t}\n \t}\n-\t$test_output->{$name}.=\"COMMAND: $cmd\\n\";\n \tforeach (keys %$open_tests) {\n-\t\t$test_output->{$name}.=\"$_ was started but never finished!\\n\";\t\t\n+\t\t$msg_ops->{output_msg}($msg_state, \"$_ was started but never finished!\\n\");\n \t\t$statistics->{TESTS_ERROR}++;\n \t}\n \tmy $ret = close(RESULT);\n-\tif ($ret != $expected_ret and ($opt_immediate or $opt_one) and not $opt_verbose) {\n-\t\tprint \"$test_output->{$name}\\n\";\n-\t}\n+\t$msg_ops->{end_msg}($msg_state, $expected_ret, $ret);\n \tif ($ret != $expected_ret) {\n \t\tpush(@$suitesfailed, $name);\n \t\t$statistics->{SUITES_FAIL}++;\n@@ -647,7 +689,7 @@\n \t\tif ($from_build_farm) {\n \t\t\t$result = run_test_buildfarm($name, $cmd, $i, $suitestotal);\n \t\t} else {\n-\t\t\t$result = run_test_plain($name, $cmd, $i, $suitestotal);\n+\t\t\t$result = run_test($name, $cmd, $i, $suitestotal, $plain_msg_ops);\n \t\t}\n \n \t\tif ($opt_socket_wrapper_pcap and $result and \n\n"}