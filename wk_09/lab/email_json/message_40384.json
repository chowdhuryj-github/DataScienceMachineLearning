{"category": "ham", "to_address": "beginners@perl.org, perl-beginners@moderators.isc.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: Simplest hash initialization with no value", "body": "On Jun 1, 8:02 am, alok.n...@hp.com (Alok Nath) wrote:\n> -----Original Message-----\n> From: Paul Lalli [mailto:mri...@gmail.com]\n> Sent: Friday, June 01, 2007 4:39 PM\n> To: beginn...@perl.org; perl-beginn...@moderators.isc.org\n> Subject: Re: Simplest hash initialization with no value\n>\n> On Jun 1, 6:08 am, alok.n...@hp.com (Alok Nath) wrote:\n>\n> > Why it gives syntax error when -\n> >         my @myhash{qw/A B/} = ();\n>\n> Er... because it's not valid syntax.  That's why you'd get a syntax\n> error. Not sure what you're asking. You can't \"declare\" a hash slice.\n> You declare variables.\n>\n> > It works when I say -\n> >         my %myhash ;\n> >         @myhash{qw/A B/} = ();\n>\n> Right.  Because that is valid syntax.  First you declare %myhash, then\n> you initialize two keys of that hash using a slice.\n>\n> Your original question was \"how to initialize a hash\".  It's apparent\n> now that you wanted to know how to \"declare and initialize a hash in one\n> step\".  This question comes up so frequently that it really should be a\n> FAQ.  The way you did so was fine originally.  What's wrong with it?  If\n> you have a longer list of keys, you could use the map operator as a\n> shortcut, so you don't write 'undef' multiple times:\n>\n> my %myhash = map { $_ => undef } qw/A B C D E F G H I J K/;\n\n>  But when decalared this way it gives a warning message :\"Use of\n> uninitialized value in concatenation (.) or string at\"\n>\n> in a print statement which is something like this :\n>\n>                 my %myhash = map { $_ => undef } qw/A B C D E F G H I J\n> K/;\n>                 foreach my $key (%myhash){\n>                         print $myhash{$key}\n>                 }\n>\n\nOf course it does.  You said you wanted the values to be undefined.\nYou're printing an undefined value.\n\nThis has nothing to do with the way it was assigned.  It has to do\nwith what you assigned it to.  Every other method discussed in this\nthread will produce the same results when you try to print\n$myhash{$key}.\n\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}