{"category": "ham", "to_address": "Marco Pesenti Gritti <mpg@redhat.com>", "from_address": "Don Hopkins <dhopkins@DonHopkins.com>", "subject": "Re: [sugar] How to get pygtk to give you a GtkToolTips from a\n Toolbar to pass to ToolItem's set_tooltip?", "body": "I looked at how gtkaction.c was doing it, and tried to do the same thing \nin Python, which turned out to be impossible because the tooltips object \nof the toolbar was not exposed in pygtk.\n\nI presume the tooltips object I'm supposed to pass to set_tooltip is the \ntooltips of the toolbar that contains the toolitem, so I don't think \ncreating my own one would work (especially since there is no way to set \nthe toolbar's tooltips to the one I created, let alone get the toolbar's \ntooltips).\n\nI wonder why the toolitems need to be given a tooltips object in their \nset_tooltip method in the first place, since their parent is the very \ntoolbar I'm getting the tooltips from, so they should be able to get the \nsame object by getting their parent's public tooltips member, instead of \nrequiring the programmer to always pass it in.\nBetter yet, why can't there be one global tooltips object (or one per \nscreen or toplevel window), instead of each toolbar having its own \ntooltips?\n\nI am glad the tooltip api is being rewritten, since it could be simpler \nand more flexible.\nI hope it will support a callback signal to dynamically compute the \ntooltip at the time the user points at the item.\n\nAny idea how long until the tooltip rewrite lands, and how long until \nthat version of gtk is incorporated into the Sugar build tree?\nIn the mean time, should I submit a patch to pygtk, or give up the idea \nof using gtk's tooltips from Python for now?\n\nMore tooltip questions:\n\nDo gtk tooltips support Pango markup rendering?\nIs there an api for popping up and hiding tooltips under program control \nfrom Python? (So I can pop them up when the user presses a game \ncontroller button, and keep them up for a while).\nDoes Sugar have its own tooltips implemented in Python that I should use \ninstead of gtk?\n\nMy thoughts on gtk's Action and UIManager classes:\n\nI've tried to use gtk's Action and UIManager classes, but they are too \nbrittle and hard-coded to do what I need.\nIt hits the wall when you want to put a widget that's not a button or a \nmenu into a toolbar, like a page number input field or page count label, \nor any custom control.\nYou should be able to use the keyboard or game controller to navigate to \nnon-sensitive (disabled) items, and see a tooltip describing what the \nitem is, why it's disabled, and what to do to enable it.\nDisabling a control should not kick the focus out of that control and \ninto the next control, because that violates the principle of least \nastonishment, and makes type-ahead dangerous and unreliable.\nUnfortunately gtk does not support showing tooltips on disabled items, \nand does not support keyboard navigation to disabled items, and does not \nsupport showing tooltips in response to keyboard navigation.\nI tried using gtk Actions and UIManager to implement that stuff, but it \nturned out to be hard coded to do exactly what it currently does and \nnothing more, with no way to extend the xml user interface definition \nformat, or add new widgets or types of interfaces, without defining a \nbunch of extra intermediate Action classes, one for each custom widget.\nThe only way to get the UIManager to make a custom widget in a toolbar, \nis to make your own custom Action class just for that widget.\nAnd if you're using your own custom Actions to implement your own custom \nWidgets, you can't use the actiongroup.add_actions utilities (so I wrote \nmy own equivalents in Python).\nYou can't just make one general purpose parameterized Action class that \ncan create many types of different widgets according to how it's \nconfigured, because it's a *class variable* in the action class \n(accessed via action.set_tool_item_type, etc) that determines what \nwidgets are created by the action, and it's not up to the individual \nAction instance.\n\nAfter reading over the source code and giving them a try, I've decided \nnot to use gtk's Action/UIManager classes, and I'm writing my own stuff \non top of Toolbar and ToolItem and its subclasses in Python.\n\nMore questions about icons:\n\nI was able to get my own custom icons to display in toolbuttons when I \nwas using Actions and UIManager, by making my own gtk.IconFactory, \nmaking a bunch of IconSets, adding them to the IconFactory, calling \nadd_default() on the IconFactory to put them into the icon search path, \nand then making Actions and calling action.set_property('icon-name', \n'read-rotate-right') referring to the names of the icons I put into the \nfactory.\n(Is it possible to define your own IconFactory subclass that implements \nlazy loading on demand from your application's icon directory, instead \nof scanning the directory and loading all the icons in advance? The only \nexamples I could find force-feed the iconfactory with all known icons \nwhile the application is starting up, with is less than optimal.)\nBut when I created my own toolbuttons and called set_icon_name with the \nsame name I was assigning to the Action, I got the undefined red X icon \ninstead of my own icon.\nIs there something special about the way Actions are setting the icons \nof ToolButtons? Some other work they're doing to enable looking up icons \nin the default factories?\nI read over the code and can't figure out what I'm doing differently. So \nI ended up making my own Icon widget for each toolbutton, showing it, \nand calling toolbutton.set_icon_widget, manually.\n\n    -Don\n\n\nMarco Pesenti Gritti wrote:\n> Don Hopkins wrote:\n>> I'm trying to set the tooltip of a tool item, which I though would be \n>> easy, but the ToolItem.set_tooltip takes a first parameter that's a \n>> mysterious GtkTooltips object.\n>> But I can't figure out how to get a reference to the required \n>> ToolTips object to pass as a first argument to a ToolItem's \n>> set_tooltip(tooltips, tool_tip_string) ...\n>> The obvious looking method GtkToolbar.get_tooltips() actually returns \n>> a boolean that tells if the toolbar is using tooltips, but does not \n>> return the toolbar's \"GtkTooltips *tooltips\" member, which is \n>> declared public but apparently not exposed as a property to Python.\n>>   \n>\n> I don't quite remember how the tooltips API works but... doesn't just \n> creating an instance of gtk.Tooltips() work?\n>\n> The tooltips API is being rewritten on gtk trunk btw.\n>\n> Marco\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}