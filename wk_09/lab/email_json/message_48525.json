{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23504 - in branches: SAMBA_3_0/source/registry\n\tSAMBA_3_0_26/source/registry", "body": "Author: obnox\nDate: 2007-06-15 10:40:36 +0000 (Fri, 15 Jun 2007)\nNew Revision: 23504\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23504\n\nLog:\nUse tdb_wrap_open (instead of usual tdb_open) in reg_db.\nThis eliminates the need of maintaining reg_db's own \nreference counter for the tdb. Maybe as a next step...\n\nMichael\n\n\nModified:\n   branches/SAMBA_3_0/source/registry/reg_db.c\n   branches/SAMBA_3_0_26/source/registry/reg_db.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/registry/reg_db.c\n===================================================================\n--- branches/SAMBA_3_0/source/registry/reg_db.c\t2007-06-15 00:14:11 UTC (rev 23503)\n+++ branches/SAMBA_3_0/source/registry/reg_db.c\t2007-06-15 10:40:36 UTC (rev 23504)\n@@ -25,7 +25,7 @@\n #undef DBGC_CLASS\n #define DBGC_CLASS DBGC_RPC_SRV\n \n-static TDB_CONTEXT *tdb_reg;\n+static struct tdb_wrap *tdb_reg = NULL;\n static int tdb_refcount;\n \n #define VALUE_PREFIX\t\"SAMBA_REGVAL\"\n@@ -109,7 +109,7 @@\n \t * transaction behaviour.\n \t */\n \n-\tif ( tdb_transaction_start( tdb_reg ) == -1 ) {\n+\tif ( tdb_transaction_start( tdb_reg->tdb ) == -1 ) {\n \t\tDEBUG(0, (\"init_registry_data: tdb_transaction_start \"\n \t\t\t  \"failed\\n\"));\n \t\treturn False;\n@@ -208,7 +208,7 @@\n \t\tTALLOC_FREE( values );\n \t}\n \t\n-\tif (tdb_transaction_commit( tdb_reg ) == -1) {\n+\tif (tdb_transaction_commit( tdb_reg->tdb ) == -1) {\n \t\tDEBUG(0, (\"init_registry_data: Could not commit \"\n \t\t\t  \"transaction\\n\"));\n \t\treturn False;\n@@ -218,7 +218,7 @@\n \n  fail:\n \n-\tif (tdb_transaction_cancel( tdb_reg ) == -1) {\n+\tif (tdb_transaction_cancel( tdb_reg->tdb ) == -1) {\n \t\tsmb_panic(\"init_registry_data: tdb_transaction_cancel \"\n \t\t\t  \"failed\\n\");\n \t}\n@@ -238,9 +238,9 @@\n \tif ( tdb_reg )\n \t\treturn True;\n \n-\tif ( !(tdb_reg = tdb_open_log(lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR, 0600)) )\n+\tif ( !(tdb_reg = tdb_wrap_open(NULL, lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR, 0600)) )\n \t{\n-\t\ttdb_reg = tdb_open_log(lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR|O_CREAT, 0600);\n+\t\ttdb_reg = tdb_wrap_open(NULL, lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR|O_CREAT, 0600);\n \t\tif ( !tdb_reg ) {\n \t\t\tDEBUG(0,(\"regdb_init: Failed to open registry %s (%s)\\n\",\n \t\t\t\tlock_path(\"registry.tdb\"), strerror(errno) ));\n@@ -251,9 +251,8 @@\n \t}\n \n \ttdb_refcount = 1;\n-\t\t\n \n-\tvers_id = tdb_fetch_int32(tdb_reg, vstring);\n+\tvers_id = tdb_fetch_int32(tdb_reg->tdb, vstring);\n \n \tif ( vers_id != REGVER_V1 ) {\n \t\t/* any upgrade code here if needed */\n@@ -285,7 +284,7 @@\n \t\n \tbecome_root();\n \n-\ttdb_reg = tdb_open_log(lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR, 0600);\n+\ttdb_reg = tdb_wrap_open(NULL, lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR, 0600);\n \tif ( !tdb_reg ) {\n \t\tresult = ntstatus_to_werror( map_nt_error_from_unix( errno ) );\n \t\tDEBUG(0,(\"regdb_open: Failed to open %s! (%s)\\n\", \n@@ -305,8 +304,6 @@\n \n int regdb_close( void )\n {\n-\tint ret;\n-\n \ttdb_refcount--;\n \n \tDEBUG(10,(\"regdb_close: decrementing refcount (%d)\\n\", tdb_refcount));\n@@ -316,10 +313,8 @@\n \n \tSMB_ASSERT( tdb_refcount >= 0 );\n \n-\tret = tdb_close( tdb_reg );\n-\ttdb_reg = NULL;\n-\n-\treturn ret;\n+\tTALLOC_FREE(tdb_reg);\n+\treturn 0;\n }\n \n /***********************************************************************\n@@ -329,7 +324,7 @@\n  ***********************************************************************/\n int regdb_get_seqnum(void)\n {\n-\treturn tdb_get_seqnum(tdb_reg);\n+\treturn tdb_get_seqnum(tdb_reg->tdb);\n }\n \n /***********************************************************************\n@@ -387,7 +382,7 @@\n \t\n \tdbuf.dptr = buffer;\n \tdbuf.dsize = len;\n-\tif ( tdb_store_bystring( tdb_reg, keyname, dbuf, TDB_REPLACE ) == -1) {\n+\tif ( tdb_store_bystring( tdb_reg->tdb, keyname, dbuf, TDB_REPLACE ) == -1) {\n \t\tret = False;\n \t\tgoto done;\n \t}\n@@ -410,7 +405,7 @@\n \tREGSUBKEY_CTR *subkeys = NULL, *old_subkeys = NULL;\n \tchar *oldkeyname;\n \t\n-\tif ( tdb_transaction_start( tdb_reg ) == -1 ) {\n+\tif ( tdb_transaction_start( tdb_reg->tdb ) == -1 ) {\n \t\tDEBUG(0, (\"regdb_store_keys: tdb_transaction_start failed\\n\"));\n \t\treturn False;\n \t}\n@@ -449,7 +444,7 @@\n \n \t\tpstr_sprintf( path, \"%s/%s\", key, oldkeyname );\n \t\tnormalize_reg_path( path );\n-\t\tif (tdb_delete_bystring( tdb_reg, path ) == -1) {\n+\t\tif (tdb_delete_bystring( tdb_reg->tdb, path ) == -1) {\n \t\t\tDEBUG(1, (\"Deleting %s failed\\n\", path));\n \t\t\tgoto fail;\n \t\t}\n@@ -461,7 +456,7 @@\n \t\t/*\n \t\t * Ignore errors here, we might have no values around\n \t\t */\n-\t\ttdb_delete_bystring( tdb_reg, path );\n+\t\ttdb_delete_bystring( tdb_reg->tdb, path );\n \t}\n \n \tTALLOC_FREE( old_subkeys );\n@@ -490,7 +485,7 @@\n \t\tTALLOC_FREE( subkeys );\n \t}\n \n-\tif (tdb_transaction_commit( tdb_reg ) == -1) {\n+\tif (tdb_transaction_commit( tdb_reg->tdb ) == -1) {\n \t\tDEBUG(0, (\"regdb_store_keys: Could not commit transaction\\n\"));\n \t\treturn False;\n \t}\n@@ -501,7 +496,7 @@\n \tTALLOC_FREE( old_subkeys );\n \tTALLOC_FREE( subkeys );\n \n-\tif (tdb_transaction_cancel( tdb_reg ) == -1) {\n+\tif (tdb_transaction_cancel( tdb_reg->tdb ) == -1) {\n \t\tsmb_panic(\"regdb_store_keys: tdb_transaction_cancel failed\\n\");\n \t}\n \n@@ -532,7 +527,7 @@\n \tpstring_sub( path, \"\\\\\", \"/\" ); \n \tstrupper_m( path );\n \t\n-\tdbuf = tdb_fetch_bystring( tdb_reg, path );\n+\tdbuf = tdb_fetch_bystring( tdb_reg->tdb, path );\n \t\n \tbuf = dbuf.dptr;\n \tbuflen = dbuf.dsize;\n@@ -650,7 +645,7 @@\n \tpstr_sprintf( keystr, \"%s/%s\", VALUE_PREFIX, key );\n \tnormalize_reg_path( keystr );\n \t\n-\tdata = tdb_fetch_bystring( tdb_reg, keystr );\n+\tdata = tdb_fetch_bystring( tdb_reg->tdb, keystr );\n \t\n \tif ( !data.dptr ) {\n \t\t/* all keys have zero values by default */\n@@ -695,7 +690,7 @@\n \tpstr_sprintf( keystr, \"%s/%s\", VALUE_PREFIX, key );\n \tnormalize_reg_path( keystr );\n \t\n-\tret = tdb_trans_store_bystring(tdb_reg, keystr, data, TDB_REPLACE);\n+\tret = tdb_trans_store_bystring(tdb_reg->tdb, keystr, data, TDB_REPLACE);\n \t\n \tSAFE_FREE( data.dptr );\n \t\n@@ -723,7 +718,7 @@\n \t}\n \tnormalize_dbkey(tdbkey);\n \n-        data = tdb_fetch_bystring(tdb_reg, tdbkey);\n+        data = tdb_fetch_bystring(tdb_reg->tdb, tdbkey);\n \tSAFE_FREE(tdbkey);\n \n \tif (data.dptr == NULL) {\n@@ -774,7 +769,7 @@\n \t\tgoto done;\n \t}\n \n-\tif (tdb_trans_store_bystring(tdb_reg, tdbkey, tdbdata, 0) == -1) {\n+\tif (tdb_trans_store_bystring(tdb_reg->tdb, tdbkey, tdbdata, 0) == -1) {\n \t\terr = ntstatus_to_werror(map_nt_error_from_unix(errno));\n \t\tgoto done;\n \t}\n\nModified: branches/SAMBA_3_0_26/source/registry/reg_db.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/registry/reg_db.c\t2007-06-15 00:14:11 UTC (rev 23503)\n+++ branches/SAMBA_3_0_26/source/registry/reg_db.c\t2007-06-15 10:40:36 UTC (rev 23504)\n@@ -25,7 +25,7 @@\n #undef DBGC_CLASS\n #define DBGC_CLASS DBGC_RPC_SRV\n \n-static TDB_CONTEXT *tdb_reg;\n+static struct tdb_wrap *tdb_reg = NULL;\n static int tdb_refcount;\n \n #define VALUE_PREFIX\t\"SAMBA_REGVAL\"\n@@ -109,7 +109,7 @@\n \t * transaction behaviour.\n \t */\n \n-\tif ( tdb_transaction_start( tdb_reg ) == -1 ) {\n+\tif ( tdb_transaction_start( tdb_reg->tdb ) == -1 ) {\n \t\tDEBUG(0, (\"init_registry_data: tdb_transaction_start \"\n \t\t\t  \"failed\\n\"));\n \t\treturn False;\n@@ -208,7 +208,7 @@\n \t\tTALLOC_FREE( values );\n \t}\n \t\n-\tif (tdb_transaction_commit( tdb_reg ) == -1) {\n+\tif (tdb_transaction_commit( tdb_reg->tdb ) == -1) {\n \t\tDEBUG(0, (\"init_registry_data: Could not commit \"\n \t\t\t  \"transaction\\n\"));\n \t\treturn False;\n@@ -218,7 +218,7 @@\n \n  fail:\n \n-\tif (tdb_transaction_cancel( tdb_reg ) == -1) {\n+\tif (tdb_transaction_cancel( tdb_reg->tdb ) == -1) {\n \t\tsmb_panic(\"init_registry_data: tdb_transaction_cancel \"\n \t\t\t  \"failed\\n\");\n \t}\n@@ -238,9 +238,9 @@\n \tif ( tdb_reg )\n \t\treturn True;\n \n-\tif ( !(tdb_reg = tdb_open_log(lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR, 0600)) )\n+\tif ( !(tdb_reg = tdb_wrap_open(NULL, lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR, 0600)) )\n \t{\n-\t\ttdb_reg = tdb_open_log(lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR|O_CREAT, 0600);\n+\t\ttdb_reg = tdb_wrap_open(NULL, lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR|O_CREAT, 0600);\n \t\tif ( !tdb_reg ) {\n \t\t\tDEBUG(0,(\"regdb_init: Failed to open registry %s (%s)\\n\",\n \t\t\t\tlock_path(\"registry.tdb\"), strerror(errno) ));\n@@ -251,9 +251,8 @@\n \t}\n \n \ttdb_refcount = 1;\n-\t\t\n \n-\tvers_id = tdb_fetch_int32(tdb_reg, vstring);\n+\tvers_id = tdb_fetch_int32(tdb_reg->tdb, vstring);\n \n \tif ( vers_id != REGVER_V1 ) {\n \t\t/* any upgrade code here if needed */\n@@ -285,7 +284,7 @@\n \t\n \tbecome_root();\n \n-\ttdb_reg = tdb_open_log(lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR, 0600);\n+\ttdb_reg = tdb_wrap_open(NULL, lock_path(\"registry.tdb\"), 0, REG_TDB_FLAGS, O_RDWR, 0600);\n \tif ( !tdb_reg ) {\n \t\tresult = ntstatus_to_werror( map_nt_error_from_unix( errno ) );\n \t\tDEBUG(0,(\"regdb_open: Failed to open %s! (%s)\\n\", \n@@ -305,8 +304,6 @@\n \n int regdb_close( void )\n {\n-\tint ret;\n-\n \ttdb_refcount--;\n \n \tDEBUG(10,(\"regdb_close: decrementing refcount (%d)\\n\", tdb_refcount));\n@@ -316,10 +313,8 @@\n \n \tSMB_ASSERT( tdb_refcount >= 0 );\n \n-\tret = tdb_close( tdb_reg );\n-\ttdb_reg = NULL;\n-\n-\treturn ret;\n+\tTALLOC_FREE(tdb_reg);\n+\treturn 0;\n }\n \n /***********************************************************************\n@@ -329,7 +324,7 @@\n  ***********************************************************************/\n int regdb_get_seqnum(void)\n {\n-\treturn tdb_get_seqnum(tdb_reg);\n+\treturn tdb_get_seqnum(tdb_reg->tdb);\n }\n \n /***********************************************************************\n@@ -387,7 +382,7 @@\n \t\n \tdbuf.dptr = buffer;\n \tdbuf.dsize = len;\n-\tif ( tdb_store_bystring( tdb_reg, keyname, dbuf, TDB_REPLACE ) == -1) {\n+\tif ( tdb_store_bystring( tdb_reg->tdb, keyname, dbuf, TDB_REPLACE ) == -1) {\n \t\tret = False;\n \t\tgoto done;\n \t}\n@@ -410,7 +405,7 @@\n \tREGSUBKEY_CTR *subkeys = NULL, *old_subkeys = NULL;\n \tchar *oldkeyname;\n \t\n-\tif ( tdb_transaction_start( tdb_reg ) == -1 ) {\n+\tif ( tdb_transaction_start( tdb_reg->tdb ) == -1 ) {\n \t\tDEBUG(0, (\"regdb_store_keys: tdb_transaction_start failed\\n\"));\n \t\treturn False;\n \t}\n@@ -449,7 +444,7 @@\n \n \t\tpstr_sprintf( path, \"%s/%s\", key, oldkeyname );\n \t\tnormalize_reg_path( path );\n-\t\tif (tdb_delete_bystring( tdb_reg, path ) == -1) {\n+\t\tif (tdb_delete_bystring( tdb_reg->tdb, path ) == -1) {\n \t\t\tDEBUG(1, (\"Deleting %s failed\\n\", path));\n \t\t\tgoto fail;\n \t\t}\n@@ -461,7 +456,7 @@\n \t\t/*\n \t\t * Ignore errors here, we might have no values around\n \t\t */\n-\t\ttdb_delete_bystring( tdb_reg, path );\n+\t\ttdb_delete_bystring( tdb_reg->tdb, path );\n \t}\n \n \tTALLOC_FREE( old_subkeys );\n@@ -490,7 +485,7 @@\n \t\tTALLOC_FREE( subkeys );\n \t}\n \n-\tif (tdb_transaction_commit( tdb_reg ) == -1) {\n+\tif (tdb_transaction_commit( tdb_reg->tdb ) == -1) {\n \t\tDEBUG(0, (\"regdb_store_keys: Could not commit transaction\\n\"));\n \t\treturn False;\n \t}\n@@ -501,7 +496,7 @@\n \tTALLOC_FREE( old_subkeys );\n \tTALLOC_FREE( subkeys );\n \n-\tif (tdb_transaction_cancel( tdb_reg ) == -1) {\n+\tif (tdb_transaction_cancel( tdb_reg->tdb ) == -1) {\n \t\tsmb_panic(\"regdb_store_keys: tdb_transaction_cancel failed\\n\");\n \t}\n \n@@ -532,7 +527,7 @@\n \tpstring_sub( path, \"\\\\\", \"/\" ); \n \tstrupper_m( path );\n \t\n-\tdbuf = tdb_fetch_bystring( tdb_reg, path );\n+\tdbuf = tdb_fetch_bystring( tdb_reg->tdb, path );\n \t\n \tbuf = dbuf.dptr;\n \tbuflen = dbuf.dsize;\n@@ -650,7 +645,7 @@\n \tpstr_sprintf( keystr, \"%s/%s\", VALUE_PREFIX, key );\n \tnormalize_reg_path( keystr );\n \t\n-\tdata = tdb_fetch_bystring( tdb_reg, keystr );\n+\tdata = tdb_fetch_bystring( tdb_reg->tdb, keystr );\n \t\n \tif ( !data.dptr ) {\n \t\t/* all keys have zero values by default */\n@@ -695,7 +690,7 @@\n \tpstr_sprintf( keystr, \"%s/%s\", VALUE_PREFIX, key );\n \tnormalize_reg_path( keystr );\n \t\n-\tret = tdb_trans_store_bystring(tdb_reg, keystr, data, TDB_REPLACE);\n+\tret = tdb_trans_store_bystring(tdb_reg->tdb, keystr, data, TDB_REPLACE);\n \t\n \tSAFE_FREE( data.dptr );\n \t\n@@ -723,7 +718,7 @@\n \t}\n \tnormalize_dbkey(tdbkey);\n \n-        data = tdb_fetch_bystring(tdb_reg, tdbkey);\n+        data = tdb_fetch_bystring(tdb_reg->tdb, tdbkey);\n \tSAFE_FREE(tdbkey);\n \n \tif (data.dptr == NULL) {\n@@ -774,7 +769,7 @@\n \t\tgoto done;\n \t}\n \n-\tif (tdb_trans_store_bystring(tdb_reg, tdbkey, tdbdata, 0) == -1) {\n+\tif (tdb_trans_store_bystring(tdb_reg->tdb, tdbkey, tdbdata, 0) == -1) {\n \t\terr = ntstatus_to_werror(map_nt_error_from_unix(errno));\n \t\tgoto done;\n \t}\n\n"}