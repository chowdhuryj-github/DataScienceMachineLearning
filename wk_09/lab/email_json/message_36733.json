{"category": "ham", "to_address": "beginners@perl.org, perl-beginners@moderators.isc.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: accesing a hash of an array of hashes", "body": "On May 26, 8:17 am, pdcoo...@blueyonder.co.uk (Pauld) wrote:\n> ive read a load of data in  from a CSV file with Text::CSV and ended\n> up with a hash (%hash) where the keys are the column labels.\n> my  @headings=split(/,/,$rows[0])\n\nYou're use()'ing Text::CSV, but you're not actually using Text::CSV.\nWhy?\n\n> and then\n>\n> for (my $j=1;$j<$#rows;$j++)\n\nIs there a reason you're ignoring the last row completely?\n\n> {\n> my $status  = $csv->parse ($rows[$j]);   # parse a CSV string into\n> fields\n\nStoring the status is rather pointless if you don't bother actually\nchecking it. . .\n\n> my @columns = $csv->fields ();           # get the parsed fields\n>\n> for (my $i=0;$i<$#columns;$i++)\n\nNow you're ignoring the last column.  Do you understand that $#foo is\nthe *last index* of @foo, and so looping until less than $#foo stops\nbefore the last element?\n\n>   {$hash{$headings[$i]}=$columns[$i];}\n\nOf course, that entire loop would be better served to be a hash\nslice...\n\n>\n> I want to  process the data once its grouped by the date field present\n> in $hash. So i think I want a hash of dates  where the key is that\n> date field\n> I  push onto the value the hashes of the records that contain the date\n>\n> push @{$Hofdates{$hash{DATE}}},\\%hash;\n>\n> but im having a problem working out how to access the  individual\n> items in the  hashes that are elements of the array\n\nYou should read:\nperldoc perllol\nperldoc perldsc\n\nGo step by step:\n(1) %Hofdates is your overall hash.\n(2) $Hofdates{'2007-05-26'} is one element of the hash.  That element\nis a reference to an array.\n(3) @{$Hofdates{'2007-05-26'}} is the array that (2) references.\n(4) ${$Hofdates{'2007-05-26'}}[0] is the first element of (3).  That\nelement is a reference to a hash.\n(5) %{${$Hofdates{'2007-05-26'}}[0]} is the hash that (4) references.\n(6) ${${$Hofdates{'2007-05-26'}}[0]}{NAME} is the value of (5) at the\nkey 'NAME'\n(7) $Hofdates{'2007-05-26'}[0]{NAME} is the same as (6), but with all\nunnecessary punctuation removed.  (See perldocs listed above)\n\nOnce you get used to Perl's multi-level structures, you'll find you\ndon't need to go through this process, as the end result just \"makes\nsense\".\n\nPlease note, whenever possible, please try to post a short-but-\ncomplete script that demonstrates what you're trying to do.  That way\nwe can help you see what you might have done wrong.  For example:\n\n#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse Text::CSV;\nuse Data::Dumper;\n\nmy $csv = Text::CSV->new();\nmy %records_for;\n\nmy $heading = ;\n$csv->parse($heading)\n  or die \"Could not parse '$heading'.  Failed on \" . $csv-\n>error_input;\nmy @heading = $csv->fields();\nwhile (my $line = ) {\n  $csv->parse($line)\n    or die \"Could not parse line $..  Failed on \" . $csv->error_input;\n  my @columns = $csv->fields();\n  my %hash;\n  #use a hash slice rather than a for loop.\n  @hash{@heading} = @columns;\n  push @{$records_for{$hash{DATE}}}, \\%hash;\n}\n\n#Take a look at your structure.\nprint Dumper(\\%records_for);\n\n#Get the name of the 2nd record with date '2007-05-26';\nprint $records_for{'2007-05-26'}[1]{'NAME'}, \"\\n\";\n\n#or, get the names of all records:\nforeach my $date (keys %records_for) {\n  my $i = 0;\n  foreach my $record (@{$records_for{$date}}) {\n    print \"$date($i): $record->{NAME}\\n\";\n    $i++;\n  }\n}\n\n\n__DATA__\nNAME,DATE,COLOR,SIZE\nPaul,2007-05-26,blue,large\nJohn,2007-04-21,red,small\nMary,2007-05-26,orange,medium\nPeter,2006-01-30,blue,small\n\n\nHope this helps,\nPaul Lalli\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}