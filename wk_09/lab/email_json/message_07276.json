{"category": "ham", "to_address": "Dan Williams <dcbw@redhat.com>", "from_address": "Don Hopkins <dhopkins@DonHopkins.com>", "subject": "Re: [sugar] Cairo tile engine,\n and accessing 565 buffers from cairo and C", "body": "Thanks for all the great explanations! That's very helpful.\n\nI want to draw RGB tiles (alpha is not necessary) on the screen as fast \nas possible, double buffering them in 16 bit X images, so I can \nincrementally update the tiles, then blit them to a composition surface \nin the server, then draw sprites and cairo graphics over them, them blit \nthe resulting image to the screen, all in 16 bits 565 in the server (or \n24 bits 888 once that's supported).\n\nI am loading in the tile set from a png file, so it comes in as a 24 bit \nRGB surface.\nCurrently I am making a bunch of small tiles in individual surfaces, and \ndrawing those individually with Cairo.\nAn alternative would be to keep all tiles in one surface, and translate \nand clip the surface appropriately to draw each tile, which would save \nmemory (because of the memory fragmentation and overhead of having \nhundreds of small surfaces versus one big surface). But I am afraid the \noverhead of drawing the rectangle, clipping to it, and blitting the \nlarge image through it would be slower than simply drawing a bunch of \nsmall surfaces without any clipping. Is that a valid assumption, or is \nthere a fast path for drawing a surface clipped through a rectangle? I'm \nwriting the tile drawing code that calls cairo in C, so the Python \ninterpreter overhead is not an issue.\n\nCurrently the tile surfaces are 24 bit RGB surfaces, that I create by \ncalling create_similar on the 24 bit RGB tile set I read in from a png \nfile.\nBut I would rather make all those tile surfaces (or the one tile set \nsurface that I clip) in the X server, so they will blit faster.\n\nxHow do I create an cairo xlib surface from Python? Is there a supported \nway to call cairo_xlib_surface_create from Python?\nWhen I call the cairo.XlibSurface constructor, it throws an exception \nthat says the surface cannot be directly instantiated.\nThe only factory method I can find on cairo.XlibSurface is \ncreate_similar, but I have no idea how to get ahold of an original \ncairo.XlibSurface instance to call create_similar on.\nThe closest thing I can find is a C method on the gdk drawable object, \ncalled ref_cairo_surface, that does what I need, but I don't know how to \ncall that directly from Python, either.\nMaybe I could add a special purpose method to my Python module called \nRefCairoSurface that takes a PyGObject, pulls out the GObject, and calls \nGDK_DRAWABLE_GET_CLASS on that to get the drawable, then calls \nref_cairo_surface on that to get the cairo surface.\n\nIs there an easy way to get ahold of the cairo surface from a cairo \ncontext, or from a gdk drawable, from Python?\n\n    -Don\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}