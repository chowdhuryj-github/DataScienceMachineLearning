{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "metze@samba.org", "subject": "svn commit: samba r22331 - in\n\tbranches/SAMBA_4_0/source/script/tests: .", "body": "Author: metze\nDate: 2007-04-18 11:31:55 +0000 (Wed, 18 Apr 2007)\nNew Revision: 22331\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22331\n\nLog:\nremove run_test_buildfarm() function\nand pass buildfarm specific msg_ops to run_test()\ninstead\n\nmetze\nModified:\n   branches/SAMBA_4_0/source/script/tests/selftest.pl\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/script/tests/selftest.pl\n===================================================================\n--- branches/SAMBA_4_0/source/script/tests/selftest.pl\t2007-04-18 11:12:31 UTC (rev 22330)\n+++ branches/SAMBA_4_0/source/script/tests/selftest.pl\t2007-04-18 11:31:55 UTC (rev 22331)\n@@ -174,66 +174,43 @@\n \treturn 0;\n }\n \n-sub run_test_buildfarm($$$$)\n+my $test_output = {};\n+\n+sub buildfarm_start_msg($)\n {\n-\tmy ($name, $cmd, $i, $suitestotal) = @_;\n+\tmy ($state) = @_;\n+\n \tprint \"--==--==--==--==--==--==--==--==--==--==--\\n\";\n-\tprint \"Running test $name (level 0 stdout)\\n\";\n+\tprint \"Running test $state->{NAME} (level 0 stdout)\\n\";\n \tprint \"--==--==--==--==--==--==--==--==--==--==--\\n\";\n \tsystem(\"date\");\n+}\n \n-\tmy $expected_ret = 1;\n-\tmy $open_tests = {};\n-\topen(RESULT, \"$cmd 2>&1|\");\n-\twhile () { \n-\t\tprint;\n-\t\tif (/^test: (.+)\\n/) {\n-\t\t\t$open_tests->{$1} = 1;\n-\t\t} elsif (/^(success|failure|skip|error): (.*?)( \\[)?\\n/) {\n-\t\t\tmy $result = $1;\n-\t\t\tif ($1 eq \"success\") {\n-\t\t\t\tdelete $open_tests->{$2};\n-\t\t\t\tif (expecting_failure(\"$name/$2\")) {\n-\t\t\t\t\t$statistics->{TESTS_UNEXPECTED_OK}++;\n-\t\t\t\t} else {\n-\t\t\t\t\t$statistics->{TESTS_EXPECTED_OK}++;\n-\t\t\t\t}\n-\t\t\t} elsif ($1 eq \"failure\") {\n-\t\t\t\tdelete $open_tests->{$2};\n-\t\t\t\tif (expecting_failure(\"$name/$2\")) {\n-\t\t\t\t\t$statistics->{TESTS_EXPECTED_FAIL}++;\n-\t\t\t\t\t$expected_ret = 0;\n-\t\t\t\t} else {\n-\t\t\t\t\t$statistics->{TESTS_UNEXPECTED_FAIL}++;\n-\t\t\t\t}\n-\t\t\t} elsif ($1 eq \"skip\") {\n-\t\t\t\tdelete $open_tests->{$2};\n-\t\t\t} elsif ($1 eq \"error\") {\n-\t\t\t\t$statistics->{TESTS_ERROR}++;\n-\t\t\t\tdelete $open_tests->{$2};\n-\t\t\t}\n-\t\t}\n-\t}\n-\tprint \"COMMAND: $cmd\\n\";\n-\tforeach (keys %$open_tests) {\n-\t\tprint \"$_ was started but never finished!\\n\";\t\t\n-\t\t$statistics->{TESTS_ERROR}++;\n-\t}\n-\tmy $ret = close(RESULT);\n+sub buildfarm_output_msg($$)\n+{\n+\tmy ($state, $output) = @_;\n \n+\tprint $output;\n+}\n+\n+sub buildfarm_end_msg($$$)\n+{\n+\tmy ($state, $expected_ret, $ret) = @_;\n+\n \tprint \"==========================================\\n\";\n \tif ($ret == $expected_ret) {\n-\t\tprint \"TEST PASSED: $name\\n\";\n+\t\tprint \"TEST PASSED: $state->{NAME}\\n\";\n \t} else {\n-\t\tpush(@$suitesfailed, $name);\n-\t\tprint \"TEST FAILED: $name (status $ret)\\n\";\n+\t\tprint \"TEST FAILED: $state->{NAME} (status $ret)\\n\";\n \t}\n \tprint \"==========================================\\n\";\n-\n-\treturn ($ret == $expected_ret);\n }\n \n-my $test_output = {};\n+my $buildfarm_msg_ops = {\n+\tstart_msg\t=> \\&buildfarm_start_msg,\n+\toutput_msg\t=> \\&buildfarm_output_msg,\n+\tend_msg\t\t=> \\&buildfarm_end_msg\n+};\n \n sub plain_start_msg($)\n {\n@@ -687,7 +664,7 @@\n \t\tSocketWrapper::setup_pcap($pcap_file) if ($opt_socket_wrapper_pcap);\n \t\tmy $result;\n \t\tif ($from_build_farm) {\n-\t\t\t$result = run_test_buildfarm($name, $cmd, $i, $suitestotal);\n+\t\t\t$result = run_test($name, $cmd, $i, $suitestotal, $buildfarm_msg_ops);\n \t\t} else {\n \t\t\t$result = run_test($name, $cmd, $i, $suitestotal, $plain_msg_ops);\n \t\t}\n\n"}