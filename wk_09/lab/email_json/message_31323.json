{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "tridge@samba.org", "subject": "svn commit: samba r22962 - in\n\tbranches/SAMBA_4_0/source/torture/raw: .", "body": "Author: tridge\nDate: 2007-05-17 02:22:29 +0000 (Thu, 17 May 2007)\nNew Revision: 22962\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22962\n\nLog:\n\nshow progress separately for each client in RAW-BENCH-LOCK, this is\nmuch more useful for seeing why we get unbalanced locking\n\nModified:\n   branches/SAMBA_4_0/source/torture/raw/lockbench.c\n\n\nChangeset:\nModified: branches/SAMBA_4_0/source/torture/raw/lockbench.c\n===================================================================\n--- branches/SAMBA_4_0/source/torture/raw/lockbench.c\t2007-05-17 02:21:07 UTC (rev 22961)\n+++ branches/SAMBA_4_0/source/torture/raw/lockbench.c\t2007-05-17 02:22:29 UTC (rev 22962)\n@@ -54,6 +54,7 @@\n \tint fnum;\n \tint offset;\n \tint count;\n+\tint lastcount;\n \tunion smb_lock io;\n \tstruct smb_lock_entry lock[2];\n \tstruct smbcli_request *req;\n@@ -216,6 +217,22 @@\n \t}\n }\n \n+\n+static void report_rate(struct event_context *ev, struct timed_event *te, \n+\t\t\tstruct timeval t, void *private_data)\n+{\n+\tstruct benchlock_state *state = talloc_get_type(private_data, \n+\t\t\t\t\t\t\tstruct benchlock_state);\n+\tint i;\n+\tfor (i=0;i<nprocs;i++) {\n+\t\tprintf(\"%5u \", (unsigned)(state[i].count - state[i].lastcount));\n+\t\tstate[i].lastcount = state[i].count;\n+\t}\n+\tprintf(\"\\r\");\n+\tfflush(stdout);\n+\tevent_add_timed(ev, state, timeval_current_ofs(1, 0), report_rate, state);\n+}\n+\n /* \n    benchmark locking calls\n */\n@@ -228,10 +245,13 @@\n \tstruct timeval tv;\n \tstruct event_context *ev = event_context_find(mem_ctx);\n \tstruct benchlock_state *state;\n-\tint total = 0, loops=0, minops=0;\n+\tint total = 0, minops=0;\n \tNTSTATUS status;\n \tstruct smbcli_state *cli;\n-\t\n+\tbool progress;\n+\n+\tprogress = torture_setting_bool(torture, \"progress\", true);\n+\n \tnprocs = lp_parm_int(-1, \"torture\", \"nprocs\", 4);\n \n \tstate = talloc_zero_array(mem_ctx, struct benchlock_state, nprocs);\n@@ -293,6 +313,10 @@\n \n \ttv = timeval_current();\t\n \n+\tif (progress) {\n+\t\tevent_add_timed(ev, state, timeval_current_ofs(1, 0), report_rate, state);\n+\t}\n+\n \tprintf(\"Running for %d seconds\\n\", timelimit);\n \twhile (timeval_elapsed(&tv) < timelimit) {\n \t\tevent_loop_once(ev);\n@@ -301,19 +325,6 @@\n \t\t\tDEBUG(0,(\"locking failed\\n\"));\n \t\t\tgoto failed;\n \t\t}\n-\n-\t\tif (loops++ % 10 != 0) continue;\n-\n-\t\ttotal = 0;\n-\t\tfor (i=0;i<nprocs;i++) {\n-\t\t\ttotal += state[i].count;\n-\t\t}\n-\t\tif (torture_setting_bool(torture, \"progress\", true)) {\n-\t\t\tprintf(\"%.2f ops/second (remaining=%u)\\r\", \n-\t\t\t       total/timeval_elapsed(&tv), \n-\t\t\t       (unsigned)(timelimit - timeval_elapsed(&tv)));\n-\t\t\tfflush(stdout);\n-\t\t}\n \t}\n \n \tprintf(\"%.2f ops/second\\n\", total/timeval_elapsed(&tv));\n\n"}