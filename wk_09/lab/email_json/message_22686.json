{"category": "ham", "to_address": "Andy Spieherty <spiehera@lafayette.edu>", "from_address": "Allison Randal <allison@perl.org>", "subject": "Re: [perl #42412] Configure.pl things =no is true", "body": "Andy Spieherty wrote:\n> On Tue, 1 May 2007, James Keenan via RT wrote:\n> \n>> On Tue Apr 10 01:45:31 2007, jrisom@gmail.com wrote:\n>>> Configure should act as though writing --foo=no is false instead of \n>>> true.  Tonight I tried using --execcapable=no to get around a compile \n>>> failure, but then realized that it would probably treat \"no\" as a true \n>>> value.\n\nI'm okay with having a plain English representation for \"false value\", \nas long as we have exactly one. Pick 'no', 'none', 'false', or whatever \nbut we won't try to support every possible value a user might type in to \nmean false. Whatever we pick will mean false everywhere, on every \noption. And we have to be careful to make sure it's not a value that \nsomeone might want to use as a string value.\n\n> One thing that is really needed is a consistent vision for what the\n> different options expect.  Currently, there are at least four different\n> ways in the help menu to turn stuff off:\n> \n> \t--nomanicheck\n> \t--cgoto=0\n> \t--without-gdbm\n> \t--icu-config=none\n> \n> This means that for undocumented things, like -execcapable, the user has\n> to guess.\n\nAgreed, this is in serious need of a cleanup.\n\n>> In short, YAGNI.  What do others think?\n> \n> I'm afraid I don't have any idea what YAGNI means.\n\n\"You Ain't Gonna Need It\" (a.k.a. the philosophy of avoiding \nover-engineering).\n\n> Configure.pl will eventually end up setting many, many variables.  It is\n> impossible to predict ahead of time which ones users will want or need\n> to override.  Providing separate --foo options for every single one of\n> them doesn't scale well at all.  Configure.pl's help screen is already\n> 114 lines long.\n\nI'm inclined to keep the plain English --foo names. At first glance it \ndoes seem simpler to only offer one -D option, but all it does is push \nthe complexity down one level (a long list of options under -D, instead \nof a long list of options at the top level). And -D in itself isn't \nparticularly meaningful, while choosing some naming conventions like \n--set-foo, --unset-foo --enable-foo, --disable-foo, etc will go a long \nway toward making the configuration system saner to use.\n\nFor the implementation, it doesn't particularly matter if you parse \noptions first as -D and then dispatch on the remaining text, or just \ndispatch on the full text option. Agreed that the help screen shouldn't \ndisplay every possible option in a long list, but it can break the help \ndown into sensible groups whether it uses short options like -D, or long \noptions.\n\nAllison\n\n"}