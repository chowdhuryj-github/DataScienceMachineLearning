{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "allison@cvs.develooper.com", "subject": "[svn:parrot-pdd] r18418 - trunk/docs/pdds", "body": "Author: allison\nDate: Thu May  3 21:53:32 2007\nNew Revision: 18418\n\nModified:\n   trunk/docs/pdds/pdd15_objects.pod\n\nLog:\n[pdd]: Standardizing objects PDD on 'vtable function' rather than 'vtable method'.\n\n\nModified: trunk/docs/pdds/pdd15_objects.pod\n==============================================================================\n--- trunk/docs/pdds/pdd15_objects.pod\t(original)\n+++ trunk/docs/pdds/pdd15_objects.pod\tThu May  3 21:53:32 2007\n@@ -135,7 +135,7 @@\n \n There are four pieces to the object implementation. There are the PMCs for the\n classes, roles, and objects, the opcodes the engine uses to do objecty things, the\n-specific vtable methods used to perform those objecty things, and the\n+specific vtable functions used to perform those objecty things, and the\n supporting code provided by the interpreter engine to do the heavy lifting.\n \n Parrot, in general, doesn't restrict operations on objects and classes. If a\n@@ -331,7 +331,7 @@\n Note that for languages which support default fallback methods, such as Perl\n 5's AUTOLOAD, this would be the place to return it if a normal lookup fails.\n \n-Since the method list and vtable method list are stored in the class\n+Since the method list and vtable function list are stored in the class\n PMC, method finding is a lookup on the class object and not a lookup in\n the namespace. (This could be handled automatically whenever a class is\n associated with a namespace.) Just adding a sub to a namespace will not\n@@ -393,7 +393,7 @@\n \n =head3 Class Methods\n \n-These methods are just syntactic sugar for the vtable methods. They are\n+These methods are just syntactic sugar for the vtable functions. They are\n not included in the Class PMC by default, but added to Class as a role.\n \n =over 4\n@@ -453,7 +453,7 @@\n the method with the new method and throw a warning.\n \n It also takes slurpy named parameters to flag whether the method is a\n-vtable method, and whether its anonymous (no named entry as a method,\n+vtable function, and whether its anonymous (no named entry as a method,\n only as a vtable).\n \n =item methods\n@@ -563,7 +563,7 @@\n Object PMCs have the \"I am an object\" flag set on them.\n \n Object PMCs have no methods aside from those defined in their associated\n-class. They do have vtable methods providing access to certain low-level\n+class. They do have vtable functions providing access to certain low-level\n information about the object, method call functionality, etc. See the\n sections below on L and L.\n \n@@ -741,7 +741,7 @@\n \n =head3 Role Methods\n \n-These methods are just syntactic sugar for the vtable methods. They are\n+These methods are just syntactic sugar for the vtable functions. They are\n not included in the Role PMC by default, but added to Role as a role.\n \n =over 4\n@@ -806,7 +806,7 @@\n the method with the new method and throw a warning.\n \n It also takes slurpy named parameters to flag whether the method is a\n-vtable method, and whether its anonymous (no named entry as a method,\n+vtable function, and whether its anonymous (no named entry as a method,\n only as a vtable).\n \n =item methods\n@@ -1023,14 +1023,14 @@\n \n =head2 Vtable Overloading\n \n-Classes may override the vtable methods, allowing objects of a class to\n+Classes may override the vtable functions, allowing objects of a class to\n behave like a primitive PMC. To use these properly at a low-level\n requires a good working knowledge of the way Parrot works--generally for\n higher-level languages the language compiler or runtime will provide\n easier-to-use wrappers. These methods are all prototyped, and take a\n single fixed argument list, and return at most a single value.\n \n-To override a vtable method, either add the :vtable to the declaration\n+To override a vtable function, either add the :vtable to the declaration\n of the method, or pass a named, slurpy parameter \"vtable\" into the\n C method on a class or role.\n \n\n"}