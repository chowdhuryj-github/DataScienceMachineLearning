{"category": "ham", "to_address": "\"Duncan Murdoch\" <murdoch@stats.uwo.ca>", "from_address": "\"Henrik Bengtsson\" <hb@stat.berkeley.edu>", "subject": "Re: [R] erratic behavior of match()?", "body": "...and so say google [http://www.google.com/search?q=1%250.1]:\n\n\t\"1 modulo 0.1 = 0.1\",\n\nso end of discussion ;)\n\nIn bit of a food coma now, but the following is interesting:\n\n   r = a %% b\n<=>\n  r = (b*a/b) %% (b*b/b)\n<=>\n  r = b*((a/b) %% 1)\n\n> modulo <- function(a, b) { b * ((a/b) %% 1) }\n> intdiv <- function(a, b) { as.integer(a/b - modulo(a,b)) }\n\n> a <- 1\n> b <- 0.1\n> modulo(a, b)\n[1] 0\n> stopifnot(all.equal(a, (a %% b) + b * (a %/% b)))\n> stopifnot(all.equal(a, modulo(a, b) + b * intdiv(a,b)))\n\nThe question is, do we gain anything at all from this, i.e. is the set\nof \"odd\" results larger or smaller than using a %% b, or is just a\ndifferent equally sized set of numbers?  ...and of course it will be a\nmatter of how we want to define modulo - mathematically or \"IEEE\nnumerically\".  Though, there is no such as thing as a free lunch, so\nprobably nothing to see here...\n\n/Henrik\n\nOn 4/19/07, Duncan Murdoch  wrote:\n> On 4/19/2007 4:29 PM, Bernhard Klingenberg wrote:\n> > Thank you! Is floating point arithmetic also the reason why\n> >\n> > 1 %% 0.1\n> >\n> > gives the \"surprising\" answer 0.1 (because 0.1 cannot be written as a\n> > fraction with denominator a power of 2, e.g. 1%%0.5 correctly gives 0).\n> >\n> > This seems to go a bit against the statement in the help for '%%', which\n> > states \"For real arguments, '%%' can be subject to catastrophic loss of\n> > accuracy if 'x' is much larger than 'y', and a warning is given if this\n> > is detected.\"\n>\n> I don't see the contradiction.  The statement is talking about one way\n> to get imprecise results; you may have found another.\n>\n> However, I'm not sure if you can blame %% in your example:  the loss of\n> precision probably came from the translation of \"0.1\" to the internal\n> representation.  I think \"0.1\" ends up a little bit larger than 0.1\n> after string conversion and rounding, so 1 %/% 0.1 should give 9, and 1\n> %% 0.1 should give something very close to 0.1, as you saw.\n>\n> Duncan Murdoch\n>\n> ______________________________________________\n> R-help@stat.math.ethz.ch mailing list\n> https://stat.ethz.ch/mailman/listinfo/r-help\n> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html\n> and provide commented, minimal, self-contained, reproducible code.\n>\n\n______________________________________________\nR-help@stat.math.ethz.ch mailing list\nhttps://stat.ethz.ch/mailman/listinfo/r-help\nPLEASE do read the posting guide http://www.R-project.org/posting-guide.html\nand provide commented, minimal, self-contained, reproducible code.\n\n"}