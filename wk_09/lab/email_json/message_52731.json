{"category": "ham", "to_address": "Smylers <Smylers@stripey.com>", "from_address": "Mark Overmeer <mark@overmeer.net>", "subject": "Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn", "body": "\nI fully agree with David's response to this mail.  The only\nthing I would like to add:\n\n* Smylers (Smylers@stripey.com) [070621 18:02]:\n>   [*0]  Consider a function C.  I'd document it along\n>   the lines of:\n> \n>     valid_postcode\n> \n>       Returns whether the specified postcode is valid, for example:\n> \n>         if (valid_postcode $postcode) {\n> \n>   Javadoc-style systems seem to insist on documentation like:\n> \n>     valid_postcode\n>       Description: Returns whether the specified postcode is valid.\n>       Parameters:\n>         $postcode: (string) The postcode to test for validity\n>       Returns: (boolean) Whether $postcode is valid\n>       Exceptions: none\n>       Side Effects: none\n\nOf course, you can write horrible documentation in any syntax: that's\nup to the authors.  But now, just try to write above documentation in\nthe new POD6 syntax... in that case, it is not only horrible documentation,\nbut also 2 pages long.\n\nIn my idea, it suffices to write:\n\n  method isValidPostalCode(str $postalcode) returns bool {...}\n\nBy introspection during manual-page creation, it can collect\nsufficient information to create this documentation item (controlled\nby a (user-provided) template).  With the POD back-end, something like\n(blank lines removed)\n\n  =head1 METHODS\n  =over 4\n  =item $obj->isValidPostalCode(str $postalcode) returns bool\n  =back\n\nThen, when you want to add some docs to the method, to help the\ncorrect use, add it, for instance like:\n\n  method isValidPostalCode(str $postalcode) returns bool {...}\n     ` Check wether the postal code confirms to the standards\n     `$postalcode: a string with blanks trimmed.\n     `return: the string is not cleaned-up.\n\nor maybe (exact syntax open to discussion)\n\n  method isValidPostalCode(str $postalcode) returns bool {...}\n  #=  Check wether the postal code confirms to the standards\n  #=$postalcode\n  #=  a string with blanks trimmed.\n  #=return\n  #=  the string is not cleaned-up.\n\nor\n\n  method isValidPostalCode(str $postalcode) returns bool {...}\n  //  Check wether the postal code confirms to the standards\n  //\n  //  $postalcode    a string with blanks trimmed.\n  //  return         the string is not cleaned-up, if you need\n  //                 that, call M.\n\nor maybe at the bottom of your file, whatever you like\n\n __DOC__\n =doc isValidPostalCode\n Check wether the postal code confirms to the standards\n\n $postalcode    a string with blanks trimmed.\n return         the string is not cleaned-up, if you need\n                that, call M.\n\nThere is so much user-friendliness to gain.\n\nVery condensed documentation.  Of course, you will get simple ways to\nchange the default mark-up of the parameters, for instance for the case\nof MMD's, huge parameter lists, or where the parser cannot figure-out\ninfo automatically.\n-- \nRegards,\n\n               MarkOv\n\n------------------------------------------------------------------------\n       Mark Overmeer MSc                                MARKOV Solutions\n       Mark@Overmeer.net                          solutions@overmeer.net\nhttp://Mark.Overmeer.net                   http://solutions.overmeer.net\n\n"}