{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "ab@samba.org", "subject": "svn commit: samba r23302 - in branches/SAMBA_3_0/source/modules: .", "body": "Author: ab\nDate: 2007-06-02 06:28:38 +0000 (Sat, 02 Jun 2007)\nNew Revision: 23302\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23302\n\nLog:\nRefactor vfs_gpfs module, fix problems with chmod Tridge has found during ctdb tests\nModified:\n   branches/SAMBA_3_0/source/modules/nfs4_acls.c\n   branches/SAMBA_3_0/source/modules/vfs_gpfs.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/modules/nfs4_acls.c\n===================================================================\n--- branches/SAMBA_3_0/source/modules/nfs4_acls.c\t2007-06-02 00:32:49 UTC (rev 23301)\n+++ branches/SAMBA_3_0/source/modules/nfs4_acls.c\t2007-06-02 06:28:38 UTC (rev 23302)\n@@ -84,14 +84,13 @@\n SMB4ACL_T *smb_create_smb4acl(void)\n {\n \tTALLOC_CTX *mem_ctx = main_loop_talloc_get();\n-\tSMB_ACL4_INT_T\t*acl = (SMB_ACL4_INT_T *)TALLOC_SIZE(mem_ctx, sizeof(SMB_ACL4_INT_T));\n+\tSMB_ACL4_INT_T\t*acl = (SMB_ACL4_INT_T *)TALLOC_ZERO_SIZE(mem_ctx, sizeof(SMB_ACL4_INT_T));\n \tif (acl==NULL)\n \t{\n \t\tDEBUG(0, (\"TALLOC_SIZE failed\\n\"));\n \t\terrno = ENOMEM;\n \t\treturn NULL;\n \t}\n-\tmemset(acl, 0, sizeof(SMB_ACL4_INT_T));\n \tacl->magic = SMB_ACL4_INT_MAGIC;\n \t/* acl->first, last = NULL not needed */\n \treturn (SMB4ACL_T *)acl;\n@@ -103,14 +102,13 @@\n \tTALLOC_CTX *mem_ctx = main_loop_talloc_get();\n \tSMB_ACE4_INT_T *ace;\n \n-\tace = (SMB_ACE4_INT_T *)TALLOC_SIZE(mem_ctx, sizeof(SMB_ACE4_INT_T));\n+\tace = (SMB_ACE4_INT_T *)TALLOC_ZERO_SIZE(mem_ctx, sizeof(SMB_ACE4_INT_T));\n \tif (ace==NULL)\n \t{\n \t\tDEBUG(0, (\"TALLOC_SIZE failed\\n\"));\n \t\terrno = ENOMEM;\n \t\treturn NULL;\n \t}\n-\tmemset(ace, 0, sizeof(SMB_ACE4_INT_T));\n \tace->magic = SMB_ACE4_INT_MAGIC;\n \t/* ace->next = NULL not needed */\n \tmemcpy(&ace->prop, prop, sizeof(SMB_ACE4PROP_T));\n@@ -187,7 +185,7 @@\n \treturn 0;\n }\n \n-static BOOL smbacl4_nfs42win(SMB4ACL_T *acl, /* in */\n+static BOOL smbacl4_nfs42win(TALLOC_CTX *mem_ctx, SMB4ACL_T *acl, /* in */\n \tDOM_SID *psid_owner, /* in */\n \tDOM_SID *psid_group, /* in */\n \tSEC_ACE **ppnt_ace_list, /* out */\n@@ -198,25 +196,18 @@\n \tSMB_ACE4_INT_T *aceint;\n \tSEC_ACE *nt_ace_list = NULL;\n \tint good_aces = 0;\n-\tTALLOC_CTX *mem_ctx = main_loop_talloc_get();\n \n \tDEBUG(10, (\"smbacl_nfs42win entered\"));\n \n \taclint = get_validated_aclint(acl);\n-\tif (aclint==NULL)\n+\t/* We do not check for naces being 0 or acl being NULL here because it is done upstream */\n+\t/* in smb_get_nt_acl_nfs4(). */\n+\tnt_ace_list = (SEC_ACE *)TALLOC_ZERO_SIZE(mem_ctx, aclint->naces * sizeof(SEC_ACE));\n+\tif (nt_ace_list==NULL)\n+\t{\n+\t\tDEBUG(10, (\"talloc error\"));\n+\t\terrno = ENOMEM;\n \t\treturn False;\n-\n-\tif (aclint->naces) {\n-\t\tnt_ace_list = (SEC_ACE *)TALLOC_SIZE(mem_ctx, aclint->naces * sizeof(SEC_ACE));\n-\t\tif (nt_ace_list==NULL)\n-\t\t{\n-\t\t\tDEBUG(10, (\"talloc error\"));\n-\t\t\terrno = ENOMEM;\n-\t\t\treturn False;\n-\t\t}\n-\t\tmemset(nt_ace_list, 0, aclint->naces * sizeof(SEC_ACE));\n-\t} else {\n-\t\tnt_ace_list = NULL;\n \t}\n \n \tfor (aceint=aclint->first; aceint!=NULL; aceint=(SMB_ACE4_INT_T *)aceint->next) {\n@@ -290,31 +281,22 @@\n \tuid_to_sid(&sid_owner, sbuf.st_uid);\n \tgid_to_sid(&sid_group, sbuf.st_gid);\n \n-\tif (smbacl4_nfs42win(acl,\n-\t\t&sid_owner,\n-\t\t&sid_group,\n-\t\t&nt_ace_list,\n-\t\t&good_aces\n-\t\t)==False) {\n+\tif (smbacl4_nfs42win(mem_ctx, acl, &sid_owner, &sid_group, &nt_ace_list, &good_aces)==False) {\n \t\tDEBUG(8,(\"smbacl4_nfs42win failed\\n\"));\n \t\treturn 0;\n \t}\n \n-\tpsa = make_sec_acl(mem_ctx, NT4_ACL_REVISION,\n-\t\tgood_aces, nt_ace_list);\n+\tpsa = make_sec_acl(mem_ctx, NT4_ACL_REVISION, good_aces, nt_ace_list);\n \tif (psa == NULL) {\n \t\tDEBUG(2,(\"make_sec_acl failed\\n\"));\n \t\treturn 0;\n \t}\n \n \tDEBUG(10,(\"after make sec_acl\\n\"));\n-\t*ppdesc = make_sec_desc(mem_ctx, SEC_DESC_REVISION,\n-\t\tSEC_DESC_SELF_RELATIVE,\n-\t\t(security_info & OWNER_SECURITY_INFORMATION)\n-\t\t? &sid_owner : NULL,\n-\t\t(security_info & GROUP_SECURITY_INFORMATION)\n-\t\t? &sid_group : NULL,\n-\t\tNULL, psa, &sd_size);\n+\t*ppdesc = make_sec_desc(mem_ctx, SEC_DESC_REVISION, SEC_DESC_SELF_RELATIVE,\n+\t                        (security_info & OWNER_SECURITY_INFORMATION) ? &sid_owner : NULL,\n+\t                        (security_info & GROUP_SECURITY_INFORMATION) ? &sid_group : NULL,\n+\t                        NULL, psa, &sd_size);\n \tif (*ppdesc==NULL) {\n \t\tDEBUG(2,(\"make_sec_desc failed\\n\"));\n \t\treturn 0;\n@@ -448,7 +430,7 @@\n \t\tsid_string_static(&ace_nt->trustee)));\n \n \tmemset(ace_v4, 0, sizeof(SMB_ACE4PROP_T));\n-\tace_v4->aceType = ace_nt->type; /* only ACCES|DENY supported right now */\n+\tace_v4->aceType = ace_nt->type; /* only ACCESS|DENY supported right now */\n \tace_v4->aceFlags = ace_nt->flags & SEC_ACE_FLAG_VALID_INHERIT;\n \tace_v4->aceMask = ace_nt->access_mask &\n \t\t(STD_RIGHT_ALL_ACCESS | SA_RIGHT_FILE_ALL_ACCESS);\n\nModified: branches/SAMBA_3_0/source/modules/vfs_gpfs.c\n===================================================================\n--- branches/SAMBA_3_0/source/modules/vfs_gpfs.c\t2007-06-02 00:32:49 UTC (rev 23301)\n+++ branches/SAMBA_3_0/source/modules/vfs_gpfs.c\t2007-06-02 06:28:38 UTC (rev 23302)\n@@ -141,28 +141,30 @@\n \treturn acl;\n }\n \n-static BOOL gpfs_get_nfs4_acl(struct files_struct *fsp, SMB4ACL_T **ppacl, BOOL *pretryPosix)\n+/* Tries to get nfs4 acls and returns SMB ACL allocated.\n+ * On failure returns 1 if it got non-NFSv4 ACL to prompt \n+ * retry with POSIX ACL checks.\n+ * On failure returns -1 if there is system (GPFS) error, check errno.\n+ * Returns 0 on success\n+ */\n+static int gpfs_get_nfs4_acl(const char *fname, SMB4ACL_T **ppacl)\n {\n-\tTALLOC_CTX *mem_ctx;\n \tint i;\n \tstruct gpfs_acl *gacl = NULL;\n+\tDEBUG(10, (\"gpfs_get_nfs4_acl invoked for %s\\n\", fname));\n \n-\tmem_ctx = main_loop_talloc_get();\n-\n-\tDEBUG(10, (\"gpfs_get_nfs4_acl invoked for %s\\n\", fsp->fsp_name));\n-\n \t/* First get the real acl length */\n-\tgacl = gpfs_getacl_alloc(fsp->fsp_name, GPFS_ACL_TYPE_NFS4);\n+\tgacl = gpfs_getacl_alloc(fname, GPFS_ACL_TYPE_NFS4);\n \tif (gacl == NULL) {\n \t\tDEBUG(9, (\"gpfs_getacl failed for %s with %s\\n\",\n-\t\t\t   fsp->fsp_name, strerror(errno)));\n-\t\treturn False;\n+\t\t\t   fname, strerror(errno)));\n+\t\treturn -1;\n \t}\n \n \tif (gacl->acl_type != GPFS_ACL_TYPE_NFS4) {\n \t\tDEBUG(10, (\"Got non-nfsv4 acl\\n\"));\n-\t\t*pretryPosix = True;\n-\t\treturn False;\n+\t\t/* Retry with POSIX ACLs check */\n+\t\treturn 1;\n \t}\n \n \t*ppacl = smb_create_smb4acl();\n@@ -174,12 +176,11 @@\n \tfor (i=0; iacl_nace; i++) {\n \t\tstruct gpfs_ace_v4 *gace = &gacl->ace_v4[i];\n \t\tSMB_ACE4PROP_T smbace;\n-\t\tmemset(&smbace, 0, sizeof(SMB4ACE_T));\n-\n \t\tDEBUG(10, (\"type: %d, iflags: %x, flags: %x, mask: %x, \"\n \t\t\t   \"who: %d\\n\", gace->aceType, gace->aceIFlags,\n \t\t\t   gace->aceFlags, gace->aceMask, gace->aceWho));\n \n+\t\tmemset(&smbace, 0, sizeof(SMB4ACE_T));\n \t\tif (gace->aceIFlags & ACE4_IFLAG_SPECIAL_ID) {\n \t\t\tsmbace.flags |= SMB_ACE4_ID_SPECIAL;\n \t\t\tswitch (gace->aceWho) {\n@@ -204,35 +205,47 @@\n \t\t\t\tsmbace.who.uid = gace->aceWho;\n \t\t}\n \n+\t\t/* remove redundent deny entries */\n+\t\tif (i > 0 && gace->aceType == SMB_ACE4_ACCESS_DENIED_ACE_TYPE) {\n+\t\t\tstruct gpfs_ace_v4 *prev = &gacl->ace_v4[i-1];\n+\t\t\tif (prev->aceType == SMB_ACE4_ACCESS_ALLOWED_ACE_TYPE &&\n+\t\t\t\t\tprev->aceFlags == gace->aceFlags &&\n+\t\t\t\t\tprev->aceIFlags == gace->aceIFlags &&\n+\t\t\t\t\t(gace->aceMask & prev->aceMask) == 0 &&\n+\t\t\t\t\tgace->aceWho == prev->aceWho) {\n+\t\t\t\t/* its redundent - skip it */\n+\t\t\t\tcontinue;\n+\t\t\t}                                                \n+\t\t}\n+\n \t\tsmbace.aceType = gace->aceType;\n \t\tsmbace.aceFlags = gace->aceFlags;\n \t\tsmbace.aceMask = gace->aceMask;\n-\t\tsmbace.flags = (gace->aceIFlags&ACE4_IFLAG_SPECIAL_ID) ? SMB_ACE4_ID_SPECIAL : 0;\n-\n \t\tsmb_add_ace4(*ppacl, &smbace);\n \t}\n \n-\treturn True;\n+\treturn 0;\n }\n \n static size_t gpfsacl_get_nt_acl_common(files_struct *fsp,\n \tuint32 security_info, SEC_DESC **ppdesc)\n {\n \tSMB4ACL_T *pacl = NULL;\n-\tBOOL\tresult;\n-\tBOOL\tretryPosix = False;\n+\tint\tresult;\n \n \t*ppdesc = NULL;\n-\tresult = gpfs_get_nfs4_acl(fsp, &pacl, &retryPosix);\n-\tif (retryPosix)\n-\t{\n+\tresult = gpfs_get_nfs4_acl(fsp->fsp_name, &pacl);\n+\n+\tif (result == 0)\n+\t\treturn smb_get_nt_acl_nfs4(fsp, security_info, ppdesc, pacl);\n+\n+\tif (result > 0) {\n \t\tDEBUG(10, (\"retrying with posix acl...\\n\"));\n \t\treturn get_nt_acl(fsp, security_info, ppdesc);\n \t}\n-\tif (result==False)\n-\t\treturn 0;\n-\n-\treturn smb_get_nt_acl_nfs4(fsp, security_info, ppdesc, pacl);\n+\t\n+\t/* GPFS ACL was not read, something wrong happened, error code is set in errno */\n+\treturn 0;\n }\n \n size_t gpfsacl_fget_nt_acl(vfs_handle_struct *handle,\n@@ -608,58 +621,78 @@\n \treturn -1;\n }\n \n+static int vfs_gpfs_chmod(vfs_handle_struct *handle, const char *path, mode_t mode)\n+{\n+\t\t SMB_STRUCT_STAT st;\n+\t\t if (SMB_VFS_NEXT_STAT(handle, path, &st) != 0) {\n+\t\t \t\t return -1;\n+\t\t }\n+\t\t /* avoid chmod() if possible, to preserve acls */\n+\t\t if ((st.st_mode & ~S_IFMT) == mode) {\n+\t\t \t\t return 0;\n+\t\t }\n+\t\t return SMB_VFS_NEXT_CHMOD(handle, path, mode);\n+}\n+\n+static int vfs_gpfs_fchmod(vfs_handle_struct *handle, files_struct *fsp, int fd, mode_t mode)\n+{\n+\t\t SMB_STRUCT_STAT st;\n+\t\t if (SMB_VFS_NEXT_FSTAT(handle, fsp, fd, &st) != 0) {\n+\t\t \t\t return -1;\n+\t\t }\n+\t\t /* avoid chmod() if possible, to preserve acls */\n+\t\t if ((st.st_mode & ~S_IFMT) == mode) {\n+\t\t \t\t return 0;\n+\t\t }\n+\t\t return SMB_VFS_NEXT_FCHMOD(handle, fsp, fd, mode);\n+}\n+\n /* VFS operations structure */\n \n static vfs_op_tuple gpfs_op_tuples[] = {\n \n-\t{SMB_VFS_OP(vfs_gpfs_kernel_flock),\n-\t SMB_VFS_OP_KERNEL_FLOCK,\n-\t SMB_VFS_LAYER_OPAQUE},\n+\t\t{ SMB_VFS_OP(vfs_gpfs_kernel_flock), SMB_VFS_OP_KERNEL_FLOCK,\n+\t\t\t\tSMB_VFS_LAYER_OPAQUE },\n \n-\t{SMB_VFS_OP(vfs_gpfs_setlease),\n-\t SMB_VFS_OP_LINUX_SETLEASE,\n-\t SMB_VFS_LAYER_OPAQUE},\n+        { SMB_VFS_OP(vfs_gpfs_setlease), SMB_VFS_OP_LINUX_SETLEASE,\n+        \t\tSMB_VFS_LAYER_OPAQUE },\n \n-\t{SMB_VFS_OP(gpfsacl_fget_nt_acl),\n-        SMB_VFS_OP_FGET_NT_ACL,\n-        SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_fget_nt_acl), SMB_VFS_OP_FGET_NT_ACL,\n+        \t\tSMB_VFS_LAYER_TRANSPARENT },\n \n-        {SMB_VFS_OP(gpfsacl_get_nt_acl),\n-        SMB_VFS_OP_GET_NT_ACL,\n-        SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_get_nt_acl), SMB_VFS_OP_GET_NT_ACL,\n+        \t\tSMB_VFS_LAYER_TRANSPARENT },\n \n-        {SMB_VFS_OP(gpfsacl_fset_nt_acl),\n-        SMB_VFS_OP_FSET_NT_ACL,\n-        SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_fset_nt_acl), SMB_VFS_OP_FSET_NT_ACL,\n+        \t\tSMB_VFS_LAYER_TRANSPARENT },\n \n-        {SMB_VFS_OP(gpfsacl_set_nt_acl),\n-        SMB_VFS_OP_SET_NT_ACL,\n-        SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_set_nt_acl), SMB_VFS_OP_SET_NT_ACL,\n+        \t\tSMB_VFS_LAYER_TRANSPARENT },\n \n-        {SMB_VFS_OP(gpfsacl_sys_acl_get_file),\n-         SMB_VFS_OP_SYS_ACL_GET_FILE,\n-         SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_sys_acl_get_file), SMB_VFS_OP_SYS_ACL_GET_FILE,\n+        \t\tSMB_VFS_LAYER_TRANSPARENT },\n \n-        {SMB_VFS_OP(gpfsacl_sys_acl_get_fd),\n-         SMB_VFS_OP_SYS_ACL_GET_FD,\n-         SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_sys_acl_get_fd), SMB_VFS_OP_SYS_ACL_GET_FD,\n+        \t\tSMB_VFS_LAYER_TRANSPARENT },\n \n-        {SMB_VFS_OP(gpfsacl_sys_acl_set_file),\n-         SMB_VFS_OP_SYS_ACL_SET_FILE,\n-         SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_sys_acl_set_file), SMB_VFS_OP_SYS_ACL_SET_FILE,\n+        \t\tSMB_VFS_LAYER_TRANSPARENT },\n \n-        {SMB_VFS_OP(gpfsacl_sys_acl_set_fd),\n-         SMB_VFS_OP_SYS_ACL_SET_FD,\n-         SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_sys_acl_set_fd), SMB_VFS_OP_SYS_ACL_SET_FD,\n+        \t\tSMB_VFS_LAYER_TRANSPARENT },\n \n-        {SMB_VFS_OP(gpfsacl_sys_acl_delete_def_file),\n-         SMB_VFS_OP_SYS_ACL_DELETE_DEF_FILE,\n-         SMB_VFS_LAYER_TRANSPARENT},\n+        { SMB_VFS_OP(gpfsacl_sys_acl_delete_def_file),\n+                SMB_VFS_OP_SYS_ACL_DELETE_DEF_FILE,\n+                SMB_VFS_LAYER_TRANSPARENT },\n \n-\t{SMB_VFS_OP(NULL),\n-\t SMB_VFS_OP_NOOP,\n-\t SMB_VFS_LAYER_NOOP}\n+        { SMB_VFS_OP(vfs_gpfs_chmod), SMB_VFS_OP_CHMOD,\n+                SMB_VFS_LAYER_TRANSPARENT },\n \n+        { SMB_VFS_OP(vfs_gpfs_fchmod), SMB_VFS_OP_FCHMOD,\n+                SMB_VFS_LAYER_TRANSPARENT },\n+\n+        { SMB_VFS_OP(NULL), SMB_VFS_OP_NOOP, SMB_VFS_LAYER_NOOP }\n+\n };\n \n \n\n"}