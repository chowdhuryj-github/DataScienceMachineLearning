{"category": "ham", "to_address": "beginners@perl.org", "from_address": "\"nobull67@gmail.com\" <nobull67@gmail.com>", "subject": "Re: Conditional in regex", "body": "On Jun 24, 3:31 am, p...@loserville.org (Jeff) wrote:\n> Hi all. I'm new to perl, a new programmer, and I badly need guidance. I'm\n> trying to parse a config file with key/value pairs seperated by white space\n> and surrounded by curly brackets. It has multiple fields that look like\n> this:\n>\n> {\n> Key  value\n> Key   value\n>\n> }\n>\n> My solution has been to parse it with something simple --\n>\n> while ($file_contents =~ /(\\w+)\\s*\\{([^}]*)\\}/gs) {\n>        push @new, $2;\n>\n> }\n>\n> foreach (@new){\n>                   $_  =~ /\\b(\\w+)\\s+(.*)\\s+\n>                           \\b(\\w+)\\s+(.*)/xgs;\n>\n> My @next_tmp_variable = ($1, $2, etc);\n>\n> }\n>\n> -- but the config definitions contained in those curly brackets are\n> different lengths. Some only have a four left hand values, while others have\n> six or more. My solution isn't giving me what I really need.\n\nIt's actually very close.\n\nThe =~ is redundant since $_ is the default.\n\nThere's no need for the intermediate variables.\n\nAre newlines significant? Or can just treat it as a list of\nalternating keys and values delimited by whitespace?\n\n> So I have two questions. First, I don't understand how to test this so that\n> I parse all the values between the curly braces, regardless of how many\n> items are there.\n\nYou don't need to repeat the pattern by hand - the /g will do that for\nyou.\n\n> Second, and equally important, what kind of data structure\n> should I put the results in? I think I need a hash of hashes\n\nProbably a list of hashes would be the most natural.\n\nmy @LoH = map { { split } } $file_contents =~ /\\{(.*?)\\}/gs;\n\n>. What I'd like\n> to do is assign each left hand value as the key in a hash. Then, in each set\n> there's a left 'command' where the right hand value will always be unique,\n> which would be perfect for use as the name of an alias for the hash or as\n> the key to a reference to a hash of that definition.\n\nmy %HoH;\nwhile ( $file_contents =~ /\\{(.*?)\\}/gs ) {\n        my %entry = split;\n        $HoH{delete $entry{command}} = \\%entry;\n}\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}