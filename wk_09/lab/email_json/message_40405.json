{"category": "ham", "to_address": "beginners@perl.org, perl-beginners@moderators.isc.org", "from_address": "Paul Lalli <mritty@gmail.com>", "subject": "Re: Error:Can't locate object method \"prepare\" via package \"abc\" at xyz.pm", "body": "On May 31, 7:18 pm, datawea...@gmail.com (Jonathan Lang) wrote:\n> > abc.pm\n> > --------------------------------------\n> > my $databasehandle;\n>\n> Note that this establishes a single $databasehandle for every object\n> of type 'abc' that you create; it does not create a separate one for\n> each object.\n>\n> > sub new($){\n>\n> >     my ($self,$usr,$pwd) = @_;\n>\n> Again, you have a signature problem.  'sub new($)' says that 'new'\n> will take a single scalar as a parameter; as such, @_ will only ever\n> have one value in it: $usr and $pwd will always be set to null.\n\nFalse.  Prototypes are *always* ignored on method calls, and can be\nignored on any other subroutine call by providing the & before the\nsubroutine name.  Therefore, there is no way of knowing from the above\nwhat will be in $usr or $pwd.\n\n> Also, read up on the syntax of 'bless' a bit more.  IIRC, saying\n> 'bless $self;' is not enough.\n\nYou should *really* follow your own advice.  While not preferred, a\nsingle arg bless() is perfectly legitamite.\n$ perldoc -f bless\n     bless REF,CLASSNAME\n     bless REF\n             This function tells the thingy referenced by REF\n             that it is now an object in the CLASSNAME package.\n             If CLASSNAME is omitted, the current package is\n             used.\n\n> >     $usr||= \"test\";\n> >     $pwd ||= \"test123\";\n>\n> ...and thus $usr and $pwd will always equal \"test\" and \"test123\",\n> respectively.\n\nNo, they will be set to \"test\" and \"test123\", respectively, if and\nonly if they had a false value prior to this step.  As discussed,\nthere is no way of knowing that from the above code.\n\nPaul Lalli\n\n\n\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}