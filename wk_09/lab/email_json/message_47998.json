{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "Thomas Wittek <mail@gedankenkonstrukt.de>", "subject": "Re: POD <-> Code entanglement", "body": "Moritz Lenz:\n> =begin pod\n> \n> =head3 C\n> [..]\n> =end pod\n> \n> method from_string(Str $s){\n> \t# implementation of that method here\n> }\n> \n> Since method signatures are very expressive in Perl 6, there should be a\n> way of accessing them in the POD without copy & paste.\n\nAs I read \"=head 3 method...\" I also had the idea that semantically more\nmeaningful directives might be a good idea.\n\nI mean POD uses constructs like headlines, lists, blocks, italic etc.\nwhich all describe _how it looks like_ and not _what it is_.\nA head3 might be the headline of a method documentation as well as one\nintroducing the contact information for the author of a module.\nThe directive doesn't have much semantics.\nOther people might use head2 for documenting methods, what leads to a\npretty inconsistent look of the documentation.\n\nSo maybe directives like method, sub, attribute, class etc. might be a\nbetter choice regarding semantics.\nOf course those semantics are directly given in the code, so why not use\nthem as MarkOv proposed?\n\nIt's a bit like HTML<->XML, where the former lacks most of the semantics\nand makes the information processing - not to speak about a consistent\nlook over several documents - a lot harder.\n\nI could imagine a semantic documentation in Perl6, that could be\ntranslated to XML/HTML+CSS or to POD(6) for formatting it.\n\nA semantic documentation could also be very useful in IDEs, where the\nIDE could clearly (without guessing) determine the documentation for a\ncertain element.\nAlso you could automatically test if every method/class/.. has been\ndocumented etc.\n\nSemantics are very useful in documentation, why throw them away?\n-- \nThomas Wittek\nhttp://gedankenkonstrukt.de/\nJabber: streawkceur@jabber.i-pobox.net\n\n"}