{"category": "ham", "to_address": "Simon McVittie <simon.mcvittie@collabora.co.uk>", "from_address": "Dan Williams <dcbw@redhat.com>", "subject": "Re: [sugar] [PATCH] sugar.presence.presenceservice,\n\tservices/presence: Use named loggers.", "body": "On Wed, 2007-05-16 at 11:31 +0100, Simon McVittie wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n> \n> This causes events in the log to be annotated with the module that emitted the\n> message.\n\nLooks good\n\n> Before: DEBUG - root: Starting up...\n> After: DEBUG - s-p-s.server_plugin: Starting up...\n> \n> I've used a log domain of \"sugar.presence...\" for the client library and\n> e.g. \"s-p-s.activity\" for the service internals.\n> - ---\n>  services/presence/activity.py            |   14 ++++---\n>  services/presence/buddy.py               |   27 +++++++------\n>  services/presence/presenceservice.py     |   33 ++++++++-------\n>  services/presence/psutils.py             |   11 +++--\n>  services/presence/server_plugin.py       |   64 +++++++++++++++--------------\n>  services/presence/sugar-presence-service |   12 ++++--\n>  sugar/presence/presenceservice.py        |   16 ++++---\n>  7 files changed, 98 insertions(+), 79 deletions(-)\n> \n> diff --git a/services/presence/activity.py b/services/presence/activity.py\n> index d295ce3..ee91bc8 100644\n> - --- a/services/presence/activity.py\n> +++ b/services/presence/activity.py\n> @@ -36,6 +36,8 @@ _PROP_LOCAL = \"local\"\n>  _PROP_JOINED = \"joined\"\n>  _PROP_CUSTOM_PROPS = \"custom-props\"\n>  \n> +_logger = logging.getLogger('s-p-s.activity')\n> +\n>  class Activity(ExportedGObject):\n>      \"\"\"Represents a potentially shareable activity on the network.\n>      \"\"\"\n> @@ -359,7 +361,7 @@ class Activity(ExportedGObject):\n>          Called by the _shared_cb and _joined_cb methods.\n>          \"\"\"\n>          if not text_channel:\n> - -            logging.debug(\"Error sharing: text channel was None, shouldn't happen\")\n> +            _logger.debug(\"Error sharing: text channel was None, shouldn't happen\")\n>              raise RuntimeError(\"Plugin returned invalid text channel\")\n>  \n>          self._text_channel = text_channel\n> @@ -379,14 +381,14 @@ class Activity(ExportedGObject):\n>          self._tp.disconnect(sigid)\n>  \n>          if exc:\n> - -            logging.debug(\"Share of activity %s failed: %s\" % (self._id, exc))\n> +            _logger.debug(\"Share of activity %s failed: %s\" % (self._id, exc))\n>              async_err_cb(exc)\n>          else:\n>              self._handle_share_join(tp, text_channel)\n>              self.send_properties()\n>              owner.add_activity(self)\n>              async_cb(dbus.ObjectPath(self._object_path))\n> - -            logging.debug(\"Share of activity %s succeeded.\" % self._id)\n> +            _logger.debug(\"Share of activity %s succeeded.\" % self._id)\n>  \n>      def _share(self, (async_cb, async_err_cb), owner):\n>          \"\"\"XXX - not documented yet\n> @@ -394,13 +396,13 @@ class Activity(ExportedGObject):\n>          XXX - This method is called externally by the PresenceService despite the fact\n>          that this is supposed to be an internal method!\n>          \"\"\"\n> - -        logging.debug(\"Starting share of activity %s\" % self._id)\n> +        _logger.debug(\"Starting share of activity %s\" % self._id)\n>          if self._joined:\n>              async_err_cb(RuntimeError(\"Already shared activity %s\" % self.props.id))\n>              return\n>          sigid = self._tp.connect('activity-shared', self._shared_cb)\n>          self._tp.share_activity(self.props.id, (sigid, owner, async_cb, async_err_cb))\n> - -        logging.debug(\"done with share attempt %s\" % self._id)\n> +        _logger.debug(\"done with share attempt %s\" % self._id)\n>  \n>      def _joined_cb(self, tp, activity_id, text_channel, exc, userdata):\n>          \"\"\"XXX - not documented yet\n> @@ -506,7 +508,7 @@ class Activity(ExportedGObject):\n>              if type != self._type:\n>                  # Type can never be changed after first set\n>                  if self._type:\n> - -                    logging.debug(\"Activity type changed by network; this is illegal\")\n> +                    _logger.debug(\"Activity type changed by network; this is illegal\")\n>                  else:\n>                      self._type = type\n>                      changed = True\n> diff --git a/services/presence/buddy.py b/services/presence/buddy.py\n> index 200401b..429f824 100644\n> - --- a/services/presence/buddy.py\n> +++ b/services/presence/buddy.py\n> @@ -49,6 +49,9 @@ _PROP_VALID = \"valid\"\n>  # Will go away soon\n>  _PROP_IP4_ADDRESS = \"ip4-address\"\n>  \n> +_logger = logging.getLogger('s-p-s.buddy')\n> +\n> +\n>  class Buddy(ExportedGObject):\n>      \"\"\"Person on the network (tracks properties and shared activites)\n>      \n> @@ -130,7 +133,7 @@ class Buddy(ExportedGObject):\n>          _ALLOWED_INIT_PROPS = [_PROP_NICK, _PROP_KEY, _PROP_ICON, _PROP_CURACT, _PROP_COLOR, _PROP_IP4_ADDRESS]\n>          for (key, value) in kwargs.items():\n>              if key not in _ALLOWED_INIT_PROPS:\n> - -                logging.debug(\"Invalid init property '%s'; ignoring...\" % key)\n> +                _logger.debug(\"Invalid init property '%s'; ignoring...\" % key)\n>                  del kwargs[key]\n>  \n>          # Set icon after superclass init, because it sends DBus and GObject\n> @@ -625,7 +628,7 @@ class TestOwner(GenericOwner):\n>          color = xocolor.XoColor().to_string()\n>          icon = _get_random_image()\n>  \n> - -        logging.debug(\"pubkey is %s\" % pubkey)\n> +        _logger.debug(\"pubkey is %s\" % pubkey)\n>          GenericOwner.__init__(self, ps, bus_name, object_id, key=pubkey, nick=nick,\n>                  color=color, icon=icon, registered=registered, key_hash=privkey_hash)\n>  \n> @@ -636,13 +639,13 @@ class TestOwner(GenericOwner):\n>      def _share_reply_cb(self, actid, object_path):\n>          activity = self._ps.internal_get_activity(actid)\n>          if not activity or not object_path:\n> - -            logging.debug(\"Couldn't find activity %s even though it was shared.\" % actid)\n> +            _logger.debug(\"Couldn't find activity %s even though it was shared.\" % actid)\n>              return\n> - -        logging.debug(\"Shared activity %s (%s).\" % (actid, activity.props.name))\n> +        _logger.debug(\"Shared activity %s (%s).\" % (actid, activity.props.name))\n>          self._test_activities.append(activity)\n>  \n>      def _share_error_cb(self, actid, err):\n> - -        logging.debug(\"Error sharing activity %s: %s\" % (actid, str(err)))\n> +        _logger.debug(\"Error sharing activity %s: %s\" % (actid, str(err)))\n>  \n>      def _ps_connection_status_cb(self, ps, connected):\n>          if not connected:\n> @@ -735,7 +738,7 @@ def _hash_private_key(self):\n>          lines = f.readlines()\n>          f.close()\n>      except IOError, e:\n> - -        logging.error(\"Error reading private key: %s\" % e)\n> +        _logger.error(\"Error reading private key: %s\" % e)\n>          return\n>  \n>      key = \"\"\n> @@ -747,7 +750,7 @@ def _hash_private_key(self):\n>              continue\n>          key += l\n>      if not len(key):\n> - -        logging.error(\"Error parsing public key.\")\n> +        _logger.error(\"Error parsing public key.\")\n>  \n>      # hash it\n>      key_hash = util._sha_data(key)\n> @@ -759,7 +762,7 @@ def _extract_public_key(keyfile):\n>          lines = f.readlines()\n>          f.close()\n>      except IOError, e:\n> - -        logging.error(\"Error reading public key: %s\" % e)\n> +        _logger.error(\"Error reading public key: %s\" % e)\n>          return None\n>  \n>      # Extract the public key\n> @@ -772,7 +775,7 @@ def _extract_public_key(keyfile):\n>          key = l[len(magic):]\n>          break\n>      if not len(key):\n> - -        logging.error(\"Error parsing public key.\")\n> +        _logger.error(\"Error parsing public key.\")\n>          return None\n>      return key\n>  \n> @@ -784,7 +787,7 @@ def _extract_private_key(keyfile):\n>          lines = f.readlines()\n>          f.close()\n>      except IOError, e:\n> - -        logging.error(\"Error reading private key: %s\" % e)\n> +        _logger.error(\"Error reading private key: %s\" % e)\n>          return None\n>  \n>      key = \"\"\n> @@ -796,7 +799,7 @@ def _extract_private_key(keyfile):\n>              continue\n>          key += l\n>      if not len(key):\n> - -        logging.error(\"Error parsing private key.\")\n> +        _logger.error(\"Error parsing private key.\")\n>          return None\n>      return key\n>  \n> @@ -821,7 +824,7 @@ def _get_new_keypair(num):\n>      print \"Done.\"\n>      pubkey = privkey = None\n>      if s != 0:\n> - -        logging.error(\"Could not generate key pair: %d (%s)\" % (s, o))\n> +        _logger.error(\"Could not generate key pair: %d (%s)\" % (s, o))\n>      else:\n>          pubkey = _extract_public_key(pubkeyfile)\n>          privkey = _extract_private_key(privkeyfile)\n> diff --git a/services/presence/presenceservice.py b/services/presence/presenceservice.py\n> index 6b67357..c554ce6 100644\n> - --- a/services/presence/presenceservice.py\n> +++ b/services/presence/presenceservice.py\n> @@ -40,6 +40,9 @@ _PRESENCE_INTERFACE = \"org.laptop.Sugar.Presence\"\n>  _PRESENCE_PATH = \"/org/laptop/Sugar/Presence\"\n>  \n> \n> +_logger = logging.getLogger('s-p-s.presenceservice')\n> +\n> +\n>  class NotFoundError(dbus.DBusException):\n>      def __init__(self, msg):\n>          dbus.DBusException.__init__(self, msg)\n> @@ -101,7 +104,7 @@ class PresenceService(ExportedGObject):\n>  \n>      def _connection_disconnected_cb(self, foo=None):\n>          \"\"\"Log event when D-Bus kicks us off the bus for some reason\"\"\"\n> - -        logging.debug(\"Disconnected from session bus!!!\")\n> +        _logger.debug(\"Disconnected from session bus!!!\")\n>  \n>      def _server_status_cb(self, plugin, status, reason):\n>          # FIXME: figure out connection status when we have a salut plugin too\n> @@ -135,10 +138,10 @@ class PresenceService(ExportedGObject):\n>      def _buddy_validity_changed_cb(self, buddy, valid):\n>          if valid:\n>              self.BuddyAppeared(buddy.object_path())\n> - -            logging.debug(\"New Buddy: %s (%s)\" % (buddy.props.nick, buddy.props.color))\n> +            _logger.debug(\"New Buddy: %s (%s)\" % (buddy.props.nick, buddy.props.color))\n>          else:\n>              self.BuddyDisappeared(buddy.object_path())\n> - -            logging.debug(\"Buddy left: %s (%s)\" % (buddy.props.nick, buddy.props.color))\n> +            _logger.debug(\"Buddy left: %s (%s)\" % (buddy.props.nick, buddy.props.color))\n>  \n>      def _contact_offline(self, tp, handle):\n>          if not self._handles_buddies[tp].has_key(handle):\n> @@ -152,7 +155,7 @@ class PresenceService(ExportedGObject):\n>          if not buddy.handles:\n>              if buddy.props.valid:\n>                  self.BuddyDisappeared(buddy.object_path())\n> - -                logging.debug(\"Buddy left: %s (%s)\" % (buddy.props.nick, buddy.props.color))\n> +                _logger.debug(\"Buddy left: %s (%s)\" % (buddy.props.nick, buddy.props.color))\n>              self._buddies.pop(key)\n>  \n>      def _get_next_object_id(self):\n> @@ -163,21 +166,21 @@ class PresenceService(ExportedGObject):\n>      def _avatar_updated(self, tp, handle, avatar):\n>          buddy = self._handles_buddies[tp].get(handle)\n>          if buddy and not buddy.props.owner:\n> - -            logging.debug(\"Buddy %s icon updated\" % buddy.props.nick)\n> +            _logger.debug(\"Buddy %s icon updated\" % buddy.props.nick)\n>              buddy.props.icon = avatar\n>  \n>      def _buddy_properties_changed(self, tp, handle, properties):\n>          buddy = self._handles_buddies[tp].get(handle)\n>          if buddy:\n>              buddy.set_properties(properties)\n> - -            logging.debug(\"Buddy %s properties updated: %s\" % (buddy.props.nick, properties.keys()))\n> +            _logger.debug(\"Buddy %s properties updated: %s\" % (buddy.props.nick, properties.keys()))\n>  \n>      def _new_activity(self, activity_id, tp):\n>          try:\n>              objid = self._get_next_object_id()\n>              activity = Activity(self._bus_name, objid, tp, id=activity_id)\n>          except Exception, e:\n> - -            logging.debug(\"Invalid activity: %s\" % e)\n> +            _logger.debug(\"Invalid activity: %s\" % e)\n>              return None\n>  \n>          activity.connect(\"validity-changed\", self._activity_validity_changed_cb)\n> @@ -185,7 +188,7 @@ class PresenceService(ExportedGObject):\n>          return activity\n>  \n>      def _remove_activity(self, activity):\n> - -        logging.debug(\"remove activity %s\" % activity.props.id)\n> +        _logger.debug(\"remove activity %s\" % activity.props.id)\n>  \n>          self.ActivityDisappeared(activity.object_path())\n>          del self._activities[activity.props.id]\n> @@ -194,7 +197,7 @@ class PresenceService(ExportedGObject):\n>          acts = []\n>          for act in activities:\n>              acts.append(str(act))\n> - -        logging.debug(\"Handle %s activities changed: %s\" % (contact_handle, acts))\n> +        _logger.debug(\"Handle %s activities changed: %s\" % (contact_handle, acts))\n>          buddies = self._handles_buddies[tp]\n>          buddy = buddies.get(contact_handle)\n>  \n> @@ -202,7 +205,7 @@ class PresenceService(ExportedGObject):\n>              # We don't know this buddy\n>              # FIXME: What should we do here? \n>              # FIXME: Do we need to check if the buddy is valid or something?\n> - -            logging.debug(\"contact_activities_changed: buddy unknown\")\n> +            _logger.debug(\"contact_activities_changed: buddy unknown\")\n>              return\n>  \n>          old_activities = set()\n> @@ -213,7 +216,7 @@ class PresenceService(ExportedGObject):\n>  \n>          activities_joined = new_activities - old_activities\n>          for act in activities_joined:\n> - -            logging.debug(\"Handle %s joined activity %s\" % (contact_handle, act))\n> +            _logger.debug(\"Handle %s joined activity %s\" % (contact_handle, act))\n>              activity = self._activities.get(act)\n>              if not activity:\n>                  # new activity, can fail\n> @@ -225,7 +228,7 @@ class PresenceService(ExportedGObject):\n>  \n>          activities_left = old_activities - new_activities\n>          for act in activities_left:\n> - -            logging.debug(\"Handle %s left activity %s\" % (contact_handle, act))\n> +            _logger.debug(\"Handle %s left activity %s\" % (contact_handle, act))\n>              activity = self._activities.get(act)\n>              if not activity:\n>                  continue\n> @@ -341,10 +344,10 @@ class PresenceService(ExportedGObject):\n>      def _activity_validity_changed_cb(self, activity, valid):\n>          if valid:\n>              self.ActivityAppeared(activity.object_path())\n> - -            logging.debug(\"New Activity: %s (%s)\" % (activity.props.name, activity.props.id))\n> +            _logger.debug(\"New Activity: %s (%s)\" % (activity.props.name, activity.props.id))\n>          else:\n>              self.ActivityDisappeared(activity.object_path())\n> - -            logging.debug(\"Activity disappeared: %s (%s)\" % (activity.props.name, activity.props.id))\n> +            _logger.debug(\"Activity disappeared: %s (%s)\" % (activity.props.name, activity.props.id))\n>  \n>      def _activity_properties_changed(self, tp, act_id, props):\n>          activity = self._activities.get(act_id)\n> @@ -364,7 +367,7 @@ def main(test_num=0, randomize=False):\n>          loop.run()\n>      except KeyboardInterrupt:\n>          ps.cleanup()\n> - -        logging.debug('Ctrl+C pressed, exiting...')\n> +        _logger.debug('Ctrl+C pressed, exiting...')\n>  \n>  if __name__ == \"__main__\":\n>      main()\n> diff --git a/services/presence/psutils.py b/services/presence/psutils.py\n> index b24b1df..73a5315 100644\n> - --- a/services/presence/psutils.py\n> +++ b/services/presence/psutils.py\n> @@ -18,6 +18,9 @@ import dbus, dbus.glib, gobject\n>  import logging\n>  \n> \n> +_logger = logging.getLogger('s-p-s.psutils')\n> +\n> +\n>  def bytes_to_string(bytes):\n>      \"\"\"The function converts a  D-BUS byte array provided by dbus to string format.\n>      \n> @@ -92,7 +95,7 @@ class IP4AddressMonitor(gobject.GObject):\n>              return\n>  \n>          self._addr = new_addr\n> - -        logging.debug(\"IP4 address now '%s'\" % new_addr)\n> +        _logger.debug(\"IP4 address now '%s'\" % new_addr)\n>          self.emit('address-changed', new_addr)\n>  \n>      def _connect_to_nm(self):\n> @@ -102,7 +105,7 @@ class IP4AddressMonitor(gobject.GObject):\n>              proxy = sys_bus.get_object(NM_SERVICE, NM_PATH)\n>              self._nm_obj = dbus.Interface(proxy, NM_IFACE)\n>          except dbus.DBusException, err:\n> - -            logging.debug(\"Error finding NetworkManager: %s\" % err)\n> +            _logger.debug(\"Error finding NetworkManager: %s\" % err)\n>              self._nm_present = False\n>              return\n>  \n> @@ -141,7 +144,7 @@ class IP4AddressMonitor(gobject.GObject):\n>          self._update_address(props[6])\n>  \n>      def _device_properties_error_cb(self, err):\n> - -        logging.debug(\"Error querying device properties: %s\" % err)\n> +        _logger.debug(\"Error querying device properties: %s\" % err)\n>  \n>      def _query_device_properties(self, device):\n>          sys_bus = dbus.SystemBus()\n> @@ -156,7 +159,7 @@ class IP4AddressMonitor(gobject.GObject):\n>              self._query_device_properties(op)\n>  \n>      def _get_devices_error_cb(self, err):\n> - -        logging.debug(\"Error getting NetworkManager devices: %s\" % err)\n> +        _logger.debug(\"Error getting NetworkManager devices: %s\" % err)\n>  \n>      def _query_devices(self):\n>          \"\"\"Query NM for a list of network devices\"\"\"\n> diff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py\n> index c7f6257..b3b9482 100644\n> - --- a/services/presence/server_plugin.py\n> +++ b/services/presence/server_plugin.py\n> @@ -42,6 +42,8 @@ CONN_INTERFACE_ACTIVITY_PROPERTIES = 'org.laptop.Telepathy.ActivityProperties'\n>  \n>  _PROTOCOL = \"jabber\"\n>  \n> +_logger = logging.getLogger('s-p-s.server_plugin')\n> +\n>  class InvalidBuddyError(Exception):\n>      \"\"\"(Unused) exception to indicate an invalid buddy specifier\"\"\"\n>  \n> @@ -144,14 +146,14 @@ class ServerPlugin(gobject.GObject):\n>          self._ip4am.connect('address-changed', self._ip4_address_changed_cb)\n>  \n>      def _ip4_address_changed_cb(self, ip4am, address):\n> - -        logging.debug(\"::: IP4 address now %s\" % address)\n> +        _logger.debug(\"::: IP4 address now %s\" % address)\n>          if address:\n> - -            logging.debug(\"::: valid IP4 address, conn_status %s\" % self._conn_status)\n> +            _logger.debug(\"::: valid IP4 address, conn_status %s\" % self._conn_status)\n>              if self._conn_status == CONNECTION_STATUS_DISCONNECTED:\n> - -                logging.debug(\"::: will connect\")\n> +                _logger.debug(\"::: will connect\")\n>                  self.start()\n>          else:\n> - -            logging.debug(\"::: invalid IP4 address, will disconnect\")\n> +            _logger.debug(\"::: invalid IP4 address, will disconnect\")\n>              self.cleanup()\n>  \n>      def _owner_property_changed_cb(self, owner, properties):\n> @@ -169,7 +171,7 @@ class ServerPlugin(gobject.GObject):\n>          depending on which properties are present in the \n>          set of properties.\n>          \"\"\"\n> - -        logging.debug(\"Owner properties changed: %s\" % properties)\n> +        _logger.debug(\"Owner properties changed: %s\" % properties)\n>  \n>          if properties.has_key(\"current-activity\"):\n>              self._set_self_current_activity()\n> @@ -185,7 +187,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>      def _owner_icon_changed_cb(self, owner, icon):\n>          \"\"\"Owner has changed their icon, forward to network\"\"\"\n> - -        logging.debug(\"Owner icon changed to size %d\" % len(str(icon)))\n> +        _logger.debug(\"Owner icon changed to size %d\" % len(str(icon)))\n>          self._set_self_avatar(icon)\n>  \n>      def _get_account_info(self):\n> @@ -250,7 +252,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>      def _connect_error_cb(self, exception):\n>          \"\"\"Handle connection failure\"\"\"\n> - -        logging.debug(\"Connect error: %s\" % exception)\n> +        _logger.debug(\"Connect error: %s\" % exception)\n>  \n>      def _init_connection(self):\n>          \"\"\"Set up our connection \n> @@ -336,7 +338,7 @@ class ServerPlugin(gobject.GObject):\n>          subscribe[CHANNEL_INTERFACE_GROUP].AddMembers(not_subscribed, '')\n>  \n>          if CONN_INTERFACE_BUDDY_INFO not in self._conn.get_valid_interfaces():\n> - -            logging.debug('OLPC information not available')\n> +            _logger.debug('OLPC information not available')\n>              return False\n>  \n>          self._conn[CONN_INTERFACE_BUDDY_INFO].connect_to_signal('PropertiesChanged',\n> @@ -394,7 +396,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>          types, minw, minh, maxw, maxh, maxsize = self._conn[CONN_INTERFACE_AVATARS].GetAvatarRequirements()\n>          if not \"image/jpeg\" in types:\n> - -            logging.debug(\"server does not accept JPEG format avatars.\")\n> +            _logger.debug(\"server does not accept JPEG format avatars.\")\n>              return\n>  \n>          img_data = _get_buddy_icon_at_size(icon_data, min(maxw, 96), min(maxh, 96), maxsize)\n> @@ -414,7 +416,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>          if (activity_id, handles[0]) in self._joined_activities:\n>              e = RuntimeError(\"Already joined activity %s\" % activity_id)\n> - -            logging.debug(str(e))\n> +            _logger.debug(str(e))\n>              self.emit(signal, activity_id, None, e, userdata)\n>              return\n>  \n> @@ -425,7 +427,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>      def _join_error_cb(self, activity_id, signal, userdata, err):\n>          e = Exception(\"Error joining/sharing activity %s: %s\" % (activity_id, err))\n> - -        logging.debug(str(e))\n> +        _logger.debug(str(e))\n>          self.emit(signal, activity_id, None, e, userdata)\n>  \n>      def _internal_join_activity(self, activity_id, signal, userdata):\n> @@ -470,7 +472,7 @@ class ServerPlugin(gobject.GObject):\n>  \n>      def _log_error_cb(self, msg, err):\n>          \"\"\"Log a message (error) at debug level with prefix msg\"\"\"\n> - -        logging.debug(\"Error %s: %s\" % (msg, err))\n> +        _logger.debug(\"Error %s: %s\" % (msg, err))\n>  \n>      def _set_self_olpc_properties(self):\n>          \"\"\"Set color and key on our Telepathy server identity\"\"\"\n> @@ -519,7 +521,7 @@ class ServerPlugin(gobject.GObject):\n>                  # dont advertise a current activity that's not shared\n>                  cur_activity = \"\"\n>  \n> - -        logging.debug(\"Setting current activity to '%s' (handle %s)\" % (cur_activity, cur_activity_handle))\n> +        _logger.debug(\"Setting current activity to '%s' (handle %s)\" % (cur_activity, cur_activity_handle))\n>          self._conn[CONN_INTERFACE_BUDDY_INFO].SetCurrentActivity(cur_activity,\n>                  cur_activity_handle,\n>                  reply_handler=self._ignore_success_cb,\n> @@ -549,17 +551,17 @@ class ServerPlugin(gobject.GObject):\n>  \n>          if status == CONNECTION_STATUS_CONNECTING:\n>              self._conn_status = status\n> - -            logging.debug(\"status: connecting...\")\n> +            _logger.debug(\"status: connecting...\")\n>          elif status == CONNECTION_STATUS_CONNECTED:\n>              if self._connected_cb():\n> - -                logging.debug(\"status: connected\")\n> +                _logger.debug(\"status: connected\")\n>                  self._conn_status = status\n>              else:\n>                  self.cleanup()\n> - -                logging.debug(\"status: was connected, but an error occurred\")\n> +                _logger.debug(\"status: was connected, but an error occurred\")\n>          elif status == CONNECTION_STATUS_DISCONNECTED:\n>              self.cleanup()\n> - -            logging.debug(\"status: disconnected (reason %r)\" % reason)\n> +            _logger.debug(\"status: disconnected (reason %r)\" % reason)\n>              if reason == CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED:\n>                  # FIXME: handle connection failure; retry later?\n>                  pass\n> @@ -580,7 +582,7 @@ class ServerPlugin(gobject.GObject):\n>          status -- CONNECTION_STATUS_*\n>          reason -- integer code describing the reason...\n>          \"\"\"\n> - -        logging.debug(\"::: connection status changed to %s\" % status)\n> +        _logger.debug(\"::: connection status changed to %s\" % status)\n>          self._handle_connection_status_change(status, reason)\n>  \n>      def start(self):\n> @@ -594,7 +596,7 @@ class ServerPlugin(gobject.GObject):\n>          otherwise initiate a connection and transfer control to \n>              _connect_reply_cb or _connect_error_cb\n>          \"\"\"\n> - -        logging.debug(\"Starting up...\")\n> +        _logger.debug(\"Starting up...\")\n>  \n>          if self._reconnect_id > 0:\n>              gobject.source_remove(self._reconnect_id)\n> @@ -602,10 +604,10 @@ class ServerPlugin(gobject.GObject):\n>  \n>          # Only init connection if we have a valid IP address\n>          if self._ip4am.props.address:\n> - -            logging.debug(\"::: Have IP4 address %s, will connect\" % self._ip4am.props.address)\n> +            _logger.debug(\"::: Have IP4 address %s, will connect\" % self._ip4am.props.address)\n>              self._init_connection()\n>          else:\n> - -            logging.debug(\"::: No IP4 address, postponing connection\")\n> +            _logger.debug(\"::: No IP4 address, postponing connection\")\n>  \n>      def cleanup(self):\n>          \"\"\"If we still have a connection, disconnect it\"\"\"\n> @@ -638,14 +640,14 @@ class ServerPlugin(gobject.GObject):\n>  \n>      def _contact_online_activities_error_cb(self, handle, err):\n>          \"\"\"Handle contact's activity list being unavailable\"\"\"\n> - -        logging.debug(\"Handle %s - Error getting activities: %s\" % (handle, err))\n> +        _logger.debug(\"Handle %s - Error getting activities: %s\" % (handle, err))\n>          # Don't drop the buddy if we can't get their activities, for now\n>          #self._contact_offline(handle)\n>  \n>      def _contact_online_aliases_cb(self, handle, props, aliases):\n>          \"\"\"Handle contact's alias being received (do further queries)\"\"\"\n>          if not self._conn or not aliases or not len(aliases):\n> - -            logging.debug(\"Handle %s - No aliases\" % handle)\n> +            _logger.debug(\"Handle %s - No aliases\" % handle)\n>              self._contact_offline(handle)\n>              return\n>  \n> @@ -660,17 +662,17 @@ class ServerPlugin(gobject.GObject):\n>  \n>      def _contact_online_aliases_error_cb(self, handle, err):\n>          \"\"\"Handle failure to retrieve given user's alias/information\"\"\"\n> - -        logging.debug(\"Handle %s - Error getting nickname: %s\" % (handle, err))\n> +        _logger.debug(\"Handle %s - Error getting nickname: %s\" % (handle, err))\n>          self._contact_offline(handle)\n>  \n>      def _contact_online_properties_cb(self, handle, props):\n>          \"\"\"Handle failure to retrieve given user's alias/information\"\"\"\n>          if not props.has_key('key'):\n> - -            logging.debug(\"Handle %s - invalid key.\" % handle)\n> +            _logger.debug(\"Handle %s - invalid key.\" % handle)\n>              self._contact_offline(handle)\n>              return\n>          if not props.has_key('color'):\n> - -            logging.debug(\"Handle %s - invalid color.\" % handle)\n> +            _logger.debug(\"Handle %s - invalid color.\" % handle)\n>              self._contact_offline(handle)\n>              return\n>  \n> @@ -683,7 +685,7 @@ class ServerPlugin(gobject.GObject):\n>          \n>      def _contact_online_properties_error_cb(self, handle, err):\n>          \"\"\"Handle error retrieving property-set for a user (handle)\"\"\"\n> - -        logging.debug(\"Handle %s - Error getting properties: %s\" % (handle, err))\n> +        _logger.debug(\"Handle %s - Error getting properties: %s\" % (handle, err))\n>          self._contact_offline(handle)\n>  \n>      def _contact_online(self, handle):\n> @@ -712,7 +714,7 @@ class ServerPlugin(gobject.GObject):\n>                  jid = self._conn[CONN_INTERFACE].InspectHandles(CONNECTION_HANDLE_TYPE_CONTACT, [handle])[0]\n>                  olstr = \"ONLINE\"\n>                  if not online: olstr = \"OFFLINE\"\n> - -                logging.debug(\"Handle %s (%s) was %s, status now '%s'.\" % (handle, jid, olstr, status))\n> +                _logger.debug(\"Handle %s (%s) was %s, status now '%s'.\" % (handle, jid, olstr, status))\n>                  if not online and status in [\"available\", \"away\", \"brb\", \"busy\", \"dnd\", \"xa\"]:\n>                      self._contact_online(handle)\n>                  elif status in [\"offline\", \"invisible\"]:\n> @@ -726,12 +728,12 @@ class ServerPlugin(gobject.GObject):\n>              return\n>  \n>          if not self._online_contacts.has_key(handle):\n> - -            logging.debug(\"Handle %s unknown.\" % handle)\n> +            _logger.debug(\"Handle %s unknown.\" % handle)\n>              return\n>  \n>          jid = self._online_contacts[handle]\n>          if not jid:\n> - -            logging.debug(\"Handle %s not valid yet...\" % handle)\n> +            _logger.debug(\"Handle %s not valid yet...\" % handle)\n>              return\n>  \n>          icon = self._icon_cache.get_icon(jid, new_avatar_token)\n> @@ -787,7 +789,7 @@ class ServerPlugin(gobject.GObject):\n>          if not len(activity) or not util.validate_activity_id(activity):\n>              activity = None\n>          prop = {'current-activity': activity}\n> - -        logging.debug(\"Handle %s: current activity now %s\" % (handle, activity))\n> +        _logger.debug(\"Handle %s: current activity now %s\" % (handle, activity))\n>          self._buddy_properties_changed_cb(handle, prop)\n>  \n>      def _new_channel_cb(self, object_path, channel_type, handle_type, handle, suppress_handler):\n> diff --git a/services/presence/sugar-presence-service b/services/presence/sugar-presence-service\n> index 1680fea..6ab871c 100755\n> - --- a/services/presence/sugar-presence-service\n> +++ b/services/presence/sugar-presence-service\n> @@ -24,8 +24,12 @@ import os\n>  from sugar import logger\n>  from sugar import env\n>  \n> +\n> +_logger = logging.getLogger('s-p-s')\n> +\n> +\n>  def usage():\n> - -    logging.debug(\"Usage: sugar-presence-service [] [randomize]\")\n> +    _logger.debug(\"Usage: sugar-presence-service [] [randomize]\")\n>  \n>  sys.path.append(env.get_service_path('presence'))\n>  \n> @@ -35,9 +39,9 @@ if len(sys.argv) in [2, 3]:\n>      try:\n>          test_num = int(sys.argv[1])\n>      except ValueError:\n> - -        logging.debug(\"Bad test user number.\")\n> +        _logger.debug(\"Bad test user number.\")\n>      if test_num < 1 or test_num > 10:\n> - -        logging.debug(\"Bad test user number.\")\n> +        _logger.debug(\"Bad test user number.\")\n>  \n>      if len(sys.argv) == 3 and sys.argv[2] == \"randomize\":\n>          randomize = True\n> @@ -54,6 +58,6 @@ else:\n>  \n>  import presenceservice\n>  \n> - -logging.info('Starting presence service...')\n> +_logger.info('Starting presence service...')\n>  \n>  presenceservice.main(test_num, randomize)\n> diff --git a/sugar/presence/presenceservice.py b/sugar/presence/presenceservice.py\n> index 621a289..1bc9a57 100644\n> - --- a/sugar/presence/presenceservice.py\n> +++ b/sugar/presence/presenceservice.py\n> @@ -36,6 +36,8 @@ DBUS_SERVICE = \"org.laptop.Sugar.Presence\"\n>  DBUS_INTERFACE = \"org.laptop.Sugar.Presence\"\n>  DBUS_PATH = \"/org/laptop/Sugar/Presence\"\n>  \n> +_logger = logging.getLogger('sugar.presence.presenceservice')\n> +\n>  \n>  class PresenceService(gobject.GObject):\n>      \"\"\"UI-side interface to the dbus presence service \n> @@ -116,7 +118,7 @@ class PresenceService(gobject.GObject):\n>                      DBUS_INTERFACE\n>                  )\n>              except dbus.exceptions.DBusException, err:\n> - -                logging.error(\n> +                _logger.error(\n>                      \"\"\"Failure retrieving %r interface from the D-BUS service %r %r: %s\"\"\",\n>                      DBUS_INTERFACE, DBUS_SERVICE, DBUS_PATH, err\n>                  )\n> @@ -247,7 +249,7 @@ class PresenceService(gobject.GObject):\n>          try:\n>              resp = self._ps.GetActivities()\n>          except dbus.exceptions.DBusException, err:\n> - -            logging.warn(\n> +            _logger.warn(\n>                  \"\"\"Unable to retrieve activity list from presence service: %s\"\"\"\n>                  % err\n>              )\n> @@ -269,7 +271,7 @@ class PresenceService(gobject.GObject):\n>          try:\n>              act_op = self._ps.GetActivityById(activity_id)\n>          except dbus.exceptions.DBusException, err:\n> - -            logging.warn(\n> +            _logger.warn(\n>                  \"\"\"Unable to retrieve activity handle for %r from presence service: %s\"\"\"\n>                  % (activity_id, err)\n>              )\n> @@ -285,7 +287,7 @@ class PresenceService(gobject.GObject):\n>          try:\n>              resp = self._ps.GetBuddies()\n>          except dbus.exceptions.DBusException, err:\n> - -            logging.warn(\n> +            _logger.warn(\n>                  \"\"\"Unable to retrieve buddy-list from presence service: %s\"\"\"\n>                  % err\n>              )\n> @@ -308,7 +310,7 @@ class PresenceService(gobject.GObject):\n>          try:\n>              buddy_op = self._ps.GetBuddyByPublicKey(dbus.ByteArray(key))\n>          except dbus.exceptions.DBusException, err:\n> - -            logging.warn(\n> +            _logger.warn(\n>                  \"\"\"Unable to retrieve buddy handle for %r from presence service: %s\"\"\"\n>                  % key, err\n>              )\n> @@ -320,7 +322,7 @@ class PresenceService(gobject.GObject):\n>          try:\n>              owner_op = self._ps.GetOwner()\n>          except dbus.exceptions.DBusException, err:\n> - -            logging.warn(\n> +            _logger.warn(\n>                  \"\"\"Unable to retrieve local user/owner from presence service: %s\"\"\"\n>                  % err\n>              )\n> @@ -335,7 +337,7 @@ class PresenceService(gobject.GObject):\n>  \n>      def _share_activity_error_cb(self, activity, err):\n>          \"\"\"Notify with GObject event of unsuccessful sharing of activity\"\"\"\n> - -        logging.debug(\"Error sharing activity %s: %s\" % (activity.get_id(), err))\n> +        _logger.debug(\"Error sharing activity %s: %s\" % (activity.get_id(), err))\n>          self.emit(\"activity-shared\", False, None, err)\n>  \n>      def share_activity(self, activity, properties={}):\n> - -- \n> 1.5.2-rc2.GIT\n> \n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.6 (GNU/Linux)\n> Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net\n> \n> iD8DBQFGSt18WSc8zVUw7HYRAmLPAKCUpheFwvYGQO2DLtG3SPiza825WgCfX+Td\n> thvqL+myErLrCmgc7rFvF0o=\n> =I56s\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> Sugar mailing list\n> Sugar@laptop.org\n> http://mailman.laptop.org/mailman/listinfo/sugar\n\n_______________________________________________\nSugar mailing list\nSugar@laptop.org\nhttp://mailman.laptop.org/mailman/listinfo/sugar\n\n"}