{"category": "ham", "to_address": "perl6-internals@perl.org", "from_address": "chromatic <chromatic@wgz.org>", "subject": "Re: [perl #42768] [PATCH] Enum cleanups", "body": "On Friday 27 April 2007 12:22, Steve Peters wrote:\n\n> The attached additional patch fixes one problem caused by the previous\n> patch and gets Intel C++ to compile and pass all of its tests on\n> Linux.  Only apply the attached patch after applying the first patch.\n\nThis part bothers me:\n\n--- src/mmd.c   (revision 18345)\n+++ src/mmd.c   (working copy)\n@@ -1703,7 +1703,12 @@\n      * register default mmds for this type\n      */\n     for (i = 0; i < n; ++i) {\n+        /* The following always fails for Intel C++ for unknown reasons,\n+         * but I'm assuming its optimizer related.\n+         */\n+#ifndef __INTEL_COMPILER\n         assert((PTR2UINTVAL(mmd_table[i].func_ptr) & 3) == 0);\n+#endif\n         mmd_register(interp,\n                 mmd_table[i].func_nr, type,\n                 mmd_table[i].right, mmd_table[i].func_ptr);\n\nI know *what* the code does (squeal if the lower two bits of the pointer are \nset), but neither why nor what those bits signify (alignment problems? \nspecial MMD type flags?  PMC type flags?).\n\nIt's not a problem with the patch per se, but it's definitely something weird \nin the code to track down further.\n\nThanks, both patches applied as r18347.\n\n-- c\n\n"}