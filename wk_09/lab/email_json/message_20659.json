{"category": "ham", "to_address": "p2 <parrot-porters@perl.org>", "from_address": "Allison Randal <allison@perl.org>", "subject": "finishing off the implementation of new object metamodel", "body": "We're most of the way through the implementation of PDD 15, but still \nhave a few final steps before it can completely replace the current \nimplementation. Much of the current implementation of OO lives in \nsrc/objects.c and src/ops/object.ops. Much of the code is specific to \nthe ParrotClass/ParrotObject way of doing things.\n\nTo finish off the implementation we can either branch, rip out the old \nimplementation, and reintegrate (the \"big thud\" approach, as chromatic \nwould call it), or we can refactor the existing ops and supporting code \nto support the old and new metamodels, and when both are passing all the \ntests, we can switch 'newclass' over to creating new style classes by \ndefault.\n\nIn this case, my preference is the refactor approach. We need to support \nmultiple class/object implementations anyway. Refactoring to support the \ntwo we have now moves us closer to our goals than simply replacing the \nold implementation. Running two implementations will also force us to \nrespect encapsulation boundaries much more than the current \nimplementation does.\n\nAny concerns? Existing uses of OO code shouldn't be affected until we \nmake the switch of 'newclass' creating new classes by default. I suspect \nPGE and TGE are our heaviest users of the current object implementation \nand will act as the best stress test.\n\nAllison\n\n"}