{"category": "spam", "to_address": "<elaastic@speedy.uwaterloo.ca>", "from_address": "\"Miles Bessie\" <occq@homebuyersgroup.com>", "subject": "Adding a Background PageIn Visio, the background page lets you add text or shapes (a title and legend, for instance) that you want to appear behind multiple pages.", "body": "\n\n\n\n\n\n\n\nHappily, the answer is yes, they will still work \njust fine (unless they do crazy things like checking the version of Office and \nrefusing to run on newer releases). Replacing the menus and command bars of previous \nversions of Office, the Ribbon organizes features and functions into context \nsensitive tabs. This creates two files in your project: one for the Ribbon \ndefinition and one for the Ribbon codebehind.\nThus the XML file is essentially saying \"Find the \nbuilt-in Insert tab and create a custom group inside of it.\nSet the Document ThemeYou can set predefined themes \nin Visio just as you can in PowerPoint. One difference in Visio, though, is that you \ncan specify the theme using the  VisThemeColors enumeration. The final result is a \nsquare connected to a triangle with a theme applied, as shown in Figure \n5.\nRibbonX add-ins cannot modify the contents of the \nMiniToolbar, but they can disable or repurpose the built-in commands on it. RibbonX \nadd-ins can create their own custom tabs and alter the visibility and labels of the \nbuilt-in tabs. In the OnLoad callback, Office passes a reference to the Ribbon \ninstance.\nName or CommandBarButton.\nThere was no standard mechanism for doing this \nusing CommandBars, so it was fraught with difficulty and error.\nAdding a Background PageIn Visio, the background \npage lets you add text or shapes (a title and legend, for instance) that you want to \nappear behind multiple pages. The Ribbon definition file is an XML file that \ndescribes the Ribbon.\nApplication in a Word add-in returns a \nMicrosoft.\nUnlike shared add-ins, there is no need to cast the \nobject to the correct Office Application type because the VSTO project template sets \nthe correct type for the add-in you are creating. You add a slide to the slides \ncollection of the presentation by calling the AddSlide method. Visio 2007 Object \nModelThe object model in Visio, which is quite different from the other Office \napplications, can be challenging to understand. If the add-in dealt with \nmanipulating the document as a whole, you might choose to put its UI into the Office \nMenu.\nYou can see these points when you drop a shape onto \nthe page-they appear as little blue Xs. Instead of writing complicated code that \nbuilds up the UI using a series of object model calls, you can create an XML file \nthat specifies the appearance of the UI in a structured markup form.\n\" If you load the add-in in Word 2007, it works \njust fine in the Add-Ins tab (see Figure 5). Second, it's designed to be \nforward-compatible with future versions of Office. The Ribbon1 class implements the \nIRibbonExtensibility interface that is passed to Office when requested.\nWhile running, these apps often remove all of the \nbuilt-in Office UI and replace it with their own. The irony is that the user \nprobably won't even use most of the add-ins' functionality in any particular \nsession, but they pay the price in all of them. RibbonX add-ins can freely alter the \ncontents of the Office Menu (though they cannot customize the Office Button \nitself).\n"}