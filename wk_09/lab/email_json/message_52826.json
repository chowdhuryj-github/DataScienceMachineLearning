{"category": "ham", "to_address": "samba-cvs@samba.org", "from_address": "obnox@samba.org", "subject": "svn commit: samba r23583 - in branches: SAMBA_3_0/source/registry\n\tSAMBA_3_0_26/source/registry", "body": "Author: obnox\nDate: 2007-06-22 11:21:59 +0000 (Fri, 22 Jun 2007)\nNew Revision: 23583\n\nWebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23583\n\nLog:\nAdd a utility function to recursively delete a Registry\nkey with all its subkeys. (reg_deletekey will refuse to\ndelete a key with subkeys with WERR_ACCESS_DENIED).\n\nMichael\n\n\nModified:\n   branches/SAMBA_3_0/source/registry/reg_api.c\n   branches/SAMBA_3_0_26/source/registry/reg_api.c\n\n\nChangeset:\nModified: branches/SAMBA_3_0/source/registry/reg_api.c\n===================================================================\n--- branches/SAMBA_3_0/source/registry/reg_api.c\t2007-06-22 11:20:37 UTC (rev 23582)\n+++ branches/SAMBA_3_0/source/registry/reg_api.c\t2007-06-22 11:21:59 UTC (rev 23583)\n@@ -677,3 +677,59 @@\n \t*pkey = key;\n \treturn WERR_OK;\n }\n+\n+\n+/*\n+ * Utility function to delete a registry key with all its subkeys. \n+ * Note that reg_deletekey returns ACCESS_DENIED when called on a \n+ * key that has subkeys.\n+ */\n+WERROR reg_deletekey_recursive(TALLOC_CTX *ctx,\n+\t\t\t       struct registry_key *parent, \n+\t\t\t       const char *path)\n+{\n+\tTALLOC_CTX *mem_ctx = NULL;\n+\tWERROR werr = WERR_OK;\n+\tstruct registry_key *key;\n+\tuint32 idx = 0;\n+\tchar *subkey_name = NULL;\n+\n+\tmem_ctx = talloc_new(ctx);\n+\tif (mem_ctx == NULL) {\n+\t\twerr = WERR_NOMEM;\n+\t\tgoto done;\n+\t}\n+\n+\t/* recurse through subkeys first */\n+\twerr = reg_openkey(mem_ctx, parent, path, REG_KEY_WRITE, &key);\n+\tif (!W_ERROR_IS_OK(werr)) {\n+\t\tgoto done;\n+\t}\n+\n+\t/* NOTE: we *must not* increment idx in this loop since\n+\t * the list of subkeys shrinks with each loop body. \n+\t * so this way, we repeatedly delete the *first* entry\n+\t * of a shrinking list. */\n+\tfor (idx = 0;\n+\t     W_ERROR_IS_OK(werr = reg_enumkey(mem_ctx, key, idx,\n+\t\t\t     \t\t      &subkey_name, NULL));\n+\t    ) \n+\t{\n+\t\twerr = reg_deletekey_recursive(mem_ctx, key, subkey_name);\n+\t\tif (!W_ERROR_IS_OK(werr)) {\n+\t\t\tgoto done;\n+\t\t}\n+\t}\n+\tif (!W_ERROR_EQUAL(WERR_NO_MORE_ITEMS, werr)) {\n+\t\tDEBUG(1, (\"reg_deletekey_recursive: Error enumerating \"\n+\t\t\t  \"subkeys: %s\\n\", dos_errstr(werr)));\n+\t\tgoto done;\n+\t}\n+\n+\t/* now delete the actual key */\n+\twerr = reg_deletekey(parent, path);\n+\t\n+done:\n+\tTALLOC_FREE(mem_ctx);\n+\treturn werr;\n+}\n\nModified: branches/SAMBA_3_0_26/source/registry/reg_api.c\n===================================================================\n--- branches/SAMBA_3_0_26/source/registry/reg_api.c\t2007-06-22 11:20:37 UTC (rev 23582)\n+++ branches/SAMBA_3_0_26/source/registry/reg_api.c\t2007-06-22 11:21:59 UTC (rev 23583)\n@@ -677,3 +677,59 @@\n \t*pkey = key;\n \treturn WERR_OK;\n }\n+\n+\n+/*\n+ * Utility function to delete a registry key with all its subkeys. \n+ * Note that reg_deletekey returns ACCESS_DENIED when called on a \n+ * key that has subkeys.\n+ */\n+WERROR reg_deletekey_recursive(TALLOC_CTX *ctx,\n+\t\t\t       struct registry_key *parent, \n+\t\t\t       const char *path)\n+{\n+\tTALLOC_CTX *mem_ctx = NULL;\n+\tWERROR werr = WERR_OK;\n+\tstruct registry_key *key;\n+\tuint32 idx = 0;\n+\tchar *subkey_name = NULL;\n+\n+\tmem_ctx = talloc_new(ctx);\n+\tif (mem_ctx == NULL) {\n+\t\twerr = WERR_NOMEM;\n+\t\tgoto done;\n+\t}\n+\n+\t/* recurse through subkeys first */\n+\twerr = reg_openkey(mem_ctx, parent, path, REG_KEY_WRITE, &key);\n+\tif (!W_ERROR_IS_OK(werr)) {\n+\t\tgoto done;\n+\t}\n+\n+\t/* NOTE: we *must not* increment idx in this loop since\n+\t * the list of subkeys shrinks with each loop body. \n+\t * so this way, we repeatedly delete the *first* entry\n+\t * of a shrinking list. */\n+\tfor (idx = 0;\n+\t     W_ERROR_IS_OK(werr = reg_enumkey(mem_ctx, key, idx,\n+\t\t\t     \t\t      &subkey_name, NULL));\n+\t    ) \n+\t{\n+\t\twerr = reg_deletekey_recursive(mem_ctx, key, subkey_name);\n+\t\tif (!W_ERROR_IS_OK(werr)) {\n+\t\t\tgoto done;\n+\t\t}\n+\t}\n+\tif (!W_ERROR_EQUAL(WERR_NO_MORE_ITEMS, werr)) {\n+\t\tDEBUG(1, (\"reg_deletekey_recursive: Error enumerating \"\n+\t\t\t  \"subkeys: %s\\n\", dos_errstr(werr)));\n+\t\tgoto done;\n+\t}\n+\n+\t/* now delete the actual key */\n+\twerr = reg_deletekey(parent, path);\n+\t\n+done:\n+\tTALLOC_FREE(mem_ctx);\n+\treturn werr;\n+}\n\n"}