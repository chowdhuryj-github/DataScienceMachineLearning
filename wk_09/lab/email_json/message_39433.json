{"category": "ham", "to_address": "\"David Unric\" <dunric29a@gmail.com>", "from_address": "\"Chas Owens\" <chas.owens@gmail.com>", "subject": "Re: Arrow dereference operator question", "body": "On 5/31/07, David Unric  wrote:\n> Based on perlref documentation arrow operator between brackets subscripts\n> may be omitted so the following code is valid:\n>\n> @array = ( [1, 2], [3, 4] );\n> $element = $array[0][0];    #  shorthand for  $element = $array[0]->[0]\n>\n>\n> Could somebody explain why it causes syntax error when the above rule is\n> applied to returned value of a subroutine ?\n>\n> sub mysub {\n>     @array = ( [1, 2], [3, 4] );\n>\n>     return @array;\n> }\n>\n> $element = (&mysub)[0][0];   # $elem = (&mysub)[0]->[0] is valid\n> ------------------------------\n> syntax error at testarr.pl line 7, near \"][\"\n>\n\nMy best guess is that the problem here is that (mysub())* is a list\nnot an array.  Lists are not multidimensional.  Try\n\nmy $element = ([1, 2], [3, 4])[0][0];\n\nNotice how it gets the same error?\n\nThe simple solution is to use the arrow, or have the sub return an\narrayref.  Here are some ways to do it:\n\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nsub list {\n        my @array = ( [1, 2], [3, 4] );\n        return @array;\n}\n\nsub aref {\n        my @array = ( [1, 2], [3, 4] );\n        return \\@array;\n}\n\nprint (\n        (list())[0]->[0], \"\\n\",\n        \"${[list()]}[0][1]\\n\",\n        \"${aref()}[1][0]\\n\",\n        (aref())->[1][1], \"\\n\"\n);\n\n\n\n* don't use &mysub unless you know why you are doing it, use mysub() instead\n\n-- \nTo unsubscribe, e-mail: beginners-unsubscribe@perl.org\nFor additional commands, e-mail: beginners-help@perl.org\nhttp://learn.perl.org/\n\n\n"}