{"category": "ham", "to_address": "perl6-language@perl.org", "from_address": "larry@cvs.develooper.com", "subject": "[svn:perl6-synopsis] r14394 - doc/trunk/design/syn", "body": "Author: larry\nDate: Sat May 19 09:06:10 2007\nNew Revision: 14394\n\nModified:\n   doc/trunk/design/syn/S12.pod\n\nLog:\n\"basal\" was not intuitive, changed to \"super\"\n\"use optimize\" is too long and not specific enough\nnow turn on class closing and finalization with \"use oo :closed :final\"\n\n\nModified: doc/trunk/design/syn/S12.pod\n==============================================================================\n--- doc/trunk/design/syn/S12.pod\t(original)\n+++ doc/trunk/design/syn/S12.pod\tSat May 19 09:06:10 2007\n@@ -12,9 +12,9 @@\n \n   Maintainer: Larry Wall \n   Date: 27 Oct 2004\n-  Last Modified: 14 May 2007\n+  Last Modified: 19 May 2007\n   Number: 12\n-  Version: 50\n+  Version: 51\n \n =head1 Overview\n \n@@ -1649,9 +1649,10 @@\n \n =head1 Open vs Closed Classes\n \n-By default, all classes in Perl are non-final, which means you can derive\n-from them.  They are also open, which means you can add more methods\n-to them, though you have to be explicit that that is what you're doing:\n+By default, all classes in Perl are non-final (\"super\"), which means\n+you can potentially derive from them.  They are also open, which means\n+you can add more methods to them, though you have to be explicit that\n+that is what you're doing:\n \n     class Object is also {\n         method wow () { say \"Wow, I'm an object.\" }\n@@ -1662,24 +1663,25 @@\n don't do that.)\n \n For optimization purposes, Perl\u00a06 gives the top-level application the\n-right to close and finalize classes.\n+right to close and finalize classes by the use of C, a pragma for\n+selecting global semantics of the underlying object-oriented engine:\n \n-    use optimize :classes;\n+    use oo :closed :final;\n \n This merely changes the application's default to closed and final,\n which means that at the end of the main compilation (C time)\n the optimizer is allowed to look for candidate classes to close or\n finalize.  But anyone (including the main application) can request\n-that any class stay open or basal, and the class closer/finalizer\n+that any class stay open or super, and the class closer/finalizer\n must honor that.\n \n-    use class :open :basal\n+    use class :open :super\n \n These properties may also be specified on the class definition:\n \n     class Mammal is open {...}\n     class Insect is open {...}\n-    class Str is basal {...}\n+    class Str is super {...}\n \n or by lexically scoped pragma around the class definition:\n \n@@ -1689,7 +1691,7 @@\n         class Insect {...}\n     }\n     {\n-        use class :basal;\n+        use class :super;\n         class Str {...}\n     }\n \n\n"}